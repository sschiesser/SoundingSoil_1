
SoundingSoil_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b084  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000b084  0000b084  0001b084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000018c  20000000  0000b08c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000018bc  2000018c  0000b218  0002018c  2**2
                  ALLOC
  4 .stack        00002000  20001a48  0000cad4  0002018c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
  7 .debug_info   0006aa3c  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008c95  00000000  00000000  0008ac49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016e5a  00000000  00000000  000938de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001100  00000000  00000000  000aa738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000019f8  00000000  00000000  000ab838  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00026a0a  00000000  00000000  000ad230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001ff4e  00000000  00000000  000d3c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a0018  00000000  00000000  000f3b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003540  00000000  00000000  00193ba0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 3a 00 20 45 8f 00 00 41 8f 00 00 41 8f 00 00     H:. E...A...A...
	...
      2c:	41 8f 00 00 00 00 00 00 00 00 00 00 41 8f 00 00     A...........A...
      3c:	41 8f 00 00 41 8f 00 00 41 8f 00 00 41 8f 00 00     A...A...A...A...
      4c:	41 8f 00 00 c1 76 00 00 41 8f 00 00 41 8f 00 00     A....v..A...A...
      5c:	7d 6e 00 00 41 8f 00 00 15 26 00 00 25 26 00 00     }n..A....&..%&..
      6c:	35 26 00 00 45 26 00 00 55 26 00 00 65 26 00 00     5&..E&..U&..e&..
      7c:	e1 09 00 00 f1 09 00 00 01 0a 00 00 41 8f 00 00     ............A...
      8c:	41 8f 00 00 41 8f 00 00 41 8f 00 00 41 8f 00 00     A...A...A...A...
      9c:	41 8f 00 00 41 8f 00 00 41 8f 00 00 41 8f 00 00     A...A...A...A...
      ac:	41 8f 00 00 00 00 00 00                             A.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000018c 	.word	0x2000018c
      d4:	00000000 	.word	0x00000000
      d8:	0000b08c 	.word	0x0000b08c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000190 	.word	0x20000190
     108:	0000b08c 	.word	0x0000b08c
     10c:	0000b08c 	.word	0x0000b08c
     110:	00000000 	.word	0x00000000

00000114 <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     114:	1c93      	adds	r3, r2, #2
     116:	009b      	lsls	r3, r3, #2
     118:	18c3      	adds	r3, r0, r3
     11a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
     11c:	2136      	movs	r1, #54	; 0x36
     11e:	2301      	movs	r3, #1
     120:	4093      	lsls	r3, r2
     122:	001a      	movs	r2, r3
     124:	5c43      	ldrb	r3, [r0, r1]
     126:	4313      	orrs	r3, r2
     128:	5443      	strb	r3, [r0, r1]
}
     12a:	4770      	bx	lr

0000012c <spi_read_buffer_job>:
enum status_code spi_read_buffer_job(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     12c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     12e:	2417      	movs	r4, #23
	if (length == 0) {
     130:	2a00      	cmp	r2, #0
     132:	d101      	bne.n	138 <spi_read_buffer_job+0xc>

	dummy_write = dummy;
	/* Issue internal read */
	_spi_read_buffer(module, rx_data, length);
	return STATUS_OK;
}
     134:	0020      	movs	r0, r4
     136:	bd30      	pop	{r4, r5, pc}
	if (!(module->receiver_enabled)) {
     138:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
     13a:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
     13c:	2d00      	cmp	r5, #0
     13e:	d0f9      	beq.n	134 <spi_read_buffer_job+0x8>
	if (module->status == STATUS_BUSY) {
     140:	341c      	adds	r4, #28
     142:	5d05      	ldrb	r5, [r0, r4]
		return STATUS_BUSY;
     144:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
     146:	2d05      	cmp	r5, #5
     148:	d0f4      	beq.n	134 <spi_read_buffer_job+0x8>
	dummy_write = dummy;
     14a:	4c0f      	ldr	r4, [pc, #60]	; (188 <spi_read_buffer_job+0x5c>)
     14c:	8023      	strh	r3, [r4, #0]
	module->remaining_rx_buffer_length = length;
     14e:	8602      	strh	r2, [r0, #48]	; 0x30
	module->remaining_dummy_buffer_length = length;
     150:	8642      	strh	r2, [r0, #50]	; 0x32
	module->rx_buffer_ptr = rx_data;
     152:	6281      	str	r1, [r0, #40]	; 0x28
	module->status = STATUS_BUSY;
     154:	2205      	movs	r2, #5
     156:	2338      	movs	r3, #56	; 0x38
     158:	54c2      	strb	r2, [r0, r3]
	module->dir = SPI_DIRECTION_READ;
     15a:	2300      	movs	r3, #0
     15c:	7243      	strb	r3, [r0, #9]
	SercomSpi *const hw = &(module->hw->SPI);
     15e:	6803      	ldr	r3, [r0, #0]
	if (module->mode == SPI_MODE_MASTER && module->dir == SPI_DIRECTION_READ) {
     160:	7942      	ldrb	r2, [r0, #5]
     162:	2a01      	cmp	r2, #1
     164:	d009      	beq.n	17a <spi_read_buffer_job+0x4e>
	if (module->mode == SPI_MODE_SLAVE) {
     166:	2a00      	cmp	r2, #0
     168:	d10c      	bne.n	184 <spi_read_buffer_job+0x58>
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     16a:	3202      	adds	r2, #2
     16c:	761a      	strb	r2, [r3, #24]
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     16e:	3206      	adds	r2, #6
     170:	761a      	strb	r2, [r3, #24]
		tmp_intenset |= SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     172:	3206      	adds	r2, #6
	hw->INTENSET.reg = tmp_intenset;
     174:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
     176:	2400      	movs	r4, #0
     178:	e7dc      	b.n	134 <spi_read_buffer_job+0x8>
	if (module->mode == SPI_MODE_MASTER && module->dir == SPI_DIRECTION_READ) {
     17a:	7a42      	ldrb	r2, [r0, #9]
		tmp_intenset |= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     17c:	4251      	negs	r1, r2
     17e:	414a      	adcs	r2, r1
     180:	3204      	adds	r2, #4
     182:	e7f7      	b.n	174 <spi_read_buffer_job+0x48>
	tmp_intenset = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     184:	2204      	movs	r2, #4
     186:	e7f5      	b.n	174 <spi_read_buffer_job+0x48>
     188:	20000368 	.word	0x20000368

0000018c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     18e:	0080      	lsls	r0, r0, #2
     190:	4b85      	ldr	r3, [pc, #532]	; (3a8 <_spi_interrupt_handler+0x21c>)
     192:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     194:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     196:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
     198:	5ce3      	ldrb	r3, [r4, r3]
     19a:	2236      	movs	r2, #54	; 0x36
     19c:	5ca7      	ldrb	r7, [r4, r2]
     19e:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     1a0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     1a2:	7db5      	ldrb	r5, [r6, #22]
     1a4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     1a6:	07eb      	lsls	r3, r5, #31
     1a8:	d52e      	bpl.n	208 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     1aa:	7963      	ldrb	r3, [r4, #5]
     1ac:	2b01      	cmp	r3, #1
     1ae:	d025      	beq.n	1fc <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     1b0:	2b00      	cmp	r3, #0
     1b2:	d129      	bne.n	208 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
     1b4:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
     1b6:	2b00      	cmp	r3, #0
     1b8:	d026      	beq.n	208 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     1ba:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     1bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     1be:	7813      	ldrb	r3, [r2, #0]
     1c0:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
     1c2:	1c50      	adds	r0, r2, #1
     1c4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     1c6:	79a0      	ldrb	r0, [r4, #6]
     1c8:	2801      	cmp	r0, #1
     1ca:	d100      	bne.n	1ce <_spi_interrupt_handler+0x42>
     1cc:	e069      	b.n	2a2 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     1ce:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     1d0:	05db      	lsls	r3, r3, #23
     1d2:	0ddb      	lsrs	r3, r3, #23
     1d4:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
     1d6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     1d8:	3b01      	subs	r3, #1
     1da:	b29b      	uxth	r3, r3
     1dc:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     1de:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     1e0:	b29b      	uxth	r3, r3
     1e2:	2b00      	cmp	r3, #0
     1e4:	d110      	bne.n	208 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     1e6:	3301      	adds	r3, #1
     1e8:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     1ea:	7a63      	ldrb	r3, [r4, #9]
     1ec:	2b01      	cmp	r3, #1
     1ee:	d10b      	bne.n	208 <_spi_interrupt_handler+0x7c>
     1f0:	79e3      	ldrb	r3, [r4, #7]
     1f2:	2b00      	cmp	r3, #0
     1f4:	d108      	bne.n	208 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     1f6:	3302      	adds	r3, #2
     1f8:	75b3      	strb	r3, [r6, #22]
     1fa:	e005      	b.n	208 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
     1fc:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     1fe:	2b00      	cmp	r3, #0
     200:	d03e      	beq.n	280 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
     202:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
     204:	2b00      	cmp	r3, #0
     206:	d1d8      	bne.n	1ba <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     208:	076b      	lsls	r3, r5, #29
     20a:	d511      	bpl.n	230 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     20c:	8b73      	ldrh	r3, [r6, #26]
     20e:	075b      	lsls	r3, r3, #29
     210:	d551      	bpl.n	2b6 <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
     212:	7a63      	ldrb	r3, [r4, #9]
     214:	2b01      	cmp	r3, #1
     216:	d008      	beq.n	22a <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     218:	221e      	movs	r2, #30
     21a:	2338      	movs	r3, #56	; 0x38
     21c:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     21e:	3b35      	subs	r3, #53	; 0x35
     220:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     222:	3302      	adds	r3, #2
     224:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     226:	073b      	lsls	r3, r7, #28
     228:	d441      	bmi.n	2ae <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     22a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     22c:	2304      	movs	r3, #4
     22e:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     230:	07ab      	lsls	r3, r5, #30
     232:	d515      	bpl.n	260 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     234:	7963      	ldrb	r3, [r4, #5]
     236:	2b00      	cmp	r3, #0
     238:	d10e      	bne.n	258 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
     23a:	3307      	adds	r3, #7
     23c:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     23e:	3b05      	subs	r3, #5
     240:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
     242:	3301      	adds	r3, #1
     244:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
     246:	2300      	movs	r3, #0
     248:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
     24a:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
     24c:	3338      	adds	r3, #56	; 0x38
     24e:	2200      	movs	r2, #0
     250:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
     252:	06fb      	lsls	r3, r7, #27
     254:	d500      	bpl.n	258 <_spi_interrupt_handler+0xcc>
     256:	e07f      	b.n	358 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     258:	7963      	ldrb	r3, [r4, #5]
     25a:	2b01      	cmp	r3, #1
     25c:	d100      	bne.n	260 <_spi_interrupt_handler+0xd4>
     25e:	e07f      	b.n	360 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     260:	072b      	lsls	r3, r5, #28
     262:	d508      	bpl.n	276 <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
     264:	7963      	ldrb	r3, [r4, #5]
     266:	2b00      	cmp	r3, #0
     268:	d105      	bne.n	276 <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     26a:	3308      	adds	r3, #8
     26c:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     26e:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     270:	06bb      	lsls	r3, r7, #26
     272:	d500      	bpl.n	276 <_spi_interrupt_handler+0xea>
     274:	e08a      	b.n	38c <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     276:	b26d      	sxtb	r5, r5
     278:	2d00      	cmp	r5, #0
     27a:	da00      	bge.n	27e <_spi_interrupt_handler+0xf2>
     27c:	e08a      	b.n	394 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
     27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
     280:	4b4a      	ldr	r3, [pc, #296]	; (3ac <_spi_interrupt_handler+0x220>)
     282:	881b      	ldrh	r3, [r3, #0]
     284:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     286:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     288:	3b01      	subs	r3, #1
     28a:	b29b      	uxth	r3, r3
     28c:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
     28e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     290:	b29b      	uxth	r3, r3
     292:	2b00      	cmp	r3, #0
     294:	d101      	bne.n	29a <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     296:	3301      	adds	r3, #1
     298:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
     29a:	7963      	ldrb	r3, [r4, #5]
		if (0
     29c:	2b01      	cmp	r3, #1
     29e:	d0b0      	beq.n	202 <_spi_interrupt_handler+0x76>
     2a0:	e786      	b.n	1b0 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     2a2:	7850      	ldrb	r0, [r2, #1]
     2a4:	0200      	lsls	r0, r0, #8
     2a6:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
     2a8:	3202      	adds	r2, #2
     2aa:	62e2      	str	r2, [r4, #44]	; 0x2c
     2ac:	e790      	b.n	1d0 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     2ae:	0020      	movs	r0, r4
     2b0:	69a3      	ldr	r3, [r4, #24]
     2b2:	4798      	blx	r3
     2b4:	e7b9      	b.n	22a <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
     2b6:	7a63      	ldrb	r3, [r4, #9]
     2b8:	2b01      	cmp	r3, #1
     2ba:	d027      	beq.n	30c <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     2bc:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     2c0:	05db      	lsls	r3, r3, #23
     2c2:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
     2c4:	b2da      	uxtb	r2, r3
     2c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     2c8:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
     2ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     2cc:	1c51      	adds	r1, r2, #1
     2ce:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     2d0:	79a1      	ldrb	r1, [r4, #6]
     2d2:	2901      	cmp	r1, #1
     2d4:	d033      	beq.n	33e <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
     2d6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     2d8:	3b01      	subs	r3, #1
     2da:	b29b      	uxth	r3, r3
     2dc:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
     2de:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     2e0:	b29b      	uxth	r3, r3
     2e2:	2b00      	cmp	r3, #0
     2e4:	d1a4      	bne.n	230 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
     2e6:	2200      	movs	r2, #0
     2e8:	3338      	adds	r3, #56	; 0x38
     2ea:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     2ec:	3b34      	subs	r3, #52	; 0x34
     2ee:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     2f0:	7a63      	ldrb	r3, [r4, #9]
     2f2:	2b02      	cmp	r3, #2
     2f4:	d029      	beq.n	34a <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
     2f6:	7a63      	ldrb	r3, [r4, #9]
     2f8:	2b00      	cmp	r3, #0
     2fa:	d000      	beq.n	2fe <_spi_interrupt_handler+0x172>
     2fc:	e798      	b.n	230 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     2fe:	07bb      	lsls	r3, r7, #30
     300:	d400      	bmi.n	304 <_spi_interrupt_handler+0x178>
     302:	e795      	b.n	230 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     304:	0020      	movs	r0, r4
     306:	6923      	ldr	r3, [r4, #16]
     308:	4798      	blx	r3
     30a:	e791      	b.n	230 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     30c:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
     30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     310:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     312:	3b01      	subs	r3, #1
     314:	b29b      	uxth	r3, r3
     316:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
     318:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     31a:	b29b      	uxth	r3, r3
     31c:	2b00      	cmp	r3, #0
     31e:	d000      	beq.n	322 <_spi_interrupt_handler+0x196>
     320:	e786      	b.n	230 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     322:	3304      	adds	r3, #4
     324:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
     326:	2200      	movs	r2, #0
     328:	3334      	adds	r3, #52	; 0x34
     32a:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
     32c:	3b35      	subs	r3, #53	; 0x35
     32e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
     330:	07fb      	lsls	r3, r7, #31
     332:	d400      	bmi.n	336 <_spi_interrupt_handler+0x1aa>
     334:	e77c      	b.n	230 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     336:	0020      	movs	r0, r4
     338:	68e3      	ldr	r3, [r4, #12]
     33a:	4798      	blx	r3
     33c:	e778      	b.n	230 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
     33e:	0a1b      	lsrs	r3, r3, #8
     340:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
     342:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     344:	3301      	adds	r3, #1
     346:	62a3      	str	r3, [r4, #40]	; 0x28
     348:	e7c5      	b.n	2d6 <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     34a:	077b      	lsls	r3, r7, #29
     34c:	d400      	bmi.n	350 <_spi_interrupt_handler+0x1c4>
     34e:	e76f      	b.n	230 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     350:	0020      	movs	r0, r4
     352:	6963      	ldr	r3, [r4, #20]
     354:	4798      	blx	r3
     356:	e76b      	b.n	230 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
     358:	0020      	movs	r0, r4
     35a:	69e3      	ldr	r3, [r4, #28]
     35c:	4798      	blx	r3
     35e:	e77b      	b.n	258 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     360:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     362:	2b01      	cmp	r3, #1
     364:	d000      	beq.n	368 <_spi_interrupt_handler+0x1dc>
     366:	e786      	b.n	276 <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     368:	79e3      	ldrb	r3, [r4, #7]
     36a:	2b00      	cmp	r3, #0
     36c:	d000      	beq.n	370 <_spi_interrupt_handler+0x1e4>
     36e:	e782      	b.n	276 <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
     370:	3302      	adds	r3, #2
     372:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
     374:	3301      	adds	r3, #1
     376:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
     378:	2200      	movs	r2, #0
     37a:	3335      	adds	r3, #53	; 0x35
     37c:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     37e:	07fb      	lsls	r3, r7, #31
     380:	d400      	bmi.n	384 <_spi_interrupt_handler+0x1f8>
     382:	e76d      	b.n	260 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
     384:	0020      	movs	r0, r4
     386:	68e3      	ldr	r3, [r4, #12]
     388:	4798      	blx	r3
     38a:	e769      	b.n	260 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
     38c:	0020      	movs	r0, r4
     38e:	6a23      	ldr	r3, [r4, #32]
     390:	4798      	blx	r3
     392:	e770      	b.n	276 <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     394:	2380      	movs	r3, #128	; 0x80
     396:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     398:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     39a:	067b      	lsls	r3, r7, #25
     39c:	d400      	bmi.n	3a0 <_spi_interrupt_handler+0x214>
     39e:	e76e      	b.n	27e <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     3a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
     3a2:	0020      	movs	r0, r4
     3a4:	4798      	blx	r3
}
     3a6:	e76a      	b.n	27e <_spi_interrupt_handler+0xf2>
     3a8:	200003bc 	.word	0x200003bc
     3ac:	20000368 	.word	0x20000368

000003b0 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
     3b0:	4b09      	ldr	r3, [pc, #36]	; (3d8 <_tcc_get_inst_index+0x28>)
     3b2:	4298      	cmp	r0, r3
     3b4:	d00c      	beq.n	3d0 <_tcc_get_inst_index+0x20>
     3b6:	4b09      	ldr	r3, [pc, #36]	; (3dc <_tcc_get_inst_index+0x2c>)
     3b8:	4298      	cmp	r0, r3
     3ba:	d007      	beq.n	3cc <_tcc_get_inst_index+0x1c>
     3bc:	4a08      	ldr	r2, [pc, #32]	; (3e0 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     3be:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
     3c0:	4290      	cmp	r0, r2
     3c2:	d001      	beq.n	3c8 <_tcc_get_inst_index+0x18>
}
     3c4:	0018      	movs	r0, r3
     3c6:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     3c8:	3302      	adds	r3, #2
     3ca:	e002      	b.n	3d2 <_tcc_get_inst_index+0x22>
     3cc:	2301      	movs	r3, #1
     3ce:	e000      	b.n	3d2 <_tcc_get_inst_index+0x22>
     3d0:	2300      	movs	r3, #0
			return i;
     3d2:	b2db      	uxtb	r3, r3
     3d4:	e7f6      	b.n	3c4 <_tcc_get_inst_index+0x14>
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	42002000 	.word	0x42002000
     3dc:	42002400 	.word	0x42002400
     3e0:	42002800 	.word	0x42002800

000003e4 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
     3e4:	b510      	push	{r4, lr}
     3e6:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     3e8:	0008      	movs	r0, r1
     3ea:	4b4f      	ldr	r3, [pc, #316]	; (528 <tcc_get_config_defaults+0x144>)
     3ec:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
     3ee:	2300      	movs	r3, #0
     3f0:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
     3f2:	0080      	lsls	r0, r0, #2
     3f4:	4a4d      	ldr	r2, [pc, #308]	; (52c <tcc_get_config_defaults+0x148>)
     3f6:	5882      	ldr	r2, [r0, r2]
     3f8:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
     3fa:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     3fc:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     3fe:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     400:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     402:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     404:	61e3      	str	r3, [r4, #28]
     406:	6223      	str	r3, [r4, #32]
     408:	6263      	str	r3, [r4, #36]	; 0x24
     40a:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     40c:	7523      	strb	r3, [r4, #20]
     40e:	7563      	strb	r3, [r4, #21]
     410:	75a3      	strb	r3, [r4, #22]
     412:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     414:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     416:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     418:	7423      	strb	r3, [r4, #16]
     41a:	7463      	strb	r3, [r4, #17]
     41c:	74a3      	strb	r3, [r4, #18]
     41e:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     420:	222c      	movs	r2, #44	; 0x2c
     422:	54a3      	strb	r3, [r4, r2]
     424:	3201      	adds	r2, #1
     426:	54a3      	strb	r3, [r4, r2]
     428:	3201      	adds	r2, #1
     42a:	54a3      	strb	r3, [r4, r2]
     42c:	3201      	adds	r2, #1
     42e:	54a3      	strb	r3, [r4, r2]
     430:	3201      	adds	r2, #1
     432:	54a3      	strb	r3, [r4, r2]
     434:	3201      	adds	r2, #1
     436:	54a3      	strb	r3, [r4, r2]
     438:	3201      	adds	r2, #1
     43a:	54a3      	strb	r3, [r4, r2]
     43c:	3201      	adds	r2, #1
     43e:	54a3      	strb	r3, [r4, r2]
     440:	3201      	adds	r2, #1
     442:	54a3      	strb	r3, [r4, r2]
     444:	3201      	adds	r2, #1
     446:	54a3      	strb	r3, [r4, r2]
     448:	3201      	adds	r2, #1
     44a:	54a3      	strb	r3, [r4, r2]
     44c:	3201      	adds	r2, #1
     44e:	54a3      	strb	r3, [r4, r2]
     450:	3201      	adds	r2, #1
     452:	54a3      	strb	r3, [r4, r2]
     454:	3201      	adds	r2, #1
     456:	54a3      	strb	r3, [r4, r2]
     458:	3201      	adds	r2, #1
     45a:	54a3      	strb	r3, [r4, r2]
     45c:	3201      	adds	r2, #1
     45e:	54a3      	strb	r3, [r4, r2]
     460:	3201      	adds	r2, #1
     462:	54a3      	strb	r3, [r4, r2]
     464:	3201      	adds	r2, #1
     466:	54a3      	strb	r3, [r4, r2]
     468:	3201      	adds	r2, #1
     46a:	54a3      	strb	r3, [r4, r2]
     46c:	3201      	adds	r2, #1
     46e:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     470:	3201      	adds	r2, #1
     472:	54a3      	strb	r3, [r4, r2]
     474:	3201      	adds	r2, #1
     476:	54a3      	strb	r3, [r4, r2]
     478:	3201      	adds	r2, #1
     47a:	54a3      	strb	r3, [r4, r2]
     47c:	3201      	adds	r2, #1
     47e:	54a3      	strb	r3, [r4, r2]
     480:	3201      	adds	r2, #1
     482:	54a3      	strb	r3, [r4, r2]
     484:	3201      	adds	r2, #1
     486:	54a3      	strb	r3, [r4, r2]
     488:	3201      	adds	r2, #1
     48a:	54a3      	strb	r3, [r4, r2]
     48c:	3201      	adds	r2, #1
     48e:	54a3      	strb	r3, [r4, r2]
     490:	3201      	adds	r2, #1
     492:	54a3      	strb	r3, [r4, r2]
     494:	3201      	adds	r2, #1
     496:	54a3      	strb	r3, [r4, r2]
     498:	3201      	adds	r2, #1
     49a:	54a3      	strb	r3, [r4, r2]
     49c:	3201      	adds	r2, #1
     49e:	54a3      	strb	r3, [r4, r2]
     4a0:	3201      	adds	r2, #1
     4a2:	54a3      	strb	r3, [r4, r2]
     4a4:	3201      	adds	r2, #1
     4a6:	54a3      	strb	r3, [r4, r2]
     4a8:	3201      	adds	r2, #1
     4aa:	54a3      	strb	r3, [r4, r2]
     4ac:	3201      	adds	r2, #1
     4ae:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     4b0:	3201      	adds	r2, #1
     4b2:	54a3      	strb	r3, [r4, r2]
     4b4:	3201      	adds	r2, #1
     4b6:	54a3      	strb	r3, [r4, r2]
     4b8:	3201      	adds	r2, #1
     4ba:	54a3      	strb	r3, [r4, r2]
     4bc:	3201      	adds	r2, #1
     4be:	54a3      	strb	r3, [r4, r2]
     4c0:	3201      	adds	r2, #1
     4c2:	54a3      	strb	r3, [r4, r2]
     4c4:	3201      	adds	r2, #1
     4c6:	54a3      	strb	r3, [r4, r2]
     4c8:	3201      	adds	r2, #1
     4ca:	54a3      	strb	r3, [r4, r2]
     4cc:	3201      	adds	r2, #1
     4ce:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     4d0:	3241      	adds	r2, #65	; 0x41
     4d2:	54a3      	strb	r3, [r4, r2]
     4d4:	65a3      	str	r3, [r4, #88]	; 0x58
     4d6:	67a3      	str	r3, [r4, #120]	; 0x78
     4d8:	3201      	adds	r2, #1
     4da:	54a3      	strb	r3, [r4, r2]
     4dc:	65e3      	str	r3, [r4, #92]	; 0x5c
     4de:	67e3      	str	r3, [r4, #124]	; 0x7c
     4e0:	3201      	adds	r2, #1
     4e2:	54a3      	strb	r3, [r4, r2]
     4e4:	6623      	str	r3, [r4, #96]	; 0x60
     4e6:	3a1a      	subs	r2, #26
     4e8:	50a3      	str	r3, [r4, r2]
     4ea:	321b      	adds	r2, #27
     4ec:	54a3      	strb	r3, [r4, r2]
     4ee:	6663      	str	r3, [r4, #100]	; 0x64
     4f0:	3a17      	subs	r2, #23
     4f2:	50a3      	str	r3, [r4, r2]
     4f4:	3218      	adds	r2, #24
     4f6:	54a3      	strb	r3, [r4, r2]
     4f8:	66a3      	str	r3, [r4, #104]	; 0x68
     4fa:	3a14      	subs	r2, #20
     4fc:	50a3      	str	r3, [r4, r2]
     4fe:	3215      	adds	r2, #21
     500:	54a3      	strb	r3, [r4, r2]
     502:	66e3      	str	r3, [r4, #108]	; 0x6c
     504:	3a11      	subs	r2, #17
     506:	50a3      	str	r3, [r4, r2]
     508:	3212      	adds	r2, #18
     50a:	54a3      	strb	r3, [r4, r2]
     50c:	6723      	str	r3, [r4, #112]	; 0x70
     50e:	3a0e      	subs	r2, #14
     510:	50a3      	str	r3, [r4, r2]
     512:	320f      	adds	r2, #15
     514:	54a3      	strb	r3, [r4, r2]
     516:	6763      	str	r3, [r4, #116]	; 0x74
     518:	3a0b      	subs	r2, #11
     51a:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
     51c:	2101      	movs	r1, #1
     51e:	320c      	adds	r2, #12
     520:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     522:	3201      	adds	r2, #1
     524:	54a3      	strb	r3, [r4, r2]
}
     526:	bd10      	pop	{r4, pc}
     528:	000003b1 	.word	0x000003b1
     52c:	0000a65c 	.word	0x0000a65c

00000530 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
     530:	b5f0      	push	{r4, r5, r6, r7, lr}
     532:	46de      	mov	lr, fp
     534:	4657      	mov	r7, sl
     536:	464e      	mov	r6, r9
     538:	4645      	mov	r5, r8
     53a:	b5e0      	push	{r5, r6, r7, lr}
     53c:	b091      	sub	sp, #68	; 0x44
     53e:	9001      	str	r0, [sp, #4]
     540:	000c      	movs	r4, r1
     542:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     544:	0008      	movs	r0, r1
     546:	4bc3      	ldr	r3, [pc, #780]	; (854 <tcc_init+0x324>)
     548:	4798      	blx	r3
     54a:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     54c:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     54e:	48c2      	ldr	r0, [pc, #776]	; (858 <tcc_init+0x328>)
     550:	6a02      	ldr	r2, [r0, #32]
     552:	009e      	lsls	r6, r3, #2
     554:	4fc1      	ldr	r7, [pc, #772]	; (85c <tcc_init+0x32c>)
     556:	59f7      	ldr	r7, [r6, r7]
     558:	433a      	orrs	r2, r7
     55a:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     55c:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     55e:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     560:	0792      	lsls	r2, r2, #30
     562:	d506      	bpl.n	572 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
     564:	b011      	add	sp, #68	; 0x44
     566:	bc3c      	pop	{r2, r3, r4, r5}
     568:	4690      	mov	r8, r2
     56a:	4699      	mov	r9, r3
     56c:	46a2      	mov	sl, r4
     56e:	46ab      	mov	fp, r5
     570:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     572:	6822      	ldr	r2, [r4, #0]
     574:	2701      	movs	r7, #1
     576:	4017      	ands	r7, r2
     578:	d1f4      	bne.n	564 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
     57a:	48b9      	ldr	r0, [pc, #740]	; (860 <tcc_init+0x330>)
     57c:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
     57e:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
     580:	682e      	ldr	r6, [r5, #0]
     582:	42b2      	cmp	r2, r6
     584:	d3ee      	bcc.n	564 <tcc_init+0x34>
		|| (config->counter.period > count_max)
     586:	686e      	ldr	r6, [r5, #4]
     588:	42b2      	cmp	r2, r6
     58a:	d3eb      	bcc.n	564 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
     58c:	69e8      	ldr	r0, [r5, #28]
     58e:	4282      	cmp	r2, r0
     590:	d200      	bcs.n	594 <tcc_init+0x64>
     592:	e1b9      	b.n	908 <tcc_init+0x3d8>
     594:	6a28      	ldr	r0, [r5, #32]
     596:	4282      	cmp	r2, r0
     598:	d200      	bcs.n	59c <tcc_init+0x6c>
     59a:	e1b7      	b.n	90c <tcc_init+0x3dc>
     59c:	6a68      	ldr	r0, [r5, #36]	; 0x24
     59e:	4282      	cmp	r2, r0
     5a0:	d200      	bcs.n	5a4 <tcc_init+0x74>
     5a2:	e1b5      	b.n	910 <tcc_init+0x3e0>
     5a4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     5a6:	4282      	cmp	r2, r0
     5a8:	d200      	bcs.n	5ac <tcc_init+0x7c>
     5aa:	e1b3      	b.n	914 <tcc_init+0x3e4>
     5ac:	2298      	movs	r2, #152	; 0x98
     5ae:	4694      	mov	ip, r2
     5b0:	44ac      	add	ip, r5
     5b2:	4662      	mov	r2, ip
     5b4:	9208      	str	r2, [sp, #32]
     5b6:	2000      	movs	r0, #0
     5b8:	e003      	b.n	5c2 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     5ba:	3001      	adds	r0, #1
     5bc:	3201      	adds	r2, #1
     5be:	2808      	cmp	r0, #8
     5c0:	d008      	beq.n	5d4 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
     5c2:	7816      	ldrb	r6, [r2, #0]
     5c4:	2e00      	cmp	r6, #0
     5c6:	d0f8      	beq.n	5ba <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
     5c8:	4ea6      	ldr	r6, [pc, #664]	; (864 <tcc_init+0x334>)
     5ca:	5c76      	ldrb	r6, [r6, r1]
     5cc:	4286      	cmp	r6, r0
     5ce:	dcf4      	bgt.n	5ba <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
     5d0:	2017      	movs	r0, #23
     5d2:	e7c7      	b.n	564 <tcc_init+0x34>
     5d4:	2200      	movs	r2, #0
     5d6:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     5d8:	2080      	movs	r0, #128	; 0x80
     5da:	0440      	lsls	r0, r0, #17
     5dc:	4684      	mov	ip, r0
     5de:	e002      	b.n	5e6 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     5e0:	3201      	adds	r2, #1
     5e2:	2a04      	cmp	r2, #4
     5e4:	d00e      	beq.n	604 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
     5e6:	18a8      	adds	r0, r5, r2
     5e8:	7c00      	ldrb	r0, [r0, #16]
     5ea:	2801      	cmp	r0, #1
     5ec:	d1f8      	bne.n	5e0 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
     5ee:	489e      	ldr	r0, [pc, #632]	; (868 <tcc_init+0x338>)
     5f0:	5c40      	ldrb	r0, [r0, r1]
     5f2:	4290      	cmp	r0, r2
     5f4:	da00      	bge.n	5f8 <tcc_init+0xc8>
     5f6:	e18f      	b.n	918 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     5f8:	4660      	mov	r0, ip
     5fa:	4090      	lsls	r0, r2
     5fc:	9e02      	ldr	r6, [sp, #8]
     5fe:	4306      	orrs	r6, r0
     600:	9602      	str	r6, [sp, #8]
     602:	e7ed      	b.n	5e0 <tcc_init+0xb0>
	if (config->run_in_standby) {
     604:	329d      	adds	r2, #157	; 0x9d
     606:	5caa      	ldrb	r2, [r5, r2]
     608:	2a00      	cmp	r2, #0
     60a:	d004      	beq.n	616 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     60c:	2280      	movs	r2, #128	; 0x80
     60e:	0112      	lsls	r2, r2, #4
     610:	9902      	ldr	r1, [sp, #8]
     612:	4311      	orrs	r1, r2
     614:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
     616:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     618:	1e51      	subs	r1, r2, #1
     61a:	418a      	sbcs	r2, r1
     61c:	0092      	lsls	r2, r2, #2
     61e:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     620:	7a6a      	ldrb	r2, [r5, #9]
     622:	2a01      	cmp	r2, #1
     624:	d022      	beq.n	66c <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
     626:	4a90      	ldr	r2, [pc, #576]	; (868 <tcc_init+0x338>)
     628:	5cd2      	ldrb	r2, [r2, r3]
     62a:	0011      	movs	r1, r2
     62c:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
     62e:	2235      	movs	r2, #53	; 0x35
     630:	5caa      	ldrb	r2, [r5, r2]
     632:	428a      	cmp	r2, r1
     634:	d300      	bcc.n	638 <tcc_init+0x108>
     636:	e179      	b.n	92c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     638:	212c      	movs	r1, #44	; 0x2c
     63a:	5c69      	ldrb	r1, [r5, r1]
     63c:	290f      	cmp	r1, #15
     63e:	d900      	bls.n	642 <tcc_init+0x112>
     640:	e174      	b.n	92c <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     642:	7b28      	ldrb	r0, [r5, #12]
     644:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     646:	7ae8      	ldrb	r0, [r5, #11]
     648:	900b      	str	r0, [sp, #44]	; 0x2c
     64a:	202d      	movs	r0, #45	; 0x2d
     64c:	4682      	mov	sl, r0
     64e:	44aa      	add	sl, r5
     650:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     652:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
     654:	ae0e      	add	r6, sp, #56	; 0x38
     656:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     658:	26c0      	movs	r6, #192	; 0xc0
     65a:	0136      	lsls	r6, r6, #4
     65c:	46b1      	mov	r9, r6
     65e:	4684      	mov	ip, r0
     660:	46a0      	mov	r8, r4
     662:	0028      	movs	r0, r5
     664:	4655      	mov	r5, sl
     666:	9309      	str	r3, [sp, #36]	; 0x24
     668:	4682      	mov	sl, r0
     66a:	e035      	b.n	6d8 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
     66c:	9906      	ldr	r1, [sp, #24]
     66e:	4311      	orrs	r1, r2
     670:	9106      	str	r1, [sp, #24]
     672:	e7d8      	b.n	626 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     674:	0292      	lsls	r2, r2, #10
     676:	464f      	mov	r7, r9
     678:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     67a:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
     67c:	7919      	ldrb	r1, [r3, #4]
     67e:	468b      	mov	fp, r1
     680:	2103      	movs	r1, #3
     682:	465f      	mov	r7, fp
     684:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     686:	430a      	orrs	r2, r1
     688:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
     68a:	795a      	ldrb	r2, [r3, #5]
     68c:	0152      	lsls	r2, r2, #5
     68e:	2160      	movs	r1, #96	; 0x60
     690:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     692:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
     694:	7999      	ldrb	r1, [r3, #6]
     696:	0209      	lsls	r1, r1, #8
     698:	26c0      	movs	r6, #192	; 0xc0
     69a:	00b6      	lsls	r6, r6, #2
     69c:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     69e:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     6a0:	79da      	ldrb	r2, [r3, #7]
     6a2:	0312      	lsls	r2, r2, #12
     6a4:	21e0      	movs	r1, #224	; 0xe0
     6a6:	01c9      	lsls	r1, r1, #7
     6a8:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     6aa:	4316      	orrs	r6, r2
     6ac:	4334      	orrs	r4, r6
     6ae:	9a03      	ldr	r2, [sp, #12]
     6b0:	4314      	orrs	r4, r2
     6b2:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
     6b4:	4662      	mov	r2, ip
     6b6:	9907      	ldr	r1, [sp, #28]
     6b8:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     6ba:	2a04      	cmp	r2, #4
     6bc:	d02a      	beq.n	714 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
     6be:	7c9a      	ldrb	r2, [r3, #18]
     6c0:	9905      	ldr	r1, [sp, #20]
     6c2:	4291      	cmp	r1, r2
     6c4:	d800      	bhi.n	6c8 <tcc_init+0x198>
     6c6:	e131      	b.n	92c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     6c8:	7a59      	ldrb	r1, [r3, #9]
     6ca:	350a      	adds	r5, #10
     6cc:	2304      	movs	r3, #4
     6ce:	469b      	mov	fp, r3
     6d0:	44dc      	add	ip, fp
     6d2:	290f      	cmp	r1, #15
     6d4:	d900      	bls.n	6d8 <tcc_init+0x1a8>
     6d6:	e129      	b.n	92c <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     6d8:	0609      	lsls	r1, r1, #24
     6da:	23f0      	movs	r3, #240	; 0xf0
     6dc:	051b      	lsls	r3, r3, #20
     6de:	4019      	ands	r1, r3
     6e0:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     6e2:	782e      	ldrb	r6, [r5, #0]
     6e4:	0436      	lsls	r6, r6, #16
     6e6:	20ff      	movs	r0, #255	; 0xff
     6e8:	0400      	lsls	r0, r0, #16
     6ea:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     6ec:	7868      	ldrb	r0, [r5, #1]
     6ee:	2480      	movs	r4, #128	; 0x80
     6f0:	2800      	cmp	r0, #0
     6f2:	d100      	bne.n	6f6 <tcc_init+0x1c6>
     6f4:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     6f6:	7898      	ldrb	r0, [r3, #2]
     6f8:	2708      	movs	r7, #8
     6fa:	9703      	str	r7, [sp, #12]
     6fc:	2800      	cmp	r0, #0
     6fe:	d101      	bne.n	704 <tcc_init+0x1d4>
     700:	9804      	ldr	r0, [sp, #16]
     702:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     704:	78d8      	ldrb	r0, [r3, #3]
     706:	4683      	mov	fp, r0
     708:	2010      	movs	r0, #16
     70a:	465f      	mov	r7, fp
     70c:	2f00      	cmp	r7, #0
     70e:	d1b1      	bne.n	674 <tcc_init+0x144>
     710:	9804      	ldr	r0, [sp, #16]
     712:	e7af      	b.n	674 <tcc_init+0x144>
     714:	4644      	mov	r4, r8
     716:	4655      	mov	r5, sl
     718:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
     71a:	4a52      	ldr	r2, [pc, #328]	; (864 <tcc_init+0x334>)
     71c:	5cd2      	ldrb	r2, [r2, r3]
     71e:	4691      	mov	r9, r2
     720:	4651      	mov	r1, sl
     722:	3150      	adds	r1, #80	; 0x50
     724:	4650      	mov	r0, sl
     726:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
     728:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     72a:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     72c:	2601      	movs	r6, #1
     72e:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     730:	2602      	movs	r6, #2
     732:	36ff      	adds	r6, #255	; 0xff
     734:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     736:	2680      	movs	r6, #128	; 0x80
     738:	0276      	lsls	r6, r6, #9
     73a:	46b0      	mov	r8, r6
     73c:	46a4      	mov	ip, r4
     73e:	001c      	movs	r4, r3
     740:	464b      	mov	r3, r9
     742:	e00f      	b.n	764 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
     744:	7806      	ldrb	r6, [r0, #0]
     746:	2e00      	cmp	r6, #0
     748:	d007      	beq.n	75a <tcc_init+0x22a>
			if (i >= ow_num) {
     74a:	4293      	cmp	r3, r2
     74c:	d800      	bhi.n	750 <tcc_init+0x220>
     74e:	e0e7      	b.n	920 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     750:	2e02      	cmp	r6, #2
     752:	d014      	beq.n	77e <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     754:	4656      	mov	r6, sl
     756:	4096      	lsls	r6, r2
     758:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     75a:	3201      	adds	r2, #1
     75c:	3101      	adds	r1, #1
     75e:	3002      	adds	r0, #2
     760:	2a08      	cmp	r2, #8
     762:	d010      	beq.n	786 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
     764:	780e      	ldrb	r6, [r1, #0]
     766:	2e00      	cmp	r6, #0
     768:	d0ec      	beq.n	744 <tcc_init+0x214>
			if (i >= ow_num) {
     76a:	4293      	cmp	r3, r2
     76c:	d800      	bhi.n	770 <tcc_init+0x240>
     76e:	e0d5      	b.n	91c <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     770:	4646      	mov	r6, r8
     772:	4096      	lsls	r6, r2
     774:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
     776:	7806      	ldrb	r6, [r0, #0]
     778:	2e00      	cmp	r6, #0
     77a:	d1e9      	bne.n	750 <tcc_init+0x220>
     77c:	e7ed      	b.n	75a <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     77e:	465e      	mov	r6, fp
     780:	4096      	lsls	r6, r2
     782:	4337      	orrs	r7, r6
     784:	e7e9      	b.n	75a <tcc_init+0x22a>
     786:	4699      	mov	r9, r3
     788:	0023      	movs	r3, r4
     78a:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     78c:	7e6a      	ldrb	r2, [r5, #25]
     78e:	0112      	lsls	r2, r2, #4
     790:	2130      	movs	r1, #48	; 0x30
     792:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     794:	7e28      	ldrb	r0, [r5, #24]
     796:	2207      	movs	r2, #7
     798:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     79a:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     79c:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     79e:	2080      	movs	r0, #128	; 0x80
     7a0:	0240      	lsls	r0, r0, #9
     7a2:	000e      	movs	r6, r1
     7a4:	e002      	b.n	7ac <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     7a6:	3201      	adds	r2, #1
     7a8:	2a04      	cmp	r2, #4
     7aa:	d00b      	beq.n	7c4 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
     7ac:	18a9      	adds	r1, r5, r2
     7ae:	7d09      	ldrb	r1, [r1, #20]
     7b0:	2900      	cmp	r1, #0
     7b2:	d0f8      	beq.n	7a6 <tcc_init+0x276>
			if (n >= cc_num) {
     7b4:	9905      	ldr	r1, [sp, #20]
     7b6:	4291      	cmp	r1, r2
     7b8:	dc00      	bgt.n	7bc <tcc_init+0x28c>
     7ba:	e0b3      	b.n	924 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
     7bc:	0001      	movs	r1, r0
     7be:	4091      	lsls	r1, r2
     7c0:	430e      	orrs	r6, r1
     7c2:	e7f0      	b.n	7a6 <tcc_init+0x276>
     7c4:	46b2      	mov	sl, r6
     7c6:	9801      	ldr	r0, [sp, #4]
     7c8:	0002      	movs	r2, r0
     7ca:	3204      	adds	r2, #4
     7cc:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
     7ce:	2100      	movs	r1, #0
     7d0:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     7d2:	4282      	cmp	r2, r0
     7d4:	d1fc      	bne.n	7d0 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
     7d6:	2200      	movs	r2, #0
     7d8:	9801      	ldr	r0, [sp, #4]
     7da:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     7dc:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     7de:	0099      	lsls	r1, r3, #2
     7e0:	4a22      	ldr	r2, [pc, #136]	; (86c <tcc_init+0x33c>)
     7e2:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
     7e4:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     7e6:	22a0      	movs	r2, #160	; 0xa0
     7e8:	5ca9      	ldrb	r1, [r5, r2]
     7ea:	3a64      	subs	r2, #100	; 0x64
     7ec:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
     7ee:	a90d      	add	r1, sp, #52	; 0x34
     7f0:	7aaa      	ldrb	r2, [r5, #10]
     7f2:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     7f4:	4a1e      	ldr	r2, [pc, #120]	; (870 <tcc_init+0x340>)
     7f6:	5cd6      	ldrb	r6, [r2, r3]
     7f8:	0030      	movs	r0, r6
     7fa:	4b1e      	ldr	r3, [pc, #120]	; (874 <tcc_init+0x344>)
     7fc:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     7fe:	0030      	movs	r0, r6
     800:	4b1d      	ldr	r3, [pc, #116]	; (878 <tcc_init+0x348>)
     802:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     804:	464b      	mov	r3, r9
     806:	2b00      	cmp	r3, #0
     808:	dd3c      	ble.n	884 <tcc_init+0x354>
     80a:	002e      	movs	r6, r5
     80c:	3658      	adds	r6, #88	; 0x58
     80e:	3398      	adds	r3, #152	; 0x98
     810:	4698      	mov	r8, r3
     812:	44a8      	add	r8, r5
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     814:	2301      	movs	r3, #1
     816:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
     818:	46ab      	mov	fp, r5
     81a:	4645      	mov	r5, r8
     81c:	46a0      	mov	r8, r4
     81e:	9c08      	ldr	r4, [sp, #32]
     820:	e003      	b.n	82a <tcc_init+0x2fa>
     822:	3401      	adds	r4, #1
     824:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     826:	42ac      	cmp	r4, r5
     828:	d02a      	beq.n	880 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
     82a:	7823      	ldrb	r3, [r4, #0]
     82c:	2b00      	cmp	r3, #0
     82e:	d0f8      	beq.n	822 <tcc_init+0x2f2>
     830:	ab0c      	add	r3, sp, #48	; 0x30
     832:	464a      	mov	r2, r9
     834:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     836:	2300      	movs	r3, #0
     838:	aa0c      	add	r2, sp, #48	; 0x30
     83a:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     83c:	0013      	movs	r3, r2
     83e:	2220      	movs	r2, #32
     840:	18b2      	adds	r2, r6, r2
     842:	7812      	ldrb	r2, [r2, #0]
     844:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     846:	464a      	mov	r2, r9
     848:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     84a:	7830      	ldrb	r0, [r6, #0]
     84c:	0019      	movs	r1, r3
     84e:	4b0b      	ldr	r3, [pc, #44]	; (87c <tcc_init+0x34c>)
     850:	4798      	blx	r3
     852:	e7e6      	b.n	822 <tcc_init+0x2f2>
     854:	000003b1 	.word	0x000003b1
     858:	40000400 	.word	0x40000400
     85c:	0000a648 	.word	0x0000a648
     860:	0000a65c 	.word	0x0000a65c
     864:	0000a668 	.word	0x0000a668
     868:	0000a654 	.word	0x0000a654
     86c:	2000036c 	.word	0x2000036c
     870:	0000a658 	.word	0x0000a658
     874:	00008de9 	.word	0x00008de9
     878:	00008d5d 	.word	0x00008d5d
     87c:	00008ee1 	.word	0x00008ee1
     880:	4644      	mov	r4, r8
     882:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     886:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     888:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     88a:	0212      	lsls	r2, r2, #8
     88c:	4313      	orrs	r3, r2
     88e:	9a02      	ldr	r2, [sp, #8]
     890:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     892:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     894:	2204      	movs	r2, #4
     896:	68a3      	ldr	r3, [r4, #8]
     898:	421a      	tst	r2, r3
     89a:	d1fc      	bne.n	896 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
     89c:	23ff      	movs	r3, #255	; 0xff
     89e:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     8a0:	2204      	movs	r2, #4
     8a2:	68a3      	ldr	r3, [r4, #8]
     8a4:	421a      	tst	r2, r3
     8a6:	d1fc      	bne.n	8a2 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
     8a8:	466b      	mov	r3, sp
     8aa:	7e1b      	ldrb	r3, [r3, #24]
     8ac:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     8ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     8b0:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     8b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     8b4:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     8b6:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     8b8:	4a1d      	ldr	r2, [pc, #116]	; (930 <tcc_init+0x400>)
     8ba:	68a3      	ldr	r3, [r4, #8]
     8bc:	4213      	tst	r3, r2
     8be:	d1fc      	bne.n	8ba <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
     8c0:	4653      	mov	r3, sl
     8c2:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     8c4:	2210      	movs	r2, #16
     8c6:	68a3      	ldr	r3, [r4, #8]
     8c8:	421a      	tst	r2, r3
     8ca:	d1fc      	bne.n	8c6 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
     8cc:	682b      	ldr	r3, [r5, #0]
     8ce:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     8d0:	4a18      	ldr	r2, [pc, #96]	; (934 <tcc_init+0x404>)
     8d2:	68a3      	ldr	r3, [r4, #8]
     8d4:	4213      	tst	r3, r2
     8d6:	d1fc      	bne.n	8d2 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
     8d8:	686b      	ldr	r3, [r5, #4]
     8da:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     8dc:	9805      	ldr	r0, [sp, #20]
     8de:	2800      	cmp	r0, #0
     8e0:	dd22      	ble.n	928 <tcc_init+0x3f8>
     8e2:	351c      	adds	r5, #28
     8e4:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     8e6:	4e14      	ldr	r6, [pc, #80]	; (938 <tcc_init+0x408>)
     8e8:	0032      	movs	r2, r6
     8ea:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
     8ec:	68a3      	ldr	r3, [r4, #8]
     8ee:	421a      	tst	r2, r3
     8f0:	d1fc      	bne.n	8ec <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
     8f2:	cd04      	ldmia	r5!, {r2}
     8f4:	000b      	movs	r3, r1
     8f6:	3310      	adds	r3, #16
     8f8:	009b      	lsls	r3, r3, #2
     8fa:	18e3      	adds	r3, r4, r3
     8fc:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     8fe:	3101      	adds	r1, #1
     900:	4288      	cmp	r0, r1
     902:	dcf1      	bgt.n	8e8 <tcc_init+0x3b8>
	return STATUS_OK;
     904:	2000      	movs	r0, #0
     906:	e62d      	b.n	564 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
     908:	2017      	movs	r0, #23
     90a:	e62b      	b.n	564 <tcc_init+0x34>
     90c:	2017      	movs	r0, #23
     90e:	e629      	b.n	564 <tcc_init+0x34>
     910:	2017      	movs	r0, #23
     912:	e627      	b.n	564 <tcc_init+0x34>
     914:	2017      	movs	r0, #23
     916:	e625      	b.n	564 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     918:	2017      	movs	r0, #23
     91a:	e623      	b.n	564 <tcc_init+0x34>
			if (i >= ow_num) {
     91c:	2017      	movs	r0, #23
     91e:	e621      	b.n	564 <tcc_init+0x34>
			if (i >= ow_num) {
     920:	2017      	movs	r0, #23
     922:	e61f      	b.n	564 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     924:	2017      	movs	r0, #23
     926:	e61d      	b.n	564 <tcc_init+0x34>
	return STATUS_OK;
     928:	2000      	movs	r0, #0
     92a:	e61b      	b.n	564 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     92c:	2017      	movs	r0, #23
     92e:	e619      	b.n	564 <tcc_init+0x34>
     930:	00020040 	.word	0x00020040
     934:	00040080 	.word	0x00040080
     938:	00080100 	.word	0x00080100

0000093c <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     93c:	0092      	lsls	r2, r2, #2
     93e:	1883      	adds	r3, r0, r2
     940:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
     942:	4b03      	ldr	r3, [pc, #12]	; (950 <tcc_register_callback+0x14>)
     944:	58d3      	ldr	r3, [r2, r3]
     946:	6b42      	ldr	r2, [r0, #52]	; 0x34
     948:	4313      	orrs	r3, r2
     94a:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
     94c:	2000      	movs	r0, #0
     94e:	4770      	bx	lr
     950:	0000a66c 	.word	0x0000a66c

00000954 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
     954:	b570      	push	{r4, r5, r6, lr}
     956:	0004      	movs	r4, r0
     958:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
     95a:	6800      	ldr	r0, [r0, #0]
     95c:	4b09      	ldr	r3, [pc, #36]	; (984 <tcc_enable_callback+0x30>)
     95e:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
     960:	4b09      	ldr	r3, [pc, #36]	; (988 <tcc_enable_callback+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     962:	5c1b      	ldrb	r3, [r3, r0]
     964:	221f      	movs	r2, #31
     966:	401a      	ands	r2, r3
     968:	2301      	movs	r3, #1
     96a:	4093      	lsls	r3, r2
     96c:	4a07      	ldr	r2, [pc, #28]	; (98c <tcc_enable_callback+0x38>)
     96e:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
     970:	00ad      	lsls	r5, r5, #2
     972:	4b07      	ldr	r3, [pc, #28]	; (990 <tcc_enable_callback+0x3c>)
     974:	58ea      	ldr	r2, [r5, r3]
     976:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     978:	4313      	orrs	r3, r2
     97a:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
     97c:	6823      	ldr	r3, [r4, #0]
     97e:	629a      	str	r2, [r3, #40]	; 0x28
}
     980:	bd70      	pop	{r4, r5, r6, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	000003b1 	.word	0x000003b1
     988:	0000a69c 	.word	0x0000a69c
     98c:	e000e100 	.word	0xe000e100
     990:	0000a66c 	.word	0x0000a66c

00000994 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     994:	b5f0      	push	{r4, r5, r6, r7, lr}
     996:	46c6      	mov	lr, r8
     998:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     99a:	0080      	lsls	r0, r0, #2
     99c:	4b0e      	ldr	r3, [pc, #56]	; (9d8 <_tcc_interrupt_handler+0x44>)
     99e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     9a0:	683b      	ldr	r3, [r7, #0]
     9a2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     9a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     9a8:	4013      	ands	r3, r2
     9aa:	401e      	ands	r6, r3
     9ac:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     9ae:	4b0b      	ldr	r3, [pc, #44]	; (9dc <_tcc_interrupt_handler+0x48>)
     9b0:	4698      	mov	r8, r3
     9b2:	e002      	b.n	9ba <_tcc_interrupt_handler+0x26>
     9b4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     9b6:	2c30      	cmp	r4, #48	; 0x30
     9b8:	d00a      	beq.n	9d0 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     9ba:	4643      	mov	r3, r8
     9bc:	58e5      	ldr	r5, [r4, r3]
     9be:	4235      	tst	r5, r6
     9c0:	d0f8      	beq.n	9b4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     9c2:	193b      	adds	r3, r7, r4
     9c4:	685b      	ldr	r3, [r3, #4]
     9c6:	0038      	movs	r0, r7
     9c8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     9ca:	683b      	ldr	r3, [r7, #0]
     9cc:	62dd      	str	r5, [r3, #44]	; 0x2c
     9ce:	e7f1      	b.n	9b4 <_tcc_interrupt_handler+0x20>
		}
	}
}
     9d0:	bc04      	pop	{r2}
     9d2:	4690      	mov	r8, r2
     9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9d6:	46c0      	nop			; (mov r8, r8)
     9d8:	2000036c 	.word	0x2000036c
     9dc:	0000a66c 	.word	0x0000a66c

000009e0 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     9e0:	b510      	push	{r4, lr}
     9e2:	2000      	movs	r0, #0
     9e4:	4b01      	ldr	r3, [pc, #4]	; (9ec <TCC0_Handler+0xc>)
     9e6:	4798      	blx	r3
     9e8:	bd10      	pop	{r4, pc}
     9ea:	46c0      	nop			; (mov r8, r8)
     9ec:	00000995 	.word	0x00000995

000009f0 <TCC1_Handler>:
     9f0:	b510      	push	{r4, lr}
     9f2:	2001      	movs	r0, #1
     9f4:	4b01      	ldr	r3, [pc, #4]	; (9fc <TCC1_Handler+0xc>)
     9f6:	4798      	blx	r3
     9f8:	bd10      	pop	{r4, pc}
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	00000995 	.word	0x00000995

00000a00 <TCC2_Handler>:
     a00:	b510      	push	{r4, lr}
     a02:	2002      	movs	r0, #2
     a04:	4b01      	ldr	r3, [pc, #4]	; (a0c <TCC2_Handler+0xc>)
     a06:	4798      	blx	r3
     a08:	bd10      	pop	{r4, pc}
     a0a:	46c0      	nop			; (mov r8, r8)
     a0c:	00000995 	.word	0x00000995

00000a10 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     a10:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     a12:	4b07      	ldr	r3, [pc, #28]	; (a30 <sd_mmc_configure_slot+0x20>)
     a14:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     a16:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     a18:	5ccb      	ldrb	r3, [r1, r3]
     a1a:	1e5a      	subs	r2, r3, #1
     a1c:	4193      	sbcs	r3, r2
     a1e:	b2db      	uxtb	r3, r3
     a20:	7c4a      	ldrb	r2, [r1, #17]
     a22:	6809      	ldr	r1, [r1, #0]
     a24:	4803      	ldr	r0, [pc, #12]	; (a34 <sd_mmc_configure_slot+0x24>)
     a26:	7800      	ldrb	r0, [r0, #0]
     a28:	4c03      	ldr	r4, [pc, #12]	; (a38 <sd_mmc_configure_slot+0x28>)
     a2a:	47a0      	blx	r4
}
     a2c:	bd10      	pop	{r4, pc}
     a2e:	46c0      	nop			; (mov r8, r8)
     a30:	200001a8 	.word	0x200001a8
     a34:	200001b1 	.word	0x200001b1
     a38:	000085d9 	.word	0x000085d9

00000a3c <sd_mmc_select_slot>:
{
     a3c:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     a3e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     a40:	2800      	cmp	r0, #0
     a42:	d001      	beq.n	a48 <sd_mmc_select_slot+0xc>
}
     a44:	0018      	movs	r0, r3
     a46:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     a48:	4b40      	ldr	r3, [pc, #256]	; (b4c <sd_mmc_select_slot+0x110>)
     a4a:	7a19      	ldrb	r1, [r3, #8]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a4c:	09ca      	lsrs	r2, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     a4e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     a50:	2a00      	cmp	r2, #0
     a52:	d104      	bne.n	a5e <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     a54:	094b      	lsrs	r3, r1, #5
     a56:	01db      	lsls	r3, r3, #7
     a58:	4a3d      	ldr	r2, [pc, #244]	; (b50 <sd_mmc_select_slot+0x114>)
     a5a:	4694      	mov	ip, r2
     a5c:	4463      	add	r3, ip
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     a5e:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a60:	221f      	movs	r2, #31
     a62:	400a      	ands	r2, r1
     a64:	2301      	movs	r3, #1
     a66:	4093      	lsls	r3, r2
     a68:	4218      	tst	r0, r3
     a6a:	d010      	beq.n	a8e <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     a6c:	4b37      	ldr	r3, [pc, #220]	; (b4c <sd_mmc_select_slot+0x110>)
     a6e:	7b9b      	ldrb	r3, [r3, #14]
     a70:	2b01      	cmp	r3, #1
     a72:	d004      	beq.n	a7e <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     a74:	2204      	movs	r2, #4
     a76:	4b35      	ldr	r3, [pc, #212]	; (b4c <sd_mmc_select_slot+0x110>)
     a78:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     a7a:	2302      	movs	r3, #2
     a7c:	e7e2      	b.n	a44 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     a7e:	4b35      	ldr	r3, [pc, #212]	; (b54 <sd_mmc_select_slot+0x118>)
     a80:	781b      	ldrb	r3, [r3, #0]
     a82:	2b00      	cmp	r3, #0
     a84:	d0f6      	beq.n	a74 <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     a86:	2200      	movs	r2, #0
     a88:	4b33      	ldr	r3, [pc, #204]	; (b58 <sd_mmc_select_slot+0x11c>)
     a8a:	601a      	str	r2, [r3, #0]
     a8c:	e7f2      	b.n	a74 <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     a8e:	4b2f      	ldr	r3, [pc, #188]	; (b4c <sd_mmc_select_slot+0x110>)
     a90:	7b9a      	ldrb	r2, [r3, #14]
     a92:	2a04      	cmp	r2, #4
     a94:	d005      	beq.n	aa2 <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     a96:	2a01      	cmp	r2, #1
     a98:	d033      	beq.n	b02 <sd_mmc_select_slot+0xc6>
		return SD_MMC_ERR_UNUSABLE;
     a9a:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     a9c:	2a03      	cmp	r2, #3
     a9e:	d0d1      	beq.n	a44 <sd_mmc_select_slot+0x8>
     aa0:	e045      	b.n	b2e <sd_mmc_select_slot+0xf2>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     aa2:	3a03      	subs	r2, #3
     aa4:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     aa6:	4b2c      	ldr	r3, [pc, #176]	; (b58 <sd_mmc_select_slot+0x11c>)
     aa8:	681b      	ldr	r3, [r3, #0]
     aaa:	2b00      	cmp	r3, #0
     aac:	d017      	beq.n	ade <sd_mmc_select_slot+0xa2>
		sd_mmc_sam_systick_used = false;
     aae:	2200      	movs	r2, #0
     ab0:	4b28      	ldr	r3, [pc, #160]	; (b54 <sd_mmc_select_slot+0x118>)
     ab2:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     ab4:	2000      	movs	r0, #0
     ab6:	4b29      	ldr	r3, [pc, #164]	; (b5c <sd_mmc_select_slot+0x120>)
     ab8:	4798      	blx	r3
     aba:	22fa      	movs	r2, #250	; 0xfa
     abc:	0092      	lsls	r2, r2, #2
     abe:	2300      	movs	r3, #0
     ac0:	2100      	movs	r1, #0
     ac2:	4c27      	ldr	r4, [pc, #156]	; (b60 <sd_mmc_select_slot+0x124>)
     ac4:	47a0      	blx	r4
     ac6:	4a27      	ldr	r2, [pc, #156]	; (b64 <sd_mmc_select_slot+0x128>)
     ac8:	2300      	movs	r3, #0
     aca:	1880      	adds	r0, r0, r2
     acc:	4159      	adcs	r1, r3
     ace:	4a26      	ldr	r2, [pc, #152]	; (b68 <sd_mmc_select_slot+0x12c>)
     ad0:	2300      	movs	r3, #0
     ad2:	4c26      	ldr	r4, [pc, #152]	; (b6c <sd_mmc_select_slot+0x130>)
     ad4:	47a0      	blx	r4
     ad6:	4b26      	ldr	r3, [pc, #152]	; (b70 <sd_mmc_select_slot+0x134>)
     ad8:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     ada:	2302      	movs	r3, #2
     adc:	e7b2      	b.n	a44 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     ade:	2401      	movs	r4, #1
     ae0:	4b1c      	ldr	r3, [pc, #112]	; (b54 <sd_mmc_select_slot+0x118>)
     ae2:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     ae4:	2000      	movs	r0, #0
     ae6:	4b1d      	ldr	r3, [pc, #116]	; (b5c <sd_mmc_select_slot+0x120>)
     ae8:	4798      	blx	r3
     aea:	21fa      	movs	r1, #250	; 0xfa
     aec:	0149      	lsls	r1, r1, #5
     aee:	4b21      	ldr	r3, [pc, #132]	; (b74 <sd_mmc_select_slot+0x138>)
     af0:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     af2:	23fa      	movs	r3, #250	; 0xfa
     af4:	009b      	lsls	r3, r3, #2
     af6:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     af8:	4b17      	ldr	r3, [pc, #92]	; (b58 <sd_mmc_select_slot+0x11c>)
     afa:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     afc:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     afe:	2302      	movs	r3, #2
     b00:	e7a0      	b.n	a44 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     b02:	4b14      	ldr	r3, [pc, #80]	; (b54 <sd_mmc_select_slot+0x118>)
     b04:	781b      	ldrb	r3, [r3, #0]
     b06:	2b00      	cmp	r3, #0
     b08:	d007      	beq.n	b1a <sd_mmc_select_slot+0xde>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     b0a:	4b13      	ldr	r3, [pc, #76]	; (b58 <sd_mmc_select_slot+0x11c>)
     b0c:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     b0e:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     b10:	03d2      	lsls	r2, r2, #15
     b12:	d597      	bpl.n	a44 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     b14:	2200      	movs	r2, #0
     b16:	4b10      	ldr	r3, [pc, #64]	; (b58 <sd_mmc_select_slot+0x11c>)
     b18:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     b1a:	4b0c      	ldr	r3, [pc, #48]	; (b4c <sd_mmc_select_slot+0x110>)
     b1c:	2202      	movs	r2, #2
     b1e:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     b20:	4a15      	ldr	r2, [pc, #84]	; (b78 <sd_mmc_select_slot+0x13c>)
     b22:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     b24:	2201      	movs	r2, #1
     b26:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     b28:	2100      	movs	r1, #0
     b2a:	3221      	adds	r2, #33	; 0x21
     b2c:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     b2e:	2200      	movs	r2, #0
     b30:	4b12      	ldr	r3, [pc, #72]	; (b7c <sd_mmc_select_slot+0x140>)
     b32:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     b34:	4c05      	ldr	r4, [pc, #20]	; (b4c <sd_mmc_select_slot+0x110>)
     b36:	4b12      	ldr	r3, [pc, #72]	; (b80 <sd_mmc_select_slot+0x144>)
     b38:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     b3a:	4b12      	ldr	r3, [pc, #72]	; (b84 <sd_mmc_select_slot+0x148>)
     b3c:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     b3e:	7ba3      	ldrb	r3, [r4, #14]
     b40:	3b02      	subs	r3, #2
     b42:	425a      	negs	r2, r3
     b44:	4153      	adcs	r3, r2
     b46:	b2db      	uxtb	r3, r3
     b48:	e77c      	b.n	a44 <sd_mmc_select_slot+0x8>
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	2000000c 	.word	0x2000000c
     b50:	41004400 	.word	0x41004400
     b54:	200001b0 	.word	0x200001b0
     b58:	e000e010 	.word	0xe000e010
     b5c:	00008cd1 	.word	0x00008cd1
     b60:	0000940d 	.word	0x0000940d
     b64:	00001b57 	.word	0x00001b57
     b68:	00001b58 	.word	0x00001b58
     b6c:	000093cd 	.word	0x000093cd
     b70:	20000001 	.word	0x20000001
     b74:	00009065 	.word	0x00009065
     b78:	00061a80 	.word	0x00061a80
     b7c:	200001b1 	.word	0x200001b1
     b80:	200001a8 	.word	0x200001a8
     b84:	00000a11 	.word	0x00000a11

00000b88 <sd_mmc_cmd13>:
{
     b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b8a:	4d09      	ldr	r5, [pc, #36]	; (bb0 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     b8c:	4f09      	ldr	r7, [pc, #36]	; (bb4 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     b8e:	4e0a      	ldr	r6, [pc, #40]	; (bb8 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     b90:	2100      	movs	r1, #0
     b92:	480a      	ldr	r0, [pc, #40]	; (bbc <sd_mmc_cmd13+0x34>)
     b94:	47b8      	blx	r7
     b96:	1e04      	subs	r4, r0, #0
     b98:	d007      	beq.n	baa <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     b9a:	47b0      	blx	r6
     b9c:	23ff      	movs	r3, #255	; 0xff
     b9e:	4203      	tst	r3, r0
     ba0:	d003      	beq.n	baa <sd_mmc_cmd13+0x22>
     ba2:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     ba4:	2d00      	cmp	r5, #0
     ba6:	d1f3      	bne.n	b90 <sd_mmc_cmd13+0x8>
			return false;
     ba8:	2400      	movs	r4, #0
}
     baa:	0020      	movs	r0, r4
     bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	00030d41 	.word	0x00030d41
     bb4:	0000881d 	.word	0x0000881d
     bb8:	00008835 	.word	0x00008835
     bbc:	00001b0d 	.word	0x00001b0d

00000bc0 <sd_mmc_cmd9_spi>:
{
     bc0:	b510      	push	{r4, lr}
     bc2:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     bc4:	4b0c      	ldr	r3, [pc, #48]	; (bf8 <sd_mmc_cmd9_spi+0x38>)
     bc6:	681b      	ldr	r3, [r3, #0]
     bc8:	8999      	ldrh	r1, [r3, #12]
     bca:	0409      	lsls	r1, r1, #16
     bcc:	2301      	movs	r3, #1
     bce:	9300      	str	r3, [sp, #0]
     bd0:	2210      	movs	r2, #16
     bd2:	480a      	ldr	r0, [pc, #40]	; (bfc <sd_mmc_cmd9_spi+0x3c>)
     bd4:	4c0a      	ldr	r4, [pc, #40]	; (c00 <sd_mmc_cmd9_spi+0x40>)
     bd6:	47a0      	blx	r4
     bd8:	2800      	cmp	r0, #0
     bda:	d101      	bne.n	be0 <sd_mmc_cmd9_spi+0x20>
}
     bdc:	b002      	add	sp, #8
     bde:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     be0:	4b05      	ldr	r3, [pc, #20]	; (bf8 <sd_mmc_cmd9_spi+0x38>)
     be2:	6818      	ldr	r0, [r3, #0]
     be4:	3012      	adds	r0, #18
     be6:	2101      	movs	r1, #1
     be8:	4b06      	ldr	r3, [pc, #24]	; (c04 <sd_mmc_cmd9_spi+0x44>)
     bea:	4798      	blx	r3
     bec:	2800      	cmp	r0, #0
     bee:	d0f5      	beq.n	bdc <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     bf0:	4b05      	ldr	r3, [pc, #20]	; (c08 <sd_mmc_cmd9_spi+0x48>)
     bf2:	4798      	blx	r3
     bf4:	e7f2      	b.n	bdc <sd_mmc_cmd9_spi+0x1c>
     bf6:	46c0      	nop			; (mov r8, r8)
     bf8:	200001a8 	.word	0x200001a8
     bfc:	00081109 	.word	0x00081109
     c00:	0000868d 	.word	0x0000868d
     c04:	000088b9 	.word	0x000088b9
     c08:	00008945 	.word	0x00008945

00000c0c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     c0c:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     c0e:	4b04      	ldr	r3, [pc, #16]	; (c20 <sd_mmc_deselect_slot+0x14>)
     c10:	781b      	ldrb	r3, [r3, #0]
     c12:	2b00      	cmp	r3, #0
     c14:	d000      	beq.n	c18 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     c16:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     c18:	2000      	movs	r0, #0
     c1a:	4b02      	ldr	r3, [pc, #8]	; (c24 <sd_mmc_deselect_slot+0x18>)
     c1c:	4798      	blx	r3
}
     c1e:	e7fa      	b.n	c16 <sd_mmc_deselect_slot+0xa>
     c20:	200001b1 	.word	0x200001b1
     c24:	0000862d 	.word	0x0000862d

00000c28 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     c28:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     c2a:	2204      	movs	r2, #4
     c2c:	4b03      	ldr	r3, [pc, #12]	; (c3c <sd_mmc_init+0x14>)
     c2e:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     c30:	32fb      	adds	r2, #251	; 0xfb
     c32:	4b03      	ldr	r3, [pc, #12]	; (c40 <sd_mmc_init+0x18>)
     c34:	701a      	strb	r2, [r3, #0]
	driver_init();
     c36:	4b03      	ldr	r3, [pc, #12]	; (c44 <sd_mmc_init+0x1c>)
     c38:	4798      	blx	r3
}
     c3a:	bd10      	pop	{r4, pc}
     c3c:	2000000c 	.word	0x2000000c
     c40:	200001b1 	.word	0x200001b1
     c44:	000084cd 	.word	0x000084cd

00000c48 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     c48:	b5f0      	push	{r4, r5, r6, r7, lr}
     c4a:	46c6      	mov	lr, r8
     c4c:	b500      	push	{lr}
     c4e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     c50:	4bcb      	ldr	r3, [pc, #812]	; (f80 <sd_mmc_check+0x338>)
     c52:	4798      	blx	r3
     c54:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     c56:	2801      	cmp	r0, #1
     c58:	d006      	beq.n	c68 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     c5a:	4bca      	ldr	r3, [pc, #808]	; (f84 <sd_mmc_check+0x33c>)
     c5c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     c5e:	0020      	movs	r0, r4
     c60:	b008      	add	sp, #32
     c62:	bc04      	pop	{r2}
     c64:	4690      	mov	r8, r2
     c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     c68:	4bc7      	ldr	r3, [pc, #796]	; (f88 <sd_mmc_check+0x340>)
     c6a:	681b      	ldr	r3, [r3, #0]
     c6c:	2201      	movs	r2, #1
     c6e:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     c70:	2200      	movs	r2, #0
     c72:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     c74:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     c76:	4bc5      	ldr	r3, [pc, #788]	; (f8c <sd_mmc_check+0x344>)
     c78:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     c7a:	2100      	movs	r1, #0
     c7c:	2088      	movs	r0, #136	; 0x88
     c7e:	0140      	lsls	r0, r0, #5
     c80:	4bc3      	ldr	r3, [pc, #780]	; (f90 <sd_mmc_check+0x348>)
     c82:	4798      	blx	r3
     c84:	2800      	cmp	r0, #0
     c86:	d107      	bne.n	c98 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     c88:	4bbf      	ldr	r3, [pc, #764]	; (f88 <sd_mmc_check+0x340>)
     c8a:	681b      	ldr	r3, [r3, #0]
     c8c:	2203      	movs	r2, #3
     c8e:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     c90:	4bbc      	ldr	r3, [pc, #752]	; (f84 <sd_mmc_check+0x33c>)
     c92:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     c94:	2403      	movs	r4, #3
     c96:	e7e2      	b.n	c5e <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     c98:	21d5      	movs	r1, #213	; 0xd5
     c9a:	0049      	lsls	r1, r1, #1
     c9c:	48bd      	ldr	r0, [pc, #756]	; (f94 <sd_mmc_check+0x34c>)
     c9e:	4bbc      	ldr	r3, [pc, #752]	; (f90 <sd_mmc_check+0x348>)
     ca0:	4798      	blx	r3
	*v2 = 0;
     ca2:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     ca4:	2800      	cmp	r0, #0
     ca6:	d125      	bne.n	cf4 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     ca8:	4bb7      	ldr	r3, [pc, #732]	; (f88 <sd_mmc_check+0x340>)
     caa:	681b      	ldr	r3, [r3, #0]
     cac:	7bdb      	ldrb	r3, [r3, #15]
     cae:	07db      	lsls	r3, r3, #31
     cb0:	d500      	bpl.n	cb4 <sd_mmc_check+0x6c>
     cb2:	e1eb      	b.n	108c <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     cb4:	4bb4      	ldr	r3, [pc, #720]	; (f88 <sd_mmc_check+0x340>)
     cb6:	681b      	ldr	r3, [r3, #0]
     cb8:	7bda      	ldrb	r2, [r3, #15]
     cba:	2309      	movs	r3, #9
     cbc:	4013      	ands	r3, r2
     cbe:	2b01      	cmp	r3, #1
     cc0:	d10f      	bne.n	ce2 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     cc2:	2180      	movs	r1, #128	; 0x80
     cc4:	0089      	lsls	r1, r1, #2
     cc6:	48b4      	ldr	r0, [pc, #720]	; (f98 <sd_mmc_check+0x350>)
     cc8:	4bb1      	ldr	r3, [pc, #708]	; (f90 <sd_mmc_check+0x348>)
     cca:	4798      	blx	r3
     ccc:	2800      	cmp	r0, #0
     cce:	d0db      	beq.n	c88 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     cd0:	4bad      	ldr	r3, [pc, #692]	; (f88 <sd_mmc_check+0x340>)
     cd2:	681b      	ldr	r3, [r3, #0]
     cd4:	7bdb      	ldrb	r3, [r3, #15]
     cd6:	07db      	lsls	r3, r3, #31
     cd8:	d503      	bpl.n	ce2 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     cda:	4bb0      	ldr	r3, [pc, #704]	; (f9c <sd_mmc_check+0x354>)
     cdc:	4798      	blx	r3
     cde:	2800      	cmp	r0, #0
     ce0:	d0d2      	beq.n	c88 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     ce2:	4baf      	ldr	r3, [pc, #700]	; (fa0 <sd_mmc_check+0x358>)
     ce4:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     ce6:	4ba8      	ldr	r3, [pc, #672]	; (f88 <sd_mmc_check+0x340>)
     ce8:	681b      	ldr	r3, [r3, #0]
     cea:	2200      	movs	r2, #0
     cec:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     cee:	4ba5      	ldr	r3, [pc, #660]	; (f84 <sd_mmc_check+0x33c>)
     cf0:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     cf2:	e7b4      	b.n	c5e <sd_mmc_check+0x16>
	resp = driver_get_response();
     cf4:	4bab      	ldr	r3, [pc, #684]	; (fa4 <sd_mmc_check+0x35c>)
     cf6:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     cf8:	1c43      	adds	r3, r0, #1
     cfa:	d100      	bne.n	cfe <sd_mmc_check+0xb6>
     cfc:	e1c4      	b.n	1088 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     cfe:	0500      	lsls	r0, r0, #20
     d00:	0d00      	lsrs	r0, r0, #20
     d02:	23d5      	movs	r3, #213	; 0xd5
     d04:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     d06:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     d08:	4298      	cmp	r0, r3
     d0a:	d1bd      	bne.n	c88 <sd_mmc_check+0x40>
     d0c:	e7cc      	b.n	ca8 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     d0e:	2100      	movs	r1, #0
     d10:	48a5      	ldr	r0, [pc, #660]	; (fa8 <sd_mmc_check+0x360>)
     d12:	4b9f      	ldr	r3, [pc, #636]	; (f90 <sd_mmc_check+0x348>)
     d14:	4798      	blx	r3
     d16:	2800      	cmp	r0, #0
     d18:	d119      	bne.n	d4e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     d1a:	4b9b      	ldr	r3, [pc, #620]	; (f88 <sd_mmc_check+0x340>)
     d1c:	681b      	ldr	r3, [r3, #0]
     d1e:	2202      	movs	r2, #2
     d20:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     d22:	2100      	movs	r1, #0
     d24:	2088      	movs	r0, #136	; 0x88
     d26:	0140      	lsls	r0, r0, #5
     d28:	4b99      	ldr	r3, [pc, #612]	; (f90 <sd_mmc_check+0x348>)
     d2a:	4798      	blx	r3
     d2c:	2800      	cmp	r0, #0
     d2e:	d0ab      	beq.n	c88 <sd_mmc_check+0x40>
     d30:	4d9e      	ldr	r5, [pc, #632]	; (fac <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     d32:	4f97      	ldr	r7, [pc, #604]	; (f90 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     d34:	4e9b      	ldr	r6, [pc, #620]	; (fa4 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     d36:	2100      	movs	r1, #0
     d38:	489d      	ldr	r0, [pc, #628]	; (fb0 <sd_mmc_check+0x368>)
     d3a:	47b8      	blx	r7
     d3c:	2800      	cmp	r0, #0
     d3e:	d0a3      	beq.n	c88 <sd_mmc_check+0x40>
		resp = driver_get_response();
     d40:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     d42:	07c3      	lsls	r3, r0, #31
     d44:	d57d      	bpl.n	e42 <sd_mmc_check+0x1fa>
     d46:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     d48:	2d00      	cmp	r5, #0
     d4a:	d1f4      	bne.n	d36 <sd_mmc_check+0xee>
     d4c:	e79c      	b.n	c88 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     d4e:	4b95      	ldr	r3, [pc, #596]	; (fa4 <sd_mmc_check+0x35c>)
     d50:	4798      	blx	r3
     d52:	0043      	lsls	r3, r0, #1
     d54:	d505      	bpl.n	d62 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     d56:	4b8c      	ldr	r3, [pc, #560]	; (f88 <sd_mmc_check+0x340>)
     d58:	681a      	ldr	r2, [r3, #0]
     d5a:	7bd3      	ldrb	r3, [r2, #15]
     d5c:	2108      	movs	r1, #8
     d5e:	430b      	orrs	r3, r1
     d60:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     d62:	2100      	movs	r1, #0
     d64:	4893      	ldr	r0, [pc, #588]	; (fb4 <sd_mmc_check+0x36c>)
     d66:	4b8a      	ldr	r3, [pc, #552]	; (f90 <sd_mmc_check+0x348>)
     d68:	4798      	blx	r3
     d6a:	2800      	cmp	r0, #0
     d6c:	d08c      	beq.n	c88 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     d6e:	4b86      	ldr	r3, [pc, #536]	; (f88 <sd_mmc_check+0x340>)
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	7bdb      	ldrb	r3, [r3, #15]
     d74:	07da      	lsls	r2, r3, #31
     d76:	d400      	bmi.n	d7a <sd_mmc_check+0x132>
     d78:	e1a4      	b.n	10c4 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     d7a:	4b8f      	ldr	r3, [pc, #572]	; (fb8 <sd_mmc_check+0x370>)
     d7c:	4798      	blx	r3
     d7e:	2800      	cmp	r0, #0
     d80:	d082      	beq.n	c88 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     d82:	4b81      	ldr	r3, [pc, #516]	; (f88 <sd_mmc_check+0x340>)
     d84:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d86:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     d88:	2107      	movs	r1, #7
     d8a:	4019      	ands	r1, r3
     d8c:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     d8e:	488b      	ldr	r0, [pc, #556]	; (fbc <sd_mmc_check+0x374>)
     d90:	5808      	ldr	r0, [r1, r0]
     d92:	21fa      	movs	r1, #250	; 0xfa
     d94:	0089      	lsls	r1, r1, #2
     d96:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     d98:	065b      	lsls	r3, r3, #25
     d9a:	0f1b      	lsrs	r3, r3, #28
     d9c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     d9e:	4888      	ldr	r0, [pc, #544]	; (fc0 <sd_mmc_check+0x378>)
     da0:	581b      	ldr	r3, [r3, r0]
     da2:	434b      	muls	r3, r1
     da4:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     da6:	7c93      	ldrb	r3, [r2, #18]
     da8:	099b      	lsrs	r3, r3, #6
     daa:	d000      	beq.n	dae <sd_mmc_check+0x166>
     dac:	e13c      	b.n	1028 <sd_mmc_check+0x3e0>
     dae:	7e91      	ldrb	r1, [r2, #26]
     db0:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     db2:	7e53      	ldrb	r3, [r2, #25]
     db4:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     db6:	7e10      	ldrb	r0, [r2, #24]
     db8:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     dba:	4303      	orrs	r3, r0
     dbc:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     dbe:	7f10      	ldrb	r0, [r2, #28]
     dc0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     dc2:	7ed1      	ldrb	r1, [r2, #27]
     dc4:	0049      	lsls	r1, r1, #1
     dc6:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     dc8:	051b      	lsls	r3, r3, #20
     dca:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     dcc:	3301      	adds	r3, #1
     dce:	2107      	movs	r1, #7
     dd0:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     dd2:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     dd4:	408b      	lsls	r3, r1
     dd6:	7dd0      	ldrb	r0, [r2, #23]
     dd8:	210f      	movs	r1, #15
     dda:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     ddc:	408b      	lsls	r3, r1
				/ 1024;
     dde:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     de0:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     de2:	8991      	ldrh	r1, [r2, #12]
     de4:	0409      	lsls	r1, r1, #16
     de6:	4877      	ldr	r0, [pc, #476]	; (fc4 <sd_mmc_check+0x37c>)
     de8:	4b69      	ldr	r3, [pc, #420]	; (f90 <sd_mmc_check+0x348>)
     dea:	4798      	blx	r3
     dec:	2800      	cmp	r0, #0
     dee:	d100      	bne.n	df2 <sd_mmc_check+0x1aa>
     df0:	e74a      	b.n	c88 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     df2:	2301      	movs	r3, #1
     df4:	9300      	str	r3, [sp, #0]
     df6:	2208      	movs	r2, #8
     df8:	2100      	movs	r1, #0
     dfa:	4873      	ldr	r0, [pc, #460]	; (fc8 <sd_mmc_check+0x380>)
     dfc:	4d73      	ldr	r5, [pc, #460]	; (fcc <sd_mmc_check+0x384>)
     dfe:	47a8      	blx	r5
     e00:	2800      	cmp	r0, #0
     e02:	d100      	bne.n	e06 <sd_mmc_check+0x1be>
     e04:	e740      	b.n	c88 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     e06:	2101      	movs	r1, #1
     e08:	a806      	add	r0, sp, #24
     e0a:	4b71      	ldr	r3, [pc, #452]	; (fd0 <sd_mmc_check+0x388>)
     e0c:	4798      	blx	r3
     e0e:	2800      	cmp	r0, #0
     e10:	d100      	bne.n	e14 <sd_mmc_check+0x1cc>
     e12:	e739      	b.n	c88 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     e14:	4b6f      	ldr	r3, [pc, #444]	; (fd4 <sd_mmc_check+0x38c>)
     e16:	4798      	blx	r3
     e18:	2800      	cmp	r0, #0
     e1a:	d100      	bne.n	e1e <sd_mmc_check+0x1d6>
     e1c:	e734      	b.n	c88 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     e1e:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     e20:	781b      	ldrb	r3, [r3, #0]
     e22:	220f      	movs	r2, #15
     e24:	4013      	ands	r3, r2
     e26:	2b01      	cmp	r3, #1
     e28:	d100      	bne.n	e2c <sd_mmc_check+0x1e4>
     e2a:	e119      	b.n	1060 <sd_mmc_check+0x418>
     e2c:	2b00      	cmp	r3, #0
     e2e:	d100      	bne.n	e32 <sd_mmc_check+0x1ea>
     e30:	e109      	b.n	1046 <sd_mmc_check+0x3fe>
     e32:	2b02      	cmp	r3, #2
     e34:	d100      	bne.n	e38 <sd_mmc_check+0x1f0>
     e36:	e118      	b.n	106a <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     e38:	4b53      	ldr	r3, [pc, #332]	; (f88 <sd_mmc_check+0x340>)
     e3a:	681b      	ldr	r3, [r3, #0]
     e3c:	2210      	movs	r2, #16
     e3e:	741a      	strb	r2, [r3, #16]
     e40:	e105      	b.n	104e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     e42:	2100      	movs	r1, #0
     e44:	4858      	ldr	r0, [pc, #352]	; (fa8 <sd_mmc_check+0x360>)
     e46:	4b52      	ldr	r3, [pc, #328]	; (f90 <sd_mmc_check+0x348>)
     e48:	4798      	blx	r3
     e4a:	2800      	cmp	r0, #0
     e4c:	d100      	bne.n	e50 <sd_mmc_check+0x208>
     e4e:	e71b      	b.n	c88 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     e50:	4b54      	ldr	r3, [pc, #336]	; (fa4 <sd_mmc_check+0x35c>)
     e52:	4798      	blx	r3
     e54:	23c0      	movs	r3, #192	; 0xc0
     e56:	05db      	lsls	r3, r3, #23
     e58:	4018      	ands	r0, r3
     e5a:	2380      	movs	r3, #128	; 0x80
     e5c:	05db      	lsls	r3, r3, #23
     e5e:	4298      	cmp	r0, r3
     e60:	d105      	bne.n	e6e <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     e62:	4b49      	ldr	r3, [pc, #292]	; (f88 <sd_mmc_check+0x340>)
     e64:	681a      	ldr	r2, [r3, #0]
     e66:	7bd1      	ldrb	r1, [r2, #15]
     e68:	2308      	movs	r3, #8
     e6a:	430b      	orrs	r3, r1
     e6c:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     e6e:	2100      	movs	r1, #0
     e70:	4850      	ldr	r0, [pc, #320]	; (fb4 <sd_mmc_check+0x36c>)
     e72:	4b47      	ldr	r3, [pc, #284]	; (f90 <sd_mmc_check+0x348>)
     e74:	4798      	blx	r3
     e76:	2800      	cmp	r0, #0
     e78:	d100      	bne.n	e7c <sd_mmc_check+0x234>
     e7a:	e705      	b.n	c88 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     e7c:	4b4e      	ldr	r3, [pc, #312]	; (fb8 <sd_mmc_check+0x370>)
     e7e:	4798      	blx	r3
     e80:	2800      	cmp	r0, #0
     e82:	d100      	bne.n	e86 <sd_mmc_check+0x23e>
     e84:	e700      	b.n	c88 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     e86:	4b40      	ldr	r3, [pc, #256]	; (f88 <sd_mmc_check+0x340>)
     e88:	681a      	ldr	r2, [r3, #0]
     e8a:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     e8c:	069b      	lsls	r3, r3, #26
     e8e:	0f1b      	lsrs	r3, r3, #28
     e90:	2b02      	cmp	r3, #2
     e92:	d100      	bne.n	e96 <sd_mmc_check+0x24e>
     e94:	e0a8      	b.n	fe8 <sd_mmc_check+0x3a0>
     e96:	d907      	bls.n	ea8 <sd_mmc_check+0x260>
     e98:	2b03      	cmp	r3, #3
     e9a:	d100      	bne.n	e9e <sd_mmc_check+0x256>
     e9c:	e0a7      	b.n	fee <sd_mmc_check+0x3a6>
     e9e:	2b04      	cmp	r3, #4
     ea0:	d104      	bne.n	eac <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     ea2:	2340      	movs	r3, #64	; 0x40
     ea4:	7413      	strb	r3, [r2, #16]
     ea6:	e003      	b.n	eb0 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     ea8:	2b01      	cmp	r3, #1
     eaa:	d066      	beq.n	f7a <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     eac:	2312      	movs	r3, #18
     eae:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     eb0:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     eb2:	0659      	lsls	r1, r3, #25
     eb4:	0f09      	lsrs	r1, r1, #28
     eb6:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     eb8:	2007      	movs	r0, #7
     eba:	4003      	ands	r3, r0
     ebc:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     ebe:	483f      	ldr	r0, [pc, #252]	; (fbc <sd_mmc_check+0x374>)
     ec0:	5818      	ldr	r0, [r3, r0]
     ec2:	23fa      	movs	r3, #250	; 0xfa
     ec4:	009b      	lsls	r3, r3, #2
     ec6:	4343      	muls	r3, r0
     ec8:	4843      	ldr	r0, [pc, #268]	; (fd8 <sd_mmc_check+0x390>)
     eca:	5809      	ldr	r1, [r1, r0]
     ecc:	434b      	muls	r3, r1
     ece:	6013      	str	r3, [r2, #0]
     ed0:	7e91      	ldrb	r1, [r2, #26]
     ed2:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     ed4:	7e53      	ldrb	r3, [r2, #25]
     ed6:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     ed8:	7e10      	ldrb	r0, [r2, #24]
     eda:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     edc:	4303      	orrs	r3, r0
     ede:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     ee0:	051b      	lsls	r3, r3, #20
     ee2:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     ee4:	493d      	ldr	r1, [pc, #244]	; (fdc <sd_mmc_check+0x394>)
     ee6:	428b      	cmp	r3, r1
     ee8:	d00f      	beq.n	f0a <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     eea:	7f10      	ldrb	r0, [r2, #28]
     eec:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     eee:	7ed1      	ldrb	r1, [r2, #27]
     ef0:	0049      	lsls	r1, r1, #1
     ef2:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     ef4:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     ef6:	2007      	movs	r0, #7
     ef8:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     efa:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     efc:	408b      	lsls	r3, r1
     efe:	7dd1      	ldrb	r1, [r2, #23]
     f00:	3008      	adds	r0, #8
     f02:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     f04:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     f06:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     f08:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     f0a:	7c13      	ldrb	r3, [r2, #16]
     f0c:	2b3f      	cmp	r3, #63	; 0x3f
     f0e:	d97b      	bls.n	1008 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     f10:	2100      	movs	r1, #0
     f12:	9100      	str	r1, [sp, #0]
     f14:	2301      	movs	r3, #1
     f16:	2280      	movs	r2, #128	; 0x80
     f18:	0092      	lsls	r2, r2, #2
     f1a:	4831      	ldr	r0, [pc, #196]	; (fe0 <sd_mmc_check+0x398>)
     f1c:	4d2b      	ldr	r5, [pc, #172]	; (fcc <sd_mmc_check+0x384>)
     f1e:	47a8      	blx	r5
     f20:	2800      	cmp	r0, #0
     f22:	d100      	bne.n	f26 <sd_mmc_check+0x2de>
     f24:	e6b0      	b.n	c88 <sd_mmc_check+0x40>
     f26:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     f28:	4e2e      	ldr	r6, [pc, #184]	; (fe4 <sd_mmc_check+0x39c>)
     f2a:	a805      	add	r0, sp, #20
     f2c:	47b0      	blx	r6
     f2e:	2800      	cmp	r0, #0
     f30:	d100      	bne.n	f34 <sd_mmc_check+0x2ec>
     f32:	e6a9      	b.n	c88 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     f34:	3501      	adds	r5, #1
     f36:	b2ad      	uxth	r5, r5
     f38:	2d32      	cmp	r5, #50	; 0x32
     f3a:	d1f6      	bne.n	f2a <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     f3c:	4b12      	ldr	r3, [pc, #72]	; (f88 <sd_mmc_check+0x340>)
     f3e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     f40:	7e8a      	ldrb	r2, [r1, #26]
     f42:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     f44:	7e4b      	ldrb	r3, [r1, #25]
     f46:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     f48:	7e09      	ldrb	r1, [r1, #24]
     f4a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     f4c:	430b      	orrs	r3, r1
     f4e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     f50:	051b      	lsls	r3, r3, #20
     f52:	0d1b      	lsrs	r3, r3, #20
     f54:	4a21      	ldr	r2, [pc, #132]	; (fdc <sd_mmc_check+0x394>)
     f56:	4293      	cmp	r3, r2
     f58:	d154      	bne.n	1004 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     f5a:	4e22      	ldr	r6, [pc, #136]	; (fe4 <sd_mmc_check+0x39c>)
     f5c:	a806      	add	r0, sp, #24
     f5e:	47b0      	blx	r6
     f60:	2800      	cmp	r0, #0
     f62:	d100      	bne.n	f66 <sd_mmc_check+0x31e>
     f64:	e690      	b.n	c88 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     f66:	3501      	adds	r5, #1
     f68:	b2ad      	uxth	r5, r5
     f6a:	2d35      	cmp	r5, #53	; 0x35
     f6c:	d9f6      	bls.n	f5c <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     f6e:	4b06      	ldr	r3, [pc, #24]	; (f88 <sd_mmc_check+0x340>)
     f70:	681a      	ldr	r2, [r3, #0]
     f72:	9b06      	ldr	r3, [sp, #24]
     f74:	085b      	lsrs	r3, r3, #1
     f76:	6053      	str	r3, [r2, #4]
     f78:	e044      	b.n	1004 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     f7a:	2314      	movs	r3, #20
     f7c:	7413      	strb	r3, [r2, #16]
     f7e:	e797      	b.n	eb0 <sd_mmc_check+0x268>
     f80:	00000a3d 	.word	0x00000a3d
     f84:	00000c0d 	.word	0x00000c0d
     f88:	200001a8 	.word	0x200001a8
     f8c:	00008655 	.word	0x00008655
     f90:	0000881d 	.word	0x0000881d
     f94:	00005508 	.word	0x00005508
     f98:	00001110 	.word	0x00001110
     f9c:	00000b89 	.word	0x00000b89
     fa0:	00000a11 	.word	0x00000a11
     fa4:	00008835 	.word	0x00008835
     fa8:	0000053a 	.word	0x0000053a
     fac:	00001bef 	.word	0x00001bef
     fb0:	00001101 	.word	0x00001101
     fb4:	0000113b 	.word	0x0000113b
     fb8:	00000bc1 	.word	0x00000bc1
     fbc:	0000a6e0 	.word	0x0000a6e0
     fc0:	0000a6fc 	.word	0x0000a6fc
     fc4:	00001137 	.word	0x00001137
     fc8:	00081133 	.word	0x00081133
     fcc:	0000868d 	.word	0x0000868d
     fd0:	000088b9 	.word	0x000088b9
     fd4:	00008945 	.word	0x00008945
     fd8:	0000a6a0 	.word	0x0000a6a0
     fdc:	00000fff 	.word	0x00000fff
     fe0:	00081108 	.word	0x00081108
     fe4:	00008841 	.word	0x00008841
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     fe8:	2322      	movs	r3, #34	; 0x22
     fea:	7413      	strb	r3, [r2, #16]
     fec:	e760      	b.n	eb0 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     fee:	2330      	movs	r3, #48	; 0x30
     ff0:	7413      	strb	r3, [r2, #16]
     ff2:	e75d      	b.n	eb0 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     ff4:	a806      	add	r0, sp, #24
     ff6:	4b36      	ldr	r3, [pc, #216]	; (10d0 <sd_mmc_check+0x488>)
     ff8:	4798      	blx	r3
     ffa:	2800      	cmp	r0, #0
     ffc:	d100      	bne.n	1000 <sd_mmc_check+0x3b8>
     ffe:	e643      	b.n	c88 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    1000:	3501      	adds	r5, #1
    1002:	b2ad      	uxth	r5, r5
    1004:	2d7f      	cmp	r5, #127	; 0x7f
    1006:	d9f5      	bls.n	ff4 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1008:	2180      	movs	r1, #128	; 0x80
    100a:	0089      	lsls	r1, r1, #2
    100c:	4831      	ldr	r0, [pc, #196]	; (10d4 <sd_mmc_check+0x48c>)
    100e:	4b32      	ldr	r3, [pc, #200]	; (10d8 <sd_mmc_check+0x490>)
    1010:	4798      	blx	r3
    1012:	2800      	cmp	r0, #0
    1014:	d100      	bne.n	1018 <sd_mmc_check+0x3d0>
    1016:	e637      	b.n	c88 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
    1018:	4b30      	ldr	r3, [pc, #192]	; (10dc <sd_mmc_check+0x494>)
    101a:	4798      	blx	r3
    101c:	2800      	cmp	r0, #0
    101e:	d100      	bne.n	1022 <sd_mmc_check+0x3da>
    1020:	e632      	b.n	c88 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    1022:	4b2f      	ldr	r3, [pc, #188]	; (10e0 <sd_mmc_check+0x498>)
    1024:	4798      	blx	r3
    1026:	e65e      	b.n	ce6 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    1028:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    102a:	7e93      	ldrb	r3, [r2, #26]
    102c:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    102e:	7e51      	ldrb	r1, [r2, #25]
    1030:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    1032:	430b      	orrs	r3, r1
    1034:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
    1036:	029b      	lsls	r3, r3, #10
				* 512;
    1038:	085b      	lsrs	r3, r3, #1
    103a:	2180      	movs	r1, #128	; 0x80
    103c:	0089      	lsls	r1, r1, #2
    103e:	468c      	mov	ip, r1
    1040:	4463      	add	r3, ip
		sd_mmc_card->capacity =
    1042:	6053      	str	r3, [r2, #4]
    1044:	e6cd      	b.n	de2 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    1046:	4b27      	ldr	r3, [pc, #156]	; (10e4 <sd_mmc_check+0x49c>)
    1048:	681b      	ldr	r3, [r3, #0]
    104a:	2210      	movs	r2, #16
    104c:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    104e:	4b25      	ldr	r3, [pc, #148]	; (10e4 <sd_mmc_check+0x49c>)
    1050:	681b      	ldr	r3, [r3, #0]
    1052:	7bdb      	ldrb	r3, [r3, #15]
    1054:	2209      	movs	r2, #9
    1056:	4013      	ands	r3, r2
    1058:	2b01      	cmp	r3, #1
    105a:	d000      	beq.n	105e <sd_mmc_check+0x416>
    105c:	e638      	b.n	cd0 <sd_mmc_check+0x88>
    105e:	e630      	b.n	cc2 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    1060:	4b20      	ldr	r3, [pc, #128]	; (10e4 <sd_mmc_check+0x49c>)
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	221a      	movs	r2, #26
    1066:	741a      	strb	r2, [r3, #16]
    1068:	e7f1      	b.n	104e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    106a:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    106c:	789b      	ldrb	r3, [r3, #2]
    106e:	09db      	lsrs	r3, r3, #7
    1070:	2b01      	cmp	r3, #1
    1072:	d104      	bne.n	107e <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    1074:	4b1b      	ldr	r3, [pc, #108]	; (10e4 <sd_mmc_check+0x49c>)
    1076:	681b      	ldr	r3, [r3, #0]
    1078:	2230      	movs	r2, #48	; 0x30
    107a:	741a      	strb	r2, [r3, #16]
    107c:	e7e7      	b.n	104e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    107e:	4b19      	ldr	r3, [pc, #100]	; (10e4 <sd_mmc_check+0x49c>)
    1080:	681b      	ldr	r3, [r3, #0]
    1082:	2220      	movs	r2, #32
    1084:	741a      	strb	r2, [r3, #16]
    1086:	e7e2      	b.n	104e <sd_mmc_check+0x406>
	*v2 = 0;
    1088:	2600      	movs	r6, #0
    108a:	e60d      	b.n	ca8 <sd_mmc_check+0x60>
    108c:	1e73      	subs	r3, r6, #1
    108e:	419e      	sbcs	r6, r3
    1090:	07b3      	lsls	r3, r6, #30
    1092:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1094:	4d14      	ldr	r5, [pc, #80]	; (10e8 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    1096:	4f10      	ldr	r7, [pc, #64]	; (10d8 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    1098:	46b8      	mov	r8, r7
		resp = driver_get_response();
    109a:	4e14      	ldr	r6, [pc, #80]	; (10ec <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    109c:	2100      	movs	r1, #0
    109e:	4814      	ldr	r0, [pc, #80]	; (10f0 <sd_mmc_check+0x4a8>)
    10a0:	47b8      	blx	r7
    10a2:	2800      	cmp	r0, #0
    10a4:	d100      	bne.n	10a8 <sd_mmc_check+0x460>
    10a6:	e638      	b.n	d1a <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    10a8:	9903      	ldr	r1, [sp, #12]
    10aa:	4812      	ldr	r0, [pc, #72]	; (10f4 <sd_mmc_check+0x4ac>)
    10ac:	47c0      	blx	r8
    10ae:	2800      	cmp	r0, #0
    10b0:	d100      	bne.n	10b4 <sd_mmc_check+0x46c>
    10b2:	e632      	b.n	d1a <sd_mmc_check+0xd2>
		resp = driver_get_response();
    10b4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    10b6:	07c3      	lsls	r3, r0, #31
    10b8:	d400      	bmi.n	10bc <sd_mmc_check+0x474>
    10ba:	e628      	b.n	d0e <sd_mmc_check+0xc6>
    10bc:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    10be:	2d00      	cmp	r5, #0
    10c0:	d1ec      	bne.n	109c <sd_mmc_check+0x454>
    10c2:	e62a      	b.n	d1a <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    10c4:	2209      	movs	r2, #9
    10c6:	4013      	ands	r3, r2
    10c8:	2b01      	cmp	r3, #1
    10ca:	d000      	beq.n	10ce <sd_mmc_check+0x486>
    10cc:	e609      	b.n	ce2 <sd_mmc_check+0x9a>
    10ce:	e5f8      	b.n	cc2 <sd_mmc_check+0x7a>
    10d0:	00008841 	.word	0x00008841
    10d4:	00001110 	.word	0x00001110
    10d8:	0000881d 	.word	0x0000881d
    10dc:	00000b89 	.word	0x00000b89
    10e0:	00000a11 	.word	0x00000a11
    10e4:	200001a8 	.word	0x200001a8
    10e8:	00001bef 	.word	0x00001bef
    10ec:	00008835 	.word	0x00008835
    10f0:	00001137 	.word	0x00001137
    10f4:	00001129 	.word	0x00001129

000010f8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    10f8:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    10fa:	4b06      	ldr	r3, [pc, #24]	; (1114 <sd_mmc_get_type+0x1c>)
    10fc:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
    10fe:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1100:	2800      	cmp	r0, #0
    1102:	d001      	beq.n	1108 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    1104:	0018      	movs	r0, r3
    1106:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    1108:	4b03      	ldr	r3, [pc, #12]	; (1118 <sd_mmc_get_type+0x20>)
    110a:	4798      	blx	r3
	return sd_mmc_card->type;
    110c:	4b03      	ldr	r3, [pc, #12]	; (111c <sd_mmc_get_type+0x24>)
    110e:	681b      	ldr	r3, [r3, #0]
    1110:	7bdb      	ldrb	r3, [r3, #15]
    1112:	e7f7      	b.n	1104 <sd_mmc_get_type+0xc>
    1114:	00000a3d 	.word	0x00000a3d
    1118:	00000c0d 	.word	0x00000c0d
    111c:	200001a8 	.word	0x200001a8

00001120 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    1120:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1122:	4b06      	ldr	r3, [pc, #24]	; (113c <sd_mmc_get_capacity+0x1c>)
    1124:	4798      	blx	r3
		return 0;
    1126:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1128:	2800      	cmp	r0, #0
    112a:	d001      	beq.n	1130 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    112c:	0018      	movs	r0, r3
    112e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    1130:	4b03      	ldr	r3, [pc, #12]	; (1140 <sd_mmc_get_capacity+0x20>)
    1132:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1134:	4b03      	ldr	r3, [pc, #12]	; (1144 <sd_mmc_get_capacity+0x24>)
    1136:	681b      	ldr	r3, [r3, #0]
    1138:	685b      	ldr	r3, [r3, #4]
    113a:	e7f7      	b.n	112c <sd_mmc_get_capacity+0xc>
    113c:	00000a3d 	.word	0x00000a3d
    1140:	00000c0d 	.word	0x00000c0d
    1144:	200001a8 	.word	0x200001a8

00001148 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    1148:	2000      	movs	r0, #0
    114a:	4770      	bx	lr

0000114c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    114c:	b570      	push	{r4, r5, r6, lr}
    114e:	b082      	sub	sp, #8
    1150:	000e      	movs	r6, r1
    1152:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1154:	4b16      	ldr	r3, [pc, #88]	; (11b0 <sd_mmc_init_read_blocks+0x64>)
    1156:	4798      	blx	r3
    1158:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    115a:	d002      	beq.n	1162 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    115c:	0020      	movs	r0, r4
    115e:	b002      	add	sp, #8
    1160:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    1162:	4b14      	ldr	r3, [pc, #80]	; (11b4 <sd_mmc_init_read_blocks+0x68>)
    1164:	4798      	blx	r3
    1166:	2800      	cmp	r0, #0
    1168:	d017      	beq.n	119a <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    116a:	2d01      	cmp	r5, #1
    116c:	d919      	bls.n	11a2 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    116e:	4812      	ldr	r0, [pc, #72]	; (11b8 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1170:	4b12      	ldr	r3, [pc, #72]	; (11bc <sd_mmc_init_read_blocks+0x70>)
    1172:	681b      	ldr	r3, [r3, #0]
    1174:	7bdb      	ldrb	r3, [r3, #15]
    1176:	071b      	lsls	r3, r3, #28
    1178:	d400      	bmi.n	117c <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    117a:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    117c:	2301      	movs	r3, #1
    117e:	9300      	str	r3, [sp, #0]
    1180:	002b      	movs	r3, r5
    1182:	2280      	movs	r2, #128	; 0x80
    1184:	0092      	lsls	r2, r2, #2
    1186:	0031      	movs	r1, r6
    1188:	4e0d      	ldr	r6, [pc, #52]	; (11c0 <sd_mmc_init_read_blocks+0x74>)
    118a:	47b0      	blx	r6
    118c:	2800      	cmp	r0, #0
    118e:	d00a      	beq.n	11a6 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    1190:	4b0c      	ldr	r3, [pc, #48]	; (11c4 <sd_mmc_init_read_blocks+0x78>)
    1192:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1194:	4b0c      	ldr	r3, [pc, #48]	; (11c8 <sd_mmc_init_read_blocks+0x7c>)
    1196:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    1198:	e7e0      	b.n	115c <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    119a:	4b0c      	ldr	r3, [pc, #48]	; (11cc <sd_mmc_init_read_blocks+0x80>)
    119c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    119e:	3405      	adds	r4, #5
    11a0:	e7dc      	b.n	115c <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    11a2:	480b      	ldr	r0, [pc, #44]	; (11d0 <sd_mmc_init_read_blocks+0x84>)
    11a4:	e7e4      	b.n	1170 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    11a6:	4b09      	ldr	r3, [pc, #36]	; (11cc <sd_mmc_init_read_blocks+0x80>)
    11a8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    11aa:	2405      	movs	r4, #5
    11ac:	e7d6      	b.n	115c <sd_mmc_init_read_blocks+0x10>
    11ae:	46c0      	nop			; (mov r8, r8)
    11b0:	00000a3d 	.word	0x00000a3d
    11b4:	00000b89 	.word	0x00000b89
    11b8:	00101112 	.word	0x00101112
    11bc:	200001a8 	.word	0x200001a8
    11c0:	0000868d 	.word	0x0000868d
    11c4:	200001ac 	.word	0x200001ac
    11c8:	200001ae 	.word	0x200001ae
    11cc:	00000c0d 	.word	0x00000c0d
    11d0:	00081111 	.word	0x00081111

000011d4 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    11d4:	b510      	push	{r4, lr}
    11d6:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    11d8:	4b07      	ldr	r3, [pc, #28]	; (11f8 <sd_mmc_start_read_blocks+0x24>)
    11da:	4798      	blx	r3
    11dc:	2800      	cmp	r0, #0
    11de:	d104      	bne.n	11ea <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    11e0:	2200      	movs	r2, #0
    11e2:	4b06      	ldr	r3, [pc, #24]	; (11fc <sd_mmc_start_read_blocks+0x28>)
    11e4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    11e6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    11e8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    11ea:	4a04      	ldr	r2, [pc, #16]	; (11fc <sd_mmc_start_read_blocks+0x28>)
    11ec:	8813      	ldrh	r3, [r2, #0]
    11ee:	1b1c      	subs	r4, r3, r4
    11f0:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    11f2:	2000      	movs	r0, #0
    11f4:	e7f8      	b.n	11e8 <sd_mmc_start_read_blocks+0x14>
    11f6:	46c0      	nop			; (mov r8, r8)
    11f8:	000088b9 	.word	0x000088b9
    11fc:	200001ac 	.word	0x200001ac

00001200 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    1200:	b510      	push	{r4, lr}
    1202:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    1204:	4b14      	ldr	r3, [pc, #80]	; (1258 <sd_mmc_wait_end_of_read_blocks+0x58>)
    1206:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1208:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    120a:	2800      	cmp	r0, #0
    120c:	d101      	bne.n	1212 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    120e:	0018      	movs	r0, r3
    1210:	bd10      	pop	{r4, pc}
	if (abort) {
    1212:	2c00      	cmp	r4, #0
    1214:	d010      	beq.n	1238 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    1216:	2200      	movs	r2, #0
    1218:	4b10      	ldr	r3, [pc, #64]	; (125c <sd_mmc_wait_end_of_read_blocks+0x5c>)
    121a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    121c:	4b10      	ldr	r3, [pc, #64]	; (1260 <sd_mmc_wait_end_of_read_blocks+0x60>)
    121e:	881b      	ldrh	r3, [r3, #0]
    1220:	2b01      	cmp	r3, #1
    1222:	d00f      	beq.n	1244 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1224:	2100      	movs	r1, #0
    1226:	480f      	ldr	r0, [pc, #60]	; (1264 <sd_mmc_wait_end_of_read_blocks+0x64>)
    1228:	4b0f      	ldr	r3, [pc, #60]	; (1268 <sd_mmc_wait_end_of_read_blocks+0x68>)
    122a:	4798      	blx	r3
    122c:	2800      	cmp	r0, #0
    122e:	d00d      	beq.n	124c <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    1230:	4b0e      	ldr	r3, [pc, #56]	; (126c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    1232:	4798      	blx	r3
	return SD_MMC_OK;
    1234:	2300      	movs	r3, #0
    1236:	e7ea      	b.n	120e <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    1238:	4b08      	ldr	r3, [pc, #32]	; (125c <sd_mmc_wait_end_of_read_blocks+0x5c>)
    123a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    123c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    123e:	2a00      	cmp	r2, #0
    1240:	d0ec      	beq.n	121c <sd_mmc_wait_end_of_read_blocks+0x1c>
    1242:	e7e4      	b.n	120e <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    1244:	4b09      	ldr	r3, [pc, #36]	; (126c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    1246:	4798      	blx	r3
		return SD_MMC_OK;
    1248:	2300      	movs	r3, #0
    124a:	e7e0      	b.n	120e <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    124c:	2100      	movs	r1, #0
    124e:	4805      	ldr	r0, [pc, #20]	; (1264 <sd_mmc_wait_end_of_read_blocks+0x64>)
    1250:	4b05      	ldr	r3, [pc, #20]	; (1268 <sd_mmc_wait_end_of_read_blocks+0x68>)
    1252:	4798      	blx	r3
    1254:	e7ec      	b.n	1230 <sd_mmc_wait_end_of_read_blocks+0x30>
    1256:	46c0      	nop			; (mov r8, r8)
    1258:	00008945 	.word	0x00008945
    125c:	200001ac 	.word	0x200001ac
    1260:	200001ae 	.word	0x200001ae
    1264:	0000310c 	.word	0x0000310c
    1268:	0000881d 	.word	0x0000881d
    126c:	00000c0d 	.word	0x00000c0d

00001270 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1270:	b570      	push	{r4, r5, r6, lr}
    1272:	b082      	sub	sp, #8
    1274:	000e      	movs	r6, r1
    1276:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1278:	4b11      	ldr	r3, [pc, #68]	; (12c0 <sd_mmc_init_write_blocks+0x50>)
    127a:	4798      	blx	r3
    127c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    127e:	d116      	bne.n	12ae <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    1280:	2d01      	cmp	r5, #1
    1282:	d917      	bls.n	12b4 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    1284:	480f      	ldr	r0, [pc, #60]	; (12c4 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1286:	4b10      	ldr	r3, [pc, #64]	; (12c8 <sd_mmc_init_write_blocks+0x58>)
    1288:	681b      	ldr	r3, [r3, #0]
    128a:	7bdb      	ldrb	r3, [r3, #15]
    128c:	071b      	lsls	r3, r3, #28
    128e:	d400      	bmi.n	1292 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1290:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1292:	2301      	movs	r3, #1
    1294:	9300      	str	r3, [sp, #0]
    1296:	002b      	movs	r3, r5
    1298:	2280      	movs	r2, #128	; 0x80
    129a:	0092      	lsls	r2, r2, #2
    129c:	0031      	movs	r1, r6
    129e:	4e0b      	ldr	r6, [pc, #44]	; (12cc <sd_mmc_init_write_blocks+0x5c>)
    12a0:	47b0      	blx	r6
    12a2:	2800      	cmp	r0, #0
    12a4:	d008      	beq.n	12b8 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    12a6:	4b0a      	ldr	r3, [pc, #40]	; (12d0 <sd_mmc_init_write_blocks+0x60>)
    12a8:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    12aa:	4b0a      	ldr	r3, [pc, #40]	; (12d4 <sd_mmc_init_write_blocks+0x64>)
    12ac:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    12ae:	0020      	movs	r0, r4
    12b0:	b002      	add	sp, #8
    12b2:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    12b4:	4808      	ldr	r0, [pc, #32]	; (12d8 <sd_mmc_init_write_blocks+0x68>)
    12b6:	e7e6      	b.n	1286 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    12b8:	4b08      	ldr	r3, [pc, #32]	; (12dc <sd_mmc_init_write_blocks+0x6c>)
    12ba:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    12bc:	2405      	movs	r4, #5
    12be:	e7f6      	b.n	12ae <sd_mmc_init_write_blocks+0x3e>
    12c0:	00000a3d 	.word	0x00000a3d
    12c4:	00109119 	.word	0x00109119
    12c8:	200001a8 	.word	0x200001a8
    12cc:	0000868d 	.word	0x0000868d
    12d0:	200001ac 	.word	0x200001ac
    12d4:	200001ae 	.word	0x200001ae
    12d8:	00089118 	.word	0x00089118
    12dc:	00000c0d 	.word	0x00000c0d

000012e0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    12e0:	b510      	push	{r4, lr}
    12e2:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    12e4:	4b07      	ldr	r3, [pc, #28]	; (1304 <sd_mmc_start_write_blocks+0x24>)
    12e6:	4798      	blx	r3
    12e8:	2800      	cmp	r0, #0
    12ea:	d104      	bne.n	12f6 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    12ec:	2200      	movs	r2, #0
    12ee:	4b06      	ldr	r3, [pc, #24]	; (1308 <sd_mmc_start_write_blocks+0x28>)
    12f0:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    12f2:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    12f4:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    12f6:	4a04      	ldr	r2, [pc, #16]	; (1308 <sd_mmc_start_write_blocks+0x28>)
    12f8:	8813      	ldrh	r3, [r2, #0]
    12fa:	1b1c      	subs	r4, r3, r4
    12fc:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    12fe:	2000      	movs	r0, #0
    1300:	e7f8      	b.n	12f4 <sd_mmc_start_write_blocks+0x14>
    1302:	46c0      	nop			; (mov r8, r8)
    1304:	00008949 	.word	0x00008949
    1308:	200001ac 	.word	0x200001ac

0000130c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    130c:	b510      	push	{r4, lr}
    130e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    1310:	4b0e      	ldr	r3, [pc, #56]	; (134c <sd_mmc_wait_end_of_write_blocks+0x40>)
    1312:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1314:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    1316:	2800      	cmp	r0, #0
    1318:	d101      	bne.n	131e <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    131a:	0018      	movs	r0, r3
    131c:	bd10      	pop	{r4, pc}
	if (abort) {
    131e:	2c00      	cmp	r4, #0
    1320:	d00a      	beq.n	1338 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    1322:	2200      	movs	r2, #0
    1324:	4b0a      	ldr	r3, [pc, #40]	; (1350 <sd_mmc_wait_end_of_write_blocks+0x44>)
    1326:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1328:	4b0a      	ldr	r3, [pc, #40]	; (1354 <sd_mmc_wait_end_of_write_blocks+0x48>)
    132a:	881b      	ldrh	r3, [r3, #0]
    132c:	2b01      	cmp	r3, #1
    132e:	d009      	beq.n	1344 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    1330:	4b09      	ldr	r3, [pc, #36]	; (1358 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    1332:	4798      	blx	r3
	return SD_MMC_OK;
    1334:	2300      	movs	r3, #0
    1336:	e7f0      	b.n	131a <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    1338:	4b05      	ldr	r3, [pc, #20]	; (1350 <sd_mmc_wait_end_of_write_blocks+0x44>)
    133a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    133c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    133e:	2a00      	cmp	r2, #0
    1340:	d0f2      	beq.n	1328 <sd_mmc_wait_end_of_write_blocks+0x1c>
    1342:	e7ea      	b.n	131a <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    1344:	4b04      	ldr	r3, [pc, #16]	; (1358 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    1346:	4798      	blx	r3
		return SD_MMC_OK;
    1348:	2300      	movs	r3, #0
    134a:	e7e6      	b.n	131a <sd_mmc_wait_end_of_write_blocks+0xe>
    134c:	000089c9 	.word	0x000089c9
    1350:	200001ac 	.word	0x200001ac
    1354:	200001ae 	.word	0x200001ae
    1358:	00000c0d 	.word	0x00000c0d

0000135c <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
    135c:	2000      	movs	r0, #0
    135e:	4770      	bx	lr

00001360 <udi_msc_cbw_wait>:
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}

static void udi_msc_cbw_wait(void)
{
    1360:	b510      	push	{r4, lr}
    1362:	b082      	sub	sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    1364:	4b08      	ldr	r3, [pc, #32]	; (1388 <udi_msc_cbw_wait+0x28>)
    1366:	9300      	str	r3, [sp, #0]
    1368:	231f      	movs	r3, #31
    136a:	4a08      	ldr	r2, [pc, #32]	; (138c <udi_msc_cbw_wait+0x2c>)
    136c:	2101      	movs	r1, #1
    136e:	2002      	movs	r0, #2
    1370:	4c07      	ldr	r4, [pc, #28]	; (1390 <udi_msc_cbw_wait+0x30>)
    1372:	47a0      	blx	r4
    1374:	2800      	cmp	r0, #0
    1376:	d001      	beq.n	137c <udi_msc_cbw_wait+0x1c>
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
	}
}
    1378:	b002      	add	sp, #8
    137a:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
    137c:	4905      	ldr	r1, [pc, #20]	; (1394 <udi_msc_cbw_wait+0x34>)
    137e:	3002      	adds	r0, #2
    1380:	4b05      	ldr	r3, [pc, #20]	; (1398 <udi_msc_cbw_wait+0x38>)
    1382:	4798      	blx	r3
}
    1384:	e7f8      	b.n	1378 <udi_msc_cbw_wait+0x18>
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	00001785 	.word	0x00001785
    138c:	200001d8 	.word	0x200001d8
    1390:	00003b35 	.word	0x00003b35
    1394:	00001361 	.word	0x00001361
    1398:	00003add 	.word	0x00003add

0000139c <udi_msc_enable>:
{
    139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_msc_b_trans_req = false;
    139e:	2300      	movs	r3, #0
    13a0:	4a13      	ldr	r2, [pc, #76]	; (13f0 <udi_msc_enable+0x54>)
    13a2:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
    13a4:	4a13      	ldr	r2, [pc, #76]	; (13f4 <udi_msc_enable+0x58>)
    13a6:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
    13a8:	3301      	adds	r3, #1
    13aa:	4a13      	ldr	r2, [pc, #76]	; (13f8 <udi_msc_enable+0x5c>)
    13ac:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    13ae:	4a13      	ldr	r2, [pc, #76]	; (13fc <udi_msc_enable+0x60>)
    13b0:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
    13b2:	4b13      	ldr	r3, [pc, #76]	; (1400 <udi_msc_enable+0x64>)
    13b4:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
    13b6:	2800      	cmp	r0, #0
    13b8:	d105      	bne.n	13c6 <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
    13ba:	2200      	movs	r2, #0
    13bc:	4b11      	ldr	r3, [pc, #68]	; (1404 <udi_msc_enable+0x68>)
    13be:	701a      	strb	r2, [r3, #0]
		return false; // No lun available, then not authorize to enable interface
    13c0:	2500      	movs	r5, #0
}
    13c2:	0028      	movs	r0, r5
    13c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_nb_lun--;
    13c6:	3801      	subs	r0, #1
    13c8:	4b0e      	ldr	r3, [pc, #56]	; (1404 <udi_msc_enable+0x68>)
    13ca:	7018      	strb	r0, [r3, #0]
	if (!UDI_MSC_ENABLE_EXT())
    13cc:	4b0e      	ldr	r3, [pc, #56]	; (1408 <udi_msc_enable+0x6c>)
    13ce:	4798      	blx	r3
    13d0:	1e05      	subs	r5, r0, #0
    13d2:	d0f6      	beq.n	13c2 <udi_msc_enable+0x26>
    13d4:	2400      	movs	r4, #0
		mem_unload(lun, false);
    13d6:	4f0d      	ldr	r7, [pc, #52]	; (140c <udi_msc_enable+0x70>)
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    13d8:	4e0a      	ldr	r6, [pc, #40]	; (1404 <udi_msc_enable+0x68>)
		mem_unload(lun, false);
    13da:	2100      	movs	r1, #0
    13dc:	0020      	movs	r0, r4
    13de:	47b8      	blx	r7
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    13e0:	3401      	adds	r4, #1
    13e2:	b2e4      	uxtb	r4, r4
    13e4:	7833      	ldrb	r3, [r6, #0]
    13e6:	42a3      	cmp	r3, r4
    13e8:	d2f7      	bcs.n	13da <udi_msc_enable+0x3e>
	udi_msc_cbw_wait();
    13ea:	4b09      	ldr	r3, [pc, #36]	; (1410 <udi_msc_enable+0x74>)
    13ec:	4798      	blx	r3
	return true;
    13ee:	e7e8      	b.n	13c2 <udi_msc_enable+0x26>
    13f0:	200001ce 	.word	0x200001ce
    13f4:	200001cc 	.word	0x200001cc
    13f8:	20000044 	.word	0x20000044
    13fc:	20000045 	.word	0x20000045
    1400:	000089ed 	.word	0x000089ed
    1404:	200001fc 	.word	0x200001fc
    1408:	0000634d 	.word	0x0000634d
    140c:	00008a2d 	.word	0x00008a2d
    1410:	00001361 	.word	0x00001361

00001414 <udi_msc_csw_sent>:
}


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
    1414:	b510      	push	{r4, lr}
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
    1416:	4b01      	ldr	r3, [pc, #4]	; (141c <udi_msc_csw_sent+0x8>)
    1418:	4798      	blx	r3
}
    141a:	bd10      	pop	{r4, pc}
    141c:	00001361 	.word	0x00001361

00001420 <udi_msc_csw_send>:
{
    1420:	b510      	push	{r4, lr}
    1422:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    1424:	4b08      	ldr	r3, [pc, #32]	; (1448 <udi_msc_csw_send+0x28>)
    1426:	9300      	str	r3, [sp, #0]
    1428:	230d      	movs	r3, #13
    142a:	4a08      	ldr	r2, [pc, #32]	; (144c <udi_msc_csw_send+0x2c>)
    142c:	2100      	movs	r1, #0
    142e:	2081      	movs	r0, #129	; 0x81
    1430:	4c07      	ldr	r4, [pc, #28]	; (1450 <udi_msc_csw_send+0x30>)
    1432:	47a0      	blx	r4
    1434:	2800      	cmp	r0, #0
    1436:	d001      	beq.n	143c <udi_msc_csw_send+0x1c>
}
    1438:	b002      	add	sp, #8
    143a:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    143c:	4905      	ldr	r1, [pc, #20]	; (1454 <udi_msc_csw_send+0x34>)
    143e:	3081      	adds	r0, #129	; 0x81
    1440:	4b05      	ldr	r3, [pc, #20]	; (1458 <udi_msc_csw_send+0x38>)
    1442:	4798      	blx	r3
}
    1444:	e7f8      	b.n	1438 <udi_msc_csw_send+0x18>
    1446:	46c0      	nop			; (mov r8, r8)
    1448:	00001415 	.word	0x00001415
    144c:	20000048 	.word	0x20000048
    1450:	00003b35 	.word	0x00003b35
    1454:	00001421 	.word	0x00001421
    1458:	00003add 	.word	0x00003add

0000145c <udi_msc_cbw_invalid>:
{
    145c:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    145e:	4b06      	ldr	r3, [pc, #24]	; (1478 <udi_msc_cbw_invalid+0x1c>)
    1460:	781b      	ldrb	r3, [r3, #0]
    1462:	2b00      	cmp	r3, #0
    1464:	d100      	bne.n	1468 <udi_msc_cbw_invalid+0xc>
}
    1466:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_OUT);
    1468:	2002      	movs	r0, #2
    146a:	4b04      	ldr	r3, [pc, #16]	; (147c <udi_msc_cbw_invalid+0x20>)
    146c:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
    146e:	4904      	ldr	r1, [pc, #16]	; (1480 <udi_msc_cbw_invalid+0x24>)
    1470:	2002      	movs	r0, #2
    1472:	4b04      	ldr	r3, [pc, #16]	; (1484 <udi_msc_cbw_invalid+0x28>)
    1474:	4798      	blx	r3
    1476:	e7f6      	b.n	1466 <udi_msc_cbw_invalid+0xa>
    1478:	200001cc 	.word	0x200001cc
    147c:	00003969 	.word	0x00003969
    1480:	0000145d 	.word	0x0000145d
    1484:	00003add 	.word	0x00003add

00001488 <udi_msc_csw_invalid>:
{
    1488:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    148a:	4b06      	ldr	r3, [pc, #24]	; (14a4 <udi_msc_csw_invalid+0x1c>)
    148c:	781b      	ldrb	r3, [r3, #0]
    148e:	2b00      	cmp	r3, #0
    1490:	d100      	bne.n	1494 <udi_msc_csw_invalid+0xc>
}
    1492:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_IN);
    1494:	2081      	movs	r0, #129	; 0x81
    1496:	4b04      	ldr	r3, [pc, #16]	; (14a8 <udi_msc_csw_invalid+0x20>)
    1498:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
    149a:	4904      	ldr	r1, [pc, #16]	; (14ac <udi_msc_csw_invalid+0x24>)
    149c:	2081      	movs	r0, #129	; 0x81
    149e:	4b04      	ldr	r3, [pc, #16]	; (14b0 <udi_msc_csw_invalid+0x28>)
    14a0:	4798      	blx	r3
    14a2:	e7f6      	b.n	1492 <udi_msc_csw_invalid+0xa>
    14a4:	200001cc 	.word	0x200001cc
    14a8:	00003969 	.word	0x00003969
    14ac:	00001489 	.word	0x00001489
    14b0:	00003add 	.word	0x00003add

000014b4 <udi_msc_csw_process>:
{
    14b4:	b510      	push	{r4, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
    14b6:	4b0b      	ldr	r3, [pc, #44]	; (14e4 <udi_msc_csw_process+0x30>)
    14b8:	689b      	ldr	r3, [r3, #8]
    14ba:	2b00      	cmp	r3, #0
    14bc:	d006      	beq.n	14cc <udi_msc_csw_process+0x18>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    14be:	4b0a      	ldr	r3, [pc, #40]	; (14e8 <udi_msc_csw_process+0x34>)
    14c0:	7b1b      	ldrb	r3, [r3, #12]
    14c2:	2b7f      	cmp	r3, #127	; 0x7f
    14c4:	d809      	bhi.n	14da <udi_msc_csw_process+0x26>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    14c6:	2002      	movs	r0, #2
    14c8:	4b08      	ldr	r3, [pc, #32]	; (14ec <udi_msc_csw_process+0x38>)
    14ca:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    14cc:	4b06      	ldr	r3, [pc, #24]	; (14e8 <udi_msc_csw_process+0x34>)
    14ce:	685a      	ldr	r2, [r3, #4]
    14d0:	4b04      	ldr	r3, [pc, #16]	; (14e4 <udi_msc_csw_process+0x30>)
    14d2:	605a      	str	r2, [r3, #4]
	udi_msc_csw_send();
    14d4:	4b06      	ldr	r3, [pc, #24]	; (14f0 <udi_msc_csw_process+0x3c>)
    14d6:	4798      	blx	r3
}
    14d8:	bd10      	pop	{r4, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
    14da:	2081      	movs	r0, #129	; 0x81
    14dc:	4b03      	ldr	r3, [pc, #12]	; (14ec <udi_msc_csw_process+0x38>)
    14de:	4798      	blx	r3
    14e0:	e7f4      	b.n	14cc <udi_msc_csw_process+0x18>
    14e2:	46c0      	nop			; (mov r8, r8)
    14e4:	20000048 	.word	0x20000048
    14e8:	200001d8 	.word	0x200001d8
    14ec:	00003969 	.word	0x00003969
    14f0:	00001421 	.word	0x00001421

000014f4 <udi_msc_clear_sense>:

//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
    14f4:	b510      	push	{r4, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    14f6:	4c05      	ldr	r4, [pc, #20]	; (150c <udi_msc_clear_sense+0x18>)
    14f8:	2212      	movs	r2, #18
    14fa:	2100      	movs	r1, #0
    14fc:	0020      	movs	r0, r4
    14fe:	4b04      	ldr	r3, [pc, #16]	; (1510 <udi_msc_clear_sense+0x1c>)
    1500:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    1502:	23f0      	movs	r3, #240	; 0xf0
    1504:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    1506:	3be6      	subs	r3, #230	; 0xe6
    1508:	71e3      	strb	r3, [r4, #7]
}
    150a:	bd10      	pop	{r4, pc}
    150c:	20000200 	.word	0x20000200
    1510:	00009653 	.word	0x00009653

00001514 <udi_msc_sense_fail>:

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
    1514:	b570      	push	{r4, r5, r6, lr}
    1516:	0006      	movs	r6, r0
    1518:	000d      	movs	r5, r1
    151a:	0014      	movs	r4, r2
	udi_msc_clear_sense();
    151c:	4b08      	ldr	r3, [pc, #32]	; (1540 <udi_msc_sense_fail+0x2c>)
    151e:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    1520:	2201      	movs	r2, #1
    1522:	4b08      	ldr	r3, [pc, #32]	; (1544 <udi_msc_sense_fail+0x30>)
    1524:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    1526:	4b08      	ldr	r3, [pc, #32]	; (1548 <udi_msc_sense_fail+0x34>)
    1528:	709e      	strb	r6, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
    152a:	0e22      	lsrs	r2, r4, #24
    152c:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
    152e:	0c22      	lsrs	r2, r4, #16
    1530:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
    1532:	0a22      	lsrs	r2, r4, #8
    1534:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
    1536:	719c      	strb	r4, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    1538:	0a2a      	lsrs	r2, r5, #8
    153a:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
    153c:	735d      	strb	r5, [r3, #13]
}
    153e:	bd70      	pop	{r4, r5, r6, pc}
    1540:	000014f5 	.word	0x000014f5
    1544:	20000048 	.word	0x20000048
    1548:	20000200 	.word	0x20000200

0000154c <udi_msc_sense_fail_cdb_invalid>:
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
}

static void udi_msc_sense_fail_cdb_invalid(void)
{
    154c:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    154e:	2200      	movs	r2, #0
    1550:	2190      	movs	r1, #144	; 0x90
    1552:	0189      	lsls	r1, r1, #6
    1554:	2005      	movs	r0, #5
    1556:	4b01      	ldr	r3, [pc, #4]	; (155c <udi_msc_sense_fail_cdb_invalid+0x10>)
    1558:	4798      	blx	r3
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
    155a:	bd10      	pop	{r4, pc}
    155c:	00001515 	.word	0x00001515

00001560 <udi_msc_cbw_validate>:
{
    1560:	b510      	push	{r4, lr}
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    1562:	4b09      	ldr	r3, [pc, #36]	; (1588 <udi_msc_cbw_validate+0x28>)
    1564:	7b1b      	ldrb	r3, [r3, #12]
    1566:	4059      	eors	r1, r3
    1568:	b249      	sxtb	r1, r1
    156a:	2900      	cmp	r1, #0
    156c:	db04      	blt.n	1578 <udi_msc_cbw_validate+0x18>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    156e:	4b07      	ldr	r3, [pc, #28]	; (158c <udi_msc_cbw_validate+0x2c>)
    1570:	689a      	ldr	r2, [r3, #8]
	return true;
    1572:	2301      	movs	r3, #1
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    1574:	4282      	cmp	r2, r0
    1576:	d204      	bcs.n	1582 <udi_msc_cbw_validate+0x22>
		udi_msc_sense_fail_cdb_invalid();
    1578:	4b05      	ldr	r3, [pc, #20]	; (1590 <udi_msc_cbw_validate+0x30>)
    157a:	4798      	blx	r3
		udi_msc_csw_process();
    157c:	4b05      	ldr	r3, [pc, #20]	; (1594 <udi_msc_cbw_validate+0x34>)
    157e:	4798      	blx	r3
		return false;
    1580:	2300      	movs	r3, #0
}
    1582:	0018      	movs	r0, r3
    1584:	bd10      	pop	{r4, pc}
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	200001d8 	.word	0x200001d8
    158c:	20000048 	.word	0x20000048
    1590:	0000154d 	.word	0x0000154d
    1594:	000014b5 	.word	0x000014b5

00001598 <udi_msc_sense_fail_hardware>:
{
    1598:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    159a:	2200      	movs	r2, #0
    159c:	2100      	movs	r1, #0
    159e:	2004      	movs	r0, #4
    15a0:	4b01      	ldr	r3, [pc, #4]	; (15a8 <udi_msc_sense_fail_hardware+0x10>)
    15a2:	4798      	blx	r3
}
    15a4:	bd10      	pop	{r4, pc}
    15a6:	46c0      	nop			; (mov r8, r8)
    15a8:	00001515 	.word	0x00001515

000015ac <udi_msc_data_send>:
{
    15ac:	b510      	push	{r4, lr}
    15ae:	b082      	sub	sp, #8
    15b0:	0002      	movs	r2, r0
    15b2:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    15b4:	4907      	ldr	r1, [pc, #28]	; (15d4 <udi_msc_data_send+0x28>)
    15b6:	9100      	str	r1, [sp, #0]
    15b8:	2101      	movs	r1, #1
    15ba:	2081      	movs	r0, #129	; 0x81
    15bc:	4c06      	ldr	r4, [pc, #24]	; (15d8 <udi_msc_data_send+0x2c>)
    15be:	47a0      	blx	r4
    15c0:	2800      	cmp	r0, #0
    15c2:	d001      	beq.n	15c8 <udi_msc_data_send+0x1c>
}
    15c4:	b002      	add	sp, #8
    15c6:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_hardware();
    15c8:	4b04      	ldr	r3, [pc, #16]	; (15dc <udi_msc_data_send+0x30>)
    15ca:	4798      	blx	r3
		udi_msc_csw_process();
    15cc:	4b04      	ldr	r3, [pc, #16]	; (15e0 <udi_msc_data_send+0x34>)
    15ce:	4798      	blx	r3
}
    15d0:	e7f8      	b.n	15c4 <udi_msc_data_send+0x18>
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	00001625 	.word	0x00001625
    15d8:	00003b35 	.word	0x00003b35
    15dc:	00001599 	.word	0x00001599
    15e0:	000014b5 	.word	0x000014b5

000015e4 <udi_msc_sense_fail_busy_or_change>:
{
    15e4:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    15e6:	2200      	movs	r2, #0
    15e8:	21a0      	movs	r1, #160	; 0xa0
    15ea:	0189      	lsls	r1, r1, #6
    15ec:	2006      	movs	r0, #6
    15ee:	4b01      	ldr	r3, [pc, #4]	; (15f4 <udi_msc_sense_fail_busy_or_change+0x10>)
    15f0:	4798      	blx	r3
}
    15f2:	bd10      	pop	{r4, pc}
    15f4:	00001515 	.word	0x00001515

000015f8 <udi_msc_sense_fail_not_present>:
{
    15f8:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    15fa:	2200      	movs	r2, #0
    15fc:	21e8      	movs	r1, #232	; 0xe8
    15fe:	0189      	lsls	r1, r1, #6
    1600:	2002      	movs	r0, #2
    1602:	4b01      	ldr	r3, [pc, #4]	; (1608 <udi_msc_sense_fail_not_present+0x10>)
    1604:	4798      	blx	r3
}
    1606:	bd10      	pop	{r4, pc}
    1608:	00001515 	.word	0x00001515

0000160c <udi_msc_sense_pass>:
{
    160c:	b510      	push	{r4, lr}
	udi_msc_clear_sense();
    160e:	4b03      	ldr	r3, [pc, #12]	; (161c <udi_msc_sense_pass+0x10>)
    1610:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    1612:	2200      	movs	r2, #0
    1614:	4b02      	ldr	r3, [pc, #8]	; (1620 <udi_msc_sense_pass+0x14>)
    1616:	731a      	strb	r2, [r3, #12]
}
    1618:	bd10      	pop	{r4, pc}
    161a:	46c0      	nop			; (mov r8, r8)
    161c:	000014f5 	.word	0x000014f5
    1620:	20000048 	.word	0x20000048

00001624 <udi_msc_data_sent>:
{
    1624:	b510      	push	{r4, lr}
    1626:	000c      	movs	r4, r1
	if (UDD_EP_TRANSFER_OK != status) {
    1628:	2800      	cmp	r0, #0
    162a:	d000      	beq.n	162e <udi_msc_data_sent+0xa>
}
    162c:	bd10      	pop	{r4, pc}
	udi_msc_sense_pass();
    162e:	4b04      	ldr	r3, [pc, #16]	; (1640 <udi_msc_data_sent+0x1c>)
    1630:	4798      	blx	r3
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    1632:	4b04      	ldr	r3, [pc, #16]	; (1644 <udi_msc_data_sent+0x20>)
    1634:	689a      	ldr	r2, [r3, #8]
    1636:	1b14      	subs	r4, r2, r4
    1638:	609c      	str	r4, [r3, #8]
	udi_msc_csw_process();
    163a:	4b03      	ldr	r3, [pc, #12]	; (1648 <udi_msc_data_sent+0x24>)
    163c:	4798      	blx	r3
    163e:	e7f5      	b.n	162c <udi_msc_data_sent+0x8>
    1640:	0000160d 	.word	0x0000160d
    1644:	20000048 	.word	0x20000048
    1648:	000014b5 	.word	0x000014b5

0000164c <udi_msc_spc_mode_sense>:
	udi_msc_csw_process();
}


static void udi_msc_spc_mode_sense(bool b_sense10)
{
    164c:	b570      	push	{r4, r5, r6, lr}
    164e:	0005      	movs	r5, r0
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
    1650:	2214      	movs	r2, #20
    1652:	2100      	movs	r1, #0
    1654:	4823      	ldr	r0, [pc, #140]	; (16e4 <udi_msc_spc_mode_sense+0x98>)
    1656:	4b24      	ldr	r3, [pc, #144]	; (16e8 <udi_msc_spc_mode_sense+0x9c>)
    1658:	4798      	blx	r3

	// Initialize process
	if (b_sense10) {
    165a:	2d00      	cmp	r5, #0
    165c:	d018      	beq.n	1690 <udi_msc_spc_mode_sense+0x44>
		request_lgt = udi_msc_cbw.CDB[8];
    165e:	4b23      	ldr	r3, [pc, #140]	; (16ec <udi_msc_spc_mode_sense+0xa0>)
    1660:	7dd9      	ldrb	r1, [r3, #23]
		ptr_mode = &sense.s10.sense_data;
    1662:	4a20      	ldr	r2, [pc, #128]	; (16e4 <udi_msc_spc_mode_sense+0x98>)
    1664:	3208      	adds	r2, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    1666:	2408      	movs	r4, #8
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    1668:	4b20      	ldr	r3, [pc, #128]	; (16ec <udi_msc_spc_mode_sense+0xa0>)
    166a:	7c58      	ldrb	r0, [r3, #17]
    166c:	233f      	movs	r3, #63	; 0x3f
    166e:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
    1670:	2b1c      	cmp	r3, #28
    1672:	d013      	beq.n	169c <udi_msc_spc_mode_sense+0x50>
			|| (SCSI_MS_MODE_ALL == mode)) {
    1674:	2b3f      	cmp	r3, #63	; 0x3f
    1676:	d011      	beq.n	169c <udi_msc_spc_mode_sense+0x50>
    1678:	1c20      	adds	r0, r4, #0
    167a:	428c      	cmp	r4, r1
    167c:	d900      	bls.n	1680 <udi_msc_spc_mode_sense+0x34>
    167e:	1c08      	adds	r0, r1, #0
    1680:	b2c6      	uxtb	r6, r0
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    1682:	2180      	movs	r1, #128	; 0x80
    1684:	0030      	movs	r0, r6
    1686:	4b1a      	ldr	r3, [pc, #104]	; (16f0 <udi_msc_spc_mode_sense+0xa4>)
    1688:	4798      	blx	r3
    168a:	2800      	cmp	r0, #0
    168c:	d10f      	bne.n	16ae <udi_msc_spc_mode_sense+0x62>
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
}
    168e:	bd70      	pop	{r4, r5, r6, pc}
		request_lgt = udi_msc_cbw.CDB[4];
    1690:	4b16      	ldr	r3, [pc, #88]	; (16ec <udi_msc_spc_mode_sense+0xa0>)
    1692:	7cd9      	ldrb	r1, [r3, #19]
		ptr_mode = &sense.s6.sense_data;
    1694:	4a13      	ldr	r2, [pc, #76]	; (16e4 <udi_msc_spc_mode_sense+0x98>)
    1696:	3204      	adds	r2, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    1698:	2404      	movs	r4, #4
    169a:	e7e5      	b.n	1668 <udi_msc_spc_mode_sense+0x1c>
		ptr_mode->page_code =
    169c:	231c      	movs	r3, #28
    169e:	7013      	strb	r3, [r2, #0]
		ptr_mode->page_length =
    16a0:	3b12      	subs	r3, #18
    16a2:	7053      	strb	r3, [r2, #1]
		ptr_mode->mrie =
    16a4:	3b05      	subs	r3, #5
    16a6:	70d3      	strb	r3, [r2, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    16a8:	340c      	adds	r4, #12
    16aa:	b2e4      	uxtb	r4, r4
    16ac:	e7e4      	b.n	1678 <udi_msc_spc_mode_sense+0x2c>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    16ae:	4b0f      	ldr	r3, [pc, #60]	; (16ec <udi_msc_spc_mode_sense+0xa0>)
    16b0:	7b58      	ldrb	r0, [r3, #13]
    16b2:	4b10      	ldr	r3, [pc, #64]	; (16f4 <udi_msc_spc_mode_sense+0xa8>)
    16b4:	4798      	blx	r3
    16b6:	1e43      	subs	r3, r0, #1
    16b8:	4198      	sbcs	r0, r3
    16ba:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
    16bc:	2d00      	cmp	r5, #0
    16be:	d00c      	beq.n	16da <udi_msc_spc_mode_sense+0x8e>
				cpu_to_be16((data_sense_lgt - 2));
    16c0:	3c02      	subs	r4, #2
    16c2:	b2a4      	uxth	r4, r4
		sense.s10.header.mode_data_length =
    16c4:	4a07      	ldr	r2, [pc, #28]	; (16e4 <udi_msc_spc_mode_sense+0x98>)
				cpu_to_be16((data_sense_lgt - 2));
    16c6:	0a23      	lsrs	r3, r4, #8
    16c8:	0224      	lsls	r4, r4, #8
    16ca:	431c      	orrs	r4, r3
		sense.s10.header.mode_data_length =
    16cc:	8014      	strh	r4, [r2, #0]
		sense.s10.header.device_specific_parameter = wp;
    16ce:	70d0      	strb	r0, [r2, #3]
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
    16d0:	0031      	movs	r1, r6
    16d2:	4804      	ldr	r0, [pc, #16]	; (16e4 <udi_msc_spc_mode_sense+0x98>)
    16d4:	4b08      	ldr	r3, [pc, #32]	; (16f8 <udi_msc_spc_mode_sense+0xac>)
    16d6:	4798      	blx	r3
    16d8:	e7d9      	b.n	168e <udi_msc_spc_mode_sense+0x42>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    16da:	4b02      	ldr	r3, [pc, #8]	; (16e4 <udi_msc_spc_mode_sense+0x98>)
    16dc:	3c01      	subs	r4, #1
    16de:	701c      	strb	r4, [r3, #0]
		sense.s6.header.device_specific_parameter = wp;
    16e0:	7098      	strb	r0, [r3, #2]
    16e2:	e7f5      	b.n	16d0 <udi_msc_spc_mode_sense+0x84>
    16e4:	200001b4 	.word	0x200001b4
    16e8:	00009653 	.word	0x00009653
    16ec:	200001d8 	.word	0x200001d8
    16f0:	00001561 	.word	0x00001561
    16f4:	00008a3d 	.word	0x00008a3d
    16f8:	000015ad 	.word	0x000015ad

000016fc <udi_msc_sbc_trans>:
			sizeof(udi_msc_capacity));
}


static void udi_msc_sbc_trans(bool b_read)
{
    16fc:	b510      	push	{r4, lr}
    16fe:	1e04      	subs	r4, r0, #0
	uint32_t trans_size;

	if (!b_read) {
    1700:	d01e      	beq.n	1740 <udi_msc_sbc_trans+0x44>
			udi_msc_csw_process();
			return;
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    1702:	4a17      	ldr	r2, [pc, #92]	; (1760 <udi_msc_sbc_trans+0x64>)
    1704:	4b17      	ldr	r3, [pc, #92]	; (1764 <udi_msc_sbc_trans+0x68>)
    1706:	7c59      	ldrb	r1, [r3, #17]
    1708:	70d1      	strb	r1, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    170a:	7c99      	ldrb	r1, [r3, #18]
    170c:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    170e:	7cd9      	ldrb	r1, [r3, #19]
    1710:	7051      	strb	r1, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    1712:	7d19      	ldrb	r1, [r3, #20]
    1714:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    1716:	4a14      	ldr	r2, [pc, #80]	; (1768 <udi_msc_sbc_trans+0x6c>)
    1718:	7d99      	ldrb	r1, [r3, #22]
    171a:	7051      	strb	r1, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    171c:	7ddb      	ldrb	r3, [r3, #23]
    171e:	7013      	strb	r3, [r2, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    1720:	8810      	ldrh	r0, [r2, #0]
    1722:	0240      	lsls	r0, r0, #9
	if (!udi_msc_cbw_validate(trans_size,
    1724:	0021      	movs	r1, r4
    1726:	1e4b      	subs	r3, r1, #1
    1728:	4199      	sbcs	r1, r3
    172a:	01c9      	lsls	r1, r1, #7
    172c:	4b0f      	ldr	r3, [pc, #60]	; (176c <udi_msc_sbc_trans+0x70>)
    172e:	4798      	blx	r3
    1730:	2800      	cmp	r0, #0
    1732:	d004      	beq.n	173e <udi_msc_sbc_trans+0x42>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
    1734:	4b0e      	ldr	r3, [pc, #56]	; (1770 <udi_msc_sbc_trans+0x74>)
    1736:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
    1738:	2201      	movs	r2, #1
    173a:	4b0e      	ldr	r3, [pc, #56]	; (1774 <udi_msc_sbc_trans+0x78>)
    173c:	701a      	strb	r2, [r3, #0]
	UDI_MSC_NOTIFY_TRANS_EXT();
}
    173e:	bd10      	pop	{r4, pc}
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    1740:	4b08      	ldr	r3, [pc, #32]	; (1764 <udi_msc_sbc_trans+0x68>)
    1742:	7b58      	ldrb	r0, [r3, #13]
    1744:	4b0c      	ldr	r3, [pc, #48]	; (1778 <udi_msc_sbc_trans+0x7c>)
    1746:	4798      	blx	r3
    1748:	2800      	cmp	r0, #0
    174a:	d0da      	beq.n	1702 <udi_msc_sbc_trans+0x6>
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
    174c:	2200      	movs	r2, #0
    174e:	219c      	movs	r1, #156	; 0x9c
    1750:	0189      	lsls	r1, r1, #6
    1752:	2007      	movs	r0, #7
    1754:	4b09      	ldr	r3, [pc, #36]	; (177c <udi_msc_sbc_trans+0x80>)
    1756:	4798      	blx	r3
			udi_msc_csw_process();
    1758:	4b09      	ldr	r3, [pc, #36]	; (1780 <udi_msc_sbc_trans+0x84>)
    175a:	4798      	blx	r3
			return;
    175c:	e7ef      	b.n	173e <udi_msc_sbc_trans+0x42>
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	200001c8 	.word	0x200001c8
    1764:	200001d8 	.word	0x200001d8
    1768:	200001f8 	.word	0x200001f8
    176c:	00001561 	.word	0x00001561
    1770:	200001cd 	.word	0x200001cd
    1774:	200001ce 	.word	0x200001ce
    1778:	00008a3d 	.word	0x00008a3d
    177c:	00001515 	.word	0x00001515
    1780:	000014b5 	.word	0x000014b5

00001784 <udi_msc_cbw_received>:
{
    1784:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    1786:	2800      	cmp	r0, #0
    1788:	d10d      	bne.n	17a6 <udi_msc_cbw_received+0x22>
	if ((sizeof(udi_msc_cbw) != nb_received)
    178a:	291f      	cmp	r1, #31
    178c:	d104      	bne.n	1798 <udi_msc_cbw_received+0x14>
			|| (udi_msc_cbw.dCBWSignature !=
    178e:	4b84      	ldr	r3, [pc, #528]	; (19a0 <udi_msc_cbw_received+0x21c>)
    1790:	4a84      	ldr	r2, [pc, #528]	; (19a4 <udi_msc_cbw_received+0x220>)
    1792:	6812      	ldr	r2, [r2, #0]
    1794:	429a      	cmp	r2, r3
    1796:	d007      	beq.n	17a8 <udi_msc_cbw_received+0x24>
		udi_msc_b_cbw_invalid = true;
    1798:	2201      	movs	r2, #1
    179a:	4b83      	ldr	r3, [pc, #524]	; (19a8 <udi_msc_cbw_received+0x224>)
    179c:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
    179e:	4b83      	ldr	r3, [pc, #524]	; (19ac <udi_msc_cbw_received+0x228>)
    17a0:	4798      	blx	r3
		udi_msc_csw_invalid();
    17a2:	4b83      	ldr	r3, [pc, #524]	; (19b0 <udi_msc_cbw_received+0x22c>)
    17a4:	4798      	blx	r3
}
    17a6:	bd70      	pop	{r4, r5, r6, pc}
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    17a8:	4b7e      	ldr	r3, [pc, #504]	; (19a4 <udi_msc_cbw_received+0x220>)
    17aa:	7b58      	ldrb	r0, [r3, #13]
    17ac:	220f      	movs	r2, #15
    17ae:	4010      	ands	r0, r2
    17b0:	7358      	strb	r0, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    17b2:	4b80      	ldr	r3, [pc, #512]	; (19b4 <udi_msc_cbw_received+0x230>)
    17b4:	781b      	ldrb	r3, [r3, #0]
    17b6:	4283      	cmp	r3, r0
    17b8:	d30b      	bcc.n	17d2 <udi_msc_cbw_received+0x4e>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    17ba:	4b7a      	ldr	r3, [pc, #488]	; (19a4 <udi_msc_cbw_received+0x220>)
	udi_msc_csw.dCSWDataResidue =
    17bc:	4a7e      	ldr	r2, [pc, #504]	; (19b8 <udi_msc_cbw_received+0x234>)
    17be:	6899      	ldr	r1, [r3, #8]
    17c0:	6091      	str	r1, [r2, #8]
	switch (udi_msc_cbw.CDB[0]) {
    17c2:	7bda      	ldrb	r2, [r3, #15]
    17c4:	2a5a      	cmp	r2, #90	; 0x5a
    17c6:	d900      	bls.n	17ca <udi_msc_cbw_received+0x46>
    17c8:	e0d2      	b.n	1970 <udi_msc_cbw_received+0x1ec>
    17ca:	0093      	lsls	r3, r2, #2
    17cc:	4a7b      	ldr	r2, [pc, #492]	; (19bc <udi_msc_cbw_received+0x238>)
    17ce:	58d3      	ldr	r3, [r2, r3]
    17d0:	469f      	mov	pc, r3
		udi_msc_sense_fail_cdb_invalid();
    17d2:	4b7b      	ldr	r3, [pc, #492]	; (19c0 <udi_msc_cbw_received+0x23c>)
    17d4:	4798      	blx	r3
		udi_msc_csw_process();
    17d6:	4b7b      	ldr	r3, [pc, #492]	; (19c4 <udi_msc_cbw_received+0x240>)
    17d8:	4798      	blx	r3
		return;
    17da:	e7e4      	b.n	17a6 <udi_msc_cbw_received+0x22>
	uint8_t length = udi_msc_cbw.CDB[4];
    17dc:	4b71      	ldr	r3, [pc, #452]	; (19a4 <udi_msc_cbw_received+0x220>)
    17de:	7cda      	ldrb	r2, [r3, #19]
    17e0:	1c13      	adds	r3, r2, #0
    17e2:	2a12      	cmp	r2, #18
    17e4:	d900      	bls.n	17e8 <udi_msc_cbw_received+0x64>
    17e6:	2312      	movs	r3, #18
    17e8:	b2dc      	uxtb	r4, r3
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    17ea:	2180      	movs	r1, #128	; 0x80
    17ec:	0020      	movs	r0, r4
    17ee:	4b76      	ldr	r3, [pc, #472]	; (19c8 <udi_msc_cbw_received+0x244>)
    17f0:	4798      	blx	r3
    17f2:	2800      	cmp	r0, #0
    17f4:	d0d7      	beq.n	17a6 <udi_msc_cbw_received+0x22>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    17f6:	0021      	movs	r1, r4
    17f8:	4874      	ldr	r0, [pc, #464]	; (19cc <udi_msc_cbw_received+0x248>)
    17fa:	4b75      	ldr	r3, [pc, #468]	; (19d0 <udi_msc_cbw_received+0x24c>)
    17fc:	4798      	blx	r3
    17fe:	e7d2      	b.n	17a6 <udi_msc_cbw_received+0x22>
	length = udi_msc_cbw.CDB[4];
    1800:	4b68      	ldr	r3, [pc, #416]	; (19a4 <udi_msc_cbw_received+0x220>)
    1802:	7cdb      	ldrb	r3, [r3, #19]
    1804:	1c1a      	adds	r2, r3, #0
    1806:	2b24      	cmp	r3, #36	; 0x24
    1808:	d900      	bls.n	180c <udi_msc_cbw_received+0x88>
    180a:	2224      	movs	r2, #36	; 0x24
    180c:	b2d4      	uxtb	r4, r2
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    180e:	2180      	movs	r1, #128	; 0x80
    1810:	0020      	movs	r0, r4
    1812:	4b6d      	ldr	r3, [pc, #436]	; (19c8 <udi_msc_cbw_received+0x244>)
    1814:	4798      	blx	r3
    1816:	2800      	cmp	r0, #0
    1818:	d0c5      	beq.n	17a6 <udi_msc_cbw_received+0x22>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    181a:	4b62      	ldr	r3, [pc, #392]	; (19a4 <udi_msc_cbw_received+0x220>)
    181c:	7c1b      	ldrb	r3, [r3, #16]
    181e:	079b      	lsls	r3, r3, #30
    1820:	d103      	bne.n	182a <udi_msc_cbw_received+0xa6>
			|| (0 != udi_msc_cbw.CDB[2])) {
    1822:	4b60      	ldr	r3, [pc, #384]	; (19a4 <udi_msc_cbw_received+0x220>)
    1824:	7c5d      	ldrb	r5, [r3, #17]
    1826:	2d00      	cmp	r5, #0
    1828:	d004      	beq.n	1834 <udi_msc_cbw_received+0xb0>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    182a:	4b65      	ldr	r3, [pc, #404]	; (19c0 <udi_msc_cbw_received+0x23c>)
    182c:	4798      	blx	r3
		udi_msc_csw_process();
    182e:	4b65      	ldr	r3, [pc, #404]	; (19c4 <udi_msc_cbw_received+0x240>)
    1830:	4798      	blx	r3
    1832:	e7b8      	b.n	17a6 <udi_msc_cbw_received+0x22>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    1834:	4b5b      	ldr	r3, [pc, #364]	; (19a4 <udi_msc_cbw_received+0x220>)
    1836:	7b58      	ldrb	r0, [r3, #13]
    1838:	4b66      	ldr	r3, [pc, #408]	; (19d4 <udi_msc_cbw_received+0x250>)
    183a:	4798      	blx	r3
    183c:	2380      	movs	r3, #128	; 0x80
    183e:	2800      	cmp	r0, #0
    1840:	d100      	bne.n	1844 <udi_msc_cbw_received+0xc0>
    1842:	002b      	movs	r3, r5
    1844:	4e64      	ldr	r6, [pc, #400]	; (19d8 <udi_msc_cbw_received+0x254>)
    1846:	7073      	strb	r3, [r6, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    1848:	4b56      	ldr	r3, [pc, #344]	; (19a4 <udi_msc_cbw_received+0x220>)
    184a:	7b58      	ldrb	r0, [r3, #13]
    184c:	4b63      	ldr	r3, [pc, #396]	; (19dc <udi_msc_cbw_received+0x258>)
    184e:	4798      	blx	r3
    1850:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
    1852:	0030      	movs	r0, r6
    1854:	3010      	adds	r0, #16
    1856:	3101      	adds	r1, #1
    1858:	2210      	movs	r2, #16
    185a:	4b61      	ldr	r3, [pc, #388]	; (19e0 <udi_msc_cbw_received+0x25c>)
    185c:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
    185e:	7c33      	ldrb	r3, [r6, #16]
    1860:	2b00      	cmp	r3, #0
    1862:	d100      	bne.n	1866 <udi_msc_cbw_received+0xe2>
    1864:	e08e      	b.n	1984 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    1866:	2b22      	cmp	r3, #34	; 0x22
    1868:	d100      	bne.n	186c <udi_msc_cbw_received+0xe8>
    186a:	e08a      	b.n	1982 <udi_msc_cbw_received+0x1fe>
    186c:	495a      	ldr	r1, [pc, #360]	; (19d8 <udi_msc_cbw_received+0x254>)
		i++;
    186e:	2301      	movs	r3, #1
		if ((0 == udi_msc_inquiry_data.product_id[i])
    1870:	7c4a      	ldrb	r2, [r1, #17]
    1872:	2a00      	cmp	r2, #0
    1874:	d100      	bne.n	1878 <udi_msc_cbw_received+0xf4>
    1876:	e085      	b.n	1984 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    1878:	2a22      	cmp	r2, #34	; 0x22
    187a:	d100      	bne.n	187e <udi_msc_cbw_received+0xfa>
    187c:	e082      	b.n	1984 <udi_msc_cbw_received+0x200>
		i++;
    187e:	3301      	adds	r3, #1
    1880:	b2db      	uxtb	r3, r3
    1882:	3101      	adds	r1, #1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    1884:	2b10      	cmp	r3, #16
    1886:	d1f3      	bne.n	1870 <udi_msc_cbw_received+0xec>
    1888:	e084      	b.n	1994 <udi_msc_cbw_received+0x210>
		udi_msc_spc_mode_sense(false);
    188a:	2000      	movs	r0, #0
    188c:	4b55      	ldr	r3, [pc, #340]	; (19e4 <udi_msc_cbw_received+0x260>)
    188e:	4798      	blx	r3
		break;
    1890:	e789      	b.n	17a6 <udi_msc_cbw_received+0x22>
		udi_msc_spc_mode_sense(true);
    1892:	2001      	movs	r0, #1
    1894:	4b53      	ldr	r3, [pc, #332]	; (19e4 <udi_msc_cbw_received+0x260>)
    1896:	4798      	blx	r3
		break;
    1898:	e785      	b.n	17a6 <udi_msc_cbw_received+0x22>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    189a:	4b53      	ldr	r3, [pc, #332]	; (19e8 <udi_msc_cbw_received+0x264>)
    189c:	4798      	blx	r3
    189e:	2802      	cmp	r0, #2
    18a0:	d009      	beq.n	18b6 <udi_msc_cbw_received+0x132>
    18a2:	2803      	cmp	r0, #3
    18a4:	d004      	beq.n	18b0 <udi_msc_cbw_received+0x12c>
    18a6:	2800      	cmp	r0, #0
    18a8:	d008      	beq.n	18bc <udi_msc_cbw_received+0x138>
		udi_msc_sense_fail_hardware();
    18aa:	4b50      	ldr	r3, [pc, #320]	; (19ec <udi_msc_cbw_received+0x268>)
    18ac:	4798      	blx	r3
    18ae:	e007      	b.n	18c0 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_busy_or_change();
    18b0:	4b4f      	ldr	r3, [pc, #316]	; (19f0 <udi_msc_cbw_received+0x26c>)
    18b2:	4798      	blx	r3
    18b4:	e004      	b.n	18c0 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_not_present();
    18b6:	4b4f      	ldr	r3, [pc, #316]	; (19f4 <udi_msc_cbw_received+0x270>)
    18b8:	4798      	blx	r3
    18ba:	e001      	b.n	18c0 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_pass();
    18bc:	4b4e      	ldr	r3, [pc, #312]	; (19f8 <udi_msc_cbw_received+0x274>)
    18be:	4798      	blx	r3
	udi_msc_csw_process();
    18c0:	4b40      	ldr	r3, [pc, #256]	; (19c4 <udi_msc_cbw_received+0x240>)
    18c2:	4798      	blx	r3
    18c4:	e76f      	b.n	17a6 <udi_msc_cbw_received+0x22>
	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
    18c6:	2180      	movs	r1, #128	; 0x80
    18c8:	2008      	movs	r0, #8
    18ca:	4b3f      	ldr	r3, [pc, #252]	; (19c8 <udi_msc_cbw_received+0x244>)
    18cc:	4798      	blx	r3
    18ce:	2800      	cmp	r0, #0
    18d0:	d100      	bne.n	18d4 <udi_msc_cbw_received+0x150>
    18d2:	e768      	b.n	17a6 <udi_msc_cbw_received+0x22>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    18d4:	4b33      	ldr	r3, [pc, #204]	; (19a4 <udi_msc_cbw_received+0x220>)
    18d6:	7b58      	ldrb	r0, [r3, #13]
    18d8:	4948      	ldr	r1, [pc, #288]	; (19fc <udi_msc_cbw_received+0x278>)
    18da:	4b49      	ldr	r3, [pc, #292]	; (1a00 <udi_msc_cbw_received+0x27c>)
    18dc:	4798      	blx	r3
    18de:	2802      	cmp	r0, #2
    18e0:	d00d      	beq.n	18fe <udi_msc_cbw_received+0x17a>
    18e2:	2803      	cmp	r0, #3
    18e4:	d006      	beq.n	18f4 <udi_msc_cbw_received+0x170>
    18e6:	2800      	cmp	r0, #0
    18e8:	d00e      	beq.n	1908 <udi_msc_cbw_received+0x184>
		udi_msc_sense_fail_hardware();
    18ea:	4b40      	ldr	r3, [pc, #256]	; (19ec <udi_msc_cbw_received+0x268>)
    18ec:	4798      	blx	r3
		udi_msc_csw_process();
    18ee:	4b35      	ldr	r3, [pc, #212]	; (19c4 <udi_msc_cbw_received+0x240>)
    18f0:	4798      	blx	r3
    18f2:	e758      	b.n	17a6 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_busy_or_change();
    18f4:	4b3e      	ldr	r3, [pc, #248]	; (19f0 <udi_msc_cbw_received+0x26c>)
    18f6:	4798      	blx	r3
		udi_msc_csw_process();
    18f8:	4b32      	ldr	r3, [pc, #200]	; (19c4 <udi_msc_cbw_received+0x240>)
    18fa:	4798      	blx	r3
    18fc:	e753      	b.n	17a6 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_not_present();
    18fe:	4b3d      	ldr	r3, [pc, #244]	; (19f4 <udi_msc_cbw_received+0x270>)
    1900:	4798      	blx	r3
		udi_msc_csw_process();
    1902:	4b30      	ldr	r3, [pc, #192]	; (19c4 <udi_msc_cbw_received+0x240>)
    1904:	4798      	blx	r3
    1906:	e74e      	b.n	17a6 <udi_msc_cbw_received+0x22>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    1908:	483c      	ldr	r0, [pc, #240]	; (19fc <udi_msc_cbw_received+0x278>)
    190a:	2380      	movs	r3, #128	; 0x80
    190c:	029b      	lsls	r3, r3, #10
    190e:	6043      	str	r3, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    1910:	6803      	ldr	r3, [r0, #0]
    1912:	ba1b      	rev	r3, r3
    1914:	6003      	str	r3, [r0, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    1916:	2108      	movs	r1, #8
    1918:	4b2d      	ldr	r3, [pc, #180]	; (19d0 <udi_msc_cbw_received+0x24c>)
    191a:	4798      	blx	r3
    191c:	e743      	b.n	17a6 <udi_msc_cbw_received+0x22>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    191e:	4b21      	ldr	r3, [pc, #132]	; (19a4 <udi_msc_cbw_received+0x220>)
    1920:	7cdb      	ldrb	r3, [r3, #19]
	if (loej) {
    1922:	079a      	lsls	r2, r3, #30
    1924:	d404      	bmi.n	1930 <udi_msc_cbw_received+0x1ac>
	udi_msc_sense_pass();
    1926:	4b34      	ldr	r3, [pc, #208]	; (19f8 <udi_msc_cbw_received+0x274>)
    1928:	4798      	blx	r3
	udi_msc_csw_process();
    192a:	4b26      	ldr	r3, [pc, #152]	; (19c4 <udi_msc_cbw_received+0x240>)
    192c:	4798      	blx	r3
    192e:	e73a      	b.n	17a6 <udi_msc_cbw_received+0x22>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    1930:	2101      	movs	r1, #1
    1932:	404b      	eors	r3, r1
    1934:	2101      	movs	r1, #1
    1936:	4019      	ands	r1, r3
    1938:	4b32      	ldr	r3, [pc, #200]	; (1a04 <udi_msc_cbw_received+0x280>)
    193a:	4798      	blx	r3
    193c:	e7f3      	b.n	1926 <udi_msc_cbw_received+0x1a2>
	uint8_t prevent = udi_msc_cbw.CDB[4];
    193e:	4b19      	ldr	r3, [pc, #100]	; (19a4 <udi_msc_cbw_received+0x220>)
	if (0 == prevent) {
    1940:	7cdb      	ldrb	r3, [r3, #19]
    1942:	2b00      	cmp	r3, #0
    1944:	d004      	beq.n	1950 <udi_msc_cbw_received+0x1cc>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    1946:	4b1e      	ldr	r3, [pc, #120]	; (19c0 <udi_msc_cbw_received+0x23c>)
    1948:	4798      	blx	r3
	udi_msc_csw_process();
    194a:	4b1e      	ldr	r3, [pc, #120]	; (19c4 <udi_msc_cbw_received+0x240>)
    194c:	4798      	blx	r3
    194e:	e72a      	b.n	17a6 <udi_msc_cbw_received+0x22>
		udi_msc_sense_pass();
    1950:	4b29      	ldr	r3, [pc, #164]	; (19f8 <udi_msc_cbw_received+0x274>)
    1952:	4798      	blx	r3
    1954:	e7f9      	b.n	194a <udi_msc_cbw_received+0x1c6>
		udi_msc_sense_pass();
    1956:	4b28      	ldr	r3, [pc, #160]	; (19f8 <udi_msc_cbw_received+0x274>)
    1958:	4798      	blx	r3
		udi_msc_csw_process();
    195a:	4b1a      	ldr	r3, [pc, #104]	; (19c4 <udi_msc_cbw_received+0x240>)
    195c:	4798      	blx	r3
		break;
    195e:	e722      	b.n	17a6 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(true);
    1960:	2001      	movs	r0, #1
    1962:	4b29      	ldr	r3, [pc, #164]	; (1a08 <udi_msc_cbw_received+0x284>)
    1964:	4798      	blx	r3
		break;
    1966:	e71e      	b.n	17a6 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(false);
    1968:	2000      	movs	r0, #0
    196a:	4b27      	ldr	r3, [pc, #156]	; (1a08 <udi_msc_cbw_received+0x284>)
    196c:	4798      	blx	r3
		break;
    196e:	e71a      	b.n	17a6 <udi_msc_cbw_received+0x22>
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    1970:	2200      	movs	r2, #0
    1972:	2180      	movs	r1, #128	; 0x80
    1974:	0189      	lsls	r1, r1, #6
    1976:	2005      	movs	r0, #5
    1978:	4b24      	ldr	r3, [pc, #144]	; (1a0c <udi_msc_cbw_received+0x288>)
    197a:	4798      	blx	r3
		udi_msc_csw_process();
    197c:	4b11      	ldr	r3, [pc, #68]	; (19c4 <udi_msc_cbw_received+0x240>)
    197e:	4798      	blx	r3
		break;
    1980:	e711      	b.n	17a6 <udi_msc_cbw_received+0x22>
	i = 0;
    1982:	002b      	movs	r3, r5
		udi_msc_inquiry_data.product_id[i] = ' ';
    1984:	4814      	ldr	r0, [pc, #80]	; (19d8 <udi_msc_cbw_received+0x254>)
    1986:	2120      	movs	r1, #32
    1988:	18c2      	adds	r2, r0, r3
    198a:	7411      	strb	r1, [r2, #16]
		i++;
    198c:	3301      	adds	r3, #1
    198e:	b2db      	uxtb	r3, r3
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    1990:	2b10      	cmp	r3, #16
    1992:	d1f9      	bne.n	1988 <udi_msc_cbw_received+0x204>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    1994:	0021      	movs	r1, r4
    1996:	4810      	ldr	r0, [pc, #64]	; (19d8 <udi_msc_cbw_received+0x254>)
    1998:	4b0d      	ldr	r3, [pc, #52]	; (19d0 <udi_msc_cbw_received+0x24c>)
    199a:	4798      	blx	r3
    199c:	e703      	b.n	17a6 <udi_msc_cbw_received+0x22>
    199e:	46c0      	nop			; (mov r8, r8)
    19a0:	43425355 	.word	0x43425355
    19a4:	200001d8 	.word	0x200001d8
    19a8:	200001cc 	.word	0x200001cc
    19ac:	0000145d 	.word	0x0000145d
    19b0:	00001489 	.word	0x00001489
    19b4:	200001fc 	.word	0x200001fc
    19b8:	20000048 	.word	0x20000048
    19bc:	0000a73c 	.word	0x0000a73c
    19c0:	0000154d 	.word	0x0000154d
    19c4:	000014b5 	.word	0x000014b5
    19c8:	00001561 	.word	0x00001561
    19cc:	20000200 	.word	0x20000200
    19d0:	000015ad 	.word	0x000015ad
    19d4:	00008a55 	.word	0x00008a55
    19d8:	20000058 	.word	0x20000058
    19dc:	00008a6d 	.word	0x00008a6d
    19e0:	00009641 	.word	0x00009641
    19e4:	0000164d 	.word	0x0000164d
    19e8:	000089f1 	.word	0x000089f1
    19ec:	00001599 	.word	0x00001599
    19f0:	000015e5 	.word	0x000015e5
    19f4:	000015f9 	.word	0x000015f9
    19f8:	0000160d 	.word	0x0000160d
    19fc:	200001d0 	.word	0x200001d0
    1a00:	00008a09 	.word	0x00008a09
    1a04:	00008a2d 	.word	0x00008a2d
    1a08:	000016fd 	.word	0x000016fd
    1a0c:	00001515 	.word	0x00001515

00001a10 <udi_msc_disable>:
{
    1a10:	b510      	push	{r4, lr}
	udi_msc_b_trans_req = false;
    1a12:	2200      	movs	r2, #0
    1a14:	4b04      	ldr	r3, [pc, #16]	; (1a28 <udi_msc_disable+0x18>)
    1a16:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    1a18:	2301      	movs	r3, #1
    1a1a:	4a04      	ldr	r2, [pc, #16]	; (1a2c <udi_msc_disable+0x1c>)
    1a1c:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    1a1e:	4a04      	ldr	r2, [pc, #16]	; (1a30 <udi_msc_disable+0x20>)
    1a20:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
    1a22:	4b04      	ldr	r3, [pc, #16]	; (1a34 <udi_msc_disable+0x24>)
    1a24:	4798      	blx	r3
}
    1a26:	bd10      	pop	{r4, pc}
    1a28:	200001ce 	.word	0x200001ce
    1a2c:	20000044 	.word	0x20000044
    1a30:	20000045 	.word	0x20000045
    1a34:	0000635d 	.word	0x0000635d

00001a38 <udi_msc_setup>:
{
    1a38:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    1a3a:	4b20      	ldr	r3, [pc, #128]	; (1abc <udi_msc_setup+0x84>)
    1a3c:	781a      	ldrb	r2, [r3, #0]
    1a3e:	b253      	sxtb	r3, r2
    1a40:	2b00      	cmp	r3, #0
    1a42:	db05      	blt.n	1a50 <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1a44:	2360      	movs	r3, #96	; 0x60
    1a46:	4013      	ands	r3, r2
	return false;	// Not supported request
    1a48:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1a4a:	2b20      	cmp	r3, #32
    1a4c:	d018      	beq.n	1a80 <udi_msc_setup+0x48>
}
    1a4e:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1a50:	2360      	movs	r3, #96	; 0x60
    1a52:	4013      	ands	r3, r2
	return false;	// Not supported request
    1a54:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1a56:	2b20      	cmp	r3, #32
    1a58:	d1f9      	bne.n	1a4e <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    1a5a:	4b18      	ldr	r3, [pc, #96]	; (1abc <udi_msc_setup+0x84>)
    1a5c:	785b      	ldrb	r3, [r3, #1]
    1a5e:	2bfe      	cmp	r3, #254	; 0xfe
    1a60:	d127      	bne.n	1ab2 <udi_msc_setup+0x7a>
				if (1 != udd_g_ctrlreq.req.wLength)
    1a62:	4b16      	ldr	r3, [pc, #88]	; (1abc <udi_msc_setup+0x84>)
    1a64:	88db      	ldrh	r3, [r3, #6]
    1a66:	2b01      	cmp	r3, #1
    1a68:	d1f1      	bne.n	1a4e <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    1a6a:	4b14      	ldr	r3, [pc, #80]	; (1abc <udi_msc_setup+0x84>)
    1a6c:	885b      	ldrh	r3, [r3, #2]
    1a6e:	2b00      	cmp	r3, #0
    1a70:	d1ed      	bne.n	1a4e <udi_msc_setup+0x16>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    1a72:	4b12      	ldr	r3, [pc, #72]	; (1abc <udi_msc_setup+0x84>)
    1a74:	4a12      	ldr	r2, [pc, #72]	; (1ac0 <udi_msc_setup+0x88>)
    1a76:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    1a78:	2201      	movs	r2, #1
    1a7a:	819a      	strh	r2, [r3, #12]
				return true;
    1a7c:	3001      	adds	r0, #1
    1a7e:	e7e6      	b.n	1a4e <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    1a80:	4b0e      	ldr	r3, [pc, #56]	; (1abc <udi_msc_setup+0x84>)
    1a82:	785b      	ldrb	r3, [r3, #1]
    1a84:	2bff      	cmp	r3, #255	; 0xff
    1a86:	d116      	bne.n	1ab6 <udi_msc_setup+0x7e>
				if (0 != udd_g_ctrlreq.req.wLength)
    1a88:	4b0c      	ldr	r3, [pc, #48]	; (1abc <udi_msc_setup+0x84>)
    1a8a:	88db      	ldrh	r3, [r3, #6]
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	d1de      	bne.n	1a4e <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    1a90:	4b0a      	ldr	r3, [pc, #40]	; (1abc <udi_msc_setup+0x84>)
    1a92:	885b      	ldrh	r3, [r3, #2]
    1a94:	2b00      	cmp	r3, #0
    1a96:	d1da      	bne.n	1a4e <udi_msc_setup+0x16>
				udi_msc_b_cbw_invalid = false;
    1a98:	4a0a      	ldr	r2, [pc, #40]	; (1ac4 <udi_msc_setup+0x8c>)
    1a9a:	7013      	strb	r3, [r2, #0]
				udi_msc_b_trans_req = false;
    1a9c:	4a0a      	ldr	r2, [pc, #40]	; (1ac8 <udi_msc_setup+0x90>)
    1a9e:	7013      	strb	r3, [r2, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
    1aa0:	3002      	adds	r0, #2
    1aa2:	4c0a      	ldr	r4, [pc, #40]	; (1acc <udi_msc_setup+0x94>)
    1aa4:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
    1aa6:	2081      	movs	r0, #129	; 0x81
    1aa8:	47a0      	blx	r4
				udi_msc_cbw_wait();
    1aaa:	4b09      	ldr	r3, [pc, #36]	; (1ad0 <udi_msc_setup+0x98>)
    1aac:	4798      	blx	r3
				return true;
    1aae:	2001      	movs	r0, #1
    1ab0:	e7cd      	b.n	1a4e <udi_msc_setup+0x16>
	return false;	// Not supported request
    1ab2:	2000      	movs	r0, #0
    1ab4:	e7cb      	b.n	1a4e <udi_msc_setup+0x16>
    1ab6:	2000      	movs	r0, #0
    1ab8:	e7c9      	b.n	1a4e <udi_msc_setup+0x16>
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	200005bc 	.word	0x200005bc
    1ac0:	200001fc 	.word	0x200001fc
    1ac4:	200001cc 	.word	0x200001cc
    1ac8:	200001ce 	.word	0x200001ce
    1acc:	000037a9 	.word	0x000037a9
    1ad0:	00001361 	.word	0x00001361

00001ad4 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1ad4:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    1ad6:	4b11      	ldr	r3, [pc, #68]	; (1b1c <udc_next_desc_in_iface+0x48>)
    1ad8:	681b      	ldr	r3, [r3, #0]
    1ada:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1adc:	7894      	ldrb	r4, [r2, #2]
    1ade:	78d3      	ldrb	r3, [r2, #3]
    1ae0:	021b      	lsls	r3, r3, #8
    1ae2:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1ae4:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    1ae6:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1ae8:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    1aea:	4290      	cmp	r0, r2
    1aec:	d210      	bcs.n	1b10 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1aee:	7843      	ldrb	r3, [r0, #1]
    1af0:	2b04      	cmp	r3, #4
    1af2:	d00f      	beq.n	1b14 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1af4:	428b      	cmp	r3, r1
    1af6:	d00a      	beq.n	1b0e <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    1af8:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1afa:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    1afc:	4290      	cmp	r0, r2
    1afe:	d205      	bcs.n	1b0c <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1b00:	7843      	ldrb	r3, [r0, #1]
    1b02:	2b04      	cmp	r3, #4
    1b04:	d008      	beq.n	1b18 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    1b06:	428b      	cmp	r3, r1
    1b08:	d1f6      	bne.n	1af8 <udc_next_desc_in_iface+0x24>
    1b0a:	e000      	b.n	1b0e <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    1b0c:	2000      	movs	r0, #0
}
    1b0e:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    1b10:	2000      	movs	r0, #0
    1b12:	e7fc      	b.n	1b0e <udc_next_desc_in_iface+0x3a>
    1b14:	2000      	movs	r0, #0
    1b16:	e7fa      	b.n	1b0e <udc_next_desc_in_iface+0x3a>
    1b18:	2000      	movs	r0, #0
    1b1a:	e7f8      	b.n	1b0e <udc_next_desc_in_iface+0x3a>
    1b1c:	20000220 	.word	0x20000220

00001b20 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    1b20:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1b22:	4b03      	ldr	r3, [pc, #12]	; (1b30 <udc_valid_address+0x10>)
    1b24:	885b      	ldrh	r3, [r3, #2]
    1b26:	207f      	movs	r0, #127	; 0x7f
    1b28:	4018      	ands	r0, r3
    1b2a:	4b02      	ldr	r3, [pc, #8]	; (1b34 <udc_valid_address+0x14>)
    1b2c:	4798      	blx	r3
}
    1b2e:	bd10      	pop	{r4, pc}
    1b30:	200005bc 	.word	0x200005bc
    1b34:	00003d0d 	.word	0x00003d0d

00001b38 <udc_update_iface_desc>:
{
    1b38:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    1b3a:	4b19      	ldr	r3, [pc, #100]	; (1ba0 <udc_update_iface_desc+0x68>)
    1b3c:	781b      	ldrb	r3, [r3, #0]
		return false;
    1b3e:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    1b40:	2b00      	cmp	r3, #0
    1b42:	d029      	beq.n	1b98 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b44:	4b17      	ldr	r3, [pc, #92]	; (1ba4 <udc_update_iface_desc+0x6c>)
    1b46:	681b      	ldr	r3, [r3, #0]
    1b48:	681b      	ldr	r3, [r3, #0]
    1b4a:	791c      	ldrb	r4, [r3, #4]
    1b4c:	4284      	cmp	r4, r0
    1b4e:	d923      	bls.n	1b98 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1b50:	4a15      	ldr	r2, [pc, #84]	; (1ba8 <udc_update_iface_desc+0x70>)
    1b52:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1b54:	789a      	ldrb	r2, [r3, #2]
    1b56:	78dc      	ldrb	r4, [r3, #3]
    1b58:	0224      	lsls	r4, r4, #8
    1b5a:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1b5c:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    1b5e:	42a3      	cmp	r3, r4
    1b60:	d21c      	bcs.n	1b9c <udc_update_iface_desc+0x64>
    1b62:	2500      	movs	r5, #0
    1b64:	2601      	movs	r6, #1
    1b66:	e007      	b.n	1b78 <udc_update_iface_desc+0x40>
    1b68:	4a0f      	ldr	r2, [pc, #60]	; (1ba8 <udc_update_iface_desc+0x70>)
    1b6a:	6013      	str	r3, [r2, #0]
    1b6c:	e00f      	b.n	1b8e <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    1b6e:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1b70:	189b      	adds	r3, r3, r2
    1b72:	0035      	movs	r5, r6
	while (ptr_end_desc >
    1b74:	42a3      	cmp	r3, r4
    1b76:	d20c      	bcs.n	1b92 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    1b78:	785a      	ldrb	r2, [r3, #1]
    1b7a:	2a04      	cmp	r2, #4
    1b7c:	d1f7      	bne.n	1b6e <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1b7e:	789a      	ldrb	r2, [r3, #2]
    1b80:	4282      	cmp	r2, r0
    1b82:	d1f4      	bne.n	1b6e <udc_update_iface_desc+0x36>
    1b84:	78da      	ldrb	r2, [r3, #3]
    1b86:	428a      	cmp	r2, r1
    1b88:	d1f1      	bne.n	1b6e <udc_update_iface_desc+0x36>
    1b8a:	2d00      	cmp	r5, #0
    1b8c:	d1ec      	bne.n	1b68 <udc_update_iface_desc+0x30>
				return true; // Interface found
    1b8e:	2201      	movs	r2, #1
    1b90:	e002      	b.n	1b98 <udc_update_iface_desc+0x60>
    1b92:	4a05      	ldr	r2, [pc, #20]	; (1ba8 <udc_update_iface_desc+0x70>)
    1b94:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    1b96:	2200      	movs	r2, #0
}
    1b98:	0010      	movs	r0, r2
    1b9a:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    1b9c:	2200      	movs	r2, #0
    1b9e:	e7fb      	b.n	1b98 <udc_update_iface_desc+0x60>
    1ba0:	2000021c 	.word	0x2000021c
    1ba4:	20000220 	.word	0x20000220
    1ba8:	20000224 	.word	0x20000224

00001bac <udc_iface_disable>:
{
    1bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bae:	46c6      	mov	lr, r8
    1bb0:	b500      	push	{lr}
    1bb2:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1bb4:	2100      	movs	r1, #0
    1bb6:	4b13      	ldr	r3, [pc, #76]	; (1c04 <udc_iface_disable+0x58>)
    1bb8:	4798      	blx	r3
    1bba:	1e05      	subs	r5, r0, #0
    1bbc:	d103      	bne.n	1bc6 <udc_iface_disable+0x1a>
}
    1bbe:	0028      	movs	r0, r5
    1bc0:	bc04      	pop	{r2}
    1bc2:	4690      	mov	r8, r2
    1bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1bc6:	4b10      	ldr	r3, [pc, #64]	; (1c08 <udc_iface_disable+0x5c>)
    1bc8:	681b      	ldr	r3, [r3, #0]
    1bca:	685b      	ldr	r3, [r3, #4]
    1bcc:	00a2      	lsls	r2, r4, #2
    1bce:	58d3      	ldr	r3, [r2, r3]
    1bd0:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1bd2:	68db      	ldr	r3, [r3, #12]
    1bd4:	4798      	blx	r3
    1bd6:	0001      	movs	r1, r0
    1bd8:	0020      	movs	r0, r4
    1bda:	4b0a      	ldr	r3, [pc, #40]	; (1c04 <udc_iface_disable+0x58>)
    1bdc:	4798      	blx	r3
    1bde:	1e05      	subs	r5, r0, #0
    1be0:	d0ed      	beq.n	1bbe <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1be2:	4b0a      	ldr	r3, [pc, #40]	; (1c0c <udc_iface_disable+0x60>)
    1be4:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1be6:	4e0a      	ldr	r6, [pc, #40]	; (1c10 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    1be8:	4f0a      	ldr	r7, [pc, #40]	; (1c14 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1bea:	2105      	movs	r1, #5
    1bec:	0020      	movs	r0, r4
    1bee:	47b0      	blx	r6
    1bf0:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    1bf2:	d002      	beq.n	1bfa <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    1bf4:	7880      	ldrb	r0, [r0, #2]
    1bf6:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1bf8:	e7f7      	b.n	1bea <udc_iface_disable+0x3e>
	udi_api->disable();
    1bfa:	4643      	mov	r3, r8
    1bfc:	685b      	ldr	r3, [r3, #4]
    1bfe:	4798      	blx	r3
	return true;
    1c00:	e7dd      	b.n	1bbe <udc_iface_disable+0x12>
    1c02:	46c0      	nop			; (mov r8, r8)
    1c04:	00001b39 	.word	0x00001b39
    1c08:	20000220 	.word	0x20000220
    1c0c:	20000224 	.word	0x20000224
    1c10:	00001ad5 	.word	0x00001ad5
    1c14:	000037f5 	.word	0x000037f5

00001c18 <udc_iface_enable>:
{
    1c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c1a:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    1c1c:	4b0f      	ldr	r3, [pc, #60]	; (1c5c <udc_iface_enable+0x44>)
    1c1e:	4798      	blx	r3
    1c20:	2800      	cmp	r0, #0
    1c22:	d019      	beq.n	1c58 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1c24:	4b0e      	ldr	r3, [pc, #56]	; (1c60 <udc_iface_enable+0x48>)
    1c26:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1c28:	4e0e      	ldr	r6, [pc, #56]	; (1c64 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1c2a:	4f0f      	ldr	r7, [pc, #60]	; (1c68 <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1c2c:	2105      	movs	r1, #5
    1c2e:	0020      	movs	r0, r4
    1c30:	47b0      	blx	r6
    1c32:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    1c34:	d009      	beq.n	1c4a <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1c36:	7903      	ldrb	r3, [r0, #4]
    1c38:	7942      	ldrb	r2, [r0, #5]
    1c3a:	0212      	lsls	r2, r2, #8
    1c3c:	431a      	orrs	r2, r3
    1c3e:	78c1      	ldrb	r1, [r0, #3]
    1c40:	7880      	ldrb	r0, [r0, #2]
    1c42:	47b8      	blx	r7
    1c44:	2800      	cmp	r0, #0
    1c46:	d1f1      	bne.n	1c2c <udc_iface_enable+0x14>
    1c48:	e006      	b.n	1c58 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    1c4a:	4b08      	ldr	r3, [pc, #32]	; (1c6c <udc_iface_enable+0x54>)
    1c4c:	681b      	ldr	r3, [r3, #0]
    1c4e:	685b      	ldr	r3, [r3, #4]
    1c50:	00ad      	lsls	r5, r5, #2
    1c52:	58eb      	ldr	r3, [r5, r3]
    1c54:	681b      	ldr	r3, [r3, #0]
    1c56:	4798      	blx	r3
}
    1c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	00001b39 	.word	0x00001b39
    1c60:	20000224 	.word	0x20000224
    1c64:	00001ad5 	.word	0x00001ad5
    1c68:	0000384d 	.word	0x0000384d
    1c6c:	20000220 	.word	0x20000220

00001c70 <udc_start>:
{
    1c70:	b510      	push	{r4, lr}
	udd_enable();
    1c72:	4b01      	ldr	r3, [pc, #4]	; (1c78 <udc_start+0x8>)
    1c74:	4798      	blx	r3
}
    1c76:	bd10      	pop	{r4, pc}
    1c78:	00003e19 	.word	0x00003e19

00001c7c <udc_reset>:
{
    1c7c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1c7e:	4b0e      	ldr	r3, [pc, #56]	; (1cb8 <udc_reset+0x3c>)
    1c80:	781b      	ldrb	r3, [r3, #0]
    1c82:	2b00      	cmp	r3, #0
    1c84:	d011      	beq.n	1caa <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c86:	4b0d      	ldr	r3, [pc, #52]	; (1cbc <udc_reset+0x40>)
    1c88:	681b      	ldr	r3, [r3, #0]
    1c8a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1c8c:	791b      	ldrb	r3, [r3, #4]
    1c8e:	2b00      	cmp	r3, #0
    1c90:	d00b      	beq.n	1caa <udc_reset+0x2e>
    1c92:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    1c94:	4e0a      	ldr	r6, [pc, #40]	; (1cc0 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c96:	4d09      	ldr	r5, [pc, #36]	; (1cbc <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    1c98:	0020      	movs	r0, r4
    1c9a:	47b0      	blx	r6
				iface_num++) {
    1c9c:	3401      	adds	r4, #1
    1c9e:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ca0:	682b      	ldr	r3, [r5, #0]
    1ca2:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1ca4:	791b      	ldrb	r3, [r3, #4]
    1ca6:	42a3      	cmp	r3, r4
    1ca8:	d8f6      	bhi.n	1c98 <udc_reset+0x1c>
	udc_num_configuration = 0;
    1caa:	2200      	movs	r2, #0
    1cac:	4b02      	ldr	r3, [pc, #8]	; (1cb8 <udc_reset+0x3c>)
    1cae:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    1cb0:	3201      	adds	r2, #1
    1cb2:	4b04      	ldr	r3, [pc, #16]	; (1cc4 <udc_reset+0x48>)
    1cb4:	801a      	strh	r2, [r3, #0]
}
    1cb6:	bd70      	pop	{r4, r5, r6, pc}
    1cb8:	2000021c 	.word	0x2000021c
    1cbc:	20000220 	.word	0x20000220
    1cc0:	00001bad 	.word	0x00001bad
    1cc4:	20000212 	.word	0x20000212

00001cc8 <udc_sof_notify>:
{
    1cc8:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1cca:	4b0e      	ldr	r3, [pc, #56]	; (1d04 <udc_sof_notify+0x3c>)
    1ccc:	781b      	ldrb	r3, [r3, #0]
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d017      	beq.n	1d02 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cd2:	4b0d      	ldr	r3, [pc, #52]	; (1d08 <udc_sof_notify+0x40>)
    1cd4:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1cd6:	681a      	ldr	r2, [r3, #0]
    1cd8:	7912      	ldrb	r2, [r2, #4]
    1cda:	2a00      	cmp	r2, #0
    1cdc:	d011      	beq.n	1d02 <udc_sof_notify+0x3a>
    1cde:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ce0:	4d09      	ldr	r5, [pc, #36]	; (1d08 <udc_sof_notify+0x40>)
    1ce2:	e006      	b.n	1cf2 <udc_sof_notify+0x2a>
				iface_num++) {
    1ce4:	3401      	adds	r4, #1
    1ce6:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ce8:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    1cea:	681a      	ldr	r2, [r3, #0]
    1cec:	7912      	ldrb	r2, [r2, #4]
    1cee:	42a2      	cmp	r2, r4
    1cf0:	d907      	bls.n	1d02 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1cf2:	685b      	ldr	r3, [r3, #4]
    1cf4:	00a2      	lsls	r2, r4, #2
    1cf6:	58d3      	ldr	r3, [r2, r3]
    1cf8:	691b      	ldr	r3, [r3, #16]
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	d0f2      	beq.n	1ce4 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1cfe:	4798      	blx	r3
    1d00:	e7f0      	b.n	1ce4 <udc_sof_notify+0x1c>
}
    1d02:	bd70      	pop	{r4, r5, r6, pc}
    1d04:	2000021c 	.word	0x2000021c
    1d08:	20000220 	.word	0x20000220

00001d0c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1d0e:	4bac      	ldr	r3, [pc, #688]	; (1fc0 <udc_process_setup+0x2b4>)
    1d10:	2200      	movs	r2, #0
    1d12:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1d14:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1d16:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    1d18:	781b      	ldrb	r3, [r3, #0]
    1d1a:	b25a      	sxtb	r2, r3
    1d1c:	2a00      	cmp	r2, #0
    1d1e:	db13      	blt.n	1d48 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1d20:	2260      	movs	r2, #96	; 0x60
    1d22:	421a      	tst	r2, r3
    1d24:	d100      	bne.n	1d28 <udc_process_setup+0x1c>
    1d26:	e0da      	b.n	1ede <udc_process_setup+0x1d2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1d28:	4ba5      	ldr	r3, [pc, #660]	; (1fc0 <udc_process_setup+0x2b4>)
    1d2a:	781a      	ldrb	r2, [r3, #0]
    1d2c:	231f      	movs	r3, #31
    1d2e:	4013      	ands	r3, r2
    1d30:	2b01      	cmp	r3, #1
    1d32:	d100      	bne.n	1d36 <udc_process_setup+0x2a>
    1d34:	e176      	b.n	2024 <STACK_SIZE+0x24>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1d36:	4ba2      	ldr	r3, [pc, #648]	; (1fc0 <udc_process_setup+0x2b4>)
    1d38:	781a      	ldrb	r2, [r3, #0]
    1d3a:	231f      	movs	r3, #31
    1d3c:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1d3e:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1d40:	2b02      	cmp	r3, #2
    1d42:	d100      	bne.n	1d46 <udc_process_setup+0x3a>
    1d44:	e1cc      	b.n	20e0 <STACK_SIZE+0xe0>
#endif
}
    1d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    1d48:	4a9d      	ldr	r2, [pc, #628]	; (1fc0 <udc_process_setup+0x2b4>)
    1d4a:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    1d4c:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    1d4e:	2a00      	cmp	r2, #0
    1d50:	d0f9      	beq.n	1d46 <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1d52:	2160      	movs	r1, #96	; 0x60
    1d54:	4219      	tst	r1, r3
    1d56:	d1e7      	bne.n	1d28 <udc_process_setup+0x1c>
    1d58:	211f      	movs	r1, #31
    1d5a:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1d5c:	d108      	bne.n	1d70 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    1d5e:	4998      	ldr	r1, [pc, #608]	; (1fc0 <udc_process_setup+0x2b4>)
    1d60:	7849      	ldrb	r1, [r1, #1]
    1d62:	2906      	cmp	r1, #6
    1d64:	d023      	beq.n	1dae <udc_process_setup+0xa2>
    1d66:	2908      	cmp	r1, #8
    1d68:	d100      	bne.n	1d6c <udc_process_setup+0x60>
    1d6a:	e087      	b.n	1e7c <udc_process_setup+0x170>
    1d6c:	2900      	cmp	r1, #0
    1d6e:	d017      	beq.n	1da0 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1d70:	2b01      	cmp	r3, #1
    1d72:	d100      	bne.n	1d76 <udc_process_setup+0x6a>
    1d74:	e08a      	b.n	1e8c <udc_process_setup+0x180>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1d76:	2b02      	cmp	r3, #2
    1d78:	d1d6      	bne.n	1d28 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1d7a:	4b91      	ldr	r3, [pc, #580]	; (1fc0 <udc_process_setup+0x2b4>)
    1d7c:	785b      	ldrb	r3, [r3, #1]
	return false;
    1d7e:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    1d80:	2b00      	cmp	r3, #0
    1d82:	d000      	beq.n	1d86 <udc_process_setup+0x7a>
    1d84:	e1a8      	b.n	20d8 <STACK_SIZE+0xd8>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1d86:	2a02      	cmp	r2, #2
    1d88:	d1d5      	bne.n	1d36 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1d8a:	4b8d      	ldr	r3, [pc, #564]	; (1fc0 <udc_process_setup+0x2b4>)
    1d8c:	7918      	ldrb	r0, [r3, #4]
    1d8e:	4b8d      	ldr	r3, [pc, #564]	; (1fc4 <udc_process_setup+0x2b8>)
    1d90:	4798      	blx	r3
    1d92:	4b8d      	ldr	r3, [pc, #564]	; (1fc8 <udc_process_setup+0x2bc>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    1d94:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1d96:	2102      	movs	r1, #2
    1d98:	0018      	movs	r0, r3
    1d9a:	4b8c      	ldr	r3, [pc, #560]	; (1fcc <udc_process_setup+0x2c0>)
    1d9c:	4798      	blx	r3
    1d9e:	e0ff      	b.n	1fa0 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1da0:	2a02      	cmp	r2, #2
    1da2:	d1c8      	bne.n	1d36 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1da4:	3102      	adds	r1, #2
    1da6:	488a      	ldr	r0, [pc, #552]	; (1fd0 <udc_process_setup+0x2c4>)
    1da8:	4b88      	ldr	r3, [pc, #544]	; (1fcc <udc_process_setup+0x2c0>)
    1daa:	4798      	blx	r3
    1dac:	e0f8      	b.n	1fa0 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1dae:	4b84      	ldr	r3, [pc, #528]	; (1fc0 <udc_process_setup+0x2b4>)
    1db0:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1db2:	0a13      	lsrs	r3, r2, #8
    1db4:	2b02      	cmp	r3, #2
    1db6:	d023      	beq.n	1e00 <udc_process_setup+0xf4>
    1db8:	b2d9      	uxtb	r1, r3
    1dba:	2902      	cmp	r1, #2
    1dbc:	d90f      	bls.n	1dde <udc_process_setup+0xd2>
    1dbe:	2b03      	cmp	r3, #3
    1dc0:	d034      	beq.n	1e2c <udc_process_setup+0x120>
    1dc2:	2b0f      	cmp	r3, #15
    1dc4:	d000      	beq.n	1dc8 <udc_process_setup+0xbc>
    1dc6:	e184      	b.n	20d2 <STACK_SIZE+0xd2>
		if (udc_config.conf_bos == NULL) {
    1dc8:	4b82      	ldr	r3, [pc, #520]	; (1fd4 <udc_process_setup+0x2c8>)
    1dca:	6898      	ldr	r0, [r3, #8]
    1dcc:	2800      	cmp	r0, #0
    1dce:	d0b2      	beq.n	1d36 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1dd0:	7883      	ldrb	r3, [r0, #2]
    1dd2:	78c1      	ldrb	r1, [r0, #3]
    1dd4:	0209      	lsls	r1, r1, #8
    1dd6:	4319      	orrs	r1, r3
    1dd8:	4b7c      	ldr	r3, [pc, #496]	; (1fcc <udc_process_setup+0x2c0>)
    1dda:	4798      	blx	r3
    1ddc:	e007      	b.n	1dee <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1dde:	2b01      	cmp	r3, #1
    1de0:	d000      	beq.n	1de4 <udc_process_setup+0xd8>
    1de2:	e176      	b.n	20d2 <STACK_SIZE+0xd2>
				(uint8_t *) udc_config.confdev_lsfs,
    1de4:	4b7b      	ldr	r3, [pc, #492]	; (1fd4 <udc_process_setup+0x2c8>)
    1de6:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    1de8:	7801      	ldrb	r1, [r0, #0]
    1dea:	4b78      	ldr	r3, [pc, #480]	; (1fcc <udc_process_setup+0x2c0>)
    1dec:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1dee:	4b74      	ldr	r3, [pc, #464]	; (1fc0 <udc_process_setup+0x2b4>)
    1df0:	88da      	ldrh	r2, [r3, #6]
    1df2:	899b      	ldrh	r3, [r3, #12]
    1df4:	4293      	cmp	r3, r2
    1df6:	d800      	bhi.n	1dfa <udc_process_setup+0xee>
    1df8:	e0d2      	b.n	1fa0 <udc_process_setup+0x294>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1dfa:	4b71      	ldr	r3, [pc, #452]	; (1fc0 <udc_process_setup+0x2b4>)
    1dfc:	819a      	strh	r2, [r3, #12]
    1dfe:	e0cf      	b.n	1fa0 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1e00:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    1e02:	4b74      	ldr	r3, [pc, #464]	; (1fd4 <udc_process_setup+0x2c8>)
    1e04:	681b      	ldr	r3, [r3, #0]
    1e06:	7c5b      	ldrb	r3, [r3, #17]
    1e08:	4293      	cmp	r3, r2
    1e0a:	d800      	bhi.n	1e0e <udc_process_setup+0x102>
    1e0c:	e793      	b.n	1d36 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1e0e:	4b71      	ldr	r3, [pc, #452]	; (1fd4 <udc_process_setup+0x2c8>)
    1e10:	685b      	ldr	r3, [r3, #4]
    1e12:	00d2      	lsls	r2, r2, #3
    1e14:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    1e16:	7883      	ldrb	r3, [r0, #2]
    1e18:	78c1      	ldrb	r1, [r0, #3]
    1e1a:	0209      	lsls	r1, r1, #8
    1e1c:	4319      	orrs	r1, r3
    1e1e:	4b6b      	ldr	r3, [pc, #428]	; (1fcc <udc_process_setup+0x2c0>)
    1e20:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1e22:	4b67      	ldr	r3, [pc, #412]	; (1fc0 <udc_process_setup+0x2b4>)
    1e24:	689b      	ldr	r3, [r3, #8]
    1e26:	2202      	movs	r2, #2
    1e28:	705a      	strb	r2, [r3, #1]
    1e2a:	e7e0      	b.n	1dee <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1e2c:	23ff      	movs	r3, #255	; 0xff
    1e2e:	401a      	ands	r2, r3
    1e30:	2a01      	cmp	r2, #1
    1e32:	d020      	beq.n	1e76 <udc_process_setup+0x16a>
    1e34:	2a00      	cmp	r2, #0
    1e36:	d019      	beq.n	1e6c <udc_process_setup+0x160>
    1e38:	2a02      	cmp	r2, #2
    1e3a:	d100      	bne.n	1e3e <udc_process_setup+0x132>
    1e3c:	e178      	b.n	2130 <STACK_SIZE+0x130>
    1e3e:	2a03      	cmp	r2, #3
    1e40:	d000      	beq.n	1e44 <udc_process_setup+0x138>
    1e42:	e771      	b.n	1d28 <udc_process_setup+0x1c>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1e44:	210c      	movs	r1, #12
		str = udc_get_string_serial_name();
    1e46:	4c64      	ldr	r4, [pc, #400]	; (1fd8 <udc_process_setup+0x2cc>)
    1e48:	4a64      	ldr	r2, [pc, #400]	; (1fdc <udc_process_setup+0x2d0>)
    1e4a:	3202      	adds	r2, #2
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1e4c:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1e4e:	5ce0      	ldrb	r0, [r4, r3]
    1e50:	8010      	strh	r0, [r2, #0]
    1e52:	3301      	adds	r3, #1
    1e54:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    1e56:	b2d8      	uxtb	r0, r3
    1e58:	4281      	cmp	r1, r0
    1e5a:	d8f8      	bhi.n	1e4e <udc_process_setup+0x142>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1e5c:	0049      	lsls	r1, r1, #1
    1e5e:	3102      	adds	r1, #2
    1e60:	485e      	ldr	r0, [pc, #376]	; (1fdc <udc_process_setup+0x2d0>)
    1e62:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    1e64:	b289      	uxth	r1, r1
    1e66:	4b59      	ldr	r3, [pc, #356]	; (1fcc <udc_process_setup+0x2c0>)
    1e68:	4798      	blx	r3
    1e6a:	e7c0      	b.n	1dee <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1e6c:	2104      	movs	r1, #4
    1e6e:	485c      	ldr	r0, [pc, #368]	; (1fe0 <udc_process_setup+0x2d4>)
    1e70:	4b56      	ldr	r3, [pc, #344]	; (1fcc <udc_process_setup+0x2c0>)
    1e72:	4798      	blx	r3
    1e74:	e7bb      	b.n	1dee <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    1e76:	4c5b      	ldr	r4, [pc, #364]	; (1fe4 <udc_process_setup+0x2d8>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1e78:	2109      	movs	r1, #9
    1e7a:	e7e5      	b.n	1e48 <udc_process_setup+0x13c>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1e7c:	2a01      	cmp	r2, #1
    1e7e:	d000      	beq.n	1e82 <udc_process_setup+0x176>
    1e80:	e759      	b.n	1d36 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    1e82:	2101      	movs	r1, #1
    1e84:	4858      	ldr	r0, [pc, #352]	; (1fe8 <udc_process_setup+0x2dc>)
    1e86:	4b51      	ldr	r3, [pc, #324]	; (1fcc <udc_process_setup+0x2c0>)
    1e88:	4798      	blx	r3
    1e8a:	e089      	b.n	1fa0 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1e8c:	494c      	ldr	r1, [pc, #304]	; (1fc0 <udc_process_setup+0x2b4>)
    1e8e:	7849      	ldrb	r1, [r1, #1]
    1e90:	290a      	cmp	r1, #10
    1e92:	d000      	beq.n	1e96 <udc_process_setup+0x18a>
    1e94:	e76f      	b.n	1d76 <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1e96:	2a01      	cmp	r2, #1
    1e98:	d000      	beq.n	1e9c <udc_process_setup+0x190>
    1e9a:	e0c3      	b.n	2024 <STACK_SIZE+0x24>
	if (!udc_num_configuration) {
    1e9c:	4b52      	ldr	r3, [pc, #328]	; (1fe8 <udc_process_setup+0x2dc>)
    1e9e:	781b      	ldrb	r3, [r3, #0]
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d100      	bne.n	1ea6 <udc_process_setup+0x19a>
    1ea4:	e0be      	b.n	2024 <STACK_SIZE+0x24>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1ea6:	4b46      	ldr	r3, [pc, #280]	; (1fc0 <udc_process_setup+0x2b4>)
    1ea8:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1eaa:	4b50      	ldr	r3, [pc, #320]	; (1fec <udc_process_setup+0x2e0>)
    1eac:	681d      	ldr	r5, [r3, #0]
    1eae:	682b      	ldr	r3, [r5, #0]
    1eb0:	791b      	ldrb	r3, [r3, #4]
    1eb2:	42a3      	cmp	r3, r4
    1eb4:	d800      	bhi.n	1eb8 <udc_process_setup+0x1ac>
    1eb6:	e0b5      	b.n	2024 <STACK_SIZE+0x24>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1eb8:	2100      	movs	r1, #0
    1eba:	0020      	movs	r0, r4
    1ebc:	4b4c      	ldr	r3, [pc, #304]	; (1ff0 <udc_process_setup+0x2e4>)
    1ebe:	4798      	blx	r3
    1ec0:	2800      	cmp	r0, #0
    1ec2:	d100      	bne.n	1ec6 <udc_process_setup+0x1ba>
    1ec4:	e730      	b.n	1d28 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1ec6:	686b      	ldr	r3, [r5, #4]
    1ec8:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    1eca:	58e3      	ldr	r3, [r4, r3]
    1ecc:	68db      	ldr	r3, [r3, #12]
    1ece:	4798      	blx	r3
    1ed0:	4b48      	ldr	r3, [pc, #288]	; (1ff4 <udc_process_setup+0x2e8>)
    1ed2:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    1ed4:	2101      	movs	r1, #1
    1ed6:	0018      	movs	r0, r3
    1ed8:	4b3c      	ldr	r3, [pc, #240]	; (1fcc <udc_process_setup+0x2c0>)
    1eda:	4798      	blx	r3
    1edc:	e060      	b.n	1fa0 <udc_process_setup+0x294>
    1ede:	221f      	movs	r2, #31
    1ee0:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1ee2:	d15f      	bne.n	1fa4 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
    1ee4:	4a36      	ldr	r2, [pc, #216]	; (1fc0 <udc_process_setup+0x2b4>)
    1ee6:	7852      	ldrb	r2, [r2, #1]
    1ee8:	2a03      	cmp	r2, #3
    1eea:	d100      	bne.n	1eee <udc_process_setup+0x1e2>
    1eec:	e0f3      	b.n	20d6 <STACK_SIZE+0xd6>
    1eee:	b2d1      	uxtb	r1, r2
    1ef0:	2903      	cmp	r1, #3
    1ef2:	d93b      	bls.n	1f6c <udc_process_setup+0x260>
    1ef4:	2a05      	cmp	r2, #5
    1ef6:	d04b      	beq.n	1f90 <udc_process_setup+0x284>
    1ef8:	2a09      	cmp	r2, #9
    1efa:	d153      	bne.n	1fa4 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1efc:	4b30      	ldr	r3, [pc, #192]	; (1fc0 <udc_process_setup+0x2b4>)
    1efe:	88db      	ldrh	r3, [r3, #6]
    1f00:	2b00      	cmp	r3, #0
    1f02:	d000      	beq.n	1f06 <udc_process_setup+0x1fa>
    1f04:	e717      	b.n	1d36 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    1f06:	4b3c      	ldr	r3, [pc, #240]	; (1ff8 <udc_process_setup+0x2ec>)
    1f08:	4798      	blx	r3
    1f0a:	2800      	cmp	r0, #0
    1f0c:	d100      	bne.n	1f10 <udc_process_setup+0x204>
    1f0e:	e70b      	b.n	1d28 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1f10:	4b2b      	ldr	r3, [pc, #172]	; (1fc0 <udc_process_setup+0x2b4>)
    1f12:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1f14:	4b2f      	ldr	r3, [pc, #188]	; (1fd4 <udc_process_setup+0x2c8>)
    1f16:	681b      	ldr	r3, [r3, #0]
    1f18:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1f1a:	429a      	cmp	r2, r3
    1f1c:	dd00      	ble.n	1f20 <udc_process_setup+0x214>
    1f1e:	e703      	b.n	1d28 <udc_process_setup+0x1c>
	udc_reset();
    1f20:	4b36      	ldr	r3, [pc, #216]	; (1ffc <udc_process_setup+0x2f0>)
    1f22:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1f24:	4b26      	ldr	r3, [pc, #152]	; (1fc0 <udc_process_setup+0x2b4>)
    1f26:	789b      	ldrb	r3, [r3, #2]
    1f28:	4a2f      	ldr	r2, [pc, #188]	; (1fe8 <udc_process_setup+0x2dc>)
    1f2a:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    1f2c:	2b00      	cmp	r3, #0
    1f2e:	d037      	beq.n	1fa0 <udc_process_setup+0x294>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1f30:	4a33      	ldr	r2, [pc, #204]	; (2000 <STACK_SIZE>)
    1f32:	4694      	mov	ip, r2
    1f34:	4463      	add	r3, ip
    1f36:	00db      	lsls	r3, r3, #3
    1f38:	4a26      	ldr	r2, [pc, #152]	; (1fd4 <udc_process_setup+0x2c8>)
    1f3a:	6852      	ldr	r2, [r2, #4]
    1f3c:	18d3      	adds	r3, r2, r3
    1f3e:	4a2b      	ldr	r2, [pc, #172]	; (1fec <udc_process_setup+0x2e0>)
    1f40:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f42:	681b      	ldr	r3, [r3, #0]
    1f44:	791b      	ldrb	r3, [r3, #4]
    1f46:	2b00      	cmp	r3, #0
    1f48:	d02a      	beq.n	1fa0 <udc_process_setup+0x294>
    1f4a:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    1f4c:	4d2d      	ldr	r5, [pc, #180]	; (2004 <STACK_SIZE+0x4>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f4e:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    1f50:	2100      	movs	r1, #0
    1f52:	0020      	movs	r0, r4
    1f54:	47a8      	blx	r5
    1f56:	2800      	cmp	r0, #0
    1f58:	d100      	bne.n	1f5c <udc_process_setup+0x250>
    1f5a:	e6e5      	b.n	1d28 <udc_process_setup+0x1c>
			iface_num++) {
    1f5c:	3401      	adds	r4, #1
    1f5e:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f60:	6833      	ldr	r3, [r6, #0]
    1f62:	681b      	ldr	r3, [r3, #0]
    1f64:	791b      	ldrb	r3, [r3, #4]
    1f66:	42a3      	cmp	r3, r4
    1f68:	d8f2      	bhi.n	1f50 <udc_process_setup+0x244>
    1f6a:	e019      	b.n	1fa0 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1f6c:	2a01      	cmp	r2, #1
    1f6e:	d119      	bne.n	1fa4 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1f70:	4b13      	ldr	r3, [pc, #76]	; (1fc0 <udc_process_setup+0x2b4>)
    1f72:	88db      	ldrh	r3, [r3, #6]
    1f74:	2b00      	cmp	r3, #0
    1f76:	d000      	beq.n	1f7a <udc_process_setup+0x26e>
    1f78:	e6dd      	b.n	1d36 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1f7a:	4b11      	ldr	r3, [pc, #68]	; (1fc0 <udc_process_setup+0x2b4>)
    1f7c:	885b      	ldrh	r3, [r3, #2]
    1f7e:	2b01      	cmp	r3, #1
    1f80:	d000      	beq.n	1f84 <udc_process_setup+0x278>
    1f82:	e6d8      	b.n	1d36 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1f84:	4a12      	ldr	r2, [pc, #72]	; (1fd0 <udc_process_setup+0x2c4>)
    1f86:	8813      	ldrh	r3, [r2, #0]
    1f88:	2102      	movs	r1, #2
    1f8a:	438b      	bics	r3, r1
    1f8c:	8013      	strh	r3, [r2, #0]
    1f8e:	e007      	b.n	1fa0 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength) {
    1f90:	4b0b      	ldr	r3, [pc, #44]	; (1fc0 <udc_process_setup+0x2b4>)
    1f92:	88db      	ldrh	r3, [r3, #6]
    1f94:	2b00      	cmp	r3, #0
    1f96:	d000      	beq.n	1f9a <udc_process_setup+0x28e>
    1f98:	e6cd      	b.n	1d36 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    1f9a:	4a1b      	ldr	r2, [pc, #108]	; (2008 <STACK_SIZE+0x8>)
    1f9c:	4b08      	ldr	r3, [pc, #32]	; (1fc0 <udc_process_setup+0x2b4>)
    1f9e:	611a      	str	r2, [r3, #16]
			return true;
    1fa0:	2001      	movs	r0, #1
    1fa2:	e6d0      	b.n	1d46 <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1fa4:	2b01      	cmp	r3, #1
    1fa6:	d031      	beq.n	200c <STACK_SIZE+0xc>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1fa8:	2b02      	cmp	r3, #2
    1faa:	d000      	beq.n	1fae <udc_process_setup+0x2a2>
    1fac:	e6bc      	b.n	1d28 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1fae:	4b04      	ldr	r3, [pc, #16]	; (1fc0 <udc_process_setup+0x2b4>)
    1fb0:	785b      	ldrb	r3, [r3, #1]
    1fb2:	2b01      	cmp	r3, #1
    1fb4:	d06c      	beq.n	2090 <STACK_SIZE+0x90>
    1fb6:	2b03      	cmp	r3, #3
    1fb8:	d100      	bne.n	1fbc <udc_process_setup+0x2b0>
    1fba:	e078      	b.n	20ae <STACK_SIZE+0xae>
	return false;
    1fbc:	2000      	movs	r0, #0
    1fbe:	e08b      	b.n	20d8 <STACK_SIZE+0xd8>
    1fc0:	200005bc 	.word	0x200005bc
    1fc4:	00003955 	.word	0x00003955
    1fc8:	20000214 	.word	0x20000214
    1fcc:	00003d2d 	.word	0x00003d2d
    1fd0:	20000212 	.word	0x20000212
    1fd4:	200000d8 	.word	0x200000d8
    1fd8:	0000a8a8 	.word	0x0000a8a8
    1fdc:	2000007c 	.word	0x2000007c
    1fe0:	20000098 	.word	0x20000098
    1fe4:	2000009c 	.word	0x2000009c
    1fe8:	2000021c 	.word	0x2000021c
    1fec:	20000220 	.word	0x20000220
    1ff0:	00001b39 	.word	0x00001b39
    1ff4:	20000218 	.word	0x20000218
    1ff8:	00003d1d 	.word	0x00003d1d
    1ffc:	00001c7d 	.word	0x00001c7d
    2000:	1fffffff 	.word	0x1fffffff
    2004:	00001c19 	.word	0x00001c19
    2008:	00001b21 	.word	0x00001b21
			switch (udd_g_ctrlreq.req.bRequest) {
    200c:	4a4a      	ldr	r2, [pc, #296]	; (2138 <STACK_SIZE+0x138>)
    200e:	7852      	ldrb	r2, [r2, #1]
    2010:	2a0b      	cmp	r2, #11
    2012:	d1c9      	bne.n	1fa8 <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
    2014:	4b48      	ldr	r3, [pc, #288]	; (2138 <STACK_SIZE+0x138>)
    2016:	88db      	ldrh	r3, [r3, #6]
    2018:	2b00      	cmp	r3, #0
    201a:	d103      	bne.n	2024 <STACK_SIZE+0x24>
	if (!udc_num_configuration) {
    201c:	4b47      	ldr	r3, [pc, #284]	; (213c <STACK_SIZE+0x13c>)
    201e:	781b      	ldrb	r3, [r3, #0]
    2020:	2b00      	cmp	r3, #0
    2022:	d127      	bne.n	2074 <STACK_SIZE+0x74>
	if (0 == udc_num_configuration) {
    2024:	4b45      	ldr	r3, [pc, #276]	; (213c <STACK_SIZE+0x13c>)
    2026:	781b      	ldrb	r3, [r3, #0]
	return false;
    2028:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    202a:	2b00      	cmp	r3, #0
    202c:	d100      	bne.n	2030 <STACK_SIZE+0x30>
    202e:	e68a      	b.n	1d46 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2030:	4b41      	ldr	r3, [pc, #260]	; (2138 <STACK_SIZE+0x138>)
    2032:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2034:	4b42      	ldr	r3, [pc, #264]	; (2140 <STACK_SIZE+0x140>)
    2036:	681d      	ldr	r5, [r3, #0]
    2038:	682b      	ldr	r3, [r5, #0]
    203a:	791b      	ldrb	r3, [r3, #4]
    203c:	42a3      	cmp	r3, r4
    203e:	d800      	bhi.n	2042 <STACK_SIZE+0x42>
    2040:	e681      	b.n	1d46 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    2042:	2100      	movs	r1, #0
    2044:	0020      	movs	r0, r4
    2046:	4b3f      	ldr	r3, [pc, #252]	; (2144 <STACK_SIZE+0x144>)
    2048:	4798      	blx	r3
    204a:	2800      	cmp	r0, #0
    204c:	d100      	bne.n	2050 <STACK_SIZE+0x50>
    204e:	e672      	b.n	1d36 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2050:	686b      	ldr	r3, [r5, #4]
    2052:	00a2      	lsls	r2, r4, #2
    2054:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2056:	68eb      	ldr	r3, [r5, #12]
    2058:	4798      	blx	r3
    205a:	0001      	movs	r1, r0
    205c:	0020      	movs	r0, r4
    205e:	4b39      	ldr	r3, [pc, #228]	; (2144 <STACK_SIZE+0x144>)
    2060:	4798      	blx	r3
    2062:	2800      	cmp	r0, #0
    2064:	d100      	bne.n	2068 <STACK_SIZE+0x68>
    2066:	e666      	b.n	1d36 <udc_process_setup+0x2a>
	return udi_api->setup();
    2068:	68ab      	ldr	r3, [r5, #8]
    206a:	4798      	blx	r3
		if (udc_req_iface()) {
    206c:	2800      	cmp	r0, #0
    206e:	d000      	beq.n	2072 <STACK_SIZE+0x72>
    2070:	e669      	b.n	1d46 <udc_process_setup+0x3a>
    2072:	e660      	b.n	1d36 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2074:	4b30      	ldr	r3, [pc, #192]	; (2138 <STACK_SIZE+0x138>)
    2076:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    2078:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    207a:	0028      	movs	r0, r5
    207c:	4b32      	ldr	r3, [pc, #200]	; (2148 <STACK_SIZE+0x148>)
    207e:	4798      	blx	r3
    2080:	2800      	cmp	r0, #0
    2082:	d100      	bne.n	2086 <STACK_SIZE+0x86>
    2084:	e650      	b.n	1d28 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    2086:	b2e1      	uxtb	r1, r4
    2088:	0028      	movs	r0, r5
    208a:	4b30      	ldr	r3, [pc, #192]	; (214c <STACK_SIZE+0x14c>)
    208c:	4798      	blx	r3
    208e:	e023      	b.n	20d8 <STACK_SIZE+0xd8>
	if (udd_g_ctrlreq.req.wLength) {
    2090:	4b29      	ldr	r3, [pc, #164]	; (2138 <STACK_SIZE+0x138>)
    2092:	88db      	ldrh	r3, [r3, #6]
    2094:	2b00      	cmp	r3, #0
    2096:	d000      	beq.n	209a <STACK_SIZE+0x9a>
    2098:	e64d      	b.n	1d36 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    209a:	4b27      	ldr	r3, [pc, #156]	; (2138 <STACK_SIZE+0x138>)
    209c:	885b      	ldrh	r3, [r3, #2]
    209e:	2b00      	cmp	r3, #0
    20a0:	d000      	beq.n	20a4 <STACK_SIZE+0xa4>
    20a2:	e648      	b.n	1d36 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    20a4:	4b24      	ldr	r3, [pc, #144]	; (2138 <STACK_SIZE+0x138>)
    20a6:	7918      	ldrb	r0, [r3, #4]
    20a8:	4b29      	ldr	r3, [pc, #164]	; (2150 <STACK_SIZE+0x150>)
    20aa:	4798      	blx	r3
    20ac:	e014      	b.n	20d8 <STACK_SIZE+0xd8>
	if (udd_g_ctrlreq.req.wLength) {
    20ae:	4b22      	ldr	r3, [pc, #136]	; (2138 <STACK_SIZE+0x138>)
    20b0:	88db      	ldrh	r3, [r3, #6]
    20b2:	2b00      	cmp	r3, #0
    20b4:	d000      	beq.n	20b8 <STACK_SIZE+0xb8>
    20b6:	e63e      	b.n	1d36 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    20b8:	4b1f      	ldr	r3, [pc, #124]	; (2138 <STACK_SIZE+0x138>)
    20ba:	885b      	ldrh	r3, [r3, #2]
    20bc:	2b00      	cmp	r3, #0
    20be:	d000      	beq.n	20c2 <STACK_SIZE+0xc2>
    20c0:	e639      	b.n	1d36 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    20c2:	4c1d      	ldr	r4, [pc, #116]	; (2138 <STACK_SIZE+0x138>)
    20c4:	7920      	ldrb	r0, [r4, #4]
    20c6:	4b23      	ldr	r3, [pc, #140]	; (2154 <STACK_SIZE+0x154>)
    20c8:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    20ca:	7920      	ldrb	r0, [r4, #4]
    20cc:	4b22      	ldr	r3, [pc, #136]	; (2158 <STACK_SIZE+0x158>)
    20ce:	4798      	blx	r3
    20d0:	e002      	b.n	20d8 <STACK_SIZE+0xd8>
		return false;
    20d2:	2000      	movs	r0, #0
    20d4:	e000      	b.n	20d8 <STACK_SIZE+0xd8>
				return udc_req_std_dev_set_feature();
    20d6:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    20d8:	2800      	cmp	r0, #0
    20da:	d000      	beq.n	20de <STACK_SIZE+0xde>
    20dc:	e633      	b.n	1d46 <udc_process_setup+0x3a>
    20de:	e623      	b.n	1d28 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    20e0:	4b16      	ldr	r3, [pc, #88]	; (213c <STACK_SIZE+0x13c>)
    20e2:	781b      	ldrb	r3, [r3, #0]
    20e4:	2b00      	cmp	r3, #0
    20e6:	d100      	bne.n	20ea <STACK_SIZE+0xea>
    20e8:	e62d      	b.n	1d46 <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    20ea:	4b15      	ldr	r3, [pc, #84]	; (2140 <STACK_SIZE+0x140>)
    20ec:	681b      	ldr	r3, [r3, #0]
    20ee:	681a      	ldr	r2, [r3, #0]
    20f0:	7912      	ldrb	r2, [r2, #4]
    20f2:	2a00      	cmp	r2, #0
    20f4:	d01a      	beq.n	212c <STACK_SIZE+0x12c>
    20f6:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    20f8:	4e12      	ldr	r6, [pc, #72]	; (2144 <STACK_SIZE+0x144>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    20fa:	4f11      	ldr	r7, [pc, #68]	; (2140 <STACK_SIZE+0x140>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    20fc:	685b      	ldr	r3, [r3, #4]
    20fe:	00aa      	lsls	r2, r5, #2
    2100:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2102:	68e3      	ldr	r3, [r4, #12]
    2104:	4798      	blx	r3
    2106:	0001      	movs	r1, r0
    2108:	0028      	movs	r0, r5
    210a:	47b0      	blx	r6
    210c:	2800      	cmp	r0, #0
    210e:	d100      	bne.n	2112 <STACK_SIZE+0x112>
    2110:	e619      	b.n	1d46 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    2112:	68a3      	ldr	r3, [r4, #8]
    2114:	4798      	blx	r3
    2116:	2800      	cmp	r0, #0
    2118:	d000      	beq.n	211c <STACK_SIZE+0x11c>
    211a:	e614      	b.n	1d46 <udc_process_setup+0x3a>
			iface_num++) {
    211c:	3501      	adds	r5, #1
    211e:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2120:	683b      	ldr	r3, [r7, #0]
    2122:	681a      	ldr	r2, [r3, #0]
    2124:	7912      	ldrb	r2, [r2, #4]
    2126:	42aa      	cmp	r2, r5
    2128:	d8e8      	bhi.n	20fc <STACK_SIZE+0xfc>
    212a:	e60c      	b.n	1d46 <udc_process_setup+0x3a>
	return false;
    212c:	2000      	movs	r0, #0
    212e:	e60a      	b.n	1d46 <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    2130:	2103      	movs	r1, #3
		str = udc_string_product_name;
    2132:	4c0a      	ldr	r4, [pc, #40]	; (215c <STACK_SIZE+0x15c>)
    2134:	e688      	b.n	1e48 <udc_process_setup+0x13c>
    2136:	46c0      	nop			; (mov r8, r8)
    2138:	200005bc 	.word	0x200005bc
    213c:	2000021c 	.word	0x2000021c
    2140:	20000220 	.word	0x20000220
    2144:	00001b39 	.word	0x00001b39
    2148:	00001bad 	.word	0x00001bad
    214c:	00001c19 	.word	0x00001c19
    2150:	00003a99 	.word	0x00003a99
    2154:	000037a9 	.word	0x000037a9
    2158:	00003969 	.word	0x00003969
    215c:	200000a8 	.word	0x200000a8

00002160 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    2160:	4a04      	ldr	r2, [pc, #16]	; (2174 <_extint_enable+0x14>)
    2162:	7813      	ldrb	r3, [r2, #0]
    2164:	2102      	movs	r1, #2
    2166:	430b      	orrs	r3, r1
    2168:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    216a:	7853      	ldrb	r3, [r2, #1]
    216c:	b25b      	sxtb	r3, r3
    216e:	2b00      	cmp	r3, #0
    2170:	dbfb      	blt.n	216a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2172:	4770      	bx	lr
    2174:	40001800 	.word	0x40001800

00002178 <_system_extint_init>:
{
    2178:	b500      	push	{lr}
    217a:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    217c:	4a12      	ldr	r2, [pc, #72]	; (21c8 <_system_extint_init+0x50>)
    217e:	6993      	ldr	r3, [r2, #24]
    2180:	2140      	movs	r1, #64	; 0x40
    2182:	430b      	orrs	r3, r1
    2184:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2186:	a901      	add	r1, sp, #4
    2188:	2300      	movs	r3, #0
    218a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    218c:	2005      	movs	r0, #5
    218e:	4b0f      	ldr	r3, [pc, #60]	; (21cc <_system_extint_init+0x54>)
    2190:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    2192:	2005      	movs	r0, #5
    2194:	4b0e      	ldr	r3, [pc, #56]	; (21d0 <_system_extint_init+0x58>)
    2196:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    2198:	4a0e      	ldr	r2, [pc, #56]	; (21d4 <_system_extint_init+0x5c>)
    219a:	7813      	ldrb	r3, [r2, #0]
    219c:	2101      	movs	r1, #1
    219e:	430b      	orrs	r3, r1
    21a0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    21a2:	7853      	ldrb	r3, [r2, #1]
    21a4:	b25b      	sxtb	r3, r3
    21a6:	2b00      	cmp	r3, #0
    21a8:	dbfb      	blt.n	21a2 <_system_extint_init+0x2a>
    21aa:	4b0b      	ldr	r3, [pc, #44]	; (21d8 <_system_extint_init+0x60>)
    21ac:	0019      	movs	r1, r3
    21ae:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    21b0:	2200      	movs	r2, #0
    21b2:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    21b4:	4299      	cmp	r1, r3
    21b6:	d1fc      	bne.n	21b2 <_system_extint_init+0x3a>
    21b8:	2210      	movs	r2, #16
    21ba:	4b08      	ldr	r3, [pc, #32]	; (21dc <_system_extint_init+0x64>)
    21bc:	601a      	str	r2, [r3, #0]
	_extint_enable();
    21be:	4b08      	ldr	r3, [pc, #32]	; (21e0 <_system_extint_init+0x68>)
    21c0:	4798      	blx	r3
}
    21c2:	b003      	add	sp, #12
    21c4:	bd00      	pop	{pc}
    21c6:	46c0      	nop			; (mov r8, r8)
    21c8:	40000400 	.word	0x40000400
    21cc:	00008de9 	.word	0x00008de9
    21d0:	00008d5d 	.word	0x00008d5d
    21d4:	40001800 	.word	0x40001800
    21d8:	20000378 	.word	0x20000378
    21dc:	e000e100 	.word	0xe000e100
    21e0:	00002161 	.word	0x00002161

000021e4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    21e4:	2300      	movs	r3, #0
    21e6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    21e8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    21ea:	2201      	movs	r2, #1
    21ec:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    21ee:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    21f0:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    21f2:	3302      	adds	r3, #2
    21f4:	72c3      	strb	r3, [r0, #11]
}
    21f6:	4770      	bx	lr

000021f8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    21f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21fa:	b083      	sub	sp, #12
    21fc:	0005      	movs	r5, r0
    21fe:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2200:	a901      	add	r1, sp, #4
    2202:	2300      	movs	r3, #0
    2204:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2206:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    2208:	7923      	ldrb	r3, [r4, #4]
    220a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    220c:	7a23      	ldrb	r3, [r4, #8]
    220e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    2210:	7820      	ldrb	r0, [r4, #0]
    2212:	4b15      	ldr	r3, [pc, #84]	; (2268 <extint_chan_set_config+0x70>)
    2214:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    2216:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    2218:	2d1f      	cmp	r5, #31
    221a:	d800      	bhi.n	221e <extint_chan_set_config+0x26>
		return eics[eic_index];
    221c:	4813      	ldr	r0, [pc, #76]	; (226c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    221e:	2207      	movs	r2, #7
    2220:	402a      	ands	r2, r5
    2222:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    2224:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    2226:	7aa3      	ldrb	r3, [r4, #10]
    2228:	2b00      	cmp	r3, #0
    222a:	d001      	beq.n	2230 <extint_chan_set_config+0x38>
    222c:	2308      	movs	r3, #8
    222e:	431f      	orrs	r7, r3
    2230:	08eb      	lsrs	r3, r5, #3
    2232:	009b      	lsls	r3, r3, #2
    2234:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    2236:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2238:	260f      	movs	r6, #15
    223a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    223c:	43b1      	bics	r1, r6
			(new_config << config_pos);
    223e:	4097      	lsls	r7, r2
    2240:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2242:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    2244:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    2246:	7a63      	ldrb	r3, [r4, #9]
    2248:	2b00      	cmp	r3, #0
    224a:	d106      	bne.n	225a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    224c:	6943      	ldr	r3, [r0, #20]
    224e:	2201      	movs	r2, #1
    2250:	40aa      	lsls	r2, r5
    2252:	4393      	bics	r3, r2
    2254:	6143      	str	r3, [r0, #20]
	}
}
    2256:	b003      	add	sp, #12
    2258:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    225a:	6942      	ldr	r2, [r0, #20]
    225c:	2301      	movs	r3, #1
    225e:	40ab      	lsls	r3, r5
    2260:	4313      	orrs	r3, r2
    2262:	6143      	str	r3, [r0, #20]
    2264:	e7f7      	b.n	2256 <extint_chan_set_config+0x5e>
    2266:	46c0      	nop			; (mov r8, r8)
    2268:	00008ee1 	.word	0x00008ee1
    226c:	40001800 	.word	0x40001800

00002270 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2270:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2272:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    2274:	b25b      	sxtb	r3, r3
    2276:	2b00      	cmp	r3, #0
    2278:	dbfb      	blt.n	2272 <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    227a:	8813      	ldrh	r3, [r2, #0]
    227c:	2102      	movs	r1, #2
    227e:	430b      	orrs	r3, r1
    2280:	8013      	strh	r3, [r2, #0]
}
    2282:	4770      	bx	lr

00002284 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2284:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2286:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    2288:	b25b      	sxtb	r3, r3
    228a:	2b00      	cmp	r3, #0
    228c:	dbfb      	blt.n	2286 <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    228e:	23c1      	movs	r3, #193	; 0xc1
    2290:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    2292:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    2294:	8813      	ldrh	r3, [r2, #0]
    2296:	2102      	movs	r1, #2
    2298:	438b      	bics	r3, r1
    229a:	8013      	strh	r3, [r2, #0]
}
    229c:	4770      	bx	lr
	...

000022a0 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    22a0:	b570      	push	{r4, r5, r6, lr}
    22a2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    22a4:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    22a6:	4b06      	ldr	r3, [pc, #24]	; (22c0 <rtc_calendar_reset+0x20>)
    22a8:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    22aa:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    22ac:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    22ae:	b25b      	sxtb	r3, r3
    22b0:	2b00      	cmp	r3, #0
    22b2:	dbfb      	blt.n	22ac <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    22b4:	882b      	ldrh	r3, [r5, #0]
    22b6:	2201      	movs	r2, #1
    22b8:	4313      	orrs	r3, r2
    22ba:	802b      	strh	r3, [r5, #0]
}
    22bc:	bd70      	pop	{r4, r5, r6, pc}
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	00002285 	.word	0x00002285

000022c4 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    22c4:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    22c6:	88cb      	ldrh	r3, [r1, #6]
    22c8:	88c2      	ldrh	r2, [r0, #6]
    22ca:	1a9a      	subs	r2, r3, r2
    22cc:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    22ce:	794b      	ldrb	r3, [r1, #5]
    22d0:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    22d2:	790c      	ldrb	r4, [r1, #4]
    22d4:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    22d6:	4323      	orrs	r3, r4
    22d8:	788c      	ldrb	r4, [r1, #2]
    22da:	0324      	lsls	r4, r4, #12
    22dc:	4323      	orrs	r3, r4
    22de:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    22e0:	7902      	ldrb	r2, [r0, #4]
    22e2:	2a00      	cmp	r2, #0
    22e4:	d105      	bne.n	22f2 <rtc_calendar_time_to_register_value+0x2e>
    22e6:	78ca      	ldrb	r2, [r1, #3]
    22e8:	2a00      	cmp	r2, #0
    22ea:	d002      	beq.n	22f2 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    22ec:	2280      	movs	r2, #128	; 0x80
    22ee:	0252      	lsls	r2, r2, #9
    22f0:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    22f2:	7848      	ldrb	r0, [r1, #1]
    22f4:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    22f6:	780a      	ldrb	r2, [r1, #0]
    22f8:	4310      	orrs	r0, r2
    22fa:	4318      	orrs	r0, r3

	return register_value;
}
    22fc:	bd10      	pop	{r4, pc}

000022fe <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    22fe:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    2300:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    2302:	88c4      	ldrh	r4, [r0, #6]
    2304:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    2306:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    2308:	018b      	lsls	r3, r1, #6
    230a:	0f1b      	lsrs	r3, r3, #28
    230c:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    230e:	028b      	lsls	r3, r1, #10
    2310:	0edb      	lsrs	r3, r3, #27
    2312:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    2314:	7903      	ldrb	r3, [r0, #4]
    2316:	2b00      	cmp	r3, #0
    2318:	d10c      	bne.n	2334 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    231a:	040b      	lsls	r3, r1, #16
    231c:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    231e:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    2320:	03cb      	lsls	r3, r1, #15
    2322:	0fdb      	lsrs	r3, r3, #31
    2324:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    2326:	0988      	lsrs	r0, r1, #6
    2328:	233f      	movs	r3, #63	; 0x3f
    232a:	4018      	ands	r0, r3
    232c:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    232e:	4019      	ands	r1, r3
    2330:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    2332:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    2334:	03cb      	lsls	r3, r1, #15
    2336:	0edb      	lsrs	r3, r3, #27
    2338:	7093      	strb	r3, [r2, #2]
    233a:	e7f4      	b.n	2326 <rtc_calendar_register_value_to_time+0x28>

0000233c <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    233c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    233e:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
    2340:	4b03      	ldr	r3, [pc, #12]	; (2350 <rtc_calendar_set_time+0x14>)
    2342:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2344:	7aa3      	ldrb	r3, [r4, #10]

	while (rtc_calendar_is_syncing(module)) {
    2346:	b25b      	sxtb	r3, r3
    2348:	2b00      	cmp	r3, #0
    234a:	dbfb      	blt.n	2344 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
    234c:	6120      	str	r0, [r4, #16]
}
    234e:	bd10      	pop	{r4, pc}
    2350:	000022c5 	.word	0x000022c5

00002354 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    2354:	b510      	push	{r4, lr}
    2356:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2358:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    235a:	7941      	ldrb	r1, [r0, #5]
    235c:	2900      	cmp	r1, #0
    235e:	d006      	beq.n	236e <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    2360:	8859      	ldrh	r1, [r3, #2]
    2362:	0449      	lsls	r1, r1, #17
    2364:	d50b      	bpl.n	237e <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    2366:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    2368:	4b0a      	ldr	r3, [pc, #40]	; (2394 <rtc_calendar_get_time+0x40>)
    236a:	4798      	blx	r3
}
    236c:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    236e:	490a      	ldr	r1, [pc, #40]	; (2398 <rtc_calendar_get_time+0x44>)
    2370:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    2372:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2374:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    2376:	b249      	sxtb	r1, r1
    2378:	2900      	cmp	r1, #0
    237a:	dbfb      	blt.n	2374 <rtc_calendar_get_time+0x20>
    237c:	e7f3      	b.n	2366 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    237e:	8859      	ldrh	r1, [r3, #2]
    2380:	24c0      	movs	r4, #192	; 0xc0
    2382:	0224      	lsls	r4, r4, #8
    2384:	4321      	orrs	r1, r4
    2386:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    2388:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    238a:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    238c:	b249      	sxtb	r1, r1
    238e:	2900      	cmp	r1, #0
    2390:	dbfb      	blt.n	238a <rtc_calendar_get_time+0x36>
    2392:	e7e8      	b.n	2366 <rtc_calendar_get_time+0x12>
    2394:	000022ff 	.word	0x000022ff
    2398:	ffff8000 	.word	0xffff8000

0000239c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    239c:	b570      	push	{r4, r5, r6, lr}
    239e:	000d      	movs	r5, r1
    23a0:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    23a2:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    23a4:	2a01      	cmp	r2, #1
    23a6:	d901      	bls.n	23ac <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    23a8:	0018      	movs	r0, r3
    23aa:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    23ac:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    23ae:	4b06      	ldr	r3, [pc, #24]	; (23c8 <rtc_calendar_set_alarm+0x2c>)
    23b0:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    23b2:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    23b4:	b25b      	sxtb	r3, r3
    23b6:	2b00      	cmp	r3, #0
    23b8:	dbfb      	blt.n	23b2 <rtc_calendar_set_alarm+0x16>
    23ba:	00e4      	lsls	r4, r4, #3
    23bc:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    23be:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    23c0:	7a2b      	ldrb	r3, [r5, #8]
    23c2:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    23c4:	2300      	movs	r3, #0
    23c6:	e7ef      	b.n	23a8 <rtc_calendar_set_alarm+0xc>
    23c8:	000022c5 	.word	0x000022c5

000023cc <rtc_calendar_init>:
{
    23cc:	b530      	push	{r4, r5, lr}
    23ce:	b083      	sub	sp, #12
    23d0:	0005      	movs	r5, r0
    23d2:	0014      	movs	r4, r2
	module->hw = hw;
    23d4:	6001      	str	r1, [r0, #0]
    23d6:	4a1c      	ldr	r2, [pc, #112]	; (2448 <rtc_calendar_init+0x7c>)
    23d8:	6993      	ldr	r3, [r2, #24]
    23da:	2120      	movs	r1, #32
    23dc:	430b      	orrs	r3, r1
    23de:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    23e0:	a901      	add	r1, sp, #4
    23e2:	2302      	movs	r3, #2
    23e4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    23e6:	2004      	movs	r0, #4
    23e8:	4b18      	ldr	r3, [pc, #96]	; (244c <rtc_calendar_init+0x80>)
    23ea:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    23ec:	2004      	movs	r0, #4
    23ee:	4b18      	ldr	r3, [pc, #96]	; (2450 <rtc_calendar_init+0x84>)
    23f0:	4798      	blx	r3
	rtc_calendar_reset(module);
    23f2:	0028      	movs	r0, r5
    23f4:	4b17      	ldr	r3, [pc, #92]	; (2454 <rtc_calendar_init+0x88>)
    23f6:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    23f8:	7923      	ldrb	r3, [r4, #4]
    23fa:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    23fc:	78e3      	ldrb	r3, [r4, #3]
    23fe:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    2400:	88e3      	ldrh	r3, [r4, #6]
    2402:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    2404:	4b14      	ldr	r3, [pc, #80]	; (2458 <rtc_calendar_init+0x8c>)
    2406:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    2408:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    240a:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    240c:	7921      	ldrb	r1, [r4, #4]
    240e:	2900      	cmp	r1, #0
    2410:	d017      	beq.n	2442 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    2412:	2108      	movs	r1, #8
    2414:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    2416:	78a1      	ldrb	r1, [r4, #2]
    2418:	2900      	cmp	r1, #0
    241a:	d001      	beq.n	2420 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    241c:	2180      	movs	r1, #128	; 0x80
    241e:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    2420:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    2422:	78e3      	ldrb	r3, [r4, #3]
    2424:	2b00      	cmp	r3, #0
    2426:	d004      	beq.n	2432 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    2428:	8853      	ldrh	r3, [r2, #2]
    242a:	2180      	movs	r1, #128	; 0x80
    242c:	01c9      	lsls	r1, r1, #7
    242e:	430b      	orrs	r3, r1
    2430:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    2432:	0021      	movs	r1, r4
    2434:	3108      	adds	r1, #8
    2436:	2200      	movs	r2, #0
    2438:	0028      	movs	r0, r5
    243a:	4b08      	ldr	r3, [pc, #32]	; (245c <rtc_calendar_init+0x90>)
    243c:	4798      	blx	r3
}
    243e:	b003      	add	sp, #12
    2440:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    2442:	2148      	movs	r1, #72	; 0x48
    2444:	430b      	orrs	r3, r1
    2446:	e7e6      	b.n	2416 <rtc_calendar_init+0x4a>
    2448:	40000400 	.word	0x40000400
    244c:	00008de9 	.word	0x00008de9
    2450:	00008d5d 	.word	0x00008d5d
    2454:	000022a1 	.word	0x000022a1
    2458:	200003b8 	.word	0x200003b8
    245c:	0000239d 	.word	0x0000239d

00002460 <rtc_calendar_get_alarm>:
 */
enum status_code rtc_calendar_get_alarm(
		struct rtc_module *const module,
		struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    2460:	b570      	push	{r4, r5, r6, lr}
    2462:	000c      	movs	r4, r1

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    2464:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    2466:	2a01      	cmp	r2, #1
    2468:	d901      	bls.n	246e <rtc_calendar_get_alarm+0xe>

	/* Read alarm mask */
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;

	return STATUS_OK;
}
    246a:	0018      	movs	r0, r3
    246c:	bd70      	pop	{r4, r5, r6, pc}
    246e:	00d2      	lsls	r2, r2, #3
    2470:	6803      	ldr	r3, [r0, #0]
    2472:	189d      	adds	r5, r3, r2
	uint32_t register_value =
    2474:	69a9      	ldr	r1, [r5, #24]
	rtc_calendar_register_value_to_time(module, register_value, &(alarm->time));
    2476:	0022      	movs	r2, r4
    2478:	4b02      	ldr	r3, [pc, #8]	; (2484 <rtc_calendar_get_alarm+0x24>)
    247a:	4798      	blx	r3
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;
    247c:	7f2b      	ldrb	r3, [r5, #28]
    247e:	7223      	strb	r3, [r4, #8]
	return STATUS_OK;
    2480:	2300      	movs	r3, #0
    2482:	e7f2      	b.n	246a <rtc_calendar_get_alarm+0xa>
    2484:	000022ff 	.word	0x000022ff

00002488 <rtc_calendar_swap_time_mode>:
{
    2488:	b570      	push	{r4, r5, r6, lr}
    248a:	b086      	sub	sp, #24
    248c:	0004      	movs	r4, r0
	Rtc *const rtc_module = module->hw;
    248e:	6806      	ldr	r6, [r0, #0]
	rtc_calendar_get_time(module, &time);
    2490:	a904      	add	r1, sp, #16
    2492:	4b3d      	ldr	r3, [pc, #244]	; (2588 <rtc_calendar_swap_time_mode+0x100>)
    2494:	4798      	blx	r3
	if (module->clock_24h) {
    2496:	7923      	ldrb	r3, [r4, #4]
    2498:	2b00      	cmp	r3, #0
    249a:	d042      	beq.n	2522 <rtc_calendar_swap_time_mode+0x9a>
		time.pm = (uint8_t)(time.hour / 12);
    249c:	aa04      	add	r2, sp, #16
    249e:	7890      	ldrb	r0, [r2, #2]
    24a0:	230b      	movs	r3, #11
    24a2:	4283      	cmp	r3, r0
    24a4:	419b      	sbcs	r3, r3
    24a6:	425b      	negs	r3, r3
    24a8:	70d3      	strb	r3, [r2, #3]
		time.hour = time.hour % 12;
    24aa:	210c      	movs	r1, #12
    24ac:	4b37      	ldr	r3, [pc, #220]	; (258c <rtc_calendar_swap_time_mode+0x104>)
    24ae:	4798      	blx	r3
    24b0:	b2c9      	uxtb	r1, r1
		if (time.hour == 0) {
    24b2:	2900      	cmp	r1, #0
    24b4:	d016      	beq.n	24e4 <rtc_calendar_swap_time_mode+0x5c>
		time.hour = time.hour % 12;
    24b6:	ab04      	add	r3, sp, #16
    24b8:	7099      	strb	r1, [r3, #2]
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    24ba:	ad01      	add	r5, sp, #4
    24bc:	2200      	movs	r2, #0
    24be:	0029      	movs	r1, r5
    24c0:	0020      	movs	r0, r4
    24c2:	4b33      	ldr	r3, [pc, #204]	; (2590 <rtc_calendar_swap_time_mode+0x108>)
    24c4:	4798      	blx	r3
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
    24c6:	78a8      	ldrb	r0, [r5, #2]
    24c8:	230b      	movs	r3, #11
    24ca:	4283      	cmp	r3, r0
    24cc:	419b      	sbcs	r3, r3
    24ce:	425b      	negs	r3, r3
    24d0:	70eb      	strb	r3, [r5, #3]
			alarm.time.hour = alarm.time.hour % 12;
    24d2:	210c      	movs	r1, #12
    24d4:	4b2d      	ldr	r3, [pc, #180]	; (258c <rtc_calendar_swap_time_mode+0x104>)
    24d6:	4798      	blx	r3
    24d8:	b2c9      	uxtb	r1, r1
			if (alarm.time.hour == 0) {
    24da:	2900      	cmp	r1, #0
    24dc:	d006      	beq.n	24ec <rtc_calendar_swap_time_mode+0x64>
			alarm.time.hour = alarm.time.hour % 12;
    24de:	ab01      	add	r3, sp, #4
    24e0:	7099      	strb	r1, [r3, #2]
    24e2:	e006      	b.n	24f2 <rtc_calendar_swap_time_mode+0x6a>
			time.hour = 12;
    24e4:	220c      	movs	r2, #12
    24e6:	ab04      	add	r3, sp, #16
    24e8:	709a      	strb	r2, [r3, #2]
    24ea:	e7e6      	b.n	24ba <rtc_calendar_swap_time_mode+0x32>
				alarm.time.hour = 12;
    24ec:	220c      	movs	r2, #12
    24ee:	ab01      	add	r3, sp, #4
    24f0:	709a      	strb	r2, [r3, #2]
			module->clock_24h = false;
    24f2:	2500      	movs	r5, #0
    24f4:	7125      	strb	r5, [r4, #4]
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    24f6:	2200      	movs	r2, #0
    24f8:	a901      	add	r1, sp, #4
    24fa:	0020      	movs	r0, r4
    24fc:	4b25      	ldr	r3, [pc, #148]	; (2594 <rtc_calendar_swap_time_mode+0x10c>)
    24fe:	4798      	blx	r3
		module->clock_24h = false;
    2500:	7125      	strb	r5, [r4, #4]
	rtc_calendar_disable(module);
    2502:	0020      	movs	r0, r4
    2504:	4b24      	ldr	r3, [pc, #144]	; (2598 <rtc_calendar_swap_time_mode+0x110>)
    2506:	4798      	blx	r3
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;
    2508:	8833      	ldrh	r3, [r6, #0]
    250a:	2240      	movs	r2, #64	; 0x40
    250c:	4053      	eors	r3, r2
    250e:	8033      	strh	r3, [r6, #0]
	rtc_calendar_enable(module);
    2510:	0020      	movs	r0, r4
    2512:	4b22      	ldr	r3, [pc, #136]	; (259c <rtc_calendar_swap_time_mode+0x114>)
    2514:	4798      	blx	r3
	rtc_calendar_set_time(module, &time);
    2516:	a904      	add	r1, sp, #16
    2518:	0020      	movs	r0, r4
    251a:	4b21      	ldr	r3, [pc, #132]	; (25a0 <rtc_calendar_swap_time_mode+0x118>)
    251c:	4798      	blx	r3
}
    251e:	b006      	add	sp, #24
    2520:	bd70      	pop	{r4, r5, r6, pc}
		if (time.pm == 1) {
    2522:	ab04      	add	r3, sp, #16
    2524:	78db      	ldrb	r3, [r3, #3]
    2526:	2b00      	cmp	r3, #0
    2528:	d015      	beq.n	2556 <rtc_calendar_swap_time_mode+0xce>
			time.hour = time.hour + 12;
    252a:	ab04      	add	r3, sp, #16
    252c:	789a      	ldrb	r2, [r3, #2]
    252e:	320c      	adds	r2, #12
    2530:	709a      	strb	r2, [r3, #2]
			time.pm = 0;
    2532:	2200      	movs	r2, #0
    2534:	70da      	strb	r2, [r3, #3]
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    2536:	ad01      	add	r5, sp, #4
    2538:	2200      	movs	r2, #0
    253a:	0029      	movs	r1, r5
    253c:	0020      	movs	r0, r4
    253e:	4b14      	ldr	r3, [pc, #80]	; (2590 <rtc_calendar_swap_time_mode+0x108>)
    2540:	4798      	blx	r3
			if (alarm.time.pm == 1) {
    2542:	78eb      	ldrb	r3, [r5, #3]
    2544:	2b00      	cmp	r3, #0
    2546:	d10e      	bne.n	2566 <rtc_calendar_swap_time_mode+0xde>
			} else if (alarm.time.hour == 12) {
    2548:	ab01      	add	r3, sp, #4
    254a:	789b      	ldrb	r3, [r3, #2]
    254c:	2b0c      	cmp	r3, #12
    254e:	d017      	beq.n	2580 <rtc_calendar_swap_time_mode+0xf8>
		module->clock_24h = true;
    2550:	2301      	movs	r3, #1
    2552:	7123      	strb	r3, [r4, #4]
    2554:	e7d5      	b.n	2502 <rtc_calendar_swap_time_mode+0x7a>
		} else if (time.hour == 12) {
    2556:	ab04      	add	r3, sp, #16
    2558:	789b      	ldrb	r3, [r3, #2]
    255a:	2b0c      	cmp	r3, #12
    255c:	d1eb      	bne.n	2536 <rtc_calendar_swap_time_mode+0xae>
			time.hour = 0;
    255e:	2200      	movs	r2, #0
    2560:	ab04      	add	r3, sp, #16
    2562:	709a      	strb	r2, [r3, #2]
    2564:	e7e7      	b.n	2536 <rtc_calendar_swap_time_mode+0xae>
				alarm.time.hour = alarm.time.hour + 12;
    2566:	a901      	add	r1, sp, #4
    2568:	788b      	ldrb	r3, [r1, #2]
    256a:	330c      	adds	r3, #12
    256c:	708b      	strb	r3, [r1, #2]
				alarm.time.pm = 0;
    256e:	2300      	movs	r3, #0
    2570:	70cb      	strb	r3, [r1, #3]
				module->clock_24h = true;
    2572:	3301      	adds	r3, #1
    2574:	7123      	strb	r3, [r4, #4]
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    2576:	2200      	movs	r2, #0
    2578:	0020      	movs	r0, r4
    257a:	4b06      	ldr	r3, [pc, #24]	; (2594 <rtc_calendar_swap_time_mode+0x10c>)
    257c:	4798      	blx	r3
    257e:	e7e7      	b.n	2550 <rtc_calendar_swap_time_mode+0xc8>
				alarm.time.hour = 0;
    2580:	2200      	movs	r2, #0
    2582:	ab01      	add	r3, sp, #4
    2584:	709a      	strb	r2, [r3, #2]
    2586:	e7e3      	b.n	2550 <rtc_calendar_swap_time_mode+0xc8>
    2588:	00002355 	.word	0x00002355
    258c:	00009171 	.word	0x00009171
    2590:	00002461 	.word	0x00002461
    2594:	0000239d 	.word	0x0000239d
    2598:	00002285 	.word	0x00002285
    259c:	00002271 	.word	0x00002271
    25a0:	0000233d 	.word	0x0000233d

000025a4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    25a4:	4770      	bx	lr
	...

000025a8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    25a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    25aa:	4b0a      	ldr	r3, [pc, #40]	; (25d4 <_sercom_set_handler+0x2c>)
    25ac:	781b      	ldrb	r3, [r3, #0]
    25ae:	2b00      	cmp	r3, #0
    25b0:	d10c      	bne.n	25cc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    25b2:	4f09      	ldr	r7, [pc, #36]	; (25d8 <_sercom_set_handler+0x30>)
    25b4:	4e09      	ldr	r6, [pc, #36]	; (25dc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    25b6:	4d0a      	ldr	r5, [pc, #40]	; (25e0 <_sercom_set_handler+0x38>)
    25b8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    25ba:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    25bc:	195a      	adds	r2, r3, r5
    25be:	6014      	str	r4, [r2, #0]
    25c0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    25c2:	2b18      	cmp	r3, #24
    25c4:	d1f9      	bne.n	25ba <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    25c6:	2201      	movs	r2, #1
    25c8:	4b02      	ldr	r3, [pc, #8]	; (25d4 <_sercom_set_handler+0x2c>)
    25ca:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    25cc:	0080      	lsls	r0, r0, #2
    25ce:	4b02      	ldr	r3, [pc, #8]	; (25d8 <_sercom_set_handler+0x30>)
    25d0:	50c1      	str	r1, [r0, r3]
}
    25d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25d4:	20000228 	.word	0x20000228
    25d8:	2000022c 	.word	0x2000022c
    25dc:	000025a5 	.word	0x000025a5
    25e0:	200003bc 	.word	0x200003bc

000025e4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    25e4:	b500      	push	{lr}
    25e6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    25e8:	2309      	movs	r3, #9
    25ea:	466a      	mov	r2, sp
    25ec:	7013      	strb	r3, [r2, #0]
    25ee:	3301      	adds	r3, #1
    25f0:	7053      	strb	r3, [r2, #1]
    25f2:	3301      	adds	r3, #1
    25f4:	7093      	strb	r3, [r2, #2]
    25f6:	3301      	adds	r3, #1
    25f8:	70d3      	strb	r3, [r2, #3]
    25fa:	3301      	adds	r3, #1
    25fc:	7113      	strb	r3, [r2, #4]
    25fe:	3301      	adds	r3, #1
    2600:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2602:	4b03      	ldr	r3, [pc, #12]	; (2610 <_sercom_get_interrupt_vector+0x2c>)
    2604:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2606:	466b      	mov	r3, sp
    2608:	5618      	ldrsb	r0, [r3, r0]
}
    260a:	b003      	add	sp, #12
    260c:	bd00      	pop	{pc}
    260e:	46c0      	nop			; (mov r8, r8)
    2610:	00007a51 	.word	0x00007a51

00002614 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2614:	b510      	push	{r4, lr}
    2616:	4b02      	ldr	r3, [pc, #8]	; (2620 <SERCOM0_Handler+0xc>)
    2618:	681b      	ldr	r3, [r3, #0]
    261a:	2000      	movs	r0, #0
    261c:	4798      	blx	r3
    261e:	bd10      	pop	{r4, pc}
    2620:	2000022c 	.word	0x2000022c

00002624 <SERCOM1_Handler>:
    2624:	b510      	push	{r4, lr}
    2626:	4b02      	ldr	r3, [pc, #8]	; (2630 <SERCOM1_Handler+0xc>)
    2628:	685b      	ldr	r3, [r3, #4]
    262a:	2001      	movs	r0, #1
    262c:	4798      	blx	r3
    262e:	bd10      	pop	{r4, pc}
    2630:	2000022c 	.word	0x2000022c

00002634 <SERCOM2_Handler>:
    2634:	b510      	push	{r4, lr}
    2636:	4b02      	ldr	r3, [pc, #8]	; (2640 <SERCOM2_Handler+0xc>)
    2638:	689b      	ldr	r3, [r3, #8]
    263a:	2002      	movs	r0, #2
    263c:	4798      	blx	r3
    263e:	bd10      	pop	{r4, pc}
    2640:	2000022c 	.word	0x2000022c

00002644 <SERCOM3_Handler>:
    2644:	b510      	push	{r4, lr}
    2646:	4b02      	ldr	r3, [pc, #8]	; (2650 <SERCOM3_Handler+0xc>)
    2648:	68db      	ldr	r3, [r3, #12]
    264a:	2003      	movs	r0, #3
    264c:	4798      	blx	r3
    264e:	bd10      	pop	{r4, pc}
    2650:	2000022c 	.word	0x2000022c

00002654 <SERCOM4_Handler>:
    2654:	b510      	push	{r4, lr}
    2656:	4b02      	ldr	r3, [pc, #8]	; (2660 <SERCOM4_Handler+0xc>)
    2658:	691b      	ldr	r3, [r3, #16]
    265a:	2004      	movs	r0, #4
    265c:	4798      	blx	r3
    265e:	bd10      	pop	{r4, pc}
    2660:	2000022c 	.word	0x2000022c

00002664 <SERCOM5_Handler>:
    2664:	b510      	push	{r4, lr}
    2666:	4b02      	ldr	r3, [pc, #8]	; (2670 <SERCOM5_Handler+0xc>)
    2668:	695b      	ldr	r3, [r3, #20]
    266a:	2005      	movs	r0, #5
    266c:	4798      	blx	r3
    266e:	bd10      	pop	{r4, pc}
    2670:	2000022c 	.word	0x2000022c

00002674 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2674:	b5f0      	push	{r4, r5, r6, r7, lr}
    2676:	46de      	mov	lr, fp
    2678:	4657      	mov	r7, sl
    267a:	464e      	mov	r6, r9
    267c:	4645      	mov	r5, r8
    267e:	b5e0      	push	{r5, r6, r7, lr}
    2680:	b091      	sub	sp, #68	; 0x44
    2682:	0005      	movs	r5, r0
    2684:	000c      	movs	r4, r1
    2686:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2688:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    268a:	0008      	movs	r0, r1
    268c:	4bbc      	ldr	r3, [pc, #752]	; (2980 <usart_init+0x30c>)
    268e:	4798      	blx	r3
    2690:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2692:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2694:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2696:	07db      	lsls	r3, r3, #31
    2698:	d506      	bpl.n	26a8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    269a:	b011      	add	sp, #68	; 0x44
    269c:	bc3c      	pop	{r2, r3, r4, r5}
    269e:	4690      	mov	r8, r2
    26a0:	4699      	mov	r9, r3
    26a2:	46a2      	mov	sl, r4
    26a4:	46ab      	mov	fp, r5
    26a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    26a8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    26aa:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    26ac:	079b      	lsls	r3, r3, #30
    26ae:	d4f4      	bmi.n	269a <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    26b0:	49b4      	ldr	r1, [pc, #720]	; (2984 <usart_init+0x310>)
    26b2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    26b4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    26b6:	2301      	movs	r3, #1
    26b8:	40bb      	lsls	r3, r7
    26ba:	4303      	orrs	r3, r0
    26bc:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    26be:	a90f      	add	r1, sp, #60	; 0x3c
    26c0:	272d      	movs	r7, #45	; 0x2d
    26c2:	5df3      	ldrb	r3, [r6, r7]
    26c4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    26c6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    26c8:	b2d3      	uxtb	r3, r2
    26ca:	9302      	str	r3, [sp, #8]
    26cc:	0018      	movs	r0, r3
    26ce:	4bae      	ldr	r3, [pc, #696]	; (2988 <usart_init+0x314>)
    26d0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    26d2:	9802      	ldr	r0, [sp, #8]
    26d4:	4bad      	ldr	r3, [pc, #692]	; (298c <usart_init+0x318>)
    26d6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    26d8:	5df0      	ldrb	r0, [r6, r7]
    26da:	2100      	movs	r1, #0
    26dc:	4bac      	ldr	r3, [pc, #688]	; (2990 <usart_init+0x31c>)
    26de:	4798      	blx	r3
	module->character_size = config->character_size;
    26e0:	7af3      	ldrb	r3, [r6, #11]
    26e2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    26e4:	2324      	movs	r3, #36	; 0x24
    26e6:	5cf3      	ldrb	r3, [r6, r3]
    26e8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    26ea:	2325      	movs	r3, #37	; 0x25
    26ec:	5cf3      	ldrb	r3, [r6, r3]
    26ee:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    26f0:	7ef3      	ldrb	r3, [r6, #27]
    26f2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    26f4:	7f33      	ldrb	r3, [r6, #28]
    26f6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    26f8:	682b      	ldr	r3, [r5, #0]
    26fa:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    26fc:	0018      	movs	r0, r3
    26fe:	4ba0      	ldr	r3, [pc, #640]	; (2980 <usart_init+0x30c>)
    2700:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2702:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2704:	2200      	movs	r2, #0
    2706:	230e      	movs	r3, #14
    2708:	a906      	add	r1, sp, #24
    270a:	468c      	mov	ip, r1
    270c:	4463      	add	r3, ip
    270e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2710:	8a32      	ldrh	r2, [r6, #16]
    2712:	9202      	str	r2, [sp, #8]
    2714:	2380      	movs	r3, #128	; 0x80
    2716:	01db      	lsls	r3, r3, #7
    2718:	429a      	cmp	r2, r3
    271a:	d100      	bne.n	271e <usart_init+0xaa>
    271c:	e09e      	b.n	285c <usart_init+0x1e8>
    271e:	d90f      	bls.n	2740 <usart_init+0xcc>
    2720:	23c0      	movs	r3, #192	; 0xc0
    2722:	01db      	lsls	r3, r3, #7
    2724:	9a02      	ldr	r2, [sp, #8]
    2726:	429a      	cmp	r2, r3
    2728:	d100      	bne.n	272c <usart_init+0xb8>
    272a:	e092      	b.n	2852 <usart_init+0x1de>
    272c:	2380      	movs	r3, #128	; 0x80
    272e:	021b      	lsls	r3, r3, #8
    2730:	429a      	cmp	r2, r3
    2732:	d000      	beq.n	2736 <usart_init+0xc2>
    2734:	e11f      	b.n	2976 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2736:	2303      	movs	r3, #3
    2738:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    273a:	2300      	movs	r3, #0
    273c:	9307      	str	r3, [sp, #28]
    273e:	e008      	b.n	2752 <usart_init+0xde>
	switch (config->sample_rate) {
    2740:	2380      	movs	r3, #128	; 0x80
    2742:	019b      	lsls	r3, r3, #6
    2744:	429a      	cmp	r2, r3
    2746:	d000      	beq.n	274a <usart_init+0xd6>
    2748:	e115      	b.n	2976 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    274a:	2310      	movs	r3, #16
    274c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    274e:	3b0f      	subs	r3, #15
    2750:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2752:	6833      	ldr	r3, [r6, #0]
    2754:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2756:	68f3      	ldr	r3, [r6, #12]
    2758:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    275a:	6973      	ldr	r3, [r6, #20]
    275c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    275e:	7e33      	ldrb	r3, [r6, #24]
    2760:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2762:	2326      	movs	r3, #38	; 0x26
    2764:	5cf3      	ldrb	r3, [r6, r3]
    2766:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2768:	6873      	ldr	r3, [r6, #4]
    276a:	4699      	mov	r9, r3
	switch (transfer_mode)
    276c:	2b00      	cmp	r3, #0
    276e:	d100      	bne.n	2772 <usart_init+0xfe>
    2770:	e0a0      	b.n	28b4 <usart_init+0x240>
    2772:	2380      	movs	r3, #128	; 0x80
    2774:	055b      	lsls	r3, r3, #21
    2776:	4599      	cmp	r9, r3
    2778:	d100      	bne.n	277c <usart_init+0x108>
    277a:	e084      	b.n	2886 <usart_init+0x212>
	if(config->encoding_format_enable) {
    277c:	7e73      	ldrb	r3, [r6, #25]
    277e:	2b00      	cmp	r3, #0
    2780:	d002      	beq.n	2788 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2782:	7eb3      	ldrb	r3, [r6, #26]
    2784:	4642      	mov	r2, r8
    2786:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2788:	682a      	ldr	r2, [r5, #0]
    278a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    278c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    278e:	2b00      	cmp	r3, #0
    2790:	d1fc      	bne.n	278c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    2792:	330e      	adds	r3, #14
    2794:	aa06      	add	r2, sp, #24
    2796:	4694      	mov	ip, r2
    2798:	4463      	add	r3, ip
    279a:	881b      	ldrh	r3, [r3, #0]
    279c:	4642      	mov	r2, r8
    279e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    27a0:	9b05      	ldr	r3, [sp, #20]
    27a2:	9a03      	ldr	r2, [sp, #12]
    27a4:	4313      	orrs	r3, r2
    27a6:	9a04      	ldr	r2, [sp, #16]
    27a8:	4313      	orrs	r3, r2
    27aa:	464a      	mov	r2, r9
    27ac:	4313      	orrs	r3, r2
    27ae:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    27b0:	465b      	mov	r3, fp
    27b2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    27b4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    27b6:	4653      	mov	r3, sl
    27b8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    27ba:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    27bc:	2327      	movs	r3, #39	; 0x27
    27be:	5cf3      	ldrb	r3, [r6, r3]
    27c0:	2b00      	cmp	r3, #0
    27c2:	d101      	bne.n	27c8 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    27c4:	3304      	adds	r3, #4
    27c6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    27c8:	7e73      	ldrb	r3, [r6, #25]
    27ca:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    27cc:	7f32      	ldrb	r2, [r6, #28]
    27ce:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    27d0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    27d2:	7f72      	ldrb	r2, [r6, #29]
    27d4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    27d6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    27d8:	2224      	movs	r2, #36	; 0x24
    27da:	5cb2      	ldrb	r2, [r6, r2]
    27dc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    27de:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    27e0:	2225      	movs	r2, #37	; 0x25
    27e2:	5cb2      	ldrb	r2, [r6, r2]
    27e4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    27e6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    27e8:	7ab1      	ldrb	r1, [r6, #10]
    27ea:	7af2      	ldrb	r2, [r6, #11]
    27ec:	4311      	orrs	r1, r2
    27ee:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    27f0:	8933      	ldrh	r3, [r6, #8]
    27f2:	2bff      	cmp	r3, #255	; 0xff
    27f4:	d100      	bne.n	27f8 <usart_init+0x184>
    27f6:	e081      	b.n	28fc <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    27f8:	2280      	movs	r2, #128	; 0x80
    27fa:	0452      	lsls	r2, r2, #17
    27fc:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    27fe:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2800:	232c      	movs	r3, #44	; 0x2c
    2802:	5cf3      	ldrb	r3, [r6, r3]
    2804:	2b00      	cmp	r3, #0
    2806:	d103      	bne.n	2810 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2808:	4b62      	ldr	r3, [pc, #392]	; (2994 <usart_init+0x320>)
    280a:	789b      	ldrb	r3, [r3, #2]
    280c:	079b      	lsls	r3, r3, #30
    280e:	d501      	bpl.n	2814 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2810:	2380      	movs	r3, #128	; 0x80
    2812:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2814:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2816:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2818:	2b00      	cmp	r3, #0
    281a:	d1fc      	bne.n	2816 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    281c:	4643      	mov	r3, r8
    281e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2820:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2822:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2824:	2b00      	cmp	r3, #0
    2826:	d1fc      	bne.n	2822 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    2828:	4643      	mov	r3, r8
    282a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    282c:	ab0e      	add	r3, sp, #56	; 0x38
    282e:	2280      	movs	r2, #128	; 0x80
    2830:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2832:	2200      	movs	r2, #0
    2834:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2836:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2838:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    283a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    283c:	930a      	str	r3, [sp, #40]	; 0x28
    283e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2840:	930b      	str	r3, [sp, #44]	; 0x2c
    2842:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2844:	930c      	str	r3, [sp, #48]	; 0x30
    2846:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2848:	9302      	str	r3, [sp, #8]
    284a:	930d      	str	r3, [sp, #52]	; 0x34
    284c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    284e:	ae0a      	add	r6, sp, #40	; 0x28
    2850:	e063      	b.n	291a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2852:	2308      	movs	r3, #8
    2854:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2856:	3b07      	subs	r3, #7
    2858:	9307      	str	r3, [sp, #28]
    285a:	e77a      	b.n	2752 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    285c:	6833      	ldr	r3, [r6, #0]
    285e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2860:	68f3      	ldr	r3, [r6, #12]
    2862:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2864:	6973      	ldr	r3, [r6, #20]
    2866:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2868:	7e33      	ldrb	r3, [r6, #24]
    286a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    286c:	2326      	movs	r3, #38	; 0x26
    286e:	5cf3      	ldrb	r3, [r6, r3]
    2870:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2872:	6873      	ldr	r3, [r6, #4]
    2874:	4699      	mov	r9, r3
	switch (transfer_mode)
    2876:	2b00      	cmp	r3, #0
    2878:	d018      	beq.n	28ac <usart_init+0x238>
    287a:	2380      	movs	r3, #128	; 0x80
    287c:	055b      	lsls	r3, r3, #21
    287e:	4599      	cmp	r9, r3
    2880:	d001      	beq.n	2886 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    2882:	2000      	movs	r0, #0
    2884:	e025      	b.n	28d2 <usart_init+0x25e>
			if (!config->use_external_clock) {
    2886:	2327      	movs	r3, #39	; 0x27
    2888:	5cf3      	ldrb	r3, [r6, r3]
    288a:	2b00      	cmp	r3, #0
    288c:	d000      	beq.n	2890 <usart_init+0x21c>
    288e:	e775      	b.n	277c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2890:	6a33      	ldr	r3, [r6, #32]
    2892:	001f      	movs	r7, r3
    2894:	b2c0      	uxtb	r0, r0
    2896:	4b40      	ldr	r3, [pc, #256]	; (2998 <usart_init+0x324>)
    2898:	4798      	blx	r3
    289a:	0001      	movs	r1, r0
    289c:	220e      	movs	r2, #14
    289e:	ab06      	add	r3, sp, #24
    28a0:	469c      	mov	ip, r3
    28a2:	4462      	add	r2, ip
    28a4:	0038      	movs	r0, r7
    28a6:	4b3d      	ldr	r3, [pc, #244]	; (299c <usart_init+0x328>)
    28a8:	4798      	blx	r3
    28aa:	e012      	b.n	28d2 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    28ac:	2308      	movs	r3, #8
    28ae:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    28b0:	2300      	movs	r3, #0
    28b2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    28b4:	2327      	movs	r3, #39	; 0x27
    28b6:	5cf3      	ldrb	r3, [r6, r3]
    28b8:	2b00      	cmp	r3, #0
    28ba:	d00e      	beq.n	28da <usart_init+0x266>
				status_code =
    28bc:	9b06      	ldr	r3, [sp, #24]
    28be:	9300      	str	r3, [sp, #0]
    28c0:	9b07      	ldr	r3, [sp, #28]
    28c2:	220e      	movs	r2, #14
    28c4:	a906      	add	r1, sp, #24
    28c6:	468c      	mov	ip, r1
    28c8:	4462      	add	r2, ip
    28ca:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    28cc:	6a30      	ldr	r0, [r6, #32]
    28ce:	4f34      	ldr	r7, [pc, #208]	; (29a0 <usart_init+0x32c>)
    28d0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    28d2:	2800      	cmp	r0, #0
    28d4:	d000      	beq.n	28d8 <usart_init+0x264>
    28d6:	e6e0      	b.n	269a <usart_init+0x26>
    28d8:	e750      	b.n	277c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    28da:	6a33      	ldr	r3, [r6, #32]
    28dc:	001f      	movs	r7, r3
    28de:	b2c0      	uxtb	r0, r0
    28e0:	4b2d      	ldr	r3, [pc, #180]	; (2998 <usart_init+0x324>)
    28e2:	4798      	blx	r3
    28e4:	0001      	movs	r1, r0
				status_code =
    28e6:	9b06      	ldr	r3, [sp, #24]
    28e8:	9300      	str	r3, [sp, #0]
    28ea:	9b07      	ldr	r3, [sp, #28]
    28ec:	220e      	movs	r2, #14
    28ee:	a806      	add	r0, sp, #24
    28f0:	4684      	mov	ip, r0
    28f2:	4462      	add	r2, ip
    28f4:	0038      	movs	r0, r7
    28f6:	4f2a      	ldr	r7, [pc, #168]	; (29a0 <usart_init+0x32c>)
    28f8:	47b8      	blx	r7
    28fa:	e7ea      	b.n	28d2 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    28fc:	7ef3      	ldrb	r3, [r6, #27]
    28fe:	2b00      	cmp	r3, #0
    2900:	d100      	bne.n	2904 <usart_init+0x290>
    2902:	e77d      	b.n	2800 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2904:	2380      	movs	r3, #128	; 0x80
    2906:	04db      	lsls	r3, r3, #19
    2908:	431f      	orrs	r7, r3
    290a:	e779      	b.n	2800 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    290c:	0020      	movs	r0, r4
    290e:	4b25      	ldr	r3, [pc, #148]	; (29a4 <usart_init+0x330>)
    2910:	4798      	blx	r3
    2912:	e007      	b.n	2924 <usart_init+0x2b0>
    2914:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2916:	2f04      	cmp	r7, #4
    2918:	d00d      	beq.n	2936 <usart_init+0x2c2>
    291a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    291c:	00bb      	lsls	r3, r7, #2
    291e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2920:	2800      	cmp	r0, #0
    2922:	d0f3      	beq.n	290c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2924:	1c43      	adds	r3, r0, #1
    2926:	d0f5      	beq.n	2914 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2928:	a90e      	add	r1, sp, #56	; 0x38
    292a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    292c:	0c00      	lsrs	r0, r0, #16
    292e:	b2c0      	uxtb	r0, r0
    2930:	4b1d      	ldr	r3, [pc, #116]	; (29a8 <usart_init+0x334>)
    2932:	4798      	blx	r3
    2934:	e7ee      	b.n	2914 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    2936:	2300      	movs	r3, #0
    2938:	60eb      	str	r3, [r5, #12]
    293a:	612b      	str	r3, [r5, #16]
    293c:	616b      	str	r3, [r5, #20]
    293e:	61ab      	str	r3, [r5, #24]
    2940:	61eb      	str	r3, [r5, #28]
    2942:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2944:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2946:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2948:	2200      	movs	r2, #0
    294a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    294c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    294e:	3330      	adds	r3, #48	; 0x30
    2950:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2952:	3301      	adds	r3, #1
    2954:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2956:	3301      	adds	r3, #1
    2958:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    295a:	3301      	adds	r3, #1
    295c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    295e:	6828      	ldr	r0, [r5, #0]
    2960:	4b07      	ldr	r3, [pc, #28]	; (2980 <usart_init+0x30c>)
    2962:	4798      	blx	r3
    2964:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2966:	4911      	ldr	r1, [pc, #68]	; (29ac <usart_init+0x338>)
    2968:	4b11      	ldr	r3, [pc, #68]	; (29b0 <usart_init+0x33c>)
    296a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    296c:	00a4      	lsls	r4, r4, #2
    296e:	4b11      	ldr	r3, [pc, #68]	; (29b4 <usart_init+0x340>)
    2970:	50e5      	str	r5, [r4, r3]
	return status_code;
    2972:	2000      	movs	r0, #0
    2974:	e691      	b.n	269a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2976:	2310      	movs	r3, #16
    2978:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    297a:	2300      	movs	r3, #0
    297c:	9307      	str	r3, [sp, #28]
    297e:	e6e8      	b.n	2752 <usart_init+0xde>
    2980:	00007a51 	.word	0x00007a51
    2984:	40000400 	.word	0x40000400
    2988:	00008de9 	.word	0x00008de9
    298c:	00008d5d 	.word	0x00008d5d
    2990:	0000788d 	.word	0x0000788d
    2994:	41002000 	.word	0x41002000
    2998:	00008e05 	.word	0x00008e05
    299c:	000077cf 	.word	0x000077cf
    29a0:	000077f9 	.word	0x000077f9
    29a4:	000078d9 	.word	0x000078d9
    29a8:	00008ee1 	.word	0x00008ee1
    29ac:	00002a55 	.word	0x00002a55
    29b0:	000025a9 	.word	0x000025a9
    29b4:	200003bc 	.word	0x200003bc

000029b8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    29b8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    29ba:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    29bc:	2a00      	cmp	r2, #0
    29be:	d101      	bne.n	29c4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    29c0:	0018      	movs	r0, r3
    29c2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    29c4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    29c6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    29c8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    29ca:	2a00      	cmp	r2, #0
    29cc:	d1f8      	bne.n	29c0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    29ce:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    29d0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    29d2:	2a00      	cmp	r2, #0
    29d4:	d1fc      	bne.n	29d0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    29d6:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    29d8:	2102      	movs	r1, #2
    29da:	7e1a      	ldrb	r2, [r3, #24]
    29dc:	420a      	tst	r2, r1
    29de:	d0fc      	beq.n	29da <usart_write_wait+0x22>
	return STATUS_OK;
    29e0:	2300      	movs	r3, #0
    29e2:	e7ed      	b.n	29c0 <usart_write_wait+0x8>

000029e4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    29e4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    29e6:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    29e8:	2a00      	cmp	r2, #0
    29ea:	d101      	bne.n	29f0 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    29ec:	0018      	movs	r0, r3
    29ee:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    29f0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    29f2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    29f4:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    29f6:	2a00      	cmp	r2, #0
    29f8:	d1f8      	bne.n	29ec <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    29fa:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    29fc:	7e10      	ldrb	r0, [r2, #24]
    29fe:	0740      	lsls	r0, r0, #29
    2a00:	d5f4      	bpl.n	29ec <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2a02:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2a04:	2b00      	cmp	r3, #0
    2a06:	d1fc      	bne.n	2a02 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2a08:	8b53      	ldrh	r3, [r2, #26]
    2a0a:	b2db      	uxtb	r3, r3
	if (error_code) {
    2a0c:	0698      	lsls	r0, r3, #26
    2a0e:	d01d      	beq.n	2a4c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2a10:	0798      	lsls	r0, r3, #30
    2a12:	d503      	bpl.n	2a1c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2a14:	2302      	movs	r3, #2
    2a16:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2a18:	3318      	adds	r3, #24
    2a1a:	e7e7      	b.n	29ec <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2a1c:	0758      	lsls	r0, r3, #29
    2a1e:	d503      	bpl.n	2a28 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2a20:	2304      	movs	r3, #4
    2a22:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2a24:	331a      	adds	r3, #26
    2a26:	e7e1      	b.n	29ec <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2a28:	07d8      	lsls	r0, r3, #31
    2a2a:	d503      	bpl.n	2a34 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2a2c:	2301      	movs	r3, #1
    2a2e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2a30:	3312      	adds	r3, #18
    2a32:	e7db      	b.n	29ec <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2a34:	06d8      	lsls	r0, r3, #27
    2a36:	d503      	bpl.n	2a40 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2a38:	2310      	movs	r3, #16
    2a3a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2a3c:	3332      	adds	r3, #50	; 0x32
    2a3e:	e7d5      	b.n	29ec <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2a40:	069b      	lsls	r3, r3, #26
    2a42:	d503      	bpl.n	2a4c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2a44:	2320      	movs	r3, #32
    2a46:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2a48:	3321      	adds	r3, #33	; 0x21
    2a4a:	e7cf      	b.n	29ec <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2a4c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2a4e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2a50:	2300      	movs	r3, #0
    2a52:	e7cb      	b.n	29ec <usart_read_wait+0x8>

00002a54 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2a56:	0080      	lsls	r0, r0, #2
    2a58:	4b62      	ldr	r3, [pc, #392]	; (2be4 <_usart_interrupt_handler+0x190>)
    2a5a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2a5c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2a5e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2a60:	2b00      	cmp	r3, #0
    2a62:	d1fc      	bne.n	2a5e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2a64:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2a66:	7da6      	ldrb	r6, [r4, #22]
    2a68:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2a6a:	2330      	movs	r3, #48	; 0x30
    2a6c:	5ceb      	ldrb	r3, [r5, r3]
    2a6e:	2231      	movs	r2, #49	; 0x31
    2a70:	5caf      	ldrb	r7, [r5, r2]
    2a72:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2a74:	07f3      	lsls	r3, r6, #31
    2a76:	d522      	bpl.n	2abe <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2a78:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2a7a:	b29b      	uxth	r3, r3
    2a7c:	2b00      	cmp	r3, #0
    2a7e:	d01c      	beq.n	2aba <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2a80:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2a82:	7813      	ldrb	r3, [r2, #0]
    2a84:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2a86:	1c51      	adds	r1, r2, #1
    2a88:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2a8a:	7969      	ldrb	r1, [r5, #5]
    2a8c:	2901      	cmp	r1, #1
    2a8e:	d00e      	beq.n	2aae <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2a90:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2a92:	05db      	lsls	r3, r3, #23
    2a94:	0ddb      	lsrs	r3, r3, #23
    2a96:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2a98:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2a9a:	3b01      	subs	r3, #1
    2a9c:	b29b      	uxth	r3, r3
    2a9e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2aa0:	2b00      	cmp	r3, #0
    2aa2:	d10c      	bne.n	2abe <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2aa4:	3301      	adds	r3, #1
    2aa6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2aa8:	3301      	adds	r3, #1
    2aaa:	75a3      	strb	r3, [r4, #22]
    2aac:	e007      	b.n	2abe <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2aae:	7851      	ldrb	r1, [r2, #1]
    2ab0:	0209      	lsls	r1, r1, #8
    2ab2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2ab4:	3202      	adds	r2, #2
    2ab6:	62aa      	str	r2, [r5, #40]	; 0x28
    2ab8:	e7eb      	b.n	2a92 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2aba:	2301      	movs	r3, #1
    2abc:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2abe:	07b3      	lsls	r3, r6, #30
    2ac0:	d506      	bpl.n	2ad0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2ac2:	2302      	movs	r3, #2
    2ac4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2ac6:	2200      	movs	r2, #0
    2ac8:	3331      	adds	r3, #49	; 0x31
    2aca:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2acc:	07fb      	lsls	r3, r7, #31
    2ace:	d41a      	bmi.n	2b06 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2ad0:	0773      	lsls	r3, r6, #29
    2ad2:	d565      	bpl.n	2ba0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2ad4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2ad6:	b29b      	uxth	r3, r3
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d05f      	beq.n	2b9c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2adc:	8b63      	ldrh	r3, [r4, #26]
    2ade:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2ae0:	071a      	lsls	r2, r3, #28
    2ae2:	d414      	bmi.n	2b0e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2ae4:	223f      	movs	r2, #63	; 0x3f
    2ae6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2ae8:	2b00      	cmp	r3, #0
    2aea:	d034      	beq.n	2b56 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2aec:	079a      	lsls	r2, r3, #30
    2aee:	d511      	bpl.n	2b14 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2af0:	221a      	movs	r2, #26
    2af2:	2332      	movs	r3, #50	; 0x32
    2af4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2af6:	3b30      	subs	r3, #48	; 0x30
    2af8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2afa:	077b      	lsls	r3, r7, #29
    2afc:	d550      	bpl.n	2ba0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2afe:	0028      	movs	r0, r5
    2b00:	696b      	ldr	r3, [r5, #20]
    2b02:	4798      	blx	r3
    2b04:	e04c      	b.n	2ba0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2b06:	0028      	movs	r0, r5
    2b08:	68eb      	ldr	r3, [r5, #12]
    2b0a:	4798      	blx	r3
    2b0c:	e7e0      	b.n	2ad0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2b0e:	2237      	movs	r2, #55	; 0x37
    2b10:	4013      	ands	r3, r2
    2b12:	e7e9      	b.n	2ae8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2b14:	075a      	lsls	r2, r3, #29
    2b16:	d505      	bpl.n	2b24 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2b18:	221e      	movs	r2, #30
    2b1a:	2332      	movs	r3, #50	; 0x32
    2b1c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2b1e:	3b2e      	subs	r3, #46	; 0x2e
    2b20:	8363      	strh	r3, [r4, #26]
    2b22:	e7ea      	b.n	2afa <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2b24:	07da      	lsls	r2, r3, #31
    2b26:	d505      	bpl.n	2b34 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2b28:	2213      	movs	r2, #19
    2b2a:	2332      	movs	r3, #50	; 0x32
    2b2c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2b2e:	3b31      	subs	r3, #49	; 0x31
    2b30:	8363      	strh	r3, [r4, #26]
    2b32:	e7e2      	b.n	2afa <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2b34:	06da      	lsls	r2, r3, #27
    2b36:	d505      	bpl.n	2b44 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2b38:	2242      	movs	r2, #66	; 0x42
    2b3a:	2332      	movs	r3, #50	; 0x32
    2b3c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2b3e:	3b22      	subs	r3, #34	; 0x22
    2b40:	8363      	strh	r3, [r4, #26]
    2b42:	e7da      	b.n	2afa <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2b44:	2220      	movs	r2, #32
    2b46:	421a      	tst	r2, r3
    2b48:	d0d7      	beq.n	2afa <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2b4a:	3221      	adds	r2, #33	; 0x21
    2b4c:	2332      	movs	r3, #50	; 0x32
    2b4e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2b50:	3b12      	subs	r3, #18
    2b52:	8363      	strh	r3, [r4, #26]
    2b54:	e7d1      	b.n	2afa <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2b56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2b58:	05db      	lsls	r3, r3, #23
    2b5a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2b5c:	b2da      	uxtb	r2, r3
    2b5e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2b60:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2b62:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2b64:	1c51      	adds	r1, r2, #1
    2b66:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2b68:	7969      	ldrb	r1, [r5, #5]
    2b6a:	2901      	cmp	r1, #1
    2b6c:	d010      	beq.n	2b90 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2b6e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2b70:	3b01      	subs	r3, #1
    2b72:	b29b      	uxth	r3, r3
    2b74:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2b76:	2b00      	cmp	r3, #0
    2b78:	d112      	bne.n	2ba0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2b7a:	3304      	adds	r3, #4
    2b7c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2b7e:	2200      	movs	r2, #0
    2b80:	332e      	adds	r3, #46	; 0x2e
    2b82:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2b84:	07bb      	lsls	r3, r7, #30
    2b86:	d50b      	bpl.n	2ba0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2b88:	0028      	movs	r0, r5
    2b8a:	692b      	ldr	r3, [r5, #16]
    2b8c:	4798      	blx	r3
    2b8e:	e007      	b.n	2ba0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2b90:	0a1b      	lsrs	r3, r3, #8
    2b92:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2b94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2b96:	3301      	adds	r3, #1
    2b98:	626b      	str	r3, [r5, #36]	; 0x24
    2b9a:	e7e8      	b.n	2b6e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2b9c:	2304      	movs	r3, #4
    2b9e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2ba0:	06f3      	lsls	r3, r6, #27
    2ba2:	d504      	bpl.n	2bae <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2ba4:	2310      	movs	r3, #16
    2ba6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2ba8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2baa:	06fb      	lsls	r3, r7, #27
    2bac:	d40e      	bmi.n	2bcc <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2bae:	06b3      	lsls	r3, r6, #26
    2bb0:	d504      	bpl.n	2bbc <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2bb2:	2320      	movs	r3, #32
    2bb4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2bb6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2bb8:	073b      	lsls	r3, r7, #28
    2bba:	d40b      	bmi.n	2bd4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2bbc:	0733      	lsls	r3, r6, #28
    2bbe:	d504      	bpl.n	2bca <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2bc0:	2308      	movs	r3, #8
    2bc2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2bc4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2bc6:	06bb      	lsls	r3, r7, #26
    2bc8:	d408      	bmi.n	2bdc <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2bcc:	0028      	movs	r0, r5
    2bce:	69eb      	ldr	r3, [r5, #28]
    2bd0:	4798      	blx	r3
    2bd2:	e7ec      	b.n	2bae <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2bd4:	0028      	movs	r0, r5
    2bd6:	69ab      	ldr	r3, [r5, #24]
    2bd8:	4798      	blx	r3
    2bda:	e7ef      	b.n	2bbc <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2bdc:	6a2b      	ldr	r3, [r5, #32]
    2bde:	0028      	movs	r0, r5
    2be0:	4798      	blx	r3
}
    2be2:	e7f2      	b.n	2bca <_usart_interrupt_handler+0x176>
    2be4:	200003bc 	.word	0x200003bc

00002be8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2be8:	b510      	push	{r4, lr}
	switch (clock_source) {
    2bea:	2808      	cmp	r0, #8
    2bec:	d803      	bhi.n	2bf6 <system_clock_source_get_hz+0xe>
    2bee:	0080      	lsls	r0, r0, #2
    2bf0:	4b1e      	ldr	r3, [pc, #120]	; (2c6c <system_clock_source_get_hz+0x84>)
    2bf2:	581b      	ldr	r3, [r3, r0]
    2bf4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2bf6:	2000      	movs	r0, #0
    2bf8:	e036      	b.n	2c68 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
    2bfa:	4b1d      	ldr	r3, [pc, #116]	; (2c70 <system_clock_source_get_hz+0x88>)
    2bfc:	6918      	ldr	r0, [r3, #16]
    2bfe:	e033      	b.n	2c68 <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2c00:	4b1c      	ldr	r3, [pc, #112]	; (2c74 <system_clock_source_get_hz+0x8c>)
    2c02:	6a1b      	ldr	r3, [r3, #32]
    2c04:	059b      	lsls	r3, r3, #22
    2c06:	0f9b      	lsrs	r3, r3, #30
    2c08:	481b      	ldr	r0, [pc, #108]	; (2c78 <system_clock_source_get_hz+0x90>)
    2c0a:	40d8      	lsrs	r0, r3
    2c0c:	e02c      	b.n	2c68 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
    2c0e:	4b18      	ldr	r3, [pc, #96]	; (2c70 <system_clock_source_get_hz+0x88>)
    2c10:	6958      	ldr	r0, [r3, #20]
    2c12:	e029      	b.n	2c68 <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2c14:	4b16      	ldr	r3, [pc, #88]	; (2c70 <system_clock_source_get_hz+0x88>)
    2c16:	681b      	ldr	r3, [r3, #0]
			return 0;
    2c18:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2c1a:	079b      	lsls	r3, r3, #30
    2c1c:	d524      	bpl.n	2c68 <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2c1e:	4915      	ldr	r1, [pc, #84]	; (2c74 <system_clock_source_get_hz+0x8c>)
    2c20:	2210      	movs	r2, #16
    2c22:	68cb      	ldr	r3, [r1, #12]
    2c24:	421a      	tst	r2, r3
    2c26:	d0fc      	beq.n	2c22 <system_clock_source_get_hz+0x3a>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2c28:	4b11      	ldr	r3, [pc, #68]	; (2c70 <system_clock_source_get_hz+0x88>)
    2c2a:	681b      	ldr	r3, [r3, #0]
    2c2c:	075b      	lsls	r3, r3, #29
    2c2e:	d401      	bmi.n	2c34 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2c30:	4812      	ldr	r0, [pc, #72]	; (2c7c <system_clock_source_get_hz+0x94>)
    2c32:	e019      	b.n	2c68 <system_clock_source_get_hz+0x80>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2c34:	4b0e      	ldr	r3, [pc, #56]	; (2c70 <system_clock_source_get_hz+0x88>)
    2c36:	681b      	ldr	r3, [r3, #0]
    2c38:	069b      	lsls	r3, r3, #26
    2c3a:	d501      	bpl.n	2c40 <system_clock_source_get_hz+0x58>
		return 48000000UL;
    2c3c:	480f      	ldr	r0, [pc, #60]	; (2c7c <system_clock_source_get_hz+0x94>)
    2c3e:	e013      	b.n	2c68 <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2c40:	2000      	movs	r0, #0
    2c42:	4b0f      	ldr	r3, [pc, #60]	; (2c80 <system_clock_source_get_hz+0x98>)
    2c44:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2c46:	4b0a      	ldr	r3, [pc, #40]	; (2c70 <system_clock_source_get_hz+0x88>)
    2c48:	689b      	ldr	r3, [r3, #8]
    2c4a:	041b      	lsls	r3, r3, #16
    2c4c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2c4e:	4358      	muls	r0, r3
    2c50:	e00a      	b.n	2c68 <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2c52:	2350      	movs	r3, #80	; 0x50
    2c54:	4a07      	ldr	r2, [pc, #28]	; (2c74 <system_clock_source_get_hz+0x8c>)
    2c56:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2c58:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2c5a:	075b      	lsls	r3, r3, #29
    2c5c:	d504      	bpl.n	2c68 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
    2c5e:	4b04      	ldr	r3, [pc, #16]	; (2c70 <system_clock_source_get_hz+0x88>)
    2c60:	68d8      	ldr	r0, [r3, #12]
    2c62:	e001      	b.n	2c68 <system_clock_source_get_hz+0x80>
		return 32768UL;
    2c64:	2080      	movs	r0, #128	; 0x80
    2c66:	0200      	lsls	r0, r0, #8
	}
}
    2c68:	bd10      	pop	{r4, pc}
    2c6a:	46c0      	nop			; (mov r8, r8)
    2c6c:	0000a8b8 	.word	0x0000a8b8
    2c70:	20000244 	.word	0x20000244
    2c74:	40000800 	.word	0x40000800
    2c78:	007a1200 	.word	0x007a1200
    2c7c:	02dc6c00 	.word	0x02dc6c00
    2c80:	00008e05 	.word	0x00008e05

00002c84 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2c84:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2c86:	490c      	ldr	r1, [pc, #48]	; (2cb8 <system_clock_source_osc8m_set_config+0x34>)
    2c88:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2c8a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2c8c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2c8e:	7840      	ldrb	r0, [r0, #1]
    2c90:	2201      	movs	r2, #1
    2c92:	4010      	ands	r0, r2
    2c94:	0180      	lsls	r0, r0, #6
    2c96:	2640      	movs	r6, #64	; 0x40
    2c98:	43b3      	bics	r3, r6
    2c9a:	4303      	orrs	r3, r0
    2c9c:	402a      	ands	r2, r5
    2c9e:	01d2      	lsls	r2, r2, #7
    2ca0:	2080      	movs	r0, #128	; 0x80
    2ca2:	4383      	bics	r3, r0
    2ca4:	4313      	orrs	r3, r2
    2ca6:	2203      	movs	r2, #3
    2ca8:	4022      	ands	r2, r4
    2caa:	0212      	lsls	r2, r2, #8
    2cac:	4803      	ldr	r0, [pc, #12]	; (2cbc <system_clock_source_osc8m_set_config+0x38>)
    2cae:	4003      	ands	r3, r0
    2cb0:	4313      	orrs	r3, r2
    2cb2:	620b      	str	r3, [r1, #32]
}
    2cb4:	bd70      	pop	{r4, r5, r6, pc}
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	40000800 	.word	0x40000800
    2cbc:	fffffcff 	.word	0xfffffcff

00002cc0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cc2:	46de      	mov	lr, fp
    2cc4:	4657      	mov	r7, sl
    2cc6:	464e      	mov	r6, r9
    2cc8:	4645      	mov	r5, r8
    2cca:	b5e0      	push	{r5, r6, r7, lr}
    2ccc:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2cce:	4b26      	ldr	r3, [pc, #152]	; (2d68 <system_clock_source_xosc32k_set_config+0xa8>)
    2cd0:	469b      	mov	fp, r3
    2cd2:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2cd4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2cd6:	7800      	ldrb	r0, [r0, #0]
    2cd8:	4242      	negs	r2, r0
    2cda:	4142      	adcs	r2, r0
    2cdc:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2cde:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2ce0:	78ca      	ldrb	r2, [r1, #3]
    2ce2:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2ce4:	790a      	ldrb	r2, [r1, #4]
    2ce6:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2ce8:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2cea:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2cec:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2cee:	688a      	ldr	r2, [r1, #8]
    2cf0:	491e      	ldr	r1, [pc, #120]	; (2d6c <system_clock_source_xosc32k_set_config+0xac>)
    2cf2:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2cf4:	2101      	movs	r1, #1
    2cf6:	464a      	mov	r2, r9
    2cf8:	0092      	lsls	r2, r2, #2
    2cfa:	4691      	mov	r9, r2
    2cfc:	2204      	movs	r2, #4
    2cfe:	4393      	bics	r3, r2
    2d00:	464a      	mov	r2, r9
    2d02:	4313      	orrs	r3, r2
    2d04:	4642      	mov	r2, r8
    2d06:	400a      	ands	r2, r1
    2d08:	00d2      	lsls	r2, r2, #3
    2d0a:	4690      	mov	r8, r2
    2d0c:	2208      	movs	r2, #8
    2d0e:	4393      	bics	r3, r2
    2d10:	4642      	mov	r2, r8
    2d12:	4313      	orrs	r3, r2
    2d14:	4662      	mov	r2, ip
    2d16:	400a      	ands	r2, r1
    2d18:	0112      	lsls	r2, r2, #4
    2d1a:	4694      	mov	ip, r2
    2d1c:	2210      	movs	r2, #16
    2d1e:	4393      	bics	r3, r2
    2d20:	4662      	mov	r2, ip
    2d22:	4313      	orrs	r3, r2
    2d24:	4008      	ands	r0, r1
    2d26:	0140      	lsls	r0, r0, #5
    2d28:	2220      	movs	r2, #32
    2d2a:	4393      	bics	r3, r2
    2d2c:	4303      	orrs	r3, r0
    2d2e:	400f      	ands	r7, r1
    2d30:	01bf      	lsls	r7, r7, #6
    2d32:	2040      	movs	r0, #64	; 0x40
    2d34:	4383      	bics	r3, r0
    2d36:	433b      	orrs	r3, r7
    2d38:	400e      	ands	r6, r1
    2d3a:	01f6      	lsls	r6, r6, #7
    2d3c:	3040      	adds	r0, #64	; 0x40
    2d3e:	4383      	bics	r3, r0
    2d40:	4333      	orrs	r3, r6
    2d42:	3879      	subs	r0, #121	; 0x79
    2d44:	4005      	ands	r5, r0
    2d46:	022d      	lsls	r5, r5, #8
    2d48:	4809      	ldr	r0, [pc, #36]	; (2d70 <system_clock_source_xosc32k_set_config+0xb0>)
    2d4a:	4003      	ands	r3, r0
    2d4c:	432b      	orrs	r3, r5
    2d4e:	4021      	ands	r1, r4
    2d50:	0309      	lsls	r1, r1, #12
    2d52:	4808      	ldr	r0, [pc, #32]	; (2d74 <system_clock_source_xosc32k_set_config+0xb4>)
    2d54:	4003      	ands	r3, r0
    2d56:	430b      	orrs	r3, r1
    2d58:	465a      	mov	r2, fp
    2d5a:	8293      	strh	r3, [r2, #20]
}
    2d5c:	bc3c      	pop	{r2, r3, r4, r5}
    2d5e:	4690      	mov	r8, r2
    2d60:	4699      	mov	r9, r3
    2d62:	46a2      	mov	sl, r4
    2d64:	46ab      	mov	fp, r5
    2d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d68:	40000800 	.word	0x40000800
    2d6c:	20000244 	.word	0x20000244
    2d70:	fffff8ff 	.word	0xfffff8ff
    2d74:	ffffefff 	.word	0xffffefff

00002d78 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2d78:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2d7a:	7a03      	ldrb	r3, [r0, #8]
    2d7c:	069b      	lsls	r3, r3, #26
    2d7e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2d80:	8942      	ldrh	r2, [r0, #10]
    2d82:	0592      	lsls	r2, r2, #22
    2d84:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2d86:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2d88:	4918      	ldr	r1, [pc, #96]	; (2dec <system_clock_source_dfll_set_config+0x74>)
    2d8a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2d8c:	7983      	ldrb	r3, [r0, #6]
    2d8e:	79c2      	ldrb	r2, [r0, #7]
    2d90:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2d92:	8842      	ldrh	r2, [r0, #2]
    2d94:	8884      	ldrh	r4, [r0, #4]
    2d96:	4322      	orrs	r2, r4
    2d98:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2d9a:	7842      	ldrb	r2, [r0, #1]
    2d9c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2d9e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2da0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2da2:	7803      	ldrb	r3, [r0, #0]
    2da4:	2b04      	cmp	r3, #4
    2da6:	d011      	beq.n	2dcc <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2da8:	2b20      	cmp	r3, #32
    2daa:	d10e      	bne.n	2dca <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2dac:	7b03      	ldrb	r3, [r0, #12]
    2dae:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2db0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2db2:	4313      	orrs	r3, r2
    2db4:	89c2      	ldrh	r2, [r0, #14]
    2db6:	0412      	lsls	r2, r2, #16
    2db8:	490d      	ldr	r1, [pc, #52]	; (2df0 <system_clock_source_dfll_set_config+0x78>)
    2dba:	400a      	ands	r2, r1
    2dbc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2dbe:	4a0b      	ldr	r2, [pc, #44]	; (2dec <system_clock_source_dfll_set_config+0x74>)
    2dc0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2dc2:	6811      	ldr	r1, [r2, #0]
    2dc4:	4b0b      	ldr	r3, [pc, #44]	; (2df4 <system_clock_source_dfll_set_config+0x7c>)
    2dc6:	430b      	orrs	r3, r1
    2dc8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2dca:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2dcc:	7b03      	ldrb	r3, [r0, #12]
    2dce:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2dd0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2dd2:	4313      	orrs	r3, r2
    2dd4:	89c2      	ldrh	r2, [r0, #14]
    2dd6:	0412      	lsls	r2, r2, #16
    2dd8:	4905      	ldr	r1, [pc, #20]	; (2df0 <system_clock_source_dfll_set_config+0x78>)
    2dda:	400a      	ands	r2, r1
    2ddc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2dde:	4a03      	ldr	r2, [pc, #12]	; (2dec <system_clock_source_dfll_set_config+0x74>)
    2de0:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2de2:	6813      	ldr	r3, [r2, #0]
    2de4:	2104      	movs	r1, #4
    2de6:	430b      	orrs	r3, r1
    2de8:	6013      	str	r3, [r2, #0]
    2dea:	e7ee      	b.n	2dca <system_clock_source_dfll_set_config+0x52>
    2dec:	20000244 	.word	0x20000244
    2df0:	03ff0000 	.word	0x03ff0000
    2df4:	00000424 	.word	0x00000424

00002df8 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    2df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dfa:	0005      	movs	r5, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    2dfc:	68c4      	ldr	r4, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    2dfe:	7d03      	ldrb	r3, [r0, #20]
    2e00:	2b01      	cmp	r3, #1
    2e02:	d03b      	beq.n	2e7c <system_clock_source_dpll_set_config+0x84>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    2e04:	68ab      	ldr	r3, [r5, #8]
    2e06:	0118      	lsls	r0, r3, #4
    2e08:	0021      	movs	r1, r4
    2e0a:	4b20      	ldr	r3, [pc, #128]	; (2e8c <system_clock_source_dpll_set_config+0x94>)
    2e0c:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    2e0e:	220f      	movs	r2, #15
    2e10:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    2e12:	0903      	lsrs	r3, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    2e14:	782e      	ldrb	r6, [r5, #0]
    2e16:	01f6      	lsls	r6, r6, #7
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    2e18:	7869      	ldrb	r1, [r5, #1]
    2e1a:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    2e1c:	430e      	orrs	r6, r1
    2e1e:	b2f6      	uxtb	r6, r6
	SYSCTRL->DPLLCTRLA.reg =
    2e20:	491b      	ldr	r1, [pc, #108]	; (2e90 <system_clock_source_dpll_set_config+0x98>)
    2e22:	2744      	movs	r7, #68	; 0x44
    2e24:	55ce      	strb	r6, [r1, r7]

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    2e26:	0416      	lsls	r6, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    2e28:	3b01      	subs	r3, #1
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    2e2a:	051b      	lsls	r3, r3, #20
    2e2c:	0d1b      	lsrs	r3, r3, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    2e2e:	4333      	orrs	r3, r6
	SYSCTRL->DPLLRATIO.reg =
    2e30:	648b      	str	r3, [r1, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    2e32:	78ab      	ldrb	r3, [r5, #2]
    2e34:	031b      	lsls	r3, r3, #12
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    2e36:	78ee      	ldrb	r6, [r5, #3]
    2e38:	00f6      	lsls	r6, r6, #3
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    2e3a:	4333      	orrs	r3, r6
    2e3c:	792e      	ldrb	r6, [r5, #4]
    2e3e:	00b6      	lsls	r6, r6, #2
    2e40:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    2e42:	7caf      	ldrb	r7, [r5, #18]
    2e44:	2603      	movs	r6, #3
    2e46:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    2e48:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    2e4a:	8a2e      	ldrh	r6, [r5, #16]
    2e4c:	0436      	lsls	r6, r6, #16
    2e4e:	4f11      	ldr	r7, [pc, #68]	; (2e94 <system_clock_source_dpll_set_config+0x9c>)
    2e50:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    2e52:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    2e54:	7cee      	ldrb	r6, [r5, #19]
    2e56:	0236      	lsls	r6, r6, #8
    2e58:	27e0      	movs	r7, #224	; 0xe0
    2e5a:	00ff      	lsls	r7, r7, #3
    2e5c:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    2e5e:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    2e60:	7d2e      	ldrb	r6, [r5, #20]
    2e62:	0136      	lsls	r6, r6, #4
    2e64:	2530      	movs	r5, #48	; 0x30
    2e66:	4035      	ands	r5, r6
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    2e68:	432b      	orrs	r3, r5
	SYSCTRL->DPLLCTRLB.reg =
    2e6a:	64cb      	str	r3, [r1, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    2e6c:	230f      	movs	r3, #15
    2e6e:	4398      	bics	r0, r3
    2e70:	1880      	adds	r0, r0, r2
    2e72:	4344      	muls	r4, r0
    2e74:	0924      	lsrs	r4, r4, #4
	_system_clock_inst.dpll.frequency =
    2e76:	4b08      	ldr	r3, [pc, #32]	; (2e98 <system_clock_source_dpll_set_config+0xa0>)
    2e78:	60dc      	str	r4, [r3, #12]
}
    2e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    2e7c:	8a01      	ldrh	r1, [r0, #16]
    2e7e:	3101      	adds	r1, #1
    2e80:	0049      	lsls	r1, r1, #1
    2e82:	0020      	movs	r0, r4
    2e84:	4b01      	ldr	r3, [pc, #4]	; (2e8c <system_clock_source_dpll_set_config+0x94>)
    2e86:	4798      	blx	r3
    2e88:	0004      	movs	r4, r0
    2e8a:	e7bb      	b.n	2e04 <system_clock_source_dpll_set_config+0xc>
    2e8c:	00009065 	.word	0x00009065
    2e90:	40000800 	.word	0x40000800
    2e94:	07ff0000 	.word	0x07ff0000
    2e98:	20000244 	.word	0x20000244

00002e9c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2e9c:	2808      	cmp	r0, #8
    2e9e:	d803      	bhi.n	2ea8 <system_clock_source_enable+0xc>
    2ea0:	0080      	lsls	r0, r0, #2
    2ea2:	4b25      	ldr	r3, [pc, #148]	; (2f38 <system_clock_source_enable+0x9c>)
    2ea4:	581b      	ldr	r3, [r3, r0]
    2ea6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2ea8:	2017      	movs	r0, #23
    2eaa:	e044      	b.n	2f36 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2eac:	4a23      	ldr	r2, [pc, #140]	; (2f3c <system_clock_source_enable+0xa0>)
    2eae:	6a13      	ldr	r3, [r2, #32]
    2eb0:	2102      	movs	r1, #2
    2eb2:	430b      	orrs	r3, r1
    2eb4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2eb6:	2000      	movs	r0, #0
    2eb8:	e03d      	b.n	2f36 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2eba:	4a20      	ldr	r2, [pc, #128]	; (2f3c <system_clock_source_enable+0xa0>)
    2ebc:	6993      	ldr	r3, [r2, #24]
    2ebe:	2102      	movs	r1, #2
    2ec0:	430b      	orrs	r3, r1
    2ec2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2ec4:	2000      	movs	r0, #0
		break;
    2ec6:	e036      	b.n	2f36 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2ec8:	4a1c      	ldr	r2, [pc, #112]	; (2f3c <system_clock_source_enable+0xa0>)
    2eca:	8a13      	ldrh	r3, [r2, #16]
    2ecc:	2102      	movs	r1, #2
    2ece:	430b      	orrs	r3, r1
    2ed0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2ed2:	2000      	movs	r0, #0
		break;
    2ed4:	e02f      	b.n	2f36 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2ed6:	4a19      	ldr	r2, [pc, #100]	; (2f3c <system_clock_source_enable+0xa0>)
    2ed8:	8a93      	ldrh	r3, [r2, #20]
    2eda:	2102      	movs	r1, #2
    2edc:	430b      	orrs	r3, r1
    2ede:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2ee0:	2000      	movs	r0, #0
		break;
    2ee2:	e028      	b.n	2f36 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2ee4:	4916      	ldr	r1, [pc, #88]	; (2f40 <system_clock_source_enable+0xa4>)
    2ee6:	680b      	ldr	r3, [r1, #0]
    2ee8:	2202      	movs	r2, #2
    2eea:	4313      	orrs	r3, r2
    2eec:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2eee:	4b13      	ldr	r3, [pc, #76]	; (2f3c <system_clock_source_enable+0xa0>)
    2ef0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2ef2:	0019      	movs	r1, r3
    2ef4:	320e      	adds	r2, #14
    2ef6:	68cb      	ldr	r3, [r1, #12]
    2ef8:	421a      	tst	r2, r3
    2efa:	d0fc      	beq.n	2ef6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2efc:	4a10      	ldr	r2, [pc, #64]	; (2f40 <system_clock_source_enable+0xa4>)
    2efe:	6891      	ldr	r1, [r2, #8]
    2f00:	4b0e      	ldr	r3, [pc, #56]	; (2f3c <system_clock_source_enable+0xa0>)
    2f02:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2f04:	6852      	ldr	r2, [r2, #4]
    2f06:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2f08:	2200      	movs	r2, #0
    2f0a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f0c:	0019      	movs	r1, r3
    2f0e:	3210      	adds	r2, #16
    2f10:	68cb      	ldr	r3, [r1, #12]
    2f12:	421a      	tst	r2, r3
    2f14:	d0fc      	beq.n	2f10 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2f16:	4b0a      	ldr	r3, [pc, #40]	; (2f40 <system_clock_source_enable+0xa4>)
    2f18:	681b      	ldr	r3, [r3, #0]
    2f1a:	b29b      	uxth	r3, r3
    2f1c:	4a07      	ldr	r2, [pc, #28]	; (2f3c <system_clock_source_enable+0xa0>)
    2f1e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2f20:	2000      	movs	r0, #0
    2f22:	e008      	b.n	2f36 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2f24:	4905      	ldr	r1, [pc, #20]	; (2f3c <system_clock_source_enable+0xa0>)
    2f26:	2244      	movs	r2, #68	; 0x44
    2f28:	5c8b      	ldrb	r3, [r1, r2]
    2f2a:	2002      	movs	r0, #2
    2f2c:	4303      	orrs	r3, r0
    2f2e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2f30:	2000      	movs	r0, #0
		break;
    2f32:	e000      	b.n	2f36 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2f34:	2000      	movs	r0, #0
}
    2f36:	4770      	bx	lr
    2f38:	0000a8dc 	.word	0x0000a8dc
    2f3c:	40000800 	.word	0x40000800
    2f40:	20000244 	.word	0x20000244

00002f44 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f46:	46ce      	mov	lr, r9
    2f48:	4647      	mov	r7, r8
    2f4a:	b580      	push	{r7, lr}
    2f4c:	b095      	sub	sp, #84	; 0x54
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2f4e:	22c2      	movs	r2, #194	; 0xc2
    2f50:	00d2      	lsls	r2, r2, #3
    2f52:	4b66      	ldr	r3, [pc, #408]	; (30ec <system_clock_init+0x1a8>)
    2f54:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2f56:	4a66      	ldr	r2, [pc, #408]	; (30f0 <system_clock_init+0x1ac>)
    2f58:	6853      	ldr	r3, [r2, #4]
    2f5a:	211e      	movs	r1, #30
    2f5c:	438b      	bics	r3, r1
    2f5e:	391a      	subs	r1, #26
    2f60:	430b      	orrs	r3, r1
    2f62:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2f64:	2202      	movs	r2, #2
    2f66:	ab01      	add	r3, sp, #4
    2f68:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2f6a:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2f6c:	4d61      	ldr	r5, [pc, #388]	; (30f4 <system_clock_init+0x1b0>)
    2f6e:	b2e0      	uxtb	r0, r4
    2f70:	a901      	add	r1, sp, #4
    2f72:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2f74:	3401      	adds	r4, #1
    2f76:	2c25      	cmp	r4, #37	; 0x25
    2f78:	d1f9      	bne.n	2f6e <system_clock_init+0x2a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2f7a:	a810      	add	r0, sp, #64	; 0x40
    2f7c:	2300      	movs	r3, #0
    2f7e:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    2f80:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2f82:	2280      	movs	r2, #128	; 0x80
    2f84:	0212      	lsls	r2, r2, #8
    2f86:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2f88:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2f8a:	2201      	movs	r2, #1
    2f8c:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    2f8e:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    2f90:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2f92:	3205      	adds	r2, #5
    2f94:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2f96:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2f98:	4b57      	ldr	r3, [pc, #348]	; (30f8 <system_clock_init+0x1b4>)
    2f9a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2f9c:	2005      	movs	r0, #5
    2f9e:	4b57      	ldr	r3, [pc, #348]	; (30fc <system_clock_init+0x1b8>)
    2fa0:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2fa2:	4952      	ldr	r1, [pc, #328]	; (30ec <system_clock_init+0x1a8>)
    2fa4:	2202      	movs	r2, #2
    2fa6:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2fa8:	421a      	tst	r2, r3
    2faa:	d0fc      	beq.n	2fa6 <system_clock_init+0x62>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    2fac:	4a4f      	ldr	r2, [pc, #316]	; (30ec <system_clock_init+0x1a8>)
    2fae:	8a93      	ldrh	r3, [r2, #20]
    2fb0:	2180      	movs	r1, #128	; 0x80
    2fb2:	430b      	orrs	r3, r1
    2fb4:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2fb6:	ab0b      	add	r3, sp, #44	; 0x2c
    2fb8:	2200      	movs	r2, #0
    2fba:	2100      	movs	r1, #0
    2fbc:	8059      	strh	r1, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2fbe:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2fc0:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2fc2:	3120      	adds	r1, #32
    2fc4:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2fc6:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2fc8:	4b4d      	ldr	r3, [pc, #308]	; (3100 <system_clock_init+0x1bc>)
    2fca:	681b      	ldr	r3, [r3, #0]
    2fcc:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2fce:	2b3f      	cmp	r3, #63	; 0x3f
    2fd0:	d100      	bne.n	2fd4 <system_clock_init+0x90>
    2fd2:	e088      	b.n	30e6 <system_clock_init+0x1a2>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2fd4:	a80b      	add	r0, sp, #44	; 0x2c
    2fd6:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2fd8:	2307      	movs	r3, #7
    2fda:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    2fdc:	3303      	adds	r3, #3
    2fde:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    2fe0:	4b48      	ldr	r3, [pc, #288]	; (3104 <system_clock_init+0x1c0>)
    2fe2:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    2fe4:	3bff      	subs	r3, #255	; 0xff
    2fe6:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    2fe8:	4b47      	ldr	r3, [pc, #284]	; (3108 <system_clock_init+0x1c4>)
    2fea:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2fec:	4b47      	ldr	r3, [pc, #284]	; (310c <system_clock_init+0x1c8>)
    2fee:	4798      	blx	r3
	config->run_in_standby  = false;
    2ff0:	a80a      	add	r0, sp, #40	; 0x28
    2ff2:	2500      	movs	r5, #0
    2ff4:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    2ff6:	2601      	movs	r6, #1
    2ff8:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2ffa:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2ffc:	4b44      	ldr	r3, [pc, #272]	; (3110 <system_clock_init+0x1cc>)
    2ffe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3000:	2006      	movs	r0, #6
    3002:	4b3e      	ldr	r3, [pc, #248]	; (30fc <system_clock_init+0x1b8>)
    3004:	4699      	mov	r9, r3
    3006:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3008:	4b42      	ldr	r3, [pc, #264]	; (3114 <system_clock_init+0x1d0>)
    300a:	4798      	blx	r3
	config->division_factor    = 1;
    300c:	ac01      	add	r4, sp, #4
    300e:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3010:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    3012:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3014:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3016:	2305      	movs	r3, #5
    3018:	7023      	strb	r3, [r4, #0]
    301a:	0021      	movs	r1, r4
    301c:	2001      	movs	r0, #1
    301e:	4b3e      	ldr	r3, [pc, #248]	; (3118 <system_clock_init+0x1d4>)
    3020:	4698      	mov	r8, r3
    3022:	4798      	blx	r3
    3024:	2001      	movs	r0, #1
    3026:	4f3d      	ldr	r7, [pc, #244]	; (311c <system_clock_init+0x1d8>)
    3028:	47b8      	blx	r7
	config->division_factor    = 1;
    302a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    302c:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    302e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3030:	7265      	strb	r5, [r4, #9]
    3032:	2308      	movs	r3, #8
    3034:	7023      	strb	r3, [r4, #0]
    3036:	0021      	movs	r1, r4
    3038:	2003      	movs	r0, #3
    303a:	47c0      	blx	r8
    303c:	2003      	movs	r0, #3
    303e:	47b8      	blx	r7
	config->division_factor    = 1;
    3040:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3042:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    3044:	7265      	strb	r5, [r4, #9]
    3046:	2304      	movs	r3, #4
    3048:	7023      	strb	r3, [r4, #0]
    304a:	7226      	strb	r6, [r4, #8]
    304c:	0021      	movs	r1, r4
    304e:	2007      	movs	r0, #7
    3050:	47c0      	blx	r8
    3052:	2007      	movs	r0, #7
    3054:	47b8      	blx	r7
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    3056:	2007      	movs	r0, #7
    3058:	47c8      	blx	r9
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    305a:	4924      	ldr	r1, [pc, #144]	; (30ec <system_clock_init+0x1a8>)
    305c:	2210      	movs	r2, #16
    305e:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    3060:	421a      	tst	r2, r3
    3062:	d0fc      	beq.n	305e <system_clock_init+0x11a>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    3064:	4a21      	ldr	r2, [pc, #132]	; (30ec <system_clock_init+0x1a8>)
    3066:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    3068:	2180      	movs	r1, #128	; 0x80
    306a:	430b      	orrs	r3, r1
    306c:	8493      	strh	r3, [r2, #36]	; 0x24
	config->run_in_standby      = false;
    306e:	a804      	add	r0, sp, #16
    3070:	2300      	movs	r3, #0
    3072:	7043      	strb	r3, [r0, #1]
	config->lock_bypass         = false;
    3074:	7083      	strb	r3, [r0, #2]
	config->wake_up_fast        = false;
    3076:	70c3      	strb	r3, [r0, #3]
	config->low_power_enable    = false;
    3078:	7103      	strb	r3, [r0, #4]
	config->output_frequency    = 48000000;
    307a:	4a29      	ldr	r2, [pc, #164]	; (3120 <system_clock_init+0x1dc>)
    307c:	6082      	str	r2, [r0, #8]
	config->reference_frequency = 32768;
    307e:	2280      	movs	r2, #128	; 0x80
    3080:	0212      	lsls	r2, r2, #8
    3082:	60c2      	str	r2, [r0, #12]
	config->reference_divider   = 1;
    3084:	2201      	movs	r2, #1
    3086:	8202      	strh	r2, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
    3088:	7503      	strb	r3, [r0, #20]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    308a:	74c3      	strb	r3, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    308c:	7483      	strb	r3, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    308e:	7003      	strb	r3, [r0, #0]
	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    3090:	4b24      	ldr	r3, [pc, #144]	; (3124 <system_clock_init+0x1e0>)
    3092:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    3094:	2008      	movs	r0, #8
    3096:	4b19      	ldr	r3, [pc, #100]	; (30fc <system_clock_init+0x1b8>)
    3098:	4798      	blx	r3
		return ((SYSCTRL->DPLLSTATUS.reg &
    309a:	4814      	ldr	r0, [pc, #80]	; (30ec <system_clock_init+0x1a8>)
    309c:	2150      	movs	r1, #80	; 0x50
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    309e:	2203      	movs	r2, #3
		return ((SYSCTRL->DPLLSTATUS.reg &
    30a0:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    30a2:	4013      	ands	r3, r2
    30a4:	2b03      	cmp	r3, #3
    30a6:	d1fb      	bne.n	30a0 <system_clock_init+0x15c>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    30a8:	4910      	ldr	r1, [pc, #64]	; (30ec <system_clock_init+0x1a8>)
    30aa:	2244      	movs	r2, #68	; 0x44
    30ac:	5c88      	ldrb	r0, [r1, r2]
    30ae:	3b83      	subs	r3, #131	; 0x83
    30b0:	4303      	orrs	r3, r0
    30b2:	548b      	strb	r3, [r1, r2]
	PM->CPUSEL.reg = (uint32_t)divider;
    30b4:	4a1c      	ldr	r2, [pc, #112]	; (3128 <system_clock_init+0x1e4>)
    30b6:	2300      	movs	r3, #0
    30b8:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    30ba:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    30bc:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    30be:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    30c0:	a901      	add	r1, sp, #4
    30c2:	2201      	movs	r2, #1
    30c4:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    30c6:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    30c8:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    30ca:	3307      	adds	r3, #7
    30cc:	700b      	strb	r3, [r1, #0]
    30ce:	720a      	strb	r2, [r1, #8]
    30d0:	2000      	movs	r0, #0
    30d2:	4b11      	ldr	r3, [pc, #68]	; (3118 <system_clock_init+0x1d4>)
    30d4:	4798      	blx	r3
    30d6:	2000      	movs	r0, #0
    30d8:	4b10      	ldr	r3, [pc, #64]	; (311c <system_clock_init+0x1d8>)
    30da:	4798      	blx	r3
#endif
}
    30dc:	b015      	add	sp, #84	; 0x54
    30de:	bc0c      	pop	{r2, r3}
    30e0:	4690      	mov	r8, r2
    30e2:	4699      	mov	r9, r3
    30e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    30e6:	3b20      	subs	r3, #32
    30e8:	e774      	b.n	2fd4 <system_clock_init+0x90>
    30ea:	46c0      	nop			; (mov r8, r8)
    30ec:	40000800 	.word	0x40000800
    30f0:	41004000 	.word	0x41004000
    30f4:	00008de9 	.word	0x00008de9
    30f8:	00002cc1 	.word	0x00002cc1
    30fc:	00002e9d 	.word	0x00002e9d
    3100:	00806024 	.word	0x00806024
    3104:	000001ff 	.word	0x000001ff
    3108:	ffffbb80 	.word	0xffffbb80
    310c:	00002d79 	.word	0x00002d79
    3110:	00002c85 	.word	0x00002c85
    3114:	00008bb1 	.word	0x00008bb1
    3118:	00008bd5 	.word	0x00008bd5
    311c:	00008c8d 	.word	0x00008c8d
    3120:	02dc6c00 	.word	0x02dc6c00
    3124:	00002df9 	.word	0x00002df9
    3128:	40000400 	.word	0x40000400

0000312c <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    312c:	b510      	push	{r4, lr}
    312e:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    3130:	ab03      	add	r3, sp, #12
    3132:	2200      	movs	r2, #0
    3134:	701a      	strb	r2, [r3, #0]
    3136:	3203      	adds	r2, #3
    3138:	705a      	strb	r2, [r3, #1]
    313a:	3a01      	subs	r2, #1
    313c:	709a      	strb	r2, [r3, #2]
    313e:	3a01      	subs	r2, #1
    3140:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    3142:	4b27      	ldr	r3, [pc, #156]	; (31e0 <udd_sleep_mode+0xb4>)
    3144:	781b      	ldrb	r3, [r3, #0]
    3146:	4283      	cmp	r3, r0
    3148:	d007      	beq.n	315a <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    314a:	2800      	cmp	r0, #0
    314c:	d107      	bne.n	315e <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    314e:	4b24      	ldr	r3, [pc, #144]	; (31e0 <udd_sleep_mode+0xb4>)
    3150:	781b      	ldrb	r3, [r3, #0]
    3152:	2b00      	cmp	r3, #0
    3154:	d123      	bne.n	319e <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    3156:	4b22      	ldr	r3, [pc, #136]	; (31e0 <udd_sleep_mode+0xb4>)
    3158:	7018      	strb	r0, [r3, #0]
}
    315a:	b004      	add	sp, #16
    315c:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    315e:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    3160:	5c1b      	ldrb	r3, [r3, r0]
    3162:	4a20      	ldr	r2, [pc, #128]	; (31e4 <udd_sleep_mode+0xb8>)
    3164:	5cd2      	ldrb	r2, [r2, r3]
    3166:	2aff      	cmp	r2, #255	; 0xff
    3168:	d100      	bne.n	316c <udd_sleep_mode+0x40>
    316a:	e7fe      	b.n	316a <udd_sleep_mode+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    316c:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3170:	4251      	negs	r1, r2
    3172:	414a      	adcs	r2, r1
    3174:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3176:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3178:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    317c:	2100      	movs	r1, #0
    317e:	4a1a      	ldr	r2, [pc, #104]	; (31e8 <udd_sleep_mode+0xbc>)
    3180:	7011      	strb	r1, [r2, #0]
	return flags;
    3182:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    3184:	4917      	ldr	r1, [pc, #92]	; (31e4 <udd_sleep_mode+0xb8>)
    3186:	5cca      	ldrb	r2, [r1, r3]
    3188:	3201      	adds	r2, #1
    318a:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    318c:	2c00      	cmp	r4, #0
    318e:	d0de      	beq.n	314e <udd_sleep_mode+0x22>
		cpu_irq_enable();
    3190:	2201      	movs	r2, #1
    3192:	4b15      	ldr	r3, [pc, #84]	; (31e8 <udd_sleep_mode+0xbc>)
    3194:	701a      	strb	r2, [r3, #0]
    3196:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    319a:	b662      	cpsie	i
    319c:	e7d7      	b.n	314e <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    319e:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    31a0:	5cd3      	ldrb	r3, [r2, r3]
    31a2:	4a10      	ldr	r2, [pc, #64]	; (31e4 <udd_sleep_mode+0xb8>)
    31a4:	5cd2      	ldrb	r2, [r2, r3]
    31a6:	2a00      	cmp	r2, #0
    31a8:	d100      	bne.n	31ac <udd_sleep_mode+0x80>
    31aa:	e7fe      	b.n	31aa <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    31ac:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    31b0:	4251      	negs	r1, r2
    31b2:	414a      	adcs	r2, r1
    31b4:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    31b6:	b672      	cpsid	i
    31b8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    31bc:	2100      	movs	r1, #0
    31be:	4a0a      	ldr	r2, [pc, #40]	; (31e8 <udd_sleep_mode+0xbc>)
    31c0:	7011      	strb	r1, [r2, #0]
	return flags;
    31c2:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    31c4:	4907      	ldr	r1, [pc, #28]	; (31e4 <udd_sleep_mode+0xb8>)
    31c6:	5cca      	ldrb	r2, [r1, r3]
    31c8:	3a01      	subs	r2, #1
    31ca:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    31cc:	2c00      	cmp	r4, #0
    31ce:	d0c2      	beq.n	3156 <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    31d0:	2201      	movs	r2, #1
    31d2:	4b05      	ldr	r3, [pc, #20]	; (31e8 <udd_sleep_mode+0xbc>)
    31d4:	701a      	strb	r2, [r3, #0]
    31d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    31da:	b662      	cpsie	i
    31dc:	e7bb      	b.n	3156 <udd_sleep_mode+0x2a>
    31de:	46c0      	nop			; (mov r8, r8)
    31e0:	200002b4 	.word	0x200002b4
    31e4:	20001a3c 	.word	0x20001a3c
    31e8:	20000125 	.word	0x20000125

000031ec <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    31ec:	0643      	lsls	r3, r0, #25
    31ee:	d00b      	beq.n	3208 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    31f0:	230f      	movs	r3, #15
    31f2:	4003      	ands	r3, r0
    31f4:	005b      	lsls	r3, r3, #1
    31f6:	09c0      	lsrs	r0, r0, #7
    31f8:	1818      	adds	r0, r3, r0
    31fa:	3802      	subs	r0, #2
    31fc:	0083      	lsls	r3, r0, #2
    31fe:	1818      	adds	r0, r3, r0
    3200:	0080      	lsls	r0, r0, #2
    3202:	4b02      	ldr	r3, [pc, #8]	; (320c <udd_ep_get_job+0x20>)
    3204:	1818      	adds	r0, r3, r0
	}
}
    3206:	4770      	bx	lr
		return NULL;
    3208:	2000      	movs	r0, #0
    320a:	e7fc      	b.n	3206 <udd_ep_get_job+0x1a>
    320c:	20000264 	.word	0x20000264

00003210 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    3210:	b5f0      	push	{r4, r5, r6, r7, lr}
    3212:	46d6      	mov	lr, sl
    3214:	464f      	mov	r7, r9
    3216:	4646      	mov	r6, r8
    3218:	b5c0      	push	{r6, r7, lr}
    321a:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    321c:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    321e:	b26b      	sxtb	r3, r5
    3220:	2b00      	cmp	r3, #0
    3222:	db26      	blt.n	3272 <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    3224:	0028      	movs	r0, r5
    3226:	4b5e      	ldr	r3, [pc, #376]	; (33a0 <udd_ep_transfer_process+0x190>)
    3228:	4798      	blx	r3
    322a:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    322c:	270f      	movs	r7, #15
    322e:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    3230:	8a03      	ldrh	r3, [r0, #16]
    3232:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    3234:	464b      	mov	r3, r9
    3236:	881b      	ldrh	r3, [r3, #0]
    3238:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    323a:	7c83      	ldrb	r3, [r0, #18]
    323c:	075b      	lsls	r3, r3, #29
    323e:	d46a      	bmi.n	3316 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    3240:	68e3      	ldr	r3, [r4, #12]
    3242:	4453      	add	r3, sl
    3244:	001e      	movs	r6, r3
    3246:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    3248:	68a3      	ldr	r3, [r4, #8]
    324a:	429e      	cmp	r6, r3
    324c:	d800      	bhi.n	3250 <udd_ep_transfer_process+0x40>
    324e:	e074      	b.n	333a <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    3250:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    3252:	7ca3      	ldrb	r3, [r4, #18]
    3254:	2201      	movs	r2, #1
    3256:	4393      	bics	r3, r2
    3258:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    325a:	6823      	ldr	r3, [r4, #0]
    325c:	2b00      	cmp	r3, #0
    325e:	d003      	beq.n	3268 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    3260:	68e1      	ldr	r1, [r4, #12]
    3262:	002a      	movs	r2, r5
    3264:	2000      	movs	r0, #0
    3266:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    3268:	bc1c      	pop	{r2, r3, r4}
    326a:	4690      	mov	r8, r2
    326c:	4699      	mov	r9, r3
    326e:	46a2      	mov	sl, r4
    3270:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    3272:	0028      	movs	r0, r5
    3274:	4b4a      	ldr	r3, [pc, #296]	; (33a0 <udd_ep_transfer_process+0x190>)
    3276:	4798      	blx	r3
    3278:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    327a:	270f      	movs	r7, #15
    327c:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    327e:	8a03      	ldrh	r3, [r0, #16]
    3280:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    3282:	464b      	mov	r3, r9
    3284:	885e      	ldrh	r6, [r3, #2]
    3286:	68c3      	ldr	r3, [r0, #12]
    3288:	469c      	mov	ip, r3
    328a:	4466      	add	r6, ip
    328c:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    328e:	6881      	ldr	r1, [r0, #8]
    3290:	428e      	cmp	r6, r1
    3292:	d025      	beq.n	32e0 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    3294:	1b8d      	subs	r5, r1, r6
    3296:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3298:	4b42      	ldr	r3, [pc, #264]	; (33a4 <udd_ep_transfer_process+0x194>)
    329a:	429d      	cmp	r5, r3
    329c:	d906      	bls.n	32ac <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    329e:	001d      	movs	r5, r3
    32a0:	4641      	mov	r1, r8
    32a2:	0018      	movs	r0, r3
    32a4:	4b40      	ldr	r3, [pc, #256]	; (33a8 <udd_ep_transfer_process+0x198>)
    32a6:	4798      	blx	r3
    32a8:	1a6d      	subs	r5, r5, r1
    32aa:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    32ac:	7ca2      	ldrb	r2, [r4, #18]
    32ae:	2300      	movs	r3, #0
    32b0:	0792      	lsls	r2, r2, #30
    32b2:	d507      	bpl.n	32c4 <udd_ep_transfer_process+0xb4>
    32b4:	4641      	mov	r1, r8
    32b6:	0028      	movs	r0, r5
    32b8:	4b3c      	ldr	r3, [pc, #240]	; (33ac <udd_ep_transfer_process+0x19c>)
    32ba:	4798      	blx	r3
    32bc:	b289      	uxth	r1, r1
    32be:	424b      	negs	r3, r1
    32c0:	414b      	adcs	r3, r1
    32c2:	b2db      	uxtb	r3, r3
    32c4:	005b      	lsls	r3, r3, #1
    32c6:	7ca2      	ldrb	r2, [r4, #18]
    32c8:	2102      	movs	r1, #2
    32ca:	438a      	bics	r2, r1
    32cc:	4313      	orrs	r3, r2
    32ce:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    32d0:	6862      	ldr	r2, [r4, #4]
    32d2:	1992      	adds	r2, r2, r6
    32d4:	002b      	movs	r3, r5
    32d6:	0039      	movs	r1, r7
    32d8:	4835      	ldr	r0, [pc, #212]	; (33b0 <udd_ep_transfer_process+0x1a0>)
    32da:	4c36      	ldr	r4, [pc, #216]	; (33b4 <udd_ep_transfer_process+0x1a4>)
    32dc:	47a0      	blx	r4
    32de:	e7c3      	b.n	3268 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    32e0:	7c83      	ldrb	r3, [r0, #18]
    32e2:	079b      	lsls	r3, r3, #30
    32e4:	d40b      	bmi.n	32fe <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    32e6:	7c83      	ldrb	r3, [r0, #18]
    32e8:	2201      	movs	r2, #1
    32ea:	4393      	bics	r3, r2
    32ec:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    32ee:	6803      	ldr	r3, [r0, #0]
    32f0:	2b00      	cmp	r3, #0
    32f2:	d0b9      	beq.n	3268 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    32f4:	002a      	movs	r2, r5
    32f6:	0031      	movs	r1, r6
    32f8:	2000      	movs	r0, #0
    32fa:	4798      	blx	r3
    32fc:	e7b4      	b.n	3268 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    32fe:	7c83      	ldrb	r3, [r0, #18]
    3300:	2202      	movs	r2, #2
    3302:	4393      	bics	r3, r2
    3304:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    3306:	6842      	ldr	r2, [r0, #4]
    3308:	1992      	adds	r2, r2, r6
    330a:	2300      	movs	r3, #0
    330c:	0039      	movs	r1, r7
    330e:	4828      	ldr	r0, [pc, #160]	; (33b0 <udd_ep_transfer_process+0x1a0>)
    3310:	4c28      	ldr	r4, [pc, #160]	; (33b4 <udd_ep_transfer_process+0x1a4>)
    3312:	47a0      	blx	r4
    3314:	e7a8      	b.n	3268 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    3316:	6843      	ldr	r3, [r0, #4]
    3318:	68c2      	ldr	r2, [r0, #12]
    331a:	4694      	mov	ip, r2
    331c:	4463      	add	r3, ip
    331e:	001e      	movs	r6, r3
    3320:	4641      	mov	r1, r8
    3322:	6880      	ldr	r0, [r0, #8]
    3324:	4b21      	ldr	r3, [pc, #132]	; (33ac <udd_ep_transfer_process+0x19c>)
    3326:	4798      	blx	r3
    3328:	000a      	movs	r2, r1
    332a:	1e7b      	subs	r3, r7, #1
    332c:	019b      	lsls	r3, r3, #6
    332e:	4922      	ldr	r1, [pc, #136]	; (33b8 <udd_ep_transfer_process+0x1a8>)
    3330:	1859      	adds	r1, r3, r1
    3332:	0030      	movs	r0, r6
    3334:	4b21      	ldr	r3, [pc, #132]	; (33bc <udd_ep_transfer_process+0x1ac>)
    3336:	4798      	blx	r3
    3338:	e782      	b.n	3240 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    333a:	464a      	mov	r2, r9
    333c:	8892      	ldrh	r2, [r2, #4]
    333e:	4552      	cmp	r2, sl
    3340:	d000      	beq.n	3344 <udd_ep_transfer_process+0x134>
    3342:	e786      	b.n	3252 <udd_ep_transfer_process+0x42>
    3344:	429e      	cmp	r6, r3
    3346:	d100      	bne.n	334a <udd_ep_transfer_process+0x13a>
    3348:	e783      	b.n	3252 <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    334a:	1b9b      	subs	r3, r3, r6
    334c:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    334e:	4b15      	ldr	r3, [pc, #84]	; (33a4 <udd_ep_transfer_process+0x194>)
    3350:	429d      	cmp	r5, r3
    3352:	d916      	bls.n	3382 <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    3354:	001d      	movs	r5, r3
    3356:	4641      	mov	r1, r8
    3358:	0018      	movs	r0, r3
    335a:	4b13      	ldr	r3, [pc, #76]	; (33a8 <udd_ep_transfer_process+0x198>)
    335c:	4798      	blx	r3
    335e:	1a6b      	subs	r3, r5, r1
    3360:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    3362:	4598      	cmp	r8, r3
    3364:	d914      	bls.n	3390 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    3366:	7ca3      	ldrb	r3, [r4, #18]
    3368:	2204      	movs	r2, #4
    336a:	4313      	orrs	r3, r2
    336c:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    336e:	1e7a      	subs	r2, r7, #1
    3370:	0192      	lsls	r2, r2, #6
    3372:	4b11      	ldr	r3, [pc, #68]	; (33b8 <udd_ep_transfer_process+0x1a8>)
    3374:	18d2      	adds	r2, r2, r3
    3376:	4643      	mov	r3, r8
    3378:	0039      	movs	r1, r7
    337a:	480d      	ldr	r0, [pc, #52]	; (33b0 <udd_ep_transfer_process+0x1a0>)
    337c:	4c10      	ldr	r4, [pc, #64]	; (33c0 <udd_ep_transfer_process+0x1b0>)
    337e:	47a0      	blx	r4
    3380:	e772      	b.n	3268 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    3382:	4641      	mov	r1, r8
    3384:	0028      	movs	r0, r5
    3386:	4b09      	ldr	r3, [pc, #36]	; (33ac <udd_ep_transfer_process+0x19c>)
    3388:	4798      	blx	r3
    338a:	1a6b      	subs	r3, r5, r1
    338c:	b29b      	uxth	r3, r3
    338e:	e7e8      	b.n	3362 <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    3390:	6862      	ldr	r2, [r4, #4]
    3392:	1992      	adds	r2, r2, r6
    3394:	0039      	movs	r1, r7
    3396:	4806      	ldr	r0, [pc, #24]	; (33b0 <udd_ep_transfer_process+0x1a0>)
    3398:	4c09      	ldr	r4, [pc, #36]	; (33c0 <udd_ep_transfer_process+0x1b0>)
    339a:	47a0      	blx	r4
    339c:	e764      	b.n	3268 <udd_ep_transfer_process+0x58>
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	000031ed 	.word	0x000031ed
    33a4:	00001fff 	.word	0x00001fff
    33a8:	00009345 	.word	0x00009345
    33ac:	00009171 	.word	0x00009171
    33b0:	20000454 	.word	0x20000454
    33b4:	00006d95 	.word	0x00006d95
    33b8:	200003d4 	.word	0x200003d4
    33bc:	00009641 	.word	0x00009641
    33c0:	00006de9 	.word	0x00006de9

000033c4 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    33c4:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    33c6:	2205      	movs	r2, #5
    33c8:	4b05      	ldr	r3, [pc, #20]	; (33e0 <udd_ctrl_stall_data+0x1c>)
    33ca:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    33cc:	4c05      	ldr	r4, [pc, #20]	; (33e4 <udd_ctrl_stall_data+0x20>)
    33ce:	2180      	movs	r1, #128	; 0x80
    33d0:	0020      	movs	r0, r4
    33d2:	4b05      	ldr	r3, [pc, #20]	; (33e8 <udd_ctrl_stall_data+0x24>)
    33d4:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    33d6:	2100      	movs	r1, #0
    33d8:	0020      	movs	r0, r4
    33da:	4b04      	ldr	r3, [pc, #16]	; (33ec <udd_ctrl_stall_data+0x28>)
    33dc:	4798      	blx	r3
}
    33de:	bd10      	pop	{r4, pc}
    33e0:	20000262 	.word	0x20000262
    33e4:	20000454 	.word	0x20000454
    33e8:	00006ce9 	.word	0x00006ce9
    33ec:	00006d0f 	.word	0x00006d0f

000033f0 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    33f0:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    33f2:	4c08      	ldr	r4, [pc, #32]	; (3414 <_usb_device_lpm_suspend+0x24>)
    33f4:	2106      	movs	r1, #6
    33f6:	0020      	movs	r0, r4
    33f8:	4d07      	ldr	r5, [pc, #28]	; (3418 <_usb_device_lpm_suspend+0x28>)
    33fa:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    33fc:	2104      	movs	r1, #4
    33fe:	0020      	movs	r0, r4
    3400:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3402:	2102      	movs	r1, #2
    3404:	0020      	movs	r0, r4
    3406:	4b05      	ldr	r3, [pc, #20]	; (341c <_usb_device_lpm_suspend+0x2c>)
    3408:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    340a:	2002      	movs	r0, #2
    340c:	4b04      	ldr	r3, [pc, #16]	; (3420 <_usb_device_lpm_suspend+0x30>)
    340e:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    3410:	bd70      	pop	{r4, r5, r6, pc}
    3412:	46c0      	nop			; (mov r8, r8)
    3414:	20000454 	.word	0x20000454
    3418:	000067fd 	.word	0x000067fd
    341c:	000067dd 	.word	0x000067dd
    3420:	0000312d 	.word	0x0000312d

00003424 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    3424:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3426:	4b13      	ldr	r3, [pc, #76]	; (3474 <_usb_on_wakeup+0x50>)
    3428:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    342a:	069b      	lsls	r3, r3, #26
    342c:	d41c      	bmi.n	3468 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    342e:	4911      	ldr	r1, [pc, #68]	; (3474 <_usb_on_wakeup+0x50>)
    3430:	22d0      	movs	r2, #208	; 0xd0
    3432:	68cb      	ldr	r3, [r1, #12]
    3434:	4013      	ands	r3, r2
    3436:	2bd0      	cmp	r3, #208	; 0xd0
    3438:	d1fb      	bne.n	3432 <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    343a:	4c0f      	ldr	r4, [pc, #60]	; (3478 <_usb_on_wakeup+0x54>)
    343c:	2102      	movs	r1, #2
    343e:	0020      	movs	r0, r4
    3440:	4b0e      	ldr	r3, [pc, #56]	; (347c <_usb_on_wakeup+0x58>)
    3442:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3444:	2104      	movs	r1, #4
    3446:	0020      	movs	r0, r4
    3448:	4d0d      	ldr	r5, [pc, #52]	; (3480 <_usb_on_wakeup+0x5c>)
    344a:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    344c:	4a0d      	ldr	r2, [pc, #52]	; (3484 <_usb_on_wakeup+0x60>)
    344e:	2106      	movs	r1, #6
    3450:	0020      	movs	r0, r4
    3452:	4b0d      	ldr	r3, [pc, #52]	; (3488 <_usb_on_wakeup+0x64>)
    3454:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3456:	2106      	movs	r1, #6
    3458:	0020      	movs	r0, r4
    345a:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    345c:	2003      	movs	r0, #3
    345e:	4b0b      	ldr	r3, [pc, #44]	; (348c <_usb_on_wakeup+0x68>)
    3460:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    3462:	4b0b      	ldr	r3, [pc, #44]	; (3490 <_usb_on_wakeup+0x6c>)
    3464:	4798      	blx	r3
#endif
}
    3466:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3468:	4902      	ldr	r1, [pc, #8]	; (3474 <_usb_on_wakeup+0x50>)
    346a:	2210      	movs	r2, #16
    346c:	68cb      	ldr	r3, [r1, #12]
    346e:	421a      	tst	r2, r3
    3470:	d0fc      	beq.n	346c <_usb_on_wakeup+0x48>
    3472:	e7e2      	b.n	343a <_usb_on_wakeup+0x16>
    3474:	40000800 	.word	0x40000800
    3478:	20000454 	.word	0x20000454
    347c:	000067fd 	.word	0x000067fd
    3480:	000067dd 	.word	0x000067dd
    3484:	000033f1 	.word	0x000033f1
    3488:	000067b9 	.word	0x000067b9
    348c:	0000312d 	.word	0x0000312d
    3490:	0000631d 	.word	0x0000631d

00003494 <_usb_on_bus_reset>:
{
    3494:	b530      	push	{r4, r5, lr}
    3496:	b083      	sub	sp, #12
    3498:	0004      	movs	r4, r0
	udc_reset();
    349a:	4b1e      	ldr	r3, [pc, #120]	; (3514 <_usb_on_bus_reset+0x80>)
    349c:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    349e:	2380      	movs	r3, #128	; 0x80
    34a0:	6822      	ldr	r2, [r4, #0]
    34a2:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    34a4:	ad01      	add	r5, sp, #4
    34a6:	0028      	movs	r0, r5
    34a8:	4b1b      	ldr	r3, [pc, #108]	; (3518 <_usb_on_bus_reset+0x84>)
    34aa:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    34ac:	2303      	movs	r3, #3
    34ae:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    34b0:	0029      	movs	r1, r5
    34b2:	0020      	movs	r0, r4
    34b4:	4b19      	ldr	r3, [pc, #100]	; (351c <_usb_on_bus_reset+0x88>)
    34b6:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    34b8:	4919      	ldr	r1, [pc, #100]	; (3520 <_usb_on_bus_reset+0x8c>)
    34ba:	0020      	movs	r0, r4
    34bc:	4b19      	ldr	r3, [pc, #100]	; (3524 <_usb_on_bus_reset+0x90>)
    34be:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    34c0:	4b19      	ldr	r3, [pc, #100]	; (3528 <_usb_on_bus_reset+0x94>)
    34c2:	2202      	movs	r2, #2
    34c4:	2100      	movs	r1, #0
    34c6:	0020      	movs	r0, r4
    34c8:	4d18      	ldr	r5, [pc, #96]	; (352c <_usb_on_bus_reset+0x98>)
    34ca:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    34cc:	4b18      	ldr	r3, [pc, #96]	; (3530 <_usb_on_bus_reset+0x9c>)
    34ce:	2200      	movs	r2, #0
    34d0:	2100      	movs	r1, #0
    34d2:	0020      	movs	r0, r4
    34d4:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    34d6:	4b17      	ldr	r3, [pc, #92]	; (3534 <_usb_on_bus_reset+0xa0>)
    34d8:	2201      	movs	r2, #1
    34da:	2100      	movs	r1, #0
    34dc:	0020      	movs	r0, r4
    34de:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    34e0:	2202      	movs	r2, #2
    34e2:	2100      	movs	r1, #0
    34e4:	0020      	movs	r0, r4
    34e6:	4d14      	ldr	r5, [pc, #80]	; (3538 <_usb_on_bus_reset+0xa4>)
    34e8:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    34ea:	2200      	movs	r2, #0
    34ec:	2100      	movs	r1, #0
    34ee:	0020      	movs	r0, r4
    34f0:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    34f2:	2201      	movs	r2, #1
    34f4:	2100      	movs	r1, #0
    34f6:	0020      	movs	r0, r4
    34f8:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    34fa:	6821      	ldr	r1, [r4, #0]
    34fc:	890b      	ldrh	r3, [r1, #8]
    34fe:	4a0f      	ldr	r2, [pc, #60]	; (353c <_usb_on_bus_reset+0xa8>)
    3500:	401a      	ands	r2, r3
    3502:	2380      	movs	r3, #128	; 0x80
    3504:	00db      	lsls	r3, r3, #3
    3506:	4313      	orrs	r3, r2
    3508:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    350a:	2200      	movs	r2, #0
    350c:	4b0c      	ldr	r3, [pc, #48]	; (3540 <_usb_on_bus_reset+0xac>)
    350e:	701a      	strb	r2, [r3, #0]
}
    3510:	b003      	add	sp, #12
    3512:	bd30      	pop	{r4, r5, pc}
    3514:	00001c7d 	.word	0x00001c7d
    3518:	00006a09 	.word	0x00006a09
    351c:	00006a19 	.word	0x00006a19
    3520:	200005d4 	.word	0x200005d4
    3524:	00006e39 	.word	0x00006e39
    3528:	0000367d 	.word	0x0000367d
    352c:	00006819 	.word	0x00006819
    3530:	00003999 	.word	0x00003999
    3534:	00003581 	.word	0x00003581
    3538:	00006869 	.word	0x00006869
    353c:	fffff3ff 	.word	0xfffff3ff
    3540:	20000262 	.word	0x20000262

00003544 <udd_ctrl_send_zlp_in>:
{
    3544:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    3546:	2203      	movs	r2, #3
    3548:	4b07      	ldr	r3, [pc, #28]	; (3568 <udd_ctrl_send_zlp_in+0x24>)
    354a:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    354c:	4c07      	ldr	r4, [pc, #28]	; (356c <udd_ctrl_send_zlp_in+0x28>)
    354e:	4908      	ldr	r1, [pc, #32]	; (3570 <udd_ctrl_send_zlp_in+0x2c>)
    3550:	0020      	movs	r0, r4
    3552:	4b08      	ldr	r3, [pc, #32]	; (3574 <udd_ctrl_send_zlp_in+0x30>)
    3554:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    3556:	4b08      	ldr	r3, [pc, #32]	; (3578 <udd_ctrl_send_zlp_in+0x34>)
    3558:	689a      	ldr	r2, [r3, #8]
    355a:	2300      	movs	r3, #0
    355c:	2100      	movs	r1, #0
    355e:	0020      	movs	r0, r4
    3560:	4c06      	ldr	r4, [pc, #24]	; (357c <udd_ctrl_send_zlp_in+0x38>)
    3562:	47a0      	blx	r4
}
    3564:	bd10      	pop	{r4, pc}
    3566:	46c0      	nop			; (mov r8, r8)
    3568:	20000262 	.word	0x20000262
    356c:	20000454 	.word	0x20000454
    3570:	200005d4 	.word	0x200005d4
    3574:	00006e39 	.word	0x00006e39
    3578:	200005bc 	.word	0x200005bc
    357c:	00006d95 	.word	0x00006d95

00003580 <_usb_ep0_on_tansfer_fail>:
{
    3580:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    3582:	7989      	ldrb	r1, [r1, #6]
    3584:	b24b      	sxtb	r3, r1
    3586:	2b00      	cmp	r3, #0
    3588:	db06      	blt.n	3598 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    358a:	4b0e      	ldr	r3, [pc, #56]	; (35c4 <_usb_ep0_on_tansfer_fail+0x44>)
    358c:	781b      	ldrb	r3, [r3, #0]
    358e:	2b02      	cmp	r3, #2
    3590:	d00f      	beq.n	35b2 <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    3592:	2b03      	cmp	r3, #3
    3594:	d011      	beq.n	35ba <_usb_ep0_on_tansfer_fail+0x3a>
}
    3596:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    3598:	4b0a      	ldr	r3, [pc, #40]	; (35c4 <_usb_ep0_on_tansfer_fail+0x44>)
    359a:	781b      	ldrb	r3, [r3, #0]
    359c:	2b01      	cmp	r3, #1
    359e:	d005      	beq.n	35ac <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    35a0:	2b04      	cmp	r3, #4
    35a2:	d1f8      	bne.n	3596 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    35a4:	4808      	ldr	r0, [pc, #32]	; (35c8 <_usb_ep0_on_tansfer_fail+0x48>)
    35a6:	4b09      	ldr	r3, [pc, #36]	; (35cc <_usb_ep0_on_tansfer_fail+0x4c>)
    35a8:	4798      	blx	r3
    35aa:	e7f4      	b.n	3596 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    35ac:	4b08      	ldr	r3, [pc, #32]	; (35d0 <_usb_ep0_on_tansfer_fail+0x50>)
    35ae:	4798      	blx	r3
    35b0:	e7f1      	b.n	3596 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    35b2:	2204      	movs	r2, #4
    35b4:	4b03      	ldr	r3, [pc, #12]	; (35c4 <_usb_ep0_on_tansfer_fail+0x44>)
    35b6:	701a      	strb	r2, [r3, #0]
    35b8:	e7ed      	b.n	3596 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    35ba:	4803      	ldr	r0, [pc, #12]	; (35c8 <_usb_ep0_on_tansfer_fail+0x48>)
    35bc:	4b03      	ldr	r3, [pc, #12]	; (35cc <_usb_ep0_on_tansfer_fail+0x4c>)
    35be:	4798      	blx	r3
}
    35c0:	e7e9      	b.n	3596 <_usb_ep0_on_tansfer_fail+0x16>
    35c2:	46c0      	nop			; (mov r8, r8)
    35c4:	20000262 	.word	0x20000262
    35c8:	20000454 	.word	0x20000454
    35cc:	00006ce9 	.word	0x00006ce9
    35d0:	00003545 	.word	0x00003545

000035d4 <udd_ctrl_in_sent>:
{
    35d4:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    35d6:	4b20      	ldr	r3, [pc, #128]	; (3658 <udd_ctrl_in_sent+0x84>)
    35d8:	881b      	ldrh	r3, [r3, #0]
    35da:	4a20      	ldr	r2, [pc, #128]	; (365c <udd_ctrl_in_sent+0x88>)
    35dc:	8994      	ldrh	r4, [r2, #12]
    35de:	1ae4      	subs	r4, r4, r3
    35e0:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    35e2:	2c00      	cmp	r4, #0
    35e4:	d118      	bne.n	3618 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    35e6:	4a1e      	ldr	r2, [pc, #120]	; (3660 <udd_ctrl_in_sent+0x8c>)
    35e8:	8811      	ldrh	r1, [r2, #0]
    35ea:	185b      	adds	r3, r3, r1
    35ec:	b29b      	uxth	r3, r3
    35ee:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    35f0:	4a1a      	ldr	r2, [pc, #104]	; (365c <udd_ctrl_in_sent+0x88>)
    35f2:	88d2      	ldrh	r2, [r2, #6]
    35f4:	429a      	cmp	r2, r3
    35f6:	d023      	beq.n	3640 <udd_ctrl_in_sent+0x6c>
    35f8:	4b1a      	ldr	r3, [pc, #104]	; (3664 <udd_ctrl_in_sent+0x90>)
    35fa:	781b      	ldrb	r3, [r3, #0]
    35fc:	2b00      	cmp	r3, #0
    35fe:	d11f      	bne.n	3640 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    3600:	4b16      	ldr	r3, [pc, #88]	; (365c <udd_ctrl_in_sent+0x88>)
    3602:	695b      	ldr	r3, [r3, #20]
    3604:	2b00      	cmp	r3, #0
    3606:	d023      	beq.n	3650 <udd_ctrl_in_sent+0x7c>
    3608:	4798      	blx	r3
    360a:	2800      	cmp	r0, #0
    360c:	d020      	beq.n	3650 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    360e:	2200      	movs	r2, #0
    3610:	4b11      	ldr	r3, [pc, #68]	; (3658 <udd_ctrl_in_sent+0x84>)
    3612:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    3614:	4b11      	ldr	r3, [pc, #68]	; (365c <udd_ctrl_in_sent+0x88>)
    3616:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    3618:	2c3f      	cmp	r4, #63	; 0x3f
    361a:	d919      	bls.n	3650 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    361c:	2200      	movs	r2, #0
    361e:	4b11      	ldr	r3, [pc, #68]	; (3664 <udd_ctrl_in_sent+0x90>)
    3620:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    3622:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    3624:	4d0c      	ldr	r5, [pc, #48]	; (3658 <udd_ctrl_in_sent+0x84>)
    3626:	882b      	ldrh	r3, [r5, #0]
    3628:	4a0c      	ldr	r2, [pc, #48]	; (365c <udd_ctrl_in_sent+0x88>)
    362a:	6892      	ldr	r2, [r2, #8]
    362c:	18d2      	adds	r2, r2, r3
    362e:	0023      	movs	r3, r4
    3630:	2100      	movs	r1, #0
    3632:	480d      	ldr	r0, [pc, #52]	; (3668 <udd_ctrl_in_sent+0x94>)
    3634:	4e0d      	ldr	r6, [pc, #52]	; (366c <udd_ctrl_in_sent+0x98>)
    3636:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    3638:	882b      	ldrh	r3, [r5, #0]
    363a:	18e4      	adds	r4, r4, r3
    363c:	802c      	strh	r4, [r5, #0]
}
    363e:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    3640:	2204      	movs	r2, #4
    3642:	4b0b      	ldr	r3, [pc, #44]	; (3670 <udd_ctrl_in_sent+0x9c>)
    3644:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3646:	490b      	ldr	r1, [pc, #44]	; (3674 <udd_ctrl_in_sent+0xa0>)
    3648:	4807      	ldr	r0, [pc, #28]	; (3668 <udd_ctrl_in_sent+0x94>)
    364a:	4b0b      	ldr	r3, [pc, #44]	; (3678 <udd_ctrl_in_sent+0xa4>)
    364c:	4798      	blx	r3
			return;
    364e:	e7f6      	b.n	363e <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    3650:	2201      	movs	r2, #1
    3652:	4b04      	ldr	r3, [pc, #16]	; (3664 <udd_ctrl_in_sent+0x90>)
    3654:	701a      	strb	r2, [r3, #0]
    3656:	e7e5      	b.n	3624 <udd_ctrl_in_sent+0x50>
    3658:	2000025e 	.word	0x2000025e
    365c:	200005bc 	.word	0x200005bc
    3660:	20000260 	.word	0x20000260
    3664:	2000025c 	.word	0x2000025c
    3668:	20000454 	.word	0x20000454
    366c:	00006d95 	.word	0x00006d95
    3670:	20000262 	.word	0x20000262
    3674:	200005d4 	.word	0x200005d4
    3678:	00006e39 	.word	0x00006e39

0000367c <_usb_ep0_on_setup>:
{
    367c:	b510      	push	{r4, lr}
    367e:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    3680:	4b2c      	ldr	r3, [pc, #176]	; (3734 <_usb_ep0_on_setup+0xb8>)
    3682:	781b      	ldrb	r3, [r3, #0]
    3684:	2b00      	cmp	r3, #0
    3686:	d007      	beq.n	3698 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    3688:	4b2b      	ldr	r3, [pc, #172]	; (3738 <_usb_ep0_on_setup+0xbc>)
    368a:	691b      	ldr	r3, [r3, #16]
    368c:	2b00      	cmp	r3, #0
    368e:	d000      	beq.n	3692 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    3690:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    3692:	2200      	movs	r2, #0
    3694:	4b27      	ldr	r3, [pc, #156]	; (3734 <_usb_ep0_on_setup+0xb8>)
    3696:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    3698:	8823      	ldrh	r3, [r4, #0]
    369a:	2b08      	cmp	r3, #8
    369c:	d002      	beq.n	36a4 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    369e:	4b27      	ldr	r3, [pc, #156]	; (373c <_usb_ep0_on_setup+0xc0>)
    36a0:	4798      	blx	r3
}
    36a2:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    36a4:	4a24      	ldr	r2, [pc, #144]	; (3738 <_usb_ep0_on_setup+0xbc>)
    36a6:	4b26      	ldr	r3, [pc, #152]	; (3740 <_usb_ep0_on_setup+0xc4>)
    36a8:	7819      	ldrb	r1, [r3, #0]
    36aa:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    36ac:	7859      	ldrb	r1, [r3, #1]
    36ae:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    36b0:	78d8      	ldrb	r0, [r3, #3]
    36b2:	0200      	lsls	r0, r0, #8
    36b4:	7899      	ldrb	r1, [r3, #2]
    36b6:	1809      	adds	r1, r1, r0
    36b8:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    36ba:	7958      	ldrb	r0, [r3, #5]
    36bc:	0200      	lsls	r0, r0, #8
    36be:	7919      	ldrb	r1, [r3, #4]
    36c0:	1809      	adds	r1, r1, r0
    36c2:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    36c4:	79d9      	ldrb	r1, [r3, #7]
    36c6:	0209      	lsls	r1, r1, #8
    36c8:	799b      	ldrb	r3, [r3, #6]
    36ca:	185b      	adds	r3, r3, r1
    36cc:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    36ce:	4b1d      	ldr	r3, [pc, #116]	; (3744 <_usb_ep0_on_setup+0xc8>)
    36d0:	4798      	blx	r3
    36d2:	2800      	cmp	r0, #0
    36d4:	d016      	beq.n	3704 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    36d6:	4b18      	ldr	r3, [pc, #96]	; (3738 <_usb_ep0_on_setup+0xbc>)
    36d8:	781b      	ldrb	r3, [r3, #0]
    36da:	2b7f      	cmp	r3, #127	; 0x7f
    36dc:	d815      	bhi.n	370a <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    36de:	4b16      	ldr	r3, [pc, #88]	; (3738 <_usb_ep0_on_setup+0xbc>)
    36e0:	88db      	ldrh	r3, [r3, #6]
    36e2:	2b00      	cmp	r3, #0
    36e4:	d022      	beq.n	372c <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    36e6:	2300      	movs	r3, #0
    36e8:	4a17      	ldr	r2, [pc, #92]	; (3748 <_usb_ep0_on_setup+0xcc>)
    36ea:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    36ec:	4a17      	ldr	r2, [pc, #92]	; (374c <_usb_ep0_on_setup+0xd0>)
    36ee:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    36f0:	2201      	movs	r2, #1
    36f2:	4b10      	ldr	r3, [pc, #64]	; (3734 <_usb_ep0_on_setup+0xb8>)
    36f4:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    36f6:	2340      	movs	r3, #64	; 0x40
    36f8:	4a11      	ldr	r2, [pc, #68]	; (3740 <_usb_ep0_on_setup+0xc4>)
    36fa:	2100      	movs	r1, #0
    36fc:	4814      	ldr	r0, [pc, #80]	; (3750 <_usb_ep0_on_setup+0xd4>)
    36fe:	4c15      	ldr	r4, [pc, #84]	; (3754 <_usb_ep0_on_setup+0xd8>)
    3700:	47a0      	blx	r4
    3702:	e7ce      	b.n	36a2 <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    3704:	4b0d      	ldr	r3, [pc, #52]	; (373c <_usb_ep0_on_setup+0xc0>)
    3706:	4798      	blx	r3
			return;
    3708:	e7cb      	b.n	36a2 <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    370a:	2300      	movs	r3, #0
    370c:	4a0e      	ldr	r2, [pc, #56]	; (3748 <_usb_ep0_on_setup+0xcc>)
    370e:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    3710:	4a0e      	ldr	r2, [pc, #56]	; (374c <_usb_ep0_on_setup+0xd0>)
    3712:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    3714:	2202      	movs	r2, #2
    3716:	4b07      	ldr	r3, [pc, #28]	; (3734 <_usb_ep0_on_setup+0xb8>)
    3718:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    371a:	2340      	movs	r3, #64	; 0x40
    371c:	4a08      	ldr	r2, [pc, #32]	; (3740 <_usb_ep0_on_setup+0xc4>)
    371e:	2100      	movs	r1, #0
    3720:	480b      	ldr	r0, [pc, #44]	; (3750 <_usb_ep0_on_setup+0xd4>)
    3722:	4c0c      	ldr	r4, [pc, #48]	; (3754 <_usb_ep0_on_setup+0xd8>)
    3724:	47a0      	blx	r4
			udd_ctrl_in_sent();
    3726:	4b0c      	ldr	r3, [pc, #48]	; (3758 <_usb_ep0_on_setup+0xdc>)
    3728:	4798      	blx	r3
    372a:	e7ba      	b.n	36a2 <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    372c:	4b0b      	ldr	r3, [pc, #44]	; (375c <_usb_ep0_on_setup+0xe0>)
    372e:	4798      	blx	r3
				return;
    3730:	e7b7      	b.n	36a2 <_usb_ep0_on_setup+0x26>
    3732:	46c0      	nop			; (mov r8, r8)
    3734:	20000262 	.word	0x20000262
    3738:	200005bc 	.word	0x200005bc
    373c:	000033c5 	.word	0x000033c5
    3740:	200005d4 	.word	0x200005d4
    3744:	00001d0d 	.word	0x00001d0d
    3748:	20000260 	.word	0x20000260
    374c:	2000025e 	.word	0x2000025e
    3750:	20000454 	.word	0x20000454
    3754:	00006de9 	.word	0x00006de9
    3758:	000035d5 	.word	0x000035d5
    375c:	00003545 	.word	0x00003545

00003760 <_usb_on_sof_notify>:
{
    3760:	b510      	push	{r4, lr}
	udc_sof_notify();
    3762:	4b02      	ldr	r3, [pc, #8]	; (376c <_usb_on_sof_notify+0xc>)
    3764:	4798      	blx	r3
	UDC_SOF_EVENT();
    3766:	4b02      	ldr	r3, [pc, #8]	; (3770 <_usb_on_sof_notify+0x10>)
    3768:	4798      	blx	r3
}
    376a:	bd10      	pop	{r4, pc}
    376c:	00001cc9 	.word	0x00001cc9
    3770:	00006329 	.word	0x00006329

00003774 <_usb_on_suspend>:
{
    3774:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3776:	4c07      	ldr	r4, [pc, #28]	; (3794 <_usb_on_suspend+0x20>)
    3778:	2104      	movs	r1, #4
    377a:	0020      	movs	r0, r4
    377c:	4b06      	ldr	r3, [pc, #24]	; (3798 <_usb_on_suspend+0x24>)
    377e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3780:	2102      	movs	r1, #2
    3782:	0020      	movs	r0, r4
    3784:	4b05      	ldr	r3, [pc, #20]	; (379c <_usb_on_suspend+0x28>)
    3786:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    3788:	2001      	movs	r0, #1
    378a:	4b05      	ldr	r3, [pc, #20]	; (37a0 <_usb_on_suspend+0x2c>)
    378c:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    378e:	4b05      	ldr	r3, [pc, #20]	; (37a4 <_usb_on_suspend+0x30>)
    3790:	4798      	blx	r3
}
    3792:	bd10      	pop	{r4, pc}
    3794:	20000454 	.word	0x20000454
    3798:	000067fd 	.word	0x000067fd
    379c:	000067dd 	.word	0x000067dd
    37a0:	0000312d 	.word	0x0000312d
    37a4:	00006311 	.word	0x00006311

000037a8 <udd_ep_abort>:
{
    37a8:	b510      	push	{r4, lr}
    37aa:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    37ac:	0001      	movs	r1, r0
    37ae:	480a      	ldr	r0, [pc, #40]	; (37d8 <udd_ep_abort+0x30>)
    37b0:	4b0a      	ldr	r3, [pc, #40]	; (37dc <udd_ep_abort+0x34>)
    37b2:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    37b4:	0020      	movs	r0, r4
    37b6:	4b0a      	ldr	r3, [pc, #40]	; (37e0 <udd_ep_abort+0x38>)
    37b8:	4798      	blx	r3
	if (!ptr_job->busy) {
    37ba:	7c83      	ldrb	r3, [r0, #18]
    37bc:	07db      	lsls	r3, r3, #31
    37be:	d50a      	bpl.n	37d6 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    37c0:	7c83      	ldrb	r3, [r0, #18]
    37c2:	2201      	movs	r2, #1
    37c4:	4393      	bics	r3, r2
    37c6:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    37c8:	6803      	ldr	r3, [r0, #0]
    37ca:	2b00      	cmp	r3, #0
    37cc:	d003      	beq.n	37d6 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    37ce:	68c1      	ldr	r1, [r0, #12]
    37d0:	0022      	movs	r2, r4
    37d2:	2001      	movs	r0, #1
    37d4:	4798      	blx	r3
}
    37d6:	bd10      	pop	{r4, pc}
    37d8:	20000454 	.word	0x20000454
    37dc:	00006c89 	.word	0x00006c89
    37e0:	000031ed 	.word	0x000031ed

000037e4 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    37e4:	4b02      	ldr	r3, [pc, #8]	; (37f0 <udd_get_frame_number+0xc>)
    37e6:	681b      	ldr	r3, [r3, #0]
    37e8:	8a18      	ldrh	r0, [r3, #16]
    37ea:	0480      	lsls	r0, r0, #18
    37ec:	0d40      	lsrs	r0, r0, #21
}
    37ee:	4770      	bx	lr
    37f0:	20000454 	.word	0x20000454

000037f4 <udd_ep_free>:
{
    37f4:	b570      	push	{r4, r5, r6, lr}
    37f6:	b082      	sub	sp, #8
    37f8:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    37fa:	ad01      	add	r5, sp, #4
    37fc:	0028      	movs	r0, r5
    37fe:	4b0d      	ldr	r3, [pc, #52]	; (3834 <udd_ep_free+0x40>)
    3800:	4798      	blx	r3
	udd_ep_abort(ep);
    3802:	0020      	movs	r0, r4
    3804:	4b0c      	ldr	r3, [pc, #48]	; (3838 <udd_ep_free+0x44>)
    3806:	4798      	blx	r3
	config_ep.ep_address = ep;
    3808:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    380a:	2300      	movs	r3, #0
    380c:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    380e:	4e0b      	ldr	r6, [pc, #44]	; (383c <udd_ep_free+0x48>)
    3810:	0029      	movs	r1, r5
    3812:	0030      	movs	r0, r6
    3814:	4b0a      	ldr	r3, [pc, #40]	; (3840 <udd_ep_free+0x4c>)
    3816:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3818:	210f      	movs	r1, #15
    381a:	4021      	ands	r1, r4
    381c:	2200      	movs	r2, #0
    381e:	0030      	movs	r0, r6
    3820:	4b08      	ldr	r3, [pc, #32]	; (3844 <udd_ep_free+0x50>)
    3822:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3824:	2200      	movs	r2, #0
    3826:	0021      	movs	r1, r4
    3828:	0030      	movs	r0, r6
    382a:	4b07      	ldr	r3, [pc, #28]	; (3848 <udd_ep_free+0x54>)
    382c:	4798      	blx	r3
}
    382e:	b002      	add	sp, #8
    3830:	bd70      	pop	{r4, r5, r6, pc}
    3832:	46c0      	nop			; (mov r8, r8)
    3834:	00006a09 	.word	0x00006a09
    3838:	000037a9 	.word	0x000037a9
    383c:	20000454 	.word	0x20000454
    3840:	00006a19 	.word	0x00006a19
    3844:	00006841 	.word	0x00006841
    3848:	00006939 	.word	0x00006939

0000384c <udd_ep_alloc>:
{
    384c:	b5f0      	push	{r4, r5, r6, r7, lr}
    384e:	b083      	sub	sp, #12
    3850:	0005      	movs	r5, r0
    3852:	000f      	movs	r7, r1
    3854:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    3856:	ae01      	add	r6, sp, #4
    3858:	0030      	movs	r0, r6
    385a:	4b36      	ldr	r3, [pc, #216]	; (3934 <udd_ep_alloc+0xe8>)
    385c:	4798      	blx	r3
	config_ep.ep_address = ep;
    385e:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    3860:	2c08      	cmp	r4, #8
    3862:	d813      	bhi.n	388c <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    3864:	2200      	movs	r2, #0
    3866:	ab01      	add	r3, sp, #4
    3868:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    386a:	0028      	movs	r0, r5
    386c:	4b32      	ldr	r3, [pc, #200]	; (3938 <udd_ep_alloc+0xec>)
    386e:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    3870:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    3872:	2103      	movs	r1, #3
    3874:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    3876:	2901      	cmp	r1, #1
    3878:	d038      	beq.n	38ec <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    387a:	2902      	cmp	r1, #2
    387c:	d043      	beq.n	3906 <udd_ep_alloc+0xba>
		return false;
    387e:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    3880:	2903      	cmp	r1, #3
    3882:	d13d      	bne.n	3900 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    3884:	2204      	movs	r2, #4
    3886:	ab01      	add	r3, sp, #4
    3888:	70da      	strb	r2, [r3, #3]
    388a:	e032      	b.n	38f2 <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    388c:	2c10      	cmp	r4, #16
    388e:	d803      	bhi.n	3898 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    3890:	2201      	movs	r2, #1
    3892:	ab01      	add	r3, sp, #4
    3894:	705a      	strb	r2, [r3, #1]
    3896:	e7e8      	b.n	386a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    3898:	2c20      	cmp	r4, #32
    389a:	d803      	bhi.n	38a4 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    389c:	2202      	movs	r2, #2
    389e:	ab01      	add	r3, sp, #4
    38a0:	705a      	strb	r2, [r3, #1]
    38a2:	e7e2      	b.n	386a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    38a4:	2c40      	cmp	r4, #64	; 0x40
    38a6:	d803      	bhi.n	38b0 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    38a8:	2203      	movs	r2, #3
    38aa:	ab01      	add	r3, sp, #4
    38ac:	705a      	strb	r2, [r3, #1]
    38ae:	e7dc      	b.n	386a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    38b0:	2c80      	cmp	r4, #128	; 0x80
    38b2:	d803      	bhi.n	38bc <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    38b4:	2204      	movs	r2, #4
    38b6:	ab01      	add	r3, sp, #4
    38b8:	705a      	strb	r2, [r3, #1]
    38ba:	e7d6      	b.n	386a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    38bc:	2380      	movs	r3, #128	; 0x80
    38be:	005b      	lsls	r3, r3, #1
    38c0:	429c      	cmp	r4, r3
    38c2:	d803      	bhi.n	38cc <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    38c4:	2205      	movs	r2, #5
    38c6:	ab01      	add	r3, sp, #4
    38c8:	705a      	strb	r2, [r3, #1]
    38ca:	e7ce      	b.n	386a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    38cc:	2380      	movs	r3, #128	; 0x80
    38ce:	009b      	lsls	r3, r3, #2
    38d0:	429c      	cmp	r4, r3
    38d2:	d803      	bhi.n	38dc <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    38d4:	2206      	movs	r2, #6
    38d6:	ab01      	add	r3, sp, #4
    38d8:	705a      	strb	r2, [r3, #1]
    38da:	e7c6      	b.n	386a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    38dc:	4a17      	ldr	r2, [pc, #92]	; (393c <udd_ep_alloc+0xf0>)
		return false;
    38de:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    38e0:	4294      	cmp	r4, r2
    38e2:	d80d      	bhi.n	3900 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    38e4:	2207      	movs	r2, #7
    38e6:	ab01      	add	r3, sp, #4
    38e8:	705a      	strb	r2, [r3, #1]
    38ea:	e7be      	b.n	386a <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    38ec:	2202      	movs	r2, #2
    38ee:	ab01      	add	r3, sp, #4
    38f0:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    38f2:	a901      	add	r1, sp, #4
    38f4:	4812      	ldr	r0, [pc, #72]	; (3940 <udd_ep_alloc+0xf4>)
    38f6:	4b13      	ldr	r3, [pc, #76]	; (3944 <udd_ep_alloc+0xf8>)
    38f8:	4798      	blx	r3
		return false;
    38fa:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    38fc:	2800      	cmp	r0, #0
    38fe:	d006      	beq.n	390e <udd_ep_alloc+0xc2>
}
    3900:	0018      	movs	r0, r3
    3902:	b003      	add	sp, #12
    3904:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    3906:	2203      	movs	r2, #3
    3908:	ab01      	add	r3, sp, #4
    390a:	70da      	strb	r2, [r3, #3]
    390c:	e7f1      	b.n	38f2 <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    390e:	210f      	movs	r1, #15
    3910:	4029      	ands	r1, r5
    3912:	4c0b      	ldr	r4, [pc, #44]	; (3940 <udd_ep_alloc+0xf4>)
    3914:	4b0c      	ldr	r3, [pc, #48]	; (3948 <udd_ep_alloc+0xfc>)
    3916:	2200      	movs	r2, #0
    3918:	0020      	movs	r0, r4
    391a:	4e0c      	ldr	r6, [pc, #48]	; (394c <udd_ep_alloc+0x100>)
    391c:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    391e:	2200      	movs	r2, #0
    3920:	0029      	movs	r1, r5
    3922:	0020      	movs	r0, r4
    3924:	4e0a      	ldr	r6, [pc, #40]	; (3950 <udd_ep_alloc+0x104>)
    3926:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3928:	2201      	movs	r2, #1
    392a:	0029      	movs	r1, r5
    392c:	0020      	movs	r0, r4
    392e:	47b0      	blx	r6
	return true;
    3930:	2301      	movs	r3, #1
    3932:	e7e5      	b.n	3900 <udd_ep_alloc+0xb4>
    3934:	00006a09 	.word	0x00006a09
    3938:	000031ed 	.word	0x000031ed
    393c:	000003ff 	.word	0x000003ff
    3940:	20000454 	.word	0x20000454
    3944:	00006a19 	.word	0x00006a19
    3948:	00003211 	.word	0x00003211
    394c:	00006819 	.word	0x00006819
    3950:	00006869 	.word	0x00006869

00003954 <udd_ep_is_halted>:
{
    3954:	b510      	push	{r4, lr}
    3956:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    3958:	4801      	ldr	r0, [pc, #4]	; (3960 <udd_ep_is_halted+0xc>)
    395a:	4b02      	ldr	r3, [pc, #8]	; (3964 <udd_ep_is_halted+0x10>)
    395c:	4798      	blx	r3
}
    395e:	bd10      	pop	{r4, pc}
    3960:	20000454 	.word	0x20000454
    3964:	00006cbf 	.word	0x00006cbf

00003968 <udd_ep_set_halt>:
{
    3968:	b510      	push	{r4, lr}
    396a:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    396c:	230f      	movs	r3, #15
    396e:	4003      	ands	r3, r0
		return false;
    3970:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3972:	2b02      	cmp	r3, #2
    3974:	d900      	bls.n	3978 <udd_ep_set_halt+0x10>
}
    3976:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    3978:	0021      	movs	r1, r4
    397a:	4804      	ldr	r0, [pc, #16]	; (398c <udd_ep_set_halt+0x24>)
    397c:	4b04      	ldr	r3, [pc, #16]	; (3990 <udd_ep_set_halt+0x28>)
    397e:	4798      	blx	r3
	udd_ep_abort(ep);
    3980:	0020      	movs	r0, r4
    3982:	4b04      	ldr	r3, [pc, #16]	; (3994 <udd_ep_set_halt+0x2c>)
    3984:	4798      	blx	r3
	return true;
    3986:	2001      	movs	r0, #1
    3988:	e7f5      	b.n	3976 <udd_ep_set_halt+0xe>
    398a:	46c0      	nop			; (mov r8, r8)
    398c:	20000454 	.word	0x20000454
    3990:	00006ce9 	.word	0x00006ce9
    3994:	000037a9 	.word	0x000037a9

00003998 <_usb_ep0_on_tansfer_ok>:
{
    3998:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    399a:	4b34      	ldr	r3, [pc, #208]	; (3a6c <_usb_ep0_on_tansfer_ok+0xd4>)
    399c:	781b      	ldrb	r3, [r3, #0]
    399e:	2b01      	cmp	r3, #1
    39a0:	d00a      	beq.n	39b8 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    39a2:	2b02      	cmp	r3, #2
    39a4:	d05f      	beq.n	3a66 <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    39a6:	4b32      	ldr	r3, [pc, #200]	; (3a70 <_usb_ep0_on_tansfer_ok+0xd8>)
    39a8:	691b      	ldr	r3, [r3, #16]
    39aa:	2b00      	cmp	r3, #0
    39ac:	d000      	beq.n	39b0 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    39ae:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    39b0:	2200      	movs	r2, #0
    39b2:	4b2e      	ldr	r3, [pc, #184]	; (3a6c <_usb_ep0_on_tansfer_ok+0xd4>)
    39b4:	701a      	strb	r2, [r3, #0]
}
    39b6:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    39b8:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    39ba:	4b2d      	ldr	r3, [pc, #180]	; (3a70 <_usb_ep0_on_tansfer_ok+0xd8>)
    39bc:	899b      	ldrh	r3, [r3, #12]
    39be:	4a2d      	ldr	r2, [pc, #180]	; (3a74 <_usb_ep0_on_tansfer_ok+0xdc>)
    39c0:	8814      	ldrh	r4, [r2, #0]
    39c2:	1962      	adds	r2, r4, r5
    39c4:	4293      	cmp	r3, r2
    39c6:	da01      	bge.n	39cc <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    39c8:	1b1d      	subs	r5, r3, r4
    39ca:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    39cc:	4b28      	ldr	r3, [pc, #160]	; (3a70 <_usb_ep0_on_tansfer_ok+0xd8>)
    39ce:	6898      	ldr	r0, [r3, #8]
    39d0:	1900      	adds	r0, r0, r4
    39d2:	002a      	movs	r2, r5
    39d4:	4928      	ldr	r1, [pc, #160]	; (3a78 <_usb_ep0_on_tansfer_ok+0xe0>)
    39d6:	4b29      	ldr	r3, [pc, #164]	; (3a7c <_usb_ep0_on_tansfer_ok+0xe4>)
    39d8:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    39da:	1964      	adds	r4, r4, r5
    39dc:	b2a4      	uxth	r4, r4
    39de:	4b25      	ldr	r3, [pc, #148]	; (3a74 <_usb_ep0_on_tansfer_ok+0xdc>)
    39e0:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    39e2:	2d40      	cmp	r5, #64	; 0x40
    39e4:	d00a      	beq.n	39fc <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    39e6:	4b22      	ldr	r3, [pc, #136]	; (3a70 <_usb_ep0_on_tansfer_ok+0xd8>)
    39e8:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    39ea:	695b      	ldr	r3, [r3, #20]
    39ec:	2b00      	cmp	r3, #0
    39ee:	d002      	beq.n	39f6 <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    39f0:	4798      	blx	r3
    39f2:	2800      	cmp	r0, #0
    39f4:	d014      	beq.n	3a20 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    39f6:	4b22      	ldr	r3, [pc, #136]	; (3a80 <_usb_ep0_on_tansfer_ok+0xe8>)
    39f8:	4798      	blx	r3
    39fa:	e7dc      	b.n	39b6 <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    39fc:	4b1c      	ldr	r3, [pc, #112]	; (3a70 <_usb_ep0_on_tansfer_ok+0xd8>)
    39fe:	88da      	ldrh	r2, [r3, #6]
    3a00:	4b20      	ldr	r3, [pc, #128]	; (3a84 <_usb_ep0_on_tansfer_ok+0xec>)
    3a02:	881b      	ldrh	r3, [r3, #0]
    3a04:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    3a06:	429a      	cmp	r2, r3
    3a08:	dded      	ble.n	39e6 <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    3a0a:	4b19      	ldr	r3, [pc, #100]	; (3a70 <_usb_ep0_on_tansfer_ok+0xd8>)
    3a0c:	899b      	ldrh	r3, [r3, #12]
    3a0e:	42a3      	cmp	r3, r4
    3a10:	d00c      	beq.n	3a2c <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3a12:	2340      	movs	r3, #64	; 0x40
    3a14:	4a18      	ldr	r2, [pc, #96]	; (3a78 <_usb_ep0_on_tansfer_ok+0xe0>)
    3a16:	2100      	movs	r1, #0
    3a18:	481b      	ldr	r0, [pc, #108]	; (3a88 <_usb_ep0_on_tansfer_ok+0xf0>)
    3a1a:	4c1c      	ldr	r4, [pc, #112]	; (3a8c <_usb_ep0_on_tansfer_ok+0xf4>)
    3a1c:	47a0      	blx	r4
    3a1e:	e7ca      	b.n	39b6 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3a20:	2205      	movs	r2, #5
    3a22:	4b12      	ldr	r3, [pc, #72]	; (3a6c <_usb_ep0_on_tansfer_ok+0xd4>)
    3a24:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    3a26:	4b1a      	ldr	r3, [pc, #104]	; (3a90 <_usb_ep0_on_tansfer_ok+0xf8>)
    3a28:	4798      	blx	r3
    3a2a:	e7c4      	b.n	39b6 <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    3a2c:	4b10      	ldr	r3, [pc, #64]	; (3a70 <_usb_ep0_on_tansfer_ok+0xd8>)
    3a2e:	695b      	ldr	r3, [r3, #20]
    3a30:	2b00      	cmp	r3, #0
    3a32:	d00b      	beq.n	3a4c <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    3a34:	4798      	blx	r3
    3a36:	2800      	cmp	r0, #0
    3a38:	d00f      	beq.n	3a5a <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3a3a:	4912      	ldr	r1, [pc, #72]	; (3a84 <_usb_ep0_on_tansfer_ok+0xec>)
    3a3c:	4a0d      	ldr	r2, [pc, #52]	; (3a74 <_usb_ep0_on_tansfer_ok+0xdc>)
    3a3e:	880b      	ldrh	r3, [r1, #0]
    3a40:	8810      	ldrh	r0, [r2, #0]
    3a42:	181b      	adds	r3, r3, r0
    3a44:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    3a46:	2300      	movs	r3, #0
    3a48:	8013      	strh	r3, [r2, #0]
    3a4a:	e7e2      	b.n	3a12 <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3a4c:	2205      	movs	r2, #5
    3a4e:	4b07      	ldr	r3, [pc, #28]	; (3a6c <_usb_ep0_on_tansfer_ok+0xd4>)
    3a50:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    3a52:	2000      	movs	r0, #0
    3a54:	4b0e      	ldr	r3, [pc, #56]	; (3a90 <_usb_ep0_on_tansfer_ok+0xf8>)
    3a56:	4798      	blx	r3
    3a58:	e7ad      	b.n	39b6 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3a5a:	2205      	movs	r2, #5
    3a5c:	4b03      	ldr	r3, [pc, #12]	; (3a6c <_usb_ep0_on_tansfer_ok+0xd4>)
    3a5e:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    3a60:	4b0b      	ldr	r3, [pc, #44]	; (3a90 <_usb_ep0_on_tansfer_ok+0xf8>)
    3a62:	4798      	blx	r3
    3a64:	e7a7      	b.n	39b6 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    3a66:	4b0b      	ldr	r3, [pc, #44]	; (3a94 <_usb_ep0_on_tansfer_ok+0xfc>)
    3a68:	4798      	blx	r3
    3a6a:	e7a4      	b.n	39b6 <_usb_ep0_on_tansfer_ok+0x1e>
    3a6c:	20000262 	.word	0x20000262
    3a70:	200005bc 	.word	0x200005bc
    3a74:	2000025e 	.word	0x2000025e
    3a78:	200005d4 	.word	0x200005d4
    3a7c:	00009641 	.word	0x00009641
    3a80:	00003545 	.word	0x00003545
    3a84:	20000260 	.word	0x20000260
    3a88:	20000454 	.word	0x20000454
    3a8c:	00006de9 	.word	0x00006de9
    3a90:	00003969 	.word	0x00003969
    3a94:	000035d5 	.word	0x000035d5

00003a98 <udd_ep_clear_halt>:
{
    3a98:	b570      	push	{r4, r5, r6, lr}
    3a9a:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3a9c:	230f      	movs	r3, #15
    3a9e:	4003      	ands	r3, r0
		return false;
    3aa0:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3aa2:	2b02      	cmp	r3, #2
    3aa4:	d900      	bls.n	3aa8 <udd_ep_clear_halt+0x10>
}
    3aa6:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    3aa8:	0020      	movs	r0, r4
    3aaa:	4b09      	ldr	r3, [pc, #36]	; (3ad0 <udd_ep_clear_halt+0x38>)
    3aac:	4798      	blx	r3
    3aae:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    3ab0:	0021      	movs	r1, r4
    3ab2:	4808      	ldr	r0, [pc, #32]	; (3ad4 <udd_ep_clear_halt+0x3c>)
    3ab4:	4b08      	ldr	r3, [pc, #32]	; (3ad8 <udd_ep_clear_halt+0x40>)
    3ab6:	4798      	blx	r3
	if (ptr_job->busy == true) {
    3ab8:	7cab      	ldrb	r3, [r5, #18]
	return true;
    3aba:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    3abc:	07db      	lsls	r3, r3, #31
    3abe:	d5f2      	bpl.n	3aa6 <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    3ac0:	7cab      	ldrb	r3, [r5, #18]
    3ac2:	2201      	movs	r2, #1
    3ac4:	4393      	bics	r3, r2
    3ac6:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    3ac8:	682b      	ldr	r3, [r5, #0]
    3aca:	4798      	blx	r3
	return true;
    3acc:	2001      	movs	r0, #1
    3ace:	e7ea      	b.n	3aa6 <udd_ep_clear_halt+0xe>
    3ad0:	000031ed 	.word	0x000031ed
    3ad4:	20000454 	.word	0x20000454
    3ad8:	00006d0f 	.word	0x00006d0f

00003adc <udd_ep_wait_stall_clear>:
{
    3adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ade:	0004      	movs	r4, r0
    3ae0:	000d      	movs	r5, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    3ae2:	230f      	movs	r3, #15
    3ae4:	4003      	ands	r3, r0
		return false;
    3ae6:	2600      	movs	r6, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3ae8:	2b02      	cmp	r3, #2
    3aea:	d805      	bhi.n	3af8 <udd_ep_wait_stall_clear+0x1c>
	ptr_job = udd_ep_get_job(ep);
    3aec:	4b0d      	ldr	r3, [pc, #52]	; (3b24 <udd_ep_wait_stall_clear+0x48>)
    3aee:	4798      	blx	r3
    3af0:	0007      	movs	r7, r0
	if (ptr_job->busy == true) {
    3af2:	7c83      	ldrb	r3, [r0, #18]
    3af4:	07db      	lsls	r3, r3, #31
    3af6:	d501      	bpl.n	3afc <udd_ep_wait_stall_clear+0x20>
}
    3af8:	0030      	movs	r0, r6
    3afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    3afc:	0021      	movs	r1, r4
    3afe:	480a      	ldr	r0, [pc, #40]	; (3b28 <udd_ep_wait_stall_clear+0x4c>)
    3b00:	4b0a      	ldr	r3, [pc, #40]	; (3b2c <udd_ep_wait_stall_clear+0x50>)
    3b02:	4798      	blx	r3
    3b04:	1e06      	subs	r6, r0, #0
    3b06:	d005      	beq.n	3b14 <udd_ep_wait_stall_clear+0x38>
		ptr_job->busy = true;
    3b08:	7cbb      	ldrb	r3, [r7, #18]
    3b0a:	2201      	movs	r2, #1
    3b0c:	4313      	orrs	r3, r2
    3b0e:	74bb      	strb	r3, [r7, #18]
		ptr_job->call_nohalt = callback;
    3b10:	603d      	str	r5, [r7, #0]
		return true;
    3b12:	e7f1      	b.n	3af8 <udd_ep_wait_stall_clear+0x1c>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    3b14:	0021      	movs	r1, r4
    3b16:	4804      	ldr	r0, [pc, #16]	; (3b28 <udd_ep_wait_stall_clear+0x4c>)
    3b18:	4b05      	ldr	r3, [pc, #20]	; (3b30 <udd_ep_wait_stall_clear+0x54>)
    3b1a:	4798      	blx	r3
    3b1c:	1e06      	subs	r6, r0, #0
    3b1e:	d0eb      	beq.n	3af8 <udd_ep_wait_stall_clear+0x1c>
		callback(); /* Endpoint not halted then call directly callback */
    3b20:	47a8      	blx	r5
		return true;
    3b22:	e7e9      	b.n	3af8 <udd_ep_wait_stall_clear+0x1c>
    3b24:	000031ed 	.word	0x000031ed
    3b28:	20000454 	.word	0x20000454
    3b2c:	00006cbf 	.word	0x00006cbf
    3b30:	00006c5d 	.word	0x00006c5d

00003b34 <udd_ep_run>:
{
    3b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b36:	b087      	sub	sp, #28
    3b38:	0005      	movs	r5, r0
    3b3a:	9103      	str	r1, [sp, #12]
    3b3c:	9202      	str	r2, [sp, #8]
    3b3e:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    3b40:	260f      	movs	r6, #15
    3b42:	4006      	ands	r6, r0
		return false;
    3b44:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3b46:	2e02      	cmp	r6, #2
    3b48:	d902      	bls.n	3b50 <udd_ep_run+0x1c>
}
    3b4a:	0020      	movs	r0, r4
    3b4c:	b007      	add	sp, #28
    3b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3b50:	4b64      	ldr	r3, [pc, #400]	; (3ce4 <udd_ep_run+0x1b0>)
    3b52:	4798      	blx	r3
    3b54:	1e04      	subs	r4, r0, #0
    3b56:	d000      	beq.n	3b5a <udd_ep_run+0x26>
    3b58:	e0bd      	b.n	3cd6 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    3b5a:	0028      	movs	r0, r5
    3b5c:	4b62      	ldr	r3, [pc, #392]	; (3ce8 <udd_ep_run+0x1b4>)
    3b5e:	4798      	blx	r3
    3b60:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3b62:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3b66:	425a      	negs	r2, r3
    3b68:	4153      	adcs	r3, r2
    3b6a:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    3b6c:	b672      	cpsid	i
    3b6e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3b72:	2200      	movs	r2, #0
    3b74:	4b5d      	ldr	r3, [pc, #372]	; (3cec <udd_ep_run+0x1b8>)
    3b76:	701a      	strb	r2, [r3, #0]
	return flags;
    3b78:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    3b7a:	7c83      	ldrb	r3, [r0, #18]
    3b7c:	07db      	lsls	r3, r3, #31
    3b7e:	d508      	bpl.n	3b92 <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    3b80:	2a00      	cmp	r2, #0
    3b82:	d0e2      	beq.n	3b4a <udd_ep_run+0x16>
		cpu_irq_enable();
    3b84:	2201      	movs	r2, #1
    3b86:	4b59      	ldr	r3, [pc, #356]	; (3cec <udd_ep_run+0x1b8>)
    3b88:	701a      	strb	r2, [r3, #0]
    3b8a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3b8e:	b662      	cpsie	i
    3b90:	e7db      	b.n	3b4a <udd_ep_run+0x16>
	ptr_job->busy = true;
    3b92:	7c83      	ldrb	r3, [r0, #18]
    3b94:	2101      	movs	r1, #1
    3b96:	430b      	orrs	r3, r1
    3b98:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    3b9a:	2a00      	cmp	r2, #0
    3b9c:	d005      	beq.n	3baa <udd_ep_run+0x76>
		cpu_irq_enable();
    3b9e:	2201      	movs	r2, #1
    3ba0:	4b52      	ldr	r3, [pc, #328]	; (3cec <udd_ep_run+0x1b8>)
    3ba2:	701a      	strb	r2, [r3, #0]
    3ba4:	f3bf 8f5f 	dmb	sy
    3ba8:	b662      	cpsie	i
	ptr_job->buf = buf;
    3baa:	9b02      	ldr	r3, [sp, #8]
    3bac:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    3bae:	9b01      	ldr	r3, [sp, #4]
    3bb0:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    3bb2:	2300      	movs	r3, #0
    3bb4:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    3bb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3bb8:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    3bba:	2301      	movs	r3, #1
    3bbc:	9a03      	ldr	r2, [sp, #12]
    3bbe:	4013      	ands	r3, r2
    3bc0:	005a      	lsls	r2, r3, #1
    3bc2:	7cbb      	ldrb	r3, [r7, #18]
    3bc4:	2102      	movs	r1, #2
    3bc6:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    3bc8:	4313      	orrs	r3, r2
    3bca:	2204      	movs	r2, #4
    3bcc:	4393      	bics	r3, r2
    3bce:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    3bd0:	b26b      	sxtb	r3, r5
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	db20      	blt.n	3c18 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    3bd6:	9b01      	ldr	r3, [sp, #4]
    3bd8:	2b00      	cmp	r3, #0
    3bda:	d06f      	beq.n	3cbc <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    3bdc:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3bde:	4b44      	ldr	r3, [pc, #272]	; (3cf0 <udd_ep_run+0x1bc>)
    3be0:	429c      	cmp	r4, r3
    3be2:	d95a      	bls.n	3c9a <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3be4:	8a39      	ldrh	r1, [r7, #16]
    3be6:	001c      	movs	r4, r3
    3be8:	0018      	movs	r0, r3
    3bea:	4b42      	ldr	r3, [pc, #264]	; (3cf4 <udd_ep_run+0x1c0>)
    3bec:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3bee:	1a63      	subs	r3, r4, r1
    3bf0:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    3bf2:	8a3b      	ldrh	r3, [r7, #16]
    3bf4:	429a      	cmp	r2, r3
    3bf6:	d257      	bcs.n	3ca8 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    3bf8:	7cba      	ldrb	r2, [r7, #18]
    3bfa:	2104      	movs	r1, #4
    3bfc:	430a      	orrs	r2, r1
    3bfe:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    3c00:	1e72      	subs	r2, r6, #1
    3c02:	0192      	lsls	r2, r2, #6
    3c04:	493c      	ldr	r1, [pc, #240]	; (3cf8 <udd_ep_run+0x1c4>)
    3c06:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3c08:	0031      	movs	r1, r6
    3c0a:	483c      	ldr	r0, [pc, #240]	; (3cfc <udd_ep_run+0x1c8>)
    3c0c:	4c3c      	ldr	r4, [pc, #240]	; (3d00 <udd_ep_run+0x1cc>)
    3c0e:	47a0      	blx	r4
				return (STATUS_OK ==
    3c10:	4244      	negs	r4, r0
    3c12:	4144      	adcs	r4, r0
    3c14:	b2e4      	uxtb	r4, r4
    3c16:	e798      	b.n	3b4a <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    3c18:	9b01      	ldr	r3, [sp, #4]
    3c1a:	2b00      	cmp	r3, #0
    3c1c:	d027      	beq.n	3c6e <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    3c1e:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3c20:	4b33      	ldr	r3, [pc, #204]	; (3cf0 <udd_ep_run+0x1bc>)
    3c22:	429d      	cmp	r5, r3
    3c24:	d906      	bls.n	3c34 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3c26:	8a39      	ldrh	r1, [r7, #16]
    3c28:	001d      	movs	r5, r3
    3c2a:	0018      	movs	r0, r3
    3c2c:	4b31      	ldr	r3, [pc, #196]	; (3cf4 <udd_ep_run+0x1c0>)
    3c2e:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3c30:	1a6b      	subs	r3, r5, r1
    3c32:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3c34:	7cbb      	ldrb	r3, [r7, #18]
    3c36:	079b      	lsls	r3, r3, #30
    3c38:	d507      	bpl.n	3c4a <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    3c3a:	8a39      	ldrh	r1, [r7, #16]
    3c3c:	0028      	movs	r0, r5
    3c3e:	4b31      	ldr	r3, [pc, #196]	; (3d04 <udd_ep_run+0x1d0>)
    3c40:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3c42:	b289      	uxth	r1, r1
    3c44:	424c      	negs	r4, r1
    3c46:	414c      	adcs	r4, r1
    3c48:	b2e4      	uxtb	r4, r4
    3c4a:	2001      	movs	r0, #1
    3c4c:	4020      	ands	r0, r4
    3c4e:	0040      	lsls	r0, r0, #1
    3c50:	7cbc      	ldrb	r4, [r7, #18]
    3c52:	2302      	movs	r3, #2
    3c54:	439c      	bics	r4, r3
    3c56:	4304      	orrs	r4, r0
    3c58:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    3c5a:	002b      	movs	r3, r5
    3c5c:	9a02      	ldr	r2, [sp, #8]
    3c5e:	0031      	movs	r1, r6
    3c60:	4826      	ldr	r0, [pc, #152]	; (3cfc <udd_ep_run+0x1c8>)
    3c62:	4c29      	ldr	r4, [pc, #164]	; (3d08 <udd_ep_run+0x1d4>)
    3c64:	47a0      	blx	r4
		return (STATUS_OK ==
    3c66:	4244      	negs	r4, r0
    3c68:	4144      	adcs	r4, r0
    3c6a:	b2e4      	uxtb	r4, r4
    3c6c:	e76d      	b.n	3b4a <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    3c6e:	7cbb      	ldrb	r3, [r7, #18]
    3c70:	079b      	lsls	r3, r3, #30
    3c72:	d505      	bpl.n	3c80 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    3c74:	7cbb      	ldrb	r3, [r7, #18]
    3c76:	2202      	movs	r2, #2
    3c78:	4393      	bics	r3, r2
    3c7a:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    3c7c:	2500      	movs	r5, #0
    3c7e:	e7ec      	b.n	3c5a <udd_ep_run+0x126>
			ptr_job->busy = false;
    3c80:	7cbb      	ldrb	r3, [r7, #18]
    3c82:	2201      	movs	r2, #1
    3c84:	4393      	bics	r3, r2
    3c86:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d025      	beq.n	3cda <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3c8e:	002a      	movs	r2, r5
    3c90:	2100      	movs	r1, #0
    3c92:	2000      	movs	r0, #0
    3c94:	4798      	blx	r3
			return true;
    3c96:	2401      	movs	r4, #1
    3c98:	e757      	b.n	3b4a <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    3c9a:	8a39      	ldrh	r1, [r7, #16]
    3c9c:	0020      	movs	r0, r4
    3c9e:	4b19      	ldr	r3, [pc, #100]	; (3d04 <udd_ep_run+0x1d0>)
    3ca0:	4798      	blx	r3
    3ca2:	1a63      	subs	r3, r4, r1
    3ca4:	b29a      	uxth	r2, r3
    3ca6:	e7a4      	b.n	3bf2 <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3ca8:	0013      	movs	r3, r2
    3caa:	9a02      	ldr	r2, [sp, #8]
    3cac:	0031      	movs	r1, r6
    3cae:	4813      	ldr	r0, [pc, #76]	; (3cfc <udd_ep_run+0x1c8>)
    3cb0:	4c13      	ldr	r4, [pc, #76]	; (3d00 <udd_ep_run+0x1cc>)
    3cb2:	47a0      	blx	r4
				return (STATUS_OK ==
    3cb4:	4244      	negs	r4, r0
    3cb6:	4144      	adcs	r4, r0
    3cb8:	b2e4      	uxtb	r4, r4
    3cba:	e746      	b.n	3b4a <udd_ep_run+0x16>
			ptr_job->busy = false;
    3cbc:	7cbb      	ldrb	r3, [r7, #18]
    3cbe:	2201      	movs	r2, #1
    3cc0:	4393      	bics	r3, r2
    3cc2:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3cc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d009      	beq.n	3cde <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3cca:	002a      	movs	r2, r5
    3ccc:	2100      	movs	r1, #0
    3cce:	2000      	movs	r0, #0
    3cd0:	4798      	blx	r3
			return true;
    3cd2:	2401      	movs	r4, #1
    3cd4:	e739      	b.n	3b4a <udd_ep_run+0x16>
		return false;
    3cd6:	2400      	movs	r4, #0
    3cd8:	e737      	b.n	3b4a <udd_ep_run+0x16>
			return true;
    3cda:	2401      	movs	r4, #1
    3cdc:	e735      	b.n	3b4a <udd_ep_run+0x16>
			return true;
    3cde:	2401      	movs	r4, #1
    3ce0:	e733      	b.n	3b4a <udd_ep_run+0x16>
    3ce2:	46c0      	nop			; (mov r8, r8)
    3ce4:	00003955 	.word	0x00003955
    3ce8:	000031ed 	.word	0x000031ed
    3cec:	20000125 	.word	0x20000125
    3cf0:	00001fff 	.word	0x00001fff
    3cf4:	00009345 	.word	0x00009345
    3cf8:	200003d4 	.word	0x200003d4
    3cfc:	20000454 	.word	0x20000454
    3d00:	00006de9 	.word	0x00006de9
    3d04:	00009171 	.word	0x00009171
    3d08:	00006d95 	.word	0x00006d95

00003d0c <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    3d0c:	4b02      	ldr	r3, [pc, #8]	; (3d18 <udd_set_address+0xc>)
    3d0e:	681b      	ldr	r3, [r3, #0]
    3d10:	2280      	movs	r2, #128	; 0x80
    3d12:	4310      	orrs	r0, r2
    3d14:	7298      	strb	r0, [r3, #10]
}
    3d16:	4770      	bx	lr
    3d18:	20000454 	.word	0x20000454

00003d1c <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    3d1c:	4b02      	ldr	r3, [pc, #8]	; (3d28 <udd_getaddress+0xc>)
    3d1e:	681b      	ldr	r3, [r3, #0]
    3d20:	7a98      	ldrb	r0, [r3, #10]
    3d22:	0640      	lsls	r0, r0, #25
    3d24:	0e40      	lsrs	r0, r0, #25
}
    3d26:	4770      	bx	lr
    3d28:	20000454 	.word	0x20000454

00003d2c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    3d2c:	4b01      	ldr	r3, [pc, #4]	; (3d34 <udd_set_setup_payload+0x8>)
    3d2e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    3d30:	8199      	strh	r1, [r3, #12]
}
    3d32:	4770      	bx	lr
    3d34:	200005bc 	.word	0x200005bc

00003d38 <udd_detach>:

void udd_detach(void)
{
    3d38:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    3d3a:	4b05      	ldr	r3, [pc, #20]	; (3d50 <udd_detach+0x18>)
    3d3c:	681a      	ldr	r2, [r3, #0]
    3d3e:	8913      	ldrh	r3, [r2, #8]
    3d40:	2101      	movs	r1, #1
    3d42:	430b      	orrs	r3, r1
    3d44:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    3d46:	2001      	movs	r0, #1
    3d48:	4b02      	ldr	r3, [pc, #8]	; (3d54 <udd_detach+0x1c>)
    3d4a:	4798      	blx	r3
}
    3d4c:	bd10      	pop	{r4, pc}
    3d4e:	46c0      	nop			; (mov r8, r8)
    3d50:	20000454 	.word	0x20000454
    3d54:	0000312d 	.word	0x0000312d

00003d58 <udd_attach>:

void udd_attach(void)
{
    3d58:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    3d5a:	2003      	movs	r0, #3
    3d5c:	4b16      	ldr	r3, [pc, #88]	; (3db8 <udd_attach+0x60>)
    3d5e:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3d60:	4c16      	ldr	r4, [pc, #88]	; (3dbc <udd_attach+0x64>)
    3d62:	6822      	ldr	r2, [r4, #0]
    3d64:	8913      	ldrh	r3, [r2, #8]
    3d66:	2101      	movs	r1, #1
    3d68:	438b      	bics	r3, r1
    3d6a:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    3d6c:	4a14      	ldr	r2, [pc, #80]	; (3dc0 <udd_attach+0x68>)
    3d6e:	3103      	adds	r1, #3
    3d70:	0020      	movs	r0, r4
    3d72:	4e14      	ldr	r6, [pc, #80]	; (3dc4 <udd_attach+0x6c>)
    3d74:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    3d76:	4a14      	ldr	r2, [pc, #80]	; (3dc8 <udd_attach+0x70>)
    3d78:	2100      	movs	r1, #0
    3d7a:	0020      	movs	r0, r4
    3d7c:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    3d7e:	4a13      	ldr	r2, [pc, #76]	; (3dcc <udd_attach+0x74>)
    3d80:	2101      	movs	r1, #1
    3d82:	0020      	movs	r0, r4
    3d84:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    3d86:	4a12      	ldr	r2, [pc, #72]	; (3dd0 <udd_attach+0x78>)
    3d88:	2102      	movs	r1, #2
    3d8a:	0020      	movs	r0, r4
    3d8c:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3d8e:	2104      	movs	r1, #4
    3d90:	0020      	movs	r0, r4
    3d92:	4d10      	ldr	r5, [pc, #64]	; (3dd4 <udd_attach+0x7c>)
    3d94:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3d96:	2100      	movs	r1, #0
    3d98:	0020      	movs	r0, r4
    3d9a:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    3d9c:	2101      	movs	r1, #1
    3d9e:	0020      	movs	r0, r4
    3da0:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3da2:	2102      	movs	r1, #2
    3da4:	0020      	movs	r0, r4
    3da6:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3da8:	4a0b      	ldr	r2, [pc, #44]	; (3dd8 <udd_attach+0x80>)
    3daa:	2106      	movs	r1, #6
    3dac:	0020      	movs	r0, r4
    3dae:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3db0:	2106      	movs	r1, #6
    3db2:	0020      	movs	r0, r4
    3db4:	47a8      	blx	r5
#endif
}
    3db6:	bd70      	pop	{r4, r5, r6, pc}
    3db8:	0000312d 	.word	0x0000312d
    3dbc:	20000454 	.word	0x20000454
    3dc0:	00003775 	.word	0x00003775
    3dc4:	000067b9 	.word	0x000067b9
    3dc8:	00003761 	.word	0x00003761
    3dcc:	00003495 	.word	0x00003495
    3dd0:	00003425 	.word	0x00003425
    3dd4:	000067dd 	.word	0x000067dd
    3dd8:	000033f1 	.word	0x000033f1

00003ddc <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    3ddc:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3dde:	2100      	movs	r1, #0
    3de0:	200e      	movs	r0, #14
    3de2:	4b08      	ldr	r3, [pc, #32]	; (3e04 <_uhd_vbus_handler+0x28>)
    3de4:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    3de6:	4b08      	ldr	r3, [pc, #32]	; (3e08 <_uhd_vbus_handler+0x2c>)
    3de8:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    3dea:	045b      	lsls	r3, r3, #17
    3dec:	d406      	bmi.n	3dfc <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    3dee:	4b07      	ldr	r3, [pc, #28]	; (3e0c <_uhd_vbus_handler+0x30>)
    3df0:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3df2:	2100      	movs	r1, #0
    3df4:	200e      	movs	r0, #14
    3df6:	4b06      	ldr	r3, [pc, #24]	; (3e10 <_uhd_vbus_handler+0x34>)
    3df8:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    3dfa:	bd10      	pop	{r4, pc}
		udd_attach();
    3dfc:	4b05      	ldr	r3, [pc, #20]	; (3e14 <_uhd_vbus_handler+0x38>)
    3dfe:	4798      	blx	r3
    3e00:	e7f7      	b.n	3df2 <_uhd_vbus_handler+0x16>
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	000076a1 	.word	0x000076a1
    3e08:	41004400 	.word	0x41004400
    3e0c:	00003d39 	.word	0x00003d39
    3e10:	00007681 	.word	0x00007681
    3e14:	00003d59 	.word	0x00003d59

00003e18 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    3e18:	b570      	push	{r4, r5, r6, lr}
    3e1a:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3e1c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3e20:	425a      	negs	r2, r3
    3e22:	4153      	adcs	r3, r2
    3e24:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3e26:	b672      	cpsid	i
    3e28:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3e2c:	2600      	movs	r6, #0
    3e2e:	4b29      	ldr	r3, [pc, #164]	; (3ed4 <udd_enable+0xbc>)
    3e30:	701e      	strb	r6, [r3, #0]
	return flags;
    3e32:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    3e34:	ac05      	add	r4, sp, #20
    3e36:	0020      	movs	r0, r4
    3e38:	4b27      	ldr	r3, [pc, #156]	; (3ed8 <udd_enable+0xc0>)
    3e3a:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    3e3c:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    3e3e:	4e27      	ldr	r6, [pc, #156]	; (3edc <udd_enable+0xc4>)
    3e40:	0022      	movs	r2, r4
    3e42:	4927      	ldr	r1, [pc, #156]	; (3ee0 <udd_enable+0xc8>)
    3e44:	0030      	movs	r0, r6
    3e46:	4b27      	ldr	r3, [pc, #156]	; (3ee4 <udd_enable+0xcc>)
    3e48:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    3e4a:	0030      	movs	r0, r6
    3e4c:	4b26      	ldr	r3, [pc, #152]	; (3ee8 <udd_enable+0xd0>)
    3e4e:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3e50:	4b26      	ldr	r3, [pc, #152]	; (3eec <udd_enable+0xd4>)
    3e52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3e54:	069b      	lsls	r3, r3, #26
    3e56:	d434      	bmi.n	3ec2 <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3e58:	4924      	ldr	r1, [pc, #144]	; (3eec <udd_enable+0xd4>)
    3e5a:	22d0      	movs	r2, #208	; 0xd0
    3e5c:	68cb      	ldr	r3, [r1, #12]
    3e5e:	4013      	ands	r3, r2
    3e60:	2bd0      	cmp	r3, #208	; 0xd0
    3e62:	d1fb      	bne.n	3e5c <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    3e64:	2001      	movs	r0, #1
    3e66:	4b22      	ldr	r3, [pc, #136]	; (3ef0 <udd_enable+0xd8>)
    3e68:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    3e6a:	ac02      	add	r4, sp, #8
    3e6c:	0020      	movs	r0, r4
    3e6e:	4b21      	ldr	r3, [pc, #132]	; (3ef4 <udd_enable+0xdc>)
    3e70:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    3e72:	230e      	movs	r3, #14
    3e74:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    3e76:	2300      	movs	r3, #0
    3e78:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    3e7a:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    3e7c:	3303      	adds	r3, #3
    3e7e:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    3e80:	3b02      	subs	r3, #2
    3e82:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3e84:	2100      	movs	r1, #0
    3e86:	200e      	movs	r0, #14
    3e88:	4b1b      	ldr	r3, [pc, #108]	; (3ef8 <udd_enable+0xe0>)
    3e8a:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    3e8c:	0021      	movs	r1, r4
    3e8e:	200e      	movs	r0, #14
    3e90:	4b1a      	ldr	r3, [pc, #104]	; (3efc <udd_enable+0xe4>)
    3e92:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    3e94:	2200      	movs	r2, #0
    3e96:	210e      	movs	r1, #14
    3e98:	4819      	ldr	r0, [pc, #100]	; (3f00 <udd_enable+0xe8>)
    3e9a:	4b1a      	ldr	r3, [pc, #104]	; (3f04 <udd_enable+0xec>)
    3e9c:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3e9e:	2100      	movs	r1, #0
    3ea0:	200e      	movs	r0, #14
    3ea2:	4b19      	ldr	r3, [pc, #100]	; (3f08 <udd_enable+0xf0>)
    3ea4:	4798      	blx	r3
    3ea6:	4b19      	ldr	r3, [pc, #100]	; (3f0c <udd_enable+0xf4>)
    3ea8:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    3eaa:	045b      	lsls	r3, r3, #17
    3eac:	d40f      	bmi.n	3ece <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    3eae:	2d00      	cmp	r5, #0
    3eb0:	d005      	beq.n	3ebe <udd_enable+0xa6>
		cpu_irq_enable();
    3eb2:	2201      	movs	r2, #1
    3eb4:	4b07      	ldr	r3, [pc, #28]	; (3ed4 <udd_enable+0xbc>)
    3eb6:	701a      	strb	r2, [r3, #0]
    3eb8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3ebc:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    3ebe:	b006      	add	sp, #24
    3ec0:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3ec2:	490a      	ldr	r1, [pc, #40]	; (3eec <udd_enable+0xd4>)
    3ec4:	2210      	movs	r2, #16
    3ec6:	68cb      	ldr	r3, [r1, #12]
    3ec8:	421a      	tst	r2, r3
    3eca:	d0fc      	beq.n	3ec6 <udd_enable+0xae>
    3ecc:	e7ca      	b.n	3e64 <udd_enable+0x4c>
		_uhd_vbus_handler();
    3ece:	4b0c      	ldr	r3, [pc, #48]	; (3f00 <udd_enable+0xe8>)
    3ed0:	4798      	blx	r3
    3ed2:	e7ec      	b.n	3eae <udd_enable+0x96>
    3ed4:	20000125 	.word	0x20000125
    3ed8:	00007445 	.word	0x00007445
    3edc:	20000454 	.word	0x20000454
    3ee0:	41005000 	.word	0x41005000
    3ee4:	00007455 	.word	0x00007455
    3ee8:	00006e69 	.word	0x00006e69
    3eec:	40000800 	.word	0x40000800
    3ef0:	0000312d 	.word	0x0000312d
    3ef4:	000021e5 	.word	0x000021e5
    3ef8:	000076a1 	.word	0x000076a1
    3efc:	000021f9 	.word	0x000021f9
    3f00:	00003ddd 	.word	0x00003ddd
    3f04:	00007655 	.word	0x00007655
    3f08:	00007681 	.word	0x00007681
    3f0c:	41004400 	.word	0x41004400

00003f10 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f12:	46c6      	mov	lr, r8
    3f14:	b500      	push	{lr}
    3f16:	000c      	movs	r4, r1
    3f18:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    3f1a:	2800      	cmp	r0, #0
    3f1c:	d10f      	bne.n	3f3e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3f1e:	2a00      	cmp	r2, #0
    3f20:	dd11      	ble.n	3f46 <_read+0x36>
    3f22:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3f24:	4e09      	ldr	r6, [pc, #36]	; (3f4c <_read+0x3c>)
    3f26:	4d0a      	ldr	r5, [pc, #40]	; (3f50 <_read+0x40>)
    3f28:	6830      	ldr	r0, [r6, #0]
    3f2a:	0021      	movs	r1, r4
    3f2c:	682b      	ldr	r3, [r5, #0]
    3f2e:	4798      	blx	r3
		ptr++;
    3f30:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3f32:	42bc      	cmp	r4, r7
    3f34:	d1f8      	bne.n	3f28 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    3f36:	4640      	mov	r0, r8
    3f38:	bc04      	pop	{r2}
    3f3a:	4690      	mov	r8, r2
    3f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3f3e:	2301      	movs	r3, #1
    3f40:	425b      	negs	r3, r3
    3f42:	4698      	mov	r8, r3
    3f44:	e7f7      	b.n	3f36 <_read+0x26>
	for (; len > 0; --len) {
    3f46:	4680      	mov	r8, r0
    3f48:	e7f5      	b.n	3f36 <_read+0x26>
    3f4a:	46c0      	nop			; (mov r8, r8)
    3f4c:	2000061c 	.word	0x2000061c
    3f50:	20000614 	.word	0x20000614

00003f54 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3f54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f56:	46c6      	mov	lr, r8
    3f58:	b500      	push	{lr}
    3f5a:	000e      	movs	r6, r1
    3f5c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3f5e:	3801      	subs	r0, #1
    3f60:	2802      	cmp	r0, #2
    3f62:	d810      	bhi.n	3f86 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3f64:	2a00      	cmp	r2, #0
    3f66:	d011      	beq.n	3f8c <_write+0x38>
    3f68:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3f6a:	4b0c      	ldr	r3, [pc, #48]	; (3f9c <_write+0x48>)
    3f6c:	4698      	mov	r8, r3
    3f6e:	4f0c      	ldr	r7, [pc, #48]	; (3fa0 <_write+0x4c>)
    3f70:	4643      	mov	r3, r8
    3f72:	6818      	ldr	r0, [r3, #0]
    3f74:	5d31      	ldrb	r1, [r6, r4]
    3f76:	683b      	ldr	r3, [r7, #0]
    3f78:	4798      	blx	r3
    3f7a:	2800      	cmp	r0, #0
    3f7c:	db08      	blt.n	3f90 <_write+0x3c>
			return -1;
		}
		++nChars;
    3f7e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3f80:	42a5      	cmp	r5, r4
    3f82:	d1f5      	bne.n	3f70 <_write+0x1c>
    3f84:	e006      	b.n	3f94 <_write+0x40>
		return -1;
    3f86:	2401      	movs	r4, #1
    3f88:	4264      	negs	r4, r4
    3f8a:	e003      	b.n	3f94 <_write+0x40>
	for (; len != 0; --len) {
    3f8c:	0014      	movs	r4, r2
    3f8e:	e001      	b.n	3f94 <_write+0x40>
			return -1;
    3f90:	2401      	movs	r4, #1
    3f92:	4264      	negs	r4, r4
	}
	return nChars;
}
    3f94:	0020      	movs	r0, r4
    3f96:	bc04      	pop	{r2}
    3f98:	4690      	mov	r8, r2
    3f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f9c:	2000061c 	.word	0x2000061c
    3fa0:	20000618 	.word	0x20000618

00003fa4 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    3fa4:	b530      	push	{r4, r5, lr}
    3fa6:	b087      	sub	sp, #28
    3fa8:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    3faa:	aa01      	add	r2, sp, #4
    3fac:	23a0      	movs	r3, #160	; 0xa0
    3fae:	011b      	lsls	r3, r3, #4
    3fb0:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    3fb2:	2300      	movs	r3, #0
    3fb4:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    3fb6:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    3fb8:	21fa      	movs	r1, #250	; 0xfa
    3fba:	00c9      	lsls	r1, r1, #3
    3fbc:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    3fbe:	2101      	movs	r1, #1
    3fc0:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    3fc2:	2004      	movs	r0, #4
    3fc4:	7210      	strb	r0, [r2, #8]
    3fc6:	7253      	strb	r3, [r2, #9]
    3fc8:	7293      	strb	r3, [r2, #10]
    3fca:	72d3      	strb	r3, [r2, #11]
    3fcc:	7311      	strb	r1, [r2, #12]
    3fce:	7351      	strb	r1, [r2, #13]
    3fd0:	4b14      	ldr	r3, [pc, #80]	; (4024 <disk_initialize+0x80>)
    3fd2:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    3fd4:	2306      	movs	r3, #6
    3fd6:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    3fd8:	4d13      	ldr	r5, [pc, #76]	; (4028 <disk_initialize+0x84>)
    3fda:	4914      	ldr	r1, [pc, #80]	; (402c <disk_initialize+0x88>)
    3fdc:	0028      	movs	r0, r5
    3fde:	4b14      	ldr	r3, [pc, #80]	; (4030 <disk_initialize+0x8c>)
    3fe0:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    3fe2:	0028      	movs	r0, r5
    3fe4:	4b13      	ldr	r3, [pc, #76]	; (4034 <disk_initialize+0x90>)
    3fe6:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    3fe8:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    3fea:	2c01      	cmp	r4, #1
    3fec:	d901      	bls.n	3ff2 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    3fee:	b007      	add	sp, #28
    3ff0:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    3ff2:	0020      	movs	r0, r4
    3ff4:	4b10      	ldr	r3, [pc, #64]	; (4038 <disk_initialize+0x94>)
    3ff6:	4798      	blx	r3
    3ff8:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    3ffa:	2803      	cmp	r0, #3
    3ffc:	d106      	bne.n	400c <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    3ffe:	0020      	movs	r0, r4
    4000:	4b0d      	ldr	r3, [pc, #52]	; (4038 <disk_initialize+0x94>)
    4002:	4798      	blx	r3
    4004:	0003      	movs	r3, r0
		return STA_NOINIT;
    4006:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    4008:	2b03      	cmp	r3, #3
    400a:	d0f0      	beq.n	3fee <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    400c:	2b00      	cmp	r3, #0
    400e:	d106      	bne.n	401e <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    4010:	0020      	movs	r0, r4
    4012:	4b0a      	ldr	r3, [pc, #40]	; (403c <disk_initialize+0x98>)
    4014:	4798      	blx	r3
	return 0;
    4016:	1e43      	subs	r3, r0, #1
    4018:	4198      	sbcs	r0, r3
    401a:	0080      	lsls	r0, r0, #2
    401c:	e7e7      	b.n	3fee <disk_initialize+0x4a>
		return STA_NOINIT;
    401e:	2001      	movs	r0, #1
    4020:	e7e5      	b.n	3fee <disk_initialize+0x4a>
    4022:	46c0      	nop			; (mov r8, r8)
    4024:	000007de 	.word	0x000007de
    4028:	20000620 	.word	0x20000620
    402c:	40001400 	.word	0x40001400
    4030:	000023cd 	.word	0x000023cd
    4034:	00002271 	.word	0x00002271
    4038:	000089f1 	.word	0x000089f1
    403c:	00008a3d 	.word	0x00008a3d

00004040 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    4040:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    4042:	4b05      	ldr	r3, [pc, #20]	; (4058 <disk_status+0x18>)
    4044:	4798      	blx	r3
    4046:	1e03      	subs	r3, r0, #0
    4048:	d004      	beq.n	4054 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    404a:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    404c:	2b02      	cmp	r3, #2
    404e:	d000      	beq.n	4052 <disk_status+0x12>
	default:
		return STA_NOINIT;
    4050:	3802      	subs	r0, #2
	}
}
    4052:	bd10      	pop	{r4, pc}
		return 0;
    4054:	2000      	movs	r0, #0
    4056:	e7fc      	b.n	4052 <disk_status+0x12>
    4058:	000089f1 	.word	0x000089f1

0000405c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    405c:	b5f0      	push	{r4, r5, r6, r7, lr}
    405e:	46de      	mov	lr, fp
    4060:	464f      	mov	r7, r9
    4062:	4646      	mov	r6, r8
    4064:	b5c0      	push	{r6, r7, lr}
    4066:	b084      	sub	sp, #16
    4068:	9001      	str	r0, [sp, #4]
    406a:	000d      	movs	r5, r1
    406c:	0014      	movs	r4, r2
    406e:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    4070:	4b18      	ldr	r3, [pc, #96]	; (40d4 <disk_read+0x78>)
    4072:	4798      	blx	r3
    4074:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    4076:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    4078:	2e00      	cmp	r6, #0
    407a:	d105      	bne.n	4088 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    407c:	b004      	add	sp, #16
    407e:	bc1c      	pop	{r2, r3, r4}
    4080:	4690      	mov	r8, r2
    4082:	4699      	mov	r9, r3
    4084:	46a3      	mov	fp, r4
    4086:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    4088:	a903      	add	r1, sp, #12
    408a:	9801      	ldr	r0, [sp, #4]
    408c:	4b12      	ldr	r3, [pc, #72]	; (40d8 <disk_read+0x7c>)
    408e:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    4090:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    4092:	0032      	movs	r2, r6
    4094:	437a      	muls	r2, r7
    4096:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    4098:	9b03      	ldr	r3, [sp, #12]
    409a:	3301      	adds	r3, #1
    409c:	4373      	muls	r3, r6
		return RES_PARERR;
    409e:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    40a0:	429a      	cmp	r2, r3
    40a2:	d8eb      	bhi.n	407c <disk_read+0x20>
	for (i = 0; i < count; i++) {
    40a4:	2f00      	cmp	r7, #0
    40a6:	d011      	beq.n	40cc <disk_read+0x70>
    40a8:	0273      	lsls	r3, r6, #9
    40aa:	4698      	mov	r8, r3
    40ac:	1c7b      	adds	r3, r7, #1
    40ae:	469b      	mov	fp, r3
    40b0:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    40b2:	4e0a      	ldr	r6, [pc, #40]	; (40dc <disk_read+0x80>)
    40b4:	002a      	movs	r2, r5
    40b6:	0021      	movs	r1, r4
    40b8:	9801      	ldr	r0, [sp, #4]
    40ba:	47b0      	blx	r6
    40bc:	2800      	cmp	r0, #0
    40be:	d107      	bne.n	40d0 <disk_read+0x74>
    40c0:	3701      	adds	r7, #1
    40c2:	444c      	add	r4, r9
    40c4:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    40c6:	455f      	cmp	r7, fp
    40c8:	d1f4      	bne.n	40b4 <disk_read+0x58>
    40ca:	e7d7      	b.n	407c <disk_read+0x20>
	return RES_OK;
    40cc:	2000      	movs	r0, #0
    40ce:	e7d5      	b.n	407c <disk_read+0x20>
			return RES_ERROR;
    40d0:	2001      	movs	r0, #1
    40d2:	e7d3      	b.n	407c <disk_read+0x20>
    40d4:	00008a25 	.word	0x00008a25
    40d8:	00008a09 	.word	0x00008a09
    40dc:	00008a7d 	.word	0x00008a7d

000040e0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    40e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    40e2:	46de      	mov	lr, fp
    40e4:	464f      	mov	r7, r9
    40e6:	4646      	mov	r6, r8
    40e8:	b5c0      	push	{r6, r7, lr}
    40ea:	b084      	sub	sp, #16
    40ec:	9001      	str	r0, [sp, #4]
    40ee:	000d      	movs	r5, r1
    40f0:	0014      	movs	r4, r2
    40f2:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    40f4:	4b18      	ldr	r3, [pc, #96]	; (4158 <disk_write+0x78>)
    40f6:	4798      	blx	r3
    40f8:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    40fa:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    40fc:	2e00      	cmp	r6, #0
    40fe:	d105      	bne.n	410c <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    4100:	b004      	add	sp, #16
    4102:	bc1c      	pop	{r2, r3, r4}
    4104:	4690      	mov	r8, r2
    4106:	4699      	mov	r9, r3
    4108:	46a3      	mov	fp, r4
    410a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    410c:	a903      	add	r1, sp, #12
    410e:	9801      	ldr	r0, [sp, #4]
    4110:	4b12      	ldr	r3, [pc, #72]	; (415c <disk_write+0x7c>)
    4112:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    4114:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    4116:	0032      	movs	r2, r6
    4118:	437a      	muls	r2, r7
    411a:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    411c:	9b03      	ldr	r3, [sp, #12]
    411e:	3301      	adds	r3, #1
    4120:	4373      	muls	r3, r6
		return RES_PARERR;
    4122:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    4124:	429a      	cmp	r2, r3
    4126:	d8eb      	bhi.n	4100 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    4128:	2f00      	cmp	r7, #0
    412a:	d011      	beq.n	4150 <disk_write+0x70>
    412c:	0273      	lsls	r3, r6, #9
    412e:	4698      	mov	r8, r3
    4130:	1c7b      	adds	r3, r7, #1
    4132:	469b      	mov	fp, r3
    4134:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    4136:	4e0a      	ldr	r6, [pc, #40]	; (4160 <disk_write+0x80>)
    4138:	002a      	movs	r2, r5
    413a:	0021      	movs	r1, r4
    413c:	9801      	ldr	r0, [sp, #4]
    413e:	47b0      	blx	r6
    4140:	2800      	cmp	r0, #0
    4142:	d107      	bne.n	4154 <disk_write+0x74>
    4144:	3701      	adds	r7, #1
    4146:	444c      	add	r4, r9
    4148:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    414a:	455f      	cmp	r7, fp
    414c:	d1f4      	bne.n	4138 <disk_write+0x58>
    414e:	e7d7      	b.n	4100 <disk_write+0x20>
	return RES_OK;
    4150:	2000      	movs	r0, #0
    4152:	e7d5      	b.n	4100 <disk_write+0x20>
			return RES_ERROR;
    4154:	2001      	movs	r0, #1
    4156:	e7d3      	b.n	4100 <disk_write+0x20>
    4158:	00008a25 	.word	0x00008a25
    415c:	00008a09 	.word	0x00008a09
    4160:	00008ab1 	.word	0x00008ab1

00004164 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    4164:	b510      	push	{r4, lr}
    4166:	b082      	sub	sp, #8
    4168:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    416a:	2901      	cmp	r1, #1
    416c:	d00b      	beq.n	4186 <disk_ioctl+0x22>
    416e:	2900      	cmp	r1, #0
    4170:	d020      	beq.n	41b4 <disk_ioctl+0x50>
    4172:	2902      	cmp	r1, #2
    4174:	d00f      	beq.n	4196 <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    4176:	2004      	movs	r0, #4
	switch (ctrl) {
    4178:	2903      	cmp	r1, #3
    417a:	d102      	bne.n	4182 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    417c:	2301      	movs	r3, #1
    417e:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    4180:	2000      	movs	r0, #0
	}

	return res;
}
    4182:	b002      	add	sp, #8
    4184:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    4186:	a901      	add	r1, sp, #4
    4188:	4b0e      	ldr	r3, [pc, #56]	; (41c4 <disk_ioctl+0x60>)
    418a:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    418c:	9b01      	ldr	r3, [sp, #4]
    418e:	3301      	adds	r3, #1
    4190:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    4192:	2000      	movs	r0, #0
	break;
    4194:	e7f5      	b.n	4182 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    4196:	4b0c      	ldr	r3, [pc, #48]	; (41c8 <disk_ioctl+0x64>)
    4198:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    419a:	1e43      	subs	r3, r0, #1
    419c:	b2db      	uxtb	r3, r3
    419e:	2b01      	cmp	r3, #1
    41a0:	d904      	bls.n	41ac <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    41a2:	1f03      	subs	r3, r0, #4
    41a4:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    41a6:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    41a8:	4213      	tst	r3, r2
    41aa:	d1ea      	bne.n	4182 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    41ac:	2300      	movs	r3, #0
    41ae:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    41b0:	2000      	movs	r0, #0
	break;
    41b2:	e7e6      	b.n	4182 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    41b4:	4b05      	ldr	r3, [pc, #20]	; (41cc <disk_ioctl+0x68>)
    41b6:	4798      	blx	r3
    41b8:	2800      	cmp	r0, #0
    41ba:	d001      	beq.n	41c0 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    41bc:	2003      	movs	r0, #3
    41be:	e7e0      	b.n	4182 <disk_ioctl+0x1e>
			res = RES_OK;
    41c0:	2000      	movs	r0, #0
    41c2:	e7de      	b.n	4182 <disk_ioctl+0x1e>
    41c4:	00008a09 	.word	0x00008a09
    41c8:	00008a25 	.word	0x00008a25
    41cc:	000089f1 	.word	0x000089f1

000041d0 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    41d0:	b500      	push	{lr}
    41d2:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    41d4:	4669      	mov	r1, sp
    41d6:	480f      	ldr	r0, [pc, #60]	; (4214 <get_fattime+0x44>)
    41d8:	4b0f      	ldr	r3, [pc, #60]	; (4218 <get_fattime+0x48>)
    41da:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    41dc:	466b      	mov	r3, sp
    41de:	7958      	ldrb	r0, [r3, #5]
    41e0:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    41e2:	791b      	ldrb	r3, [r3, #4]
    41e4:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    41e6:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    41e8:	466b      	mov	r3, sp
    41ea:	789b      	ldrb	r3, [r3, #2]
    41ec:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    41ee:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    41f0:	466b      	mov	r3, sp
    41f2:	785b      	ldrb	r3, [r3, #1]
    41f4:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    41f6:	4318      	orrs	r0, r3
    41f8:	466b      	mov	r3, sp
    41fa:	781b      	ldrb	r3, [r3, #0]
    41fc:	085b      	lsrs	r3, r3, #1
    41fe:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    4200:	466b      	mov	r3, sp
    4202:	88db      	ldrh	r3, [r3, #6]
    4204:	4a05      	ldr	r2, [pc, #20]	; (421c <get_fattime+0x4c>)
    4206:	4694      	mov	ip, r2
    4208:	4463      	add	r3, ip
    420a:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    420c:	4318      	orrs	r0, r3

	return ul_time;
}
    420e:	b003      	add	sp, #12
    4210:	bd00      	pop	{pc}
    4212:	46c0      	nop			; (mov r8, r8)
    4214:	20000620 	.word	0x20000620
    4218:	00002355 	.word	0x00002355
    421c:	fffff844 	.word	0xfffff844

00004220 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    4220:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    4222:	2a00      	cmp	r2, #0
    4224:	d005      	beq.n	4232 <mem_cpy+0x12>
    4226:	2300      	movs	r3, #0
		*d++ = *s++;
    4228:	5ccc      	ldrb	r4, [r1, r3]
    422a:	54c4      	strb	r4, [r0, r3]
    422c:	3301      	adds	r3, #1
	while (cnt--)
    422e:	4293      	cmp	r3, r2
    4230:	d1fa      	bne.n	4228 <mem_cpy+0x8>
}
    4232:	bd10      	pop	{r4, pc}

00004234 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    4234:	2a00      	cmp	r2, #0
    4236:	d005      	beq.n	4244 <mem_set+0x10>
    4238:	0003      	movs	r3, r0
    423a:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    423c:	7019      	strb	r1, [r3, #0]
    423e:	3301      	adds	r3, #1
	while (cnt--)
    4240:	4293      	cmp	r3, r2
    4242:	d1fb      	bne.n	423c <mem_set+0x8>
}
    4244:	4770      	bx	lr

00004246 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    4246:	0002      	movs	r2, r0
	clst -= 2;
    4248:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    424a:	6983      	ldr	r3, [r0, #24]
    424c:	3b02      	subs	r3, #2
    424e:	2000      	movs	r0, #0
    4250:	4299      	cmp	r1, r3
    4252:	d203      	bcs.n	425c <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    4254:	7890      	ldrb	r0, [r2, #2]
    4256:	4341      	muls	r1, r0
    4258:	6a90      	ldr	r0, [r2, #40]	; 0x28
    425a:	1808      	adds	r0, r1, r0
}
    425c:	4770      	bx	lr

0000425e <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    425e:	0002      	movs	r2, r0
    4260:	0001      	movs	r1, r0
    4262:	310b      	adds	r1, #11
	BYTE sum = 0;
    4264:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    4266:	0843      	lsrs	r3, r0, #1
    4268:	01c0      	lsls	r0, r0, #7
    426a:	4303      	orrs	r3, r0
    426c:	7810      	ldrb	r0, [r2, #0]
    426e:	1818      	adds	r0, r3, r0
    4270:	b2c0      	uxtb	r0, r0
    4272:	3201      	adds	r2, #1
    4274:	428a      	cmp	r2, r1
    4276:	d1f6      	bne.n	4266 <sum_sfn+0x8>
	return sum;
}
    4278:	4770      	bx	lr
	...

0000427c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    427c:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    427e:	2800      	cmp	r0, #0
    4280:	d010      	beq.n	42a4 <validate+0x28>
    4282:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    4284:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    4286:	2a00      	cmp	r2, #0
    4288:	d101      	bne.n	428e <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    428a:	0018      	movs	r0, r3
    428c:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    428e:	88c2      	ldrh	r2, [r0, #6]
    4290:	428a      	cmp	r2, r1
    4292:	d1fa      	bne.n	428a <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    4294:	7840      	ldrb	r0, [r0, #1]
    4296:	4b04      	ldr	r3, [pc, #16]	; (42a8 <validate+0x2c>)
    4298:	4798      	blx	r3
		return FR_NOT_READY;
    429a:	2303      	movs	r3, #3
	return FR_OK;
    429c:	07c0      	lsls	r0, r0, #31
    429e:	17c0      	asrs	r0, r0, #31
    42a0:	4003      	ands	r3, r0
    42a2:	e7f2      	b.n	428a <validate+0xe>
		return FR_INVALID_OBJECT;
    42a4:	2309      	movs	r3, #9
    42a6:	e7f0      	b.n	428a <validate+0xe>
    42a8:	00004041 	.word	0x00004041

000042ac <check_fs>:
{
    42ac:	b570      	push	{r4, r5, r6, lr}
    42ae:	0004      	movs	r4, r0
    42b0:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    42b2:	0001      	movs	r1, r0
    42b4:	3130      	adds	r1, #48	; 0x30
    42b6:	7840      	ldrb	r0, [r0, #1]
    42b8:	2301      	movs	r3, #1
    42ba:	4d1f      	ldr	r5, [pc, #124]	; (4338 <check_fs+0x8c>)
    42bc:	47a8      	blx	r5
		return 3;
    42be:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    42c0:	2800      	cmp	r0, #0
    42c2:	d001      	beq.n	42c8 <check_fs+0x1c>
}
    42c4:	0018      	movs	r0, r3
    42c6:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    42c8:	4b1c      	ldr	r3, [pc, #112]	; (433c <check_fs+0x90>)
    42ca:	5ce3      	ldrb	r3, [r4, r3]
    42cc:	021b      	lsls	r3, r3, #8
    42ce:	4a1c      	ldr	r2, [pc, #112]	; (4340 <check_fs+0x94>)
    42d0:	5ca2      	ldrb	r2, [r4, r2]
    42d2:	431a      	orrs	r2, r3
    42d4:	491b      	ldr	r1, [pc, #108]	; (4344 <check_fs+0x98>)
    42d6:	b212      	sxth	r2, r2
		return 2;
    42d8:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    42da:	428a      	cmp	r2, r1
    42dc:	d1f2      	bne.n	42c4 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    42de:	3367      	adds	r3, #103	; 0x67
    42e0:	5ce3      	ldrb	r3, [r4, r3]
    42e2:	061b      	lsls	r3, r3, #24
    42e4:	2268      	movs	r2, #104	; 0x68
    42e6:	5ca2      	ldrb	r2, [r4, r2]
    42e8:	0412      	lsls	r2, r2, #16
    42ea:	4313      	orrs	r3, r2
    42ec:	2266      	movs	r2, #102	; 0x66
    42ee:	5ca2      	ldrb	r2, [r4, r2]
    42f0:	4313      	orrs	r3, r2
    42f2:	2267      	movs	r2, #103	; 0x67
    42f4:	5ca2      	ldrb	r2, [r4, r2]
    42f6:	0212      	lsls	r2, r2, #8
    42f8:	4313      	orrs	r3, r2
    42fa:	021b      	lsls	r3, r3, #8
    42fc:	0a1b      	lsrs	r3, r3, #8
    42fe:	4a12      	ldr	r2, [pc, #72]	; (4348 <check_fs+0x9c>)
    4300:	4293      	cmp	r3, r2
    4302:	d016      	beq.n	4332 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    4304:	2385      	movs	r3, #133	; 0x85
    4306:	5ce3      	ldrb	r3, [r4, r3]
    4308:	061b      	lsls	r3, r3, #24
    430a:	2284      	movs	r2, #132	; 0x84
    430c:	5ca2      	ldrb	r2, [r4, r2]
    430e:	0412      	lsls	r2, r2, #16
    4310:	4313      	orrs	r3, r2
    4312:	2282      	movs	r2, #130	; 0x82
    4314:	5ca2      	ldrb	r2, [r4, r2]
    4316:	4313      	orrs	r3, r2
    4318:	2283      	movs	r2, #131	; 0x83
    431a:	5ca2      	ldrb	r2, [r4, r2]
    431c:	0212      	lsls	r2, r2, #8
    431e:	4313      	orrs	r3, r2
    4320:	021b      	lsls	r3, r3, #8
    4322:	0a1b      	lsrs	r3, r3, #8
    4324:	4a09      	ldr	r2, [pc, #36]	; (434c <check_fs+0xa0>)
    4326:	4694      	mov	ip, r2
    4328:	4463      	add	r3, ip
    432a:	1e58      	subs	r0, r3, #1
    432c:	4183      	sbcs	r3, r0
		return 3;
    432e:	b2db      	uxtb	r3, r3
    4330:	e7c8      	b.n	42c4 <check_fs+0x18>
		return 0;
    4332:	2300      	movs	r3, #0
    4334:	e7c6      	b.n	42c4 <check_fs+0x18>
    4336:	46c0      	nop			; (mov r8, r8)
    4338:	0000405d 	.word	0x0000405d
    433c:	0000022f 	.word	0x0000022f
    4340:	0000022e 	.word	0x0000022e
    4344:	ffffaa55 	.word	0xffffaa55
    4348:	00544146 	.word	0x00544146
    434c:	ffabbeba 	.word	0xffabbeba

00004350 <chk_mounted>:
{
    4350:	b5f0      	push	{r4, r5, r6, r7, lr}
    4352:	46d6      	mov	lr, sl
    4354:	464f      	mov	r7, r9
    4356:	4646      	mov	r6, r8
    4358:	b5c0      	push	{r6, r7, lr}
    435a:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    435c:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    435e:	781c      	ldrb	r4, [r3, #0]
    4360:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    4362:	2c09      	cmp	r4, #9
    4364:	d80e      	bhi.n	4384 <chk_mounted+0x34>
    4366:	785a      	ldrb	r2, [r3, #1]
    4368:	2a3a      	cmp	r2, #58	; 0x3a
    436a:	d001      	beq.n	4370 <chk_mounted+0x20>
    436c:	2400      	movs	r4, #0
    436e:	e00a      	b.n	4386 <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    4370:	3302      	adds	r3, #2
    4372:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    4374:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    4376:	2c03      	cmp	r4, #3
    4378:	d905      	bls.n	4386 <chk_mounted+0x36>
}
    437a:	bc1c      	pop	{r2, r3, r4}
    437c:	4690      	mov	r8, r2
    437e:	4699      	mov	r9, r3
    4380:	46a2      	mov	sl, r4
    4382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4384:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    4386:	00a3      	lsls	r3, r4, #2
    4388:	4ac5      	ldr	r2, [pc, #788]	; (46a0 <chk_mounted+0x350>)
    438a:	589e      	ldr	r6, [r3, r2]
    438c:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    438e:	2e00      	cmp	r6, #0
    4390:	d100      	bne.n	4394 <chk_mounted+0x44>
    4392:	e0e8      	b.n	4566 <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    4394:	7833      	ldrb	r3, [r6, #0]
    4396:	2b00      	cmp	r3, #0
    4398:	d00d      	beq.n	43b6 <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    439a:	7870      	ldrb	r0, [r6, #1]
    439c:	4bc1      	ldr	r3, [pc, #772]	; (46a4 <chk_mounted+0x354>)
    439e:	4798      	blx	r3
    43a0:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    43a2:	07c2      	lsls	r2, r0, #31
    43a4:	d407      	bmi.n	43b6 <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    43a6:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    43a8:	2d00      	cmp	r5, #0
    43aa:	d0e6      	beq.n	437a <chk_mounted+0x2a>
    43ac:	075b      	lsls	r3, r3, #29
    43ae:	d400      	bmi.n	43b2 <chk_mounted+0x62>
    43b0:	e0db      	b.n	456a <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    43b2:	300a      	adds	r0, #10
    43b4:	e7e1      	b.n	437a <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    43b6:	2300      	movs	r3, #0
    43b8:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    43ba:	b2e0      	uxtb	r0, r4
    43bc:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    43be:	4bba      	ldr	r3, [pc, #744]	; (46a8 <chk_mounted+0x358>)
    43c0:	4798      	blx	r3
    43c2:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    43c4:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    43c6:	07da      	lsls	r2, r3, #31
    43c8:	d4d7      	bmi.n	437a <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    43ca:	2d00      	cmp	r5, #0
    43cc:	d002      	beq.n	43d4 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    43ce:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    43d0:	075b      	lsls	r3, r3, #29
    43d2:	d4d2      	bmi.n	437a <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    43d4:	2100      	movs	r1, #0
    43d6:	0030      	movs	r0, r6
    43d8:	4bb4      	ldr	r3, [pc, #720]	; (46ac <chk_mounted+0x35c>)
    43da:	4798      	blx	r3
    43dc:	0003      	movs	r3, r0
    43de:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    43e0:	2801      	cmp	r0, #1
    43e2:	d100      	bne.n	43e6 <chk_mounted+0x96>
    43e4:	e09a      	b.n	451c <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    43e6:	2b03      	cmp	r3, #3
    43e8:	d100      	bne.n	43ec <chk_mounted+0x9c>
    43ea:	e0c0      	b.n	456e <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    43ec:	200d      	movs	r0, #13
    43ee:	2b00      	cmp	r3, #0
    43f0:	d1c3      	bne.n	437a <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    43f2:	333c      	adds	r3, #60	; 0x3c
    43f4:	5cf2      	ldrb	r2, [r6, r3]
    43f6:	0212      	lsls	r2, r2, #8
    43f8:	3b01      	subs	r3, #1
    43fa:	5cf3      	ldrb	r3, [r6, r3]
    43fc:	4313      	orrs	r3, r2
    43fe:	2280      	movs	r2, #128	; 0x80
    4400:	0092      	lsls	r2, r2, #2
    4402:	b21b      	sxth	r3, r3
    4404:	4293      	cmp	r3, r2
    4406:	d1b8      	bne.n	437a <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    4408:	2347      	movs	r3, #71	; 0x47
    440a:	5cf3      	ldrb	r3, [r6, r3]
    440c:	021b      	lsls	r3, r3, #8
    440e:	3abb      	subs	r2, #187	; 0xbb
    4410:	3aff      	subs	r2, #255	; 0xff
    4412:	5cb5      	ldrb	r5, [r6, r2]
    4414:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    4416:	d10d      	bne.n	4434 <chk_mounted+0xe4>
    4418:	2357      	movs	r3, #87	; 0x57
    441a:	5cf5      	ldrb	r5, [r6, r3]
    441c:	062d      	lsls	r5, r5, #24
    441e:	3b01      	subs	r3, #1
    4420:	5cf3      	ldrb	r3, [r6, r3]
    4422:	041b      	lsls	r3, r3, #16
    4424:	431d      	orrs	r5, r3
    4426:	2354      	movs	r3, #84	; 0x54
    4428:	5cf3      	ldrb	r3, [r6, r3]
    442a:	431d      	orrs	r5, r3
    442c:	2355      	movs	r3, #85	; 0x55
    442e:	5cf3      	ldrb	r3, [r6, r3]
    4430:	021b      	lsls	r3, r3, #8
    4432:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    4434:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    4436:	2340      	movs	r3, #64	; 0x40
    4438:	5cf2      	ldrb	r2, [r6, r3]
    443a:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    443c:	1e53      	subs	r3, r2, #1
    443e:	200d      	movs	r0, #13
    4440:	2b01      	cmp	r3, #1
    4442:	d89a      	bhi.n	437a <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    4444:	233d      	movs	r3, #61	; 0x3d
    4446:	5cf1      	ldrb	r1, [r6, r3]
    4448:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    444a:	2900      	cmp	r1, #0
    444c:	d095      	beq.n	437a <chk_mounted+0x2a>
    444e:	1e4b      	subs	r3, r1, #1
    4450:	4219      	tst	r1, r3
    4452:	d192      	bne.n	437a <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    4454:	2342      	movs	r3, #66	; 0x42
    4456:	5cf3      	ldrb	r3, [r6, r3]
    4458:	021b      	lsls	r3, r3, #8
    445a:	3034      	adds	r0, #52	; 0x34
    445c:	5c30      	ldrb	r0, [r6, r0]
    445e:	4318      	orrs	r0, r3
    4460:	4680      	mov	r8, r0
    4462:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    4464:	200d      	movs	r0, #13
    4466:	4643      	mov	r3, r8
    4468:	071b      	lsls	r3, r3, #28
    446a:	d000      	beq.n	446e <chk_mounted+0x11e>
    446c:	e785      	b.n	437a <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    446e:	2344      	movs	r3, #68	; 0x44
    4470:	5cf3      	ldrb	r3, [r6, r3]
    4472:	021b      	lsls	r3, r3, #8
    4474:	3036      	adds	r0, #54	; 0x36
    4476:	5c30      	ldrb	r0, [r6, r0]
    4478:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    447a:	d10d      	bne.n	4498 <chk_mounted+0x148>
    447c:	3353      	adds	r3, #83	; 0x53
    447e:	5cf3      	ldrb	r3, [r6, r3]
    4480:	061b      	lsls	r3, r3, #24
    4482:	2052      	movs	r0, #82	; 0x52
    4484:	5c30      	ldrb	r0, [r6, r0]
    4486:	0400      	lsls	r0, r0, #16
    4488:	4303      	orrs	r3, r0
    448a:	2050      	movs	r0, #80	; 0x50
    448c:	5c30      	ldrb	r0, [r6, r0]
    448e:	4303      	orrs	r3, r0
    4490:	2051      	movs	r0, #81	; 0x51
    4492:	5c30      	ldrb	r0, [r6, r0]
    4494:	0200      	lsls	r0, r0, #8
    4496:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    4498:	203f      	movs	r0, #63	; 0x3f
    449a:	5c30      	ldrb	r0, [r6, r0]
    449c:	0200      	lsls	r0, r0, #8
    449e:	273e      	movs	r7, #62	; 0x3e
    44a0:	5df7      	ldrb	r7, [r6, r7]
    44a2:	4307      	orrs	r7, r0
    44a4:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    44a6:	200d      	movs	r0, #13
    44a8:	2f00      	cmp	r7, #0
    44aa:	d100      	bne.n	44ae <chk_mounted+0x15e>
    44ac:	e765      	b.n	437a <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    44ae:	436a      	muls	r2, r5
    44b0:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    44b2:	4642      	mov	r2, r8
    44b4:	0917      	lsrs	r7, r2, #4
    44b6:	4457      	add	r7, sl
    44b8:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    44ba:	42bb      	cmp	r3, r7
    44bc:	d200      	bcs.n	44c0 <chk_mounted+0x170>
    44be:	e75c      	b.n	437a <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    44c0:	1bd8      	subs	r0, r3, r7
    44c2:	4b7b      	ldr	r3, [pc, #492]	; (46b0 <chk_mounted+0x360>)
    44c4:	4798      	blx	r3
    44c6:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    44c8:	200d      	movs	r0, #13
    44ca:	2b00      	cmp	r3, #0
    44cc:	d100      	bne.n	44d0 <chk_mounted+0x180>
    44ce:	e754      	b.n	437a <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    44d0:	4a78      	ldr	r2, [pc, #480]	; (46b4 <chk_mounted+0x364>)
	fmt = FS_FAT12;
    44d2:	429a      	cmp	r2, r3
    44d4:	4192      	sbcs	r2, r2
    44d6:	4252      	negs	r2, r2
    44d8:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    44da:	4977      	ldr	r1, [pc, #476]	; (46b8 <chk_mounted+0x368>)
    44dc:	428b      	cmp	r3, r1
    44de:	d848      	bhi.n	4572 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    44e0:	3302      	adds	r3, #2
    44e2:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    44e4:	19e7      	adds	r7, r4, r7
    44e6:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    44e8:	4454      	add	r4, sl
    44ea:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    44ec:	200d      	movs	r0, #13
    44ee:	4641      	mov	r1, r8
    44f0:	2900      	cmp	r1, #0
    44f2:	d100      	bne.n	44f6 <chk_mounted+0x1a6>
    44f4:	e741      	b.n	437a <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    44f6:	444c      	add	r4, r9
    44f8:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    44fa:	2a02      	cmp	r2, #2
    44fc:	d12c      	bne.n	4558 <chk_mounted+0x208>
    44fe:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    4500:	496e      	ldr	r1, [pc, #440]	; (46bc <chk_mounted+0x36c>)
    4502:	468c      	mov	ip, r1
    4504:	4463      	add	r3, ip
    4506:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    4508:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    450a:	429d      	cmp	r5, r3
    450c:	d200      	bcs.n	4510 <chk_mounted+0x1c0>
    450e:	e734      	b.n	437a <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    4510:	2301      	movs	r3, #1
    4512:	425b      	negs	r3, r3
    4514:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    4516:	2300      	movs	r3, #0
    4518:	60f3      	str	r3, [r6, #12]
    451a:	e0b6      	b.n	468a <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    451c:	33f2      	adds	r3, #242	; 0xf2
    451e:	33ff      	adds	r3, #255	; 0xff
    4520:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    4522:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    4524:	2b00      	cmp	r3, #0
    4526:	d100      	bne.n	452a <chk_mounted+0x1da>
    4528:	e727      	b.n	437a <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    452a:	23fa      	movs	r3, #250	; 0xfa
    452c:	33ff      	adds	r3, #255	; 0xff
    452e:	5cf4      	ldrb	r4, [r6, r3]
    4530:	0624      	lsls	r4, r4, #24
    4532:	3b01      	subs	r3, #1
    4534:	5cf3      	ldrb	r3, [r6, r3]
    4536:	041b      	lsls	r3, r3, #16
    4538:	431c      	orrs	r4, r3
    453a:	23fb      	movs	r3, #251	; 0xfb
    453c:	005b      	lsls	r3, r3, #1
    453e:	5cf3      	ldrb	r3, [r6, r3]
    4540:	431c      	orrs	r4, r3
    4542:	23f8      	movs	r3, #248	; 0xf8
    4544:	33ff      	adds	r3, #255	; 0xff
    4546:	5cf2      	ldrb	r2, [r6, r3]
    4548:	0212      	lsls	r2, r2, #8
    454a:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    454c:	0021      	movs	r1, r4
    454e:	0030      	movs	r0, r6
    4550:	4b56      	ldr	r3, [pc, #344]	; (46ac <chk_mounted+0x35c>)
    4552:	4798      	blx	r3
    4554:	0003      	movs	r3, r0
    4556:	e746      	b.n	43e6 <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    4558:	2103      	movs	r1, #3
    455a:	4359      	muls	r1, r3
    455c:	0849      	lsrs	r1, r1, #1
    455e:	2001      	movs	r0, #1
    4560:	4003      	ands	r3, r0
    4562:	18cb      	adds	r3, r1, r3
    4564:	e7cc      	b.n	4500 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    4566:	200c      	movs	r0, #12
    4568:	e707      	b.n	437a <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    456a:	2000      	movs	r0, #0
    456c:	e705      	b.n	437a <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    456e:	2001      	movs	r0, #1
    4570:	e703      	b.n	437a <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    4572:	3302      	adds	r3, #2
    4574:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    4576:	19e7      	adds	r7, r4, r7
    4578:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    457a:	4652      	mov	r2, sl
    457c:	18a2      	adds	r2, r4, r2
    457e:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    4580:	200d      	movs	r0, #13
    4582:	4642      	mov	r2, r8
    4584:	2a00      	cmp	r2, #0
    4586:	d000      	beq.n	458a <chk_mounted+0x23a>
    4588:	e6f7      	b.n	437a <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    458a:	225f      	movs	r2, #95	; 0x5f
    458c:	5cb2      	ldrb	r2, [r6, r2]
    458e:	0612      	lsls	r2, r2, #24
    4590:	215e      	movs	r1, #94	; 0x5e
    4592:	5c71      	ldrb	r1, [r6, r1]
    4594:	0409      	lsls	r1, r1, #16
    4596:	430a      	orrs	r2, r1
    4598:	215c      	movs	r1, #92	; 0x5c
    459a:	5c71      	ldrb	r1, [r6, r1]
    459c:	430a      	orrs	r2, r1
    459e:	215d      	movs	r1, #93	; 0x5d
    45a0:	5c71      	ldrb	r1, [r6, r1]
    45a2:	0209      	lsls	r1, r1, #8
    45a4:	430a      	orrs	r2, r1
    45a6:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    45a8:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    45aa:	4a44      	ldr	r2, [pc, #272]	; (46bc <chk_mounted+0x36c>)
    45ac:	4694      	mov	ip, r2
    45ae:	4463      	add	r3, ip
    45b0:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    45b2:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    45b4:	429d      	cmp	r5, r3
    45b6:	d200      	bcs.n	45ba <chk_mounted+0x26a>
    45b8:	e6df      	b.n	437a <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    45ba:	2301      	movs	r3, #1
    45bc:	425b      	negs	r3, r3
    45be:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    45c0:	2300      	movs	r3, #0
    45c2:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    45c4:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    45c6:	3361      	adds	r3, #97	; 0x61
    45c8:	5cf3      	ldrb	r3, [r6, r3]
    45ca:	021b      	lsls	r3, r3, #8
    45cc:	2260      	movs	r2, #96	; 0x60
    45ce:	5cb2      	ldrb	r2, [r6, r2]
    45d0:	431a      	orrs	r2, r3
    45d2:	1912      	adds	r2, r2, r4
    45d4:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    45d6:	0031      	movs	r1, r6
    45d8:	3130      	adds	r1, #48	; 0x30
    45da:	7870      	ldrb	r0, [r6, #1]
    45dc:	2301      	movs	r3, #1
    45de:	4c38      	ldr	r4, [pc, #224]	; (46c0 <chk_mounted+0x370>)
    45e0:	47a0      	blx	r4
    45e2:	2203      	movs	r2, #3
    45e4:	2800      	cmp	r0, #0
    45e6:	d150      	bne.n	468a <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    45e8:	4b36      	ldr	r3, [pc, #216]	; (46c4 <chk_mounted+0x374>)
    45ea:	5cf2      	ldrb	r2, [r6, r3]
    45ec:	0212      	lsls	r2, r2, #8
    45ee:	4b36      	ldr	r3, [pc, #216]	; (46c8 <chk_mounted+0x378>)
    45f0:	5cf3      	ldrb	r3, [r6, r3]
    45f2:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    45f4:	4935      	ldr	r1, [pc, #212]	; (46cc <chk_mounted+0x37c>)
    45f6:	b21b      	sxth	r3, r3
    45f8:	2203      	movs	r2, #3
    45fa:	428b      	cmp	r3, r1
    45fc:	d145      	bne.n	468a <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    45fe:	2333      	movs	r3, #51	; 0x33
    4600:	5cf3      	ldrb	r3, [r6, r3]
    4602:	061b      	lsls	r3, r3, #24
    4604:	322f      	adds	r2, #47	; 0x2f
    4606:	5cb2      	ldrb	r2, [r6, r2]
    4608:	0412      	lsls	r2, r2, #16
    460a:	4313      	orrs	r3, r2
    460c:	2230      	movs	r2, #48	; 0x30
    460e:	5cb2      	ldrb	r2, [r6, r2]
    4610:	4313      	orrs	r3, r2
    4612:	2231      	movs	r2, #49	; 0x31
    4614:	5cb2      	ldrb	r2, [r6, r2]
    4616:	0212      	lsls	r2, r2, #8
    4618:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    461a:	492d      	ldr	r1, [pc, #180]	; (46d0 <chk_mounted+0x380>)
    461c:	2203      	movs	r2, #3
    461e:	428b      	cmp	r3, r1
    4620:	d133      	bne.n	468a <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    4622:	4b2c      	ldr	r3, [pc, #176]	; (46d4 <chk_mounted+0x384>)
    4624:	5cf3      	ldrb	r3, [r6, r3]
    4626:	061b      	lsls	r3, r3, #24
    4628:	4a2b      	ldr	r2, [pc, #172]	; (46d8 <chk_mounted+0x388>)
    462a:	5cb2      	ldrb	r2, [r6, r2]
    462c:	0412      	lsls	r2, r2, #16
    462e:	4313      	orrs	r3, r2
    4630:	2285      	movs	r2, #133	; 0x85
    4632:	0092      	lsls	r2, r2, #2
    4634:	5cb2      	ldrb	r2, [r6, r2]
    4636:	4313      	orrs	r3, r2
    4638:	4a28      	ldr	r2, [pc, #160]	; (46dc <chk_mounted+0x38c>)
    463a:	5cb2      	ldrb	r2, [r6, r2]
    463c:	0212      	lsls	r2, r2, #8
    463e:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    4640:	4927      	ldr	r1, [pc, #156]	; (46e0 <chk_mounted+0x390>)
    4642:	2203      	movs	r2, #3
    4644:	428b      	cmp	r3, r1
    4646:	d120      	bne.n	468a <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    4648:	4b26      	ldr	r3, [pc, #152]	; (46e4 <chk_mounted+0x394>)
    464a:	5cf3      	ldrb	r3, [r6, r3]
    464c:	061b      	lsls	r3, r3, #24
    464e:	4a26      	ldr	r2, [pc, #152]	; (46e8 <chk_mounted+0x398>)
    4650:	5cb2      	ldrb	r2, [r6, r2]
    4652:	0412      	lsls	r2, r2, #16
    4654:	4313      	orrs	r3, r2
    4656:	2287      	movs	r2, #135	; 0x87
    4658:	0092      	lsls	r2, r2, #2
    465a:	5cb2      	ldrb	r2, [r6, r2]
    465c:	4313      	orrs	r3, r2
    465e:	4a23      	ldr	r2, [pc, #140]	; (46ec <chk_mounted+0x39c>)
    4660:	5cb2      	ldrb	r2, [r6, r2]
    4662:	0212      	lsls	r2, r2, #8
    4664:	4313      	orrs	r3, r2
    4666:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    4668:	4b21      	ldr	r3, [pc, #132]	; (46f0 <chk_mounted+0x3a0>)
    466a:	5cf3      	ldrb	r3, [r6, r3]
    466c:	061b      	lsls	r3, r3, #24
    466e:	4a21      	ldr	r2, [pc, #132]	; (46f4 <chk_mounted+0x3a4>)
    4670:	5cb2      	ldrb	r2, [r6, r2]
    4672:	0412      	lsls	r2, r2, #16
    4674:	4313      	orrs	r3, r2
    4676:	2286      	movs	r2, #134	; 0x86
    4678:	0092      	lsls	r2, r2, #2
    467a:	5cb2      	ldrb	r2, [r6, r2]
    467c:	4313      	orrs	r3, r2
    467e:	4a1e      	ldr	r2, [pc, #120]	; (46f8 <chk_mounted+0x3a8>)
    4680:	5cb2      	ldrb	r2, [r6, r2]
    4682:	0212      	lsls	r2, r2, #8
    4684:	4313      	orrs	r3, r2
    4686:	6133      	str	r3, [r6, #16]
    4688:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    468a:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    468c:	4a1b      	ldr	r2, [pc, #108]	; (46fc <chk_mounted+0x3ac>)
    468e:	8813      	ldrh	r3, [r2, #0]
    4690:	3301      	adds	r3, #1
    4692:	b29b      	uxth	r3, r3
    4694:	8013      	strh	r3, [r2, #0]
    4696:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    4698:	2000      	movs	r0, #0
    469a:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    469c:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    469e:	e66c      	b.n	437a <chk_mounted+0x2a>
    46a0:	200002b8 	.word	0x200002b8
    46a4:	00004041 	.word	0x00004041
    46a8:	00003fa5 	.word	0x00003fa5
    46ac:	000042ad 	.word	0x000042ad
    46b0:	00009065 	.word	0x00009065
    46b4:	00000ff5 	.word	0x00000ff5
    46b8:	0000fff5 	.word	0x0000fff5
    46bc:	000001ff 	.word	0x000001ff
    46c0:	0000405d 	.word	0x0000405d
    46c4:	0000022f 	.word	0x0000022f
    46c8:	0000022e 	.word	0x0000022e
    46cc:	ffffaa55 	.word	0xffffaa55
    46d0:	41615252 	.word	0x41615252
    46d4:	00000217 	.word	0x00000217
    46d8:	00000216 	.word	0x00000216
    46dc:	00000215 	.word	0x00000215
    46e0:	61417272 	.word	0x61417272
    46e4:	0000021f 	.word	0x0000021f
    46e8:	0000021e 	.word	0x0000021e
    46ec:	0000021d 	.word	0x0000021d
    46f0:	0000021b 	.word	0x0000021b
    46f4:	0000021a 	.word	0x0000021a
    46f8:	00000219 	.word	0x00000219
    46fc:	200002c8 	.word	0x200002c8

00004700 <move_window>:
{
    4700:	b5f0      	push	{r4, r5, r6, r7, lr}
    4702:	46ce      	mov	lr, r9
    4704:	b500      	push	{lr}
    4706:	b082      	sub	sp, #8
    4708:	0004      	movs	r4, r0
    470a:	000f      	movs	r7, r1
	wsect = fs->winsect;
    470c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    470e:	428d      	cmp	r5, r1
    4710:	d03f      	beq.n	4792 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4712:	7903      	ldrb	r3, [r0, #4]
    4714:	2b00      	cmp	r3, #0
    4716:	d107      	bne.n	4728 <move_window+0x28>
	return FR_OK;
    4718:	2300      	movs	r3, #0
		if (sector) {
    471a:	2f00      	cmp	r7, #0
    471c:	d12c      	bne.n	4778 <move_window+0x78>
}
    471e:	0018      	movs	r0, r3
    4720:	b002      	add	sp, #8
    4722:	bc04      	pop	{r2}
    4724:	4691      	mov	r9, r2
    4726:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4728:	2330      	movs	r3, #48	; 0x30
    472a:	469c      	mov	ip, r3
    472c:	4484      	add	ip, r0
    472e:	4663      	mov	r3, ip
    4730:	4661      	mov	r1, ip
    4732:	9301      	str	r3, [sp, #4]
    4734:	7840      	ldrb	r0, [r0, #1]
    4736:	2301      	movs	r3, #1
    4738:	002a      	movs	r2, r5
    473a:	4e17      	ldr	r6, [pc, #92]	; (4798 <move_window+0x98>)
    473c:	47b0      	blx	r6
				return FR_DISK_ERR;
    473e:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4740:	2800      	cmp	r0, #0
    4742:	d1ec      	bne.n	471e <move_window+0x1e>
			fs->wflag = 0;
    4744:	2300      	movs	r3, #0
    4746:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4748:	6a23      	ldr	r3, [r4, #32]
    474a:	69e2      	ldr	r2, [r4, #28]
    474c:	4694      	mov	ip, r2
    474e:	4463      	add	r3, ip
    4750:	429d      	cmp	r5, r3
    4752:	d2e1      	bcs.n	4718 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4754:	78e6      	ldrb	r6, [r4, #3]
    4756:	2e01      	cmp	r6, #1
    4758:	d9de      	bls.n	4718 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    475a:	4b0f      	ldr	r3, [pc, #60]	; (4798 <move_window+0x98>)
    475c:	4699      	mov	r9, r3
					wsect += fs->fsize;
    475e:	69e3      	ldr	r3, [r4, #28]
    4760:	469c      	mov	ip, r3
    4762:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    4764:	7860      	ldrb	r0, [r4, #1]
    4766:	2301      	movs	r3, #1
    4768:	002a      	movs	r2, r5
    476a:	9901      	ldr	r1, [sp, #4]
    476c:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    476e:	3e01      	subs	r6, #1
    4770:	b2f6      	uxtb	r6, r6
    4772:	2e01      	cmp	r6, #1
    4774:	d1f3      	bne.n	475e <move_window+0x5e>
    4776:	e7cf      	b.n	4718 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    4778:	0021      	movs	r1, r4
    477a:	3130      	adds	r1, #48	; 0x30
    477c:	7860      	ldrb	r0, [r4, #1]
    477e:	3301      	adds	r3, #1
    4780:	003a      	movs	r2, r7
    4782:	4d06      	ldr	r5, [pc, #24]	; (479c <move_window+0x9c>)
    4784:	47a8      	blx	r5
				return FR_DISK_ERR;
    4786:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    4788:	2800      	cmp	r0, #0
    478a:	d1c8      	bne.n	471e <move_window+0x1e>
			fs->winsect = sector;
    478c:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    478e:	2300      	movs	r3, #0
    4790:	e7c5      	b.n	471e <move_window+0x1e>
    4792:	2300      	movs	r3, #0
    4794:	e7c3      	b.n	471e <move_window+0x1e>
    4796:	46c0      	nop			; (mov r8, r8)
    4798:	000040e1 	.word	0x000040e1
    479c:	0000405d 	.word	0x0000405d

000047a0 <get_fat>:
{
    47a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47a2:	0005      	movs	r5, r0
    47a4:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    47a6:	2901      	cmp	r1, #1
    47a8:	d974      	bls.n	4894 <get_fat+0xf4>
		return 1;
    47aa:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    47ac:	69ab      	ldr	r3, [r5, #24]
    47ae:	4299      	cmp	r1, r3
    47b0:	d271      	bcs.n	4896 <get_fat+0xf6>
	switch (fs->fs_type) {
    47b2:	782b      	ldrb	r3, [r5, #0]
    47b4:	2b02      	cmp	r3, #2
    47b6:	d034      	beq.n	4822 <get_fat+0x82>
    47b8:	2b03      	cmp	r3, #3
    47ba:	d049      	beq.n	4850 <get_fat+0xb0>
    47bc:	2b01      	cmp	r3, #1
    47be:	d002      	beq.n	47c6 <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    47c0:	2001      	movs	r0, #1
    47c2:	4240      	negs	r0, r0
    47c4:	e067      	b.n	4896 <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    47c6:	084e      	lsrs	r6, r1, #1
    47c8:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    47ca:	0a71      	lsrs	r1, r6, #9
    47cc:	6a2b      	ldr	r3, [r5, #32]
    47ce:	469c      	mov	ip, r3
    47d0:	4461      	add	r1, ip
    47d2:	0028      	movs	r0, r5
    47d4:	4b30      	ldr	r3, [pc, #192]	; (4898 <get_fat+0xf8>)
    47d6:	4798      	blx	r3
    47d8:	2800      	cmp	r0, #0
    47da:	d002      	beq.n	47e2 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    47dc:	2001      	movs	r0, #1
    47de:	4240      	negs	r0, r0
    47e0:	e059      	b.n	4896 <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    47e2:	05f3      	lsls	r3, r6, #23
    47e4:	0ddb      	lsrs	r3, r3, #23
    47e6:	18eb      	adds	r3, r5, r3
    47e8:	3330      	adds	r3, #48	; 0x30
    47ea:	781f      	ldrb	r7, [r3, #0]
    47ec:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    47ee:	0a71      	lsrs	r1, r6, #9
    47f0:	6a2b      	ldr	r3, [r5, #32]
    47f2:	469c      	mov	ip, r3
    47f4:	4461      	add	r1, ip
    47f6:	0028      	movs	r0, r5
    47f8:	4b27      	ldr	r3, [pc, #156]	; (4898 <get_fat+0xf8>)
    47fa:	4798      	blx	r3
    47fc:	2800      	cmp	r0, #0
    47fe:	d002      	beq.n	4806 <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4800:	2001      	movs	r0, #1
    4802:	4240      	negs	r0, r0
    4804:	e047      	b.n	4896 <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    4806:	05f6      	lsls	r6, r6, #23
    4808:	0df6      	lsrs	r6, r6, #23
    480a:	19ad      	adds	r5, r5, r6
    480c:	3530      	adds	r5, #48	; 0x30
    480e:	7828      	ldrb	r0, [r5, #0]
    4810:	0200      	lsls	r0, r0, #8
    4812:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    4814:	07e3      	lsls	r3, r4, #31
    4816:	d501      	bpl.n	481c <get_fat+0x7c>
    4818:	0900      	lsrs	r0, r0, #4
    481a:	e03c      	b.n	4896 <get_fat+0xf6>
    481c:	0500      	lsls	r0, r0, #20
    481e:	0d00      	lsrs	r0, r0, #20
    4820:	e039      	b.n	4896 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    4822:	0a09      	lsrs	r1, r1, #8
    4824:	6a2b      	ldr	r3, [r5, #32]
    4826:	469c      	mov	ip, r3
    4828:	4461      	add	r1, ip
    482a:	0028      	movs	r0, r5
    482c:	4b1a      	ldr	r3, [pc, #104]	; (4898 <get_fat+0xf8>)
    482e:	4798      	blx	r3
    4830:	2800      	cmp	r0, #0
    4832:	d002      	beq.n	483a <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4834:	2001      	movs	r0, #1
    4836:	4240      	negs	r0, r0
    4838:	e02d      	b.n	4896 <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    483a:	0064      	lsls	r4, r4, #1
    483c:	23ff      	movs	r3, #255	; 0xff
    483e:	005b      	lsls	r3, r3, #1
    4840:	401c      	ands	r4, r3
		return LD_WORD(p);
    4842:	192d      	adds	r5, r5, r4
    4844:	3530      	adds	r5, #48	; 0x30
    4846:	786b      	ldrb	r3, [r5, #1]
    4848:	021b      	lsls	r3, r3, #8
    484a:	7828      	ldrb	r0, [r5, #0]
    484c:	4318      	orrs	r0, r3
    484e:	e022      	b.n	4896 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    4850:	09c9      	lsrs	r1, r1, #7
    4852:	6a2b      	ldr	r3, [r5, #32]
    4854:	469c      	mov	ip, r3
    4856:	4461      	add	r1, ip
    4858:	0028      	movs	r0, r5
    485a:	4b0f      	ldr	r3, [pc, #60]	; (4898 <get_fat+0xf8>)
    485c:	4798      	blx	r3
    485e:	2800      	cmp	r0, #0
    4860:	d002      	beq.n	4868 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4862:	2001      	movs	r0, #1
    4864:	4240      	negs	r0, r0
    4866:	e016      	b.n	4896 <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    4868:	00a4      	lsls	r4, r4, #2
    486a:	23fe      	movs	r3, #254	; 0xfe
    486c:	005b      	lsls	r3, r3, #1
    486e:	401c      	ands	r4, r3
    4870:	0023      	movs	r3, r4
    4872:	3330      	adds	r3, #48	; 0x30
    4874:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    4876:	78d8      	ldrb	r0, [r3, #3]
    4878:	0600      	lsls	r0, r0, #24
    487a:	789a      	ldrb	r2, [r3, #2]
    487c:	0412      	lsls	r2, r2, #16
    487e:	4310      	orrs	r0, r2
    4880:	192c      	adds	r4, r5, r4
    4882:	3430      	adds	r4, #48	; 0x30
    4884:	7822      	ldrb	r2, [r4, #0]
    4886:	4310      	orrs	r0, r2
    4888:	785b      	ldrb	r3, [r3, #1]
    488a:	021b      	lsls	r3, r3, #8
    488c:	4318      	orrs	r0, r3
    488e:	0100      	lsls	r0, r0, #4
    4890:	0900      	lsrs	r0, r0, #4
    4892:	e000      	b.n	4896 <get_fat+0xf6>
		return 1;
    4894:	2001      	movs	r0, #1
}
    4896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4898:	00004701 	.word	0x00004701

0000489c <dir_sdi>:
{
    489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    489e:	0004      	movs	r4, r0
    48a0:	000d      	movs	r5, r1
	dj->index = idx;
    48a2:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    48a4:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    48a6:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    48a8:	2901      	cmp	r1, #1
    48aa:	d003      	beq.n	48b4 <dir_sdi+0x18>
    48ac:	6823      	ldr	r3, [r4, #0]
    48ae:	699a      	ldr	r2, [r3, #24]
    48b0:	4291      	cmp	r1, r2
    48b2:	d300      	bcc.n	48b6 <dir_sdi+0x1a>
}
    48b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    48b6:	2900      	cmp	r1, #0
    48b8:	d119      	bne.n	48ee <dir_sdi+0x52>
    48ba:	781a      	ldrb	r2, [r3, #0]
    48bc:	2a03      	cmp	r2, #3
    48be:	d013      	beq.n	48e8 <dir_sdi+0x4c>
		dj->clust = clst;
    48c0:	2200      	movs	r2, #0
    48c2:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    48c4:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    48c6:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    48c8:	42aa      	cmp	r2, r5
    48ca:	d9f3      	bls.n	48b4 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    48cc:	092a      	lsrs	r2, r5, #4
    48ce:	b292      	uxth	r2, r2
    48d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    48d2:	189b      	adds	r3, r3, r2
    48d4:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    48d6:	6823      	ldr	r3, [r4, #0]
    48d8:	3330      	adds	r3, #48	; 0x30
    48da:	220f      	movs	r2, #15
    48dc:	4015      	ands	r5, r2
    48de:	016d      	lsls	r5, r5, #5
    48e0:	195d      	adds	r5, r3, r5
    48e2:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    48e4:	2000      	movs	r0, #0
    48e6:	e7e5      	b.n	48b4 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    48e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    48ea:	2900      	cmp	r1, #0
    48ec:	d0e8      	beq.n	48c0 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    48ee:	789e      	ldrb	r6, [r3, #2]
    48f0:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    48f2:	42b5      	cmp	r5, r6
    48f4:	d313      	bcc.n	491e <dir_sdi+0x82>
    48f6:	1bad      	subs	r5, r5, r6
    48f8:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    48fa:	4f10      	ldr	r7, [pc, #64]	; (493c <dir_sdi+0xa0>)
    48fc:	e000      	b.n	4900 <dir_sdi+0x64>
    48fe:	001d      	movs	r5, r3
    4900:	6820      	ldr	r0, [r4, #0]
    4902:	47b8      	blx	r7
    4904:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4906:	1c43      	adds	r3, r0, #1
    4908:	d012      	beq.n	4930 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    490a:	2801      	cmp	r0, #1
    490c:	d912      	bls.n	4934 <dir_sdi+0x98>
    490e:	6823      	ldr	r3, [r4, #0]
    4910:	699b      	ldr	r3, [r3, #24]
    4912:	4298      	cmp	r0, r3
    4914:	d210      	bcs.n	4938 <dir_sdi+0x9c>
    4916:	1bab      	subs	r3, r5, r6
    4918:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    491a:	42b5      	cmp	r5, r6
    491c:	d2ef      	bcs.n	48fe <dir_sdi+0x62>
		dj->clust = clst;
    491e:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4920:	6820      	ldr	r0, [r4, #0]
    4922:	4b07      	ldr	r3, [pc, #28]	; (4940 <dir_sdi+0xa4>)
    4924:	4798      	blx	r3
    4926:	092b      	lsrs	r3, r5, #4
    4928:	b29b      	uxth	r3, r3
    492a:	1818      	adds	r0, r3, r0
    492c:	6120      	str	r0, [r4, #16]
    492e:	e7d2      	b.n	48d6 <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4930:	2001      	movs	r0, #1
    4932:	e7bf      	b.n	48b4 <dir_sdi+0x18>
				return FR_INT_ERR;
    4934:	2002      	movs	r0, #2
    4936:	e7bd      	b.n	48b4 <dir_sdi+0x18>
    4938:	2002      	movs	r0, #2
    493a:	e7bb      	b.n	48b4 <dir_sdi+0x18>
    493c:	000047a1 	.word	0x000047a1
    4940:	00004247 	.word	0x00004247

00004944 <put_fat>:
{
    4944:	b5f0      	push	{r4, r5, r6, r7, lr}
    4946:	46c6      	mov	lr, r8
    4948:	b500      	push	{lr}
    494a:	0007      	movs	r7, r0
    494c:	000c      	movs	r4, r1
    494e:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    4950:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4952:	2901      	cmp	r1, #1
    4954:	d902      	bls.n	495c <put_fat+0x18>
    4956:	6983      	ldr	r3, [r0, #24]
    4958:	4299      	cmp	r1, r3
    495a:	d303      	bcc.n	4964 <put_fat+0x20>
}
    495c:	0028      	movs	r0, r5
    495e:	bc04      	pop	{r2}
    4960:	4690      	mov	r8, r2
    4962:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    4964:	7803      	ldrb	r3, [r0, #0]
    4966:	2b02      	cmp	r3, #2
    4968:	d053      	beq.n	4a12 <put_fat+0xce>
    496a:	2b03      	cmp	r3, #3
    496c:	d063      	beq.n	4a36 <put_fat+0xf2>
			res = FR_INT_ERR;
    496e:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    4970:	2b01      	cmp	r3, #1
    4972:	d002      	beq.n	497a <put_fat+0x36>
		fs->wflag = 1;
    4974:	2301      	movs	r3, #1
    4976:	713b      	strb	r3, [r7, #4]
    4978:	e7f0      	b.n	495c <put_fat+0x18>
			bc = clst; bc += bc / 2;
    497a:	084b      	lsrs	r3, r1, #1
    497c:	4698      	mov	r8, r3
    497e:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4980:	4643      	mov	r3, r8
    4982:	0a59      	lsrs	r1, r3, #9
    4984:	6a03      	ldr	r3, [r0, #32]
    4986:	469c      	mov	ip, r3
    4988:	4461      	add	r1, ip
    498a:	4b3b      	ldr	r3, [pc, #236]	; (4a78 <put_fat+0x134>)
    498c:	4798      	blx	r3
    498e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4990:	d1f0      	bne.n	4974 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    4992:	4643      	mov	r3, r8
    4994:	05db      	lsls	r3, r3, #23
    4996:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4998:	07e2      	lsls	r2, r4, #31
    499a:	d51f      	bpl.n	49dc <put_fat+0x98>
    499c:	18fb      	adds	r3, r7, r3
    499e:	3330      	adds	r3, #48	; 0x30
    49a0:	7819      	ldrb	r1, [r3, #0]
    49a2:	220f      	movs	r2, #15
    49a4:	400a      	ands	r2, r1
    49a6:	0131      	lsls	r1, r6, #4
    49a8:	20ff      	movs	r0, #255	; 0xff
    49aa:	0100      	lsls	r0, r0, #4
    49ac:	4001      	ands	r1, r0
    49ae:	430a      	orrs	r2, r1
    49b0:	701a      	strb	r2, [r3, #0]
			bc++;
    49b2:	4644      	mov	r4, r8
    49b4:	3401      	adds	r4, #1
			fs->wflag = 1;
    49b6:	2301      	movs	r3, #1
    49b8:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    49ba:	0a61      	lsrs	r1, r4, #9
    49bc:	6a3b      	ldr	r3, [r7, #32]
    49be:	469c      	mov	ip, r3
    49c0:	4461      	add	r1, ip
    49c2:	0038      	movs	r0, r7
    49c4:	4b2c      	ldr	r3, [pc, #176]	; (4a78 <put_fat+0x134>)
    49c6:	4798      	blx	r3
			if (res != FR_OK) break;
    49c8:	2800      	cmp	r0, #0
    49ca:	d151      	bne.n	4a70 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    49cc:	05e4      	lsls	r4, r4, #23
    49ce:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    49d0:	0936      	lsrs	r6, r6, #4
    49d2:	b2f6      	uxtb	r6, r6
    49d4:	193c      	adds	r4, r7, r4
    49d6:	3430      	adds	r4, #48	; 0x30
    49d8:	7026      	strb	r6, [r4, #0]
			break;
    49da:	e7cb      	b.n	4974 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    49dc:	18fb      	adds	r3, r7, r3
    49de:	3330      	adds	r3, #48	; 0x30
    49e0:	701e      	strb	r6, [r3, #0]
			bc++;
    49e2:	4644      	mov	r4, r8
    49e4:	3401      	adds	r4, #1
			fs->wflag = 1;
    49e6:	2301      	movs	r3, #1
    49e8:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    49ea:	0a61      	lsrs	r1, r4, #9
    49ec:	6a3b      	ldr	r3, [r7, #32]
    49ee:	469c      	mov	ip, r3
    49f0:	4461      	add	r1, ip
    49f2:	0038      	movs	r0, r7
    49f4:	4b20      	ldr	r3, [pc, #128]	; (4a78 <put_fat+0x134>)
    49f6:	4798      	blx	r3
			if (res != FR_OK) break;
    49f8:	2800      	cmp	r0, #0
    49fa:	d13b      	bne.n	4a74 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    49fc:	05e4      	lsls	r4, r4, #23
    49fe:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4a00:	193b      	adds	r3, r7, r4
    4a02:	3330      	adds	r3, #48	; 0x30
    4a04:	781b      	ldrb	r3, [r3, #0]
    4a06:	220f      	movs	r2, #15
    4a08:	4393      	bics	r3, r2
    4a0a:	0536      	lsls	r6, r6, #20
    4a0c:	0f36      	lsrs	r6, r6, #28
    4a0e:	431e      	orrs	r6, r3
    4a10:	e7e0      	b.n	49d4 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    4a12:	0a09      	lsrs	r1, r1, #8
    4a14:	6a03      	ldr	r3, [r0, #32]
    4a16:	469c      	mov	ip, r3
    4a18:	4461      	add	r1, ip
    4a1a:	4b17      	ldr	r3, [pc, #92]	; (4a78 <put_fat+0x134>)
    4a1c:	4798      	blx	r3
    4a1e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4a20:	d1a8      	bne.n	4974 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    4a22:	0063      	lsls	r3, r4, #1
    4a24:	24ff      	movs	r4, #255	; 0xff
    4a26:	0064      	lsls	r4, r4, #1
    4a28:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    4a2a:	18fb      	adds	r3, r7, r3
    4a2c:	3330      	adds	r3, #48	; 0x30
    4a2e:	701e      	strb	r6, [r3, #0]
    4a30:	0a36      	lsrs	r6, r6, #8
    4a32:	705e      	strb	r6, [r3, #1]
			break;
    4a34:	e79e      	b.n	4974 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    4a36:	09c9      	lsrs	r1, r1, #7
    4a38:	6a03      	ldr	r3, [r0, #32]
    4a3a:	469c      	mov	ip, r3
    4a3c:	4461      	add	r1, ip
    4a3e:	4b0e      	ldr	r3, [pc, #56]	; (4a78 <put_fat+0x134>)
    4a40:	4798      	blx	r3
    4a42:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4a44:	d196      	bne.n	4974 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    4a46:	00a4      	lsls	r4, r4, #2
    4a48:	23fe      	movs	r3, #254	; 0xfe
    4a4a:	005b      	lsls	r3, r3, #1
    4a4c:	401c      	ands	r4, r3
    4a4e:	0022      	movs	r2, r4
    4a50:	3230      	adds	r2, #48	; 0x30
    4a52:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    4a54:	78d3      	ldrb	r3, [r2, #3]
    4a56:	193c      	adds	r4, r7, r4
    4a58:	3430      	adds	r4, #48	; 0x30
    4a5a:	091b      	lsrs	r3, r3, #4
    4a5c:	071b      	lsls	r3, r3, #28
    4a5e:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    4a60:	7026      	strb	r6, [r4, #0]
    4a62:	0a33      	lsrs	r3, r6, #8
    4a64:	7053      	strb	r3, [r2, #1]
    4a66:	0c33      	lsrs	r3, r6, #16
    4a68:	7093      	strb	r3, [r2, #2]
    4a6a:	0e36      	lsrs	r6, r6, #24
    4a6c:	70d6      	strb	r6, [r2, #3]
			break;
    4a6e:	e781      	b.n	4974 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4a70:	0005      	movs	r5, r0
    4a72:	e77f      	b.n	4974 <put_fat+0x30>
    4a74:	0005      	movs	r5, r0
    4a76:	e77d      	b.n	4974 <put_fat+0x30>
    4a78:	00004701 	.word	0x00004701

00004a7c <create_chain>:
{
    4a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a7e:	46c6      	mov	lr, r8
    4a80:	b500      	push	{lr}
    4a82:	0005      	movs	r5, r0
    4a84:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    4a86:	2900      	cmp	r1, #0
    4a88:	d107      	bne.n	4a9a <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    4a8a:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4a8c:	2e00      	cmp	r6, #0
    4a8e:	d00d      	beq.n	4aac <create_chain+0x30>
    4a90:	6983      	ldr	r3, [r0, #24]
    4a92:	429e      	cmp	r6, r3
    4a94:	d30b      	bcc.n	4aae <create_chain+0x32>
    4a96:	2601      	movs	r6, #1
    4a98:	e009      	b.n	4aae <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    4a9a:	4b26      	ldr	r3, [pc, #152]	; (4b34 <create_chain+0xb8>)
    4a9c:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    4a9e:	2801      	cmp	r0, #1
    4aa0:	d93d      	bls.n	4b1e <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4aa2:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    4aa4:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4aa6:	4298      	cmp	r0, r3
    4aa8:	d201      	bcs.n	4aae <create_chain+0x32>
    4aaa:	e03d      	b.n	4b28 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4aac:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    4aae:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    4ab0:	4f20      	ldr	r7, [pc, #128]	; (4b34 <create_chain+0xb8>)
    4ab2:	e00a      	b.n	4aca <create_chain+0x4e>
    4ab4:	0021      	movs	r1, r4
    4ab6:	0028      	movs	r0, r5
    4ab8:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    4aba:	2800      	cmp	r0, #0
    4abc:	d00d      	beq.n	4ada <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    4abe:	1c43      	adds	r3, r0, #1
    4ac0:	d032      	beq.n	4b28 <create_chain+0xac>
    4ac2:	2801      	cmp	r0, #1
    4ac4:	d030      	beq.n	4b28 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    4ac6:	42b4      	cmp	r4, r6
    4ac8:	d02d      	beq.n	4b26 <create_chain+0xaa>
		ncl++;							/* Next cluster */
    4aca:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    4acc:	69ab      	ldr	r3, [r5, #24]
    4ace:	429c      	cmp	r4, r3
    4ad0:	d3f0      	bcc.n	4ab4 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    4ad2:	2e01      	cmp	r6, #1
    4ad4:	d925      	bls.n	4b22 <create_chain+0xa6>
			ncl = 2;
    4ad6:	2402      	movs	r4, #2
    4ad8:	e7ec      	b.n	4ab4 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    4ada:	4a17      	ldr	r2, [pc, #92]	; (4b38 <create_chain+0xbc>)
    4adc:	0021      	movs	r1, r4
    4ade:	0028      	movs	r0, r5
    4ae0:	4b16      	ldr	r3, [pc, #88]	; (4b3c <create_chain+0xc0>)
    4ae2:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    4ae4:	2800      	cmp	r0, #0
    4ae6:	d113      	bne.n	4b10 <create_chain+0x94>
    4ae8:	4643      	mov	r3, r8
    4aea:	2b00      	cmp	r3, #0
    4aec:	d109      	bne.n	4b02 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    4aee:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    4af0:	692b      	ldr	r3, [r5, #16]
    4af2:	1c5a      	adds	r2, r3, #1
    4af4:	d01b      	beq.n	4b2e <create_chain+0xb2>
			fs->free_clust--;
    4af6:	3b01      	subs	r3, #1
    4af8:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    4afa:	2301      	movs	r3, #1
    4afc:	716b      	strb	r3, [r5, #5]
    4afe:	0020      	movs	r0, r4
    4b00:	e012      	b.n	4b28 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    4b02:	0022      	movs	r2, r4
    4b04:	4641      	mov	r1, r8
    4b06:	0028      	movs	r0, r5
    4b08:	4b0c      	ldr	r3, [pc, #48]	; (4b3c <create_chain+0xc0>)
    4b0a:	4798      	blx	r3
	if (res == FR_OK) {
    4b0c:	2800      	cmp	r0, #0
    4b0e:	d0ee      	beq.n	4aee <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4b10:	3801      	subs	r0, #1
    4b12:	4242      	negs	r2, r0
    4b14:	4142      	adcs	r2, r0
    4b16:	4250      	negs	r0, r2
    4b18:	2301      	movs	r3, #1
    4b1a:	4318      	orrs	r0, r3
    4b1c:	e004      	b.n	4b28 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    4b1e:	2001      	movs	r0, #1
    4b20:	e002      	b.n	4b28 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    4b22:	2000      	movs	r0, #0
    4b24:	e000      	b.n	4b28 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    4b26:	2000      	movs	r0, #0
}
    4b28:	bc04      	pop	{r2}
    4b2a:	4690      	mov	r8, r2
    4b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b2e:	0020      	movs	r0, r4
    4b30:	e7fa      	b.n	4b28 <create_chain+0xac>
    4b32:	46c0      	nop			; (mov r8, r8)
    4b34:	000047a1 	.word	0x000047a1
    4b38:	0fffffff 	.word	0x0fffffff
    4b3c:	00004945 	.word	0x00004945

00004b40 <remove_chain>:
{
    4b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b42:	46ce      	mov	lr, r9
    4b44:	4647      	mov	r7, r8
    4b46:	b580      	push	{r7, lr}
    4b48:	0004      	movs	r4, r0
    4b4a:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    4b4c:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4b4e:	2901      	cmp	r1, #1
    4b50:	d902      	bls.n	4b58 <remove_chain+0x18>
    4b52:	69a3      	ldr	r3, [r4, #24]
    4b54:	4299      	cmp	r1, r3
    4b56:	d303      	bcc.n	4b60 <remove_chain+0x20>
}
    4b58:	bc0c      	pop	{r2, r3}
    4b5a:	4690      	mov	r8, r2
    4b5c:	4699      	mov	r9, r3
    4b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4b60:	4f13      	ldr	r7, [pc, #76]	; (4bb0 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    4b62:	4b14      	ldr	r3, [pc, #80]	; (4bb4 <remove_chain+0x74>)
    4b64:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    4b66:	2301      	movs	r3, #1
    4b68:	4699      	mov	r9, r3
    4b6a:	e003      	b.n	4b74 <remove_chain+0x34>
    4b6c:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    4b6e:	69a3      	ldr	r3, [r4, #24]
    4b70:	42b3      	cmp	r3, r6
    4b72:	d9f1      	bls.n	4b58 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4b74:	0029      	movs	r1, r5
    4b76:	0020      	movs	r0, r4
    4b78:	47b8      	blx	r7
    4b7a:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    4b7c:	d011      	beq.n	4ba2 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4b7e:	2801      	cmp	r0, #1
    4b80:	d011      	beq.n	4ba6 <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    4b82:	1c43      	adds	r3, r0, #1
    4b84:	d011      	beq.n	4baa <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    4b86:	2200      	movs	r2, #0
    4b88:	0029      	movs	r1, r5
    4b8a:	0020      	movs	r0, r4
    4b8c:	47c0      	blx	r8
			if (res != FR_OK) break;
    4b8e:	2800      	cmp	r0, #0
    4b90:	d1e2      	bne.n	4b58 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    4b92:	6923      	ldr	r3, [r4, #16]
    4b94:	1c5a      	adds	r2, r3, #1
    4b96:	d0e9      	beq.n	4b6c <remove_chain+0x2c>
				fs->free_clust++;
    4b98:	3301      	adds	r3, #1
    4b9a:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    4b9c:	464b      	mov	r3, r9
    4b9e:	7163      	strb	r3, [r4, #5]
    4ba0:	e7e4      	b.n	4b6c <remove_chain+0x2c>
    4ba2:	2000      	movs	r0, #0
    4ba4:	e7d8      	b.n	4b58 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4ba6:	2002      	movs	r0, #2
    4ba8:	e7d6      	b.n	4b58 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    4baa:	2001      	movs	r0, #1
    4bac:	e7d4      	b.n	4b58 <remove_chain+0x18>
    4bae:	46c0      	nop			; (mov r8, r8)
    4bb0:	000047a1 	.word	0x000047a1
    4bb4:	00004945 	.word	0x00004945

00004bb8 <dir_next>:
{
    4bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bba:	46d6      	mov	lr, sl
    4bbc:	4647      	mov	r7, r8
    4bbe:	b580      	push	{r7, lr}
    4bc0:	0006      	movs	r6, r0
    4bc2:	000d      	movs	r5, r1
	i = dj->index + 1;
    4bc4:	88c4      	ldrh	r4, [r0, #6]
    4bc6:	3401      	adds	r4, #1
    4bc8:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    4bca:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4bcc:	2c00      	cmp	r4, #0
    4bce:	d103      	bne.n	4bd8 <dir_next+0x20>
}
    4bd0:	bc0c      	pop	{r2, r3}
    4bd2:	4690      	mov	r8, r2
    4bd4:	469a      	mov	sl, r3
    4bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4bd8:	6933      	ldr	r3, [r6, #16]
    4bda:	2b00      	cmp	r3, #0
    4bdc:	d0f8      	beq.n	4bd0 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    4bde:	270f      	movs	r7, #15
    4be0:	4027      	ands	r7, r4
    4be2:	d10f      	bne.n	4c04 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    4be4:	3301      	adds	r3, #1
    4be6:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    4be8:	68f1      	ldr	r1, [r6, #12]
    4bea:	2900      	cmp	r1, #0
    4bec:	d104      	bne.n	4bf8 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    4bee:	6833      	ldr	r3, [r6, #0]
    4bf0:	891b      	ldrh	r3, [r3, #8]
    4bf2:	42a3      	cmp	r3, r4
    4bf4:	d9ec      	bls.n	4bd0 <dir_next+0x18>
    4bf6:	e005      	b.n	4c04 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    4bf8:	6830      	ldr	r0, [r6, #0]
    4bfa:	7883      	ldrb	r3, [r0, #2]
    4bfc:	3b01      	subs	r3, #1
    4bfe:	0922      	lsrs	r2, r4, #4
    4c00:	421a      	tst	r2, r3
    4c02:	d007      	beq.n	4c14 <dir_next+0x5c>
	dj->index = i;
    4c04:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    4c06:	6833      	ldr	r3, [r6, #0]
    4c08:	3330      	adds	r3, #48	; 0x30
    4c0a:	017f      	lsls	r7, r7, #5
    4c0c:	19df      	adds	r7, r3, r7
    4c0e:	6177      	str	r7, [r6, #20]
	return FR_OK;
    4c10:	2000      	movs	r0, #0
    4c12:	e7dd      	b.n	4bd0 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    4c14:	4b2c      	ldr	r3, [pc, #176]	; (4cc8 <dir_next+0x110>)
    4c16:	4798      	blx	r3
    4c18:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    4c1a:	2002      	movs	r0, #2
    4c1c:	4643      	mov	r3, r8
    4c1e:	2b01      	cmp	r3, #1
    4c20:	d9d6      	bls.n	4bd0 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4c22:	3301      	adds	r3, #1
    4c24:	d04b      	beq.n	4cbe <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    4c26:	6833      	ldr	r3, [r6, #0]
    4c28:	699a      	ldr	r2, [r3, #24]
    4c2a:	4590      	cmp	r8, r2
    4c2c:	d33f      	bcc.n	4cae <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    4c2e:	3002      	adds	r0, #2
    4c30:	2d00      	cmp	r5, #0
    4c32:	d0cd      	beq.n	4bd0 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    4c34:	68f1      	ldr	r1, [r6, #12]
    4c36:	0018      	movs	r0, r3
    4c38:	4b24      	ldr	r3, [pc, #144]	; (4ccc <dir_next+0x114>)
    4c3a:	4798      	blx	r3
    4c3c:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    4c3e:	2007      	movs	r0, #7
    4c40:	4643      	mov	r3, r8
    4c42:	2b00      	cmp	r3, #0
    4c44:	d0c4      	beq.n	4bd0 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    4c46:	3805      	subs	r0, #5
    4c48:	2b01      	cmp	r3, #1
    4c4a:	d0c1      	beq.n	4bd0 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4c4c:	3801      	subs	r0, #1
    4c4e:	3301      	adds	r3, #1
    4c50:	d0be      	beq.n	4bd0 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    4c52:	2100      	movs	r1, #0
    4c54:	6830      	ldr	r0, [r6, #0]
    4c56:	4b1e      	ldr	r3, [pc, #120]	; (4cd0 <dir_next+0x118>)
    4c58:	4798      	blx	r3
    4c5a:	0003      	movs	r3, r0
    4c5c:	2001      	movs	r0, #1
    4c5e:	2b00      	cmp	r3, #0
    4c60:	d1b6      	bne.n	4bd0 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    4c62:	6830      	ldr	r0, [r6, #0]
    4c64:	3030      	adds	r0, #48	; 0x30
    4c66:	2280      	movs	r2, #128	; 0x80
    4c68:	0092      	lsls	r2, r2, #2
    4c6a:	2100      	movs	r1, #0
    4c6c:	4b19      	ldr	r3, [pc, #100]	; (4cd4 <dir_next+0x11c>)
    4c6e:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    4c70:	6835      	ldr	r5, [r6, #0]
    4c72:	4641      	mov	r1, r8
    4c74:	0028      	movs	r0, r5
    4c76:	4b18      	ldr	r3, [pc, #96]	; (4cd8 <dir_next+0x120>)
    4c78:	4798      	blx	r3
    4c7a:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4c7c:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    4c7e:	2301      	movs	r3, #1
    4c80:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4c82:	6833      	ldr	r3, [r6, #0]
    4c84:	789a      	ldrb	r2, [r3, #2]
    4c86:	42aa      	cmp	r2, r5
    4c88:	d90e      	bls.n	4ca8 <dir_next+0xf0>
						dj->fs->wflag = 1;
    4c8a:	4652      	mov	r2, sl
    4c8c:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4c8e:	2100      	movs	r1, #0
    4c90:	6830      	ldr	r0, [r6, #0]
    4c92:	4b0f      	ldr	r3, [pc, #60]	; (4cd0 <dir_next+0x118>)
    4c94:	4798      	blx	r3
    4c96:	2800      	cmp	r0, #0
    4c98:	d113      	bne.n	4cc2 <dir_next+0x10a>
						dj->fs->winsect++;
    4c9a:	6832      	ldr	r2, [r6, #0]
    4c9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4c9e:	3301      	adds	r3, #1
    4ca0:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4ca2:	3501      	adds	r5, #1
    4ca4:	b2ed      	uxtb	r5, r5
    4ca6:	e7ec      	b.n	4c82 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    4ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4caa:	1b52      	subs	r2, r2, r5
    4cac:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    4cae:	4643      	mov	r3, r8
    4cb0:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    4cb2:	4641      	mov	r1, r8
    4cb4:	6830      	ldr	r0, [r6, #0]
    4cb6:	4b08      	ldr	r3, [pc, #32]	; (4cd8 <dir_next+0x120>)
    4cb8:	4798      	blx	r3
    4cba:	6130      	str	r0, [r6, #16]
    4cbc:	e7a2      	b.n	4c04 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4cbe:	2001      	movs	r0, #1
    4cc0:	e786      	b.n	4bd0 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4cc2:	2001      	movs	r0, #1
    4cc4:	e784      	b.n	4bd0 <dir_next+0x18>
    4cc6:	46c0      	nop			; (mov r8, r8)
    4cc8:	000047a1 	.word	0x000047a1
    4ccc:	00004a7d 	.word	0x00004a7d
    4cd0:	00004701 	.word	0x00004701
    4cd4:	00004235 	.word	0x00004235
    4cd8:	00004247 	.word	0x00004247

00004cdc <dir_find>:
{
    4cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cde:	46de      	mov	lr, fp
    4ce0:	4657      	mov	r7, sl
    4ce2:	464e      	mov	r6, r9
    4ce4:	4645      	mov	r5, r8
    4ce6:	b5e0      	push	{r5, r6, r7, lr}
    4ce8:	b083      	sub	sp, #12
    4cea:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    4cec:	2100      	movs	r1, #0
    4cee:	4b5a      	ldr	r3, [pc, #360]	; (4e58 <dir_find+0x17c>)
    4cf0:	4798      	blx	r3
    4cf2:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    4cf4:	d000      	beq.n	4cf8 <dir_find+0x1c>
    4cf6:	e09e      	b.n	4e36 <dir_find+0x15a>
    4cf8:	23ff      	movs	r3, #255	; 0xff
    4cfa:	4699      	mov	r9, r3
    4cfc:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    4cfe:	4b57      	ldr	r3, [pc, #348]	; (4e5c <dir_find+0x180>)
    4d00:	469b      	mov	fp, r3
    4d02:	e01b      	b.n	4d3c <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    4d04:	2b0f      	cmp	r3, #15
    4d06:	d030      	beq.n	4d6a <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    4d08:	4653      	mov	r3, sl
    4d0a:	2b00      	cmp	r3, #0
    4d0c:	d105      	bne.n	4d1a <dir_find+0x3e>
    4d0e:	0020      	movs	r0, r4
    4d10:	4b53      	ldr	r3, [pc, #332]	; (4e60 <dir_find+0x184>)
    4d12:	4798      	blx	r3
    4d14:	4581      	cmp	r9, r0
    4d16:	d100      	bne.n	4d1a <dir_find+0x3e>
    4d18:	e08d      	b.n	4e36 <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4d1a:	2301      	movs	r3, #1
    4d1c:	425b      	negs	r3, r3
    4d1e:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    4d20:	69a8      	ldr	r0, [r5, #24]
    4d22:	7ac3      	ldrb	r3, [r0, #11]
    4d24:	07db      	lsls	r3, r3, #31
    4d26:	d400      	bmi.n	4d2a <dir_find+0x4e>
    4d28:	e07d      	b.n	4e26 <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4d2a:	23ff      	movs	r3, #255	; 0xff
    4d2c:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    4d2e:	2100      	movs	r1, #0
    4d30:	0028      	movs	r0, r5
    4d32:	4b4c      	ldr	r3, [pc, #304]	; (4e64 <dir_find+0x188>)
    4d34:	4798      	blx	r3
    4d36:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    4d38:	d000      	beq.n	4d3c <dir_find+0x60>
    4d3a:	e07c      	b.n	4e36 <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    4d3c:	6929      	ldr	r1, [r5, #16]
    4d3e:	6828      	ldr	r0, [r5, #0]
    4d40:	47d8      	blx	fp
    4d42:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    4d44:	d177      	bne.n	4e36 <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    4d46:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    4d48:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4d4a:	2e00      	cmp	r6, #0
    4d4c:	d100      	bne.n	4d50 <dir_find+0x74>
    4d4e:	e080      	b.n	4e52 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    4d50:	7ae2      	ldrb	r2, [r4, #11]
    4d52:	233f      	movs	r3, #63	; 0x3f
    4d54:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    4d56:	2ee5      	cmp	r6, #229	; 0xe5
    4d58:	d100      	bne.n	4d5c <dir_find+0x80>
    4d5a:	e077      	b.n	4e4c <dir_find+0x170>
    4d5c:	0712      	lsls	r2, r2, #28
    4d5e:	d5d1      	bpl.n	4d04 <dir_find+0x28>
    4d60:	2b0f      	cmp	r3, #15
    4d62:	d002      	beq.n	4d6a <dir_find+0x8e>
			ord = 0xFF;
    4d64:	23ff      	movs	r3, #255	; 0xff
    4d66:	469a      	mov	sl, r3
    4d68:	e7e1      	b.n	4d2e <dir_find+0x52>
				if (dj->lfn) {
    4d6a:	69ef      	ldr	r7, [r5, #28]
    4d6c:	2f00      	cmp	r7, #0
    4d6e:	d0de      	beq.n	4d2e <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    4d70:	0673      	lsls	r3, r6, #25
    4d72:	d518      	bpl.n	4da6 <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    4d74:	7b63      	ldrb	r3, [r4, #13]
    4d76:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    4d78:	2340      	movs	r3, #64	; 0x40
    4d7a:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    4d7c:	88eb      	ldrh	r3, [r5, #6]
    4d7e:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4d80:	7b63      	ldrb	r3, [r4, #13]
    4d82:	9300      	str	r3, [sp, #0]
    4d84:	22ff      	movs	r2, #255	; 0xff
    4d86:	4692      	mov	sl, r2
    4d88:	454b      	cmp	r3, r9
    4d8a:	d1d0      	bne.n	4d2e <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    4d8c:	7823      	ldrb	r3, [r4, #0]
    4d8e:	3abf      	subs	r2, #191	; 0xbf
    4d90:	4393      	bics	r3, r2
    4d92:	3b01      	subs	r3, #1
    4d94:	005a      	lsls	r2, r3, #1
    4d96:	18d2      	adds	r2, r2, r3
    4d98:	0092      	lsls	r2, r2, #2
    4d9a:	4692      	mov	sl, r2
    4d9c:	449a      	add	sl, r3
	s = 0; wc = 1;
    4d9e:	2201      	movs	r2, #1
    4da0:	2300      	movs	r3, #0
    4da2:	4699      	mov	r9, r3
    4da4:	e01d      	b.n	4de2 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4da6:	45b2      	cmp	sl, r6
    4da8:	d0ea      	beq.n	4d80 <dir_find+0xa4>
    4daa:	23ff      	movs	r3, #255	; 0xff
    4dac:	469a      	mov	sl, r3
    4dae:	e7be      	b.n	4d2e <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    4db0:	4b2d      	ldr	r3, [pc, #180]	; (4e68 <dir_find+0x18c>)
    4db2:	4798      	blx	r3
    4db4:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    4db6:	4653      	mov	r3, sl
    4db8:	2bfe      	cmp	r3, #254	; 0xfe
    4dba:	d81f      	bhi.n	4dfc <dir_find+0x120>
    4dbc:	2301      	movs	r3, #1
    4dbe:	4453      	add	r3, sl
    4dc0:	4698      	mov	r8, r3
    4dc2:	4653      	mov	r3, sl
    4dc4:	005b      	lsls	r3, r3, #1
    4dc6:	5bd8      	ldrh	r0, [r3, r7]
    4dc8:	4b27      	ldr	r3, [pc, #156]	; (4e68 <dir_find+0x18c>)
    4dca:	4798      	blx	r3
    4dcc:	0002      	movs	r2, r0
    4dce:	9b01      	ldr	r3, [sp, #4]
    4dd0:	4283      	cmp	r3, r0
    4dd2:	d113      	bne.n	4dfc <dir_find+0x120>
    4dd4:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    4dd6:	2301      	movs	r3, #1
    4dd8:	469c      	mov	ip, r3
    4dda:	44e1      	add	r9, ip
    4ddc:	464b      	mov	r3, r9
    4dde:	2b0d      	cmp	r3, #13
    4de0:	d011      	beq.n	4e06 <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    4de2:	4b22      	ldr	r3, [pc, #136]	; (4e6c <dir_find+0x190>)
    4de4:	4649      	mov	r1, r9
    4de6:	5cc9      	ldrb	r1, [r1, r3]
    4de8:	1863      	adds	r3, r4, r1
    4dea:	785b      	ldrb	r3, [r3, #1]
    4dec:	021b      	lsls	r3, r3, #8
    4dee:	5c60      	ldrb	r0, [r4, r1]
    4df0:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    4df2:	2a00      	cmp	r2, #0
    4df4:	d1dc      	bne.n	4db0 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    4df6:	4b1e      	ldr	r3, [pc, #120]	; (4e70 <dir_find+0x194>)
    4df8:	4298      	cmp	r0, r3
    4dfa:	d0ec      	beq.n	4dd6 <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4dfc:	9b00      	ldr	r3, [sp, #0]
    4dfe:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4e00:	23ff      	movs	r3, #255	; 0xff
    4e02:	469a      	mov	sl, r3
    4e04:	e793      	b.n	4d2e <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    4e06:	7823      	ldrb	r3, [r4, #0]
    4e08:	065b      	lsls	r3, r3, #25
    4e0a:	d506      	bpl.n	4e1a <dir_find+0x13e>
    4e0c:	2a00      	cmp	r2, #0
    4e0e:	d004      	beq.n	4e1a <dir_find+0x13e>
    4e10:	4653      	mov	r3, sl
    4e12:	005b      	lsls	r3, r3, #1
    4e14:	5bdb      	ldrh	r3, [r3, r7]
    4e16:	2b00      	cmp	r3, #0
    4e18:	d1f0      	bne.n	4dfc <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4e1a:	3e01      	subs	r6, #1
    4e1c:	b2f3      	uxtb	r3, r6
    4e1e:	469a      	mov	sl, r3
    4e20:	9b00      	ldr	r3, [sp, #0]
    4e22:	4699      	mov	r9, r3
    4e24:	e783      	b.n	4d2e <dir_find+0x52>
    4e26:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    4e28:	5ce1      	ldrb	r1, [r4, r3]
    4e2a:	5cc2      	ldrb	r2, [r0, r3]
    4e2c:	4291      	cmp	r1, r2
    4e2e:	d10a      	bne.n	4e46 <dir_find+0x16a>
    4e30:	3301      	adds	r3, #1
    4e32:	2b0b      	cmp	r3, #11
    4e34:	d1f8      	bne.n	4e28 <dir_find+0x14c>
}
    4e36:	0038      	movs	r0, r7
    4e38:	b003      	add	sp, #12
    4e3a:	bc3c      	pop	{r2, r3, r4, r5}
    4e3c:	4690      	mov	r8, r2
    4e3e:	4699      	mov	r9, r3
    4e40:	46a2      	mov	sl, r4
    4e42:	46ab      	mov	fp, r5
    4e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4e46:	23ff      	movs	r3, #255	; 0xff
    4e48:	469a      	mov	sl, r3
    4e4a:	e770      	b.n	4d2e <dir_find+0x52>
			ord = 0xFF;
    4e4c:	23ff      	movs	r3, #255	; 0xff
    4e4e:	469a      	mov	sl, r3
    4e50:	e76d      	b.n	4d2e <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4e52:	2704      	movs	r7, #4
    4e54:	e7ef      	b.n	4e36 <dir_find+0x15a>
    4e56:	46c0      	nop			; (mov r8, r8)
    4e58:	0000489d 	.word	0x0000489d
    4e5c:	00004701 	.word	0x00004701
    4e60:	0000425f 	.word	0x0000425f
    4e64:	00004bb9 	.word	0x00004bb9
    4e68:	00005bf5 	.word	0x00005bf5
    4e6c:	0000a900 	.word	0x0000a900
    4e70:	0000ffff 	.word	0x0000ffff

00004e74 <dir_register>:
{
    4e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e76:	46de      	mov	lr, fp
    4e78:	4657      	mov	r7, sl
    4e7a:	464e      	mov	r6, r9
    4e7c:	4645      	mov	r5, r8
    4e7e:	b5e0      	push	{r5, r6, r7, lr}
    4e80:	b089      	sub	sp, #36	; 0x24
    4e82:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    4e84:	6987      	ldr	r7, [r0, #24]
    4e86:	69c3      	ldr	r3, [r0, #28]
    4e88:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    4e8a:	ad05      	add	r5, sp, #20
    4e8c:	220c      	movs	r2, #12
    4e8e:	0039      	movs	r1, r7
    4e90:	0028      	movs	r0, r5
    4e92:	4ba7      	ldr	r3, [pc, #668]	; (5130 <dir_register+0x2bc>)
    4e94:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    4e96:	7aeb      	ldrb	r3, [r5, #11]
    4e98:	07db      	lsls	r3, r3, #31
    4e9a:	d400      	bmi.n	4e9e <dir_register+0x2a>
    4e9c:	e070      	b.n	4f80 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    4e9e:	2300      	movs	r3, #0
    4ea0:	72fb      	strb	r3, [r7, #11]
    4ea2:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    4ea4:	220b      	movs	r2, #11
    4ea6:	a905      	add	r1, sp, #20
    4ea8:	0038      	movs	r0, r7
    4eaa:	4ba1      	ldr	r3, [pc, #644]	; (5130 <dir_register+0x2bc>)
    4eac:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4eae:	2301      	movs	r3, #1
		ns[i--] = c;
    4eb0:	ad03      	add	r5, sp, #12
    4eb2:	001e      	movs	r6, r3
    4eb4:	46a0      	mov	r8, r4
    4eb6:	e049      	b.n	4f4c <dir_register+0xd8>
    4eb8:	3801      	subs	r0, #1
    4eba:	1829      	adds	r1, r5, r0
    4ebc:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    4ebe:	091b      	lsrs	r3, r3, #4
    4ec0:	b29b      	uxth	r3, r3
	} while (seq);
    4ec2:	2b00      	cmp	r3, #0
    4ec4:	d007      	beq.n	4ed6 <dir_register+0x62>
		c = (seq % 16) + '0';
    4ec6:	0021      	movs	r1, r4
    4ec8:	4019      	ands	r1, r3
    4eca:	000a      	movs	r2, r1
    4ecc:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    4ece:	2a39      	cmp	r2, #57	; 0x39
    4ed0:	d9f2      	bls.n	4eb8 <dir_register+0x44>
    4ed2:	3207      	adds	r2, #7
    4ed4:	e7f0      	b.n	4eb8 <dir_register+0x44>
	ns[i] = '~';
    4ed6:	337e      	adds	r3, #126	; 0x7e
    4ed8:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    4eda:	2800      	cmp	r0, #0
    4edc:	d00a      	beq.n	4ef4 <dir_register+0x80>
    4ede:	783b      	ldrb	r3, [r7, #0]
    4ee0:	2b20      	cmp	r3, #32
    4ee2:	d009      	beq.n	4ef8 <dir_register+0x84>
    4ee4:	2300      	movs	r3, #0
    4ee6:	3301      	adds	r3, #1
    4ee8:	4298      	cmp	r0, r3
    4eea:	d007      	beq.n	4efc <dir_register+0x88>
    4eec:	5cfa      	ldrb	r2, [r7, r3]
    4eee:	2a20      	cmp	r2, #32
    4ef0:	d1f9      	bne.n	4ee6 <dir_register+0x72>
    4ef2:	e009      	b.n	4f08 <dir_register+0x94>
    4ef4:	0003      	movs	r3, r0
    4ef6:	e007      	b.n	4f08 <dir_register+0x94>
    4ef8:	2300      	movs	r3, #0
    4efa:	e005      	b.n	4f08 <dir_register+0x94>
    4efc:	0003      	movs	r3, r0
    4efe:	e003      	b.n	4f08 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4f00:	54fa      	strb	r2, [r7, r3]
    4f02:	3301      	adds	r3, #1
	} while (j < 8);
    4f04:	2b07      	cmp	r3, #7
    4f06:	d805      	bhi.n	4f14 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4f08:	2220      	movs	r2, #32
    4f0a:	2807      	cmp	r0, #7
    4f0c:	d8f8      	bhi.n	4f00 <dir_register+0x8c>
    4f0e:	5c2a      	ldrb	r2, [r5, r0]
    4f10:	3001      	adds	r0, #1
    4f12:	e7f5      	b.n	4f00 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    4f14:	4640      	mov	r0, r8
    4f16:	4b87      	ldr	r3, [pc, #540]	; (5134 <dir_register+0x2c0>)
    4f18:	4798      	blx	r3
			if (res != FR_OK) break;
    4f1a:	2800      	cmp	r0, #0
    4f1c:	d11c      	bne.n	4f58 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    4f1e:	3601      	adds	r6, #1
    4f20:	b2b6      	uxth	r6, r6
    4f22:	2e64      	cmp	r6, #100	; 0x64
    4f24:	d015      	beq.n	4f52 <dir_register+0xde>
	mem_cpy(dst, src, 11);
    4f26:	220b      	movs	r2, #11
    4f28:	a905      	add	r1, sp, #20
    4f2a:	0038      	movs	r0, r7
    4f2c:	4b80      	ldr	r3, [pc, #512]	; (5130 <dir_register+0x2bc>)
    4f2e:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4f30:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    4f32:	2e05      	cmp	r6, #5
    4f34:	d90a      	bls.n	4f4c <dir_register+0xd8>
    4f36:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    4f38:	085a      	lsrs	r2, r3, #1
    4f3a:	03db      	lsls	r3, r3, #15
    4f3c:	4313      	orrs	r3, r2
    4f3e:	880a      	ldrh	r2, [r1, #0]
    4f40:	189b      	adds	r3, r3, r2
    4f42:	b29b      	uxth	r3, r3
    4f44:	3102      	adds	r1, #2
    4f46:	880a      	ldrh	r2, [r1, #0]
    4f48:	2a00      	cmp	r2, #0
    4f4a:	d1f5      	bne.n	4f38 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    4f4c:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    4f4e:	240f      	movs	r4, #15
    4f50:	e7b9      	b.n	4ec6 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4f52:	2307      	movs	r3, #7
    4f54:	4698      	mov	r8, r3
    4f56:	e006      	b.n	4f66 <dir_register+0xf2>
    4f58:	4644      	mov	r4, r8
    4f5a:	4680      	mov	r8, r0
    4f5c:	2e64      	cmp	r6, #100	; 0x64
    4f5e:	d100      	bne.n	4f62 <dir_register+0xee>
    4f60:	e0a5      	b.n	50ae <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    4f62:	2804      	cmp	r0, #4
    4f64:	d007      	beq.n	4f76 <dir_register+0x102>
}
    4f66:	4640      	mov	r0, r8
    4f68:	b009      	add	sp, #36	; 0x24
    4f6a:	bc3c      	pop	{r2, r3, r4, r5}
    4f6c:	4690      	mov	r8, r2
    4f6e:	4699      	mov	r9, r3
    4f70:	46a2      	mov	sl, r4
    4f72:	46ab      	mov	fp, r5
    4f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    4f76:	ab05      	add	r3, sp, #20
    4f78:	7adb      	ldrb	r3, [r3, #11]
    4f7a:	72fb      	strb	r3, [r7, #11]
    4f7c:	4653      	mov	r3, sl
    4f7e:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4f80:	ab05      	add	r3, sp, #20
    4f82:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    4f84:	2201      	movs	r2, #1
    4f86:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4f88:	079b      	lsls	r3, r3, #30
    4f8a:	d511      	bpl.n	4fb0 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    4f8c:	4653      	mov	r3, sl
    4f8e:	881b      	ldrh	r3, [r3, #0]
    4f90:	2b00      	cmp	r3, #0
    4f92:	d01b      	beq.n	4fcc <dir_register+0x158>
    4f94:	2000      	movs	r0, #0
    4f96:	4652      	mov	r2, sl
    4f98:	3001      	adds	r0, #1
    4f9a:	b280      	uxth	r0, r0
    4f9c:	0043      	lsls	r3, r0, #1
    4f9e:	5a9b      	ldrh	r3, [r3, r2]
    4fa0:	2b00      	cmp	r3, #0
    4fa2:	d1f9      	bne.n	4f98 <dir_register+0x124>
		ne = (ne + 25) / 13;
    4fa4:	3019      	adds	r0, #25
    4fa6:	210d      	movs	r1, #13
    4fa8:	4b63      	ldr	r3, [pc, #396]	; (5138 <dir_register+0x2c4>)
    4faa:	4798      	blx	r3
    4fac:	b283      	uxth	r3, r0
    4fae:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    4fb0:	2100      	movs	r1, #0
    4fb2:	0020      	movs	r0, r4
    4fb4:	4b61      	ldr	r3, [pc, #388]	; (513c <dir_register+0x2c8>)
    4fb6:	4798      	blx	r3
    4fb8:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    4fba:	2800      	cmp	r0, #0
    4fbc:	d1d3      	bne.n	4f66 <dir_register+0xf2>
    4fbe:	4682      	mov	sl, r0
    4fc0:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    4fc2:	4f5f      	ldr	r7, [pc, #380]	; (5140 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    4fc4:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    4fc6:	4b5f      	ldr	r3, [pc, #380]	; (5144 <dir_register+0x2d0>)
    4fc8:	4699      	mov	r9, r3
    4fca:	e00b      	b.n	4fe4 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    4fcc:	2000      	movs	r0, #0
    4fce:	e7e9      	b.n	4fa4 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    4fd0:	1c6b      	adds	r3, r5, #1
    4fd2:	b29b      	uxth	r3, r3
    4fd4:	459b      	cmp	fp, r3
    4fd6:	d06d      	beq.n	50b4 <dir_register+0x240>
    4fd8:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    4fda:	2101      	movs	r1, #1
    4fdc:	0020      	movs	r0, r4
    4fde:	47c8      	blx	r9
	} while (res == FR_OK);
    4fe0:	2800      	cmp	r0, #0
    4fe2:	d112      	bne.n	500a <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    4fe4:	6921      	ldr	r1, [r4, #16]
    4fe6:	6820      	ldr	r0, [r4, #0]
    4fe8:	47b8      	blx	r7
		if (res != FR_OK) break;
    4fea:	2800      	cmp	r0, #0
    4fec:	d000      	beq.n	4ff0 <dir_register+0x17c>
    4fee:	e098      	b.n	5122 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    4ff0:	6963      	ldr	r3, [r4, #20]
    4ff2:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    4ff4:	2be5      	cmp	r3, #229	; 0xe5
    4ff6:	d001      	beq.n	4ffc <dir_register+0x188>
    4ff8:	2b00      	cmp	r3, #0
    4ffa:	d104      	bne.n	5006 <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    4ffc:	2d00      	cmp	r5, #0
    4ffe:	d1e7      	bne.n	4fd0 <dir_register+0x15c>
    5000:	88e3      	ldrh	r3, [r4, #6]
    5002:	469a      	mov	sl, r3
    5004:	e7e4      	b.n	4fd0 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    5006:	0035      	movs	r5, r6
    5008:	e7e7      	b.n	4fda <dir_register+0x166>
    500a:	4680      	mov	r8, r0
    500c:	e7ab      	b.n	4f66 <dir_register+0xf2>
		res = dir_sdi(dj, is);
    500e:	4651      	mov	r1, sl
    5010:	0020      	movs	r0, r4
    5012:	4b4a      	ldr	r3, [pc, #296]	; (513c <dir_register+0x2c8>)
    5014:	4798      	blx	r3
    5016:	4680      	mov	r8, r0
		if (res == FR_OK) {
    5018:	2800      	cmp	r0, #0
    501a:	d1a4      	bne.n	4f66 <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    501c:	69a0      	ldr	r0, [r4, #24]
    501e:	4b4a      	ldr	r3, [pc, #296]	; (5148 <dir_register+0x2d4>)
    5020:	4798      	blx	r3
    5022:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5024:	46a8      	mov	r8, r5
    5026:	e01f      	b.n	5068 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    5028:	0022      	movs	r2, r4
    502a:	e067      	b.n	50fc <dir_register+0x288>
    502c:	465e      	mov	r6, fp
    502e:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    5030:	4946      	ldr	r1, [pc, #280]	; (514c <dir_register+0x2d8>)
    5032:	428b      	cmp	r3, r1
    5034:	d003      	beq.n	503e <dir_register+0x1ca>
    5036:	0052      	lsls	r2, r2, #1
    5038:	5b93      	ldrh	r3, [r2, r6]
    503a:	2b00      	cmp	r3, #0
    503c:	d103      	bne.n	5046 <dir_register+0x1d2>
    503e:	2340      	movs	r3, #64	; 0x40
    5040:	464a      	mov	r2, r9
    5042:	431a      	orrs	r2, r3
    5044:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    5046:	464b      	mov	r3, r9
    5048:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    504a:	2301      	movs	r3, #1
    504c:	6822      	ldr	r2, [r4, #0]
    504e:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    5050:	2100      	movs	r1, #0
    5052:	0020      	movs	r0, r4
    5054:	4b3b      	ldr	r3, [pc, #236]	; (5144 <dir_register+0x2d0>)
    5056:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    5058:	2800      	cmp	r0, #0
    505a:	d166      	bne.n	512a <dir_register+0x2b6>
    505c:	4645      	mov	r5, r8
    505e:	3d01      	subs	r5, #1
    5060:	b2ab      	uxth	r3, r5
    5062:	4698      	mov	r8, r3
    5064:	2b00      	cmp	r3, #0
    5066:	d027      	beq.n	50b8 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    5068:	6921      	ldr	r1, [r4, #16]
    506a:	6820      	ldr	r0, [r4, #0]
    506c:	4b34      	ldr	r3, [pc, #208]	; (5140 <dir_register+0x2cc>)
    506e:	4798      	blx	r3
				if (res != FR_OK) break;
    5070:	2800      	cmp	r0, #0
    5072:	d158      	bne.n	5126 <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    5074:	69e6      	ldr	r6, [r4, #28]
    5076:	6960      	ldr	r0, [r4, #20]
    5078:	4643      	mov	r3, r8
    507a:	466a      	mov	r2, sp
    507c:	70d3      	strb	r3, [r2, #3]
    507e:	78d3      	ldrb	r3, [r2, #3]
    5080:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    5082:	7913      	ldrb	r3, [r2, #4]
    5084:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    5086:	230f      	movs	r3, #15
    5088:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    508a:	2300      	movs	r3, #0
    508c:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    508e:	7683      	strb	r3, [r0, #26]
    5090:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    5092:	464b      	mov	r3, r9
    5094:	3b01      	subs	r3, #1
    5096:	005a      	lsls	r2, r3, #1
    5098:	18d2      	adds	r2, r2, r3
    509a:	0092      	lsls	r2, r2, #2
    509c:	18d2      	adds	r2, r2, r3
    509e:	492c      	ldr	r1, [pc, #176]	; (5150 <dir_register+0x2dc>)
    50a0:	000d      	movs	r5, r1
    50a2:	350d      	adds	r5, #13
	s = wc = 0;
    50a4:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    50a6:	4f29      	ldr	r7, [pc, #164]	; (514c <dir_register+0x2d8>)
    50a8:	46b3      	mov	fp, r6
    50aa:	46a4      	mov	ip, r4
    50ac:	e029      	b.n	5102 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    50ae:	2307      	movs	r3, #7
    50b0:	4698      	mov	r8, r3
    50b2:	e758      	b.n	4f66 <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    50b4:	2b01      	cmp	r3, #1
    50b6:	d8aa      	bhi.n	500e <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    50b8:	6921      	ldr	r1, [r4, #16]
    50ba:	6820      	ldr	r0, [r4, #0]
    50bc:	4b20      	ldr	r3, [pc, #128]	; (5140 <dir_register+0x2cc>)
    50be:	4798      	blx	r3
    50c0:	4680      	mov	r8, r0
		if (res == FR_OK) {
    50c2:	2800      	cmp	r0, #0
    50c4:	d000      	beq.n	50c8 <dir_register+0x254>
    50c6:	e74e      	b.n	4f66 <dir_register+0xf2>
			dir = dj->dir;
    50c8:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    50ca:	2220      	movs	r2, #32
    50cc:	2100      	movs	r1, #0
    50ce:	0028      	movs	r0, r5
    50d0:	4b20      	ldr	r3, [pc, #128]	; (5154 <dir_register+0x2e0>)
    50d2:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    50d4:	220b      	movs	r2, #11
    50d6:	69a1      	ldr	r1, [r4, #24]
    50d8:	0028      	movs	r0, r5
    50da:	4b15      	ldr	r3, [pc, #84]	; (5130 <dir_register+0x2bc>)
    50dc:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    50de:	69a3      	ldr	r3, [r4, #24]
    50e0:	7ada      	ldrb	r2, [r3, #11]
    50e2:	2318      	movs	r3, #24
    50e4:	4013      	ands	r3, r2
    50e6:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    50e8:	6823      	ldr	r3, [r4, #0]
    50ea:	2201      	movs	r2, #1
    50ec:	711a      	strb	r2, [r3, #4]
    50ee:	e73a      	b.n	4f66 <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    50f0:	780c      	ldrb	r4, [r1, #0]
    50f2:	26ff      	movs	r6, #255	; 0xff
    50f4:	5506      	strb	r6, [r0, r4]
    50f6:	1904      	adds	r4, r0, r4
    50f8:	26ff      	movs	r6, #255	; 0xff
    50fa:	7066      	strb	r6, [r4, #1]
    50fc:	3101      	adds	r1, #1
	} while (++s < 13);
    50fe:	42a9      	cmp	r1, r5
    5100:	d094      	beq.n	502c <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    5102:	42bb      	cmp	r3, r7
    5104:	d0f4      	beq.n	50f0 <dir_register+0x27c>
    5106:	1c54      	adds	r4, r2, #1
    5108:	0052      	lsls	r2, r2, #1
    510a:	465b      	mov	r3, fp
    510c:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    510e:	780a      	ldrb	r2, [r1, #0]
    5110:	5483      	strb	r3, [r0, r2]
    5112:	1882      	adds	r2, r0, r2
    5114:	0a1e      	lsrs	r6, r3, #8
    5116:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5118:	2b00      	cmp	r3, #0
    511a:	d185      	bne.n	5028 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    511c:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    511e:	003b      	movs	r3, r7
    5120:	e7ec      	b.n	50fc <dir_register+0x288>
    5122:	4680      	mov	r8, r0
    5124:	e71f      	b.n	4f66 <dir_register+0xf2>
    5126:	4680      	mov	r8, r0
    5128:	e71d      	b.n	4f66 <dir_register+0xf2>
    512a:	4680      	mov	r8, r0
    512c:	e71b      	b.n	4f66 <dir_register+0xf2>
    512e:	46c0      	nop			; (mov r8, r8)
    5130:	00004221 	.word	0x00004221
    5134:	00004cdd 	.word	0x00004cdd
    5138:	00009179 	.word	0x00009179
    513c:	0000489d 	.word	0x0000489d
    5140:	00004701 	.word	0x00004701
    5144:	00004bb9 	.word	0x00004bb9
    5148:	0000425f 	.word	0x0000425f
    514c:	0000ffff 	.word	0x0000ffff
    5150:	0000a900 	.word	0x0000a900
    5154:	00004235 	.word	0x00004235

00005158 <sync>:
{
    5158:	b570      	push	{r4, r5, r6, lr}
    515a:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    515c:	2100      	movs	r1, #0
    515e:	4b2c      	ldr	r3, [pc, #176]	; (5210 <sync+0xb8>)
    5160:	4798      	blx	r3
	if (res == FR_OK) {
    5162:	2800      	cmp	r0, #0
    5164:	d10a      	bne.n	517c <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    5166:	7823      	ldrb	r3, [r4, #0]
    5168:	2b03      	cmp	r3, #3
    516a:	d008      	beq.n	517e <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    516c:	7860      	ldrb	r0, [r4, #1]
    516e:	2200      	movs	r2, #0
    5170:	2100      	movs	r1, #0
    5172:	4b28      	ldr	r3, [pc, #160]	; (5214 <sync+0xbc>)
    5174:	4798      	blx	r3
    5176:	1e43      	subs	r3, r0, #1
    5178:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    517a:	b2c0      	uxtb	r0, r0
}
    517c:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    517e:	7963      	ldrb	r3, [r4, #5]
    5180:	2b00      	cmp	r3, #0
    5182:	d0f3      	beq.n	516c <sync+0x14>
			fs->winsect = 0;
    5184:	2600      	movs	r6, #0
    5186:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    5188:	0025      	movs	r5, r4
    518a:	3530      	adds	r5, #48	; 0x30
    518c:	2280      	movs	r2, #128	; 0x80
    518e:	0092      	lsls	r2, r2, #2
    5190:	2100      	movs	r1, #0
    5192:	0028      	movs	r0, r5
    5194:	4b20      	ldr	r3, [pc, #128]	; (5218 <sync+0xc0>)
    5196:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    5198:	2255      	movs	r2, #85	; 0x55
    519a:	4b20      	ldr	r3, [pc, #128]	; (521c <sync+0xc4>)
    519c:	54e2      	strb	r2, [r4, r3]
    519e:	3255      	adds	r2, #85	; 0x55
    51a0:	4b1f      	ldr	r3, [pc, #124]	; (5220 <sync+0xc8>)
    51a2:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    51a4:	3bde      	subs	r3, #222	; 0xde
    51a6:	3bff      	subs	r3, #255	; 0xff
    51a8:	3a7a      	subs	r2, #122	; 0x7a
    51aa:	54a3      	strb	r3, [r4, r2]
    51ac:	3201      	adds	r2, #1
    51ae:	54a3      	strb	r3, [r4, r2]
    51b0:	330f      	adds	r3, #15
    51b2:	3201      	adds	r2, #1
    51b4:	54a3      	strb	r3, [r4, r2]
    51b6:	320f      	adds	r2, #15
    51b8:	2133      	movs	r1, #51	; 0x33
    51ba:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    51bc:	313f      	adds	r1, #63	; 0x3f
    51be:	2085      	movs	r0, #133	; 0x85
    51c0:	0080      	lsls	r0, r0, #2
    51c2:	5421      	strb	r1, [r4, r0]
    51c4:	4817      	ldr	r0, [pc, #92]	; (5224 <sync+0xcc>)
    51c6:	5421      	strb	r1, [r4, r0]
    51c8:	4917      	ldr	r1, [pc, #92]	; (5228 <sync+0xd0>)
    51ca:	5462      	strb	r2, [r4, r1]
    51cc:	4a17      	ldr	r2, [pc, #92]	; (522c <sync+0xd4>)
    51ce:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    51d0:	6923      	ldr	r3, [r4, #16]
    51d2:	3201      	adds	r2, #1
    51d4:	54a3      	strb	r3, [r4, r2]
    51d6:	0a19      	lsrs	r1, r3, #8
    51d8:	4a15      	ldr	r2, [pc, #84]	; (5230 <sync+0xd8>)
    51da:	54a1      	strb	r1, [r4, r2]
    51dc:	0c19      	lsrs	r1, r3, #16
    51de:	4a15      	ldr	r2, [pc, #84]	; (5234 <sync+0xdc>)
    51e0:	54a1      	strb	r1, [r4, r2]
    51e2:	0e1b      	lsrs	r3, r3, #24
    51e4:	4a14      	ldr	r2, [pc, #80]	; (5238 <sync+0xe0>)
    51e6:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    51e8:	68e3      	ldr	r3, [r4, #12]
    51ea:	3201      	adds	r2, #1
    51ec:	54a3      	strb	r3, [r4, r2]
    51ee:	0a19      	lsrs	r1, r3, #8
    51f0:	4a12      	ldr	r2, [pc, #72]	; (523c <sync+0xe4>)
    51f2:	54a1      	strb	r1, [r4, r2]
    51f4:	0c19      	lsrs	r1, r3, #16
    51f6:	4a12      	ldr	r2, [pc, #72]	; (5240 <sync+0xe8>)
    51f8:	54a1      	strb	r1, [r4, r2]
    51fa:	0e1b      	lsrs	r3, r3, #24
    51fc:	4a11      	ldr	r2, [pc, #68]	; (5244 <sync+0xec>)
    51fe:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    5200:	7860      	ldrb	r0, [r4, #1]
    5202:	2301      	movs	r3, #1
    5204:	6962      	ldr	r2, [r4, #20]
    5206:	0029      	movs	r1, r5
    5208:	4d0f      	ldr	r5, [pc, #60]	; (5248 <sync+0xf0>)
    520a:	47a8      	blx	r5
			fs->fsi_flag = 0;
    520c:	7166      	strb	r6, [r4, #5]
    520e:	e7ad      	b.n	516c <sync+0x14>
    5210:	00004701 	.word	0x00004701
    5214:	00004165 	.word	0x00004165
    5218:	00004235 	.word	0x00004235
    521c:	0000022e 	.word	0x0000022e
    5220:	0000022f 	.word	0x0000022f
    5224:	00000215 	.word	0x00000215
    5228:	00000216 	.word	0x00000216
    522c:	00000217 	.word	0x00000217
    5230:	00000219 	.word	0x00000219
    5234:	0000021a 	.word	0x0000021a
    5238:	0000021b 	.word	0x0000021b
    523c:	0000021d 	.word	0x0000021d
    5240:	0000021e 	.word	0x0000021e
    5244:	0000021f 	.word	0x0000021f
    5248:	000040e1 	.word	0x000040e1

0000524c <follow_path>:
{
    524c:	b5f0      	push	{r4, r5, r6, r7, lr}
    524e:	46de      	mov	lr, fp
    5250:	4657      	mov	r7, sl
    5252:	464e      	mov	r6, r9
    5254:	4645      	mov	r5, r8
    5256:	b5e0      	push	{r5, r6, r7, lr}
    5258:	b083      	sub	sp, #12
    525a:	4682      	mov	sl, r0
    525c:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    525e:	780b      	ldrb	r3, [r1, #0]
    5260:	2b2f      	cmp	r3, #47	; 0x2f
    5262:	d00f      	beq.n	5284 <follow_path+0x38>
    5264:	2b5c      	cmp	r3, #92	; 0x5c
    5266:	d00d      	beq.n	5284 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    5268:	2300      	movs	r3, #0
    526a:	4652      	mov	r2, sl
    526c:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    526e:	782b      	ldrb	r3, [r5, #0]
    5270:	4657      	mov	r7, sl
    5272:	2b1f      	cmp	r3, #31
    5274:	d809      	bhi.n	528a <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    5276:	2100      	movs	r1, #0
    5278:	4650      	mov	r0, sl
    527a:	4bb2      	ldr	r3, [pc, #712]	; (5544 <follow_path+0x2f8>)
    527c:	4798      	blx	r3
		dj->dir = 0;
    527e:	2300      	movs	r3, #0
    5280:	617b      	str	r3, [r7, #20]
    5282:	e13a      	b.n	54fa <follow_path+0x2ae>
		path++;
    5284:	3501      	adds	r5, #1
    5286:	e7ef      	b.n	5268 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    5288:	3501      	adds	r5, #1
    528a:	7828      	ldrb	r0, [r5, #0]
    528c:	282f      	cmp	r0, #47	; 0x2f
    528e:	d0fb      	beq.n	5288 <follow_path+0x3c>
    5290:	285c      	cmp	r0, #92	; 0x5c
    5292:	d0f9      	beq.n	5288 <follow_path+0x3c>
	lfn = dj->lfn;
    5294:	69fb      	ldr	r3, [r7, #28]
    5296:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    5298:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    529a:	281f      	cmp	r0, #31
    529c:	d800      	bhi.n	52a0 <follow_path+0x54>
    529e:	e13b      	b.n	5518 <follow_path+0x2cc>
    52a0:	282f      	cmp	r0, #47	; 0x2f
    52a2:	d100      	bne.n	52a6 <follow_path+0x5a>
    52a4:	e13b      	b.n	551e <follow_path+0x2d2>
    52a6:	285c      	cmp	r0, #92	; 0x5c
    52a8:	d100      	bne.n	52ac <follow_path+0x60>
    52aa:	e13b      	b.n	5524 <follow_path+0x2d8>
    52ac:	1c6e      	adds	r6, r5, #1
    52ae:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    52b0:	2380      	movs	r3, #128	; 0x80
    52b2:	005b      	lsls	r3, r3, #1
    52b4:	4698      	mov	r8, r3
    52b6:	46bb      	mov	fp, r7
    52b8:	002b      	movs	r3, r5
    52ba:	0025      	movs	r5, r4
    52bc:	0034      	movs	r4, r6
    52be:	4656      	mov	r6, sl
    52c0:	4699      	mov	r9, r3
    52c2:	e011      	b.n	52e8 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    52c4:	2b00      	cmp	r3, #0
    52c6:	d135      	bne.n	5334 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    52c8:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    52ca:	1c6b      	adds	r3, r5, #1
    52cc:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    52ce:	281f      	cmp	r0, #31
    52d0:	d91e      	bls.n	5310 <follow_path+0xc4>
    52d2:	282f      	cmp	r0, #47	; 0x2f
    52d4:	d100      	bne.n	52d8 <follow_path+0x8c>
    52d6:	e128      	b.n	552a <follow_path+0x2de>
    52d8:	285c      	cmp	r0, #92	; 0x5c
    52da:	d100      	bne.n	52de <follow_path+0x92>
    52dc:	e142      	b.n	5564 <follow_path+0x318>
    52de:	3602      	adds	r6, #2
    52e0:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    52e2:	4543      	cmp	r3, r8
    52e4:	d026      	beq.n	5334 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    52e6:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    52e8:	2101      	movs	r1, #1
    52ea:	4b97      	ldr	r3, [pc, #604]	; (5548 <follow_path+0x2fc>)
    52ec:	4798      	blx	r3
    52ee:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    52f0:	d020      	beq.n	5334 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    52f2:	287f      	cmp	r0, #127	; 0x7f
    52f4:	d8e8      	bhi.n	52c8 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    52f6:	2822      	cmp	r0, #34	; 0x22
    52f8:	d100      	bne.n	52fc <follow_path+0xb0>
    52fa:	e0fd      	b.n	54f8 <follow_path+0x2ac>
    52fc:	232a      	movs	r3, #42	; 0x2a
    52fe:	4a93      	ldr	r2, [pc, #588]	; (554c <follow_path+0x300>)
    5300:	b29f      	uxth	r7, r3
    5302:	428f      	cmp	r7, r1
    5304:	d0de      	beq.n	52c4 <follow_path+0x78>
    5306:	3201      	adds	r2, #1
    5308:	7813      	ldrb	r3, [r2, #0]
    530a:	2b00      	cmp	r3, #0
    530c:	d1f8      	bne.n	5300 <follow_path+0xb4>
    530e:	e7db      	b.n	52c8 <follow_path+0x7c>
    5310:	002c      	movs	r4, r5
    5312:	465f      	mov	r7, fp
    5314:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    5316:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    5318:	2604      	movs	r6, #4
    531a:	e10b      	b.n	5534 <follow_path+0x2e8>
		di--;
    531c:	3c01      	subs	r4, #1
    531e:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    5320:	2c00      	cmp	r4, #0
    5322:	d100      	bne.n	5326 <follow_path+0xda>
    5324:	e0e8      	b.n	54f8 <follow_path+0x2ac>
		w = lfn[di-1];
    5326:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    5328:	2a20      	cmp	r2, #32
    532a:	d0f7      	beq.n	531c <follow_path+0xd0>
    532c:	2a2e      	cmp	r2, #46	; 0x2e
    532e:	d0f5      	beq.n	531c <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    5330:	2c00      	cmp	r4, #0
    5332:	d101      	bne.n	5338 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    5334:	2006      	movs	r0, #6
	return res;
    5336:	e0e0      	b.n	54fa <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    5338:	0063      	lsls	r3, r4, #1
    533a:	4698      	mov	r8, r3
    533c:	2300      	movs	r3, #0
    533e:	4652      	mov	r2, sl
    5340:	4641      	mov	r1, r8
    5342:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    5344:	220b      	movs	r2, #11
    5346:	2120      	movs	r1, #32
    5348:	69b8      	ldr	r0, [r7, #24]
    534a:	4b81      	ldr	r3, [pc, #516]	; (5550 <follow_path+0x304>)
    534c:	4798      	blx	r3
    534e:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    5350:	2300      	movs	r3, #0
    5352:	e001      	b.n	5358 <follow_path+0x10c>
    5354:	3301      	adds	r3, #1
    5356:	3202      	adds	r2, #2
    5358:	8811      	ldrh	r1, [r2, #0]
    535a:	2920      	cmp	r1, #32
    535c:	d0fa      	beq.n	5354 <follow_path+0x108>
    535e:	292e      	cmp	r1, #46	; 0x2e
    5360:	d0f8      	beq.n	5354 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    5362:	2b00      	cmp	r3, #0
    5364:	d001      	beq.n	536a <follow_path+0x11e>
    5366:	2203      	movs	r2, #3
    5368:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    536a:	4652      	mov	r2, sl
    536c:	4442      	add	r2, r8
    536e:	3a02      	subs	r2, #2
    5370:	8812      	ldrh	r2, [r2, #0]
    5372:	2a2e      	cmp	r2, #46	; 0x2e
    5374:	d009      	beq.n	538a <follow_path+0x13e>
    5376:	4642      	mov	r2, r8
    5378:	3a04      	subs	r2, #4
    537a:	4452      	add	r2, sl
    537c:	3c01      	subs	r4, #1
    537e:	2c00      	cmp	r4, #0
    5380:	d003      	beq.n	538a <follow_path+0x13e>
    5382:	3a02      	subs	r2, #2
    5384:	8851      	ldrh	r1, [r2, #2]
    5386:	292e      	cmp	r1, #46	; 0x2e
    5388:	d1f8      	bne.n	537c <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    538a:	2208      	movs	r2, #8
    538c:	9201      	str	r2, [sp, #4]
    538e:	2200      	movs	r2, #0
    5390:	4693      	mov	fp, r2
    5392:	4691      	mov	r9, r2
    5394:	46a0      	mov	r8, r4
    5396:	e006      	b.n	53a6 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    5398:	4544      	cmp	r4, r8
    539a:	d100      	bne.n	539e <follow_path+0x152>
    539c:	e0e6      	b.n	556c <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    539e:	2303      	movs	r3, #3
    53a0:	431e      	orrs	r6, r3
    53a2:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    53a4:	0023      	movs	r3, r4
    53a6:	1c5c      	adds	r4, r3, #1
    53a8:	005b      	lsls	r3, r3, #1
    53aa:	4652      	mov	r2, sl
    53ac:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    53ae:	2800      	cmp	r0, #0
    53b0:	d02c      	beq.n	540c <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    53b2:	2820      	cmp	r0, #32
    53b4:	d0f3      	beq.n	539e <follow_path+0x152>
    53b6:	282e      	cmp	r0, #46	; 0x2e
    53b8:	d0ee      	beq.n	5398 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    53ba:	9b01      	ldr	r3, [sp, #4]
    53bc:	459b      	cmp	fp, r3
    53be:	d219      	bcs.n	53f4 <follow_path+0x1a8>
    53c0:	4544      	cmp	r4, r8
    53c2:	d100      	bne.n	53c6 <follow_path+0x17a>
    53c4:	e0d2      	b.n	556c <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    53c6:	287f      	cmp	r0, #127	; 0x7f
    53c8:	d85e      	bhi.n	5488 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    53ca:	282b      	cmp	r0, #43	; 0x2b
    53cc:	d06e      	beq.n	54ac <follow_path+0x260>
    53ce:	232c      	movs	r3, #44	; 0x2c
    53d0:	4a60      	ldr	r2, [pc, #384]	; (5554 <follow_path+0x308>)
    53d2:	b299      	uxth	r1, r3
    53d4:	4281      	cmp	r1, r0
    53d6:	d067      	beq.n	54a8 <follow_path+0x25c>
    53d8:	3201      	adds	r2, #1
    53da:	7813      	ldrb	r3, [r2, #0]
    53dc:	2b00      	cmp	r3, #0
    53de:	d1f8      	bne.n	53d2 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    53e0:	0003      	movs	r3, r0
    53e2:	3b41      	subs	r3, #65	; 0x41
    53e4:	b29b      	uxth	r3, r3
    53e6:	2b19      	cmp	r3, #25
    53e8:	d86c      	bhi.n	54c4 <follow_path+0x278>
					b |= 2;
    53ea:	2302      	movs	r3, #2
    53ec:	464a      	mov	r2, r9
    53ee:	431a      	orrs	r2, r3
    53f0:	4691      	mov	r9, r2
    53f2:	e05f      	b.n	54b4 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    53f4:	9b01      	ldr	r3, [sp, #4]
    53f6:	2b0b      	cmp	r3, #11
    53f8:	d03b      	beq.n	5472 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    53fa:	4544      	cmp	r4, r8
    53fc:	d100      	bne.n	5400 <follow_path+0x1b4>
    53fe:	e0b9      	b.n	5574 <follow_path+0x328>
    5400:	2303      	movs	r3, #3
    5402:	431e      	orrs	r6, r3
    5404:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    5406:	4544      	cmp	r4, r8
    5408:	d800      	bhi.n	540c <follow_path+0x1c0>
    540a:	e0b3      	b.n	5574 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    540c:	69bb      	ldr	r3, [r7, #24]
    540e:	781a      	ldrb	r2, [r3, #0]
    5410:	2ae5      	cmp	r2, #229	; 0xe5
    5412:	d036      	beq.n	5482 <follow_path+0x236>
	if (ni == 8) b <<= 2;
    5414:	9b01      	ldr	r3, [sp, #4]
    5416:	2b08      	cmp	r3, #8
    5418:	d060      	beq.n	54dc <follow_path+0x290>
    541a:	230c      	movs	r3, #12
    541c:	464a      	mov	r2, r9
    541e:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    5420:	2b0c      	cmp	r3, #12
    5422:	d060      	beq.n	54e6 <follow_path+0x29a>
    5424:	43d2      	mvns	r2, r2
    5426:	0792      	lsls	r2, r2, #30
    5428:	d05d      	beq.n	54e6 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    542a:	07b2      	lsls	r2, r6, #30
    542c:	d406      	bmi.n	543c <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    542e:	2203      	movs	r2, #3
    5430:	4649      	mov	r1, r9
    5432:	400a      	ands	r2, r1
    5434:	2a01      	cmp	r2, #1
    5436:	d059      	beq.n	54ec <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    5438:	2b04      	cmp	r3, #4
    543a:	d05a      	beq.n	54f2 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    543c:	69bb      	ldr	r3, [r7, #24]
    543e:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    5440:	0038      	movs	r0, r7
    5442:	4b45      	ldr	r3, [pc, #276]	; (5558 <follow_path+0x30c>)
    5444:	4798      	blx	r3
			ns = *(dj->fn+NS);
    5446:	69bb      	ldr	r3, [r7, #24]
    5448:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    544a:	2800      	cmp	r0, #0
    544c:	d15c      	bne.n	5508 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    544e:	075b      	lsls	r3, r3, #29
    5450:	d453      	bmi.n	54fa <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    5452:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    5454:	7ad3      	ldrb	r3, [r2, #11]
    5456:	06db      	lsls	r3, r3, #27
    5458:	d55c      	bpl.n	5514 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    545a:	7d51      	ldrb	r1, [r2, #21]
    545c:	0209      	lsls	r1, r1, #8
    545e:	7d13      	ldrb	r3, [r2, #20]
    5460:	430b      	orrs	r3, r1
    5462:	041b      	lsls	r3, r3, #16
    5464:	7ed1      	ldrb	r1, [r2, #27]
    5466:	0209      	lsls	r1, r1, #8
    5468:	7e92      	ldrb	r2, [r2, #26]
    546a:	430a      	orrs	r2, r1
    546c:	4313      	orrs	r3, r2
    546e:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    5470:	e70b      	b.n	528a <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    5472:	2303      	movs	r3, #3
    5474:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    5476:	69bb      	ldr	r3, [r7, #24]
    5478:	781a      	ldrb	r2, [r3, #0]
    547a:	2ae5      	cmp	r2, #229	; 0xe5
    547c:	d1cd      	bne.n	541a <follow_path+0x1ce>
    547e:	220b      	movs	r2, #11
    5480:	9201      	str	r2, [sp, #4]
    5482:	2205      	movs	r2, #5
    5484:	701a      	strb	r2, [r3, #0]
    5486:	e7c5      	b.n	5414 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    5488:	2100      	movs	r1, #0
    548a:	4b2f      	ldr	r3, [pc, #188]	; (5548 <follow_path+0x2fc>)
    548c:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    548e:	2800      	cmp	r0, #0
    5490:	d100      	bne.n	5494 <follow_path+0x248>
    5492:	e079      	b.n	5588 <follow_path+0x33c>
    5494:	4b31      	ldr	r3, [pc, #196]	; (555c <follow_path+0x310>)
    5496:	469c      	mov	ip, r3
    5498:	4460      	add	r0, ip
    549a:	3880      	subs	r0, #128	; 0x80
    549c:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    549e:	2302      	movs	r3, #2
    54a0:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    54a2:	2800      	cmp	r0, #0
    54a4:	d002      	beq.n	54ac <follow_path+0x260>
    54a6:	e790      	b.n	53ca <follow_path+0x17e>
    54a8:	2b00      	cmp	r3, #0
    54aa:	d099      	beq.n	53e0 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    54ac:	2303      	movs	r3, #3
    54ae:	431e      	orrs	r6, r3
    54b0:	b2f6      	uxtb	r6, r6
    54b2:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    54b4:	69bb      	ldr	r3, [r7, #24]
    54b6:	465a      	mov	r2, fp
    54b8:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    54ba:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    54bc:	2201      	movs	r2, #1
    54be:	4694      	mov	ip, r2
    54c0:	44e3      	add	fp, ip
    54c2:	e770      	b.n	53a6 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    54c4:	0003      	movs	r3, r0
    54c6:	3b61      	subs	r3, #97	; 0x61
    54c8:	b29b      	uxth	r3, r3
    54ca:	2b19      	cmp	r3, #25
    54cc:	d8f2      	bhi.n	54b4 <follow_path+0x268>
						b |= 1; w -= 0x20;
    54ce:	2301      	movs	r3, #1
    54d0:	464a      	mov	r2, r9
    54d2:	431a      	orrs	r2, r3
    54d4:	4691      	mov	r9, r2
    54d6:	3820      	subs	r0, #32
    54d8:	b280      	uxth	r0, r0
    54da:	e7eb      	b.n	54b4 <follow_path+0x268>
	if (ni == 8) b <<= 2;
    54dc:	464b      	mov	r3, r9
    54de:	009b      	lsls	r3, r3, #2
    54e0:	b2db      	uxtb	r3, r3
    54e2:	4699      	mov	r9, r3
    54e4:	e799      	b.n	541a <follow_path+0x1ce>
		cf |= NS_LFN;
    54e6:	2202      	movs	r2, #2
    54e8:	4316      	orrs	r6, r2
    54ea:	e79e      	b.n	542a <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    54ec:	320f      	adds	r2, #15
    54ee:	4316      	orrs	r6, r2
    54f0:	e7a2      	b.n	5438 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    54f2:	3304      	adds	r3, #4
    54f4:	431e      	orrs	r6, r3
    54f6:	e7a1      	b.n	543c <follow_path+0x1f0>
    54f8:	2006      	movs	r0, #6
}
    54fa:	b003      	add	sp, #12
    54fc:	bc3c      	pop	{r2, r3, r4, r5}
    54fe:	4690      	mov	r8, r2
    5500:	4699      	mov	r9, r3
    5502:	46a2      	mov	sl, r4
    5504:	46ab      	mov	fp, r5
    5506:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    5508:	2804      	cmp	r0, #4
    550a:	d1f6      	bne.n	54fa <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    550c:	075b      	lsls	r3, r3, #29
    550e:	d4f4      	bmi.n	54fa <follow_path+0x2ae>
    5510:	3001      	adds	r0, #1
    5512:	e7f2      	b.n	54fa <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    5514:	2005      	movs	r0, #5
    5516:	e7f0      	b.n	54fa <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    5518:	2301      	movs	r3, #1
	si = di = 0;
    551a:	2400      	movs	r4, #0
    551c:	e6fb      	b.n	5316 <follow_path+0xca>
		w = p[si++];					/* Get a character */
    551e:	2301      	movs	r3, #1
	si = di = 0;
    5520:	2400      	movs	r4, #0
    5522:	e005      	b.n	5530 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    5524:	2301      	movs	r3, #1
	si = di = 0;
    5526:	2400      	movs	r4, #0
    5528:	e002      	b.n	5530 <follow_path+0x2e4>
    552a:	002c      	movs	r4, r5
    552c:	465f      	mov	r7, fp
    552e:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    5530:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    5532:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    5534:	2c00      	cmp	r4, #0
    5536:	d0df      	beq.n	54f8 <follow_path+0x2ac>
    5538:	4b09      	ldr	r3, [pc, #36]	; (5560 <follow_path+0x314>)
    553a:	18e3      	adds	r3, r4, r3
    553c:	005b      	lsls	r3, r3, #1
    553e:	4453      	add	r3, sl
    5540:	e6f1      	b.n	5326 <follow_path+0xda>
    5542:	46c0      	nop			; (mov r8, r8)
    5544:	0000489d 	.word	0x0000489d
    5548:	00005bad 	.word	0x00005bad
    554c:	0000a991 	.word	0x0000a991
    5550:	00004235 	.word	0x00004235
    5554:	0000a99d 	.word	0x0000a99d
    5558:	00004cdd 	.word	0x00004cdd
    555c:	0000a910 	.word	0x0000a910
    5560:	7fffffff 	.word	0x7fffffff
    5564:	002c      	movs	r4, r5
    5566:	465f      	mov	r7, fp
    5568:	464d      	mov	r5, r9
    556a:	e7e1      	b.n	5530 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    556c:	9b01      	ldr	r3, [sp, #4]
    556e:	2b0b      	cmp	r3, #11
    5570:	d100      	bne.n	5574 <follow_path+0x328>
    5572:	e77e      	b.n	5472 <follow_path+0x226>
			b <<= 2; continue;
    5574:	464b      	mov	r3, r9
    5576:	009b      	lsls	r3, r3, #2
    5578:	b2db      	uxtb	r3, r3
    557a:	4699      	mov	r9, r3
    557c:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    557e:	220b      	movs	r2, #11
    5580:	9201      	str	r2, [sp, #4]
    5582:	3a03      	subs	r2, #3
    5584:	4693      	mov	fp, r2
    5586:	e70e      	b.n	53a6 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    5588:	2302      	movs	r3, #2
    558a:	431e      	orrs	r6, r3
    558c:	e78e      	b.n	54ac <follow_path+0x260>
    558e:	46c0      	nop			; (mov r8, r8)

00005590 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    5590:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    5592:	2803      	cmp	r0, #3
    5594:	d901      	bls.n	559a <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    5596:	0018      	movs	r0, r3
    5598:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    559a:	0083      	lsls	r3, r0, #2
    559c:	4a07      	ldr	r2, [pc, #28]	; (55bc <f_mount+0x2c>)
    559e:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    55a0:	2b00      	cmp	r3, #0
    55a2:	d001      	beq.n	55a8 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    55a4:	2200      	movs	r2, #0
    55a6:	701a      	strb	r2, [r3, #0]
	if (fs) {
    55a8:	2900      	cmp	r1, #0
    55aa:	d001      	beq.n	55b0 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    55ac:	2300      	movs	r3, #0
    55ae:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    55b0:	0080      	lsls	r0, r0, #2
    55b2:	4b02      	ldr	r3, [pc, #8]	; (55bc <f_mount+0x2c>)
    55b4:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    55b6:	2300      	movs	r3, #0
    55b8:	e7ed      	b.n	5596 <f_mount+0x6>
    55ba:	46c0      	nop			; (mov r8, r8)
    55bc:	200002b8 	.word	0x200002b8

000055c0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    55c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    55c2:	46c6      	mov	lr, r8
    55c4:	b500      	push	{lr}
    55c6:	4c59      	ldr	r4, [pc, #356]	; (572c <f_open+0x16c>)
    55c8:	44a5      	add	sp, r4
    55ca:	0005      	movs	r5, r0
    55cc:	9101      	str	r1, [sp, #4]
    55ce:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    55d0:	2300      	movs	r3, #0
    55d2:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    55d4:	261f      	movs	r6, #31
    55d6:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    55d8:	221e      	movs	r2, #30
    55da:	403a      	ands	r2, r7
    55dc:	a985      	add	r1, sp, #532	; 0x214
    55de:	a801      	add	r0, sp, #4
    55e0:	4b53      	ldr	r3, [pc, #332]	; (5730 <f_open+0x170>)
    55e2:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    55e4:	ab82      	add	r3, sp, #520	; 0x208
    55e6:	938b      	str	r3, [sp, #556]	; 0x22c
    55e8:	ab02      	add	r3, sp, #8
    55ea:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    55ec:	2800      	cmp	r0, #0
    55ee:	d006      	beq.n	55fe <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    55f0:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    55f2:	231c      	movs	r3, #28
    55f4:	423b      	tst	r3, r7
    55f6:	d145      	bne.n	5684 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    55f8:	2800      	cmp	r0, #0
    55fa:	d13d      	bne.n	5678 <f_open+0xb8>
    55fc:	e00c      	b.n	5618 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    55fe:	9901      	ldr	r1, [sp, #4]
    5600:	a885      	add	r0, sp, #532	; 0x214
    5602:	4b4c      	ldr	r3, [pc, #304]	; (5734 <f_open+0x174>)
    5604:	4798      	blx	r3
	dir = dj.dir;
    5606:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    5608:	2800      	cmp	r0, #0
    560a:	d1f2      	bne.n	55f2 <f_open+0x32>
		if (!dir)	/* Current dir itself */
    560c:	2c00      	cmp	r4, #0
    560e:	d100      	bne.n	5612 <f_open+0x52>
    5610:	e086      	b.n	5720 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    5612:	231c      	movs	r3, #28
    5614:	423b      	tst	r3, r7
    5616:	d146      	bne.n	56a6 <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    5618:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    561a:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    561c:	06da      	lsls	r2, r3, #27
    561e:	d42b      	bmi.n	5678 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    5620:	07ba      	lsls	r2, r7, #30
    5622:	d502      	bpl.n	562a <f_open+0x6a>
					res = FR_DENIED;
    5624:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    5626:	07db      	lsls	r3, r3, #31
    5628:	d426      	bmi.n	5678 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    562a:	073b      	lsls	r3, r7, #28
    562c:	d501      	bpl.n	5632 <f_open+0x72>
			mode |= FA__WRITTEN;
    562e:	2320      	movs	r3, #32
    5630:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    5632:	9b85      	ldr	r3, [sp, #532]	; 0x214
    5634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5636:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    5638:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    563a:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    563c:	7d62      	ldrb	r2, [r4, #21]
    563e:	0212      	lsls	r2, r2, #8
    5640:	7d23      	ldrb	r3, [r4, #20]
    5642:	4313      	orrs	r3, r2
    5644:	041b      	lsls	r3, r3, #16
    5646:	7ee1      	ldrb	r1, [r4, #27]
    5648:	0209      	lsls	r1, r1, #8
    564a:	7ea2      	ldrb	r2, [r4, #26]
    564c:	430a      	orrs	r2, r1
    564e:	4313      	orrs	r3, r2
    5650:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    5652:	7fe3      	ldrb	r3, [r4, #31]
    5654:	061b      	lsls	r3, r3, #24
    5656:	7fa2      	ldrb	r2, [r4, #30]
    5658:	0412      	lsls	r2, r2, #16
    565a:	4313      	orrs	r3, r2
    565c:	7f22      	ldrb	r2, [r4, #28]
    565e:	4313      	orrs	r3, r2
    5660:	7f62      	ldrb	r2, [r4, #29]
    5662:	0212      	lsls	r2, r2, #8
    5664:	4313      	orrs	r3, r2
    5666:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    5668:	2300      	movs	r3, #0
    566a:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    566c:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    566e:	9b85      	ldr	r3, [sp, #532]	; 0x214
    5670:	602b      	str	r3, [r5, #0]
    5672:	88db      	ldrh	r3, [r3, #6]
    5674:	80ab      	strh	r3, [r5, #4]
    5676:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    5678:	238e      	movs	r3, #142	; 0x8e
    567a:	009b      	lsls	r3, r3, #2
    567c:	449d      	add	sp, r3
    567e:	bc04      	pop	{r2}
    5680:	4690      	mov	r8, r2
    5682:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    5684:	2804      	cmp	r0, #4
    5686:	d005      	beq.n	5694 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    5688:	2308      	movs	r3, #8
    568a:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    568c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    568e:	2800      	cmp	r0, #0
    5690:	d0d3      	beq.n	563a <f_open+0x7a>
    5692:	e7f1      	b.n	5678 <f_open+0xb8>
				res = dir_register(&dj);
    5694:	a885      	add	r0, sp, #532	; 0x214
    5696:	4b28      	ldr	r3, [pc, #160]	; (5738 <f_open+0x178>)
    5698:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    569a:	2308      	movs	r3, #8
    569c:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    569e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    56a0:	2800      	cmp	r0, #0
    56a2:	d008      	beq.n	56b6 <f_open+0xf6>
    56a4:	e7e8      	b.n	5678 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    56a6:	7ae3      	ldrb	r3, [r4, #11]
    56a8:	2211      	movs	r2, #17
				res = FR_DENIED;
    56aa:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    56ac:	421a      	tst	r2, r3
    56ae:	d1e3      	bne.n	5678 <f_open+0xb8>
					res = FR_EXIST;
    56b0:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    56b2:	077b      	lsls	r3, r7, #29
    56b4:	d4e0      	bmi.n	5678 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    56b6:	0733      	lsls	r3, r6, #28
    56b8:	d5bb      	bpl.n	5632 <f_open+0x72>
			dw = get_fattime();					/* Created time */
    56ba:	4b20      	ldr	r3, [pc, #128]	; (573c <f_open+0x17c>)
    56bc:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    56be:	73a0      	strb	r0, [r4, #14]
    56c0:	0a03      	lsrs	r3, r0, #8
    56c2:	73e3      	strb	r3, [r4, #15]
    56c4:	0c03      	lsrs	r3, r0, #16
    56c6:	7423      	strb	r3, [r4, #16]
    56c8:	0e00      	lsrs	r0, r0, #24
    56ca:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    56cc:	2300      	movs	r3, #0
    56ce:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    56d0:	7723      	strb	r3, [r4, #28]
    56d2:	7763      	strb	r3, [r4, #29]
    56d4:	77a3      	strb	r3, [r4, #30]
    56d6:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    56d8:	7d62      	ldrb	r2, [r4, #21]
    56da:	0212      	lsls	r2, r2, #8
    56dc:	7d27      	ldrb	r7, [r4, #20]
    56de:	4317      	orrs	r7, r2
    56e0:	043f      	lsls	r7, r7, #16
    56e2:	7ee1      	ldrb	r1, [r4, #27]
    56e4:	0209      	lsls	r1, r1, #8
    56e6:	7ea2      	ldrb	r2, [r4, #26]
    56e8:	430a      	orrs	r2, r1
    56ea:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    56ec:	76a3      	strb	r3, [r4, #26]
    56ee:	76e3      	strb	r3, [r4, #27]
    56f0:	7523      	strb	r3, [r4, #20]
    56f2:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    56f4:	9885      	ldr	r0, [sp, #532]	; 0x214
    56f6:	3301      	adds	r3, #1
    56f8:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    56fa:	2f00      	cmp	r7, #0
    56fc:	d097      	beq.n	562e <f_open+0x6e>
				dw = dj.fs->winsect;
    56fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    5700:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    5702:	0039      	movs	r1, r7
    5704:	4b0e      	ldr	r3, [pc, #56]	; (5740 <f_open+0x180>)
    5706:	4798      	blx	r3
				if (res == FR_OK) {
    5708:	2800      	cmp	r0, #0
    570a:	d1b5      	bne.n	5678 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    570c:	9885      	ldr	r0, [sp, #532]	; 0x214
    570e:	3f01      	subs	r7, #1
    5710:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    5712:	4641      	mov	r1, r8
    5714:	4b0b      	ldr	r3, [pc, #44]	; (5744 <f_open+0x184>)
    5716:	4798      	blx	r3
	if (res == FR_OK) {
    5718:	2800      	cmp	r0, #0
    571a:	d100      	bne.n	571e <f_open+0x15e>
    571c:	e787      	b.n	562e <f_open+0x6e>
    571e:	e7ab      	b.n	5678 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    5720:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    5722:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    5724:	423b      	tst	r3, r7
    5726:	d0b2      	beq.n	568e <f_open+0xce>
			res = FR_INVALID_NAME;
    5728:	2006      	movs	r0, #6
    572a:	e7ad      	b.n	5688 <f_open+0xc8>
    572c:	fffffdc8 	.word	0xfffffdc8
    5730:	00004351 	.word	0x00004351
    5734:	0000524d 	.word	0x0000524d
    5738:	00004e75 	.word	0x00004e75
    573c:	000041d1 	.word	0x000041d1
    5740:	00004b41 	.word	0x00004b41
    5744:	00004701 	.word	0x00004701

00005748 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    5748:	b5f0      	push	{r4, r5, r6, r7, lr}
    574a:	46de      	mov	lr, fp
    574c:	4657      	mov	r7, sl
    574e:	464e      	mov	r6, r9
    5750:	4645      	mov	r5, r8
    5752:	b5e0      	push	{r5, r6, r7, lr}
    5754:	b083      	sub	sp, #12
    5756:	0004      	movs	r4, r0
    5758:	000d      	movs	r5, r1
    575a:	0016      	movs	r6, r2
    575c:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    575e:	2300      	movs	r3, #0
    5760:	464a      	mov	r2, r9
    5762:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    5764:	8881      	ldrh	r1, [r0, #4]
    5766:	6800      	ldr	r0, [r0, #0]
    5768:	4b7f      	ldr	r3, [pc, #508]	; (5968 <f_write+0x220>)
    576a:	4798      	blx	r3
    576c:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    576e:	2800      	cmp	r0, #0
    5770:	d000      	beq.n	5774 <f_write+0x2c>
    5772:	e0f1      	b.n	5958 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    5774:	79a3      	ldrb	r3, [r4, #6]
    5776:	b25a      	sxtb	r2, r3
    5778:	2a00      	cmp	r2, #0
    577a:	da00      	bge.n	577e <f_write+0x36>
    577c:	e0ea      	b.n	5954 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    577e:	079b      	lsls	r3, r3, #30
    5780:	d402      	bmi.n	5788 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    5782:	2307      	movs	r3, #7
    5784:	9300      	str	r3, [sp, #0]
    5786:	e0e7      	b.n	5958 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    5788:	68e3      	ldr	r3, [r4, #12]
    578a:	199a      	adds	r2, r3, r6
    578c:	4293      	cmp	r3, r2
    578e:	d810      	bhi.n	57b2 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    5790:	2e00      	cmp	r6, #0
    5792:	d00e      	beq.n	57b2 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    5794:	002f      	movs	r7, r5
    5796:	e07b      	b.n	5890 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    5798:	2100      	movs	r1, #0
    579a:	4b74      	ldr	r3, [pc, #464]	; (596c <f_write+0x224>)
    579c:	4798      	blx	r3
    579e:	0003      	movs	r3, r0
    57a0:	6120      	str	r0, [r4, #16]
    57a2:	e003      	b.n	57ac <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    57a4:	6961      	ldr	r1, [r4, #20]
    57a6:	4b71      	ldr	r3, [pc, #452]	; (596c <f_write+0x224>)
    57a8:	4798      	blx	r3
    57aa:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    57ac:	2b00      	cmp	r3, #0
    57ae:	d000      	beq.n	57b2 <f_write+0x6a>
    57b0:	e080      	b.n	58b4 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    57b2:	68a3      	ldr	r3, [r4, #8]
    57b4:	68e2      	ldr	r2, [r4, #12]
    57b6:	4293      	cmp	r3, r2
    57b8:	d900      	bls.n	57bc <f_write+0x74>
    57ba:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    57bc:	79a3      	ldrb	r3, [r4, #6]
    57be:	2220      	movs	r2, #32
    57c0:	4313      	orrs	r3, r2
    57c2:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    57c4:	e0c8      	b.n	5958 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    57c6:	79a2      	ldrb	r2, [r4, #6]
    57c8:	3b81      	subs	r3, #129	; 0x81
    57ca:	4313      	orrs	r3, r2
    57cc:	71a3      	strb	r3, [r4, #6]
    57ce:	2302      	movs	r3, #2
    57d0:	9300      	str	r3, [sp, #0]
    57d2:	e0c1      	b.n	5958 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    57d4:	79a2      	ldrb	r2, [r4, #6]
    57d6:	3b7f      	subs	r3, #127	; 0x7f
    57d8:	4313      	orrs	r3, r2
    57da:	71a3      	strb	r3, [r4, #6]
    57dc:	2301      	movs	r3, #1
    57de:	9300      	str	r3, [sp, #0]
    57e0:	e0ba      	b.n	5958 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    57e2:	2100      	movs	r1, #0
    57e4:	4b62      	ldr	r3, [pc, #392]	; (5970 <f_write+0x228>)
    57e6:	4798      	blx	r3
    57e8:	2800      	cmp	r0, #0
    57ea:	d06d      	beq.n	58c8 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    57ec:	79a2      	ldrb	r2, [r4, #6]
    57ee:	2380      	movs	r3, #128	; 0x80
    57f0:	425b      	negs	r3, r3
    57f2:	4313      	orrs	r3, r2
    57f4:	71a3      	strb	r3, [r4, #6]
    57f6:	2301      	movs	r3, #1
    57f8:	9300      	str	r3, [sp, #0]
    57fa:	e0ad      	b.n	5958 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    57fc:	79a2      	ldrb	r2, [r4, #6]
    57fe:	2380      	movs	r3, #128	; 0x80
    5800:	425b      	negs	r3, r3
    5802:	4313      	orrs	r3, r2
    5804:	71a3      	strb	r3, [r4, #6]
    5806:	2302      	movs	r3, #2
    5808:	9300      	str	r3, [sp, #0]
    580a:	e0a5      	b.n	5958 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    580c:	79a2      	ldrb	r2, [r4, #6]
    580e:	2380      	movs	r3, #128	; 0x80
    5810:	425b      	negs	r3, r3
    5812:	4313      	orrs	r3, r2
    5814:	71a3      	strb	r3, [r4, #6]
    5816:	2301      	movs	r3, #1
    5818:	9300      	str	r3, [sp, #0]
    581a:	e09d      	b.n	5958 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    581c:	0240      	lsls	r0, r0, #9
    581e:	1839      	adds	r1, r7, r0
    5820:	3330      	adds	r3, #48	; 0x30
    5822:	0018      	movs	r0, r3
    5824:	2280      	movs	r2, #128	; 0x80
    5826:	0092      	lsls	r2, r2, #2
    5828:	4b52      	ldr	r3, [pc, #328]	; (5974 <f_write+0x22c>)
    582a:	4798      	blx	r3
					fp->fs->wflag = 0;
    582c:	2300      	movs	r3, #0
    582e:	6822      	ldr	r2, [r4, #0]
    5830:	7113      	strb	r3, [r2, #4]
    5832:	e072      	b.n	591a <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    5834:	68a3      	ldr	r3, [r4, #8]
    5836:	68e2      	ldr	r2, [r4, #12]
    5838:	4293      	cmp	r3, r2
    583a:	d271      	bcs.n	5920 <f_write+0x1d8>
			fp->dsect = sect;
    583c:	4643      	mov	r3, r8
    583e:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    5840:	68a3      	ldr	r3, [r4, #8]
    5842:	05dd      	lsls	r5, r3, #23
    5844:	0ded      	lsrs	r5, r5, #23
    5846:	2380      	movs	r3, #128	; 0x80
    5848:	009b      	lsls	r3, r3, #2
    584a:	1b5d      	subs	r5, r3, r5
    584c:	42b5      	cmp	r5, r6
    584e:	d900      	bls.n	5852 <f_write+0x10a>
    5850:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    5852:	69a1      	ldr	r1, [r4, #24]
    5854:	6820      	ldr	r0, [r4, #0]
    5856:	4b46      	ldr	r3, [pc, #280]	; (5970 <f_write+0x228>)
    5858:	4798      	blx	r3
    585a:	2800      	cmp	r0, #0
    585c:	d172      	bne.n	5944 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    585e:	68a3      	ldr	r3, [r4, #8]
    5860:	05d8      	lsls	r0, r3, #23
    5862:	0dc0      	lsrs	r0, r0, #23
    5864:	3030      	adds	r0, #48	; 0x30
    5866:	6823      	ldr	r3, [r4, #0]
    5868:	469c      	mov	ip, r3
    586a:	4460      	add	r0, ip
    586c:	002a      	movs	r2, r5
    586e:	0039      	movs	r1, r7
    5870:	4b40      	ldr	r3, [pc, #256]	; (5974 <f_write+0x22c>)
    5872:	4798      	blx	r3
		fp->fs->wflag = 1;
    5874:	2301      	movs	r3, #1
    5876:	6822      	ldr	r2, [r4, #0]
    5878:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    587a:	197f      	adds	r7, r7, r5
    587c:	68a3      	ldr	r3, [r4, #8]
    587e:	195b      	adds	r3, r3, r5
    5880:	60a3      	str	r3, [r4, #8]
    5882:	464b      	mov	r3, r9
    5884:	681b      	ldr	r3, [r3, #0]
    5886:	195b      	adds	r3, r3, r5
    5888:	464a      	mov	r2, r9
    588a:	6013      	str	r3, [r2, #0]
    588c:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    588e:	d090      	beq.n	57b2 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    5890:	68a3      	ldr	r3, [r4, #8]
    5892:	05da      	lsls	r2, r3, #23
    5894:	d1d4      	bne.n	5840 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    5896:	6820      	ldr	r0, [r4, #0]
    5898:	7882      	ldrb	r2, [r0, #2]
    589a:	3a01      	subs	r2, #1
    589c:	0a5d      	lsrs	r5, r3, #9
    589e:	4015      	ands	r5, r2
    58a0:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    58a2:	2d00      	cmp	r5, #0
    58a4:	d10b      	bne.n	58be <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    58a6:	2b00      	cmp	r3, #0
    58a8:	d000      	beq.n	58ac <f_write+0x164>
    58aa:	e77b      	b.n	57a4 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    58ac:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    58ae:	2b00      	cmp	r3, #0
    58b0:	d100      	bne.n	58b4 <f_write+0x16c>
    58b2:	e771      	b.n	5798 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    58b4:	2b01      	cmp	r3, #1
    58b6:	d086      	beq.n	57c6 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    58b8:	1c5a      	adds	r2, r3, #1
    58ba:	d08b      	beq.n	57d4 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    58bc:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    58be:	6820      	ldr	r0, [r4, #0]
    58c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    58c2:	69a2      	ldr	r2, [r4, #24]
    58c4:	4293      	cmp	r3, r2
    58c6:	d08c      	beq.n	57e2 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    58c8:	6823      	ldr	r3, [r4, #0]
    58ca:	469a      	mov	sl, r3
    58cc:	6961      	ldr	r1, [r4, #20]
    58ce:	0018      	movs	r0, r3
    58d0:	4b29      	ldr	r3, [pc, #164]	; (5978 <f_write+0x230>)
    58d2:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    58d4:	2800      	cmp	r0, #0
    58d6:	d091      	beq.n	57fc <f_write+0xb4>
			sect += csect;
    58d8:	4680      	mov	r8, r0
    58da:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    58dc:	0a73      	lsrs	r3, r6, #9
    58de:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    58e0:	d0a8      	beq.n	5834 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    58e2:	4653      	mov	r3, sl
    58e4:	789b      	ldrb	r3, [r3, #2]
    58e6:	465a      	mov	r2, fp
    58e8:	18aa      	adds	r2, r5, r2
    58ea:	429a      	cmp	r2, r3
    58ec:	d901      	bls.n	58f2 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    58ee:	1b5b      	subs	r3, r3, r5
    58f0:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    58f2:	465b      	mov	r3, fp
    58f4:	466a      	mov	r2, sp
    58f6:	71d3      	strb	r3, [r2, #7]
    58f8:	79d3      	ldrb	r3, [r2, #7]
    58fa:	4652      	mov	r2, sl
    58fc:	7850      	ldrb	r0, [r2, #1]
    58fe:	4642      	mov	r2, r8
    5900:	0039      	movs	r1, r7
    5902:	4d1e      	ldr	r5, [pc, #120]	; (597c <f_write+0x234>)
    5904:	47a8      	blx	r5
    5906:	2800      	cmp	r0, #0
    5908:	d000      	beq.n	590c <f_write+0x1c4>
    590a:	e77f      	b.n	580c <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    590c:	6823      	ldr	r3, [r4, #0]
    590e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5910:	4641      	mov	r1, r8
    5912:	1a50      	subs	r0, r2, r1
    5914:	4583      	cmp	fp, r0
    5916:	d900      	bls.n	591a <f_write+0x1d2>
    5918:	e780      	b.n	581c <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    591a:	465b      	mov	r3, fp
    591c:	025d      	lsls	r5, r3, #9
				continue;
    591e:	e7ac      	b.n	587a <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5920:	2100      	movs	r1, #0
    5922:	4650      	mov	r0, sl
    5924:	4b12      	ldr	r3, [pc, #72]	; (5970 <f_write+0x228>)
    5926:	4798      	blx	r3
    5928:	2800      	cmp	r0, #0
    592a:	d103      	bne.n	5934 <f_write+0x1ec>
				fp->fs->winsect = sect;
    592c:	6823      	ldr	r3, [r4, #0]
    592e:	4642      	mov	r2, r8
    5930:	62da      	str	r2, [r3, #44]	; 0x2c
    5932:	e783      	b.n	583c <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5934:	79a2      	ldrb	r2, [r4, #6]
    5936:	2380      	movs	r3, #128	; 0x80
    5938:	425b      	negs	r3, r3
    593a:	4313      	orrs	r3, r2
    593c:	71a3      	strb	r3, [r4, #6]
    593e:	2301      	movs	r3, #1
    5940:	9300      	str	r3, [sp, #0]
    5942:	e009      	b.n	5958 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    5944:	79a2      	ldrb	r2, [r4, #6]
    5946:	2380      	movs	r3, #128	; 0x80
    5948:	425b      	negs	r3, r3
    594a:	4313      	orrs	r3, r2
    594c:	71a3      	strb	r3, [r4, #6]
    594e:	2301      	movs	r3, #1
    5950:	9300      	str	r3, [sp, #0]
    5952:	e001      	b.n	5958 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    5954:	2302      	movs	r3, #2
    5956:	9300      	str	r3, [sp, #0]
}
    5958:	9800      	ldr	r0, [sp, #0]
    595a:	b003      	add	sp, #12
    595c:	bc3c      	pop	{r2, r3, r4, r5}
    595e:	4690      	mov	r8, r2
    5960:	4699      	mov	r9, r3
    5962:	46a2      	mov	sl, r4
    5964:	46ab      	mov	fp, r5
    5966:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5968:	0000427d 	.word	0x0000427d
    596c:	00004a7d 	.word	0x00004a7d
    5970:	00004701 	.word	0x00004701
    5974:	00004221 	.word	0x00004221
    5978:	00004247 	.word	0x00004247
    597c:	000040e1 	.word	0x000040e1

00005980 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    5980:	b570      	push	{r4, r5, r6, lr}
    5982:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    5984:	8881      	ldrh	r1, [r0, #4]
    5986:	6800      	ldr	r0, [r0, #0]
    5988:	4b1c      	ldr	r3, [pc, #112]	; (59fc <f_sync+0x7c>)
    598a:	4798      	blx	r3
	if (res == FR_OK) {
    598c:	2800      	cmp	r0, #0
    598e:	d102      	bne.n	5996 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    5990:	79a3      	ldrb	r3, [r4, #6]
    5992:	069b      	lsls	r3, r3, #26
    5994:	d400      	bmi.n	5998 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    5996:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    5998:	69e1      	ldr	r1, [r4, #28]
    599a:	6820      	ldr	r0, [r4, #0]
    599c:	4b18      	ldr	r3, [pc, #96]	; (5a00 <f_sync+0x80>)
    599e:	4798      	blx	r3
			if (res == FR_OK) {
    59a0:	2800      	cmp	r0, #0
    59a2:	d1f8      	bne.n	5996 <f_sync+0x16>
				dir = fp->dir_ptr;
    59a4:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    59a6:	7aeb      	ldrb	r3, [r5, #11]
    59a8:	2220      	movs	r2, #32
    59aa:	4313      	orrs	r3, r2
    59ac:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    59ae:	7b23      	ldrb	r3, [r4, #12]
    59b0:	772b      	strb	r3, [r5, #28]
    59b2:	89a3      	ldrh	r3, [r4, #12]
    59b4:	0a1b      	lsrs	r3, r3, #8
    59b6:	776b      	strb	r3, [r5, #29]
    59b8:	89e3      	ldrh	r3, [r4, #14]
    59ba:	77ab      	strb	r3, [r5, #30]
    59bc:	7be3      	ldrb	r3, [r4, #15]
    59be:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    59c0:	7c23      	ldrb	r3, [r4, #16]
    59c2:	76ab      	strb	r3, [r5, #26]
    59c4:	8a23      	ldrh	r3, [r4, #16]
    59c6:	0a1b      	lsrs	r3, r3, #8
    59c8:	76eb      	strb	r3, [r5, #27]
    59ca:	8a63      	ldrh	r3, [r4, #18]
    59cc:	752b      	strb	r3, [r5, #20]
    59ce:	8a63      	ldrh	r3, [r4, #18]
    59d0:	0a1b      	lsrs	r3, r3, #8
    59d2:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    59d4:	4b0b      	ldr	r3, [pc, #44]	; (5a04 <f_sync+0x84>)
    59d6:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    59d8:	75a8      	strb	r0, [r5, #22]
    59da:	0a03      	lsrs	r3, r0, #8
    59dc:	75eb      	strb	r3, [r5, #23]
    59de:	0c03      	lsrs	r3, r0, #16
    59e0:	762b      	strb	r3, [r5, #24]
    59e2:	0e00      	lsrs	r0, r0, #24
    59e4:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    59e6:	79a3      	ldrb	r3, [r4, #6]
    59e8:	2220      	movs	r2, #32
    59ea:	4393      	bics	r3, r2
    59ec:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    59ee:	2301      	movs	r3, #1
    59f0:	6822      	ldr	r2, [r4, #0]
    59f2:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    59f4:	6820      	ldr	r0, [r4, #0]
    59f6:	4b04      	ldr	r3, [pc, #16]	; (5a08 <f_sync+0x88>)
    59f8:	4798      	blx	r3
    59fa:	e7cc      	b.n	5996 <f_sync+0x16>
    59fc:	0000427d 	.word	0x0000427d
    5a00:	00004701 	.word	0x00004701
    5a04:	000041d1 	.word	0x000041d1
    5a08:	00005159 	.word	0x00005159

00005a0c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    5a0c:	b510      	push	{r4, lr}
    5a0e:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    5a10:	4b03      	ldr	r3, [pc, #12]	; (5a20 <f_close+0x14>)
    5a12:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    5a14:	2800      	cmp	r0, #0
    5a16:	d101      	bne.n	5a1c <f_close+0x10>
    5a18:	2300      	movs	r3, #0
    5a1a:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    5a1c:	bd10      	pop	{r4, pc}
    5a1e:	46c0      	nop			; (mov r8, r8)
    5a20:	00005981 	.word	0x00005981

00005a24 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    5a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a26:	46de      	mov	lr, fp
    5a28:	4657      	mov	r7, sl
    5a2a:	464e      	mov	r6, r9
    5a2c:	4645      	mov	r5, r8
    5a2e:	b5e0      	push	{r5, r6, r7, lr}
    5a30:	0004      	movs	r4, r0
    5a32:	000e      	movs	r6, r1
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    5a34:	8881      	ldrh	r1, [r0, #4]
    5a36:	6800      	ldr	r0, [r0, #0]
    5a38:	4b57      	ldr	r3, [pc, #348]	; (5b98 <f_lseek+0x174>)
    5a3a:	4798      	blx	r3
    5a3c:	1e05      	subs	r5, r0, #0
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    5a3e:	d000      	beq.n	5a42 <f_lseek+0x1e>
    5a40:	e0a2      	b.n	5b88 <f_lseek+0x164>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    5a42:	79a3      	ldrb	r3, [r4, #6]
    5a44:	b25a      	sxtb	r2, r3
    5a46:	2a00      	cmp	r2, #0
    5a48:	da00      	bge.n	5a4c <f_lseek+0x28>
    5a4a:	e09c      	b.n	5b86 <f_lseek+0x162>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    5a4c:	68e2      	ldr	r2, [r4, #12]
    5a4e:	42b2      	cmp	r2, r6
    5a50:	d202      	bcs.n	5a58 <f_lseek+0x34>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    5a52:	079b      	lsls	r3, r3, #30
    5a54:	d400      	bmi.n	5a58 <f_lseek+0x34>
#endif
			) ofs = fp->fsize;
    5a56:	0016      	movs	r6, r2

		ifptr = fp->fptr;
    5a58:	68a0      	ldr	r0, [r4, #8]
		fp->fptr = nsect = 0;
    5a5a:	2300      	movs	r3, #0
    5a5c:	60a3      	str	r3, [r4, #8]
		if (ofs) {
    5a5e:	2e00      	cmp	r6, #0
    5a60:	d100      	bne.n	5a64 <f_lseek+0x40>
    5a62:	e091      	b.n	5b88 <f_lseek+0x164>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    5a64:	6823      	ldr	r3, [r4, #0]
    5a66:	4699      	mov	r9, r3
    5a68:	789f      	ldrb	r7, [r3, #2]
    5a6a:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
    5a6c:	2800      	cmp	r0, #0
    5a6e:	d013      	beq.n	5a98 <f_lseek+0x74>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    5a70:	1e43      	subs	r3, r0, #1
    5a72:	4698      	mov	r8, r3
    5a74:	1e70      	subs	r0, r6, #1
    5a76:	4b49      	ldr	r3, [pc, #292]	; (5b9c <f_lseek+0x178>)
    5a78:	469a      	mov	sl, r3
    5a7a:	0039      	movs	r1, r7
    5a7c:	4798      	blx	r3
    5a7e:	4683      	mov	fp, r0
    5a80:	0039      	movs	r1, r7
    5a82:	4640      	mov	r0, r8
    5a84:	47d0      	blx	sl
			if (ifptr > 0 &&
    5a86:	4583      	cmp	fp, r0
    5a88:	d306      	bcc.n	5a98 <f_lseek+0x74>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    5a8a:	4278      	negs	r0, r7
    5a8c:	4643      	mov	r3, r8
    5a8e:	4003      	ands	r3, r0
    5a90:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
    5a92:	1af6      	subs	r6, r6, r3
				clst = fp->clust;
    5a94:	6960      	ldr	r0, [r4, #20]
    5a96:	e003      	b.n	5aa0 <f_lseek+0x7c>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    5a98:	6920      	ldr	r0, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    5a9a:	2800      	cmp	r0, #0
    5a9c:	d00b      	beq.n	5ab6 <f_lseek+0x92>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
    5a9e:	6160      	str	r0, [r4, #20]
			}
			if (clst != 0) {
    5aa0:	2800      	cmp	r0, #0
    5aa2:	d060      	beq.n	5b66 <f_lseek+0x142>
				while (ofs > bcs) {						/* Cluster following loop */
    5aa4:	42be      	cmp	r6, r7
    5aa6:	d93a      	bls.n	5b1e <f_lseek+0xfa>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    5aa8:	2302      	movs	r3, #2
    5aaa:	4698      	mov	r8, r3
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    5aac:	4b3c      	ldr	r3, [pc, #240]	; (5ba0 <f_lseek+0x17c>)
    5aae:	469a      	mov	sl, r3
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    5ab0:	4b3c      	ldr	r3, [pc, #240]	; (5ba4 <f_lseek+0x180>)
    5ab2:	4699      	mov	r9, r3
    5ab4:	e029      	b.n	5b0a <f_lseek+0xe6>
					clst = create_chain(fp->fs, 0);
    5ab6:	2100      	movs	r1, #0
    5ab8:	4648      	mov	r0, r9
    5aba:	4b39      	ldr	r3, [pc, #228]	; (5ba0 <f_lseek+0x17c>)
    5abc:	4798      	blx	r3
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    5abe:	2801      	cmp	r0, #1
    5ac0:	d003      	beq.n	5aca <f_lseek+0xa6>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5ac2:	1c43      	adds	r3, r0, #1
    5ac4:	d008      	beq.n	5ad8 <f_lseek+0xb4>
					fp->sclust = clst;
    5ac6:	6120      	str	r0, [r4, #16]
    5ac8:	e7e9      	b.n	5a9e <f_lseek+0x7a>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    5aca:	79a2      	ldrb	r2, [r4, #6]
    5acc:	2380      	movs	r3, #128	; 0x80
    5ace:	425b      	negs	r3, r3
    5ad0:	4313      	orrs	r3, r2
    5ad2:	71a3      	strb	r3, [r4, #6]
    5ad4:	2502      	movs	r5, #2
    5ad6:	e057      	b.n	5b88 <f_lseek+0x164>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5ad8:	79a2      	ldrb	r2, [r4, #6]
    5ada:	2380      	movs	r3, #128	; 0x80
    5adc:	425b      	negs	r3, r3
    5ade:	4313      	orrs	r3, r2
    5ae0:	71a3      	strb	r3, [r4, #6]
    5ae2:	2501      	movs	r5, #1
    5ae4:	e050      	b.n	5b88 <f_lseek+0x164>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    5ae6:	0001      	movs	r1, r0
    5ae8:	6820      	ldr	r0, [r4, #0]
    5aea:	47c8      	blx	r9
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5aec:	1c43      	adds	r3, r0, #1
    5aee:	d028      	beq.n	5b42 <f_lseek+0x11e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    5af0:	2801      	cmp	r0, #1
    5af2:	d92d      	bls.n	5b50 <f_lseek+0x12c>
    5af4:	6823      	ldr	r3, [r4, #0]
    5af6:	699b      	ldr	r3, [r3, #24]
    5af8:	4298      	cmp	r0, r3
    5afa:	d229      	bcs.n	5b50 <f_lseek+0x12c>
					fp->clust = clst;
    5afc:	6160      	str	r0, [r4, #20]
					fp->fptr += bcs;
    5afe:	68a3      	ldr	r3, [r4, #8]
    5b00:	19db      	adds	r3, r3, r7
    5b02:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
    5b04:	1bf6      	subs	r6, r6, r7
				while (ofs > bcs) {						/* Cluster following loop */
    5b06:	42b7      	cmp	r7, r6
    5b08:	d209      	bcs.n	5b1e <f_lseek+0xfa>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    5b0a:	79a3      	ldrb	r3, [r4, #6]
    5b0c:	4642      	mov	r2, r8
    5b0e:	421a      	tst	r2, r3
    5b10:	d0e9      	beq.n	5ae6 <f_lseek+0xc2>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    5b12:	0001      	movs	r1, r0
    5b14:	6820      	ldr	r0, [r4, #0]
    5b16:	47d0      	blx	sl
						if (clst == 0) {				/* When disk gets full, clip file size */
    5b18:	2800      	cmp	r0, #0
    5b1a:	d1e7      	bne.n	5aec <f_lseek+0xc8>
							ofs = bcs; break;
    5b1c:	003e      	movs	r6, r7
				}
				fp->fptr += ofs;
    5b1e:	68a3      	ldr	r3, [r4, #8]
    5b20:	199b      	adds	r3, r3, r6
    5b22:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    5b24:	05f3      	lsls	r3, r6, #23
    5b26:	d01d      	beq.n	5b64 <f_lseek+0x140>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    5b28:	0001      	movs	r1, r0
    5b2a:	6820      	ldr	r0, [r4, #0]
    5b2c:	4b1e      	ldr	r3, [pc, #120]	; (5ba8 <f_lseek+0x184>)
    5b2e:	4798      	blx	r3
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    5b30:	2800      	cmp	r0, #0
    5b32:	d114      	bne.n	5b5e <f_lseek+0x13a>
    5b34:	79a2      	ldrb	r2, [r4, #6]
    5b36:	2380      	movs	r3, #128	; 0x80
    5b38:	425b      	negs	r3, r3
    5b3a:	4313      	orrs	r3, r2
    5b3c:	71a3      	strb	r3, [r4, #6]
    5b3e:	2502      	movs	r5, #2
    5b40:	e022      	b.n	5b88 <f_lseek+0x164>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5b42:	79a2      	ldrb	r2, [r4, #6]
    5b44:	2380      	movs	r3, #128	; 0x80
    5b46:	425b      	negs	r3, r3
    5b48:	4313      	orrs	r3, r2
    5b4a:	71a3      	strb	r3, [r4, #6]
    5b4c:	2501      	movs	r5, #1
    5b4e:	e01b      	b.n	5b88 <f_lseek+0x164>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    5b50:	79a2      	ldrb	r2, [r4, #6]
    5b52:	2380      	movs	r3, #128	; 0x80
    5b54:	425b      	negs	r3, r3
    5b56:	4313      	orrs	r3, r2
    5b58:	71a3      	strb	r3, [r4, #6]
    5b5a:	2502      	movs	r5, #2
    5b5c:	e014      	b.n	5b88 <f_lseek+0x164>
					nsect += ofs / SS(fp->fs);
    5b5e:	0a76      	lsrs	r6, r6, #9
    5b60:	1830      	adds	r0, r6, r0
    5b62:	e000      	b.n	5b66 <f_lseek+0x142>
		fp->fptr = nsect = 0;
    5b64:	2000      	movs	r0, #0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    5b66:	68a3      	ldr	r3, [r4, #8]
    5b68:	05da      	lsls	r2, r3, #23
    5b6a:	d003      	beq.n	5b74 <f_lseek+0x150>
    5b6c:	69a2      	ldr	r2, [r4, #24]
    5b6e:	4290      	cmp	r0, r2
    5b70:	d000      	beq.n	5b74 <f_lseek+0x150>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    5b72:	61a0      	str	r0, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    5b74:	68e2      	ldr	r2, [r4, #12]
    5b76:	4293      	cmp	r3, r2
    5b78:	d906      	bls.n	5b88 <f_lseek+0x164>
			fp->fsize = fp->fptr;
    5b7a:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
    5b7c:	79a3      	ldrb	r3, [r4, #6]
    5b7e:	2220      	movs	r2, #32
    5b80:	4313      	orrs	r3, r2
    5b82:	71a3      	strb	r3, [r4, #6]
    5b84:	e000      	b.n	5b88 <f_lseek+0x164>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    5b86:	2502      	movs	r5, #2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    5b88:	0028      	movs	r0, r5
    5b8a:	bc3c      	pop	{r2, r3, r4, r5}
    5b8c:	4690      	mov	r8, r2
    5b8e:	4699      	mov	r9, r3
    5b90:	46a2      	mov	sl, r4
    5b92:	46ab      	mov	fp, r5
    5b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b96:	46c0      	nop			; (mov r8, r8)
    5b98:	0000427d 	.word	0x0000427d
    5b9c:	00009065 	.word	0x00009065
    5ba0:	00004a7d 	.word	0x00004a7d
    5ba4:	000047a1 	.word	0x000047a1
    5ba8:	00004247 	.word	0x00004247

00005bac <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    5bac:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    5bae:	287f      	cmp	r0, #127	; 0x7f
    5bb0:	d911      	bls.n	5bd6 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    5bb2:	2900      	cmp	r1, #0
    5bb4:	d111      	bne.n	5bda <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    5bb6:	28c7      	cmp	r0, #199	; 0xc7
    5bb8:	d017      	beq.n	5bea <ff_convert+0x3e>
    5bba:	4a0d      	ldr	r2, [pc, #52]	; (5bf0 <ff_convert+0x44>)
    5bbc:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    5bbe:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    5bc0:	8811      	ldrh	r1, [r2, #0]
    5bc2:	4281      	cmp	r1, r0
    5bc4:	d004      	beq.n	5bd0 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    5bc6:	3301      	adds	r3, #1
    5bc8:	b29b      	uxth	r3, r3
    5bca:	3202      	adds	r2, #2
    5bcc:	2b80      	cmp	r3, #128	; 0x80
    5bce:	d1f7      	bne.n	5bc0 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    5bd0:	3380      	adds	r3, #128	; 0x80
    5bd2:	20ff      	movs	r0, #255	; 0xff
    5bd4:	4003      	ands	r3, r0
		}
	}

	return c;
}
    5bd6:	0018      	movs	r0, r3
    5bd8:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    5bda:	2300      	movs	r3, #0
    5bdc:	28ff      	cmp	r0, #255	; 0xff
    5bde:	d8fa      	bhi.n	5bd6 <ff_convert+0x2a>
    5be0:	3880      	subs	r0, #128	; 0x80
    5be2:	0040      	lsls	r0, r0, #1
    5be4:	4b02      	ldr	r3, [pc, #8]	; (5bf0 <ff_convert+0x44>)
    5be6:	5ac3      	ldrh	r3, [r0, r3]
    5be8:	e7f5      	b.n	5bd6 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    5bea:	2300      	movs	r3, #0
    5bec:	e7f0      	b.n	5bd0 <ff_convert+0x24>
    5bee:	46c0      	nop			; (mov r8, r8)
    5bf0:	0000a9a4 	.word	0x0000a9a4

00005bf4 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    5bf4:	2861      	cmp	r0, #97	; 0x61
    5bf6:	d014      	beq.n	5c22 <ff_wtoupper+0x2e>
    5bf8:	4b0b      	ldr	r3, [pc, #44]	; (5c28 <ff_wtoupper+0x34>)
    5bfa:	3304      	adds	r3, #4
    5bfc:	2101      	movs	r1, #1
    5bfe:	2262      	movs	r2, #98	; 0x62
    5c00:	4290      	cmp	r0, r2
    5c02:	d007      	beq.n	5c14 <ff_wtoupper+0x20>
    5c04:	3101      	adds	r1, #1
    5c06:	3302      	adds	r3, #2
    5c08:	1e9a      	subs	r2, r3, #2
    5c0a:	8812      	ldrh	r2, [r2, #0]
    5c0c:	2a00      	cmp	r2, #0
    5c0e:	d1f7      	bne.n	5c00 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    5c10:	0003      	movs	r3, r0
    5c12:	e004      	b.n	5c1e <ff_wtoupper+0x2a>
    5c14:	1e03      	subs	r3, r0, #0
    5c16:	d002      	beq.n	5c1e <ff_wtoupper+0x2a>
    5c18:	0049      	lsls	r1, r1, #1
    5c1a:	4b04      	ldr	r3, [pc, #16]	; (5c2c <ff_wtoupper+0x38>)
    5c1c:	5acb      	ldrh	r3, [r1, r3]
}
    5c1e:	0018      	movs	r0, r3
    5c20:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    5c22:	2100      	movs	r1, #0
    5c24:	e7f8      	b.n	5c18 <ff_wtoupper+0x24>
    5c26:	46c0      	nop			; (mov r8, r8)
    5c28:	0000aaa4 	.word	0x0000aaa4
    5c2c:	0000ac84 	.word	0x0000ac84

00005c30 <adc_spi_callback>:
	//printf("Generated fn: %s\n\r", fn);
}

static void adc_spi_callback(struct spi_module *const module)
{
	adc_recorder.rec_done = true;
    5c30:	2201      	movs	r2, #1
    5c32:	4b01      	ldr	r3, [pc, #4]	; (5c38 <adc_spi_callback+0x8>)
    5c34:	70da      	strb	r2, [r3, #3]
}
    5c36:	4770      	bx	lr
    5c38:	200006c4 	.word	0x200006c4

00005c3c <audio_sync_reached_callback>:
	return true;
}

static void audio_sync_reached_callback(void)
{
	sync_reached = true;
    5c3c:	2201      	movs	r2, #1
    5c3e:	4b01      	ldr	r3, [pc, #4]	; (5c44 <audio_sync_reached_callback+0x8>)
    5c40:	701a      	strb	r2, [r3, #0]
}
    5c42:	4770      	bx	lr
    5c44:	200002da 	.word	0x200002da

00005c48 <audio_in_init>:
{
    5c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c4a:	b091      	sub	sp, #68	; 0x44
	config->input_pull = PORT_PIN_PULL_UP;
    5c4c:	a90f      	add	r1, sp, #60	; 0x3c
    5c4e:	2501      	movs	r5, #1
    5c50:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    5c52:	2600      	movs	r6, #0
    5c54:	708e      	strb	r6, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5c56:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(ADC_CONV_PIN, &pin_conf);
    5c58:	2014      	movs	r0, #20
    5c5a:	4f35      	ldr	r7, [pc, #212]	; (5d30 <audio_in_init+0xe8>)
    5c5c:	47b8      	blx	r7
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    5c5e:	2280      	movs	r2, #128	; 0x80
    5c60:	0352      	lsls	r2, r2, #13
    5c62:	4b34      	ldr	r3, [pc, #208]	; (5d34 <audio_in_init+0xec>)
    5c64:	619a      	str	r2, [r3, #24]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    5c66:	4c34      	ldr	r4, [pc, #208]	; (5d38 <audio_in_init+0xf0>)
    5c68:	232f      	movs	r3, #47	; 0x2f
    5c6a:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    5c6c:	7066      	strb	r6, [r4, #1]
	slave->address         = config->address;
    5c6e:	70a6      	strb	r6, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    5c70:	466b      	mov	r3, sp
    5c72:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
    5c74:	709e      	strb	r6, [r3, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5c76:	701d      	strb	r5, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5c78:	4669      	mov	r1, sp
    5c7a:	202f      	movs	r0, #47	; 0x2f
    5c7c:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    5c7e:	7823      	ldrb	r3, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    5c80:	09d9      	lsrs	r1, r3, #7
		return NULL;
    5c82:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5c84:	2900      	cmp	r1, #0
    5c86:	d104      	bne.n	5c92 <audio_in_init+0x4a>
		return &(ports[port_index]->Group[group_index]);
    5c88:	095a      	lsrs	r2, r3, #5
    5c8a:	01d2      	lsls	r2, r2, #7
    5c8c:	4929      	ldr	r1, [pc, #164]	; (5d34 <audio_in_init+0xec>)
    5c8e:	468c      	mov	ip, r1
    5c90:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c92:	261f      	movs	r6, #31
    5c94:	4033      	ands	r3, r6
    5c96:	2501      	movs	r5, #1
    5c98:	0029      	movs	r1, r5
    5c9a:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    5c9c:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    5c9e:	ac01      	add	r4, sp, #4
    5ca0:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5ca2:	2300      	movs	r3, #0
    5ca4:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5ca6:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    5ca8:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    5caa:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    5cac:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    5cae:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    5cb0:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    5cb2:	2224      	movs	r2, #36	; 0x24
    5cb4:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5cb6:	3a18      	subs	r2, #24
    5cb8:	2100      	movs	r1, #0
    5cba:	a807      	add	r0, sp, #28
    5cbc:	4b1f      	ldr	r3, [pc, #124]	; (5d3c <audio_in_init+0xf4>)
    5cbe:	4798      	blx	r3
	config_spi_master.mux_setting = ADC_SPI_MUX_SETTING;
    5cc0:	2380      	movs	r3, #128	; 0x80
    5cc2:	039b      	lsls	r3, r3, #14
    5cc4:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = ADC_SPI_PINMUX_PAD0;
    5cc6:	4b1e      	ldr	r3, [pc, #120]	; (5d40 <audio_in_init+0xf8>)
    5cc8:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = ADC_SPI_PINMUX_PAD1;
    5cca:	4b1e      	ldr	r3, [pc, #120]	; (5d44 <audio_in_init+0xfc>)
    5ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = ADC_SPI_PINMUX_PAD2;
    5cce:	4b1e      	ldr	r3, [pc, #120]	; (5d48 <audio_in_init+0x100>)
    5cd0:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = ADC_SPI_PINMUX_PAD3;
    5cd2:	2301      	movs	r3, #1
    5cd4:	425b      	negs	r3, r3
    5cd6:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate = ADC_SPI_BAUDRATE;
    5cd8:	4b1c      	ldr	r3, [pc, #112]	; (5d4c <audio_in_init+0x104>)
    5cda:	61a3      	str	r3, [r4, #24]
	spi_init(&adc_spi_module, ADC_SPI_MODULE, &config_spi_master);
    5cdc:	4f1c      	ldr	r7, [pc, #112]	; (5d50 <audio_in_init+0x108>)
    5cde:	0022      	movs	r2, r4
    5ce0:	491c      	ldr	r1, [pc, #112]	; (5d54 <audio_in_init+0x10c>)
    5ce2:	0038      	movs	r0, r7
    5ce4:	4b1c      	ldr	r3, [pc, #112]	; (5d58 <audio_in_init+0x110>)
    5ce6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5ce8:	683c      	ldr	r4, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5cea:	0020      	movs	r0, r4
    5cec:	4b1b      	ldr	r3, [pc, #108]	; (5d5c <audio_in_init+0x114>)
    5cee:	4798      	blx	r3
    5cf0:	4006      	ands	r6, r0
    5cf2:	40b5      	lsls	r5, r6
    5cf4:	4b1a      	ldr	r3, [pc, #104]	; (5d60 <audio_in_init+0x118>)
    5cf6:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5cf8:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    5cfa:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    5cfc:	2b00      	cmp	r3, #0
    5cfe:	d1fc      	bne.n	5cfa <audio_in_init+0xb2>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5d00:	6823      	ldr	r3, [r4, #0]
    5d02:	2202      	movs	r2, #2
    5d04:	4313      	orrs	r3, r2
    5d06:	6023      	str	r3, [r4, #0]
	spi_register_callback(&adc_spi_module, adc_spi_callback, SPI_CALLBACK_BUFFER_RECEIVED);
    5d08:	4c11      	ldr	r4, [pc, #68]	; (5d50 <audio_in_init+0x108>)
    5d0a:	3a01      	subs	r2, #1
    5d0c:	4915      	ldr	r1, [pc, #84]	; (5d64 <audio_in_init+0x11c>)
    5d0e:	0020      	movs	r0, r4
    5d10:	4b15      	ldr	r3, [pc, #84]	; (5d68 <audio_in_init+0x120>)
    5d12:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    5d14:	2237      	movs	r2, #55	; 0x37
    5d16:	5ca3      	ldrb	r3, [r4, r2]
    5d18:	2102      	movs	r1, #2
    5d1a:	430b      	orrs	r3, r1
    5d1c:	54a3      	strb	r3, [r4, r2]
	adc_recorder.adc_init_ok = true;
    5d1e:	4b13      	ldr	r3, [pc, #76]	; (5d6c <audio_in_init+0x124>)
    5d20:	3a36      	subs	r2, #54	; 0x36
    5d22:	701a      	strb	r2, [r3, #0]
	adc_recorder.rec_ready = false;
    5d24:	2200      	movs	r2, #0
    5d26:	705a      	strb	r2, [r3, #1]
	adc_recorder.rec_started = false;
    5d28:	709a      	strb	r2, [r3, #2]
	adc_recorder.rec_done = false;
    5d2a:	70da      	strb	r2, [r3, #3]
}
    5d2c:	b011      	add	sp, #68	; 0x44
    5d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d30:	00008b8d 	.word	0x00008b8d
    5d34:	41004400 	.word	0x41004400
    5d38:	200006c0 	.word	0x200006c0
    5d3c:	00009653 	.word	0x00009653
    5d40:	00100002 	.word	0x00100002
    5d44:	00110002 	.word	0x00110002
    5d48:	00120002 	.word	0x00120002
    5d4c:	003d0900 	.word	0x003d0900
    5d50:	20000628 	.word	0x20000628
    5d54:	42000c00 	.word	0x42000c00
    5d58:	00007b41 	.word	0x00007b41
    5d5c:	000025e5 	.word	0x000025e5
    5d60:	e000e100 	.word	0xe000e100
    5d64:	00005c31 	.word	0x00005c31
    5d68:	00000115 	.word	0x00000115
    5d6c:	200006c4 	.word	0x200006c4

00005d70 <audio_record_init>:
bool audio_record_init(void) {
    5d70:	b510      	push	{r4, lr}
    5d72:	b086      	sub	sp, #24
	char file_name[] = "180212_140925.wav";
    5d74:	aa01      	add	r2, sp, #4
    5d76:	4b1b      	ldr	r3, [pc, #108]	; (5de4 <audio_record_init+0x74>)
    5d78:	cb13      	ldmia	r3!, {r0, r1, r4}
    5d7a:	c213      	stmia	r2!, {r0, r1, r4}
    5d7c:	0011      	movs	r1, r2
    5d7e:	681a      	ldr	r2, [r3, #0]
    5d80:	600a      	str	r2, [r1, #0]
    5d82:	889b      	ldrh	r3, [r3, #4]
    5d84:	808b      	strh	r3, [r1, #4]
	memset(&file_sys, 0, sizeof(FATFS));
    5d86:	4c18      	ldr	r4, [pc, #96]	; (5de8 <audio_record_init+0x78>)
    5d88:	228c      	movs	r2, #140	; 0x8c
    5d8a:	0092      	lsls	r2, r2, #2
    5d8c:	2100      	movs	r1, #0
    5d8e:	0020      	movs	r0, r4
    5d90:	4b16      	ldr	r3, [pc, #88]	; (5dec <audio_record_init+0x7c>)
    5d92:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_SPI_MEM, &file_sys);
    5d94:	0021      	movs	r1, r4
    5d96:	2000      	movs	r0, #0
    5d98:	4b15      	ldr	r3, [pc, #84]	; (5df0 <audio_record_init+0x80>)
    5d9a:	4798      	blx	r3
		return false;
    5d9c:	2300      	movs	r3, #0
	if(res == FR_INVALID_DRIVE) {
    5d9e:	280b      	cmp	r0, #11
    5da0:	d01d      	beq.n	5dde <audio_record_init+0x6e>
	res = f_open(&file_object, file_name, FA_CREATE_ALWAYS | FA_WRITE);
    5da2:	220a      	movs	r2, #10
    5da4:	a901      	add	r1, sp, #4
    5da6:	4813      	ldr	r0, [pc, #76]	; (5df4 <audio_record_init+0x84>)
    5da8:	4b13      	ldr	r3, [pc, #76]	; (5df8 <audio_record_init+0x88>)
    5daa:	4798      	blx	r3
	if(res != FR_OK) {
    5dac:	2800      	cmp	r0, #0
    5dae:	d111      	bne.n	5dd4 <audio_record_init+0x64>
	res = f_write(&file_object, wave_header, 44, (UINT *)&bytes);
    5db0:	466b      	mov	r3, sp
    5db2:	222c      	movs	r2, #44	; 0x2c
    5db4:	4911      	ldr	r1, [pc, #68]	; (5dfc <audio_record_init+0x8c>)
    5db6:	480f      	ldr	r0, [pc, #60]	; (5df4 <audio_record_init+0x84>)
    5db8:	4c11      	ldr	r4, [pc, #68]	; (5e00 <audio_record_init+0x90>)
    5dba:	47a0      	blx	r4
	return true;
    5dbc:	2301      	movs	r3, #1
	if(res != FR_OK) {
    5dbe:	2800      	cmp	r0, #0
    5dc0:	d00d      	beq.n	5dde <audio_record_init+0x6e>
		printf("Error while writing WAV header: #%d\n\r", res);
    5dc2:	0001      	movs	r1, r0
    5dc4:	480f      	ldr	r0, [pc, #60]	; (5e04 <audio_record_init+0x94>)
    5dc6:	4b10      	ldr	r3, [pc, #64]	; (5e08 <audio_record_init+0x98>)
    5dc8:	4798      	blx	r3
		f_close(&file_object);
    5dca:	480a      	ldr	r0, [pc, #40]	; (5df4 <audio_record_init+0x84>)
    5dcc:	4b0f      	ldr	r3, [pc, #60]	; (5e0c <audio_record_init+0x9c>)
    5dce:	4798      	blx	r3
		return false;
    5dd0:	2300      	movs	r3, #0
    5dd2:	e004      	b.n	5dde <audio_record_init+0x6e>
		printf("Error while opening file: #%d\n\r", res);
    5dd4:	0001      	movs	r1, r0
    5dd6:	480e      	ldr	r0, [pc, #56]	; (5e10 <audio_record_init+0xa0>)
    5dd8:	4b0b      	ldr	r3, [pc, #44]	; (5e08 <audio_record_init+0x98>)
    5dda:	4798      	blx	r3
		return false;
    5ddc:	2300      	movs	r3, #0
}
    5dde:	0018      	movs	r0, r3
    5de0:	b006      	add	sp, #24
    5de2:	bd10      	pop	{r4, pc}
    5de4:	0000aeac 	.word	0x0000aeac
    5de8:	200016c8 	.word	0x200016c8
    5dec:	00009653 	.word	0x00009653
    5df0:	00005591 	.word	0x00005591
    5df4:	20000664 	.word	0x20000664
    5df8:	000055c1 	.word	0x000055c1
    5dfc:	200000ac 	.word	0x200000ac
    5e00:	00005749 	.word	0x00005749
    5e04:	0000ae84 	.word	0x0000ae84
    5e08:	00009665 	.word	0x00009665
    5e0c:	00005a0d 	.word	0x00005a0d
    5e10:	0000ae64 	.word	0x0000ae64

00005e14 <audio_record_close>:
{
    5e14:	b530      	push	{r4, r5, lr}
    5e16:	b083      	sub	sp, #12
	volatile bool retVal = true;
    5e18:	2201      	movs	r2, #1
    5e1a:	466b      	mov	r3, sp
    5e1c:	70da      	strb	r2, [r3, #3]
	((uint16_t *)&wave_header)[WAVE_FORMAT_NUM_CHANNEL_OFFSET/2] = AUDIO_NUM_CHANNELS;
    5e1e:	4c18      	ldr	r4, [pc, #96]	; (5e80 <audio_record_close+0x6c>)
    5e20:	2302      	movs	r3, #2
    5e22:	82e3      	strh	r3, [r4, #22]
	((uint16_t *)&wave_header)[WAVE_FORMAT_BITS_PER_SAMPLE_OFFSET/2] = AUDIO_BITS_PER_SAMPLE;
    5e24:	330e      	adds	r3, #14
    5e26:	8463      	strh	r3, [r4, #34]	; 0x22
	((uint16_t *)&wave_header)[WAVE_FORMAT_BLOCK_ALIGN_OFFSET/2] = AUDIO_BITS_PER_SAMPLE/8 * AUDIO_NUM_CHANNELS;
    5e28:	3b0c      	subs	r3, #12
    5e2a:	8423      	strh	r3, [r4, #32]
	((uint32_t *)&wave_header)[WAVE_FORMAT_SAMPLE_RATE_OFFSET/4] = AUDIO_SAMPLING_RATE;
    5e2c:	4b15      	ldr	r3, [pc, #84]	; (5e84 <audio_record_close+0x70>)
    5e2e:	61a3      	str	r3, [r4, #24]
	((uint32_t *)&wave_header)[WAVE_FORMAT_BYTE_RATE_OFFSET/4] = AUDIO_SAMPLING_RATE * AUDIO_NUM_CHANNELS * AUDIO_BITS_PER_SAMPLE/8;
    5e30:	4b15      	ldr	r3, [pc, #84]	; (5e88 <audio_record_close+0x74>)
    5e32:	61e3      	str	r3, [r4, #28]
	((uint32_t *)&wave_header)[WAVE_FORMAT_SUBCHUNK2_SIZE_OFFSET/4] = audio_total_samples * AUDIO_BITS_PER_SAMPLE/8;
    5e34:	4b15      	ldr	r3, [pc, #84]	; (5e8c <audio_record_close+0x78>)
    5e36:	681b      	ldr	r3, [r3, #0]
    5e38:	011b      	lsls	r3, r3, #4
    5e3a:	08db      	lsrs	r3, r3, #3
    5e3c:	62a3      	str	r3, [r4, #40]	; 0x28
	((uint32_t *)&wave_header)[WAVE_FORMAT_CHUNK_SIZE_OFFSET/4] = (audio_total_samples * AUDIO_BITS_PER_SAMPLE/8) + 36;
    5e3e:	3324      	adds	r3, #36	; 0x24
    5e40:	6063      	str	r3, [r4, #4]
	f_lseek(&file_object, 0);
    5e42:	4d13      	ldr	r5, [pc, #76]	; (5e90 <audio_record_close+0x7c>)
    5e44:	2100      	movs	r1, #0
    5e46:	0028      	movs	r0, r5
    5e48:	4b12      	ldr	r3, [pc, #72]	; (5e94 <audio_record_close+0x80>)
    5e4a:	4798      	blx	r3
	res = f_write(&file_object, wave_header, 44, &bytes);
    5e4c:	ab01      	add	r3, sp, #4
    5e4e:	222c      	movs	r2, #44	; 0x2c
    5e50:	0021      	movs	r1, r4
    5e52:	0028      	movs	r0, r5
    5e54:	4c10      	ldr	r4, [pc, #64]	; (5e98 <audio_record_close+0x84>)
    5e56:	47a0      	blx	r4
	if(res != FR_OK) {
    5e58:	2800      	cmp	r0, #0
    5e5a:	d002      	beq.n	5e62 <audio_record_close+0x4e>
		retVal = false;
    5e5c:	2200      	movs	r2, #0
    5e5e:	466b      	mov	r3, sp
    5e60:	70da      	strb	r2, [r3, #3]
	f_close(&file_object);
    5e62:	480b      	ldr	r0, [pc, #44]	; (5e90 <audio_record_close+0x7c>)
    5e64:	4b0d      	ldr	r3, [pc, #52]	; (5e9c <audio_record_close+0x88>)
    5e66:	4798      	blx	r3
	audio_total_samples = 0;
    5e68:	2200      	movs	r2, #0
    5e6a:	4b08      	ldr	r3, [pc, #32]	; (5e8c <audio_record_close+0x78>)
    5e6c:	601a      	str	r2, [r3, #0]
    5e6e:	2280      	movs	r2, #128	; 0x80
    5e70:	0152      	lsls	r2, r2, #5
    5e72:	4b0b      	ldr	r3, [pc, #44]	; (5ea0 <audio_record_close+0x8c>)
    5e74:	619a      	str	r2, [r3, #24]
	return retVal;
    5e76:	466b      	mov	r3, sp
    5e78:	78d8      	ldrb	r0, [r3, #3]
    5e7a:	b2c0      	uxtb	r0, r0
}
    5e7c:	b003      	add	sp, #12
    5e7e:	bd30      	pop	{r4, r5, pc}
    5e80:	200000ac 	.word	0x200000ac
    5e84:	0000ac44 	.word	0x0000ac44
    5e88:	0002b110 	.word	0x0002b110
    5e8c:	200002d0 	.word	0x200002d0
    5e90:	20000664 	.word	0x20000664
    5e94:	00005a25 	.word	0x00005a25
    5e98:	00005749 	.word	0x00005749
    5e9c:	00005a0d 	.word	0x00005a0d
    5ea0:	41004400 	.word	0x41004400

00005ea4 <audio_record_1samp_start>:
void audio_record_1samp_start(uint8_t buf) {
    5ea4:	b510      	push	{r4, lr}
	} else {
		port_base->OUTCLR.reg = pin_mask;
    5ea6:	2280      	movs	r2, #128	; 0x80
    5ea8:	0352      	lsls	r2, r2, #13
    5eaa:	4b07      	ldr	r3, [pc, #28]	; (5ec8 <audio_record_1samp_start+0x24>)
    5eac:	615a      	str	r2, [r3, #20]
	adc_recorder.rec_ready = false;
    5eae:	4b07      	ldr	r3, [pc, #28]	; (5ecc <audio_record_1samp_start+0x28>)
    5eb0:	2200      	movs	r2, #0
    5eb2:	705a      	strb	r2, [r3, #1]
	adc_recorder.rec_started = true;
    5eb4:	3201      	adds	r2, #1
    5eb6:	709a      	strb	r2, [r3, #2]
	spi_read_buffer_job(&adc_spi_module, adc_vals, 2, 0xFFFF);
    5eb8:	4b05      	ldr	r3, [pc, #20]	; (5ed0 <audio_record_1samp_start+0x2c>)
    5eba:	3201      	adds	r2, #1
    5ebc:	4905      	ldr	r1, [pc, #20]	; (5ed4 <audio_record_1samp_start+0x30>)
    5ebe:	4806      	ldr	r0, [pc, #24]	; (5ed8 <audio_record_1samp_start+0x34>)
    5ec0:	4c06      	ldr	r4, [pc, #24]	; (5edc <audio_record_1samp_start+0x38>)
    5ec2:	47a0      	blx	r4
}
    5ec4:	bd10      	pop	{r4, pc}
    5ec6:	46c0      	nop			; (mov r8, r8)
    5ec8:	41004400 	.word	0x41004400
    5ecc:	200006c4 	.word	0x200006c4
    5ed0:	0000ffff 	.word	0x0000ffff
    5ed4:	200006bc 	.word	0x200006bc
    5ed8:	20000628 	.word	0x20000628
    5edc:	0000012d 	.word	0x0000012d

00005ee0 <audio_record_1samp_finish>:
void audio_record_1samp_finish(uint8_t buf) {
    5ee0:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    5ee2:	2280      	movs	r2, #128	; 0x80
    5ee4:	0352      	lsls	r2, r2, #13
    5ee6:	4b08      	ldr	r3, [pc, #32]	; (5f08 <audio_record_1samp_finish+0x28>)
    5ee8:	619a      	str	r2, [r3, #24]
	if(buf < AUDIO_BUFFER_NUMBER) {
    5eea:	2803      	cmp	r0, #3
    5eec:	d80b      	bhi.n	5f06 <audio_record_1samp_finish+0x26>
		audio_buffer[buf][audio_frame_cnt] = adc_vals[0];
    5eee:	4a07      	ldr	r2, [pc, #28]	; (5f0c <audio_record_1samp_finish+0x2c>)
    5ef0:	6811      	ldr	r1, [r2, #0]
    5ef2:	0283      	lsls	r3, r0, #10
    5ef4:	4806      	ldr	r0, [pc, #24]	; (5f10 <audio_record_1samp_finish+0x30>)
    5ef6:	18c0      	adds	r0, r0, r3
    5ef8:	4b06      	ldr	r3, [pc, #24]	; (5f14 <audio_record_1samp_finish+0x34>)
    5efa:	781c      	ldrb	r4, [r3, #0]
    5efc:	5444      	strb	r4, [r0, r1]
		audio_buffer[buf][audio_frame_cnt+1] = adc_vals[1];
    5efe:	6812      	ldr	r2, [r2, #0]
    5f00:	1880      	adds	r0, r0, r2
    5f02:	785b      	ldrb	r3, [r3, #1]
    5f04:	7043      	strb	r3, [r0, #1]
}
    5f06:	bd10      	pop	{r4, pc}
    5f08:	41004400 	.word	0x41004400
    5f0c:	200002cc 	.word	0x200002cc
    5f10:	200006c8 	.word	0x200006c8
    5f14:	200006bc 	.word	0x200006bc

00005f18 <audio_write_chunk>:
{
    5f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f1a:	46de      	mov	lr, fp
    5f1c:	4657      	mov	r7, sl
    5f1e:	464e      	mov	r6, r9
    5f20:	4645      	mov	r5, r8
    5f22:	b5e0      	push	{r5, r6, r7, lr}
    5f24:	b083      	sub	sp, #12
    5f26:	0005      	movs	r5, r0
	printf("Writing chunk... buffer: %d, data:\n\r", buf);
    5f28:	0001      	movs	r1, r0
    5f2a:	4823      	ldr	r0, [pc, #140]	; (5fb8 <audio_write_chunk+0xa0>)
    5f2c:	4b23      	ldr	r3, [pc, #140]	; (5fbc <audio_write_chunk+0xa4>)
    5f2e:	4798      	blx	r3
    5f30:	02ab      	lsls	r3, r5, #10
    5f32:	001a      	movs	r2, r3
    5f34:	469b      	mov	fp, r3
    5f36:	4b22      	ldr	r3, [pc, #136]	; (5fc0 <audio_write_chunk+0xa8>)
    5f38:	18d4      	adds	r4, r2, r3
    5f3a:	3501      	adds	r5, #1
    5f3c:	02ad      	lsls	r5, r5, #10
    5f3e:	46a9      	mov	r9, r5
    5f40:	4499      	add	r9, r3
		printf("[%d]0x", i);
    5f42:	46a2      	mov	sl, r4
    5f44:	4b1d      	ldr	r3, [pc, #116]	; (5fbc <audio_write_chunk+0xa4>)
    5f46:	4698      	mov	r8, r3
    5f48:	e005      	b.n	5f56 <audio_write_chunk+0x3e>
		printf("\n\r");
    5f4a:	481e      	ldr	r0, [pc, #120]	; (5fc4 <audio_write_chunk+0xac>)
    5f4c:	4b1b      	ldr	r3, [pc, #108]	; (5fbc <audio_write_chunk+0xa4>)
    5f4e:	4798      	blx	r3
    5f50:	002c      	movs	r4, r5
	for(uint16_t i = 0; i < AUDIO_CHUNK_SIZE; i += 16) {
    5f52:	45a9      	cmp	r9, r5
    5f54:	d00e      	beq.n	5f74 <audio_write_chunk+0x5c>
		printf("[%d]0x", i);
    5f56:	4653      	mov	r3, sl
    5f58:	1ae1      	subs	r1, r4, r3
    5f5a:	481b      	ldr	r0, [pc, #108]	; (5fc8 <audio_write_chunk+0xb0>)
    5f5c:	47c0      	blx	r8
    5f5e:	0025      	movs	r5, r4
    5f60:	3510      	adds	r5, #16
			printf("%02x ", audio_buffer[buf][i+j]);
    5f62:	4e1a      	ldr	r6, [pc, #104]	; (5fcc <audio_write_chunk+0xb4>)
    5f64:	4f15      	ldr	r7, [pc, #84]	; (5fbc <audio_write_chunk+0xa4>)
    5f66:	7821      	ldrb	r1, [r4, #0]
    5f68:	0030      	movs	r0, r6
    5f6a:	47b8      	blx	r7
    5f6c:	3401      	adds	r4, #1
		for(uint8_t j = 0; j < 16; j++) {
    5f6e:	42ac      	cmp	r4, r5
    5f70:	d1f9      	bne.n	5f66 <audio_write_chunk+0x4e>
    5f72:	e7ea      	b.n	5f4a <audio_write_chunk+0x32>
	res = f_write(&file_object, (char *)audio_buffer[buf], AUDIO_CHUNK_SIZE, &bytes);
    5f74:	4912      	ldr	r1, [pc, #72]	; (5fc0 <audio_write_chunk+0xa8>)
    5f76:	4459      	add	r1, fp
    5f78:	ab01      	add	r3, sp, #4
    5f7a:	2280      	movs	r2, #128	; 0x80
    5f7c:	00d2      	lsls	r2, r2, #3
    5f7e:	4814      	ldr	r0, [pc, #80]	; (5fd0 <audio_write_chunk+0xb8>)
    5f80:	4c14      	ldr	r4, [pc, #80]	; (5fd4 <audio_write_chunk+0xbc>)
    5f82:	47a0      	blx	r4
	if(res != FR_OK) {
    5f84:	2800      	cmp	r0, #0
    5f86:	d10a      	bne.n	5f9e <audio_write_chunk+0x86>
		res = f_sync(&file_object);
    5f88:	4811      	ldr	r0, [pc, #68]	; (5fd0 <audio_write_chunk+0xb8>)
    5f8a:	4b13      	ldr	r3, [pc, #76]	; (5fd8 <audio_write_chunk+0xc0>)
    5f8c:	4798      	blx	r3
	return true;
    5f8e:	2301      	movs	r3, #1
		if(res != FR_OK) {
    5f90:	2800      	cmp	r0, #0
    5f92:	d008      	beq.n	5fa6 <audio_write_chunk+0x8e>
			f_close(&file_object);
    5f94:	480e      	ldr	r0, [pc, #56]	; (5fd0 <audio_write_chunk+0xb8>)
    5f96:	4b11      	ldr	r3, [pc, #68]	; (5fdc <audio_write_chunk+0xc4>)
    5f98:	4798      	blx	r3
			return false;
    5f9a:	2300      	movs	r3, #0
    5f9c:	e003      	b.n	5fa6 <audio_write_chunk+0x8e>
		f_close(&file_object);
    5f9e:	480c      	ldr	r0, [pc, #48]	; (5fd0 <audio_write_chunk+0xb8>)
    5fa0:	4b0e      	ldr	r3, [pc, #56]	; (5fdc <audio_write_chunk+0xc4>)
    5fa2:	4798      	blx	r3
		return false;
    5fa4:	2300      	movs	r3, #0
}
    5fa6:	0018      	movs	r0, r3
    5fa8:	b003      	add	sp, #12
    5faa:	bc3c      	pop	{r2, r3, r4, r5}
    5fac:	4690      	mov	r8, r2
    5fae:	4699      	mov	r9, r3
    5fb0:	46a2      	mov	sl, r4
    5fb2:	46ab      	mov	fp, r5
    5fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fb6:	46c0      	nop			; (mov r8, r8)
    5fb8:	0000aec0 	.word	0x0000aec0
    5fbc:	00009665 	.word	0x00009665
    5fc0:	200006c8 	.word	0x200006c8
    5fc4:	0000aef8 	.word	0x0000aef8
    5fc8:	0000aee8 	.word	0x0000aee8
    5fcc:	0000aef0 	.word	0x0000aef0
    5fd0:	20000664 	.word	0x20000664
    5fd4:	00005749 	.word	0x00005749
    5fd8:	00005981 	.word	0x00005981
    5fdc:	00005a0d 	.word	0x00005a0d

00005fe0 <audio_sync_init>:

void audio_sync_init(void)
{
    5fe0:	b570      	push	{r4, r5, r6, lr}
    5fe2:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    5fe4:	4e1a      	ldr	r6, [pc, #104]	; (6050 <audio_sync_init+0x70>)
    5fe6:	ac01      	add	r4, sp, #4
    5fe8:	0031      	movs	r1, r6
    5fea:	0020      	movs	r0, r4
    5fec:	4b19      	ldr	r3, [pc, #100]	; (6054 <audio_sync_init+0x74>)
    5fee:	4798      	blx	r3
	config_tcc.counter.clock_source = GCLK_GENERATOR_0;
    5ff0:	2300      	movs	r3, #0
    5ff2:	72a3      	strb	r3, [r4, #10]
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV16;
    5ff4:	3304      	adds	r3, #4
    5ff6:	72e3      	strb	r3, [r4, #11]
	config_tcc.counter.period = AUDIO_SYNC_44_1KHZ_CNT;
    5ff8:	4b17      	ldr	r3, [pc, #92]	; (6058 <audio_sync_init+0x78>)
    5ffa:	6063      	str	r3, [r4, #4]
	tcc_init(&audio_syncer_module, TCC0, &config_tcc);
    5ffc:	4d17      	ldr	r5, [pc, #92]	; (605c <audio_sync_init+0x7c>)
    5ffe:	0022      	movs	r2, r4
    6000:	0031      	movs	r1, r6
    6002:	0028      	movs	r0, r5
    6004:	4b16      	ldr	r3, [pc, #88]	; (6060 <audio_sync_init+0x80>)
    6006:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    6008:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    600a:	2102      	movs	r1, #2
    600c:	6893      	ldr	r3, [r2, #8]
    600e:	4219      	tst	r1, r3
    6010:	d1fc      	bne.n	600c <audio_sync_init+0x2c>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    6012:	6813      	ldr	r3, [r2, #0]
    6014:	2102      	movs	r1, #2
    6016:	430b      	orrs	r3, r1
    6018:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    601a:	4b10      	ldr	r3, [pc, #64]	; (605c <audio_sync_init+0x7c>)
    601c:	681a      	ldr	r2, [r3, #0]
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    601e:	3102      	adds	r1, #2
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    6020:	201f      	movs	r0, #31
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
			/* Command have been issued */
			return;
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
			/* Cancel RETRIGGER command and issue STOP */
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    6022:	24e0      	movs	r4, #224	; 0xe0
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6024:	6893      	ldr	r3, [r2, #8]
    6026:	4219      	tst	r1, r3
    6028:	d1fc      	bne.n	6024 <audio_sync_init+0x44>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    602a:	7953      	ldrb	r3, [r2, #5]
    602c:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
    602e:	d005      	beq.n	603c <audio_sync_init+0x5c>
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
    6030:	2b40      	cmp	r3, #64	; 0x40
    6032:	d005      	beq.n	6040 <audio_sync_init+0x60>
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
    6034:	2b20      	cmp	r3, #32
    6036:	d1f5      	bne.n	6024 <audio_sync_init+0x44>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    6038:	7114      	strb	r4, [r2, #4]
    603a:	e7f3      	b.n	6024 <audio_sync_init+0x44>
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_STOP;
    603c:	2340      	movs	r3, #64	; 0x40
    603e:	7153      	strb	r3, [r2, #5]
	tcc_enable(&audio_syncer_module);
	tcc_stop_counter(&audio_syncer_module);
	
	tcc_register_callback(&audio_syncer_module, (tcc_callback_t)audio_sync_reached_callback, TCC_CALLBACK_OVERFLOW);
    6040:	2200      	movs	r2, #0
    6042:	4908      	ldr	r1, [pc, #32]	; (6064 <audio_sync_init+0x84>)
    6044:	4805      	ldr	r0, [pc, #20]	; (605c <audio_sync_init+0x7c>)
    6046:	4b08      	ldr	r3, [pc, #32]	; (6068 <audio_sync_init+0x88>)
    6048:	4798      	blx	r3
	//tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_OVERFLOW);
}
    604a:	b02a      	add	sp, #168	; 0xa8
    604c:	bd70      	pop	{r4, r5, r6, pc}
    604e:	46c0      	nop			; (mov r8, r8)
    6050:	42002000 	.word	0x42002000
    6054:	000003e5 	.word	0x000003e5
    6058:	00000412 	.word	0x00000412
    605c:	200018f8 	.word	0x200018f8
    6060:	00000531 	.word	0x00000531
    6064:	00005c3d 	.word	0x00005c3d
    6068:	0000093d 	.word	0x0000093d

0000606c <main>:
/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    606c:	b530      	push	{r4, r5, lr}
    606e:	b089      	sub	sp, #36	; 0x24
		sleepmgr_locks[i] = 0;
    6070:	4b7d      	ldr	r3, [pc, #500]	; (6268 <main+0x1fc>)
    6072:	2400      	movs	r4, #0
    6074:	701c      	strb	r4, [r3, #0]
    6076:	705c      	strb	r4, [r3, #1]
    6078:	709c      	strb	r4, [r3, #2]
    607a:	70dc      	strb	r4, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    607c:	2501      	movs	r5, #1
    607e:	711d      	strb	r5, [r3, #4]
	irq_initialize_vectors();

	// Initialize the sleep manager
	sleepmgr_init();

	system_init();
    6080:	4b7a      	ldr	r3, [pc, #488]	; (626c <main+0x200>)
    6082:	4798      	blx	r3
	
	delay_init();
    6084:	4b7a      	ldr	r3, [pc, #488]	; (6270 <main+0x204>)
    6086:	4798      	blx	r3
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    6088:	aa03      	add	r2, sp, #12
    608a:	23a0      	movs	r3, #160	; 0xa0
    608c:	011b      	lsls	r3, r3, #4
    608e:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    6090:	7094      	strb	r4, [r2, #2]
	config->continuously_update = false;
    6092:	70d4      	strb	r4, [r2, #3]
	config->year_init_value     = 2000;
    6094:	23fa      	movs	r3, #250	; 0xfa
    6096:	00db      	lsls	r3, r3, #3
    6098:	80d3      	strh	r3, [r2, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    609a:	7214      	strb	r4, [r2, #8]
    609c:	7254      	strb	r4, [r2, #9]
    609e:	7294      	strb	r4, [r2, #10]
    60a0:	72d4      	strb	r4, [r2, #11]
    60a2:	7315      	strb	r5, [r2, #12]
    60a4:	7355      	strb	r5, [r2, #13]
    60a6:	81d3      	strh	r3, [r2, #14]
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    60a8:	2306      	movs	r3, #6
    60aa:	7413      	strb	r3, [r2, #16]
	config_rtc_calendar.clock_24h = true;
    60ac:	7115      	strb	r5, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    60ae:	4c71      	ldr	r4, [pc, #452]	; (6274 <main+0x208>)
    60b0:	4971      	ldr	r1, [pc, #452]	; (6278 <main+0x20c>)
    60b2:	0020      	movs	r0, r4
    60b4:	4b71      	ldr	r3, [pc, #452]	; (627c <main+0x210>)
    60b6:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    60b8:	0020      	movs	r0, r4
    60ba:	4b71      	ldr	r3, [pc, #452]	; (6280 <main+0x214>)
    60bc:	4798      	blx	r3
	current_time.year = 2018;
    60be:	a901      	add	r1, sp, #4
    60c0:	4b70      	ldr	r3, [pc, #448]	; (6284 <main+0x218>)
    60c2:	80cb      	strh	r3, [r1, #6]
	current_time.month = 02;
    60c4:	2302      	movs	r3, #2
    60c6:	714b      	strb	r3, [r1, #5]
	current_time.day = 02;
    60c8:	710b      	strb	r3, [r1, #4]
	current_time.hour = 11;
    60ca:	3309      	adds	r3, #9
    60cc:	708b      	strb	r3, [r1, #2]
	current_time.minute = 39;
    60ce:	331c      	adds	r3, #28
    60d0:	704b      	strb	r3, [r1, #1]
	current_time.second = 42;
    60d2:	3303      	adds	r3, #3
    60d4:	700b      	strb	r3, [r1, #0]
	rtc_calendar_set_time(&rtc_instance, &current_time);
    60d6:	0020      	movs	r0, r4
    60d8:	4b6b      	ldr	r3, [pc, #428]	; (6288 <main+0x21c>)
    60da:	4798      	blx	r3
	rtc_calendar_swap_time_mode(&rtc_instance);
    60dc:	0020      	movs	r0, r4
    60de:	4b6b      	ldr	r3, [pc, #428]	; (628c <main+0x220>)
    60e0:	4798      	blx	r3
	
	calendar_init();
	
	ui_lb_init();
    60e2:	4b6b      	ldr	r3, [pc, #428]	; (6290 <main+0x224>)
    60e4:	4798      	blx	r3
	ui_powerdown();
    60e6:	4b6b      	ldr	r3, [pc, #428]	; (6294 <main+0x228>)
    60e8:	4798      	blx	r3
	ui_cdc_init();
    60ea:	4b6b      	ldr	r3, [pc, #428]	; (6298 <main+0x22c>)
    60ec:	4798      	blx	r3
	ui_configure_callback();
    60ee:	4b6b      	ldr	r3, [pc, #428]	; (629c <main+0x230>)
    60f0:	4798      	blx	r3

	sd_mmc_init();
    60f2:	4b6b      	ldr	r3, [pc, #428]	; (62a0 <main+0x234>)
    60f4:	4798      	blx	r3
	memories_initialization();
    60f6:	4b6b      	ldr	r3, [pc, #428]	; (62a4 <main+0x238>)
    60f8:	4798      	blx	r3
	
	audio_in_init();
    60fa:	4b6b      	ldr	r3, [pc, #428]	; (62a8 <main+0x23c>)
    60fc:	4798      	blx	r3
	audio_sync_init();
    60fe:	4b6b      	ldr	r3, [pc, #428]	; (62ac <main+0x240>)
    6100:	4798      	blx	r3
	cpu_irq_enable();
    6102:	4b6b      	ldr	r3, [pc, #428]	; (62b0 <main+0x244>)
    6104:	701d      	strb	r5, [r3, #0]
    6106:	f3bf 8f5f 	dmb	sy
    610a:	b662      	cpsie	i
	
	system_interrupt_enable_global();
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    610c:	4b69      	ldr	r3, [pc, #420]	; (62b4 <main+0x248>)
    610e:	4798      	blx	r3
	
	/* The main loop manages only the power mode
	 * because the USB management & button detection
	 * are done by interrupt */
	for(;;) {
		if(rec_start_request) {
    6110:	4c69      	ldr	r4, [pc, #420]	; (62b8 <main+0x24c>)
    6112:	e021      	b.n	6158 <main+0xec>
			/* Testing if SD card is present */
			if(sd_test_availability()) {
    6114:	4b69      	ldr	r3, [pc, #420]	; (62bc <main+0x250>)
    6116:	4798      	blx	r3
    6118:	2800      	cmp	r0, #0
    611a:	d020      	beq.n	615e <main+0xf2>
				if(audio_record_init()) {
    611c:	4b68      	ldr	r3, [pc, #416]	; (62c0 <main+0x254>)
    611e:	4798      	blx	r3
    6120:	2800      	cmp	r0, #0
    6122:	d004      	beq.n	612e <main+0xc2>
					adc_recorder.rec_ready = true;
    6124:	2301      	movs	r3, #1
    6126:	4a67      	ldr	r2, [pc, #412]	; (62c4 <main+0x258>)
    6128:	7053      	strb	r3, [r2, #1]
					rec_init_done = true;
    612a:	4a67      	ldr	r2, [pc, #412]	; (62c8 <main+0x25c>)
    612c:	7013      	strb	r3, [r2, #0]
				}
				rec_start_request = false;
    612e:	2300      	movs	r3, #0
    6130:	4a61      	ldr	r2, [pc, #388]	; (62b8 <main+0x24c>)
    6132:	7013      	strb	r3, [r2, #0]
    6134:	e013      	b.n	615e <main+0xf2>
			}
		}
		
		if(rec_stop_request) {
			rec_stop_request = false;
    6136:	2200      	movs	r2, #0
    6138:	4b64      	ldr	r3, [pc, #400]	; (62cc <main+0x260>)
    613a:	701a      	strb	r2, [r3, #0]
			if(!audio_record_close()) {
    613c:	4b64      	ldr	r3, [pc, #400]	; (62d0 <main+0x264>)
    613e:	4798      	blx	r3
    6140:	2800      	cmp	r0, #0
    6142:	d110      	bne.n	6166 <main+0xfa>
				printf("ERROR closing recorded file\n\r");
    6144:	4863      	ldr	r0, [pc, #396]	; (62d4 <main+0x268>)
    6146:	4b64      	ldr	r3, [pc, #400]	; (62d8 <main+0x26c>)
    6148:	4798      	blx	r3
    614a:	e00c      	b.n	6166 <main+0xfa>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_RETRIGGER;
    614c:	2320      	movs	r3, #32
    614e:	7153      	strb	r3, [r2, #5]
			rec_running = true;
			tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_OVERFLOW);
			tcc_restart_counter(&audio_syncer_module);
		}
		
		if(sync_reached) {
    6150:	4b62      	ldr	r3, [pc, #392]	; (62dc <main+0x270>)
    6152:	781b      	ldrb	r3, [r3, #0]
    6154:	2b00      	cmp	r3, #0
    6156:	d135      	bne.n	61c4 <main+0x158>
		if(rec_start_request) {
    6158:	7823      	ldrb	r3, [r4, #0]
    615a:	2b00      	cmp	r3, #0
    615c:	d1da      	bne.n	6114 <main+0xa8>
		if(rec_stop_request) {
    615e:	4b5b      	ldr	r3, [pc, #364]	; (62cc <main+0x260>)
    6160:	781b      	ldrb	r3, [r3, #0]
    6162:	2b00      	cmp	r3, #0
    6164:	d1e7      	bne.n	6136 <main+0xca>
		if(rec_init_done) {
    6166:	4b58      	ldr	r3, [pc, #352]	; (62c8 <main+0x25c>)
    6168:	781b      	ldrb	r3, [r3, #0]
    616a:	2b00      	cmp	r3, #0
    616c:	d0f0      	beq.n	6150 <main+0xe4>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    616e:	4b5c      	ldr	r3, [pc, #368]	; (62e0 <main+0x274>)
    6170:	2280      	movs	r2, #128	; 0x80
    6172:	00d2      	lsls	r2, r2, #3
    6174:	61da      	str	r2, [r3, #28]
		port_base->OUTCLR.reg = pin_mask;
    6176:	2280      	movs	r2, #128	; 0x80
    6178:	0152      	lsls	r2, r2, #5
    617a:	615a      	str	r2, [r3, #20]
			audio_frame_cnt = 0;
    617c:	4a59      	ldr	r2, [pc, #356]	; (62e4 <main+0x278>)
    617e:	2300      	movs	r3, #0
    6180:	6013      	str	r3, [r2, #0]
			rec_init_done = false;
    6182:	4951      	ldr	r1, [pc, #324]	; (62c8 <main+0x25c>)
    6184:	700b      	strb	r3, [r1, #0]
			sync_reached = false;
    6186:	4955      	ldr	r1, [pc, #340]	; (62dc <main+0x270>)
    6188:	700b      	strb	r3, [r1, #0]
			audio_frame_cnt = 0;
    618a:	6013      	str	r3, [r2, #0]
			audio_total_samples = 0;
    618c:	4a56      	ldr	r2, [pc, #344]	; (62e8 <main+0x27c>)
    618e:	6013      	str	r3, [r2, #0]
			audio_buffer_counter = 0;
    6190:	4a56      	ldr	r2, [pc, #344]	; (62ec <main+0x280>)
    6192:	7013      	strb	r3, [r2, #0]
			rec_running = true;
    6194:	2201      	movs	r2, #1
    6196:	4b56      	ldr	r3, [pc, #344]	; (62f0 <main+0x284>)
    6198:	701a      	strb	r2, [r3, #0]
			tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_OVERFLOW);
    619a:	4d56      	ldr	r5, [pc, #344]	; (62f4 <main+0x288>)
    619c:	2100      	movs	r1, #0
    619e:	0028      	movs	r0, r5
    61a0:	4b55      	ldr	r3, [pc, #340]	; (62f8 <main+0x28c>)
    61a2:	4798      	blx	r3
	Tcc *const tcc_module = module_inst->hw;
    61a4:	682a      	ldr	r2, [r5, #0]
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    61a6:	2104      	movs	r1, #4
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    61a8:	201f      	movs	r0, #31
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    61aa:	25e0      	movs	r5, #224	; 0xe0
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    61ac:	6893      	ldr	r3, [r2, #8]
    61ae:	4219      	tst	r1, r3
    61b0:	d1fc      	bne.n	61ac <main+0x140>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    61b2:	7953      	ldrb	r3, [r2, #5]
    61b4:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
    61b6:	d0c9      	beq.n	614c <main+0xe0>
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
    61b8:	2b20      	cmp	r3, #32
    61ba:	d0c9      	beq.n	6150 <main+0xe4>
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
    61bc:	2b40      	cmp	r3, #64	; 0x40
    61be:	d1f5      	bne.n	61ac <main+0x140>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    61c0:	7115      	strb	r5, [r2, #4]
    61c2:	e7f3      	b.n	61ac <main+0x140>
			sync_reached = false;
    61c4:	2200      	movs	r2, #0
    61c6:	4b45      	ldr	r3, [pc, #276]	; (62dc <main+0x270>)
    61c8:	701a      	strb	r2, [r3, #0]
			if(rec_running && adc_recorder.rec_ready) {
    61ca:	4b49      	ldr	r3, [pc, #292]	; (62f0 <main+0x284>)
    61cc:	781b      	ldrb	r3, [r3, #0]
    61ce:	2b00      	cmp	r3, #0
    61d0:	d003      	beq.n	61da <main+0x16e>
    61d2:	4b3c      	ldr	r3, [pc, #240]	; (62c4 <main+0x258>)
    61d4:	785b      	ldrb	r3, [r3, #1]
    61d6:	2b00      	cmp	r3, #0
    61d8:	d138      	bne.n	624c <main+0x1e0>
				port_pin_toggle_output_level(UI_DBG_PIN);
				audio_record_1samp_start(audio_buffer_counter);
				adc_recorder.rec_started = false;
			}
			if(rec_running && adc_recorder.rec_done) {
    61da:	4b45      	ldr	r3, [pc, #276]	; (62f0 <main+0x284>)
    61dc:	781b      	ldrb	r3, [r3, #0]
    61de:	2b00      	cmp	r3, #0
    61e0:	d0ba      	beq.n	6158 <main+0xec>
    61e2:	4b38      	ldr	r3, [pc, #224]	; (62c4 <main+0x258>)
    61e4:	78db      	ldrb	r3, [r3, #3]
    61e6:	2b00      	cmp	r3, #0
    61e8:	d0b6      	beq.n	6158 <main+0xec>
				adc_recorder.rec_done = false;
    61ea:	4b36      	ldr	r3, [pc, #216]	; (62c4 <main+0x258>)
    61ec:	2200      	movs	r2, #0
    61ee:	70da      	strb	r2, [r3, #3]
				adc_recorder.rec_ready = true;
    61f0:	3201      	adds	r2, #1
    61f2:	705a      	strb	r2, [r3, #1]
				audio_record_1samp_finish(audio_buffer_counter);
    61f4:	4b3d      	ldr	r3, [pc, #244]	; (62ec <main+0x280>)
    61f6:	7818      	ldrb	r0, [r3, #0]
    61f8:	b2c0      	uxtb	r0, r0
    61fa:	4b40      	ldr	r3, [pc, #256]	; (62fc <main+0x290>)
    61fc:	4798      	blx	r3
				audio_frame_cnt += 2;
    61fe:	4b39      	ldr	r3, [pc, #228]	; (62e4 <main+0x278>)
    6200:	681a      	ldr	r2, [r3, #0]
    6202:	3202      	adds	r2, #2
    6204:	601a      	str	r2, [r3, #0]
				if(audio_frame_cnt >= AUDIO_CHUNK_SIZE) {
    6206:	681a      	ldr	r2, [r3, #0]
    6208:	4b3d      	ldr	r3, [pc, #244]	; (6300 <main+0x294>)
    620a:	429a      	cmp	r2, r3
    620c:	d9a4      	bls.n	6158 <main+0xec>
					audio_total_samples += audio_frame_cnt;
    620e:	4a35      	ldr	r2, [pc, #212]	; (62e4 <main+0x278>)
    6210:	6813      	ldr	r3, [r2, #0]
    6212:	4935      	ldr	r1, [pc, #212]	; (62e8 <main+0x27c>)
    6214:	6808      	ldr	r0, [r1, #0]
    6216:	4684      	mov	ip, r0
    6218:	4463      	add	r3, ip
    621a:	600b      	str	r3, [r1, #0]
					audio_frame_cnt = 0;
    621c:	2300      	movs	r3, #0
    621e:	6013      	str	r3, [r2, #0]
					printf("Writing to buffer# %d\n\r", audio_buffer_counter);
    6220:	4d32      	ldr	r5, [pc, #200]	; (62ec <main+0x280>)
    6222:	7829      	ldrb	r1, [r5, #0]
    6224:	b2c9      	uxtb	r1, r1
    6226:	4837      	ldr	r0, [pc, #220]	; (6304 <main+0x298>)
    6228:	4b2b      	ldr	r3, [pc, #172]	; (62d8 <main+0x26c>)
    622a:	4798      	blx	r3
					audio_write_chunk(audio_buffer_counter);
    622c:	7828      	ldrb	r0, [r5, #0]
    622e:	b2c0      	uxtb	r0, r0
    6230:	4b35      	ldr	r3, [pc, #212]	; (6308 <main+0x29c>)
    6232:	4798      	blx	r3
					audio_buffer_counter = (audio_buffer_counter >= (AUDIO_BUFFER_NUMBER-1)) ? 0 : (audio_buffer_counter + 1);
    6234:	782a      	ldrb	r2, [r5, #0]
    6236:	b2d2      	uxtb	r2, r2
    6238:	2300      	movs	r3, #0
    623a:	2a02      	cmp	r2, #2
    623c:	d803      	bhi.n	6246 <main+0x1da>
    623e:	4b2b      	ldr	r3, [pc, #172]	; (62ec <main+0x280>)
    6240:	781b      	ldrb	r3, [r3, #0]
    6242:	3301      	adds	r3, #1
    6244:	b2db      	uxtb	r3, r3
    6246:	4a29      	ldr	r2, [pc, #164]	; (62ec <main+0x280>)
    6248:	7013      	strb	r3, [r2, #0]
    624a:	e785      	b.n	6158 <main+0xec>
	port_base->OUTTGL.reg = pin_mask;
    624c:	2280      	movs	r2, #128	; 0x80
    624e:	00d2      	lsls	r2, r2, #3
    6250:	4b23      	ldr	r3, [pc, #140]	; (62e0 <main+0x274>)
    6252:	61da      	str	r2, [r3, #28]
				audio_record_1samp_start(audio_buffer_counter);
    6254:	4b25      	ldr	r3, [pc, #148]	; (62ec <main+0x280>)
    6256:	7818      	ldrb	r0, [r3, #0]
    6258:	b2c0      	uxtb	r0, r0
    625a:	4b2c      	ldr	r3, [pc, #176]	; (630c <main+0x2a0>)
    625c:	4798      	blx	r3
				adc_recorder.rec_started = false;
    625e:	2200      	movs	r2, #0
    6260:	4b18      	ldr	r3, [pc, #96]	; (62c4 <main+0x258>)
    6262:	709a      	strb	r2, [r3, #2]
    6264:	e7b9      	b.n	61da <main+0x16e>
    6266:	46c0      	nop			; (mov r8, r8)
    6268:	20001a3c 	.word	0x20001a3c
    626c:	00008f15 	.word	0x00008f15
    6270:	00008175 	.word	0x00008175
    6274:	20000620 	.word	0x20000620
    6278:	40001400 	.word	0x40001400
    627c:	000023cd 	.word	0x000023cd
    6280:	00002271 	.word	0x00002271
    6284:	000007e2 	.word	0x000007e2
    6288:	0000233d 	.word	0x0000233d
    628c:	00002489 	.word	0x00002489
    6290:	00006699 	.word	0x00006699
    6294:	0000676d 	.word	0x0000676d
    6298:	000065a5 	.word	0x000065a5
    629c:	00006739 	.word	0x00006739
    62a0:	00000c29 	.word	0x00000c29
    62a4:	00006369 	.word	0x00006369
    62a8:	00005c49 	.word	0x00005c49
    62ac:	00005fe1 	.word	0x00005fe1
    62b0:	20000125 	.word	0x20000125
    62b4:	00001c71 	.word	0x00001c71
    62b8:	200002d8 	.word	0x200002d8
    62bc:	0000636d 	.word	0x0000636d
    62c0:	00005d71 	.word	0x00005d71
    62c4:	200006c4 	.word	0x200006c4
    62c8:	200002d6 	.word	0x200002d6
    62cc:	200002d9 	.word	0x200002d9
    62d0:	00005e15 	.word	0x00005e15
    62d4:	0000aefc 	.word	0x0000aefc
    62d8:	00009665 	.word	0x00009665
    62dc:	200002da 	.word	0x200002da
    62e0:	41004400 	.word	0x41004400
    62e4:	200002cc 	.word	0x200002cc
    62e8:	200002d0 	.word	0x200002d0
    62ec:	200002ca 	.word	0x200002ca
    62f0:	200002d7 	.word	0x200002d7
    62f4:	200018f8 	.word	0x200018f8
    62f8:	00000955 	.word	0x00000955
    62fc:	00005ee1 	.word	0x00005ee1
    6300:	000003ff 	.word	0x000003ff
    6304:	0000af1c 	.word	0x0000af1c
    6308:	00005f19 	.word	0x00005f19
    630c:	00005ea5 	.word	0x00005ea5

00006310 <main_suspend_action>:
		//}
	}
}

void main_suspend_action(void)
{
    6310:	b510      	push	{r4, lr}
	ui_powerdown();
    6312:	4b01      	ldr	r3, [pc, #4]	; (6318 <main_suspend_action+0x8>)
    6314:	4798      	blx	r3
}
    6316:	bd10      	pop	{r4, pc}
    6318:	0000676d 	.word	0x0000676d

0000631c <main_resume_action>:

void main_resume_action(void)
{
    631c:	b510      	push	{r4, lr}
	ui_wakeup();
    631e:	4b01      	ldr	r3, [pc, #4]	; (6324 <main_resume_action+0x8>)
    6320:	4798      	blx	r3
}
    6322:	bd10      	pop	{r4, pc}
    6324:	0000677d 	.word	0x0000677d

00006328 <main_sof_action>:

void main_sof_action(void)
{
    6328:	b510      	push	{r4, lr}
	if (!main_b_msc_enable)
    632a:	4b05      	ldr	r3, [pc, #20]	; (6340 <main_sof_action+0x18>)
    632c:	781b      	ldrb	r3, [r3, #0]
    632e:	2b00      	cmp	r3, #0
    6330:	d100      	bne.n	6334 <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    6332:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    6334:	4b03      	ldr	r3, [pc, #12]	; (6344 <main_sof_action+0x1c>)
    6336:	4798      	blx	r3
    6338:	4b03      	ldr	r3, [pc, #12]	; (6348 <main_sof_action+0x20>)
    633a:	4798      	blx	r3
    633c:	e7f9      	b.n	6332 <main_sof_action+0xa>
    633e:	46c0      	nop			; (mov r8, r8)
    6340:	200002d4 	.word	0x200002d4
    6344:	000037e5 	.word	0x000037e5
    6348:	00006795 	.word	0x00006795

0000634c <main_msc_enable>:

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
    634c:	2201      	movs	r2, #1
    634e:	4b02      	ldr	r3, [pc, #8]	; (6358 <main_msc_enable+0xc>)
    6350:	701a      	strb	r2, [r3, #0]
	return true;
}
    6352:	2001      	movs	r0, #1
    6354:	4770      	bx	lr
    6356:	46c0      	nop			; (mov r8, r8)
    6358:	200002d4 	.word	0x200002d4

0000635c <main_msc_disable>:

void main_msc_disable(void)
{
	main_b_msc_enable = false;
    635c:	2200      	movs	r2, #0
    635e:	4b01      	ldr	r3, [pc, #4]	; (6364 <main_msc_disable+0x8>)
    6360:	701a      	strb	r2, [r3, #0]
}
    6362:	4770      	bx	lr
    6364:	200002d4 	.word	0x200002d4

00006368 <memories_initialization>:
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    6368:	4770      	bx	lr
	...

0000636c <sd_test_availability>:
#include "sd_management.h"

extern volatile bool rec_start_request;

bool sd_test_availability(void)
{
    636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Ctrl_status status;
	bool retVal = true;
	do {
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    636e:	4c2c      	ldr	r4, [pc, #176]	; (6420 <sd_test_availability+0xb4>)
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
			}
		}
		LED_Toggle(UI_LED_REC);
		LED_Toggle(UI_LED_MON);
		delay_ms(300);
    6370:	4d2c      	ldr	r5, [pc, #176]	; (6424 <sd_test_availability+0xb8>)
    6372:	e028      	b.n	63c6 <sd_test_availability+0x5a>
			printf("Card install fail!\n\r");
    6374:	482c      	ldr	r0, [pc, #176]	; (6428 <sd_test_availability+0xbc>)
    6376:	4e2d      	ldr	r6, [pc, #180]	; (642c <sd_test_availability+0xc0>)
    6378:	47b0      	blx	r6
			printf("Please unplug and re-plug the card.\n\r");
    637a:	482d      	ldr	r0, [pc, #180]	; (6430 <sd_test_availability+0xc4>)
    637c:	47b0      	blx	r6
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
    637e:	4e2d      	ldr	r6, [pc, #180]	; (6434 <sd_test_availability+0xc8>)
    6380:	2000      	movs	r0, #0
    6382:	47b0      	blx	r6
    6384:	2802      	cmp	r0, #2
    6386:	d1fb      	bne.n	6380 <sd_test_availability+0x14>
    6388:	4b2b      	ldr	r3, [pc, #172]	; (6438 <sd_test_availability+0xcc>)
    638a:	2280      	movs	r2, #128	; 0x80
    638c:	0152      	lsls	r2, r2, #5
    638e:	61da      	str	r2, [r3, #28]
    6390:	2280      	movs	r2, #128	; 0x80
    6392:	0212      	lsls	r2, r2, #8
    6394:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    6396:	2000      	movs	r0, #0
    6398:	4b22      	ldr	r3, [pc, #136]	; (6424 <sd_test_availability+0xb8>)
    639a:	4798      	blx	r3
    639c:	2296      	movs	r2, #150	; 0x96
    639e:	0052      	lsls	r2, r2, #1
    63a0:	2300      	movs	r3, #0
    63a2:	2100      	movs	r1, #0
    63a4:	4e25      	ldr	r6, [pc, #148]	; (643c <sd_test_availability+0xd0>)
    63a6:	47b0      	blx	r6
    63a8:	4a25      	ldr	r2, [pc, #148]	; (6440 <sd_test_availability+0xd4>)
    63aa:	2300      	movs	r3, #0
    63ac:	1880      	adds	r0, r0, r2
    63ae:	4159      	adcs	r1, r3
    63b0:	4a24      	ldr	r2, [pc, #144]	; (6444 <sd_test_availability+0xd8>)
    63b2:	2300      	movs	r3, #0
    63b4:	4e24      	ldr	r6, [pc, #144]	; (6448 <sd_test_availability+0xdc>)
    63b6:	47b0      	blx	r6
    63b8:	4b24      	ldr	r3, [pc, #144]	; (644c <sd_test_availability+0xe0>)
    63ba:	4798      	blx	r3
		if(!rec_start_request) {
    63bc:	4b24      	ldr	r3, [pc, #144]	; (6450 <sd_test_availability+0xe4>)
    63be:	7818      	ldrb	r0, [r3, #0]
    63c0:	b2c0      	uxtb	r0, r0
    63c2:	2800      	cmp	r0, #0
    63c4:	d024      	beq.n	6410 <sd_test_availability+0xa4>
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    63c6:	2000      	movs	r0, #0
    63c8:	47a0      	blx	r4
    63ca:	0006      	movs	r6, r0
		if(status == CTRL_FAIL) {
    63cc:	2801      	cmp	r0, #1
    63ce:	d0d1      	beq.n	6374 <sd_test_availability+0x8>
    63d0:	4b19      	ldr	r3, [pc, #100]	; (6438 <sd_test_availability+0xcc>)
    63d2:	2280      	movs	r2, #128	; 0x80
    63d4:	0152      	lsls	r2, r2, #5
    63d6:	61da      	str	r2, [r3, #28]
    63d8:	2280      	movs	r2, #128	; 0x80
    63da:	0212      	lsls	r2, r2, #8
    63dc:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    63de:	2000      	movs	r0, #0
    63e0:	47a8      	blx	r5
    63e2:	2296      	movs	r2, #150	; 0x96
    63e4:	0052      	lsls	r2, r2, #1
    63e6:	2300      	movs	r3, #0
    63e8:	2100      	movs	r1, #0
    63ea:	4f14      	ldr	r7, [pc, #80]	; (643c <sd_test_availability+0xd0>)
    63ec:	47b8      	blx	r7
    63ee:	4a14      	ldr	r2, [pc, #80]	; (6440 <sd_test_availability+0xd4>)
    63f0:	2300      	movs	r3, #0
    63f2:	1880      	adds	r0, r0, r2
    63f4:	4159      	adcs	r1, r3
    63f6:	4a13      	ldr	r2, [pc, #76]	; (6444 <sd_test_availability+0xd8>)
    63f8:	2300      	movs	r3, #0
    63fa:	4f13      	ldr	r7, [pc, #76]	; (6448 <sd_test_availability+0xdc>)
    63fc:	47b8      	blx	r7
    63fe:	4b13      	ldr	r3, [pc, #76]	; (644c <sd_test_availability+0xe0>)
    6400:	4798      	blx	r3
		if(!rec_start_request) {
    6402:	4b13      	ldr	r3, [pc, #76]	; (6450 <sd_test_availability+0xe4>)
    6404:	7818      	ldrb	r0, [r3, #0]
    6406:	b2c0      	uxtb	r0, r0
    6408:	2800      	cmp	r0, #0
    640a:	d001      	beq.n	6410 <sd_test_availability+0xa4>
			retVal = false;
			break;
		}
	} while(status != CTRL_GOOD);
    640c:	2e00      	cmp	r6, #0
    640e:	d1da      	bne.n	63c6 <sd_test_availability+0x5a>
		port_base->OUTSET.reg = pin_mask;
    6410:	4b09      	ldr	r3, [pc, #36]	; (6438 <sd_test_availability+0xcc>)
    6412:	2280      	movs	r2, #128	; 0x80
    6414:	0152      	lsls	r2, r2, #5
    6416:	619a      	str	r2, [r3, #24]
    6418:	2280      	movs	r2, #128	; 0x80
    641a:	0212      	lsls	r2, r2, #8
    641c:	619a      	str	r2, [r3, #24]
	LED_Off(UI_LED_REC);
	LED_Off(UI_LED_MON);
	return retVal;
    641e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6420:	00008179 	.word	0x00008179
    6424:	00008cd1 	.word	0x00008cd1
    6428:	0000af34 	.word	0x0000af34
    642c:	00009665 	.word	0x00009665
    6430:	0000af4c 	.word	0x0000af4c
    6434:	00000c49 	.word	0x00000c49
    6438:	41004400 	.word	0x41004400
    643c:	0000940d 	.word	0x0000940d
    6440:	00001b57 	.word	0x00001b57
    6444:	00001b58 	.word	0x00001b58
    6448:	000093cd 	.word	0x000093cd
    644c:	20000001 	.word	0x20000001
    6450:	200002d8 	.word	0x200002d8

00006454 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    6454:	b570      	push	{r4, r5, r6, lr}
    6456:	b082      	sub	sp, #8
    6458:	0005      	movs	r5, r0
    645a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    645c:	2200      	movs	r2, #0
    645e:	466b      	mov	r3, sp
    6460:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    6462:	4c06      	ldr	r4, [pc, #24]	; (647c <usart_serial_getchar+0x28>)
    6464:	466b      	mov	r3, sp
    6466:	1d99      	adds	r1, r3, #6
    6468:	0028      	movs	r0, r5
    646a:	47a0      	blx	r4
    646c:	2800      	cmp	r0, #0
    646e:	d1f9      	bne.n	6464 <usart_serial_getchar+0x10>

	*c = temp;
    6470:	466b      	mov	r3, sp
    6472:	3306      	adds	r3, #6
    6474:	881b      	ldrh	r3, [r3, #0]
    6476:	7033      	strb	r3, [r6, #0]
}
    6478:	b002      	add	sp, #8
    647a:	bd70      	pop	{r4, r5, r6, pc}
    647c:	000029e5 	.word	0x000029e5

00006480 <usart_serial_putchar>:
{
    6480:	b570      	push	{r4, r5, r6, lr}
    6482:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    6484:	b28c      	uxth	r4, r1
    6486:	4e03      	ldr	r6, [pc, #12]	; (6494 <usart_serial_putchar+0x14>)
    6488:	0021      	movs	r1, r4
    648a:	0028      	movs	r0, r5
    648c:	47b0      	blx	r6
    648e:	2800      	cmp	r0, #0
    6490:	d1fa      	bne.n	6488 <usart_serial_putchar+0x8>
}
    6492:	bd70      	pop	{r4, r5, r6, pc}
    6494:	000029b9 	.word	0x000029b9

00006498 <ui_button1_callback>:
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
}

void ui_button1_callback(void)
{
    6498:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    649a:	4b18      	ldr	r3, [pc, #96]	; (64fc <ui_button1_callback+0x64>)
    649c:	6a1b      	ldr	r3, [r3, #32]
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_1_PIN);
	
	if(press_state) {
    649e:	00db      	lsls	r3, r3, #3
    64a0:	d500      	bpl.n	64a4 <ui_button1_callback+0xc>
		}
		else {
			rec_start_request = true;
		}
	}
}
    64a2:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    64a4:	2000      	movs	r0, #0
    64a6:	4b16      	ldr	r3, [pc, #88]	; (6500 <ui_button1_callback+0x68>)
    64a8:	4798      	blx	r3
    64aa:	2264      	movs	r2, #100	; 0x64
    64ac:	2300      	movs	r3, #0
    64ae:	2100      	movs	r1, #0
    64b0:	4c14      	ldr	r4, [pc, #80]	; (6504 <ui_button1_callback+0x6c>)
    64b2:	47a0      	blx	r4
    64b4:	4a14      	ldr	r2, [pc, #80]	; (6508 <ui_button1_callback+0x70>)
    64b6:	2300      	movs	r3, #0
    64b8:	1880      	adds	r0, r0, r2
    64ba:	4159      	adcs	r1, r3
    64bc:	4a13      	ldr	r2, [pc, #76]	; (650c <ui_button1_callback+0x74>)
    64be:	2300      	movs	r3, #0
    64c0:	4c13      	ldr	r4, [pc, #76]	; (6510 <ui_button1_callback+0x78>)
    64c2:	47a0      	blx	r4
    64c4:	4b13      	ldr	r3, [pc, #76]	; (6514 <ui_button1_callback+0x7c>)
    64c6:	4798      	blx	r3
    64c8:	4b0c      	ldr	r3, [pc, #48]	; (64fc <ui_button1_callback+0x64>)
    64ca:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    64cc:	00db      	lsls	r3, r3, #3
    64ce:	d4e8      	bmi.n	64a2 <ui_button1_callback+0xa>
		if(rec_running || rec_start_request) {
    64d0:	4b11      	ldr	r3, [pc, #68]	; (6518 <ui_button1_callback+0x80>)
    64d2:	781b      	ldrb	r3, [r3, #0]
    64d4:	2b00      	cmp	r3, #0
    64d6:	d107      	bne.n	64e8 <ui_button1_callback+0x50>
    64d8:	4b10      	ldr	r3, [pc, #64]	; (651c <ui_button1_callback+0x84>)
    64da:	781b      	ldrb	r3, [r3, #0]
    64dc:	2b00      	cmp	r3, #0
    64de:	d103      	bne.n	64e8 <ui_button1_callback+0x50>
			rec_start_request = true;
    64e0:	2201      	movs	r2, #1
    64e2:	4b0e      	ldr	r3, [pc, #56]	; (651c <ui_button1_callback+0x84>)
    64e4:	701a      	strb	r2, [r3, #0]
}
    64e6:	e7dc      	b.n	64a2 <ui_button1_callback+0xa>
			rec_start_request = false;
    64e8:	2300      	movs	r3, #0
    64ea:	4a0c      	ldr	r2, [pc, #48]	; (651c <ui_button1_callback+0x84>)
    64ec:	7013      	strb	r3, [r2, #0]
			rec_running = false;
    64ee:	4a0a      	ldr	r2, [pc, #40]	; (6518 <ui_button1_callback+0x80>)
    64f0:	7013      	strb	r3, [r2, #0]
			rec_stop_request = true;
    64f2:	2201      	movs	r2, #1
    64f4:	4b0a      	ldr	r3, [pc, #40]	; (6520 <ui_button1_callback+0x88>)
    64f6:	701a      	strb	r2, [r3, #0]
    64f8:	e7d3      	b.n	64a2 <ui_button1_callback+0xa>
    64fa:	46c0      	nop			; (mov r8, r8)
    64fc:	41004400 	.word	0x41004400
    6500:	00008cd1 	.word	0x00008cd1
    6504:	0000940d 	.word	0x0000940d
    6508:	00001b57 	.word	0x00001b57
    650c:	00001b58 	.word	0x00001b58
    6510:	000093cd 	.word	0x000093cd
    6514:	20000001 	.word	0x20000001
    6518:	200002d7 	.word	0x200002d7
    651c:	200002d8 	.word	0x200002d8
    6520:	200002d9 	.word	0x200002d9

00006524 <ui_button3_callback>:


void ui_button3_callback(void)
{
    6524:	b510      	push	{r4, lr}
    6526:	4b17      	ldr	r3, [pc, #92]	; (6584 <ui_button3_callback+0x60>)
    6528:	6a1b      	ldr	r3, [r3, #32]
	//static uint32_t debounce_old3 = 0;
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_3_PIN);
	
	if(press_state) {
    652a:	071b      	lsls	r3, r3, #28
    652c:	d500      	bpl.n	6530 <ui_button3_callback+0xc>
		else {
			LED_On(UI_LED_3_PIN);
			monitoring_on = true;
		}
	}
}
    652e:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    6530:	2000      	movs	r0, #0
    6532:	4b15      	ldr	r3, [pc, #84]	; (6588 <ui_button3_callback+0x64>)
    6534:	4798      	blx	r3
    6536:	2264      	movs	r2, #100	; 0x64
    6538:	2300      	movs	r3, #0
    653a:	2100      	movs	r1, #0
    653c:	4c13      	ldr	r4, [pc, #76]	; (658c <ui_button3_callback+0x68>)
    653e:	47a0      	blx	r4
    6540:	4a13      	ldr	r2, [pc, #76]	; (6590 <ui_button3_callback+0x6c>)
    6542:	2300      	movs	r3, #0
    6544:	1880      	adds	r0, r0, r2
    6546:	4159      	adcs	r1, r3
    6548:	4a12      	ldr	r2, [pc, #72]	; (6594 <ui_button3_callback+0x70>)
    654a:	2300      	movs	r3, #0
    654c:	4c12      	ldr	r4, [pc, #72]	; (6598 <ui_button3_callback+0x74>)
    654e:	47a0      	blx	r4
    6550:	4b12      	ldr	r3, [pc, #72]	; (659c <ui_button3_callback+0x78>)
    6552:	4798      	blx	r3
    6554:	4b0b      	ldr	r3, [pc, #44]	; (6584 <ui_button3_callback+0x60>)
    6556:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    6558:	071b      	lsls	r3, r3, #28
    655a:	d4e8      	bmi.n	652e <ui_button3_callback+0xa>
		if(monitoring_on) {
    655c:	4b10      	ldr	r3, [pc, #64]	; (65a0 <ui_button3_callback+0x7c>)
    655e:	781b      	ldrb	r3, [r3, #0]
    6560:	2b00      	cmp	r3, #0
    6562:	d107      	bne.n	6574 <ui_button3_callback+0x50>
		port_base->OUTCLR.reg = pin_mask;
    6564:	2280      	movs	r2, #128	; 0x80
    6566:	0212      	lsls	r2, r2, #8
    6568:	4b06      	ldr	r3, [pc, #24]	; (6584 <ui_button3_callback+0x60>)
    656a:	615a      	str	r2, [r3, #20]
			monitoring_on = true;
    656c:	2201      	movs	r2, #1
    656e:	4b0c      	ldr	r3, [pc, #48]	; (65a0 <ui_button3_callback+0x7c>)
    6570:	701a      	strb	r2, [r3, #0]
}
    6572:	e7dc      	b.n	652e <ui_button3_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    6574:	2280      	movs	r2, #128	; 0x80
    6576:	0212      	lsls	r2, r2, #8
    6578:	4b02      	ldr	r3, [pc, #8]	; (6584 <ui_button3_callback+0x60>)
    657a:	619a      	str	r2, [r3, #24]
			monitoring_on = false;
    657c:	2200      	movs	r2, #0
    657e:	4b08      	ldr	r3, [pc, #32]	; (65a0 <ui_button3_callback+0x7c>)
    6580:	701a      	strb	r2, [r3, #0]
    6582:	e7d4      	b.n	652e <ui_button3_callback+0xa>
    6584:	41004400 	.word	0x41004400
    6588:	00008cd1 	.word	0x00008cd1
    658c:	0000940d 	.word	0x0000940d
    6590:	00001b57 	.word	0x00001b57
    6594:	00001b58 	.word	0x00001b58
    6598:	000093cd 	.word	0x000093cd
    659c:	20000001 	.word	0x20000001
    65a0:	200002d5 	.word	0x200002d5

000065a4 <ui_cdc_init>:
{
    65a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    65a6:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    65a8:	2380      	movs	r3, #128	; 0x80
    65aa:	05db      	lsls	r3, r3, #23
    65ac:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    65ae:	2300      	movs	r3, #0
    65b0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    65b2:	22ff      	movs	r2, #255	; 0xff
    65b4:	4669      	mov	r1, sp
    65b6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    65b8:	2200      	movs	r2, #0
    65ba:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    65bc:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    65be:	2401      	movs	r4, #1
    65c0:	2124      	movs	r1, #36	; 0x24
    65c2:	4668      	mov	r0, sp
    65c4:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    65c6:	3101      	adds	r1, #1
    65c8:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    65ca:	3101      	adds	r1, #1
    65cc:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    65ce:	3101      	adds	r1, #1
    65d0:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    65d2:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    65d4:	3105      	adds	r1, #5
    65d6:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    65d8:	3101      	adds	r1, #1
    65da:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    65dc:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    65de:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    65e0:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    65e2:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    65e4:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    65e6:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    65e8:	2313      	movs	r3, #19
    65ea:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    65ec:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = UI_CDC_MUX_SETTING;
    65ee:	2380      	movs	r3, #128	; 0x80
    65f0:	035b      	lsls	r3, r3, #13
    65f2:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = UI_CDC_PINMUX_PAD0;
    65f4:	4b1a      	ldr	r3, [pc, #104]	; (6660 <ui_cdc_init+0xbc>)
    65f6:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = UI_CDC_PINMUX_PAD1;
    65f8:	4b1a      	ldr	r3, [pc, #104]	; (6664 <ui_cdc_init+0xc0>)
    65fa:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = UI_CDC_PINMUX_PAD2;
    65fc:	2301      	movs	r3, #1
    65fe:	425b      	negs	r3, r3
    6600:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = UI_CDC_PINMUX_PAD3;
    6602:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_CDC_BAUDRATE;
    6604:	23e1      	movs	r3, #225	; 0xe1
    6606:	025b      	lsls	r3, r3, #9
    6608:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    660a:	4d17      	ldr	r5, [pc, #92]	; (6668 <ui_cdc_init+0xc4>)
    660c:	4b17      	ldr	r3, [pc, #92]	; (666c <ui_cdc_init+0xc8>)
    660e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    6610:	4a17      	ldr	r2, [pc, #92]	; (6670 <ui_cdc_init+0xcc>)
    6612:	4b18      	ldr	r3, [pc, #96]	; (6674 <ui_cdc_init+0xd0>)
    6614:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    6616:	4a18      	ldr	r2, [pc, #96]	; (6678 <ui_cdc_init+0xd4>)
    6618:	4b18      	ldr	r3, [pc, #96]	; (667c <ui_cdc_init+0xd8>)
    661a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    661c:	466a      	mov	r2, sp
    661e:	4918      	ldr	r1, [pc, #96]	; (6680 <ui_cdc_init+0xdc>)
    6620:	0028      	movs	r0, r5
    6622:	4b18      	ldr	r3, [pc, #96]	; (6684 <ui_cdc_init+0xe0>)
    6624:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    6626:	4f18      	ldr	r7, [pc, #96]	; (6688 <ui_cdc_init+0xe4>)
    6628:	683b      	ldr	r3, [r7, #0]
    662a:	6898      	ldr	r0, [r3, #8]
    662c:	2100      	movs	r1, #0
    662e:	4e17      	ldr	r6, [pc, #92]	; (668c <ui_cdc_init+0xe8>)
    6630:	47b0      	blx	r6
	setbuf(stdin, NULL);
    6632:	683b      	ldr	r3, [r7, #0]
    6634:	6858      	ldr	r0, [r3, #4]
    6636:	2100      	movs	r1, #0
    6638:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    663a:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    663c:	0030      	movs	r0, r6
    663e:	4b14      	ldr	r3, [pc, #80]	; (6690 <ui_cdc_init+0xec>)
    6640:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6642:	231f      	movs	r3, #31
    6644:	4018      	ands	r0, r3
    6646:	4084      	lsls	r4, r0
    6648:	4b12      	ldr	r3, [pc, #72]	; (6694 <ui_cdc_init+0xf0>)
    664a:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    664c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    664e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6650:	2b00      	cmp	r3, #0
    6652:	d1fc      	bne.n	664e <ui_cdc_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6654:	6833      	ldr	r3, [r6, #0]
    6656:	2202      	movs	r2, #2
    6658:	4313      	orrs	r3, r2
    665a:	6033      	str	r3, [r6, #0]
}
    665c:	b011      	add	sp, #68	; 0x44
    665e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6660:	00160002 	.word	0x00160002
    6664:	00170002 	.word	0x00170002
    6668:	20000688 	.word	0x20000688
    666c:	2000061c 	.word	0x2000061c
    6670:	00006481 	.word	0x00006481
    6674:	20000618 	.word	0x20000618
    6678:	00006455 	.word	0x00006455
    667c:	20000614 	.word	0x20000614
    6680:	42001400 	.word	0x42001400
    6684:	00002675 	.word	0x00002675
    6688:	20000128 	.word	0x20000128
    668c:	00009699 	.word	0x00009699
    6690:	000025e5 	.word	0x000025e5
    6694:	e000e100 	.word	0xe000e100

00006698 <ui_lb_init>:
{
    6698:	b5f0      	push	{r4, r5, r6, r7, lr}
    669a:	46c6      	mov	lr, r8
    669c:	b500      	push	{lr}
    669e:	b084      	sub	sp, #16
	config->input_pull = PORT_PIN_PULL_UP;
    66a0:	ac03      	add	r4, sp, #12
    66a2:	2501      	movs	r5, #1
    66a4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    66a6:	2600      	movs	r6, #0
    66a8:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    66aa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(UI_LED_1_PIN, &pin_conf);
    66ac:	0021      	movs	r1, r4
    66ae:	200c      	movs	r0, #12
    66b0:	4b1d      	ldr	r3, [pc, #116]	; (6728 <ui_lb_init+0x90>)
    66b2:	4698      	mov	r8, r3
    66b4:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    66b6:	4f1d      	ldr	r7, [pc, #116]	; (672c <ui_lb_init+0x94>)
    66b8:	2380      	movs	r3, #128	; 0x80
    66ba:	015b      	lsls	r3, r3, #5
    66bc:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_2_PIN, &pin_conf);
    66be:	0021      	movs	r1, r4
    66c0:	200d      	movs	r0, #13
    66c2:	47c0      	blx	r8
    66c4:	2380      	movs	r3, #128	; 0x80
    66c6:	019b      	lsls	r3, r3, #6
    66c8:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_3_PIN, &pin_conf);
    66ca:	0021      	movs	r1, r4
    66cc:	200f      	movs	r0, #15
    66ce:	47c0      	blx	r8
    66d0:	2380      	movs	r3, #128	; 0x80
    66d2:	021b      	lsls	r3, r3, #8
    66d4:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_DBG_PIN, &pin_conf);
    66d6:	0021      	movs	r1, r4
    66d8:	200a      	movs	r0, #10
    66da:	47c0      	blx	r8
		port_base->OUTCLR.reg = pin_mask;
    66dc:	2380      	movs	r3, #128	; 0x80
    66de:	00db      	lsls	r3, r3, #3
    66e0:	617b      	str	r3, [r7, #20]
	extint_chan_get_config_defaults(&config_extint_chan);
    66e2:	4668      	mov	r0, sp
    66e4:	4b12      	ldr	r3, [pc, #72]	; (6730 <ui_lb_init+0x98>)
    66e6:	4798      	blx	r3
	config_extint_chan.gpio_pin = UI_BUT_1_EIC_PIN;
    66e8:	231c      	movs	r3, #28
    66ea:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_1_EIC_MUX;
    66ec:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    66ee:	466b      	mov	r3, sp
    66f0:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    66f2:	2403      	movs	r4, #3
    66f4:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_1_EIC_LINE, &config_extint_chan);
    66f6:	4669      	mov	r1, sp
    66f8:	2008      	movs	r0, #8
    66fa:	4f0e      	ldr	r7, [pc, #56]	; (6734 <ui_lb_init+0x9c>)
    66fc:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_2_EIC_PIN;
    66fe:	2302      	movs	r3, #2
    6700:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_2_EIC_MUX;
    6702:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    6704:	466b      	mov	r3, sp
    6706:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    6708:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_2_EIC_LINE, &config_extint_chan);
    670a:	4669      	mov	r1, sp
    670c:	2002      	movs	r0, #2
    670e:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_3_EIC_PIN;
    6710:	9400      	str	r4, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_3_EIC_MUX;
    6712:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    6714:	466b      	mov	r3, sp
    6716:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    6718:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_3_EIC_LINE, &config_extint_chan);
    671a:	4669      	mov	r1, sp
    671c:	2003      	movs	r0, #3
    671e:	47b8      	blx	r7
}
    6720:	b004      	add	sp, #16
    6722:	bc04      	pop	{r2}
    6724:	4690      	mov	r8, r2
    6726:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6728:	00008b8d 	.word	0x00008b8d
    672c:	41004400 	.word	0x41004400
    6730:	000021e5 	.word	0x000021e5
    6734:	000021f9 	.word	0x000021f9

00006738 <ui_configure_callback>:
{
    6738:	b510      	push	{r4, lr}
	extint_register_callback(ui_button1_callback, UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    673a:	2200      	movs	r2, #0
    673c:	2108      	movs	r1, #8
    673e:	4807      	ldr	r0, [pc, #28]	; (675c <ui_configure_callback+0x24>)
    6740:	4c07      	ldr	r4, [pc, #28]	; (6760 <ui_configure_callback+0x28>)
    6742:	47a0      	blx	r4
	extint_register_callback(ui_button3_callback, UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    6744:	2200      	movs	r2, #0
    6746:	2103      	movs	r1, #3
    6748:	4806      	ldr	r0, [pc, #24]	; (6764 <ui_configure_callback+0x2c>)
    674a:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    674c:	2100      	movs	r1, #0
    674e:	2008      	movs	r0, #8
    6750:	4c05      	ldr	r4, [pc, #20]	; (6768 <ui_configure_callback+0x30>)
    6752:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    6754:	2100      	movs	r1, #0
    6756:	2003      	movs	r0, #3
    6758:	47a0      	blx	r4
}
    675a:	bd10      	pop	{r4, pc}
    675c:	00006499 	.word	0x00006499
    6760:	00007655 	.word	0x00007655
    6764:	00006525 	.word	0x00006525
    6768:	00007681 	.word	0x00007681

0000676c <ui_powerdown>:
		port_base->OUTSET.reg = pin_mask;
    676c:	2280      	movs	r2, #128	; 0x80
    676e:	05d2      	lsls	r2, r2, #23
    6770:	4b01      	ldr	r3, [pc, #4]	; (6778 <ui_powerdown+0xc>)
    6772:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    6774:	4770      	bx	lr
    6776:	46c0      	nop			; (mov r8, r8)
    6778:	41004480 	.word	0x41004480

0000677c <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
    677c:	2280      	movs	r2, #128	; 0x80
    677e:	05d2      	lsls	r2, r2, #23
    6780:	4b01      	ldr	r3, [pc, #4]	; (6788 <ui_wakeup+0xc>)
    6782:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    6784:	4770      	bx	lr
    6786:	46c0      	nop			; (mov r8, r8)
    6788:	41004480 	.word	0x41004480

0000678c <ui_start_read>:

void ui_start_read(void)
{
}
    678c:	4770      	bx	lr

0000678e <ui_stop_read>:

void ui_stop_read(void)
{
}
    678e:	4770      	bx	lr

00006790 <ui_start_write>:

void ui_start_write(void)
{
}
    6790:	4770      	bx	lr

00006792 <ui_stop_write>:

void ui_stop_write(void)
{
}
    6792:	4770      	bx	lr

00006794 <ui_process>:

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
    6794:	2800      	cmp	r0, #0
    6796:	d104      	bne.n	67a2 <ui_process+0xe>
    6798:	2280      	movs	r2, #128	; 0x80
    679a:	05d2      	lsls	r2, r2, #23
    679c:	4b05      	ldr	r3, [pc, #20]	; (67b4 <ui_process+0x20>)
    679e:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if (1000 == framenumber) {
		LED_Off(LED_0_PIN);
	}
}
    67a0:	4770      	bx	lr
	if (1000 == framenumber) {
    67a2:	23fa      	movs	r3, #250	; 0xfa
    67a4:	009b      	lsls	r3, r3, #2
    67a6:	4298      	cmp	r0, r3
    67a8:	d1fa      	bne.n	67a0 <ui_process+0xc>
		port_base->OUTSET.reg = pin_mask;
    67aa:	2280      	movs	r2, #128	; 0x80
    67ac:	05d2      	lsls	r2, r2, #23
    67ae:	4b01      	ldr	r3, [pc, #4]	; (67b4 <ui_process+0x20>)
    67b0:	619a      	str	r2, [r3, #24]
}
    67b2:	e7f5      	b.n	67a0 <ui_process+0xc>
    67b4:	41004480 	.word	0x41004480

000067b8 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    67b8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    67ba:	000b      	movs	r3, r1
    67bc:	332e      	adds	r3, #46	; 0x2e
    67be:	009b      	lsls	r3, r3, #2
    67c0:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    67c2:	22aa      	movs	r2, #170	; 0xaa
    67c4:	0052      	lsls	r2, r2, #1
    67c6:	0049      	lsls	r1, r1, #1
    67c8:	5a83      	ldrh	r3, [r0, r2]
    67ca:	4c03      	ldr	r4, [pc, #12]	; (67d8 <usb_device_register_callback+0x20>)
    67cc:	5b09      	ldrh	r1, [r1, r4]
    67ce:	430b      	orrs	r3, r1
    67d0:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    67d2:	2000      	movs	r0, #0
    67d4:	bd10      	pop	{r4, pc}
    67d6:	46c0      	nop			; (mov r8, r8)
    67d8:	0000af88 	.word	0x0000af88

000067dc <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    67dc:	0049      	lsls	r1, r1, #1
    67de:	4b06      	ldr	r3, [pc, #24]	; (67f8 <usb_device_enable_callback+0x1c>)
    67e0:	5acb      	ldrh	r3, [r1, r3]
    67e2:	6802      	ldr	r2, [r0, #0]
    67e4:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    67e6:	21ab      	movs	r1, #171	; 0xab
    67e8:	0049      	lsls	r1, r1, #1
    67ea:	5a42      	ldrh	r2, [r0, r1]
    67ec:	431a      	orrs	r2, r3
    67ee:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    67f0:	6802      	ldr	r2, [r0, #0]
    67f2:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    67f4:	2000      	movs	r0, #0
    67f6:	4770      	bx	lr
    67f8:	0000af88 	.word	0x0000af88

000067fc <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    67fc:	0049      	lsls	r1, r1, #1
    67fe:	4b05      	ldr	r3, [pc, #20]	; (6814 <usb_device_disable_callback+0x18>)
    6800:	5aca      	ldrh	r2, [r1, r3]
    6802:	21ab      	movs	r1, #171	; 0xab
    6804:	0049      	lsls	r1, r1, #1
    6806:	5a43      	ldrh	r3, [r0, r1]
    6808:	4393      	bics	r3, r2
    680a:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    680c:	6803      	ldr	r3, [r0, #0]
    680e:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    6810:	2000      	movs	r0, #0
    6812:	4770      	bx	lr
    6814:	0000af88 	.word	0x0000af88

00006818 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    6818:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    681a:	008c      	lsls	r4, r1, #2
    681c:	18a4      	adds	r4, r4, r2
    681e:	3434      	adds	r4, #52	; 0x34
    6820:	00a4      	lsls	r4, r4, #2
    6822:	1904      	adds	r4, r0, r4
    6824:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    6826:	1840      	adds	r0, r0, r1
    6828:	3059      	adds	r0, #89	; 0x59
    682a:	30ff      	adds	r0, #255	; 0xff
    682c:	7803      	ldrb	r3, [r0, #0]
    682e:	4903      	ldr	r1, [pc, #12]	; (683c <usb_device_endpoint_register_callback+0x24>)
    6830:	5c8a      	ldrb	r2, [r1, r2]
    6832:	4313      	orrs	r3, r2
    6834:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    6836:	2000      	movs	r0, #0
    6838:	bd10      	pop	{r4, pc}
    683a:	46c0      	nop			; (mov r8, r8)
    683c:	0000af98 	.word	0x0000af98

00006840 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    6840:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    6842:	008b      	lsls	r3, r1, #2
    6844:	189b      	adds	r3, r3, r2
    6846:	3334      	adds	r3, #52	; 0x34
    6848:	009b      	lsls	r3, r3, #2
    684a:	18c3      	adds	r3, r0, r3
    684c:	2400      	movs	r4, #0
    684e:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    6850:	1840      	adds	r0, r0, r1
    6852:	3059      	adds	r0, #89	; 0x59
    6854:	30ff      	adds	r0, #255	; 0xff
    6856:	4b03      	ldr	r3, [pc, #12]	; (6864 <usb_device_endpoint_unregister_callback+0x24>)
    6858:	5c9a      	ldrb	r2, [r3, r2]
    685a:	7803      	ldrb	r3, [r0, #0]
    685c:	4393      	bics	r3, r2
    685e:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    6860:	2000      	movs	r0, #0
    6862:	bd10      	pop	{r4, pc}
    6864:	0000af98 	.word	0x0000af98

00006868 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    6868:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    686a:	230f      	movs	r3, #15
    686c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    686e:	18c4      	adds	r4, r0, r3
    6870:	3461      	adds	r4, #97	; 0x61
    6872:	34ff      	adds	r4, #255	; 0xff
    6874:	7825      	ldrb	r5, [r4, #0]
    6876:	4e2f      	ldr	r6, [pc, #188]	; (6934 <usb_device_endpoint_enable_callback+0xcc>)
    6878:	5cb6      	ldrb	r6, [r6, r2]
    687a:	4335      	orrs	r5, r6
    687c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    687e:	2a00      	cmp	r2, #0
    6880:	d129      	bne.n	68d6 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    6882:	2b00      	cmp	r3, #0
    6884:	d112      	bne.n	68ac <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    6886:	2503      	movs	r5, #3
    6888:	240a      	movs	r4, #10
    688a:	34ff      	adds	r4, #255	; 0xff
    688c:	6806      	ldr	r6, [r0, #0]
    688e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    6890:	2a03      	cmp	r2, #3
    6892:	d109      	bne.n	68a8 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    6894:	b249      	sxtb	r1, r1
    6896:	2900      	cmp	r1, #0
    6898:	db44      	blt.n	6924 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    689a:	6802      	ldr	r2, [r0, #0]
    689c:	015b      	lsls	r3, r3, #5
    689e:	18d3      	adds	r3, r2, r3
    68a0:	330a      	adds	r3, #10
    68a2:	33ff      	adds	r3, #255	; 0xff
    68a4:	2220      	movs	r2, #32
    68a6:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    68a8:	2000      	movs	r0, #0
    68aa:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    68ac:	b24c      	sxtb	r4, r1
    68ae:	2c00      	cmp	r4, #0
    68b0:	db08      	blt.n	68c4 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    68b2:	015c      	lsls	r4, r3, #5
    68b4:	6805      	ldr	r5, [r0, #0]
    68b6:	46ac      	mov	ip, r5
    68b8:	4464      	add	r4, ip
    68ba:	340a      	adds	r4, #10
    68bc:	34ff      	adds	r4, #255	; 0xff
    68be:	2501      	movs	r5, #1
    68c0:	7025      	strb	r5, [r4, #0]
    68c2:	e7e5      	b.n	6890 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    68c4:	015c      	lsls	r4, r3, #5
    68c6:	6805      	ldr	r5, [r0, #0]
    68c8:	46ac      	mov	ip, r5
    68ca:	4464      	add	r4, ip
    68cc:	340a      	adds	r4, #10
    68ce:	34ff      	adds	r4, #255	; 0xff
    68d0:	2502      	movs	r5, #2
    68d2:	7025      	strb	r5, [r4, #0]
    68d4:	e7dc      	b.n	6890 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    68d6:	2a01      	cmp	r2, #1
    68d8:	d11a      	bne.n	6910 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    68da:	2b00      	cmp	r3, #0
    68dc:	d105      	bne.n	68ea <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    68de:	6802      	ldr	r2, [r0, #0]
    68e0:	210c      	movs	r1, #12
    68e2:	230a      	movs	r3, #10
    68e4:	33ff      	adds	r3, #255	; 0xff
    68e6:	54d1      	strb	r1, [r2, r3]
    68e8:	e7de      	b.n	68a8 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    68ea:	b249      	sxtb	r1, r1
    68ec:	2900      	cmp	r1, #0
    68ee:	db07      	blt.n	6900 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    68f0:	6802      	ldr	r2, [r0, #0]
    68f2:	015b      	lsls	r3, r3, #5
    68f4:	18d3      	adds	r3, r2, r3
    68f6:	330a      	adds	r3, #10
    68f8:	33ff      	adds	r3, #255	; 0xff
    68fa:	2204      	movs	r2, #4
    68fc:	701a      	strb	r2, [r3, #0]
    68fe:	e7d3      	b.n	68a8 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    6900:	6802      	ldr	r2, [r0, #0]
    6902:	015b      	lsls	r3, r3, #5
    6904:	18d3      	adds	r3, r2, r3
    6906:	330a      	adds	r3, #10
    6908:	33ff      	adds	r3, #255	; 0xff
    690a:	2208      	movs	r2, #8
    690c:	701a      	strb	r2, [r3, #0]
    690e:	e7cb      	b.n	68a8 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    6910:	2a02      	cmp	r2, #2
    6912:	d1bd      	bne.n	6890 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    6914:	6802      	ldr	r2, [r0, #0]
    6916:	015b      	lsls	r3, r3, #5
    6918:	18d3      	adds	r3, r2, r3
    691a:	330a      	adds	r3, #10
    691c:	33ff      	adds	r3, #255	; 0xff
    691e:	2210      	movs	r2, #16
    6920:	701a      	strb	r2, [r3, #0]
    6922:	e7c1      	b.n	68a8 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    6924:	6802      	ldr	r2, [r0, #0]
    6926:	015b      	lsls	r3, r3, #5
    6928:	18d3      	adds	r3, r2, r3
    692a:	330a      	adds	r3, #10
    692c:	33ff      	adds	r3, #255	; 0xff
    692e:	2240      	movs	r2, #64	; 0x40
    6930:	701a      	strb	r2, [r3, #0]
    6932:	e7b9      	b.n	68a8 <usb_device_endpoint_enable_callback+0x40>
    6934:	0000af98 	.word	0x0000af98

00006938 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    6938:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    693a:	230f      	movs	r3, #15
    693c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    693e:	18c4      	adds	r4, r0, r3
    6940:	3461      	adds	r4, #97	; 0x61
    6942:	34ff      	adds	r4, #255	; 0xff
    6944:	4d2f      	ldr	r5, [pc, #188]	; (6a04 <usb_device_endpoint_disable_callback+0xcc>)
    6946:	5cae      	ldrb	r6, [r5, r2]
    6948:	7825      	ldrb	r5, [r4, #0]
    694a:	43b5      	bics	r5, r6
    694c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    694e:	2a00      	cmp	r2, #0
    6950:	d129      	bne.n	69a6 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    6952:	2b00      	cmp	r3, #0
    6954:	d112      	bne.n	697c <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    6956:	2503      	movs	r5, #3
    6958:	2484      	movs	r4, #132	; 0x84
    695a:	0064      	lsls	r4, r4, #1
    695c:	6806      	ldr	r6, [r0, #0]
    695e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    6960:	2a03      	cmp	r2, #3
    6962:	d109      	bne.n	6978 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    6964:	b249      	sxtb	r1, r1
    6966:	2900      	cmp	r1, #0
    6968:	db44      	blt.n	69f4 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    696a:	6802      	ldr	r2, [r0, #0]
    696c:	015b      	lsls	r3, r3, #5
    696e:	18d3      	adds	r3, r2, r3
    6970:	3309      	adds	r3, #9
    6972:	33ff      	adds	r3, #255	; 0xff
    6974:	2220      	movs	r2, #32
    6976:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    6978:	2000      	movs	r0, #0
    697a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    697c:	b24c      	sxtb	r4, r1
    697e:	2c00      	cmp	r4, #0
    6980:	db08      	blt.n	6994 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    6982:	015c      	lsls	r4, r3, #5
    6984:	6805      	ldr	r5, [r0, #0]
    6986:	46ac      	mov	ip, r5
    6988:	4464      	add	r4, ip
    698a:	3409      	adds	r4, #9
    698c:	34ff      	adds	r4, #255	; 0xff
    698e:	2501      	movs	r5, #1
    6990:	7025      	strb	r5, [r4, #0]
    6992:	e7e5      	b.n	6960 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    6994:	015c      	lsls	r4, r3, #5
    6996:	6805      	ldr	r5, [r0, #0]
    6998:	46ac      	mov	ip, r5
    699a:	4464      	add	r4, ip
    699c:	3409      	adds	r4, #9
    699e:	34ff      	adds	r4, #255	; 0xff
    69a0:	2502      	movs	r5, #2
    69a2:	7025      	strb	r5, [r4, #0]
    69a4:	e7dc      	b.n	6960 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    69a6:	2a01      	cmp	r2, #1
    69a8:	d11a      	bne.n	69e0 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    69aa:	2b00      	cmp	r3, #0
    69ac:	d105      	bne.n	69ba <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    69ae:	6802      	ldr	r2, [r0, #0]
    69b0:	210c      	movs	r1, #12
    69b2:	3309      	adds	r3, #9
    69b4:	33ff      	adds	r3, #255	; 0xff
    69b6:	54d1      	strb	r1, [r2, r3]
    69b8:	e7de      	b.n	6978 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    69ba:	b249      	sxtb	r1, r1
    69bc:	2900      	cmp	r1, #0
    69be:	db07      	blt.n	69d0 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    69c0:	6802      	ldr	r2, [r0, #0]
    69c2:	015b      	lsls	r3, r3, #5
    69c4:	18d3      	adds	r3, r2, r3
    69c6:	3309      	adds	r3, #9
    69c8:	33ff      	adds	r3, #255	; 0xff
    69ca:	2204      	movs	r2, #4
    69cc:	701a      	strb	r2, [r3, #0]
    69ce:	e7d3      	b.n	6978 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    69d0:	6802      	ldr	r2, [r0, #0]
    69d2:	015b      	lsls	r3, r3, #5
    69d4:	18d3      	adds	r3, r2, r3
    69d6:	3309      	adds	r3, #9
    69d8:	33ff      	adds	r3, #255	; 0xff
    69da:	2208      	movs	r2, #8
    69dc:	701a      	strb	r2, [r3, #0]
    69de:	e7cb      	b.n	6978 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    69e0:	2a02      	cmp	r2, #2
    69e2:	d1bd      	bne.n	6960 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    69e4:	6802      	ldr	r2, [r0, #0]
    69e6:	015b      	lsls	r3, r3, #5
    69e8:	18d3      	adds	r3, r2, r3
    69ea:	3309      	adds	r3, #9
    69ec:	33ff      	adds	r3, #255	; 0xff
    69ee:	2210      	movs	r2, #16
    69f0:	701a      	strb	r2, [r3, #0]
    69f2:	e7c1      	b.n	6978 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    69f4:	6802      	ldr	r2, [r0, #0]
    69f6:	015b      	lsls	r3, r3, #5
    69f8:	18d3      	adds	r3, r2, r3
    69fa:	3309      	adds	r3, #9
    69fc:	33ff      	adds	r3, #255	; 0xff
    69fe:	2240      	movs	r2, #64	; 0x40
    6a00:	701a      	strb	r2, [r3, #0]
    6a02:	e7b9      	b.n	6978 <usb_device_endpoint_disable_callback+0x40>
    6a04:	0000af98 	.word	0x0000af98

00006a08 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    6a08:	2300      	movs	r3, #0
    6a0a:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    6a0c:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    6a0e:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    6a10:	3301      	adds	r3, #1
    6a12:	70c3      	strb	r3, [r0, #3]
}
    6a14:	4770      	bx	lr
	...

00006a18 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    6a18:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    6a1a:	780c      	ldrb	r4, [r1, #0]
    6a1c:	230f      	movs	r3, #15
    6a1e:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    6a20:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    6a22:	78ca      	ldrb	r2, [r1, #3]
    6a24:	2a04      	cmp	r2, #4
    6a26:	d870      	bhi.n	6b0a <usb_device_endpoint_set_config+0xf2>
    6a28:	0092      	lsls	r2, r2, #2
    6a2a:	4d89      	ldr	r5, [pc, #548]	; (6c50 <usb_device_endpoint_set_config+0x238>)
    6a2c:	58aa      	ldr	r2, [r5, r2]
    6a2e:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    6a30:	6802      	ldr	r2, [r0, #0]
    6a32:	3308      	adds	r3, #8
    6a34:	015b      	lsls	r3, r3, #5
    6a36:	2100      	movs	r1, #0
    6a38:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    6a3a:	2200      	movs	r2, #0
    6a3c:	e082      	b.n	6b44 <usb_device_endpoint_set_config+0x12c>
    6a3e:	015c      	lsls	r4, r3, #5
    6a40:	6802      	ldr	r2, [r0, #0]
    6a42:	4694      	mov	ip, r2
    6a44:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    6a46:	2280      	movs	r2, #128	; 0x80
    6a48:	0052      	lsls	r2, r2, #1
    6a4a:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    6a4c:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    6a4e:	076d      	lsls	r5, r5, #29
    6a50:	d178      	bne.n	6b44 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    6a52:	32e4      	adds	r2, #228	; 0xe4
    6a54:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    6a56:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    6a58:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    6a5a:	422e      	tst	r6, r5
    6a5c:	d172      	bne.n	6b44 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    6a5e:	3d5f      	subs	r5, #95	; 0x5f
    6a60:	32e4      	adds	r2, #228	; 0xe4
    6a62:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6a64:	001a      	movs	r2, r3
    6a66:	3208      	adds	r2, #8
    6a68:	0152      	lsls	r2, r2, #5
    6a6a:	6804      	ldr	r4, [r0, #0]
    6a6c:	18a4      	adds	r4, r4, r2
    6a6e:	352f      	adds	r5, #47	; 0x2f
    6a70:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6a72:	6800      	ldr	r0, [r0, #0]
    6a74:	1882      	adds	r2, r0, r2
    6a76:	2080      	movs	r0, #128	; 0x80
    6a78:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    6a7a:	788a      	ldrb	r2, [r1, #2]
    6a7c:	2a00      	cmp	r2, #0
    6a7e:	d01f      	beq.n	6ac0 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6a80:	0158      	lsls	r0, r3, #5
    6a82:	4a74      	ldr	r2, [pc, #464]	; (6c54 <usb_device_endpoint_set_config+0x23c>)
    6a84:	1812      	adds	r2, r2, r0
    6a86:	6854      	ldr	r4, [r2, #4]
    6a88:	2080      	movs	r0, #128	; 0x80
    6a8a:	0600      	lsls	r0, r0, #24
    6a8c:	4304      	orrs	r4, r0
    6a8e:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6a90:	6954      	ldr	r4, [r2, #20]
    6a92:	4320      	orrs	r0, r4
    6a94:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6a96:	2507      	movs	r5, #7
    6a98:	784c      	ldrb	r4, [r1, #1]
    6a9a:	015a      	lsls	r2, r3, #5
    6a9c:	4b6d      	ldr	r3, [pc, #436]	; (6c54 <usb_device_endpoint_set_config+0x23c>)
    6a9e:	189b      	adds	r3, r3, r2
    6aa0:	6858      	ldr	r0, [r3, #4]
    6aa2:	402c      	ands	r4, r5
    6aa4:	0724      	lsls	r4, r4, #28
    6aa6:	4e6c      	ldr	r6, [pc, #432]	; (6c58 <usb_device_endpoint_set_config+0x240>)
    6aa8:	4030      	ands	r0, r6
    6aaa:	4320      	orrs	r0, r4
    6aac:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6aae:	7849      	ldrb	r1, [r1, #1]
    6ab0:	695a      	ldr	r2, [r3, #20]
    6ab2:	4029      	ands	r1, r5
    6ab4:	0709      	lsls	r1, r1, #28
    6ab6:	4032      	ands	r2, r6
    6ab8:	430a      	orrs	r2, r1
    6aba:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    6abc:	2200      	movs	r2, #0
    6abe:	e041      	b.n	6b44 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6ac0:	0158      	lsls	r0, r3, #5
    6ac2:	4a64      	ldr	r2, [pc, #400]	; (6c54 <usb_device_endpoint_set_config+0x23c>)
    6ac4:	1812      	adds	r2, r2, r0
    6ac6:	6850      	ldr	r0, [r2, #4]
    6ac8:	0040      	lsls	r0, r0, #1
    6aca:	0840      	lsrs	r0, r0, #1
    6acc:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6ace:	6950      	ldr	r0, [r2, #20]
    6ad0:	0040      	lsls	r0, r0, #1
    6ad2:	0840      	lsrs	r0, r0, #1
    6ad4:	6150      	str	r0, [r2, #20]
    6ad6:	e7de      	b.n	6a96 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    6ad8:	2c00      	cmp	r4, #0
    6ada:	db35      	blt.n	6b48 <usb_device_endpoint_set_config+0x130>
    6adc:	015d      	lsls	r5, r3, #5
    6ade:	6802      	ldr	r2, [r0, #0]
    6ae0:	4694      	mov	ip, r2
    6ae2:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6ae4:	2280      	movs	r2, #128	; 0x80
    6ae6:	0052      	lsls	r2, r2, #1
    6ae8:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    6aea:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6aec:	0776      	lsls	r6, r6, #29
    6aee:	d129      	bne.n	6b44 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    6af0:	2680      	movs	r6, #128	; 0x80
    6af2:	0076      	lsls	r6, r6, #1
    6af4:	5daa      	ldrb	r2, [r5, r6]
    6af6:	2702      	movs	r7, #2
    6af8:	433a      	orrs	r2, r7
    6afa:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6afc:	6802      	ldr	r2, [r0, #0]
    6afe:	0018      	movs	r0, r3
    6b00:	3008      	adds	r0, #8
    6b02:	0140      	lsls	r0, r0, #5
    6b04:	1812      	adds	r2, r2, r0
    6b06:	2040      	movs	r0, #64	; 0x40
    6b08:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    6b0a:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6b0c:	784f      	ldrb	r7, [r1, #1]
    6b0e:	005d      	lsls	r5, r3, #1
    6b10:	18ad      	adds	r5, r5, r2
    6b12:	012d      	lsls	r5, r5, #4
    6b14:	4e4f      	ldr	r6, [pc, #316]	; (6c54 <usb_device_endpoint_set_config+0x23c>)
    6b16:	1975      	adds	r5, r6, r5
    6b18:	6868      	ldr	r0, [r5, #4]
    6b1a:	2407      	movs	r4, #7
    6b1c:	403c      	ands	r4, r7
    6b1e:	0724      	lsls	r4, r4, #28
    6b20:	4e4d      	ldr	r6, [pc, #308]	; (6c58 <usb_device_endpoint_set_config+0x240>)
    6b22:	4030      	ands	r0, r6
    6b24:	4320      	orrs	r0, r4
    6b26:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    6b28:	7889      	ldrb	r1, [r1, #2]
    6b2a:	2900      	cmp	r1, #0
    6b2c:	d000      	beq.n	6b30 <usb_device_endpoint_set_config+0x118>
    6b2e:	e088      	b.n	6c42 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6b30:	005b      	lsls	r3, r3, #1
    6b32:	189b      	adds	r3, r3, r2
    6b34:	011b      	lsls	r3, r3, #4
    6b36:	4a47      	ldr	r2, [pc, #284]	; (6c54 <usb_device_endpoint_set_config+0x23c>)
    6b38:	18d3      	adds	r3, r2, r3
    6b3a:	685a      	ldr	r2, [r3, #4]
    6b3c:	0052      	lsls	r2, r2, #1
    6b3e:	0852      	lsrs	r2, r2, #1
    6b40:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    6b42:	2200      	movs	r2, #0
}
    6b44:	0010      	movs	r0, r2
    6b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b48:	015d      	lsls	r5, r3, #5
    6b4a:	6802      	ldr	r2, [r0, #0]
    6b4c:	4694      	mov	ip, r2
    6b4e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6b50:	2280      	movs	r2, #128	; 0x80
    6b52:	0052      	lsls	r2, r2, #1
    6b54:	5caf      	ldrb	r7, [r5, r2]
    6b56:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    6b58:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6b5a:	4237      	tst	r7, r6
    6b5c:	d1f2      	bne.n	6b44 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    6b5e:	3690      	adds	r6, #144	; 0x90
    6b60:	5daa      	ldrb	r2, [r5, r6]
    6b62:	2720      	movs	r7, #32
    6b64:	433a      	orrs	r2, r7
    6b66:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6b68:	6802      	ldr	r2, [r0, #0]
    6b6a:	0018      	movs	r0, r3
    6b6c:	3008      	adds	r0, #8
    6b6e:	0140      	lsls	r0, r0, #5
    6b70:	1812      	adds	r2, r2, r0
    6b72:	2080      	movs	r0, #128	; 0x80
    6b74:	7110      	strb	r0, [r2, #4]
    6b76:	e7c8      	b.n	6b0a <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    6b78:	2c00      	cmp	r4, #0
    6b7a:	db17      	blt.n	6bac <usb_device_endpoint_set_config+0x194>
    6b7c:	015d      	lsls	r5, r3, #5
    6b7e:	6802      	ldr	r2, [r0, #0]
    6b80:	4694      	mov	ip, r2
    6b82:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6b84:	2280      	movs	r2, #128	; 0x80
    6b86:	0052      	lsls	r2, r2, #1
    6b88:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    6b8a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6b8c:	0776      	lsls	r6, r6, #29
    6b8e:	d1d9      	bne.n	6b44 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    6b90:	2680      	movs	r6, #128	; 0x80
    6b92:	0076      	lsls	r6, r6, #1
    6b94:	5daa      	ldrb	r2, [r5, r6]
    6b96:	2703      	movs	r7, #3
    6b98:	433a      	orrs	r2, r7
    6b9a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6b9c:	6802      	ldr	r2, [r0, #0]
    6b9e:	0018      	movs	r0, r3
    6ba0:	3008      	adds	r0, #8
    6ba2:	0140      	lsls	r0, r0, #5
    6ba4:	1812      	adds	r2, r2, r0
    6ba6:	2040      	movs	r0, #64	; 0x40
    6ba8:	7150      	strb	r0, [r2, #5]
    6baa:	e7ae      	b.n	6b0a <usb_device_endpoint_set_config+0xf2>
    6bac:	015d      	lsls	r5, r3, #5
    6bae:	6802      	ldr	r2, [r0, #0]
    6bb0:	4694      	mov	ip, r2
    6bb2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6bb4:	2280      	movs	r2, #128	; 0x80
    6bb6:	0052      	lsls	r2, r2, #1
    6bb8:	5caf      	ldrb	r7, [r5, r2]
    6bba:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    6bbc:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6bbe:	4237      	tst	r7, r6
    6bc0:	d1c0      	bne.n	6b44 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    6bc2:	3690      	adds	r6, #144	; 0x90
    6bc4:	5daa      	ldrb	r2, [r5, r6]
    6bc6:	2730      	movs	r7, #48	; 0x30
    6bc8:	433a      	orrs	r2, r7
    6bca:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6bcc:	6802      	ldr	r2, [r0, #0]
    6bce:	0018      	movs	r0, r3
    6bd0:	3008      	adds	r0, #8
    6bd2:	0140      	lsls	r0, r0, #5
    6bd4:	1812      	adds	r2, r2, r0
    6bd6:	2080      	movs	r0, #128	; 0x80
    6bd8:	7110      	strb	r0, [r2, #4]
    6bda:	e796      	b.n	6b0a <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    6bdc:	2c00      	cmp	r4, #0
    6bde:	db17      	blt.n	6c10 <usb_device_endpoint_set_config+0x1f8>
    6be0:	015d      	lsls	r5, r3, #5
    6be2:	6802      	ldr	r2, [r0, #0]
    6be4:	4694      	mov	ip, r2
    6be6:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6be8:	2280      	movs	r2, #128	; 0x80
    6bea:	0052      	lsls	r2, r2, #1
    6bec:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    6bee:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6bf0:	0776      	lsls	r6, r6, #29
    6bf2:	d1a7      	bne.n	6b44 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    6bf4:	2680      	movs	r6, #128	; 0x80
    6bf6:	0076      	lsls	r6, r6, #1
    6bf8:	5daa      	ldrb	r2, [r5, r6]
    6bfa:	2704      	movs	r7, #4
    6bfc:	433a      	orrs	r2, r7
    6bfe:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6c00:	6802      	ldr	r2, [r0, #0]
    6c02:	0018      	movs	r0, r3
    6c04:	3008      	adds	r0, #8
    6c06:	0140      	lsls	r0, r0, #5
    6c08:	1812      	adds	r2, r2, r0
    6c0a:	2040      	movs	r0, #64	; 0x40
    6c0c:	7150      	strb	r0, [r2, #5]
    6c0e:	e77c      	b.n	6b0a <usb_device_endpoint_set_config+0xf2>
    6c10:	015d      	lsls	r5, r3, #5
    6c12:	6802      	ldr	r2, [r0, #0]
    6c14:	4694      	mov	ip, r2
    6c16:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6c18:	2280      	movs	r2, #128	; 0x80
    6c1a:	0052      	lsls	r2, r2, #1
    6c1c:	5caf      	ldrb	r7, [r5, r2]
    6c1e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    6c20:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6c22:	4237      	tst	r7, r6
    6c24:	d000      	beq.n	6c28 <usb_device_endpoint_set_config+0x210>
    6c26:	e78d      	b.n	6b44 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    6c28:	3690      	adds	r6, #144	; 0x90
    6c2a:	5daa      	ldrb	r2, [r5, r6]
    6c2c:	2740      	movs	r7, #64	; 0x40
    6c2e:	433a      	orrs	r2, r7
    6c30:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6c32:	6802      	ldr	r2, [r0, #0]
    6c34:	0018      	movs	r0, r3
    6c36:	3008      	adds	r0, #8
    6c38:	0140      	lsls	r0, r0, #5
    6c3a:	1812      	adds	r2, r2, r0
    6c3c:	2080      	movs	r0, #128	; 0x80
    6c3e:	7110      	strb	r0, [r2, #4]
    6c40:	e763      	b.n	6b0a <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6c42:	6869      	ldr	r1, [r5, #4]
    6c44:	2380      	movs	r3, #128	; 0x80
    6c46:	061b      	lsls	r3, r3, #24
    6c48:	430b      	orrs	r3, r1
    6c4a:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    6c4c:	2200      	movs	r2, #0
    6c4e:	e779      	b.n	6b44 <usb_device_endpoint_set_config+0x12c>
    6c50:	0000af74 	.word	0x0000af74
    6c54:	20001938 	.word	0x20001938
    6c58:	8fffffff 	.word	0x8fffffff

00006c5c <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6c5c:	230f      	movs	r3, #15
    6c5e:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    6c60:	b249      	sxtb	r1, r1
    6c62:	2900      	cmp	r1, #0
    6c64:	db09      	blt.n	6c7a <usb_device_endpoint_is_configured+0x1e>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    6c66:	6802      	ldr	r2, [r0, #0]
    6c68:	3308      	adds	r3, #8
    6c6a:	015b      	lsls	r3, r3, #5
    6c6c:	5c98      	ldrb	r0, [r3, r2]
    6c6e:	0740      	lsls	r0, r0, #29
    6c70:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    6c72:	1e43      	subs	r3, r0, #1
    6c74:	4198      	sbcs	r0, r3
    6c76:	b2c0      	uxtb	r0, r0
}
    6c78:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    6c7a:	6802      	ldr	r2, [r0, #0]
    6c7c:	3308      	adds	r3, #8
    6c7e:	015b      	lsls	r3, r3, #5
    6c80:	5c98      	ldrb	r0, [r3, r2]
    6c82:	0640      	lsls	r0, r0, #25
    6c84:	0f40      	lsrs	r0, r0, #29
    6c86:	e7f4      	b.n	6c72 <usb_device_endpoint_is_configured+0x16>

00006c88 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    6c88:	230f      	movs	r3, #15
    6c8a:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    6c8c:	b249      	sxtb	r1, r1
    6c8e:	2900      	cmp	r1, #0
    6c90:	db0a      	blt.n	6ca8 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6c92:	3308      	adds	r3, #8
    6c94:	015b      	lsls	r3, r3, #5
    6c96:	6802      	ldr	r2, [r0, #0]
    6c98:	18d2      	adds	r2, r2, r3
    6c9a:	2140      	movs	r1, #64	; 0x40
    6c9c:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    6c9e:	6802      	ldr	r2, [r0, #0]
    6ca0:	18d3      	adds	r3, r2, r3
    6ca2:	2201      	movs	r2, #1
    6ca4:	71da      	strb	r2, [r3, #7]
	}
}
    6ca6:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6ca8:	3308      	adds	r3, #8
    6caa:	015b      	lsls	r3, r3, #5
    6cac:	6802      	ldr	r2, [r0, #0]
    6cae:	18d2      	adds	r2, r2, r3
    6cb0:	2180      	movs	r1, #128	; 0x80
    6cb2:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    6cb4:	6802      	ldr	r2, [r0, #0]
    6cb6:	18d3      	adds	r3, r2, r3
    6cb8:	2202      	movs	r2, #2
    6cba:	71da      	strb	r2, [r3, #7]
    6cbc:	e7f3      	b.n	6ca6 <usb_device_endpoint_abort_job+0x1e>

00006cbe <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6cbe:	230f      	movs	r3, #15
    6cc0:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    6cc2:	b249      	sxtb	r1, r1
    6cc4:	2900      	cmp	r1, #0
    6cc6:	db07      	blt.n	6cd8 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    6cc8:	6802      	ldr	r2, [r0, #0]
    6cca:	3308      	adds	r3, #8
    6ccc:	015b      	lsls	r3, r3, #5
    6cce:	18d3      	adds	r3, r2, r3
    6cd0:	7998      	ldrb	r0, [r3, #6]
    6cd2:	06c0      	lsls	r0, r0, #27
    6cd4:	0fc0      	lsrs	r0, r0, #31
	}
}
    6cd6:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    6cd8:	6802      	ldr	r2, [r0, #0]
    6cda:	3308      	adds	r3, #8
    6cdc:	015b      	lsls	r3, r3, #5
    6cde:	18d3      	adds	r3, r2, r3
    6ce0:	7998      	ldrb	r0, [r3, #6]
    6ce2:	0680      	lsls	r0, r0, #26
    6ce4:	0fc0      	lsrs	r0, r0, #31
    6ce6:	e7f6      	b.n	6cd6 <usb_device_endpoint_is_halted+0x18>

00006ce8 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6ce8:	230f      	movs	r3, #15
    6cea:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    6cec:	b249      	sxtb	r1, r1
    6cee:	2900      	cmp	r1, #0
    6cf0:	db06      	blt.n	6d00 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    6cf2:	6802      	ldr	r2, [r0, #0]
    6cf4:	3308      	adds	r3, #8
    6cf6:	015b      	lsls	r3, r3, #5
    6cf8:	18d3      	adds	r3, r2, r3
    6cfa:	2210      	movs	r2, #16
    6cfc:	715a      	strb	r2, [r3, #5]
	}
}
    6cfe:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    6d00:	6802      	ldr	r2, [r0, #0]
    6d02:	3308      	adds	r3, #8
    6d04:	015b      	lsls	r3, r3, #5
    6d06:	18d3      	adds	r3, r2, r3
    6d08:	2220      	movs	r2, #32
    6d0a:	715a      	strb	r2, [r3, #5]
    6d0c:	e7f7      	b.n	6cfe <usb_device_endpoint_set_halt+0x16>

00006d0e <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    6d0e:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6d10:	230f      	movs	r3, #15
    6d12:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    6d14:	b249      	sxtb	r1, r1
    6d16:	2900      	cmp	r1, #0
    6d18:	db1d      	blt.n	6d56 <usb_device_endpoint_clear_halt+0x48>
    6d1a:	0159      	lsls	r1, r3, #5
    6d1c:	6802      	ldr	r2, [r0, #0]
    6d1e:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    6d20:	2483      	movs	r4, #131	; 0x83
    6d22:	0064      	lsls	r4, r4, #1
    6d24:	5d14      	ldrb	r4, [r2, r4]
    6d26:	06e4      	lsls	r4, r4, #27
    6d28:	d514      	bpl.n	6d54 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    6d2a:	2510      	movs	r5, #16
    6d2c:	2482      	movs	r4, #130	; 0x82
    6d2e:	0064      	lsls	r4, r4, #1
    6d30:	5515      	strb	r5, [r2, r4]
    6d32:	6802      	ldr	r2, [r0, #0]
    6d34:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    6d36:	2108      	movs	r1, #8
    6d38:	31ff      	adds	r1, #255	; 0xff
    6d3a:	5c51      	ldrb	r1, [r2, r1]
    6d3c:	0689      	lsls	r1, r1, #26
    6d3e:	d509      	bpl.n	6d54 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    6d40:	3ce4      	subs	r4, #228	; 0xe4
    6d42:	2108      	movs	r1, #8
    6d44:	31ff      	adds	r1, #255	; 0xff
    6d46:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    6d48:	6802      	ldr	r2, [r0, #0]
    6d4a:	3308      	adds	r3, #8
    6d4c:	015b      	lsls	r3, r3, #5
    6d4e:	18d3      	adds	r3, r2, r3
    6d50:	2201      	movs	r2, #1
    6d52:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    6d54:	bd30      	pop	{r4, r5, pc}
    6d56:	0159      	lsls	r1, r3, #5
    6d58:	6802      	ldr	r2, [r0, #0]
    6d5a:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    6d5c:	2483      	movs	r4, #131	; 0x83
    6d5e:	0064      	lsls	r4, r4, #1
    6d60:	5d14      	ldrb	r4, [r2, r4]
    6d62:	06a4      	lsls	r4, r4, #26
    6d64:	d5f6      	bpl.n	6d54 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    6d66:	2520      	movs	r5, #32
    6d68:	2482      	movs	r4, #130	; 0x82
    6d6a:	0064      	lsls	r4, r4, #1
    6d6c:	5515      	strb	r5, [r2, r4]
    6d6e:	6802      	ldr	r2, [r0, #0]
    6d70:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    6d72:	2108      	movs	r1, #8
    6d74:	31ff      	adds	r1, #255	; 0xff
    6d76:	5c51      	ldrb	r1, [r2, r1]
    6d78:	0649      	lsls	r1, r1, #25
    6d7a:	d5eb      	bpl.n	6d54 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    6d7c:	3cc4      	subs	r4, #196	; 0xc4
    6d7e:	2108      	movs	r1, #8
    6d80:	31ff      	adds	r1, #255	; 0xff
    6d82:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    6d84:	6802      	ldr	r2, [r0, #0]
    6d86:	3308      	adds	r3, #8
    6d88:	015b      	lsls	r3, r3, #5
    6d8a:	18d3      	adds	r3, r2, r3
    6d8c:	2202      	movs	r2, #2
    6d8e:	711a      	strb	r2, [r3, #4]
    6d90:	e7e0      	b.n	6d54 <usb_device_endpoint_clear_halt+0x46>
	...

00006d94 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    6d94:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    6d96:	000c      	movs	r4, r1
    6d98:	3408      	adds	r4, #8
    6d9a:	0164      	lsls	r4, r4, #5
    6d9c:	6805      	ldr	r5, [r0, #0]
    6d9e:	5d64      	ldrb	r4, [r4, r5]
    6da0:	0664      	lsls	r4, r4, #25
    6da2:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    6da4:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    6da6:	2c00      	cmp	r4, #0
    6da8:	d101      	bne.n	6dae <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    6daa:	0028      	movs	r0, r5
    6dac:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    6dae:	014c      	lsls	r4, r1, #5
    6db0:	4d0b      	ldr	r5, [pc, #44]	; (6de0 <usb_device_endpoint_write_buffer_job+0x4c>)
    6db2:	192d      	adds	r5, r5, r4
    6db4:	002c      	movs	r4, r5
    6db6:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6db8:	696a      	ldr	r2, [r5, #20]
    6dba:	4d0a      	ldr	r5, [pc, #40]	; (6de4 <usb_device_endpoint_write_buffer_job+0x50>)
    6dbc:	402a      	ands	r2, r5
    6dbe:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    6dc0:	6962      	ldr	r2, [r4, #20]
    6dc2:	049b      	lsls	r3, r3, #18
    6dc4:	0c9b      	lsrs	r3, r3, #18
    6dc6:	0b92      	lsrs	r2, r2, #14
    6dc8:	0392      	lsls	r2, r2, #14
    6dca:	4313      	orrs	r3, r2
    6dcc:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    6dce:	6803      	ldr	r3, [r0, #0]
    6dd0:	3108      	adds	r1, #8
    6dd2:	0149      	lsls	r1, r1, #5
    6dd4:	1859      	adds	r1, r3, r1
    6dd6:	2380      	movs	r3, #128	; 0x80
    6dd8:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    6dda:	2500      	movs	r5, #0
    6ddc:	e7e5      	b.n	6daa <usb_device_endpoint_write_buffer_job+0x16>
    6dde:	46c0      	nop			; (mov r8, r8)
    6de0:	20001938 	.word	0x20001938
    6de4:	f0003fff 	.word	0xf0003fff

00006de8 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    6de8:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    6dea:	000c      	movs	r4, r1
    6dec:	3408      	adds	r4, #8
    6dee:	0164      	lsls	r4, r4, #5
    6df0:	6805      	ldr	r5, [r0, #0]
    6df2:	5d64      	ldrb	r4, [r4, r5]
    6df4:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    6df6:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    6df8:	2c00      	cmp	r4, #0
    6dfa:	d101      	bne.n	6e00 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    6dfc:	0028      	movs	r0, r5
    6dfe:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    6e00:	4c0b      	ldr	r4, [pc, #44]	; (6e30 <usb_device_endpoint_read_buffer_job+0x48>)
    6e02:	014d      	lsls	r5, r1, #5
    6e04:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    6e06:	1962      	adds	r2, r4, r5
    6e08:	6854      	ldr	r4, [r2, #4]
    6e0a:	049b      	lsls	r3, r3, #18
    6e0c:	091b      	lsrs	r3, r3, #4
    6e0e:	4d09      	ldr	r5, [pc, #36]	; (6e34 <usb_device_endpoint_read_buffer_job+0x4c>)
    6e10:	402c      	ands	r4, r5
    6e12:	4323      	orrs	r3, r4
    6e14:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6e16:	6853      	ldr	r3, [r2, #4]
    6e18:	0b9b      	lsrs	r3, r3, #14
    6e1a:	039b      	lsls	r3, r3, #14
    6e1c:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    6e1e:	6803      	ldr	r3, [r0, #0]
    6e20:	3108      	adds	r1, #8
    6e22:	0149      	lsls	r1, r1, #5
    6e24:	1859      	adds	r1, r3, r1
    6e26:	2340      	movs	r3, #64	; 0x40
    6e28:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    6e2a:	2500      	movs	r5, #0
    6e2c:	e7e6      	b.n	6dfc <usb_device_endpoint_read_buffer_job+0x14>
    6e2e:	46c0      	nop			; (mov r8, r8)
    6e30:	20001938 	.word	0x20001938
    6e34:	f0003fff 	.word	0xf0003fff

00006e38 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    6e38:	4b09      	ldr	r3, [pc, #36]	; (6e60 <usb_device_endpoint_setup_buffer_job+0x28>)
    6e3a:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    6e3c:	685a      	ldr	r2, [r3, #4]
    6e3e:	4909      	ldr	r1, [pc, #36]	; (6e64 <usb_device_endpoint_setup_buffer_job+0x2c>)
    6e40:	4011      	ands	r1, r2
    6e42:	2280      	movs	r2, #128	; 0x80
    6e44:	0292      	lsls	r2, r2, #10
    6e46:	430a      	orrs	r2, r1
    6e48:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6e4a:	685a      	ldr	r2, [r3, #4]
    6e4c:	0b92      	lsrs	r2, r2, #14
    6e4e:	0392      	lsls	r2, r2, #14
    6e50:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    6e52:	6802      	ldr	r2, [r0, #0]
    6e54:	2140      	movs	r1, #64	; 0x40
    6e56:	2382      	movs	r3, #130	; 0x82
    6e58:	005b      	lsls	r3, r3, #1
    6e5a:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    6e5c:	2000      	movs	r0, #0
    6e5e:	4770      	bx	lr
    6e60:	20001938 	.word	0x20001938
    6e64:	f0003fff 	.word	0xf0003fff

00006e68 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    6e68:	6802      	ldr	r2, [r0, #0]
    6e6a:	7813      	ldrb	r3, [r2, #0]
    6e6c:	2102      	movs	r1, #2
    6e6e:	430b      	orrs	r3, r1
    6e70:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    6e72:	6802      	ldr	r2, [r0, #0]
    6e74:	7893      	ldrb	r3, [r2, #2]
    6e76:	2b02      	cmp	r3, #2
    6e78:	d0fc      	beq.n	6e74 <usb_enable+0xc>
}
    6e7a:	4770      	bx	lr

00006e7c <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    6e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e7e:	46de      	mov	lr, fp
    6e80:	4657      	mov	r7, sl
    6e82:	464e      	mov	r6, r9
    6e84:	4645      	mov	r5, r8
    6e86:	b5e0      	push	{r5, r6, r7, lr}
    6e88:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    6e8a:	4bc2      	ldr	r3, [pc, #776]	; (7194 <USB_Handler+0x318>)
    6e8c:	681f      	ldr	r7, [r3, #0]
    6e8e:	683d      	ldr	r5, [r7, #0]
    6e90:	782b      	ldrb	r3, [r5, #0]
    6e92:	09db      	lsrs	r3, r3, #7
    6e94:	d114      	bne.n	6ec0 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    6e96:	8c2e      	ldrh	r6, [r5, #32]
    6e98:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    6e9a:	2e00      	cmp	r6, #0
    6e9c:	d000      	beq.n	6ea0 <USB_Handler+0x24>
    6e9e:	e1a9      	b.n	71f4 <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    6ea0:	8bae      	ldrh	r6, [r5, #28]
    6ea2:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    6ea4:	23ab      	movs	r3, #171	; 0xab
    6ea6:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    6ea8:	5afb      	ldrh	r3, [r7, r3]
    6eaa:	22aa      	movs	r2, #170	; 0xaa
    6eac:	0052      	lsls	r2, r2, #1
    6eae:	5abd      	ldrh	r5, [r7, r2]
    6eb0:	401d      	ands	r5, r3
    6eb2:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    6eb4:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    6eb6:	4fb8      	ldr	r7, [pc, #736]	; (7198 <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    6eb8:	4bb6      	ldr	r3, [pc, #728]	; (7194 <USB_Handler+0x318>)
    6eba:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    6ebc:	4698      	mov	r8, r3
    6ebe:	e184      	b.n	71ca <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    6ec0:	8c2b      	ldrh	r3, [r5, #32]
    6ec2:	b29b      	uxth	r3, r3
    6ec4:	2b00      	cmp	r3, #0
    6ec6:	d100      	bne.n	6eca <USB_Handler+0x4e>
    6ec8:	e0de      	b.n	7088 <USB_Handler+0x20c>
    6eca:	8c28      	ldrh	r0, [r5, #32]
    6ecc:	b280      	uxth	r0, r0
    6ece:	4bb3      	ldr	r3, [pc, #716]	; (719c <USB_Handler+0x320>)
    6ed0:	4798      	blx	r3
    6ed2:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    6ed4:	281f      	cmp	r0, #31
    6ed6:	d900      	bls.n	6eda <USB_Handler+0x5e>
    6ed8:	e0d6      	b.n	7088 <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    6eda:	0003      	movs	r3, r0
    6edc:	3308      	adds	r3, #8
    6ede:	015b      	lsls	r3, r3, #5
    6ee0:	18ed      	adds	r5, r5, r3
    6ee2:	79ed      	ldrb	r5, [r5, #7]
    6ee4:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    6ee6:	07ab      	lsls	r3, r5, #30
    6ee8:	d041      	beq.n	6f6e <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6eea:	4aad      	ldr	r2, [pc, #692]	; (71a0 <USB_Handler+0x324>)
    6eec:	2301      	movs	r3, #1
    6eee:	4083      	lsls	r3, r0
    6ef0:	6811      	ldr	r1, [r2, #0]
    6ef2:	4399      	bics	r1, r3
    6ef4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6ef6:	0003      	movs	r3, r0
    6ef8:	3308      	adds	r3, #8
    6efa:	015b      	lsls	r3, r3, #5
    6efc:	683a      	ldr	r2, [r7, #0]
    6efe:	4694      	mov	ip, r2
    6f00:	4463      	add	r3, ip
    6f02:	2203      	movs	r2, #3
    6f04:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6f06:	183b      	adds	r3, r7, r0
    6f08:	33ae      	adds	r3, #174	; 0xae
    6f0a:	781b      	ldrb	r3, [r3, #0]
    6f0c:	07db      	lsls	r3, r3, #31
    6f0e:	d52e      	bpl.n	6f6e <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    6f10:	4ba4      	ldr	r3, [pc, #656]	; (71a4 <USB_Handler+0x328>)
    6f12:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    6f14:	683a      	ldr	r2, [r7, #0]
    6f16:	0003      	movs	r3, r0
    6f18:	3308      	adds	r3, #8
    6f1a:	015b      	lsls	r3, r3, #5
    6f1c:	5c9b      	ldrb	r3, [r3, r2]
    6f1e:	079b      	lsls	r3, r3, #30
    6f20:	0f9b      	lsrs	r3, r3, #30
    6f22:	2b01      	cmp	r3, #1
    6f24:	d100      	bne.n	6f28 <USB_Handler+0xac>
    6f26:	e081      	b.n	702c <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6f28:	0142      	lsls	r2, r0, #5
    6f2a:	4b9f      	ldr	r3, [pc, #636]	; (71a8 <USB_Handler+0x32c>)
    6f2c:	189b      	adds	r3, r3, r2
    6f2e:	685a      	ldr	r2, [r3, #4]
    6f30:	0112      	lsls	r2, r2, #4
    6f32:	0c92      	lsrs	r2, r2, #18
    6f34:	b290      	uxth	r0, r2
    6f36:	499b      	ldr	r1, [pc, #620]	; (71a4 <USB_Handler+0x328>)
    6f38:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6f3a:	685a      	ldr	r2, [r3, #4]
    6f3c:	0492      	lsls	r2, r2, #18
    6f3e:	0c92      	lsrs	r2, r2, #18
    6f40:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6f42:	685a      	ldr	r2, [r3, #4]
    6f44:	4999      	ldr	r1, [pc, #612]	; (71ac <USB_Handler+0x330>)
    6f46:	400a      	ands	r2, r1
    6f48:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    6f4a:	2800      	cmp	r0, #0
    6f4c:	d107      	bne.n	6f5e <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6f4e:	0162      	lsls	r2, r4, #5
    6f50:	4b95      	ldr	r3, [pc, #596]	; (71a8 <USB_Handler+0x32c>)
    6f52:	189b      	adds	r3, r3, r2
    6f54:	685b      	ldr	r3, [r3, #4]
    6f56:	049b      	lsls	r3, r3, #18
    6f58:	0c9b      	lsrs	r3, r3, #18
    6f5a:	4a92      	ldr	r2, [pc, #584]	; (71a4 <USB_Handler+0x328>)
    6f5c:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    6f5e:	4b8d      	ldr	r3, [pc, #564]	; (7194 <USB_Handler+0x318>)
    6f60:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    6f62:	1ca3      	adds	r3, r4, #2
    6f64:	011b      	lsls	r3, r3, #4
    6f66:	18c3      	adds	r3, r0, r3
    6f68:	685b      	ldr	r3, [r3, #4]
    6f6a:	498e      	ldr	r1, [pc, #568]	; (71a4 <USB_Handler+0x328>)
    6f6c:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    6f6e:	076b      	lsls	r3, r5, #29
    6f70:	d50e      	bpl.n	6f90 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6f72:	4a8b      	ldr	r2, [pc, #556]	; (71a0 <USB_Handler+0x324>)
    6f74:	2301      	movs	r3, #1
    6f76:	40a3      	lsls	r3, r4
    6f78:	6811      	ldr	r1, [r2, #0]
    6f7a:	4399      	bics	r1, r3
    6f7c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6f7e:	4b85      	ldr	r3, [pc, #532]	; (7194 <USB_Handler+0x318>)
    6f80:	681b      	ldr	r3, [r3, #0]
    6f82:	681b      	ldr	r3, [r3, #0]
    6f84:	0022      	movs	r2, r4
    6f86:	3208      	adds	r2, #8
    6f88:	0152      	lsls	r2, r2, #5
    6f8a:	189b      	adds	r3, r3, r2
    6f8c:	2204      	movs	r2, #4
    6f8e:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    6f90:	072b      	lsls	r3, r5, #28
    6f92:	d514      	bpl.n	6fbe <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6f94:	4a82      	ldr	r2, [pc, #520]	; (71a0 <USB_Handler+0x324>)
    6f96:	2301      	movs	r3, #1
    6f98:	40a3      	lsls	r3, r4
    6f9a:	6811      	ldr	r1, [r2, #0]
    6f9c:	4399      	bics	r1, r3
    6f9e:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6fa0:	4b7c      	ldr	r3, [pc, #496]	; (7194 <USB_Handler+0x318>)
    6fa2:	6818      	ldr	r0, [r3, #0]
    6fa4:	0023      	movs	r3, r4
    6fa6:	3308      	adds	r3, #8
    6fa8:	015b      	lsls	r3, r3, #5
    6faa:	6802      	ldr	r2, [r0, #0]
    6fac:	4694      	mov	ip, r2
    6fae:	4463      	add	r3, ip
    6fb0:	2208      	movs	r2, #8
    6fb2:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6fb4:	1903      	adds	r3, r0, r4
    6fb6:	33ae      	adds	r3, #174	; 0xae
    6fb8:	781b      	ldrb	r3, [r3, #0]
    6fba:	079b      	lsls	r3, r3, #30
    6fbc:	d447      	bmi.n	704e <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    6fbe:	06eb      	lsls	r3, r5, #27
    6fc0:	d514      	bpl.n	6fec <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6fc2:	4a77      	ldr	r2, [pc, #476]	; (71a0 <USB_Handler+0x324>)
    6fc4:	2301      	movs	r3, #1
    6fc6:	40a3      	lsls	r3, r4
    6fc8:	6811      	ldr	r1, [r2, #0]
    6fca:	4399      	bics	r1, r3
    6fcc:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6fce:	4b71      	ldr	r3, [pc, #452]	; (7194 <USB_Handler+0x318>)
    6fd0:	6818      	ldr	r0, [r3, #0]
    6fd2:	0023      	movs	r3, r4
    6fd4:	3308      	adds	r3, #8
    6fd6:	015b      	lsls	r3, r3, #5
    6fd8:	6802      	ldr	r2, [r0, #0]
    6fda:	4694      	mov	ip, r2
    6fdc:	4463      	add	r3, ip
    6fde:	2210      	movs	r2, #16
    6fe0:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6fe2:	1903      	adds	r3, r0, r4
    6fe4:	33ae      	adds	r3, #174	; 0xae
    6fe6:	781b      	ldrb	r3, [r3, #0]
    6fe8:	075b      	lsls	r3, r3, #29
    6fea:	d43e      	bmi.n	706a <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    6fec:	06ab      	lsls	r3, r5, #26
    6fee:	d400      	bmi.n	6ff2 <USB_Handler+0x176>
    6ff0:	e0b0      	b.n	7154 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6ff2:	4a6b      	ldr	r2, [pc, #428]	; (71a0 <USB_Handler+0x324>)
    6ff4:	2301      	movs	r3, #1
    6ff6:	40a3      	lsls	r3, r4
    6ff8:	6811      	ldr	r1, [r2, #0]
    6ffa:	4399      	bics	r1, r3
    6ffc:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6ffe:	4b65      	ldr	r3, [pc, #404]	; (7194 <USB_Handler+0x318>)
    7000:	6818      	ldr	r0, [r3, #0]
    7002:	0023      	movs	r3, r4
    7004:	3308      	adds	r3, #8
    7006:	015b      	lsls	r3, r3, #5
    7008:	6802      	ldr	r2, [r0, #0]
    700a:	4694      	mov	ip, r2
    700c:	4463      	add	r3, ip
    700e:	2220      	movs	r2, #32
    7010:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    7012:	1903      	adds	r3, r0, r4
    7014:	33ae      	adds	r3, #174	; 0xae
    7016:	781b      	ldrb	r3, [r3, #0]
    7018:	071b      	lsls	r3, r3, #28
    701a:	d400      	bmi.n	701e <USB_Handler+0x1a2>
    701c:	e09a      	b.n	7154 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    701e:	4961      	ldr	r1, [pc, #388]	; (71a4 <USB_Handler+0x328>)
    7020:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    7022:	0124      	lsls	r4, r4, #4
    7024:	1904      	adds	r4, r0, r4
    7026:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7028:	4798      	blx	r3
    702a:	e093      	b.n	7154 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    702c:	0142      	lsls	r2, r0, #5
    702e:	4b5e      	ldr	r3, [pc, #376]	; (71a8 <USB_Handler+0x32c>)
    7030:	189b      	adds	r3, r3, r2
    7032:	685a      	ldr	r2, [r3, #4]
    7034:	0492      	lsls	r2, r2, #18
    7036:	0c92      	lsrs	r2, r2, #18
    7038:	495a      	ldr	r1, [pc, #360]	; (71a4 <USB_Handler+0x328>)
    703a:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    703c:	685a      	ldr	r2, [r3, #4]
    703e:	0112      	lsls	r2, r2, #4
    7040:	0c92      	lsrs	r2, r2, #18
    7042:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    7044:	685a      	ldr	r2, [r3, #4]
    7046:	0b92      	lsrs	r2, r2, #14
    7048:	0392      	lsls	r2, r2, #14
    704a:	605a      	str	r2, [r3, #4]
    704c:	e787      	b.n	6f5e <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    704e:	4955      	ldr	r1, [pc, #340]	; (71a4 <USB_Handler+0x328>)
    7050:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    7052:	0162      	lsls	r2, r4, #5
    7054:	4b54      	ldr	r3, [pc, #336]	; (71a8 <USB_Handler+0x32c>)
    7056:	189b      	adds	r3, r3, r2
    7058:	89db      	ldrh	r3, [r3, #14]
    705a:	221f      	movs	r2, #31
    705c:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    705e:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    7060:	0123      	lsls	r3, r4, #4
    7062:	18c3      	adds	r3, r0, r3
    7064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7066:	4798      	blx	r3
    7068:	e7a9      	b.n	6fbe <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    706a:	494e      	ldr	r1, [pc, #312]	; (71a4 <USB_Handler+0x328>)
    706c:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    706e:	0162      	lsls	r2, r4, #5
    7070:	4b4d      	ldr	r3, [pc, #308]	; (71a8 <USB_Handler+0x32c>)
    7072:	189b      	adds	r3, r3, r2
    7074:	685b      	ldr	r3, [r3, #4]
    7076:	011b      	lsls	r3, r3, #4
    7078:	0c9b      	lsrs	r3, r3, #18
    707a:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    707c:	0123      	lsls	r3, r4, #4
    707e:	18c3      	adds	r3, r0, r3
    7080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7082:	2100      	movs	r1, #0
    7084:	4798      	blx	r3
    7086:	e7b1      	b.n	6fec <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    7088:	8bac      	ldrh	r4, [r5, #28]
    708a:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    708c:	0763      	lsls	r3, r4, #29
    708e:	d505      	bpl.n	709c <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    7090:	2304      	movs	r3, #4
    7092:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    7094:	33a1      	adds	r3, #161	; 0xa1
    7096:	5cfb      	ldrb	r3, [r7, r3]
    7098:	07db      	lsls	r3, r3, #31
    709a:	d462      	bmi.n	7162 <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    709c:	0723      	lsls	r3, r4, #28
    709e:	d50b      	bpl.n	70b8 <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    70a0:	2200      	movs	r2, #0
    70a2:	4b3f      	ldr	r3, [pc, #252]	; (71a0 <USB_Handler+0x324>)
    70a4:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    70a6:	4b3b      	ldr	r3, [pc, #236]	; (7194 <USB_Handler+0x318>)
    70a8:	6818      	ldr	r0, [r3, #0]
    70aa:	2308      	movs	r3, #8
    70ac:	6802      	ldr	r2, [r0, #0]
    70ae:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    70b0:	339d      	adds	r3, #157	; 0x9d
    70b2:	5cc3      	ldrb	r3, [r0, r3]
    70b4:	079b      	lsls	r3, r3, #30
    70b6:	d458      	bmi.n	716a <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    70b8:	0663      	lsls	r3, r4, #25
    70ba:	d508      	bpl.n	70ce <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    70bc:	4b35      	ldr	r3, [pc, #212]	; (7194 <USB_Handler+0x318>)
    70be:	6818      	ldr	r0, [r3, #0]
    70c0:	2340      	movs	r3, #64	; 0x40
    70c2:	6802      	ldr	r2, [r0, #0]
    70c4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    70c6:	3365      	adds	r3, #101	; 0x65
    70c8:	5cc3      	ldrb	r3, [r0, r3]
    70ca:	06db      	lsls	r3, r3, #27
    70cc:	d450      	bmi.n	7170 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    70ce:	06a3      	lsls	r3, r4, #26
    70d0:	d508      	bpl.n	70e4 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    70d2:	4b30      	ldr	r3, [pc, #192]	; (7194 <USB_Handler+0x318>)
    70d4:	6818      	ldr	r0, [r3, #0]
    70d6:	2320      	movs	r3, #32
    70d8:	6802      	ldr	r2, [r0, #0]
    70da:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    70dc:	3385      	adds	r3, #133	; 0x85
    70de:	5cc3      	ldrb	r3, [r0, r3]
    70e0:	071b      	lsls	r3, r3, #28
    70e2:	d448      	bmi.n	7176 <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    70e4:	06e3      	lsls	r3, r4, #27
    70e6:	d508      	bpl.n	70fa <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    70e8:	4b2a      	ldr	r3, [pc, #168]	; (7194 <USB_Handler+0x318>)
    70ea:	6818      	ldr	r0, [r3, #0]
    70ec:	2310      	movs	r3, #16
    70ee:	6802      	ldr	r2, [r0, #0]
    70f0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    70f2:	3395      	adds	r3, #149	; 0x95
    70f4:	5cc3      	ldrb	r3, [r0, r3]
    70f6:	075b      	lsls	r3, r3, #29
    70f8:	d440      	bmi.n	717c <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    70fa:	0623      	lsls	r3, r4, #24
    70fc:	d50b      	bpl.n	7116 <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    70fe:	2200      	movs	r2, #0
    7100:	4b27      	ldr	r3, [pc, #156]	; (71a0 <USB_Handler+0x324>)
    7102:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    7104:	4b23      	ldr	r3, [pc, #140]	; (7194 <USB_Handler+0x318>)
    7106:	6818      	ldr	r0, [r3, #0]
    7108:	2380      	movs	r3, #128	; 0x80
    710a:	6802      	ldr	r2, [r0, #0]
    710c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    710e:	3325      	adds	r3, #37	; 0x25
    7110:	5cc3      	ldrb	r3, [r0, r3]
    7112:	069b      	lsls	r3, r3, #26
    7114:	d435      	bmi.n	7182 <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    7116:	05e3      	lsls	r3, r4, #23
    7118:	d50c      	bpl.n	7134 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    711a:	2200      	movs	r2, #0
    711c:	4b20      	ldr	r3, [pc, #128]	; (71a0 <USB_Handler+0x324>)
    711e:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    7120:	4b1c      	ldr	r3, [pc, #112]	; (7194 <USB_Handler+0x318>)
    7122:	6818      	ldr	r0, [r3, #0]
    7124:	2380      	movs	r3, #128	; 0x80
    7126:	005b      	lsls	r3, r3, #1
    7128:	6802      	ldr	r2, [r0, #0]
    712a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    712c:	3b5b      	subs	r3, #91	; 0x5b
    712e:	5cc3      	ldrb	r3, [r0, r3]
    7130:	065b      	lsls	r3, r3, #25
    7132:	d429      	bmi.n	7188 <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    7134:	05a3      	lsls	r3, r4, #22
    7136:	d50d      	bpl.n	7154 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    7138:	2200      	movs	r2, #0
    713a:	4b19      	ldr	r3, [pc, #100]	; (71a0 <USB_Handler+0x324>)
    713c:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    713e:	4b15      	ldr	r3, [pc, #84]	; (7194 <USB_Handler+0x318>)
    7140:	6818      	ldr	r0, [r3, #0]
    7142:	2380      	movs	r3, #128	; 0x80
    7144:	009b      	lsls	r3, r3, #2
    7146:	6802      	ldr	r2, [r0, #0]
    7148:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    714a:	3b5c      	subs	r3, #92	; 0x5c
    714c:	3bff      	subs	r3, #255	; 0xff
    714e:	5cc3      	ldrb	r3, [r0, r3]
    7150:	2b7f      	cmp	r3, #127	; 0x7f
    7152:	d81c      	bhi.n	718e <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    7154:	b003      	add	sp, #12
    7156:	bc3c      	pop	{r2, r3, r4, r5}
    7158:	4690      	mov	r8, r2
    715a:	4699      	mov	r9, r3
    715c:	46a2      	mov	sl, r4
    715e:	46ab      	mov	fp, r5
    7160:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    7162:	687b      	ldr	r3, [r7, #4]
    7164:	0038      	movs	r0, r7
    7166:	4798      	blx	r3
    7168:	e798      	b.n	709c <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    716a:	6883      	ldr	r3, [r0, #8]
    716c:	4798      	blx	r3
    716e:	e7a3      	b.n	70b8 <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    7170:	6943      	ldr	r3, [r0, #20]
    7172:	4798      	blx	r3
    7174:	e7ab      	b.n	70ce <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    7176:	6903      	ldr	r3, [r0, #16]
    7178:	4798      	blx	r3
    717a:	e7b3      	b.n	70e4 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    717c:	68c3      	ldr	r3, [r0, #12]
    717e:	4798      	blx	r3
    7180:	e7bb      	b.n	70fa <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    7182:	6983      	ldr	r3, [r0, #24]
    7184:	4798      	blx	r3
    7186:	e7c6      	b.n	7116 <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    7188:	69c3      	ldr	r3, [r0, #28]
    718a:	4798      	blx	r3
    718c:	e7d2      	b.n	7134 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    718e:	6a03      	ldr	r3, [r0, #32]
    7190:	4798      	blx	r3
    7192:	e7df      	b.n	7154 <USB_Handler+0x2d8>
    7194:	200002dc 	.word	0x200002dc
    7198:	0000af88 	.word	0x0000af88
    719c:	0000938d 	.word	0x0000938d
    71a0:	200002ec 	.word	0x200002ec
    71a4:	200002f0 	.word	0x200002f0
    71a8:	20001938 	.word	0x20001938
    71ac:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    71b0:	0023      	movs	r3, r4
    71b2:	332e      	adds	r3, #46	; 0x2e
    71b4:	009b      	lsls	r3, r3, #2
    71b6:	4642      	mov	r2, r8
    71b8:	6812      	ldr	r2, [r2, #0]
    71ba:	589b      	ldr	r3, [r3, r2]
    71bc:	499e      	ldr	r1, [pc, #632]	; (7438 <USB_Handler+0x5bc>)
    71be:	4642      	mov	r2, r8
    71c0:	6810      	ldr	r0, [r2, #0]
    71c2:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    71c4:	3401      	adds	r4, #1
    71c6:	2c07      	cmp	r4, #7
    71c8:	d0c4      	beq.n	7154 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    71ca:	0063      	lsls	r3, r4, #1
    71cc:	5bdb      	ldrh	r3, [r3, r7]
    71ce:	4233      	tst	r3, r6
    71d0:	d003      	beq.n	71da <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    71d2:	464a      	mov	r2, r9
    71d4:	6812      	ldr	r2, [r2, #0]
    71d6:	6812      	ldr	r2, [r2, #0]
    71d8:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    71da:	422b      	tst	r3, r5
    71dc:	d0f2      	beq.n	71c4 <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    71de:	2c06      	cmp	r4, #6
    71e0:	d1e6      	bne.n	71b0 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    71e2:	4b96      	ldr	r3, [pc, #600]	; (743c <USB_Handler+0x5c0>)
    71e4:	891b      	ldrh	r3, [r3, #8]
    71e6:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    71e8:	2280      	movs	r2, #128	; 0x80
    71ea:	0052      	lsls	r2, r2, #1
    71ec:	4013      	ands	r3, r2
    71ee:	4a92      	ldr	r2, [pc, #584]	; (7438 <USB_Handler+0x5bc>)
    71f0:	6013      	str	r3, [r2, #0]
    71f2:	e7dd      	b.n	71b0 <USB_Handler+0x334>
    71f4:	003c      	movs	r4, r7
    71f6:	3459      	adds	r4, #89	; 0x59
    71f8:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    71fa:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    71fc:	2201      	movs	r2, #1
    71fe:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    7200:	325f      	adds	r2, #95	; 0x5f
    7202:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    7204:	3a50      	subs	r2, #80	; 0x50
    7206:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    7208:	3a0d      	subs	r2, #13
    720a:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    720c:	46b8      	mov	r8, r7
    720e:	002f      	movs	r7, r5
    7210:	e0b9      	b.n	7386 <USB_Handler+0x50a>
    7212:	002a      	movs	r2, r5
    7214:	003d      	movs	r5, r7
    7216:	4647      	mov	r7, r8
    7218:	4690      	mov	r8, r2
    721a:	015b      	lsls	r3, r3, #5
    721c:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    721e:	2308      	movs	r3, #8
    7220:	33ff      	adds	r3, #255	; 0xff
    7222:	5ceb      	ldrb	r3, [r5, r3]
    7224:	065b      	lsls	r3, r3, #25
    7226:	d516      	bpl.n	7256 <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    7228:	2240      	movs	r2, #64	; 0x40
    722a:	2308      	movs	r3, #8
    722c:	33ff      	adds	r3, #255	; 0xff
    722e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    7230:	3b88      	subs	r3, #136	; 0x88
    7232:	3bff      	subs	r3, #255	; 0xff
    7234:	4642      	mov	r2, r8
    7236:	4313      	orrs	r3, r2
    7238:	4a81      	ldr	r2, [pc, #516]	; (7440 <USB_Handler+0x5c4>)
    723a:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    723c:	2360      	movs	r3, #96	; 0x60
    723e:	420b      	tst	r3, r1
    7240:	d100      	bne.n	7244 <USB_Handler+0x3c8>
    7242:	e787      	b.n	7154 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    7244:	9b01      	ldr	r3, [sp, #4]
    7246:	011b      	lsls	r3, r3, #4
    7248:	18fb      	adds	r3, r7, r3
    724a:	33e0      	adds	r3, #224	; 0xe0
    724c:	681b      	ldr	r3, [r3, #0]
    724e:	497c      	ldr	r1, [pc, #496]	; (7440 <USB_Handler+0x5c4>)
    7250:	0038      	movs	r0, r7
    7252:	4798      	blx	r3
    7254:	e77e      	b.n	7154 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    7256:	2308      	movs	r3, #8
    7258:	33ff      	adds	r3, #255	; 0xff
    725a:	5ceb      	ldrb	r3, [r5, r3]
    725c:	069b      	lsls	r3, r3, #26
    725e:	d5ed      	bpl.n	723c <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    7260:	2220      	movs	r2, #32
    7262:	2308      	movs	r3, #8
    7264:	33ff      	adds	r3, #255	; 0xff
    7266:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    7268:	4b75      	ldr	r3, [pc, #468]	; (7440 <USB_Handler+0x5c4>)
    726a:	4642      	mov	r2, r8
    726c:	719a      	strb	r2, [r3, #6]
    726e:	e7e5      	b.n	723c <USB_Handler+0x3c0>
    7270:	003d      	movs	r5, r7
    7272:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    7274:	9a01      	ldr	r2, [sp, #4]
    7276:	0013      	movs	r3, r2
    7278:	3308      	adds	r3, #8
    727a:	015b      	lsls	r3, r3, #5
    727c:	18ed      	adds	r5, r5, r3
    727e:	2310      	movs	r3, #16
    7280:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    7282:	18bb      	adds	r3, r7, r2
    7284:	3361      	adds	r3, #97	; 0x61
    7286:	33ff      	adds	r3, #255	; 0xff
    7288:	781b      	ldrb	r3, [r3, #0]
    728a:	06db      	lsls	r3, r3, #27
    728c:	d400      	bmi.n	7290 <USB_Handler+0x414>
    728e:	e761      	b.n	7154 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    7290:	0010      	movs	r0, r2
    7292:	0152      	lsls	r2, r2, #5
    7294:	4b69      	ldr	r3, [pc, #420]	; (743c <USB_Handler+0x5c0>)
    7296:	189b      	adds	r3, r3, r2
    7298:	685b      	ldr	r3, [r3, #4]
    729a:	049b      	lsls	r3, r3, #18
    729c:	0c9b      	lsrs	r3, r3, #18
    729e:	4968      	ldr	r1, [pc, #416]	; (7440 <USB_Handler+0x5c4>)
    72a0:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    72a2:	0103      	lsls	r3, r0, #4
    72a4:	18fb      	adds	r3, r7, r3
    72a6:	33dc      	adds	r3, #220	; 0xdc
    72a8:	681b      	ldr	r3, [r3, #0]
    72aa:	4640      	mov	r0, r8
    72ac:	4798      	blx	r3
    72ae:	e751      	b.n	7154 <USB_Handler+0x2d8>
    72b0:	002a      	movs	r2, r5
    72b2:	003d      	movs	r5, r7
    72b4:	4647      	mov	r7, r8
    72b6:	4690      	mov	r8, r2
    72b8:	015b      	lsls	r3, r3, #5
    72ba:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    72bc:	2308      	movs	r3, #8
    72be:	33ff      	adds	r3, #255	; 0xff
    72c0:	5ceb      	ldrb	r3, [r5, r3]
    72c2:	079b      	lsls	r3, r3, #30
    72c4:	d51e      	bpl.n	7304 <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    72c6:	2202      	movs	r2, #2
    72c8:	2308      	movs	r3, #8
    72ca:	33ff      	adds	r3, #255	; 0xff
    72cc:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    72ce:	485c      	ldr	r0, [pc, #368]	; (7440 <USB_Handler+0x5c4>)
    72d0:	3b88      	subs	r3, #136	; 0x88
    72d2:	3bff      	subs	r3, #255	; 0xff
    72d4:	4642      	mov	r2, r8
    72d6:	4313      	orrs	r3, r2
    72d8:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    72da:	9b01      	ldr	r3, [sp, #4]
    72dc:	015a      	lsls	r2, r3, #5
    72de:	4b57      	ldr	r3, [pc, #348]	; (743c <USB_Handler+0x5c0>)
    72e0:	189b      	adds	r3, r3, r2
    72e2:	3310      	adds	r3, #16
    72e4:	685b      	ldr	r3, [r3, #4]
    72e6:	049b      	lsls	r3, r3, #18
    72e8:	0c9b      	lsrs	r3, r3, #18
    72ea:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    72ec:	078b      	lsls	r3, r1, #30
    72ee:	d100      	bne.n	72f2 <USB_Handler+0x476>
    72f0:	e730      	b.n	7154 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    72f2:	9b01      	ldr	r3, [sp, #4]
    72f4:	330d      	adds	r3, #13
    72f6:	011b      	lsls	r3, r3, #4
    72f8:	18fb      	adds	r3, r7, r3
    72fa:	685b      	ldr	r3, [r3, #4]
    72fc:	4950      	ldr	r1, [pc, #320]	; (7440 <USB_Handler+0x5c4>)
    72fe:	0038      	movs	r0, r7
    7300:	4798      	blx	r3
    7302:	e727      	b.n	7154 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    7304:	2308      	movs	r3, #8
    7306:	33ff      	adds	r3, #255	; 0xff
    7308:	5ceb      	ldrb	r3, [r5, r3]
    730a:	07db      	lsls	r3, r3, #31
    730c:	d5ee      	bpl.n	72ec <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    730e:	2201      	movs	r2, #1
    7310:	2308      	movs	r3, #8
    7312:	33ff      	adds	r3, #255	; 0xff
    7314:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    7316:	484a      	ldr	r0, [pc, #296]	; (7440 <USB_Handler+0x5c4>)
    7318:	4643      	mov	r3, r8
    731a:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    731c:	9b01      	ldr	r3, [sp, #4]
    731e:	015b      	lsls	r3, r3, #5
    7320:	4a46      	ldr	r2, [pc, #280]	; (743c <USB_Handler+0x5c0>)
    7322:	18d2      	adds	r2, r2, r3
    7324:	6853      	ldr	r3, [r2, #4]
    7326:	049b      	lsls	r3, r3, #18
    7328:	0c9b      	lsrs	r3, r3, #18
    732a:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    732c:	6853      	ldr	r3, [r2, #4]
    732e:	011b      	lsls	r3, r3, #4
    7330:	0c9b      	lsrs	r3, r3, #18
    7332:	8083      	strh	r3, [r0, #4]
    7334:	e7da      	b.n	72ec <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    7336:	2208      	movs	r2, #8
    7338:	32ff      	adds	r2, #255	; 0xff
    733a:	5c9a      	ldrb	r2, [r3, r2]
    733c:	0752      	lsls	r2, r2, #29
    733e:	d56e      	bpl.n	741e <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    7340:	2004      	movs	r0, #4
    7342:	2208      	movs	r2, #8
    7344:	32ff      	adds	r2, #255	; 0xff
    7346:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    7348:	9801      	ldr	r0, [sp, #4]
    734a:	0142      	lsls	r2, r0, #5
    734c:	4b3b      	ldr	r3, [pc, #236]	; (743c <USB_Handler+0x5c0>)
    734e:	189b      	adds	r3, r3, r2
    7350:	7a9b      	ldrb	r3, [r3, #10]
    7352:	079b      	lsls	r3, r3, #30
    7354:	d505      	bpl.n	7362 <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    7356:	4b39      	ldr	r3, [pc, #228]	; (743c <USB_Handler+0x5c0>)
    7358:	189b      	adds	r3, r3, r2
    735a:	7a9a      	ldrb	r2, [r3, #10]
    735c:	2002      	movs	r0, #2
    735e:	4382      	bics	r2, r0
    7360:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    7362:	4b37      	ldr	r3, [pc, #220]	; (7440 <USB_Handler+0x5c4>)
    7364:	4642      	mov	r2, r8
    7366:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    7368:	9b01      	ldr	r3, [sp, #4]
    736a:	3308      	adds	r3, #8
    736c:	015b      	lsls	r3, r3, #5
    736e:	683a      	ldr	r2, [r7, #0]
    7370:	4694      	mov	ip, r2
    7372:	4463      	add	r3, ip
    7374:	79db      	ldrb	r3, [r3, #7]
    7376:	07db      	lsls	r3, r3, #31
    7378:	d551      	bpl.n	741e <USB_Handler+0x5a2>
    737a:	e6eb      	b.n	7154 <USB_Handler+0x2d8>
    737c:	3301      	adds	r3, #1
    737e:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    7380:	2b08      	cmp	r3, #8
    7382:	d100      	bne.n	7386 <USB_Handler+0x50a>
    7384:	e6e6      	b.n	7154 <USB_Handler+0x2d8>
    7386:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    7388:	9301      	str	r3, [sp, #4]
    738a:	0032      	movs	r2, r6
    738c:	411a      	asrs	r2, r3
    738e:	4661      	mov	r1, ip
    7390:	4211      	tst	r1, r2
    7392:	d0f3      	beq.n	737c <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    7394:	001a      	movs	r2, r3
    7396:	3208      	adds	r2, #8
    7398:	0152      	lsls	r2, r2, #5
    739a:	18ba      	adds	r2, r7, r2
    739c:	79d2      	ldrb	r2, [r2, #7]
    739e:	b2d2      	uxtb	r2, r2
    73a0:	7a21      	ldrb	r1, [r4, #8]
    73a2:	4011      	ands	r1, r2
    73a4:	7820      	ldrb	r0, [r4, #0]
    73a6:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    73a8:	4648      	mov	r0, r9
    73aa:	4210      	tst	r0, r2
    73ac:	d000      	beq.n	73b0 <USB_Handler+0x534>
    73ae:	e730      	b.n	7212 <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    73b0:	4650      	mov	r0, sl
    73b2:	4210      	tst	r0, r2
    73b4:	d000      	beq.n	73b8 <USB_Handler+0x53c>
    73b6:	e75b      	b.n	7270 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    73b8:	4658      	mov	r0, fp
    73ba:	4210      	tst	r0, r2
    73bc:	d000      	beq.n	73c0 <USB_Handler+0x544>
    73be:	e777      	b.n	72b0 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    73c0:	200c      	movs	r0, #12
    73c2:	4210      	tst	r0, r2
    73c4:	d0da      	beq.n	737c <USB_Handler+0x500>
    73c6:	002a      	movs	r2, r5
    73c8:	003d      	movs	r5, r7
    73ca:	4647      	mov	r7, r8
    73cc:	4690      	mov	r8, r2
    73ce:	015b      	lsls	r3, r3, #5
    73d0:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    73d2:	2208      	movs	r2, #8
    73d4:	32ff      	adds	r2, #255	; 0xff
    73d6:	5c9a      	ldrb	r2, [r3, r2]
    73d8:	0712      	lsls	r2, r2, #28
    73da:	d5ac      	bpl.n	7336 <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    73dc:	3804      	subs	r0, #4
    73de:	2208      	movs	r2, #8
    73e0:	32ff      	adds	r2, #255	; 0xff
    73e2:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    73e4:	9801      	ldr	r0, [sp, #4]
    73e6:	0142      	lsls	r2, r0, #5
    73e8:	4b14      	ldr	r3, [pc, #80]	; (743c <USB_Handler+0x5c0>)
    73ea:	189b      	adds	r3, r3, r2
    73ec:	7e9b      	ldrb	r3, [r3, #26]
    73ee:	079b      	lsls	r3, r3, #30
    73f0:	d505      	bpl.n	73fe <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    73f2:	4b12      	ldr	r3, [pc, #72]	; (743c <USB_Handler+0x5c0>)
    73f4:	189b      	adds	r3, r3, r2
    73f6:	7e9a      	ldrb	r2, [r3, #26]
    73f8:	2002      	movs	r0, #2
    73fa:	4382      	bics	r2, r0
    73fc:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    73fe:	2380      	movs	r3, #128	; 0x80
    7400:	425b      	negs	r3, r3
    7402:	4642      	mov	r2, r8
    7404:	4313      	orrs	r3, r2
    7406:	4a0e      	ldr	r2, [pc, #56]	; (7440 <USB_Handler+0x5c4>)
    7408:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    740a:	9b01      	ldr	r3, [sp, #4]
    740c:	3308      	adds	r3, #8
    740e:	015b      	lsls	r3, r3, #5
    7410:	683a      	ldr	r2, [r7, #0]
    7412:	4694      	mov	ip, r2
    7414:	4463      	add	r3, ip
    7416:	79db      	ldrb	r3, [r3, #7]
    7418:	079b      	lsls	r3, r3, #30
    741a:	d500      	bpl.n	741e <USB_Handler+0x5a2>
    741c:	e69a      	b.n	7154 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    741e:	230c      	movs	r3, #12
    7420:	420b      	tst	r3, r1
    7422:	d100      	bne.n	7426 <USB_Handler+0x5aa>
    7424:	e696      	b.n	7154 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    7426:	9b01      	ldr	r3, [sp, #4]
    7428:	011b      	lsls	r3, r3, #4
    742a:	18fb      	adds	r3, r7, r3
    742c:	33d8      	adds	r3, #216	; 0xd8
    742e:	681b      	ldr	r3, [r3, #0]
    7430:	4903      	ldr	r1, [pc, #12]	; (7440 <USB_Handler+0x5c4>)
    7432:	0038      	movs	r0, r7
    7434:	4798      	blx	r3
    7436:	e68d      	b.n	7154 <USB_Handler+0x2d8>
    7438:	200002e0 	.word	0x200002e0
    743c:	20001938 	.word	0x20001938
    7440:	200002e4 	.word	0x200002e4

00007444 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    7444:	2200      	movs	r2, #0
    7446:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    7448:	2301      	movs	r3, #1
    744a:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    744c:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    744e:	70c3      	strb	r3, [r0, #3]
}
    7450:	4770      	bx	lr
	...

00007454 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    7454:	b5f0      	push	{r4, r5, r6, r7, lr}
    7456:	46ce      	mov	lr, r9
    7458:	4647      	mov	r7, r8
    745a:	b580      	push	{r7, lr}
    745c:	b083      	sub	sp, #12
    745e:	0004      	movs	r4, r0
    7460:	000d      	movs	r5, r1
    7462:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    7464:	2300      	movs	r3, #0
    7466:	4a6e      	ldr	r2, [pc, #440]	; (7620 <usb_init+0x1cc>)
    7468:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    746a:	4a6e      	ldr	r2, [pc, #440]	; (7624 <usb_init+0x1d0>)
    746c:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    746e:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    7470:	496d      	ldr	r1, [pc, #436]	; (7628 <usb_init+0x1d4>)
    7472:	69ca      	ldr	r2, [r1, #28]
    7474:	2020      	movs	r0, #32
    7476:	4302      	orrs	r2, r0
    7478:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    747a:	af01      	add	r7, sp, #4
    747c:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    747e:	2201      	movs	r2, #1
    7480:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    7482:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    7484:	3306      	adds	r3, #6
    7486:	4699      	mov	r9, r3
    7488:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    748a:	0039      	movs	r1, r7
    748c:	3808      	subs	r0, #8
    748e:	4b67      	ldr	r3, [pc, #412]	; (762c <usb_init+0x1d8>)
    7490:	4698      	mov	r8, r3
    7492:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    7494:	464b      	mov	r3, r9
    7496:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    7498:	0039      	movs	r1, r7
    749a:	2019      	movs	r0, #25
    749c:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    749e:	78b3      	ldrb	r3, [r6, #2]
    74a0:	466a      	mov	r2, sp
    74a2:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    74a4:	4669      	mov	r1, sp
    74a6:	2006      	movs	r0, #6
    74a8:	4b61      	ldr	r3, [pc, #388]	; (7630 <usb_init+0x1dc>)
    74aa:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    74ac:	2006      	movs	r0, #6
    74ae:	4b61      	ldr	r3, [pc, #388]	; (7634 <usb_init+0x1e0>)
    74b0:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    74b2:	782b      	ldrb	r3, [r5, #0]
    74b4:	2201      	movs	r2, #1
    74b6:	4313      	orrs	r3, r2
    74b8:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    74ba:	78ab      	ldrb	r3, [r5, #2]
    74bc:	07db      	lsls	r3, r3, #31
    74be:	d4fc      	bmi.n	74ba <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    74c0:	4a5d      	ldr	r2, [pc, #372]	; (7638 <usb_init+0x1e4>)
    74c2:	78d3      	ldrb	r3, [r2, #3]
    74c4:	2103      	movs	r1, #3
    74c6:	438b      	bics	r3, r1
    74c8:	2102      	movs	r1, #2
    74ca:	430b      	orrs	r3, r1
    74cc:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    74ce:	78d3      	ldrb	r3, [r2, #3]
    74d0:	210c      	movs	r1, #12
    74d2:	438b      	bics	r3, r1
    74d4:	2108      	movs	r1, #8
    74d6:	430b      	orrs	r3, r1
    74d8:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    74da:	4b58      	ldr	r3, [pc, #352]	; (763c <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    74dc:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    74de:	039b      	lsls	r3, r3, #14
    74e0:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    74e2:	2b1f      	cmp	r3, #31
    74e4:	d100      	bne.n	74e8 <usb_init+0x94>
    74e6:	e08f      	b.n	7608 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    74e8:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    74ea:	019b      	lsls	r3, r3, #6
    74ec:	4954      	ldr	r1, [pc, #336]	; (7640 <usb_init+0x1ec>)
    74ee:	400a      	ands	r2, r1
    74f0:	4313      	orrs	r3, r2
    74f2:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    74f4:	4b51      	ldr	r3, [pc, #324]	; (763c <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    74f6:	681b      	ldr	r3, [r3, #0]
    74f8:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    74fa:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    74fc:	2b1f      	cmp	r3, #31
    74fe:	d100      	bne.n	7502 <usb_init+0xae>
    7500:	e084      	b.n	760c <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    7502:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    7504:	211f      	movs	r1, #31
    7506:	438a      	bics	r2, r1
    7508:	4313      	orrs	r3, r2
    750a:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    750c:	4b4b      	ldr	r3, [pc, #300]	; (763c <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    750e:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    7510:	019b      	lsls	r3, r3, #6
    7512:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    7514:	2b07      	cmp	r3, #7
    7516:	d100      	bne.n	751a <usb_init+0xc6>
    7518:	e07a      	b.n	7610 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    751a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    751c:	031b      	lsls	r3, r3, #12
    751e:	4949      	ldr	r1, [pc, #292]	; (7644 <usb_init+0x1f0>)
    7520:	400a      	ands	r2, r1
    7522:	4313      	orrs	r3, r2
    7524:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    7526:	7832      	ldrb	r2, [r6, #0]
    7528:	7829      	ldrb	r1, [r5, #0]
    752a:	01d2      	lsls	r2, r2, #7
    752c:	237f      	movs	r3, #127	; 0x7f
    752e:	400b      	ands	r3, r1
    7530:	4313      	orrs	r3, r2
    7532:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    7534:	7871      	ldrb	r1, [r6, #1]
    7536:	782b      	ldrb	r3, [r5, #0]
    7538:	2201      	movs	r2, #1
    753a:	400a      	ands	r2, r1
    753c:	0092      	lsls	r2, r2, #2
    753e:	2104      	movs	r1, #4
    7540:	438b      	bics	r3, r1
    7542:	4313      	orrs	r3, r2
    7544:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    7546:	4b40      	ldr	r3, [pc, #256]	; (7648 <usb_init+0x1f4>)
    7548:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    754a:	78f3      	ldrb	r3, [r6, #3]
    754c:	2b01      	cmp	r3, #1
    754e:	d061      	beq.n	7614 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    7550:	2b00      	cmp	r3, #0
    7552:	d106      	bne.n	7562 <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    7554:	6822      	ldr	r2, [r4, #0]
    7556:	8913      	ldrh	r3, [r2, #8]
    7558:	210c      	movs	r1, #12
    755a:	438b      	bics	r3, r1
    755c:	2104      	movs	r1, #4
    755e:	430b      	orrs	r3, r1
    7560:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    7562:	2280      	movs	r2, #128	; 0x80
    7564:	0052      	lsls	r2, r2, #1
    7566:	2100      	movs	r1, #0
    7568:	4837      	ldr	r0, [pc, #220]	; (7648 <usb_init+0x1f4>)
    756a:	4b38      	ldr	r3, [pc, #224]	; (764c <usb_init+0x1f8>)
    756c:	4798      	blx	r3
    756e:	1d23      	adds	r3, r4, #4
    7570:	0021      	movs	r1, r4
    7572:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    7574:	2200      	movs	r2, #0
    7576:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    7578:	428b      	cmp	r3, r1
    757a:	d1fc      	bne.n	7576 <usb_init+0x122>
    757c:	0021      	movs	r1, r4
    757e:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    7580:	2200      	movs	r2, #0
    7582:	601a      	str	r2, [r3, #0]
    7584:	605a      	str	r2, [r3, #4]
    7586:	609a      	str	r2, [r3, #8]
    7588:	60da      	str	r2, [r3, #12]
    758a:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    758c:	428b      	cmp	r3, r1
    758e:	d1f8      	bne.n	7582 <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    7590:	2300      	movs	r3, #0
    7592:	22a4      	movs	r2, #164	; 0xa4
    7594:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    7596:	3201      	adds	r2, #1
    7598:	54a3      	strb	r3, [r4, r2]
    759a:	0023      	movs	r3, r4
    759c:	33a6      	adds	r3, #166	; 0xa6
    759e:	0021      	movs	r1, r4
    75a0:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    75a2:	2200      	movs	r2, #0
    75a4:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    75a6:	721a      	strb	r2, [r3, #8]
    75a8:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    75aa:	4299      	cmp	r1, r3
    75ac:	d1fa      	bne.n	75a4 <usb_init+0x150>
    75ae:	0023      	movs	r3, r4
    75b0:	33b8      	adds	r3, #184	; 0xb8
    75b2:	0021      	movs	r1, r4
    75b4:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    75b6:	2200      	movs	r2, #0
    75b8:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    75ba:	428b      	cmp	r3, r1
    75bc:	d1fc      	bne.n	75b8 <usb_init+0x164>
    75be:	0021      	movs	r1, r4
    75c0:	3155      	adds	r1, #85	; 0x55
    75c2:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    75c4:	2200      	movs	r2, #0
    75c6:	601a      	str	r2, [r3, #0]
    75c8:	605a      	str	r2, [r3, #4]
    75ca:	609a      	str	r2, [r3, #8]
    75cc:	60da      	str	r2, [r3, #12]
    75ce:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    75d0:	428b      	cmp	r3, r1
    75d2:	d1f8      	bne.n	75c6 <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    75d4:	2300      	movs	r3, #0
    75d6:	22aa      	movs	r2, #170	; 0xaa
    75d8:	0052      	lsls	r2, r2, #1
    75da:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    75dc:	3202      	adds	r2, #2
    75de:	52a3      	strh	r3, [r4, r2]
    75e0:	0023      	movs	r3, r4
    75e2:	3359      	adds	r3, #89	; 0x59
    75e4:	33ff      	adds	r3, #255	; 0xff
    75e6:	3461      	adds	r4, #97	; 0x61
    75e8:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    75ea:	2200      	movs	r2, #0
    75ec:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    75ee:	721a      	strb	r2, [r3, #8]
    75f0:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    75f2:	42a3      	cmp	r3, r4
    75f4:	d1fa      	bne.n	75ec <usb_init+0x198>
    75f6:	2280      	movs	r2, #128	; 0x80
    75f8:	4b15      	ldr	r3, [pc, #84]	; (7650 <usb_init+0x1fc>)
    75fa:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    75fc:	2000      	movs	r0, #0
    75fe:	b003      	add	sp, #12
    7600:	bc0c      	pop	{r2, r3}
    7602:	4690      	mov	r8, r2
    7604:	4699      	mov	r9, r3
    7606:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    7608:	3b1a      	subs	r3, #26
    760a:	e76d      	b.n	74e8 <usb_init+0x94>
		pad_transp = 29;
    760c:	3b02      	subs	r3, #2
    760e:	e778      	b.n	7502 <usb_init+0xae>
		pad_trim = 3;
    7610:	3b04      	subs	r3, #4
    7612:	e782      	b.n	751a <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    7614:	6822      	ldr	r2, [r4, #0]
    7616:	8913      	ldrh	r3, [r2, #8]
    7618:	3108      	adds	r1, #8
    761a:	438b      	bics	r3, r1
    761c:	8113      	strh	r3, [r2, #8]
    761e:	e7a0      	b.n	7562 <usb_init+0x10e>
    7620:	200002ec 	.word	0x200002ec
    7624:	200002dc 	.word	0x200002dc
    7628:	40000400 	.word	0x40000400
    762c:	00008ee1 	.word	0x00008ee1
    7630:	00008de9 	.word	0x00008de9
    7634:	00008d5d 	.word	0x00008d5d
    7638:	41005000 	.word	0x41005000
    763c:	00806024 	.word	0x00806024
    7640:	fffff83f 	.word	0xfffff83f
    7644:	ffff8fff 	.word	0xffff8fff
    7648:	20001938 	.word	0x20001938
    764c:	00009653 	.word	0x00009653
    7650:	e000e100 	.word	0xe000e100

00007654 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7654:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    7656:	2a00      	cmp	r2, #0
    7658:	d001      	beq.n	765e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    765a:	0018      	movs	r0, r3
    765c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    765e:	008b      	lsls	r3, r1, #2
    7660:	4a06      	ldr	r2, [pc, #24]	; (767c <extint_register_callback+0x28>)
    7662:	589b      	ldr	r3, [r3, r2]
    7664:	2b00      	cmp	r3, #0
    7666:	d003      	beq.n	7670 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    7668:	4283      	cmp	r3, r0
    766a:	d005      	beq.n	7678 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    766c:	231d      	movs	r3, #29
    766e:	e7f4      	b.n	765a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    7670:	0089      	lsls	r1, r1, #2
    7672:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    7674:	2300      	movs	r3, #0
    7676:	e7f0      	b.n	765a <extint_register_callback+0x6>
		return STATUS_OK;
    7678:	2300      	movs	r3, #0
    767a:	e7ee      	b.n	765a <extint_register_callback+0x6>
    767c:	20000378 	.word	0x20000378

00007680 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7680:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    7682:	2900      	cmp	r1, #0
    7684:	d001      	beq.n	768a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    7686:	0018      	movs	r0, r3
    7688:	4770      	bx	lr
		return NULL;
    768a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    768c:	281f      	cmp	r0, #31
    768e:	d800      	bhi.n	7692 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    7690:	4a02      	ldr	r2, [pc, #8]	; (769c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    7692:	2301      	movs	r3, #1
    7694:	4083      	lsls	r3, r0
    7696:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    7698:	2300      	movs	r3, #0
    769a:	e7f4      	b.n	7686 <extint_chan_enable_callback+0x6>
    769c:	40001800 	.word	0x40001800

000076a0 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    76a0:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    76a2:	2900      	cmp	r1, #0
    76a4:	d001      	beq.n	76aa <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    76a6:	0018      	movs	r0, r3
    76a8:	4770      	bx	lr
		return NULL;
    76aa:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    76ac:	281f      	cmp	r0, #31
    76ae:	d800      	bhi.n	76b2 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    76b0:	4a02      	ldr	r2, [pc, #8]	; (76bc <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    76b2:	2301      	movs	r3, #1
    76b4:	4083      	lsls	r3, r0
    76b6:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    76b8:	2300      	movs	r3, #0
    76ba:	e7f4      	b.n	76a6 <extint_chan_disable_callback+0x6>
    76bc:	40001800 	.word	0x40001800

000076c0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    76c0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    76c2:	2200      	movs	r2, #0
    76c4:	4b10      	ldr	r3, [pc, #64]	; (7708 <EIC_Handler+0x48>)
    76c6:	701a      	strb	r2, [r3, #0]
    76c8:	2300      	movs	r3, #0
    76ca:	4910      	ldr	r1, [pc, #64]	; (770c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    76cc:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    76ce:	4e10      	ldr	r6, [pc, #64]	; (7710 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    76d0:	4c0d      	ldr	r4, [pc, #52]	; (7708 <EIC_Handler+0x48>)
    76d2:	e00a      	b.n	76ea <EIC_Handler+0x2a>
		return eics[eic_index];
    76d4:	490d      	ldr	r1, [pc, #52]	; (770c <EIC_Handler+0x4c>)
    76d6:	e008      	b.n	76ea <EIC_Handler+0x2a>
    76d8:	7823      	ldrb	r3, [r4, #0]
    76da:	3301      	adds	r3, #1
    76dc:	b2db      	uxtb	r3, r3
    76de:	7023      	strb	r3, [r4, #0]
    76e0:	2b0f      	cmp	r3, #15
    76e2:	d810      	bhi.n	7706 <EIC_Handler+0x46>
		return NULL;
    76e4:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    76e6:	2b1f      	cmp	r3, #31
    76e8:	d9f4      	bls.n	76d4 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    76ea:	0028      	movs	r0, r5
    76ec:	4018      	ands	r0, r3
    76ee:	2201      	movs	r2, #1
    76f0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    76f2:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    76f4:	4210      	tst	r0, r2
    76f6:	d0ef      	beq.n	76d8 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    76f8:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    76fa:	009b      	lsls	r3, r3, #2
    76fc:	599b      	ldr	r3, [r3, r6]
    76fe:	2b00      	cmp	r3, #0
    7700:	d0ea      	beq.n	76d8 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    7702:	4798      	blx	r3
    7704:	e7e8      	b.n	76d8 <EIC_Handler+0x18>
			}
		}
	}
}
    7706:	bd70      	pop	{r4, r5, r6, pc}
    7708:	20001a38 	.word	0x20001a38
    770c:	40001800 	.word	0x40001800
    7710:	20000378 	.word	0x20000378

00007714 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    7714:	b5f0      	push	{r4, r5, r6, r7, lr}
    7716:	46de      	mov	lr, fp
    7718:	4657      	mov	r7, sl
    771a:	464e      	mov	r6, r9
    771c:	4645      	mov	r5, r8
    771e:	b5e0      	push	{r5, r6, r7, lr}
    7720:	b087      	sub	sp, #28
    7722:	4680      	mov	r8, r0
    7724:	9104      	str	r1, [sp, #16]
    7726:	0016      	movs	r6, r2
    7728:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    772a:	2200      	movs	r2, #0
    772c:	2300      	movs	r3, #0
    772e:	2100      	movs	r1, #0
    7730:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    7732:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    7734:	2001      	movs	r0, #1
    7736:	0021      	movs	r1, r4
    7738:	9600      	str	r6, [sp, #0]
    773a:	9701      	str	r7, [sp, #4]
    773c:	465c      	mov	r4, fp
    773e:	9403      	str	r4, [sp, #12]
    7740:	4644      	mov	r4, r8
    7742:	9405      	str	r4, [sp, #20]
    7744:	e013      	b.n	776e <long_division+0x5a>
    7746:	2420      	movs	r4, #32
    7748:	1a64      	subs	r4, r4, r1
    774a:	0005      	movs	r5, r0
    774c:	40e5      	lsrs	r5, r4
    774e:	46a8      	mov	r8, r5
    7750:	e014      	b.n	777c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    7752:	9c00      	ldr	r4, [sp, #0]
    7754:	9d01      	ldr	r5, [sp, #4]
    7756:	1b12      	subs	r2, r2, r4
    7758:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    775a:	465c      	mov	r4, fp
    775c:	464d      	mov	r5, r9
    775e:	432c      	orrs	r4, r5
    7760:	46a3      	mov	fp, r4
    7762:	9c03      	ldr	r4, [sp, #12]
    7764:	4645      	mov	r5, r8
    7766:	432c      	orrs	r4, r5
    7768:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    776a:	3901      	subs	r1, #1
    776c:	d325      	bcc.n	77ba <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    776e:	2420      	movs	r4, #32
    7770:	4264      	negs	r4, r4
    7772:	190c      	adds	r4, r1, r4
    7774:	d4e7      	bmi.n	7746 <long_division+0x32>
    7776:	0005      	movs	r5, r0
    7778:	40a5      	lsls	r5, r4
    777a:	46a8      	mov	r8, r5
    777c:	0004      	movs	r4, r0
    777e:	408c      	lsls	r4, r1
    7780:	46a1      	mov	r9, r4
		r = r << 1;
    7782:	1892      	adds	r2, r2, r2
    7784:	415b      	adcs	r3, r3
    7786:	0014      	movs	r4, r2
    7788:	001d      	movs	r5, r3
		if (n & bit_shift) {
    778a:	9e05      	ldr	r6, [sp, #20]
    778c:	464f      	mov	r7, r9
    778e:	403e      	ands	r6, r7
    7790:	46b4      	mov	ip, r6
    7792:	9e04      	ldr	r6, [sp, #16]
    7794:	4647      	mov	r7, r8
    7796:	403e      	ands	r6, r7
    7798:	46b2      	mov	sl, r6
    779a:	4666      	mov	r6, ip
    779c:	4657      	mov	r7, sl
    779e:	433e      	orrs	r6, r7
    77a0:	d003      	beq.n	77aa <long_division+0x96>
			r |= 0x01;
    77a2:	0006      	movs	r6, r0
    77a4:	4326      	orrs	r6, r4
    77a6:	0032      	movs	r2, r6
    77a8:	002b      	movs	r3, r5
		if (r >= d) {
    77aa:	9c00      	ldr	r4, [sp, #0]
    77ac:	9d01      	ldr	r5, [sp, #4]
    77ae:	429d      	cmp	r5, r3
    77b0:	d8db      	bhi.n	776a <long_division+0x56>
    77b2:	d1ce      	bne.n	7752 <long_division+0x3e>
    77b4:	4294      	cmp	r4, r2
    77b6:	d8d8      	bhi.n	776a <long_division+0x56>
    77b8:	e7cb      	b.n	7752 <long_division+0x3e>
    77ba:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    77bc:	4658      	mov	r0, fp
    77be:	0019      	movs	r1, r3
    77c0:	b007      	add	sp, #28
    77c2:	bc3c      	pop	{r2, r3, r4, r5}
    77c4:	4690      	mov	r8, r2
    77c6:	4699      	mov	r9, r3
    77c8:	46a2      	mov	sl, r4
    77ca:	46ab      	mov	fp, r5
    77cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000077ce <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    77ce:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    77d0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    77d2:	2340      	movs	r3, #64	; 0x40
    77d4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    77d6:	4281      	cmp	r1, r0
    77d8:	d202      	bcs.n	77e0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    77da:	0018      	movs	r0, r3
    77dc:	bd10      	pop	{r4, pc}
		baud_calculated++;
    77de:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    77e0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    77e2:	1c63      	adds	r3, r4, #1
    77e4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    77e6:	4288      	cmp	r0, r1
    77e8:	d9f9      	bls.n	77de <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    77ea:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    77ec:	2cff      	cmp	r4, #255	; 0xff
    77ee:	d8f4      	bhi.n	77da <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    77f0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    77f2:	2300      	movs	r3, #0
    77f4:	e7f1      	b.n	77da <_sercom_get_sync_baud_val+0xc>
	...

000077f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    77f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    77fa:	b083      	sub	sp, #12
    77fc:	000f      	movs	r7, r1
    77fe:	0016      	movs	r6, r2
    7800:	aa08      	add	r2, sp, #32
    7802:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    7804:	0004      	movs	r4, r0
    7806:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7808:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    780a:	42bc      	cmp	r4, r7
    780c:	d902      	bls.n	7814 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    780e:	0010      	movs	r0, r2
    7810:	b003      	add	sp, #12
    7812:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    7814:	2b00      	cmp	r3, #0
    7816:	d114      	bne.n	7842 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    7818:	0002      	movs	r2, r0
    781a:	0008      	movs	r0, r1
    781c:	2100      	movs	r1, #0
    781e:	4c19      	ldr	r4, [pc, #100]	; (7884 <_sercom_get_async_baud_val+0x8c>)
    7820:	47a0      	blx	r4
    7822:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    7824:	003a      	movs	r2, r7
    7826:	2300      	movs	r3, #0
    7828:	2000      	movs	r0, #0
    782a:	4c17      	ldr	r4, [pc, #92]	; (7888 <_sercom_get_async_baud_val+0x90>)
    782c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    782e:	2200      	movs	r2, #0
    7830:	2301      	movs	r3, #1
    7832:	1a12      	subs	r2, r2, r0
    7834:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    7836:	0c12      	lsrs	r2, r2, #16
    7838:	041b      	lsls	r3, r3, #16
    783a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    783c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    783e:	2200      	movs	r2, #0
    7840:	e7e5      	b.n	780e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    7842:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    7844:	2b01      	cmp	r3, #1
    7846:	d1f9      	bne.n	783c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    7848:	000a      	movs	r2, r1
    784a:	2300      	movs	r3, #0
    784c:	2100      	movs	r1, #0
    784e:	4c0d      	ldr	r4, [pc, #52]	; (7884 <_sercom_get_async_baud_val+0x8c>)
    7850:	47a0      	blx	r4
    7852:	0002      	movs	r2, r0
    7854:	000b      	movs	r3, r1
    7856:	9200      	str	r2, [sp, #0]
    7858:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    785a:	0038      	movs	r0, r7
    785c:	2100      	movs	r1, #0
    785e:	4c0a      	ldr	r4, [pc, #40]	; (7888 <_sercom_get_async_baud_val+0x90>)
    7860:	47a0      	blx	r4
    7862:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    7864:	2380      	movs	r3, #128	; 0x80
    7866:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7868:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    786a:	4298      	cmp	r0, r3
    786c:	d8cf      	bhi.n	780e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    786e:	0f79      	lsrs	r1, r7, #29
    7870:	00f8      	lsls	r0, r7, #3
    7872:	9a00      	ldr	r2, [sp, #0]
    7874:	9b01      	ldr	r3, [sp, #4]
    7876:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    7878:	00ea      	lsls	r2, r5, #3
    787a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    787c:	b2d2      	uxtb	r2, r2
    787e:	0352      	lsls	r2, r2, #13
    7880:	432a      	orrs	r2, r5
    7882:	e7db      	b.n	783c <_sercom_get_async_baud_val+0x44>
    7884:	0000940d 	.word	0x0000940d
    7888:	00007715 	.word	0x00007715

0000788c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    788c:	b510      	push	{r4, lr}
    788e:	b082      	sub	sp, #8
    7890:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    7892:	4b0e      	ldr	r3, [pc, #56]	; (78cc <sercom_set_gclk_generator+0x40>)
    7894:	781b      	ldrb	r3, [r3, #0]
    7896:	2b00      	cmp	r3, #0
    7898:	d007      	beq.n	78aa <sercom_set_gclk_generator+0x1e>
    789a:	2900      	cmp	r1, #0
    789c:	d105      	bne.n	78aa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    789e:	4b0b      	ldr	r3, [pc, #44]	; (78cc <sercom_set_gclk_generator+0x40>)
    78a0:	785b      	ldrb	r3, [r3, #1]
    78a2:	4283      	cmp	r3, r0
    78a4:	d010      	beq.n	78c8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    78a6:	201d      	movs	r0, #29
    78a8:	e00c      	b.n	78c4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    78aa:	a901      	add	r1, sp, #4
    78ac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    78ae:	2013      	movs	r0, #19
    78b0:	4b07      	ldr	r3, [pc, #28]	; (78d0 <sercom_set_gclk_generator+0x44>)
    78b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    78b4:	2013      	movs	r0, #19
    78b6:	4b07      	ldr	r3, [pc, #28]	; (78d4 <sercom_set_gclk_generator+0x48>)
    78b8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    78ba:	4b04      	ldr	r3, [pc, #16]	; (78cc <sercom_set_gclk_generator+0x40>)
    78bc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    78be:	2201      	movs	r2, #1
    78c0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    78c2:	2000      	movs	r0, #0
}
    78c4:	b002      	add	sp, #8
    78c6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    78c8:	2000      	movs	r0, #0
    78ca:	e7fb      	b.n	78c4 <sercom_set_gclk_generator+0x38>
    78cc:	200002f8 	.word	0x200002f8
    78d0:	00008de9 	.word	0x00008de9
    78d4:	00008d5d 	.word	0x00008d5d

000078d8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    78d8:	4b40      	ldr	r3, [pc, #256]	; (79dc <_sercom_get_default_pad+0x104>)
    78da:	4298      	cmp	r0, r3
    78dc:	d031      	beq.n	7942 <_sercom_get_default_pad+0x6a>
    78de:	d90a      	bls.n	78f6 <_sercom_get_default_pad+0x1e>
    78e0:	4b3f      	ldr	r3, [pc, #252]	; (79e0 <_sercom_get_default_pad+0x108>)
    78e2:	4298      	cmp	r0, r3
    78e4:	d04d      	beq.n	7982 <_sercom_get_default_pad+0xaa>
    78e6:	4b3f      	ldr	r3, [pc, #252]	; (79e4 <_sercom_get_default_pad+0x10c>)
    78e8:	4298      	cmp	r0, r3
    78ea:	d05a      	beq.n	79a2 <_sercom_get_default_pad+0xca>
    78ec:	4b3e      	ldr	r3, [pc, #248]	; (79e8 <_sercom_get_default_pad+0x110>)
    78ee:	4298      	cmp	r0, r3
    78f0:	d037      	beq.n	7962 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    78f2:	2000      	movs	r0, #0
}
    78f4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    78f6:	4b3d      	ldr	r3, [pc, #244]	; (79ec <_sercom_get_default_pad+0x114>)
    78f8:	4298      	cmp	r0, r3
    78fa:	d00c      	beq.n	7916 <_sercom_get_default_pad+0x3e>
    78fc:	4b3c      	ldr	r3, [pc, #240]	; (79f0 <_sercom_get_default_pad+0x118>)
    78fe:	4298      	cmp	r0, r3
    7900:	d1f7      	bne.n	78f2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7902:	2901      	cmp	r1, #1
    7904:	d017      	beq.n	7936 <_sercom_get_default_pad+0x5e>
    7906:	2900      	cmp	r1, #0
    7908:	d05d      	beq.n	79c6 <_sercom_get_default_pad+0xee>
    790a:	2902      	cmp	r1, #2
    790c:	d015      	beq.n	793a <_sercom_get_default_pad+0x62>
    790e:	2903      	cmp	r1, #3
    7910:	d015      	beq.n	793e <_sercom_get_default_pad+0x66>
	return 0;
    7912:	2000      	movs	r0, #0
    7914:	e7ee      	b.n	78f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7916:	2901      	cmp	r1, #1
    7918:	d007      	beq.n	792a <_sercom_get_default_pad+0x52>
    791a:	2900      	cmp	r1, #0
    791c:	d051      	beq.n	79c2 <_sercom_get_default_pad+0xea>
    791e:	2902      	cmp	r1, #2
    7920:	d005      	beq.n	792e <_sercom_get_default_pad+0x56>
    7922:	2903      	cmp	r1, #3
    7924:	d005      	beq.n	7932 <_sercom_get_default_pad+0x5a>
	return 0;
    7926:	2000      	movs	r0, #0
    7928:	e7e4      	b.n	78f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    792a:	4832      	ldr	r0, [pc, #200]	; (79f4 <_sercom_get_default_pad+0x11c>)
    792c:	e7e2      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    792e:	4832      	ldr	r0, [pc, #200]	; (79f8 <_sercom_get_default_pad+0x120>)
    7930:	e7e0      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    7932:	4832      	ldr	r0, [pc, #200]	; (79fc <_sercom_get_default_pad+0x124>)
    7934:	e7de      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    7936:	4832      	ldr	r0, [pc, #200]	; (7a00 <_sercom_get_default_pad+0x128>)
    7938:	e7dc      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    793a:	4832      	ldr	r0, [pc, #200]	; (7a04 <_sercom_get_default_pad+0x12c>)
    793c:	e7da      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    793e:	4832      	ldr	r0, [pc, #200]	; (7a08 <_sercom_get_default_pad+0x130>)
    7940:	e7d8      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    7942:	2901      	cmp	r1, #1
    7944:	d007      	beq.n	7956 <_sercom_get_default_pad+0x7e>
    7946:	2900      	cmp	r1, #0
    7948:	d03f      	beq.n	79ca <_sercom_get_default_pad+0xf2>
    794a:	2902      	cmp	r1, #2
    794c:	d005      	beq.n	795a <_sercom_get_default_pad+0x82>
    794e:	2903      	cmp	r1, #3
    7950:	d005      	beq.n	795e <_sercom_get_default_pad+0x86>
	return 0;
    7952:	2000      	movs	r0, #0
    7954:	e7ce      	b.n	78f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7956:	482d      	ldr	r0, [pc, #180]	; (7a0c <_sercom_get_default_pad+0x134>)
    7958:	e7cc      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    795a:	482d      	ldr	r0, [pc, #180]	; (7a10 <_sercom_get_default_pad+0x138>)
    795c:	e7ca      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    795e:	482d      	ldr	r0, [pc, #180]	; (7a14 <_sercom_get_default_pad+0x13c>)
    7960:	e7c8      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    7962:	2901      	cmp	r1, #1
    7964:	d007      	beq.n	7976 <_sercom_get_default_pad+0x9e>
    7966:	2900      	cmp	r1, #0
    7968:	d031      	beq.n	79ce <_sercom_get_default_pad+0xf6>
    796a:	2902      	cmp	r1, #2
    796c:	d005      	beq.n	797a <_sercom_get_default_pad+0xa2>
    796e:	2903      	cmp	r1, #3
    7970:	d005      	beq.n	797e <_sercom_get_default_pad+0xa6>
	return 0;
    7972:	2000      	movs	r0, #0
    7974:	e7be      	b.n	78f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7976:	4828      	ldr	r0, [pc, #160]	; (7a18 <_sercom_get_default_pad+0x140>)
    7978:	e7bc      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    797a:	4828      	ldr	r0, [pc, #160]	; (7a1c <_sercom_get_default_pad+0x144>)
    797c:	e7ba      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    797e:	4828      	ldr	r0, [pc, #160]	; (7a20 <_sercom_get_default_pad+0x148>)
    7980:	e7b8      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    7982:	2901      	cmp	r1, #1
    7984:	d007      	beq.n	7996 <_sercom_get_default_pad+0xbe>
    7986:	2900      	cmp	r1, #0
    7988:	d023      	beq.n	79d2 <_sercom_get_default_pad+0xfa>
    798a:	2902      	cmp	r1, #2
    798c:	d005      	beq.n	799a <_sercom_get_default_pad+0xc2>
    798e:	2903      	cmp	r1, #3
    7990:	d005      	beq.n	799e <_sercom_get_default_pad+0xc6>
	return 0;
    7992:	2000      	movs	r0, #0
    7994:	e7ae      	b.n	78f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7996:	4823      	ldr	r0, [pc, #140]	; (7a24 <_sercom_get_default_pad+0x14c>)
    7998:	e7ac      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    799a:	4823      	ldr	r0, [pc, #140]	; (7a28 <_sercom_get_default_pad+0x150>)
    799c:	e7aa      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    799e:	4823      	ldr	r0, [pc, #140]	; (7a2c <_sercom_get_default_pad+0x154>)
    79a0:	e7a8      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    79a2:	2901      	cmp	r1, #1
    79a4:	d007      	beq.n	79b6 <_sercom_get_default_pad+0xde>
    79a6:	2900      	cmp	r1, #0
    79a8:	d015      	beq.n	79d6 <_sercom_get_default_pad+0xfe>
    79aa:	2902      	cmp	r1, #2
    79ac:	d005      	beq.n	79ba <_sercom_get_default_pad+0xe2>
    79ae:	2903      	cmp	r1, #3
    79b0:	d005      	beq.n	79be <_sercom_get_default_pad+0xe6>
	return 0;
    79b2:	2000      	movs	r0, #0
    79b4:	e79e      	b.n	78f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    79b6:	481e      	ldr	r0, [pc, #120]	; (7a30 <_sercom_get_default_pad+0x158>)
    79b8:	e79c      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    79ba:	481e      	ldr	r0, [pc, #120]	; (7a34 <_sercom_get_default_pad+0x15c>)
    79bc:	e79a      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    79be:	481e      	ldr	r0, [pc, #120]	; (7a38 <_sercom_get_default_pad+0x160>)
    79c0:	e798      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    79c2:	481e      	ldr	r0, [pc, #120]	; (7a3c <_sercom_get_default_pad+0x164>)
    79c4:	e796      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    79c6:	2003      	movs	r0, #3
    79c8:	e794      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    79ca:	481d      	ldr	r0, [pc, #116]	; (7a40 <_sercom_get_default_pad+0x168>)
    79cc:	e792      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    79ce:	481d      	ldr	r0, [pc, #116]	; (7a44 <_sercom_get_default_pad+0x16c>)
    79d0:	e790      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    79d2:	481d      	ldr	r0, [pc, #116]	; (7a48 <_sercom_get_default_pad+0x170>)
    79d4:	e78e      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    79d6:	481d      	ldr	r0, [pc, #116]	; (7a4c <_sercom_get_default_pad+0x174>)
    79d8:	e78c      	b.n	78f4 <_sercom_get_default_pad+0x1c>
    79da:	46c0      	nop			; (mov r8, r8)
    79dc:	42001000 	.word	0x42001000
    79e0:	42001800 	.word	0x42001800
    79e4:	42001c00 	.word	0x42001c00
    79e8:	42001400 	.word	0x42001400
    79ec:	42000800 	.word	0x42000800
    79f0:	42000c00 	.word	0x42000c00
    79f4:	00050003 	.word	0x00050003
    79f8:	00060003 	.word	0x00060003
    79fc:	00070003 	.word	0x00070003
    7a00:	00010003 	.word	0x00010003
    7a04:	001e0003 	.word	0x001e0003
    7a08:	001f0003 	.word	0x001f0003
    7a0c:	00090003 	.word	0x00090003
    7a10:	000a0003 	.word	0x000a0003
    7a14:	000b0003 	.word	0x000b0003
    7a18:	00110003 	.word	0x00110003
    7a1c:	00120003 	.word	0x00120003
    7a20:	00130003 	.word	0x00130003
    7a24:	000d0003 	.word	0x000d0003
    7a28:	000e0003 	.word	0x000e0003
    7a2c:	000f0003 	.word	0x000f0003
    7a30:	00170003 	.word	0x00170003
    7a34:	00180003 	.word	0x00180003
    7a38:	00190003 	.word	0x00190003
    7a3c:	00040003 	.word	0x00040003
    7a40:	00080003 	.word	0x00080003
    7a44:	00100003 	.word	0x00100003
    7a48:	000c0003 	.word	0x000c0003
    7a4c:	00160003 	.word	0x00160003

00007a50 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    7a50:	b530      	push	{r4, r5, lr}
    7a52:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    7a54:	4b0b      	ldr	r3, [pc, #44]	; (7a84 <_sercom_get_sercom_inst_index+0x34>)
    7a56:	466a      	mov	r2, sp
    7a58:	cb32      	ldmia	r3!, {r1, r4, r5}
    7a5a:	c232      	stmia	r2!, {r1, r4, r5}
    7a5c:	cb32      	ldmia	r3!, {r1, r4, r5}
    7a5e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    7a60:	9b00      	ldr	r3, [sp, #0]
    7a62:	4283      	cmp	r3, r0
    7a64:	d00b      	beq.n	7a7e <_sercom_get_sercom_inst_index+0x2e>
    7a66:	2301      	movs	r3, #1
    7a68:	009a      	lsls	r2, r3, #2
    7a6a:	4669      	mov	r1, sp
    7a6c:	5852      	ldr	r2, [r2, r1]
    7a6e:	4282      	cmp	r2, r0
    7a70:	d006      	beq.n	7a80 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7a72:	3301      	adds	r3, #1
    7a74:	2b06      	cmp	r3, #6
    7a76:	d1f7      	bne.n	7a68 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    7a78:	2000      	movs	r0, #0
}
    7a7a:	b007      	add	sp, #28
    7a7c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7a7e:	2300      	movs	r3, #0
			return i;
    7a80:	b2d8      	uxtb	r0, r3
    7a82:	e7fa      	b.n	7a7a <_sercom_get_sercom_inst_index+0x2a>
    7a84:	0000af9c 	.word	0x0000af9c

00007a88 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    7a88:	b570      	push	{r4, r5, r6, lr}
    7a8a:	b082      	sub	sp, #8
    7a8c:	0005      	movs	r5, r0
    7a8e:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    7a90:	2200      	movs	r2, #0
    7a92:	466b      	mov	r3, sp
    7a94:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    7a96:	6806      	ldr	r6, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    7a98:	0030      	movs	r0, r6
    7a9a:	4b24      	ldr	r3, [pc, #144]	; (7b2c <spi_set_baudrate+0xa4>)
    7a9c:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7a9e:	231f      	movs	r3, #31
    7aa0:	4018      	ands	r0, r3
    7aa2:	3b1e      	subs	r3, #30
    7aa4:	4083      	lsls	r3, r0
    7aa6:	2280      	movs	r2, #128	; 0x80
    7aa8:	4921      	ldr	r1, [pc, #132]	; (7b30 <spi_set_baudrate+0xa8>)
    7aaa:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7aac:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    7aae:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    7ab0:	2b00      	cmp	r3, #0
    7ab2:	d1fc      	bne.n	7aae <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    7ab4:	338f      	adds	r3, #143	; 0x8f
    7ab6:	7533      	strb	r3, [r6, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    7ab8:	7633      	strb	r3, [r6, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7aba:	6833      	ldr	r3, [r6, #0]
    7abc:	2202      	movs	r2, #2
    7abe:	4393      	bics	r3, r2
    7ac0:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7ac2:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    7ac4:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    7ac6:	2b00      	cmp	r3, #0
    7ac8:	d1fc      	bne.n	7ac4 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7aca:	4b1a      	ldr	r3, [pc, #104]	; (7b34 <spi_set_baudrate+0xac>)
    7acc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7ace:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7ad0:	b2c0      	uxtb	r0, r0
    7ad2:	4b19      	ldr	r3, [pc, #100]	; (7b38 <spi_set_baudrate+0xb0>)
    7ad4:	4798      	blx	r3
    7ad6:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    7ad8:	466b      	mov	r3, sp
    7ada:	1d9a      	adds	r2, r3, #6
    7adc:	0020      	movs	r0, r4
    7ade:	4b17      	ldr	r3, [pc, #92]	; (7b3c <spi_set_baudrate+0xb4>)
    7ae0:	4798      	blx	r3
    7ae2:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    7ae4:	d003      	beq.n	7aee <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    7ae6:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    7ae8:	0020      	movs	r0, r4
    7aea:	b002      	add	sp, #8
    7aec:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    7aee:	466b      	mov	r3, sp
    7af0:	3306      	adds	r3, #6
    7af2:	781b      	ldrb	r3, [r3, #0]
    7af4:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7af6:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    7af8:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    7afa:	2b00      	cmp	r3, #0
    7afc:	d1fc      	bne.n	7af8 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    7afe:	0030      	movs	r0, r6
    7b00:	4b0a      	ldr	r3, [pc, #40]	; (7b2c <spi_set_baudrate+0xa4>)
    7b02:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7b04:	231f      	movs	r3, #31
    7b06:	4018      	ands	r0, r3
    7b08:	3b1e      	subs	r3, #30
    7b0a:	4083      	lsls	r3, r0
    7b0c:	4a08      	ldr	r2, [pc, #32]	; (7b30 <spi_set_baudrate+0xa8>)
    7b0e:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7b10:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    7b12:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    7b14:	2b00      	cmp	r3, #0
    7b16:	d1fc      	bne.n	7b12 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    7b18:	6833      	ldr	r3, [r6, #0]
    7b1a:	2202      	movs	r2, #2
    7b1c:	4313      	orrs	r3, r2
    7b1e:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7b20:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    7b22:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    7b24:	2b00      	cmp	r3, #0
    7b26:	d1fc      	bne.n	7b22 <spi_set_baudrate+0x9a>
    7b28:	e7de      	b.n	7ae8 <spi_set_baudrate+0x60>
    7b2a:	46c0      	nop			; (mov r8, r8)
    7b2c:	000025e5 	.word	0x000025e5
    7b30:	e000e100 	.word	0xe000e100
    7b34:	00007a51 	.word	0x00007a51
    7b38:	00008e05 	.word	0x00008e05
    7b3c:	000077cf 	.word	0x000077cf

00007b40 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    7b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b42:	b08b      	sub	sp, #44	; 0x2c
    7b44:	0005      	movs	r5, r0
    7b46:	000c      	movs	r4, r1
    7b48:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    7b4a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7b4c:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    7b4e:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7b50:	079b      	lsls	r3, r3, #30
    7b52:	d501      	bpl.n	7b58 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    7b54:	b00b      	add	sp, #44	; 0x2c
    7b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7b58:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    7b5a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7b5c:	07db      	lsls	r3, r3, #31
    7b5e:	d4f9      	bmi.n	7b54 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7b60:	0008      	movs	r0, r1
    7b62:	4b6f      	ldr	r3, [pc, #444]	; (7d20 <spi_init+0x1e0>)
    7b64:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    7b66:	4a6f      	ldr	r2, [pc, #444]	; (7d24 <spi_init+0x1e4>)
    7b68:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    7b6a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7b6c:	2301      	movs	r3, #1
    7b6e:	40bb      	lsls	r3, r7
    7b70:	430b      	orrs	r3, r1
    7b72:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    7b74:	a909      	add	r1, sp, #36	; 0x24
    7b76:	2724      	movs	r7, #36	; 0x24
    7b78:	5df3      	ldrb	r3, [r6, r7]
    7b7a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7b7c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7b7e:	b2c3      	uxtb	r3, r0
    7b80:	9301      	str	r3, [sp, #4]
    7b82:	0018      	movs	r0, r3
    7b84:	4b68      	ldr	r3, [pc, #416]	; (7d28 <spi_init+0x1e8>)
    7b86:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7b88:	9801      	ldr	r0, [sp, #4]
    7b8a:	4b68      	ldr	r3, [pc, #416]	; (7d2c <spi_init+0x1ec>)
    7b8c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7b8e:	5df0      	ldrb	r0, [r6, r7]
    7b90:	2100      	movs	r1, #0
    7b92:	4b67      	ldr	r3, [pc, #412]	; (7d30 <spi_init+0x1f0>)
    7b94:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    7b96:	7833      	ldrb	r3, [r6, #0]
    7b98:	2b01      	cmp	r3, #1
    7b9a:	d03f      	beq.n	7c1c <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    7b9c:	7833      	ldrb	r3, [r6, #0]
    7b9e:	2b00      	cmp	r3, #0
    7ba0:	d103      	bne.n	7baa <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    7ba2:	6823      	ldr	r3, [r4, #0]
    7ba4:	2208      	movs	r2, #8
    7ba6:	4313      	orrs	r3, r2
    7ba8:	6023      	str	r3, [r4, #0]
    7baa:	002b      	movs	r3, r5
    7bac:	330c      	adds	r3, #12
    7bae:	0029      	movs	r1, r5
    7bb0:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    7bb2:	2200      	movs	r2, #0
    7bb4:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    7bb6:	428b      	cmp	r3, r1
    7bb8:	d1fc      	bne.n	7bb4 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    7bba:	2300      	movs	r3, #0
    7bbc:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    7bbe:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    7bc0:	2400      	movs	r4, #0
    7bc2:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    7bc4:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    7bc6:	3336      	adds	r3, #54	; 0x36
    7bc8:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    7bca:	3301      	adds	r3, #1
    7bcc:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    7bce:	3301      	adds	r3, #1
    7bd0:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    7bd2:	3b35      	subs	r3, #53	; 0x35
    7bd4:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    7bd6:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    7bd8:	6828      	ldr	r0, [r5, #0]
    7bda:	4b51      	ldr	r3, [pc, #324]	; (7d20 <spi_init+0x1e0>)
    7bdc:	4798      	blx	r3
    7bde:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    7be0:	4954      	ldr	r1, [pc, #336]	; (7d34 <spi_init+0x1f4>)
    7be2:	4b55      	ldr	r3, [pc, #340]	; (7d38 <spi_init+0x1f8>)
    7be4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7be6:	00bf      	lsls	r7, r7, #2
    7be8:	4b54      	ldr	r3, [pc, #336]	; (7d3c <spi_init+0x1fc>)
    7bea:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7bec:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7bee:	ab04      	add	r3, sp, #16
    7bf0:	2280      	movs	r2, #128	; 0x80
    7bf2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7bf4:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7bf6:	3a7f      	subs	r2, #127	; 0x7f
    7bf8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7bfa:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    7bfc:	7833      	ldrb	r3, [r6, #0]
    7bfe:	2b00      	cmp	r3, #0
    7c00:	d102      	bne.n	7c08 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7c02:	2200      	movs	r2, #0
    7c04:	ab04      	add	r3, sp, #16
    7c06:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    7c08:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7c0a:	9305      	str	r3, [sp, #20]
    7c0c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    7c0e:	9306      	str	r3, [sp, #24]
    7c10:	6b33      	ldr	r3, [r6, #48]	; 0x30
    7c12:	9307      	str	r3, [sp, #28]
    7c14:	6b73      	ldr	r3, [r6, #52]	; 0x34
    7c16:	9308      	str	r3, [sp, #32]
    7c18:	2400      	movs	r4, #0
    7c1a:	e00b      	b.n	7c34 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    7c1c:	6823      	ldr	r3, [r4, #0]
    7c1e:	220c      	movs	r2, #12
    7c20:	4313      	orrs	r3, r2
    7c22:	6023      	str	r3, [r4, #0]
    7c24:	e7ba      	b.n	7b9c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7c26:	0038      	movs	r0, r7
    7c28:	4b45      	ldr	r3, [pc, #276]	; (7d40 <spi_init+0x200>)
    7c2a:	4798      	blx	r3
    7c2c:	e00a      	b.n	7c44 <spi_init+0x104>
    7c2e:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    7c30:	2c04      	cmp	r4, #4
    7c32:	d010      	beq.n	7c56 <spi_init+0x116>
    7c34:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7c36:	00a3      	lsls	r3, r4, #2
    7c38:	aa02      	add	r2, sp, #8
    7c3a:	200c      	movs	r0, #12
    7c3c:	1812      	adds	r2, r2, r0
    7c3e:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    7c40:	2800      	cmp	r0, #0
    7c42:	d0f0      	beq.n	7c26 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    7c44:	1c43      	adds	r3, r0, #1
    7c46:	d0f2      	beq.n	7c2e <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    7c48:	a904      	add	r1, sp, #16
    7c4a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7c4c:	0c00      	lsrs	r0, r0, #16
    7c4e:	b2c0      	uxtb	r0, r0
    7c50:	4b3c      	ldr	r3, [pc, #240]	; (7d44 <spi_init+0x204>)
    7c52:	4798      	blx	r3
    7c54:	e7eb      	b.n	7c2e <spi_init+0xee>
	module->mode             = config->mode;
    7c56:	7833      	ldrb	r3, [r6, #0]
    7c58:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    7c5a:	7c33      	ldrb	r3, [r6, #16]
    7c5c:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    7c5e:	7cb3      	ldrb	r3, [r6, #18]
    7c60:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    7c62:	7d33      	ldrb	r3, [r6, #20]
    7c64:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    7c66:	2200      	movs	r2, #0
    7c68:	ab02      	add	r3, sp, #8
    7c6a:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    7c6c:	7833      	ldrb	r3, [r6, #0]
    7c6e:	2b01      	cmp	r3, #1
    7c70:	d012      	beq.n	7c98 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    7c72:	7833      	ldrb	r3, [r6, #0]
    7c74:	2b00      	cmp	r3, #0
    7c76:	d126      	bne.n	7cc6 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    7c78:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    7c7a:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    7c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    7c7e:	7ff1      	ldrb	r1, [r6, #31]
    7c80:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    7c82:	7fb4      	ldrb	r4, [r6, #30]
    7c84:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    7c86:	4319      	orrs	r1, r3
    7c88:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    7c8a:	2320      	movs	r3, #32
    7c8c:	5cf3      	ldrb	r3, [r6, r3]
    7c8e:	2b00      	cmp	r3, #0
    7c90:	d01b      	beq.n	7cca <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    7c92:	2340      	movs	r3, #64	; 0x40
    7c94:	431a      	orrs	r2, r3
    7c96:	e018      	b.n	7cca <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7c98:	6828      	ldr	r0, [r5, #0]
    7c9a:	4b21      	ldr	r3, [pc, #132]	; (7d20 <spi_init+0x1e0>)
    7c9c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7c9e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7ca0:	b2c0      	uxtb	r0, r0
    7ca2:	4b29      	ldr	r3, [pc, #164]	; (7d48 <spi_init+0x208>)
    7ca4:	4798      	blx	r3
    7ca6:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    7ca8:	ab02      	add	r3, sp, #8
    7caa:	1d9a      	adds	r2, r3, #6
    7cac:	69b0      	ldr	r0, [r6, #24]
    7cae:	4b27      	ldr	r3, [pc, #156]	; (7d4c <spi_init+0x20c>)
    7cb0:	4798      	blx	r3
    7cb2:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    7cb4:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    7cb6:	2b00      	cmp	r3, #0
    7cb8:	d000      	beq.n	7cbc <spi_init+0x17c>
    7cba:	e74b      	b.n	7b54 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    7cbc:	ab02      	add	r3, sp, #8
    7cbe:	3306      	adds	r3, #6
    7cc0:	781b      	ldrb	r3, [r3, #0]
    7cc2:	733b      	strb	r3, [r7, #12]
    7cc4:	e7d5      	b.n	7c72 <spi_init+0x132>
	uint32_t ctrlb = 0;
    7cc6:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    7cc8:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    7cca:	6873      	ldr	r3, [r6, #4]
    7ccc:	68b1      	ldr	r1, [r6, #8]
    7cce:	430b      	orrs	r3, r1
    7cd0:	68f1      	ldr	r1, [r6, #12]
    7cd2:	430b      	orrs	r3, r1
    7cd4:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    7cd6:	7c31      	ldrb	r1, [r6, #16]
    7cd8:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    7cda:	7c71      	ldrb	r1, [r6, #17]
    7cdc:	2900      	cmp	r1, #0
    7cde:	d103      	bne.n	7ce8 <spi_init+0x1a8>
    7ce0:	491b      	ldr	r1, [pc, #108]	; (7d50 <spi_init+0x210>)
    7ce2:	7889      	ldrb	r1, [r1, #2]
    7ce4:	0789      	lsls	r1, r1, #30
    7ce6:	d501      	bpl.n	7cec <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    7ce8:	2180      	movs	r1, #128	; 0x80
    7cea:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    7cec:	7cb1      	ldrb	r1, [r6, #18]
    7cee:	2900      	cmp	r1, #0
    7cf0:	d002      	beq.n	7cf8 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    7cf2:	2180      	movs	r1, #128	; 0x80
    7cf4:	0289      	lsls	r1, r1, #10
    7cf6:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    7cf8:	7cf1      	ldrb	r1, [r6, #19]
    7cfa:	2900      	cmp	r1, #0
    7cfc:	d002      	beq.n	7d04 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    7cfe:	2180      	movs	r1, #128	; 0x80
    7d00:	0089      	lsls	r1, r1, #2
    7d02:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    7d04:	7d31      	ldrb	r1, [r6, #20]
    7d06:	2900      	cmp	r1, #0
    7d08:	d002      	beq.n	7d10 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    7d0a:	2180      	movs	r1, #128	; 0x80
    7d0c:	0189      	lsls	r1, r1, #6
    7d0e:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    7d10:	6839      	ldr	r1, [r7, #0]
    7d12:	430b      	orrs	r3, r1
    7d14:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    7d16:	687b      	ldr	r3, [r7, #4]
    7d18:	431a      	orrs	r2, r3
    7d1a:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    7d1c:	2000      	movs	r0, #0
    7d1e:	e719      	b.n	7b54 <spi_init+0x14>
    7d20:	00007a51 	.word	0x00007a51
    7d24:	40000400 	.word	0x40000400
    7d28:	00008de9 	.word	0x00008de9
    7d2c:	00008d5d 	.word	0x00008d5d
    7d30:	0000788d 	.word	0x0000788d
    7d34:	0000018d 	.word	0x0000018d
    7d38:	000025a9 	.word	0x000025a9
    7d3c:	200003bc 	.word	0x200003bc
    7d40:	000078d9 	.word	0x000078d9
    7d44:	00008ee1 	.word	0x00008ee1
    7d48:	00008e05 	.word	0x00008e05
    7d4c:	000077cf 	.word	0x000077cf
    7d50:	41002000 	.word	0x41002000

00007d54 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    7d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d56:	46d6      	mov	lr, sl
    7d58:	464f      	mov	r7, r9
    7d5a:	b580      	push	{r7, lr}
    7d5c:	b083      	sub	sp, #12
    7d5e:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    7d60:	2538      	movs	r5, #56	; 0x38
    7d62:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    7d64:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    7d66:	2e05      	cmp	r6, #5
    7d68:	d075      	beq.n	7e56 <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7d6a:	3512      	adds	r5, #18
	if (length == 0) {
    7d6c:	2a00      	cmp	r2, #0
    7d6e:	d072      	beq.n	7e56 <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
    7d70:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    7d72:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
    7d74:	2c00      	cmp	r4, #0
    7d76:	d06e      	beq.n	7e56 <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    7d78:	7944      	ldrb	r4, [r0, #5]
    7d7a:	2c00      	cmp	r4, #0
    7d7c:	d103      	bne.n	7d86 <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7d7e:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7d80:	7e25      	ldrb	r5, [r4, #24]
    7d82:	07a9      	lsls	r1, r5, #30
    7d84:	d40a      	bmi.n	7d9c <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    7d86:	3a01      	subs	r2, #1
    7d88:	b294      	uxth	r4, r2
    7d8a:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    7d8c:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    7d8e:	2102      	movs	r1, #2
    7d90:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    7d92:	2701      	movs	r7, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7d94:	05db      	lsls	r3, r3, #23
    7d96:	0ddb      	lsrs	r3, r3, #23
    7d98:	469a      	mov	sl, r3
    7d9a:	e037      	b.n	7e0c <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7d9c:	2502      	movs	r5, #2
    7d9e:	7625      	strb	r5, [r4, #24]
    7da0:	e7f1      	b.n	7d86 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7da2:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7da4:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    7da6:	423b      	tst	r3, r7
    7da8:	d0fc      	beq.n	7da4 <spi_read_buffer_wait+0x50>
    7daa:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    7dac:	423b      	tst	r3, r7
    7dae:	d009      	beq.n	7dc4 <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7db0:	4653      	mov	r3, sl
    7db2:	628b      	str	r3, [r1, #40]	; 0x28
    7db4:	e02d      	b.n	7e12 <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7db6:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
    7db8:	464d      	mov	r5, r9
    7dba:	422b      	tst	r3, r5
    7dbc:	d138      	bne.n	7e30 <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7dbe:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    7dc0:	4213      	tst	r3, r2
    7dc2:	d045      	beq.n	7e50 <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7dc4:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7dc6:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    7dc8:	4213      	tst	r3, r2
    7dca:	d0fc      	beq.n	7dc6 <spi_read_buffer_wait+0x72>
    7dcc:	7e0b      	ldrb	r3, [r1, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    7dce:	4213      	tst	r3, r2
    7dd0:	d040      	beq.n	7e54 <spi_read_buffer_wait+0x100>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7dd2:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    7dd4:	2500      	movs	r5, #0
    7dd6:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7dd8:	4213      	tst	r3, r2
    7dda:	d002      	beq.n	7de2 <spi_read_buffer_wait+0x8e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7ddc:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    7dde:	231e      	movs	r3, #30
    7de0:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7de2:	7983      	ldrb	r3, [r0, #6]
    7de4:	2b01      	cmp	r3, #1
    7de6:	d027      	beq.n	7e38 <spi_read_buffer_wait+0xe4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7de8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    7dea:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    7dec:	9901      	ldr	r1, [sp, #4]
    7dee:	2900      	cmp	r1, #0
    7df0:	d137      	bne.n	7e62 <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    7df2:	1c75      	adds	r5, r6, #1
    7df4:	b2ad      	uxth	r5, r5
    7df6:	4661      	mov	r1, ip
    7df8:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7dfa:	7981      	ldrb	r1, [r0, #6]
    7dfc:	2901      	cmp	r1, #1
    7dfe:	d01f      	beq.n	7e40 <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
    7e00:	002e      	movs	r6, r5
	while (length--) {
    7e02:	3c01      	subs	r4, #1
    7e04:	b2a4      	uxth	r4, r4
    7e06:	4b18      	ldr	r3, [pc, #96]	; (7e68 <spi_read_buffer_wait+0x114>)
    7e08:	429c      	cmp	r4, r3
    7e0a:	d01f      	beq.n	7e4c <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
    7e0c:	7943      	ldrb	r3, [r0, #5]
    7e0e:	2b01      	cmp	r3, #1
    7e10:	d0c7      	beq.n	7da2 <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
    7e12:	7943      	ldrb	r3, [r0, #5]
    7e14:	2b00      	cmp	r3, #0
    7e16:	d1d5      	bne.n	7dc4 <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7e18:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7e1a:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
    7e1c:	4213      	tst	r3, r2
    7e1e:	d1ca      	bne.n	7db6 <spi_read_buffer_wait+0x62>
    7e20:	4b12      	ldr	r3, [pc, #72]	; (7e6c <spi_read_buffer_wait+0x118>)
    7e22:	7e0d      	ldrb	r5, [r1, #24]
    7e24:	4215      	tst	r5, r2
    7e26:	d1c6      	bne.n	7db6 <spi_read_buffer_wait+0x62>
    7e28:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7e2a:	2b00      	cmp	r3, #0
    7e2c:	d1f9      	bne.n	7e22 <spi_read_buffer_wait+0xce>
    7e2e:	e7c2      	b.n	7db6 <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7e30:	2302      	movs	r3, #2
    7e32:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
    7e34:	2504      	movs	r5, #4
    7e36:	e00e      	b.n	7e56 <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7e38:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    7e3a:	05db      	lsls	r3, r3, #23
    7e3c:	0ddb      	lsrs	r3, r3, #23
    7e3e:	e7d5      	b.n	7dec <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
    7e40:	3602      	adds	r6, #2
    7e42:	b2b6      	uxth	r6, r6
    7e44:	0a1b      	lsrs	r3, r3, #8
    7e46:	4661      	mov	r1, ip
    7e48:	554b      	strb	r3, [r1, r5]
    7e4a:	e7da      	b.n	7e02 <spi_read_buffer_wait+0xae>
    7e4c:	9d01      	ldr	r5, [sp, #4]
    7e4e:	e002      	b.n	7e56 <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
    7e50:	2512      	movs	r5, #18
    7e52:	e000      	b.n	7e56 <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
    7e54:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
    7e56:	0028      	movs	r0, r5
    7e58:	b003      	add	sp, #12
    7e5a:	bc0c      	pop	{r2, r3}
    7e5c:	4691      	mov	r9, r2
    7e5e:	469a      	mov	sl, r3
    7e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e62:	9d01      	ldr	r5, [sp, #4]
    7e64:	e7f7      	b.n	7e56 <spi_read_buffer_wait+0x102>
    7e66:	46c0      	nop			; (mov r8, r8)
    7e68:	0000ffff 	.word	0x0000ffff
    7e6c:	00002710 	.word	0x00002710

00007e70 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    7e70:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    7e72:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    7e74:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    7e76:	2c01      	cmp	r4, #1
    7e78:	d001      	beq.n	7e7e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    7e7a:	0018      	movs	r0, r3
    7e7c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    7e7e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    7e80:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    7e82:	2c00      	cmp	r4, #0
    7e84:	d1f9      	bne.n	7e7a <spi_select_slave+0xa>
		if (select) {
    7e86:	2a00      	cmp	r2, #0
    7e88:	d058      	beq.n	7f3c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    7e8a:	784b      	ldrb	r3, [r1, #1]
    7e8c:	2b00      	cmp	r3, #0
    7e8e:	d044      	beq.n	7f1a <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7e90:	6803      	ldr	r3, [r0, #0]
    7e92:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    7e94:	07db      	lsls	r3, r3, #31
    7e96:	d410      	bmi.n	7eba <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    7e98:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7e9a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7e9c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7e9e:	2900      	cmp	r1, #0
    7ea0:	d104      	bne.n	7eac <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    7ea2:	0953      	lsrs	r3, r2, #5
    7ea4:	01db      	lsls	r3, r3, #7
    7ea6:	492e      	ldr	r1, [pc, #184]	; (7f60 <spi_select_slave+0xf0>)
    7ea8:	468c      	mov	ip, r1
    7eaa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7eac:	211f      	movs	r1, #31
    7eae:	4011      	ands	r1, r2
    7eb0:	2201      	movs	r2, #1
    7eb2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7eb4:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    7eb6:	2305      	movs	r3, #5
    7eb8:	e7df      	b.n	7e7a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7eba:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7ebc:	09d4      	lsrs	r4, r2, #7
		return NULL;
    7ebe:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7ec0:	2c00      	cmp	r4, #0
    7ec2:	d104      	bne.n	7ece <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    7ec4:	0953      	lsrs	r3, r2, #5
    7ec6:	01db      	lsls	r3, r3, #7
    7ec8:	4c25      	ldr	r4, [pc, #148]	; (7f60 <spi_select_slave+0xf0>)
    7eca:	46a4      	mov	ip, r4
    7ecc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7ece:	241f      	movs	r4, #31
    7ed0:	4014      	ands	r4, r2
    7ed2:	2201      	movs	r2, #1
    7ed4:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    7ed6:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7ed8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7eda:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    7edc:	07d2      	lsls	r2, r2, #31
    7ede:	d501      	bpl.n	7ee4 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7ee0:	788a      	ldrb	r2, [r1, #2]
    7ee2:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    7ee4:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    7ee6:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    7ee8:	2a00      	cmp	r2, #0
    7eea:	d1c6      	bne.n	7e7a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7eec:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    7eee:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7ef0:	7e13      	ldrb	r3, [r2, #24]
    7ef2:	420b      	tst	r3, r1
    7ef4:	d0fc      	beq.n	7ef0 <spi_select_slave+0x80>
    7ef6:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    7ef8:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    7efa:	0749      	lsls	r1, r1, #29
    7efc:	d5bd      	bpl.n	7e7a <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7efe:	8b53      	ldrh	r3, [r2, #26]
    7f00:	075b      	lsls	r3, r3, #29
    7f02:	d501      	bpl.n	7f08 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7f04:	2304      	movs	r3, #4
    7f06:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7f08:	7983      	ldrb	r3, [r0, #6]
    7f0a:	2b01      	cmp	r3, #1
    7f0c:	d002      	beq.n	7f14 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7f0e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7f10:	2300      	movs	r3, #0
    7f12:	e7b2      	b.n	7e7a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7f14:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7f16:	2300      	movs	r3, #0
    7f18:	e7af      	b.n	7e7a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7f1a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7f1c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7f1e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7f20:	2900      	cmp	r1, #0
    7f22:	d104      	bne.n	7f2e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    7f24:	0953      	lsrs	r3, r2, #5
    7f26:	01db      	lsls	r3, r3, #7
    7f28:	490d      	ldr	r1, [pc, #52]	; (7f60 <spi_select_slave+0xf0>)
    7f2a:	468c      	mov	ip, r1
    7f2c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7f2e:	211f      	movs	r1, #31
    7f30:	4011      	ands	r1, r2
    7f32:	2201      	movs	r2, #1
    7f34:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    7f36:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    7f38:	2300      	movs	r3, #0
    7f3a:	e79e      	b.n	7e7a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    7f3c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7f3e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7f40:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7f42:	2900      	cmp	r1, #0
    7f44:	d104      	bne.n	7f50 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    7f46:	0953      	lsrs	r3, r2, #5
    7f48:	01db      	lsls	r3, r3, #7
    7f4a:	4905      	ldr	r1, [pc, #20]	; (7f60 <spi_select_slave+0xf0>)
    7f4c:	468c      	mov	ip, r1
    7f4e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7f50:	211f      	movs	r1, #31
    7f52:	4011      	ands	r1, r2
    7f54:	2201      	movs	r2, #1
    7f56:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7f58:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    7f5a:	2300      	movs	r3, #0
    7f5c:	e78d      	b.n	7e7a <spi_select_slave+0xa>
    7f5e:	46c0      	nop			; (mov r8, r8)
    7f60:	41004400 	.word	0x41004400

00007f64 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    7f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f66:	46de      	mov	lr, fp
    7f68:	4657      	mov	r7, sl
    7f6a:	464e      	mov	r6, r9
    7f6c:	4645      	mov	r5, r8
    7f6e:	b5e0      	push	{r5, r6, r7, lr}
    7f70:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    7f72:	2338      	movs	r3, #56	; 0x38
    7f74:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    7f76:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    7f78:	2c05      	cmp	r4, #5
    7f7a:	d002      	beq.n	7f82 <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7f7c:	3312      	adds	r3, #18
	if (length == 0) {
    7f7e:	2a00      	cmp	r2, #0
    7f80:	d107      	bne.n	7f92 <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    7f82:	0018      	movs	r0, r3
    7f84:	b003      	add	sp, #12
    7f86:	bc3c      	pop	{r2, r3, r4, r5}
    7f88:	4690      	mov	r8, r2
    7f8a:	4699      	mov	r9, r3
    7f8c:	46a2      	mov	sl, r4
    7f8e:	46ab      	mov	fp, r5
    7f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    7f92:	7943      	ldrb	r3, [r0, #5]
    7f94:	2b00      	cmp	r3, #0
    7f96:	d103      	bne.n	7fa0 <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7f98:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7f9a:	7e1c      	ldrb	r4, [r3, #24]
    7f9c:	07a4      	lsls	r4, r4, #30
    7f9e:	d40a      	bmi.n	7fb6 <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    7fa0:	4693      	mov	fp, r2
    7fa2:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    7fa4:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    7fa6:	2502      	movs	r5, #2
    7fa8:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    7faa:	3502      	adds	r5, #2
    7fac:	46a8      	mov	r8, r5
    7fae:	3a01      	subs	r2, #1
    7fb0:	b292      	uxth	r2, r2
    7fb2:	468a      	mov	sl, r1
    7fb4:	e023      	b.n	7ffe <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7fb6:	2402      	movs	r4, #2
    7fb8:	761c      	strb	r4, [r3, #24]
    7fba:	e7f1      	b.n	7fa0 <spi_write_buffer_wait+0x3c>
    7fbc:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    7fbe:	4661      	mov	r1, ip
    7fc0:	420d      	tst	r5, r1
    7fc2:	d12e      	bne.n	8022 <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7fc4:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    7fc6:	421d      	tst	r5, r3
    7fc8:	d100      	bne.n	7fcc <spi_write_buffer_wait+0x68>
    7fca:	e0c2      	b.n	8152 <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7fcc:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7fce:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    7fd0:	421d      	tst	r5, r3
    7fd2:	d0fc      	beq.n	7fce <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    7fd4:	1c67      	adds	r7, r4, #1
    7fd6:	b2bf      	uxth	r7, r7
    7fd8:	4651      	mov	r1, sl
    7fda:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7fdc:	7981      	ldrb	r1, [r0, #6]
    7fde:	2901      	cmp	r1, #1
    7fe0:	d023      	beq.n	802a <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    7fe2:	b2ad      	uxth	r5, r5
    7fe4:	003c      	movs	r4, r7
    7fe6:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    7fe8:	421f      	tst	r7, r3
    7fea:	d002      	beq.n	7ff2 <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7fec:	05ed      	lsls	r5, r5, #23
    7fee:	0ded      	lsrs	r5, r5, #23
    7ff0:	62b5      	str	r5, [r6, #40]	; 0x28
    7ff2:	1e55      	subs	r5, r2, #1
    7ff4:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    7ff6:	79c6      	ldrb	r6, [r0, #7]
    7ff8:	2e00      	cmp	r6, #0
    7ffa:	d11d      	bne.n	8038 <spi_write_buffer_wait+0xd4>
    7ffc:	002a      	movs	r2, r5
	while (length--) {
    7ffe:	4d5a      	ldr	r5, [pc, #360]	; (8168 <spi_write_buffer_wait+0x204>)
    8000:	42aa      	cmp	r2, r5
    8002:	d070      	beq.n	80e6 <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    8004:	7945      	ldrb	r5, [r0, #5]
    8006:	2d00      	cmp	r5, #0
    8008:	d1e0      	bne.n	7fcc <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    800a:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    800c:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    800e:	421d      	tst	r5, r3
    8010:	d1d4      	bne.n	7fbc <spi_write_buffer_wait+0x58>
    8012:	4d56      	ldr	r5, [pc, #344]	; (816c <spi_write_buffer_wait+0x208>)
    8014:	7e37      	ldrb	r7, [r6, #24]
    8016:	421f      	tst	r7, r3
    8018:	d1d0      	bne.n	7fbc <spi_write_buffer_wait+0x58>
    801a:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    801c:	2d00      	cmp	r5, #0
    801e:	d1f9      	bne.n	8014 <spi_write_buffer_wait+0xb0>
    8020:	e7cc      	b.n	7fbc <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8022:	2302      	movs	r3, #2
    8024:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    8026:	3302      	adds	r3, #2
    8028:	e7ab      	b.n	7f82 <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    802a:	3402      	adds	r4, #2
    802c:	b2a4      	uxth	r4, r4
    802e:	4651      	mov	r1, sl
    8030:	5dcf      	ldrb	r7, [r1, r7]
    8032:	023f      	lsls	r7, r7, #8
    8034:	433d      	orrs	r5, r7
    8036:	e7d6      	b.n	7fe6 <spi_write_buffer_wait+0x82>
    8038:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    803a:	7945      	ldrb	r5, [r0, #5]
    803c:	2d00      	cmp	r5, #0
    803e:	d137      	bne.n	80b0 <spi_write_buffer_wait+0x14c>
    8040:	4d4b      	ldr	r5, [pc, #300]	; (8170 <spi_write_buffer_wait+0x20c>)
    8042:	9101      	str	r1, [sp, #4]
    8044:	e012      	b.n	806c <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    8046:	3402      	adds	r4, #2
    8048:	b2a4      	uxth	r4, r4
    804a:	4649      	mov	r1, r9
    804c:	9f01      	ldr	r7, [sp, #4]
    804e:	5c79      	ldrb	r1, [r7, r1]
    8050:	0209      	lsls	r1, r1, #8
    8052:	9f00      	ldr	r7, [sp, #0]
    8054:	430f      	orrs	r7, r1
    8056:	e01b      	b.n	8090 <spi_write_buffer_wait+0x12c>
						length--;
    8058:	3a01      	subs	r2, #1
    805a:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    805c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    805e:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    8060:	4641      	mov	r1, r8
    8062:	420f      	tst	r7, r1
    8064:	d11b      	bne.n	809e <spi_write_buffer_wait+0x13a>
    8066:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    8068:	2d00      	cmp	r5, #0
    806a:	d018      	beq.n	809e <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    806c:	2a00      	cmp	r2, #0
    806e:	d0f5      	beq.n	805c <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8070:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8072:	7e37      	ldrb	r7, [r6, #24]
    8074:	421f      	tst	r7, r3
    8076:	d0f1      	beq.n	805c <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    8078:	1c67      	adds	r7, r4, #1
    807a:	b2b9      	uxth	r1, r7
    807c:	4689      	mov	r9, r1
    807e:	9901      	ldr	r1, [sp, #4]
    8080:	5d09      	ldrb	r1, [r1, r4]
    8082:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8084:	7981      	ldrb	r1, [r0, #6]
    8086:	2901      	cmp	r1, #1
    8088:	d0dd      	beq.n	8046 <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    808a:	4669      	mov	r1, sp
    808c:	880f      	ldrh	r7, [r1, #0]
    808e:	464c      	mov	r4, r9
    8090:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    8092:	4219      	tst	r1, r3
    8094:	d0e0      	beq.n	8058 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8096:	05ff      	lsls	r7, r7, #23
    8098:	0dff      	lsrs	r7, r7, #23
    809a:	62b7      	str	r7, [r6, #40]	; 0x28
    809c:	e7dc      	b.n	8058 <spi_write_buffer_wait+0xf4>
    809e:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    80a0:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    80a2:	4667      	mov	r7, ip
    80a4:	423d      	tst	r5, r7
    80a6:	d118      	bne.n	80da <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    80a8:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    80aa:	4646      	mov	r6, r8
    80ac:	4235      	tst	r5, r6
    80ae:	d052      	beq.n	8156 <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    80b0:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    80b2:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    80b4:	4647      	mov	r7, r8
    80b6:	423d      	tst	r5, r7
    80b8:	d0fb      	beq.n	80b2 <spi_write_buffer_wait+0x14e>
    80ba:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    80bc:	423d      	tst	r5, r7
    80be:	d007      	beq.n	80d0 <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    80c0:	8b75      	ldrh	r5, [r6, #26]
    80c2:	423d      	tst	r5, r7
    80c4:	d000      	beq.n	80c8 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    80c6:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    80c8:	7985      	ldrb	r5, [r0, #6]
    80ca:	2d01      	cmp	r5, #1
    80cc:	d009      	beq.n	80e2 <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    80ce:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    80d0:	465d      	mov	r5, fp
    80d2:	3d01      	subs	r5, #1
    80d4:	b2ad      	uxth	r5, r5
    80d6:	46ab      	mov	fp, r5
    80d8:	e769      	b.n	7fae <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    80da:	2302      	movs	r3, #2
    80dc:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    80de:	3302      	adds	r3, #2
    80e0:	e74f      	b.n	7f82 <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    80e2:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    80e4:	e7f4      	b.n	80d0 <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    80e6:	7943      	ldrb	r3, [r0, #5]
    80e8:	2b01      	cmp	r3, #1
    80ea:	d00b      	beq.n	8104 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    80ec:	2b00      	cmp	r3, #0
    80ee:	d134      	bne.n	815a <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    80f0:	79c2      	ldrb	r2, [r0, #7]
    80f2:	2a00      	cmp	r2, #0
    80f4:	d100      	bne.n	80f8 <spi_write_buffer_wait+0x194>
    80f6:	e744      	b.n	7f82 <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    80f8:	2404      	movs	r4, #4
			while (flush_length) {
    80fa:	465b      	mov	r3, fp
    80fc:	465d      	mov	r5, fp
    80fe:	2b00      	cmp	r3, #0
    8100:	d119      	bne.n	8136 <spi_write_buffer_wait+0x1d2>
    8102:	e73e      	b.n	7f82 <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8104:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    8106:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    8108:	7e0b      	ldrb	r3, [r1, #24]
    810a:	4213      	tst	r3, r2
    810c:	d0fc      	beq.n	8108 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    810e:	2300      	movs	r3, #0
    8110:	e737      	b.n	7f82 <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8112:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    8114:	4223      	tst	r3, r4
    8116:	d022      	beq.n	815e <spi_write_buffer_wait+0x1fa>
    8118:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    811a:	4223      	tst	r3, r4
    811c:	d007      	beq.n	812e <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    811e:	8b4b      	ldrh	r3, [r1, #26]
    8120:	4223      	tst	r3, r4
    8122:	d000      	beq.n	8126 <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8124:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8126:	7983      	ldrb	r3, [r0, #6]
    8128:	2b01      	cmp	r3, #1
    812a:	d010      	beq.n	814e <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    812c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    812e:	3d01      	subs	r5, #1
    8130:	b2ad      	uxth	r5, r5
			while (flush_length) {
    8132:	2d00      	cmp	r5, #0
    8134:	d015      	beq.n	8162 <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8136:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8138:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    813a:	4223      	tst	r3, r4
    813c:	d1e9      	bne.n	8112 <spi_write_buffer_wait+0x1ae>
    813e:	4b0b      	ldr	r3, [pc, #44]	; (816c <spi_write_buffer_wait+0x208>)
    8140:	7e0a      	ldrb	r2, [r1, #24]
    8142:	4222      	tst	r2, r4
    8144:	d1e5      	bne.n	8112 <spi_write_buffer_wait+0x1ae>
    8146:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    8148:	2b00      	cmp	r3, #0
    814a:	d1f9      	bne.n	8140 <spi_write_buffer_wait+0x1dc>
    814c:	e7e1      	b.n	8112 <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    814e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    8150:	e7ed      	b.n	812e <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    8152:	2312      	movs	r3, #18
    8154:	e715      	b.n	7f82 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    8156:	2312      	movs	r3, #18
    8158:	e713      	b.n	7f82 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    815a:	2300      	movs	r3, #0
    815c:	e711      	b.n	7f82 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    815e:	2312      	movs	r3, #18
    8160:	e70f      	b.n	7f82 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    8162:	2300      	movs	r3, #0
    8164:	e70d      	b.n	7f82 <spi_write_buffer_wait+0x1e>
    8166:	46c0      	nop			; (mov r8, r8)
    8168:	0000ffff 	.word	0x0000ffff
    816c:	00002710 	.word	0x00002710
    8170:	00002711 	.word	0x00002711

00008174 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    8174:	4770      	bx	lr
	...

00008178 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    8178:	b510      	push	{r4, lr}
    817a:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    817c:	4b0f      	ldr	r3, [pc, #60]	; (81bc <sd_mmc_test_unit_ready+0x44>)
    817e:	4798      	blx	r3
    8180:	2801      	cmp	r0, #1
    8182:	d019      	beq.n	81b8 <sd_mmc_test_unit_ready+0x40>
    8184:	2800      	cmp	r0, #0
    8186:	d003      	beq.n	8190 <sd_mmc_test_unit_ready+0x18>
    8188:	2802      	cmp	r0, #2
    818a:	d010      	beq.n	81ae <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    818c:	2001      	movs	r0, #1
	}
}
    818e:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    8190:	4b0b      	ldr	r3, [pc, #44]	; (81c0 <sd_mmc_test_unit_ready+0x48>)
    8192:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    8194:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    8196:	2b00      	cmp	r3, #0
    8198:	d1f9      	bne.n	818e <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    819a:	0020      	movs	r0, r4
    819c:	4b09      	ldr	r3, [pc, #36]	; (81c4 <sd_mmc_test_unit_ready+0x4c>)
    819e:	4798      	blx	r3
    81a0:	0003      	movs	r3, r0
    81a2:	2003      	movs	r0, #3
    81a4:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    81a6:	4243      	negs	r3, r0
    81a8:	4158      	adcs	r0, r3
    81aa:	0040      	lsls	r0, r0, #1
    81ac:	e7ef      	b.n	818e <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    81ae:	2200      	movs	r2, #0
    81b0:	4b03      	ldr	r3, [pc, #12]	; (81c0 <sd_mmc_test_unit_ready+0x48>)
    81b2:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    81b4:	2002      	movs	r0, #2
    81b6:	e7ea      	b.n	818e <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    81b8:	2003      	movs	r0, #3
    81ba:	e7e8      	b.n	818e <sd_mmc_test_unit_ready+0x16>
    81bc:	00000c49 	.word	0x00000c49
    81c0:	200002fc 	.word	0x200002fc
    81c4:	000010f9 	.word	0x000010f9

000081c8 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    81c8:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    81ca:	2000      	movs	r0, #0
    81cc:	4b01      	ldr	r3, [pc, #4]	; (81d4 <sd_mmc_test_unit_ready_0+0xc>)
    81ce:	4798      	blx	r3
}
    81d0:	bd10      	pop	{r4, pc}
    81d2:	46c0      	nop			; (mov r8, r8)
    81d4:	00008179 	.word	0x00008179

000081d8 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    81d8:	b570      	push	{r4, r5, r6, lr}
    81da:	0004      	movs	r4, r0
    81dc:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    81de:	4b04      	ldr	r3, [pc, #16]	; (81f0 <sd_mmc_read_capacity+0x18>)
    81e0:	4798      	blx	r3
    81e2:	0040      	lsls	r0, r0, #1
    81e4:	3801      	subs	r0, #1
    81e6:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    81e8:	0020      	movs	r0, r4
    81ea:	4b02      	ldr	r3, [pc, #8]	; (81f4 <sd_mmc_read_capacity+0x1c>)
    81ec:	4798      	blx	r3
}
    81ee:	bd70      	pop	{r4, r5, r6, pc}
    81f0:	00001121 	.word	0x00001121
    81f4:	00008179 	.word	0x00008179

000081f8 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    81f8:	b510      	push	{r4, lr}
    81fa:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    81fc:	2000      	movs	r0, #0
    81fe:	4b01      	ldr	r3, [pc, #4]	; (8204 <sd_mmc_read_capacity_0+0xc>)
    8200:	4798      	blx	r3
}
    8202:	bd10      	pop	{r4, pc}
    8204:	000081d9 	.word	0x000081d9

00008208 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    8208:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    820a:	2000      	movs	r0, #0
    820c:	4b01      	ldr	r3, [pc, #4]	; (8214 <sd_mmc_wr_protect_0+0xc>)
    820e:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    8210:	bd10      	pop	{r4, pc}
    8212:	46c0      	nop			; (mov r8, r8)
    8214:	00001149 	.word	0x00001149

00008218 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
    8218:	2001      	movs	r0, #1
    821a:	4770      	bx	lr

0000821c <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    821c:	b510      	push	{r4, lr}
    821e:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    8220:	2201      	movs	r2, #1
    8222:	4b0c      	ldr	r3, [pc, #48]	; (8254 <sd_mmc_mem_2_ram+0x38>)
    8224:	4798      	blx	r3
    8226:	2800      	cmp	r0, #0
    8228:	d004      	beq.n	8234 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    822a:	3802      	subs	r0, #2
    822c:	4243      	negs	r3, r0
    822e:	4158      	adcs	r0, r3
    8230:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    8232:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    8234:	2101      	movs	r1, #1
    8236:	0020      	movs	r0, r4
    8238:	4b07      	ldr	r3, [pc, #28]	; (8258 <sd_mmc_mem_2_ram+0x3c>)
    823a:	4798      	blx	r3
    823c:	0003      	movs	r3, r0
		return CTRL_FAIL;
    823e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    8240:	2b00      	cmp	r3, #0
    8242:	d1f6      	bne.n	8232 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    8244:	2000      	movs	r0, #0
    8246:	4b05      	ldr	r3, [pc, #20]	; (825c <sd_mmc_mem_2_ram+0x40>)
    8248:	4798      	blx	r3
    824a:	1e43      	subs	r3, r0, #1
    824c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    824e:	b2c0      	uxtb	r0, r0
    8250:	e7ef      	b.n	8232 <sd_mmc_mem_2_ram+0x16>
    8252:	46c0      	nop			; (mov r8, r8)
    8254:	0000114d 	.word	0x0000114d
    8258:	000011d5 	.word	0x000011d5
    825c:	00001201 	.word	0x00001201

00008260 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    8260:	b510      	push	{r4, lr}
    8262:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    8264:	0001      	movs	r1, r0
    8266:	2000      	movs	r0, #0
    8268:	4b01      	ldr	r3, [pc, #4]	; (8270 <sd_mmc_mem_2_ram_0+0x10>)
    826a:	4798      	blx	r3
}
    826c:	bd10      	pop	{r4, pc}
    826e:	46c0      	nop			; (mov r8, r8)
    8270:	0000821d 	.word	0x0000821d

00008274 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    8274:	b510      	push	{r4, lr}
    8276:	0014      	movs	r4, r2
 	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    8278:	2201      	movs	r2, #1
    827a:	4b0c      	ldr	r3, [pc, #48]	; (82ac <sd_mmc_ram_2_mem+0x38>)
    827c:	4798      	blx	r3
    827e:	2800      	cmp	r0, #0
    8280:	d004      	beq.n	828c <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    8282:	3802      	subs	r0, #2
    8284:	4243      	negs	r3, r0
    8286:	4158      	adcs	r0, r3
    8288:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    828a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    828c:	2101      	movs	r1, #1
    828e:	0020      	movs	r0, r4
    8290:	4b07      	ldr	r3, [pc, #28]	; (82b0 <sd_mmc_ram_2_mem+0x3c>)
    8292:	4798      	blx	r3
    8294:	0003      	movs	r3, r0
		return CTRL_FAIL;
    8296:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    8298:	2b00      	cmp	r3, #0
    829a:	d1f6      	bne.n	828a <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    829c:	2000      	movs	r0, #0
    829e:	4b05      	ldr	r3, [pc, #20]	; (82b4 <sd_mmc_ram_2_mem+0x40>)
    82a0:	4798      	blx	r3
    82a2:	1e43      	subs	r3, r0, #1
    82a4:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    82a6:	b2c0      	uxtb	r0, r0
    82a8:	e7ef      	b.n	828a <sd_mmc_ram_2_mem+0x16>
    82aa:	46c0      	nop			; (mov r8, r8)
    82ac:	00001271 	.word	0x00001271
    82b0:	000012e1 	.word	0x000012e1
    82b4:	0000130d 	.word	0x0000130d

000082b8 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    82b8:	b510      	push	{r4, lr}
    82ba:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    82bc:	0001      	movs	r1, r0
    82be:	2000      	movs	r0, #0
    82c0:	4b01      	ldr	r3, [pc, #4]	; (82c8 <sd_mmc_ram_2_mem_0+0x10>)
    82c2:	4798      	blx	r3
}
    82c4:	bd10      	pop	{r4, pc}
    82c6:	46c0      	nop			; (mov r8, r8)
    82c8:	00008275 	.word	0x00008275

000082cc <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    82cc:	b500      	push	{lr}
    82ce:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    82d0:	466b      	mov	r3, sp
    82d2:	1dd9      	adds	r1, r3, #7
    82d4:	23ff      	movs	r3, #255	; 0xff
    82d6:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    82d8:	2201      	movs	r2, #1
    82da:	480b      	ldr	r0, [pc, #44]	; (8308 <sd_mmc_spi_start_write_block+0x3c>)
    82dc:	4b0b      	ldr	r3, [pc, #44]	; (830c <sd_mmc_spi_start_write_block+0x40>)
    82de:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    82e0:	4b0b      	ldr	r3, [pc, #44]	; (8310 <sd_mmc_spi_start_write_block+0x44>)
    82e2:	881b      	ldrh	r3, [r3, #0]
    82e4:	2b01      	cmp	r3, #1
    82e6:	d00a      	beq.n	82fe <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    82e8:	22fc      	movs	r2, #252	; 0xfc
    82ea:	466b      	mov	r3, sp
    82ec:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    82ee:	2201      	movs	r2, #1
    82f0:	466b      	mov	r3, sp
    82f2:	1d99      	adds	r1, r3, #6
    82f4:	4804      	ldr	r0, [pc, #16]	; (8308 <sd_mmc_spi_start_write_block+0x3c>)
    82f6:	4b05      	ldr	r3, [pc, #20]	; (830c <sd_mmc_spi_start_write_block+0x40>)
    82f8:	4798      	blx	r3
}
    82fa:	b003      	add	sp, #12
    82fc:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    82fe:	22fe      	movs	r2, #254	; 0xfe
    8300:	466b      	mov	r3, sp
    8302:	719a      	strb	r2, [r3, #6]
    8304:	e7f3      	b.n	82ee <sd_mmc_spi_start_write_block+0x22>
    8306:	46c0      	nop			; (mov r8, r8)
    8308:	20000300 	.word	0x20000300
    830c:	00007f65 	.word	0x00007f65
    8310:	20000344 	.word	0x20000344

00008314 <sd_mmc_spi_wait_busy>:
{
    8314:	b5f0      	push	{r4, r5, r6, r7, lr}
    8316:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    8318:	466b      	mov	r3, sp
    831a:	1ddc      	adds	r4, r3, #7
    831c:	23ff      	movs	r3, #255	; 0xff
    831e:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    8320:	4e12      	ldr	r6, [pc, #72]	; (836c <sd_mmc_spi_wait_busy+0x58>)
    8322:	2201      	movs	r2, #1
    8324:	0021      	movs	r1, r4
    8326:	0030      	movs	r0, r6
    8328:	4d11      	ldr	r5, [pc, #68]	; (8370 <sd_mmc_spi_wait_busy+0x5c>)
    832a:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    832c:	23ff      	movs	r3, #255	; 0xff
    832e:	2201      	movs	r2, #1
    8330:	0021      	movs	r1, r4
    8332:	0030      	movs	r0, r6
    8334:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    8336:	23ff      	movs	r3, #255	; 0xff
    8338:	2201      	movs	r2, #1
    833a:	0021      	movs	r1, r4
    833c:	0030      	movs	r0, r6
    833e:	47a8      	blx	r5
    8340:	4c0c      	ldr	r4, [pc, #48]	; (8374 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    8342:	466b      	mov	r3, sp
    8344:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    8346:	4e09      	ldr	r6, [pc, #36]	; (836c <sd_mmc_spi_wait_busy+0x58>)
    8348:	4f09      	ldr	r7, [pc, #36]	; (8370 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    834a:	782b      	ldrb	r3, [r5, #0]
    834c:	2bff      	cmp	r3, #255	; 0xff
    834e:	d009      	beq.n	8364 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    8350:	23ff      	movs	r3, #255	; 0xff
    8352:	2201      	movs	r2, #1
    8354:	0029      	movs	r1, r5
    8356:	0030      	movs	r0, r6
    8358:	47b8      	blx	r7
    835a:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    835c:	2c00      	cmp	r4, #0
    835e:	d1f4      	bne.n	834a <sd_mmc_spi_wait_busy+0x36>
			return false;
    8360:	2000      	movs	r0, #0
    8362:	e000      	b.n	8366 <sd_mmc_spi_wait_busy+0x52>
	return true;
    8364:	2001      	movs	r0, #1
}
    8366:	b003      	add	sp, #12
    8368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    836a:	46c0      	nop			; (mov r8, r8)
    836c:	20000300 	.word	0x20000300
    8370:	00007d55 	.word	0x00007d55
    8374:	00030d40 	.word	0x00030d40

00008378 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    8378:	b570      	push	{r4, r5, r6, lr}
    837a:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    837c:	4b14      	ldr	r3, [pc, #80]	; (83d0 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    837e:	881c      	ldrh	r4, [r3, #0]
    8380:	2c01      	cmp	r4, #1
    8382:	d023      	beq.n	83cc <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    8384:	4b13      	ldr	r3, [pc, #76]	; (83d4 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    8386:	8819      	ldrh	r1, [r3, #0]
    8388:	4b13      	ldr	r3, [pc, #76]	; (83d8 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    838a:	6818      	ldr	r0, [r3, #0]
    838c:	4b13      	ldr	r3, [pc, #76]	; (83dc <sd_mmc_spi_stop_multiwrite_block+0x64>)
    838e:	4798      	blx	r3
		return true; // It is not the End of multi write
    8390:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    8392:	4284      	cmp	r4, r0
    8394:	d902      	bls.n	839c <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    8396:	0018      	movs	r0, r3
    8398:	b002      	add	sp, #8
    839a:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    839c:	466b      	mov	r3, sp
    839e:	1ddc      	adds	r4, r3, #7
    83a0:	23ff      	movs	r3, #255	; 0xff
    83a2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    83a4:	4e0e      	ldr	r6, [pc, #56]	; (83e0 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    83a6:	2201      	movs	r2, #1
    83a8:	0021      	movs	r1, r4
    83aa:	0030      	movs	r0, r6
    83ac:	4d0d      	ldr	r5, [pc, #52]	; (83e4 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    83ae:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    83b0:	23fd      	movs	r3, #253	; 0xfd
    83b2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    83b4:	2201      	movs	r2, #1
    83b6:	0021      	movs	r1, r4
    83b8:	0030      	movs	r0, r6
    83ba:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    83bc:	4b0a      	ldr	r3, [pc, #40]	; (83e8 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    83be:	4798      	blx	r3
    83c0:	1e03      	subs	r3, r0, #0
    83c2:	d1e8      	bne.n	8396 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    83c4:	2105      	movs	r1, #5
    83c6:	4a09      	ldr	r2, [pc, #36]	; (83ec <sd_mmc_spi_stop_multiwrite_block+0x74>)
    83c8:	7011      	strb	r1, [r2, #0]
		return false;
    83ca:	e7e4      	b.n	8396 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    83cc:	2301      	movs	r3, #1
    83ce:	e7e2      	b.n	8396 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    83d0:	20000344 	.word	0x20000344
    83d4:	2000033c 	.word	0x2000033c
    83d8:	2000034c 	.word	0x2000034c
    83dc:	00009065 	.word	0x00009065
    83e0:	20000300 	.word	0x20000300
    83e4:	00007f65 	.word	0x00007f65
    83e8:	00008315 	.word	0x00008315
    83ec:	20000343 	.word	0x20000343

000083f0 <sd_mmc_spi_start_read_block>:
{
    83f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    83f2:	b083      	sub	sp, #12
	token = 0;
    83f4:	2200      	movs	r2, #0
    83f6:	466b      	mov	r3, sp
    83f8:	71da      	strb	r2, [r3, #7]
    83fa:	4c14      	ldr	r4, [pc, #80]	; (844c <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    83fc:	466b      	mov	r3, sp
    83fe:	1ddd      	adds	r5, r3, #7
    8400:	4e13      	ldr	r6, [pc, #76]	; (8450 <sd_mmc_spi_start_read_block+0x60>)
    8402:	4f14      	ldr	r7, [pc, #80]	; (8454 <sd_mmc_spi_start_read_block+0x64>)
    8404:	23ff      	movs	r3, #255	; 0xff
    8406:	2201      	movs	r2, #1
    8408:	0029      	movs	r1, r5
    840a:	0030      	movs	r0, r6
    840c:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    840e:	782b      	ldrb	r3, [r5, #0]
    8410:	220f      	movs	r2, #15
    8412:	0019      	movs	r1, r3
    8414:	4391      	bics	r1, r2
    8416:	1e0a      	subs	r2, r1, #0
    8418:	d009      	beq.n	842e <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    841a:	2bfe      	cmp	r3, #254	; 0xfe
    841c:	d013      	beq.n	8446 <sd_mmc_spi_start_read_block+0x56>
    841e:	3c01      	subs	r4, #1
		if (i-- == 0) {
    8420:	2c00      	cmp	r4, #0
    8422:	d1ef      	bne.n	8404 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    8424:	2204      	movs	r2, #4
    8426:	4b0c      	ldr	r3, [pc, #48]	; (8458 <sd_mmc_spi_start_read_block+0x68>)
    8428:	701a      	strb	r2, [r3, #0]
			return false;
    842a:	2000      	movs	r0, #0
    842c:	e00c      	b.n	8448 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    842e:	075b      	lsls	r3, r3, #29
    8430:	d004      	beq.n	843c <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    8432:	3207      	adds	r2, #7
    8434:	4b08      	ldr	r3, [pc, #32]	; (8458 <sd_mmc_spi_start_read_block+0x68>)
    8436:	701a      	strb	r2, [r3, #0]
			return false;
    8438:	2000      	movs	r0, #0
    843a:	e005      	b.n	8448 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    843c:	220b      	movs	r2, #11
    843e:	4b06      	ldr	r3, [pc, #24]	; (8458 <sd_mmc_spi_start_read_block+0x68>)
    8440:	701a      	strb	r2, [r3, #0]
			return false;
    8442:	2000      	movs	r0, #0
    8444:	e000      	b.n	8448 <sd_mmc_spi_start_read_block+0x58>
	return true;
    8446:	2001      	movs	r0, #1
}
    8448:	b003      	add	sp, #12
    844a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    844c:	0007a120 	.word	0x0007a120
    8450:	20000300 	.word	0x20000300
    8454:	00007d55 	.word	0x00007d55
    8458:	20000343 	.word	0x20000343

0000845c <sd_mmc_spi_stop_write_block>:
{
    845c:	b530      	push	{r4, r5, lr}
    845e:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    8460:	a901      	add	r1, sp, #4
    8462:	2301      	movs	r3, #1
    8464:	425b      	negs	r3, r3
    8466:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    8468:	4d14      	ldr	r5, [pc, #80]	; (84bc <sd_mmc_spi_stop_write_block+0x60>)
    846a:	2202      	movs	r2, #2
    846c:	0028      	movs	r0, r5
    846e:	4b14      	ldr	r3, [pc, #80]	; (84c0 <sd_mmc_spi_stop_write_block+0x64>)
    8470:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    8472:	466b      	mov	r3, sp
    8474:	1ddc      	adds	r4, r3, #7
    8476:	23ff      	movs	r3, #255	; 0xff
    8478:	2201      	movs	r2, #1
    847a:	0021      	movs	r1, r4
    847c:	0028      	movs	r0, r5
    847e:	4d11      	ldr	r5, [pc, #68]	; (84c4 <sd_mmc_spi_stop_write_block+0x68>)
    8480:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    8482:	7822      	ldrb	r2, [r4, #0]
    8484:	2311      	movs	r3, #17
    8486:	4013      	ands	r3, r2
    8488:	2b01      	cmp	r3, #1
    848a:	d005      	beq.n	8498 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    848c:	2201      	movs	r2, #1
    848e:	4b0e      	ldr	r3, [pc, #56]	; (84c8 <sd_mmc_spi_stop_write_block+0x6c>)
    8490:	701a      	strb	r2, [r3, #0]
		return false;
    8492:	2000      	movs	r0, #0
}
    8494:	b003      	add	sp, #12
    8496:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    8498:	231e      	movs	r3, #30
    849a:	401a      	ands	r2, r3
    849c:	2a04      	cmp	r2, #4
    849e:	d00b      	beq.n	84b8 <sd_mmc_spi_stop_write_block+0x5c>
    84a0:	2a0a      	cmp	r2, #10
    84a2:	d104      	bne.n	84ae <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    84a4:	3a02      	subs	r2, #2
    84a6:	4b08      	ldr	r3, [pc, #32]	; (84c8 <sd_mmc_spi_stop_write_block+0x6c>)
    84a8:	701a      	strb	r2, [r3, #0]
		return false;
    84aa:	2000      	movs	r0, #0
    84ac:	e7f2      	b.n	8494 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    84ae:	220a      	movs	r2, #10
    84b0:	4b05      	ldr	r3, [pc, #20]	; (84c8 <sd_mmc_spi_stop_write_block+0x6c>)
    84b2:	701a      	strb	r2, [r3, #0]
		return false;
    84b4:	2000      	movs	r0, #0
    84b6:	e7ed      	b.n	8494 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    84b8:	2001      	movs	r0, #1
    84ba:	e7eb      	b.n	8494 <sd_mmc_spi_stop_write_block+0x38>
    84bc:	20000300 	.word	0x20000300
    84c0:	00007f65 	.word	0x00007f65
    84c4:	00007d55 	.word	0x00007d55
    84c8:	20000343 	.word	0x20000343

000084cc <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    84cc:	b570      	push	{r4, r5, r6, lr}
    84ce:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    84d0:	2500      	movs	r5, #0
    84d2:	4b30      	ldr	r3, [pc, #192]	; (8594 <sd_mmc_spi_init+0xc8>)
    84d4:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    84d6:	a90f      	add	r1, sp, #60	; 0x3c
    84d8:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    84da:	2601      	movs	r6, #1
    84dc:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    84de:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
    84e0:	2025      	movs	r0, #37	; 0x25
    84e2:	4b2d      	ldr	r3, [pc, #180]	; (8598 <sd_mmc_spi_init+0xcc>)
    84e4:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    84e6:	ac01      	add	r4, sp, #4
    84e8:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    84ea:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    84ec:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    84ee:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    84f0:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    84f2:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    84f4:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    84f6:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    84f8:	2324      	movs	r3, #36	; 0x24
    84fa:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    84fc:	220c      	movs	r2, #12
    84fe:	2100      	movs	r1, #0
    8500:	a807      	add	r0, sp, #28
    8502:	4b26      	ldr	r3, [pc, #152]	; (859c <sd_mmc_spi_init+0xd0>)
    8504:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    8506:	2380      	movs	r3, #128	; 0x80
    8508:	025b      	lsls	r3, r3, #9
    850a:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    850c:	4b24      	ldr	r3, [pc, #144]	; (85a0 <sd_mmc_spi_init+0xd4>)
    850e:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    8510:	4b24      	ldr	r3, [pc, #144]	; (85a4 <sd_mmc_spi_init+0xd8>)
    8512:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    8514:	4b24      	ldr	r3, [pc, #144]	; (85a8 <sd_mmc_spi_init+0xdc>)
    8516:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    8518:	4b24      	ldr	r3, [pc, #144]	; (85ac <sd_mmc_spi_init+0xe0>)
    851a:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    851c:	4b24      	ldr	r3, [pc, #144]	; (85b0 <sd_mmc_spi_init+0xe4>)
    851e:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    8520:	4d24      	ldr	r5, [pc, #144]	; (85b4 <sd_mmc_spi_init+0xe8>)
    8522:	0022      	movs	r2, r4
    8524:	4924      	ldr	r1, [pc, #144]	; (85b8 <sd_mmc_spi_init+0xec>)
    8526:	0028      	movs	r0, r5
    8528:	4b24      	ldr	r3, [pc, #144]	; (85bc <sd_mmc_spi_init+0xf0>)
    852a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    852c:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    852e:	0020      	movs	r0, r4
    8530:	4b23      	ldr	r3, [pc, #140]	; (85c0 <sd_mmc_spi_init+0xf4>)
    8532:	4798      	blx	r3
    8534:	231f      	movs	r3, #31
    8536:	4018      	ands	r0, r3
    8538:	4086      	lsls	r6, r0
    853a:	4b22      	ldr	r3, [pc, #136]	; (85c4 <sd_mmc_spi_init+0xf8>)
    853c:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    853e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    8540:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    8542:	2b00      	cmp	r3, #0
    8544:	d1fc      	bne.n	8540 <sd_mmc_spi_init+0x74>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    8546:	6823      	ldr	r3, [r4, #0]
    8548:	2202      	movs	r2, #2
    854a:	4313      	orrs	r3, r2
    854c:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    854e:	4a1e      	ldr	r2, [pc, #120]	; (85c8 <sd_mmc_spi_init+0xfc>)
    8550:	2300      	movs	r3, #0
    8552:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    8554:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    8556:	491d      	ldr	r1, [pc, #116]	; (85cc <sd_mmc_spi_init+0x100>)
    8558:	7808      	ldrb	r0, [r1, #0]
    855a:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    855c:	4c1c      	ldr	r4, [pc, #112]	; (85d0 <sd_mmc_spi_init+0x104>)
    855e:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    8560:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    8562:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    8564:	2201      	movs	r2, #1
    8566:	4669      	mov	r1, sp
    8568:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    856a:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    856c:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    856e:	4b0a      	ldr	r3, [pc, #40]	; (8598 <sd_mmc_spi_init+0xcc>)
    8570:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    8572:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    8574:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8576:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8578:	2900      	cmp	r1, #0
    857a:	d104      	bne.n	8586 <sd_mmc_spi_init+0xba>
		return &(ports[port_index]->Group[group_index]);
    857c:	0953      	lsrs	r3, r2, #5
    857e:	01db      	lsls	r3, r3, #7
    8580:	4914      	ldr	r1, [pc, #80]	; (85d4 <sd_mmc_spi_init+0x108>)
    8582:	468c      	mov	ip, r1
    8584:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8586:	211f      	movs	r1, #31
    8588:	4011      	ands	r1, r2
    858a:	2201      	movs	r2, #1
    858c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    858e:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    8590:	b010      	add	sp, #64	; 0x40
    8592:	bd70      	pop	{r4, r5, r6, pc}
    8594:	20000343 	.word	0x20000343
    8598:	00008b8d 	.word	0x00008b8d
    859c:	00009653 	.word	0x00009653
    85a0:	00040003 	.word	0x00040003
    85a4:	00050003 	.word	0x00050003
    85a8:	00060003 	.word	0x00060003
    85ac:	00070003 	.word	0x00070003
    85b0:	00061a80 	.word	0x00061a80
    85b4:	20000300 	.word	0x20000300
    85b8:	42000800 	.word	0x42000800
    85bc:	00007b41 	.word	0x00007b41
    85c0:	000025e5 	.word	0x000025e5
    85c4:	e000e100 	.word	0xe000e100
    85c8:	20000350 	.word	0x20000350
    85cc:	20000124 	.word	0x20000124
    85d0:	20000340 	.word	0x20000340
    85d4:	41004400 	.word	0x41004400

000085d8 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    85d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85da:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    85dc:	2200      	movs	r2, #0
    85de:	4b0d      	ldr	r3, [pc, #52]	; (8614 <sd_mmc_spi_select_device+0x3c>)
    85e0:	701a      	strb	r2, [r3, #0]
    85e2:	000c      	movs	r4, r1
    85e4:	4b0c      	ldr	r3, [pc, #48]	; (8618 <sd_mmc_spi_select_device+0x40>)
    85e6:	4299      	cmp	r1, r3
    85e8:	d900      	bls.n	85ec <sd_mmc_spi_select_device+0x14>
    85ea:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    85ec:	4d0b      	ldr	r5, [pc, #44]	; (861c <sd_mmc_spi_select_device+0x44>)
    85ee:	4e0c      	ldr	r6, [pc, #48]	; (8620 <sd_mmc_spi_select_device+0x48>)
    85f0:	e001      	b.n	85f6 <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    85f2:	08e3      	lsrs	r3, r4, #3
    85f4:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    85f6:	0021      	movs	r1, r4
    85f8:	0028      	movs	r0, r5
    85fa:	47b0      	blx	r6
    85fc:	2817      	cmp	r0, #23
    85fe:	d0f8      	beq.n	85f2 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    8600:	0079      	lsls	r1, r7, #1
    8602:	19cf      	adds	r7, r1, r7
    8604:	4907      	ldr	r1, [pc, #28]	; (8624 <sd_mmc_spi_select_device+0x4c>)
    8606:	19c9      	adds	r1, r1, r7
    8608:	2201      	movs	r2, #1
    860a:	4804      	ldr	r0, [pc, #16]	; (861c <sd_mmc_spi_select_device+0x44>)
    860c:	4b06      	ldr	r3, [pc, #24]	; (8628 <sd_mmc_spi_select_device+0x50>)
    860e:	4798      	blx	r3
}
    8610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8612:	46c0      	nop			; (mov r8, r8)
    8614:	20000343 	.word	0x20000343
    8618:	00b71b00 	.word	0x00b71b00
    861c:	20000300 	.word	0x20000300
    8620:	00007a89 	.word	0x00007a89
    8624:	20000340 	.word	0x20000340
    8628:	00007e71 	.word	0x00007e71

0000862c <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    862c:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    862e:	2200      	movs	r2, #0
    8630:	4b04      	ldr	r3, [pc, #16]	; (8644 <sd_mmc_spi_deselect_device+0x18>)
    8632:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    8634:	0041      	lsls	r1, r0, #1
    8636:	1808      	adds	r0, r1, r0
    8638:	4903      	ldr	r1, [pc, #12]	; (8648 <sd_mmc_spi_deselect_device+0x1c>)
    863a:	1809      	adds	r1, r1, r0
    863c:	4803      	ldr	r0, [pc, #12]	; (864c <sd_mmc_spi_deselect_device+0x20>)
    863e:	4b04      	ldr	r3, [pc, #16]	; (8650 <sd_mmc_spi_deselect_device+0x24>)
    8640:	4798      	blx	r3
}
    8642:	bd10      	pop	{r4, pc}
    8644:	20000343 	.word	0x20000343
    8648:	20000340 	.word	0x20000340
    864c:	20000300 	.word	0x20000300
    8650:	00007e71 	.word	0x00007e71

00008654 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    8654:	b570      	push	{r4, r5, r6, lr}
    8656:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    8658:	22ff      	movs	r2, #255	; 0xff
    865a:	466b      	mov	r3, sp
    865c:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    865e:	2200      	movs	r2, #0
    8660:	4b07      	ldr	r3, [pc, #28]	; (8680 <sd_mmc_spi_send_clock+0x2c>)
    8662:	701a      	strb	r2, [r3, #0]
    8664:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    8666:	4e07      	ldr	r6, [pc, #28]	; (8684 <sd_mmc_spi_send_clock+0x30>)
    8668:	4d07      	ldr	r5, [pc, #28]	; (8688 <sd_mmc_spi_send_clock+0x34>)
    866a:	2201      	movs	r2, #1
    866c:	466b      	mov	r3, sp
    866e:	1dd9      	adds	r1, r3, #7
    8670:	0030      	movs	r0, r6
    8672:	47a8      	blx	r5
    8674:	3c01      	subs	r4, #1
    8676:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    8678:	2c00      	cmp	r4, #0
    867a:	d1f6      	bne.n	866a <sd_mmc_spi_send_clock+0x16>
	}
}
    867c:	b002      	add	sp, #8
    867e:	bd70      	pop	{r4, r5, r6, pc}
    8680:	20000343 	.word	0x20000343
    8684:	20000300 	.word	0x20000300
    8688:	00007f65 	.word	0x00007f65

0000868c <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    868c:	b5f0      	push	{r4, r5, r6, r7, lr}
    868e:	46c6      	mov	lr, r8
    8690:	b500      	push	{lr}
    8692:	b086      	sub	sp, #24
    8694:	4680      	mov	r8, r0
    8696:	9200      	str	r2, [sp, #0]
    8698:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    869a:	22ff      	movs	r2, #255	; 0xff
    869c:	230f      	movs	r3, #15
    869e:	a802      	add	r0, sp, #8
    86a0:	4684      	mov	ip, r0
    86a2:	4463      	add	r3, ip
    86a4:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    86a6:	2200      	movs	r2, #0
    86a8:	4b53      	ldr	r3, [pc, #332]	; (87f8 <sd_mmc_spi_adtc_start+0x16c>)
    86aa:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    86ac:	ab04      	add	r3, sp, #16
    86ae:	323f      	adds	r2, #63	; 0x3f
    86b0:	4640      	mov	r0, r8
    86b2:	4002      	ands	r2, r0
    86b4:	2040      	movs	r0, #64	; 0x40
    86b6:	4302      	orrs	r2, r0
    86b8:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    86ba:	0e0a      	lsrs	r2, r1, #24
    86bc:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    86be:	0c0a      	lsrs	r2, r1, #16
    86c0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    86c2:	0a0a      	lsrs	r2, r1, #8
    86c4:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    86c6:	7119      	strb	r1, [r3, #4]
    86c8:	2700      	movs	r7, #0
	crc = 0;
    86ca:	2300      	movs	r3, #0
		value = *buf++;
    86cc:	a904      	add	r1, sp, #16
    86ce:	2208      	movs	r2, #8
				crc ^= 0x09;
    86d0:	2409      	movs	r4, #9
    86d2:	e011      	b.n	86f8 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    86d4:	0076      	lsls	r6, r6, #1
    86d6:	b2f6      	uxtb	r6, r6
    86d8:	3801      	subs	r0, #1
    86da:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    86dc:	2800      	cmp	r0, #0
    86de:	d008      	beq.n	86f2 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    86e0:	005b      	lsls	r3, r3, #1
    86e2:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    86e4:	001d      	movs	r5, r3
    86e6:	4075      	eors	r5, r6
    86e8:	062d      	lsls	r5, r5, #24
    86ea:	d5f3      	bpl.n	86d4 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    86ec:	4063      	eors	r3, r4
    86ee:	b2db      	uxtb	r3, r3
    86f0:	e7f0      	b.n	86d4 <sd_mmc_spi_adtc_start+0x48>
    86f2:	3701      	adds	r7, #1
	while (size--) {
    86f4:	2f05      	cmp	r7, #5
    86f6:	d002      	beq.n	86fe <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    86f8:	5c7e      	ldrb	r6, [r7, r1]
    86fa:	0010      	movs	r0, r2
    86fc:	e7f0      	b.n	86e0 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    86fe:	005b      	lsls	r3, r3, #1
    8700:	2201      	movs	r2, #1
    8702:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    8704:	ac04      	add	r4, sp, #16
    8706:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    8708:	4e3c      	ldr	r6, [pc, #240]	; (87fc <sd_mmc_spi_adtc_start+0x170>)
    870a:	2201      	movs	r2, #1
    870c:	210f      	movs	r1, #15
    870e:	ab02      	add	r3, sp, #8
    8710:	469c      	mov	ip, r3
    8712:	4461      	add	r1, ip
    8714:	0030      	movs	r0, r6
    8716:	4f3a      	ldr	r7, [pc, #232]	; (8800 <sd_mmc_spi_adtc_start+0x174>)
    8718:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    871a:	2206      	movs	r2, #6
    871c:	0021      	movs	r1, r4
    871e:	0030      	movs	r0, r6
    8720:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    8722:	ab02      	add	r3, sp, #8
    8724:	1dd9      	adds	r1, r3, #7
    8726:	23ff      	movs	r3, #255	; 0xff
    8728:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    872a:	2201      	movs	r2, #1
    872c:	0030      	movs	r0, r6
    872e:	4e35      	ldr	r6, [pc, #212]	; (8804 <sd_mmc_spi_adtc_start+0x178>)
    8730:	47b0      	blx	r6
    8732:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    8734:	ab02      	add	r3, sp, #8
    8736:	1dde      	adds	r6, r3, #7
    8738:	4f30      	ldr	r7, [pc, #192]	; (87fc <sd_mmc_spi_adtc_start+0x170>)
    873a:	4d32      	ldr	r5, [pc, #200]	; (8804 <sd_mmc_spi_adtc_start+0x178>)
    873c:	23ff      	movs	r3, #255	; 0xff
    873e:	2201      	movs	r2, #1
    8740:	0031      	movs	r1, r6
    8742:	0038      	movs	r0, r7
    8744:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    8746:	7833      	ldrb	r3, [r6, #0]
    8748:	b25a      	sxtb	r2, r3
    874a:	2a00      	cmp	r2, #0
    874c:	da0b      	bge.n	8766 <sd_mmc_spi_adtc_start+0xda>
    874e:	3c01      	subs	r4, #1
    8750:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    8752:	2c00      	cmp	r4, #0
    8754:	d1f2      	bne.n	873c <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    8756:	2202      	movs	r2, #2
    8758:	4b27      	ldr	r3, [pc, #156]	; (87f8 <sd_mmc_spi_adtc_start+0x16c>)
    875a:	701a      	strb	r2, [r3, #0]
			return false;
    875c:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    875e:	b006      	add	sp, #24
    8760:	bc04      	pop	{r2}
    8762:	4690      	mov	r8, r2
    8764:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    8766:	4a28      	ldr	r2, [pc, #160]	; (8808 <sd_mmc_spi_adtc_start+0x17c>)
    8768:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    876a:	071a      	lsls	r2, r3, #28
    876c:	d41a      	bmi.n	87a4 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    876e:	075a      	lsls	r2, r3, #29
    8770:	d41d      	bmi.n	87ae <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    8772:	2201      	movs	r2, #1
    8774:	4393      	bics	r3, r2
    8776:	d11f      	bne.n	87b8 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    8778:	4643      	mov	r3, r8
    877a:	049b      	lsls	r3, r3, #18
    877c:	d420      	bmi.n	87c0 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    877e:	4643      	mov	r3, r8
    8780:	059b      	lsls	r3, r3, #22
    8782:	d425      	bmi.n	87d0 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    8784:	4643      	mov	r3, r8
    8786:	055b      	lsls	r3, r3, #21
    8788:	d42b      	bmi.n	87e2 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    878a:	4b20      	ldr	r3, [pc, #128]	; (880c <sd_mmc_spi_adtc_start+0x180>)
    878c:	466a      	mov	r2, sp
    878e:	8812      	ldrh	r2, [r2, #0]
    8790:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    8792:	4b1f      	ldr	r3, [pc, #124]	; (8810 <sd_mmc_spi_adtc_start+0x184>)
    8794:	466a      	mov	r2, sp
    8796:	8892      	ldrh	r2, [r2, #4]
    8798:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    879a:	2200      	movs	r2, #0
    879c:	4b1d      	ldr	r3, [pc, #116]	; (8814 <sd_mmc_spi_adtc_start+0x188>)
    879e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    87a0:	2001      	movs	r0, #1
    87a2:	e7dc      	b.n	875e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    87a4:	2206      	movs	r2, #6
    87a6:	4b14      	ldr	r3, [pc, #80]	; (87f8 <sd_mmc_spi_adtc_start+0x16c>)
    87a8:	701a      	strb	r2, [r3, #0]
		return false;
    87aa:	2000      	movs	r0, #0
    87ac:	e7d7      	b.n	875e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    87ae:	2209      	movs	r2, #9
    87b0:	4b11      	ldr	r3, [pc, #68]	; (87f8 <sd_mmc_spi_adtc_start+0x16c>)
    87b2:	701a      	strb	r2, [r3, #0]
		return false;
    87b4:	2000      	movs	r0, #0
    87b6:	e7d2      	b.n	875e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    87b8:	4b0f      	ldr	r3, [pc, #60]	; (87f8 <sd_mmc_spi_adtc_start+0x16c>)
    87ba:	701a      	strb	r2, [r3, #0]
		return false;
    87bc:	2000      	movs	r0, #0
    87be:	e7ce      	b.n	875e <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    87c0:	4b15      	ldr	r3, [pc, #84]	; (8818 <sd_mmc_spi_adtc_start+0x18c>)
    87c2:	4798      	blx	r3
    87c4:	2800      	cmp	r0, #0
    87c6:	d1da      	bne.n	877e <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    87c8:	2203      	movs	r2, #3
    87ca:	4b0b      	ldr	r3, [pc, #44]	; (87f8 <sd_mmc_spi_adtc_start+0x16c>)
    87cc:	701a      	strb	r2, [r3, #0]
			return false;
    87ce:	e7c6      	b.n	875e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    87d0:	490d      	ldr	r1, [pc, #52]	; (8808 <sd_mmc_spi_adtc_start+0x17c>)
    87d2:	2300      	movs	r3, #0
    87d4:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    87d6:	33ff      	adds	r3, #255	; 0xff
    87d8:	2201      	movs	r2, #1
    87da:	4808      	ldr	r0, [pc, #32]	; (87fc <sd_mmc_spi_adtc_start+0x170>)
    87dc:	4e09      	ldr	r6, [pc, #36]	; (8804 <sd_mmc_spi_adtc_start+0x178>)
    87de:	47b0      	blx	r6
    87e0:	e7d0      	b.n	8784 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    87e2:	4e09      	ldr	r6, [pc, #36]	; (8808 <sd_mmc_spi_adtc_start+0x17c>)
    87e4:	23ff      	movs	r3, #255	; 0xff
    87e6:	2204      	movs	r2, #4
    87e8:	0031      	movs	r1, r6
    87ea:	4804      	ldr	r0, [pc, #16]	; (87fc <sd_mmc_spi_adtc_start+0x170>)
    87ec:	4f05      	ldr	r7, [pc, #20]	; (8804 <sd_mmc_spi_adtc_start+0x178>)
    87ee:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    87f0:	6833      	ldr	r3, [r6, #0]
    87f2:	ba1b      	rev	r3, r3
    87f4:	6033      	str	r3, [r6, #0]
    87f6:	e7c8      	b.n	878a <sd_mmc_spi_adtc_start+0xfe>
    87f8:	20000343 	.word	0x20000343
    87fc:	20000300 	.word	0x20000300
    8800:	00007f65 	.word	0x00007f65
    8804:	00007d55 	.word	0x00007d55
    8808:	20000348 	.word	0x20000348
    880c:	2000033c 	.word	0x2000033c
    8810:	20000344 	.word	0x20000344
    8814:	2000034c 	.word	0x2000034c
    8818:	00008315 	.word	0x00008315

0000881c <sd_mmc_spi_send_cmd>:
{
    881c:	b510      	push	{r4, lr}
    881e:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    8820:	2300      	movs	r3, #0
    8822:	9300      	str	r3, [sp, #0]
    8824:	2200      	movs	r2, #0
    8826:	4c02      	ldr	r4, [pc, #8]	; (8830 <sd_mmc_spi_send_cmd+0x14>)
    8828:	47a0      	blx	r4
}
    882a:	b002      	add	sp, #8
    882c:	bd10      	pop	{r4, pc}
    882e:	46c0      	nop			; (mov r8, r8)
    8830:	0000868d 	.word	0x0000868d

00008834 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    8834:	4b01      	ldr	r3, [pc, #4]	; (883c <sd_mmc_spi_get_response+0x8>)
    8836:	6818      	ldr	r0, [r3, #0]
}
    8838:	4770      	bx	lr
    883a:	46c0      	nop			; (mov r8, r8)
    883c:	20000348 	.word	0x20000348

00008840 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    8840:	b510      	push	{r4, lr}
    8842:	b084      	sub	sp, #16
    8844:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8846:	2200      	movs	r2, #0
    8848:	4b14      	ldr	r3, [pc, #80]	; (889c <sd_mmc_spi_read_word+0x5c>)
    884a:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    884c:	4b14      	ldr	r3, [pc, #80]	; (88a0 <sd_mmc_spi_read_word+0x60>)
    884e:	8819      	ldrh	r1, [r3, #0]
    8850:	4b14      	ldr	r3, [pc, #80]	; (88a4 <sd_mmc_spi_read_word+0x64>)
    8852:	6818      	ldr	r0, [r3, #0]
    8854:	4b14      	ldr	r3, [pc, #80]	; (88a8 <sd_mmc_spi_read_word+0x68>)
    8856:	4798      	blx	r3
    8858:	2900      	cmp	r1, #0
    885a:	d103      	bne.n	8864 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    885c:	4b13      	ldr	r3, [pc, #76]	; (88ac <sd_mmc_spi_read_word+0x6c>)
    885e:	4798      	blx	r3
    8860:	2800      	cmp	r0, #0
    8862:	d010      	beq.n	8886 <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    8864:	23ff      	movs	r3, #255	; 0xff
    8866:	2204      	movs	r2, #4
    8868:	a901      	add	r1, sp, #4
    886a:	4811      	ldr	r0, [pc, #68]	; (88b0 <sd_mmc_spi_read_word+0x70>)
    886c:	4c11      	ldr	r4, [pc, #68]	; (88b4 <sd_mmc_spi_read_word+0x74>)
    886e:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    8870:	4b0c      	ldr	r3, [pc, #48]	; (88a4 <sd_mmc_spi_read_word+0x64>)
    8872:	681a      	ldr	r2, [r3, #0]
    8874:	1d10      	adds	r0, r2, #4
    8876:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    8878:	4b09      	ldr	r3, [pc, #36]	; (88a0 <sd_mmc_spi_read_word+0x60>)
    887a:	8819      	ldrh	r1, [r3, #0]
    887c:	4b0a      	ldr	r3, [pc, #40]	; (88a8 <sd_mmc_spi_read_word+0x68>)
    887e:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    8880:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    8882:	2900      	cmp	r1, #0
    8884:	d001      	beq.n	888a <sd_mmc_spi_read_word+0x4a>
}
    8886:	b004      	add	sp, #16
    8888:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    888a:	23ff      	movs	r3, #255	; 0xff
    888c:	2202      	movs	r2, #2
    888e:	a903      	add	r1, sp, #12
    8890:	4807      	ldr	r0, [pc, #28]	; (88b0 <sd_mmc_spi_read_word+0x70>)
    8892:	4c08      	ldr	r4, [pc, #32]	; (88b4 <sd_mmc_spi_read_word+0x74>)
    8894:	47a0      	blx	r4
	return true;
    8896:	2001      	movs	r0, #1
    8898:	e7f5      	b.n	8886 <sd_mmc_spi_read_word+0x46>
    889a:	46c0      	nop			; (mov r8, r8)
    889c:	20000343 	.word	0x20000343
    88a0:	2000033c 	.word	0x2000033c
    88a4:	2000034c 	.word	0x2000034c
    88a8:	00009171 	.word	0x00009171
    88ac:	000083f1 	.word	0x000083f1
    88b0:	20000300 	.word	0x20000300
    88b4:	00007d55 	.word	0x00007d55

000088b8 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    88b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    88ba:	46de      	mov	lr, fp
    88bc:	4657      	mov	r7, sl
    88be:	4646      	mov	r6, r8
    88c0:	b5c0      	push	{r6, r7, lr}
    88c2:	b082      	sub	sp, #8
    88c4:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    88c6:	2200      	movs	r2, #0
    88c8:	4b17      	ldr	r3, [pc, #92]	; (8928 <sd_mmc_spi_start_read_blocks+0x70>)
    88ca:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    88cc:	1e4c      	subs	r4, r1, #1
    88ce:	b2a4      	uxth	r4, r4
    88d0:	2900      	cmp	r1, #0
    88d2:	d026      	beq.n	8922 <sd_mmc_spi_start_read_blocks+0x6a>
    88d4:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    88d6:	4b15      	ldr	r3, [pc, #84]	; (892c <sd_mmc_spi_start_read_blocks+0x74>)
    88d8:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    88da:	4f15      	ldr	r7, [pc, #84]	; (8930 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    88dc:	47d0      	blx	sl
    88de:	4680      	mov	r8, r0
    88e0:	2800      	cmp	r0, #0
    88e2:	d017      	beq.n	8914 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    88e4:	883a      	ldrh	r2, [r7, #0]
    88e6:	465b      	mov	r3, fp
    88e8:	1999      	adds	r1, r3, r6
    88ea:	23ff      	movs	r3, #255	; 0xff
    88ec:	4811      	ldr	r0, [pc, #68]	; (8934 <sd_mmc_spi_start_read_blocks+0x7c>)
    88ee:	4d12      	ldr	r5, [pc, #72]	; (8938 <sd_mmc_spi_start_read_blocks+0x80>)
    88f0:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    88f2:	883b      	ldrh	r3, [r7, #0]
    88f4:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    88f6:	4a11      	ldr	r2, [pc, #68]	; (893c <sd_mmc_spi_start_read_blocks+0x84>)
    88f8:	6811      	ldr	r1, [r2, #0]
    88fa:	468c      	mov	ip, r1
    88fc:	4463      	add	r3, ip
    88fe:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    8900:	23ff      	movs	r3, #255	; 0xff
    8902:	2202      	movs	r2, #2
    8904:	a901      	add	r1, sp, #4
    8906:	480b      	ldr	r0, [pc, #44]	; (8934 <sd_mmc_spi_start_read_blocks+0x7c>)
    8908:	47a8      	blx	r5
	while (nb_block--) {
    890a:	3c01      	subs	r4, #1
    890c:	b2a4      	uxth	r4, r4
    890e:	4b0c      	ldr	r3, [pc, #48]	; (8940 <sd_mmc_spi_start_read_blocks+0x88>)
    8910:	429c      	cmp	r4, r3
    8912:	d1e3      	bne.n	88dc <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    8914:	4640      	mov	r0, r8
    8916:	b002      	add	sp, #8
    8918:	bc1c      	pop	{r2, r3, r4}
    891a:	4690      	mov	r8, r2
    891c:	469a      	mov	sl, r3
    891e:	46a3      	mov	fp, r4
    8920:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    8922:	2301      	movs	r3, #1
    8924:	4698      	mov	r8, r3
    8926:	e7f5      	b.n	8914 <sd_mmc_spi_start_read_blocks+0x5c>
    8928:	20000343 	.word	0x20000343
    892c:	000083f1 	.word	0x000083f1
    8930:	2000033c 	.word	0x2000033c
    8934:	20000300 	.word	0x20000300
    8938:	00007d55 	.word	0x00007d55
    893c:	2000034c 	.word	0x2000034c
    8940:	0000ffff 	.word	0x0000ffff

00008944 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    8944:	2001      	movs	r0, #1
    8946:	4770      	bx	lr

00008948 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    8948:	b5f0      	push	{r4, r5, r6, r7, lr}
    894a:	46c6      	mov	lr, r8
    894c:	b500      	push	{lr}
    894e:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8950:	2200      	movs	r2, #0
    8952:	4b15      	ldr	r3, [pc, #84]	; (89a8 <sd_mmc_spi_start_write_blocks+0x60>)
    8954:	701a      	strb	r2, [r3, #0]
	pos = 0;
    8956:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    8958:	4f14      	ldr	r7, [pc, #80]	; (89ac <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    895a:	4e15      	ldr	r6, [pc, #84]	; (89b0 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    895c:	e000      	b.n	8960 <sd_mmc_spi_start_write_blocks+0x18>
{
    895e:	0021      	movs	r1, r4
	while (nb_block--) {
    8960:	1e4c      	subs	r4, r1, #1
    8962:	b2a4      	uxth	r4, r4
    8964:	2900      	cmp	r1, #0
    8966:	d01b      	beq.n	89a0 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    8968:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    896a:	8832      	ldrh	r2, [r6, #0]
    896c:	4643      	mov	r3, r8
    896e:	1959      	adds	r1, r3, r5
    8970:	4810      	ldr	r0, [pc, #64]	; (89b4 <sd_mmc_spi_start_write_blocks+0x6c>)
    8972:	4b11      	ldr	r3, [pc, #68]	; (89b8 <sd_mmc_spi_start_write_blocks+0x70>)
    8974:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    8976:	8833      	ldrh	r3, [r6, #0]
    8978:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    897a:	4a10      	ldr	r2, [pc, #64]	; (89bc <sd_mmc_spi_start_write_blocks+0x74>)
    897c:	6811      	ldr	r1, [r2, #0]
    897e:	468c      	mov	ip, r1
    8980:	4463      	add	r3, ip
    8982:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    8984:	4b0e      	ldr	r3, [pc, #56]	; (89c0 <sd_mmc_spi_start_write_blocks+0x78>)
    8986:	4798      	blx	r3
    8988:	2800      	cmp	r0, #0
    898a:	d00a      	beq.n	89a2 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    898c:	2c00      	cmp	r4, #0
    898e:	d0e6      	beq.n	895e <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    8990:	4b0c      	ldr	r3, [pc, #48]	; (89c4 <sd_mmc_spi_start_write_blocks+0x7c>)
    8992:	4798      	blx	r3
    8994:	2800      	cmp	r0, #0
    8996:	d1e2      	bne.n	895e <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    8998:	2205      	movs	r2, #5
    899a:	4b03      	ldr	r3, [pc, #12]	; (89a8 <sd_mmc_spi_start_write_blocks+0x60>)
    899c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    899e:	e000      	b.n	89a2 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    89a0:	2001      	movs	r0, #1
}
    89a2:	bc04      	pop	{r2}
    89a4:	4690      	mov	r8, r2
    89a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89a8:	20000343 	.word	0x20000343
    89ac:	000082cd 	.word	0x000082cd
    89b0:	2000033c 	.word	0x2000033c
    89b4:	20000300 	.word	0x20000300
    89b8:	00007f65 	.word	0x00007f65
    89bc:	2000034c 	.word	0x2000034c
    89c0:	0000845d 	.word	0x0000845d
    89c4:	00008315 	.word	0x00008315

000089c8 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    89c8:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    89ca:	4b05      	ldr	r3, [pc, #20]	; (89e0 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    89cc:	4798      	blx	r3
    89ce:	2800      	cmp	r0, #0
    89d0:	d103      	bne.n	89da <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    89d2:	2205      	movs	r2, #5
    89d4:	4b03      	ldr	r3, [pc, #12]	; (89e4 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    89d6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    89d8:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    89da:	4b03      	ldr	r3, [pc, #12]	; (89e8 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    89dc:	4798      	blx	r3
    89de:	e7fb      	b.n	89d8 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    89e0:	00008315 	.word	0x00008315
    89e4:	20000343 	.word	0x20000343
    89e8:	00008379 	.word	0x00008379

000089ec <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
    89ec:	2001      	movs	r0, #1
    89ee:	4770      	bx	lr

000089f0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    89f0:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    89f2:	2301      	movs	r3, #1
    89f4:	2800      	cmp	r0, #0
    89f6:	d001      	beq.n	89fc <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    89f8:	0018      	movs	r0, r3
    89fa:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    89fc:	4b01      	ldr	r3, [pc, #4]	; (8a04 <mem_test_unit_ready+0x14>)
    89fe:	4798      	blx	r3
    8a00:	0003      	movs	r3, r0
    8a02:	e7f9      	b.n	89f8 <mem_test_unit_ready+0x8>
    8a04:	000081c9 	.word	0x000081c9

00008a08 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    8a08:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    8a0a:	2301      	movs	r3, #1
    8a0c:	2800      	cmp	r0, #0
    8a0e:	d001      	beq.n	8a14 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    8a10:	0018      	movs	r0, r3
    8a12:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    8a14:	0008      	movs	r0, r1
    8a16:	4b02      	ldr	r3, [pc, #8]	; (8a20 <mem_read_capacity+0x18>)
    8a18:	4798      	blx	r3
    8a1a:	0003      	movs	r3, r0
    8a1c:	e7f8      	b.n	8a10 <mem_read_capacity+0x8>
    8a1e:	46c0      	nop			; (mov r8, r8)
    8a20:	000081f9 	.word	0x000081f9

00008a24 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    8a24:	4243      	negs	r3, r0
    8a26:	4158      	adcs	r0, r3
    8a28:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    8a2a:	4770      	bx	lr

00008a2c <mem_unload>:


bool mem_unload(U8 lun, bool unload)
{
    8a2c:	0003      	movs	r3, r0

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    8a2e:	2000      	movs	r0, #0
    8a30:	2b00      	cmp	r3, #0
    8a32:	d101      	bne.n	8a38 <mem_unload+0xc>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
    8a34:	3001      	adds	r0, #1
    8a36:	4048      	eors	r0, r1
#endif

  Ctrl_access_unlock();

  return unloaded;
}
    8a38:	4770      	bx	lr
	...

00008a3c <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    8a3c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    8a3e:	2301      	movs	r3, #1
    8a40:	2800      	cmp	r0, #0
    8a42:	d001      	beq.n	8a48 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    8a44:	0018      	movs	r0, r3
    8a46:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    8a48:	4b01      	ldr	r3, [pc, #4]	; (8a50 <mem_wr_protect+0x14>)
    8a4a:	4798      	blx	r3
    8a4c:	0003      	movs	r3, r0
    8a4e:	e7f9      	b.n	8a44 <mem_wr_protect+0x8>
    8a50:	00008209 	.word	0x00008209

00008a54 <mem_removal>:


bool mem_removal(U8 lun)
{
    8a54:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    8a56:	2301      	movs	r3, #1
    8a58:	2800      	cmp	r0, #0
    8a5a:	d001      	beq.n	8a60 <mem_removal+0xc>
#endif

  Ctrl_access_unlock();

  return removal;
}
    8a5c:	0018      	movs	r0, r3
    8a5e:	bd10      	pop	{r4, pc}
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    8a60:	4b01      	ldr	r3, [pc, #4]	; (8a68 <mem_removal+0x14>)
    8a62:	4798      	blx	r3
    8a64:	0003      	movs	r3, r0
    8a66:	e7f9      	b.n	8a5c <mem_removal+0x8>
    8a68:	00008219 	.word	0x00008219

00008a6c <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    8a6c:	2800      	cmp	r0, #0
    8a6e:	d101      	bne.n	8a74 <mem_name+0x8>
    8a70:	4801      	ldr	r0, [pc, #4]	; (8a78 <mem_name+0xc>)
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    8a72:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
    8a74:	2000      	movs	r0, #0
    8a76:	e7fc      	b.n	8a72 <mem_name+0x6>
    8a78:	0000afb4 	.word	0x0000afb4

00008a7c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    8a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a7e:	0005      	movs	r5, r0
    8a80:	000e      	movs	r6, r1
    8a82:	0017      	movs	r7, r2
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
    8a84:	4b07      	ldr	r3, [pc, #28]	; (8aa4 <memory_2_ram+0x28>)
    8a86:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    8a88:	2401      	movs	r4, #1
    8a8a:	2d00      	cmp	r5, #0
    8a8c:	d003      	beq.n	8a96 <memory_2_ram+0x1a>
#if LUN_USB == ENABLE
                             Lun_usb_mem_2_ram(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_read_action();
    8a8e:	4b06      	ldr	r3, [pc, #24]	; (8aa8 <memory_2_ram+0x2c>)
    8a90:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    8a92:	0020      	movs	r0, r4
    8a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    8a96:	0039      	movs	r1, r7
    8a98:	0030      	movs	r0, r6
    8a9a:	4b04      	ldr	r3, [pc, #16]	; (8aac <memory_2_ram+0x30>)
    8a9c:	4798      	blx	r3
    8a9e:	0004      	movs	r4, r0
    8aa0:	e7f5      	b.n	8a8e <memory_2_ram+0x12>
    8aa2:	46c0      	nop			; (mov r8, r8)
    8aa4:	0000678d 	.word	0x0000678d
    8aa8:	0000678f 	.word	0x0000678f
    8aac:	00008261 	.word	0x00008261

00008ab0 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    8ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ab2:	0005      	movs	r5, r0
    8ab4:	000e      	movs	r6, r1
    8ab6:	0017      	movs	r7, r2
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
    8ab8:	4b07      	ldr	r3, [pc, #28]	; (8ad8 <ram_2_memory+0x28>)
    8aba:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    8abc:	2401      	movs	r4, #1
    8abe:	2d00      	cmp	r5, #0
    8ac0:	d003      	beq.n	8aca <ram_2_memory+0x1a>
#if LUN_USB == ENABLE
                             Lun_usb_ram_2_mem(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_write_action();
    8ac2:	4b06      	ldr	r3, [pc, #24]	; (8adc <ram_2_memory+0x2c>)
    8ac4:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    8ac6:	0020      	movs	r0, r4
    8ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    8aca:	0039      	movs	r1, r7
    8acc:	0030      	movs	r0, r6
    8ace:	4b04      	ldr	r3, [pc, #16]	; (8ae0 <ram_2_memory+0x30>)
    8ad0:	4798      	blx	r3
    8ad2:	0004      	movs	r4, r0
    8ad4:	e7f5      	b.n	8ac2 <ram_2_memory+0x12>
    8ad6:	46c0      	nop			; (mov r8, r8)
    8ad8:	00006791 	.word	0x00006791
    8adc:	00006793 	.word	0x00006793
    8ae0:	000082b9 	.word	0x000082b9

00008ae4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    8ae4:	4b0c      	ldr	r3, [pc, #48]	; (8b18 <cpu_irq_enter_critical+0x34>)
    8ae6:	681b      	ldr	r3, [r3, #0]
    8ae8:	2b00      	cmp	r3, #0
    8aea:	d106      	bne.n	8afa <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8aec:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    8af0:	2b00      	cmp	r3, #0
    8af2:	d007      	beq.n	8b04 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    8af4:	2200      	movs	r2, #0
    8af6:	4b09      	ldr	r3, [pc, #36]	; (8b1c <cpu_irq_enter_critical+0x38>)
    8af8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    8afa:	4a07      	ldr	r2, [pc, #28]	; (8b18 <cpu_irq_enter_critical+0x34>)
    8afc:	6813      	ldr	r3, [r2, #0]
    8afe:	3301      	adds	r3, #1
    8b00:	6013      	str	r3, [r2, #0]
}
    8b02:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    8b04:	b672      	cpsid	i
    8b06:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    8b0a:	2200      	movs	r2, #0
    8b0c:	4b04      	ldr	r3, [pc, #16]	; (8b20 <cpu_irq_enter_critical+0x3c>)
    8b0e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    8b10:	3201      	adds	r2, #1
    8b12:	4b02      	ldr	r3, [pc, #8]	; (8b1c <cpu_irq_enter_critical+0x38>)
    8b14:	701a      	strb	r2, [r3, #0]
    8b16:	e7f0      	b.n	8afa <cpu_irq_enter_critical+0x16>
    8b18:	20000354 	.word	0x20000354
    8b1c:	20000358 	.word	0x20000358
    8b20:	20000125 	.word	0x20000125

00008b24 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    8b24:	4b08      	ldr	r3, [pc, #32]	; (8b48 <cpu_irq_leave_critical+0x24>)
    8b26:	681a      	ldr	r2, [r3, #0]
    8b28:	3a01      	subs	r2, #1
    8b2a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    8b2c:	681b      	ldr	r3, [r3, #0]
    8b2e:	2b00      	cmp	r3, #0
    8b30:	d109      	bne.n	8b46 <cpu_irq_leave_critical+0x22>
    8b32:	4b06      	ldr	r3, [pc, #24]	; (8b4c <cpu_irq_leave_critical+0x28>)
    8b34:	781b      	ldrb	r3, [r3, #0]
    8b36:	2b00      	cmp	r3, #0
    8b38:	d005      	beq.n	8b46 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    8b3a:	2201      	movs	r2, #1
    8b3c:	4b04      	ldr	r3, [pc, #16]	; (8b50 <cpu_irq_leave_critical+0x2c>)
    8b3e:	701a      	strb	r2, [r3, #0]
    8b40:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8b44:	b662      	cpsie	i
	}
}
    8b46:	4770      	bx	lr
    8b48:	20000354 	.word	0x20000354
    8b4c:	20000358 	.word	0x20000358
    8b50:	20000125 	.word	0x20000125

00008b54 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    8b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b56:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    8b58:	ac01      	add	r4, sp, #4
    8b5a:	2501      	movs	r5, #1
    8b5c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    8b5e:	2700      	movs	r7, #0
    8b60:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    8b62:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    8b64:	0021      	movs	r1, r4
    8b66:	203e      	movs	r0, #62	; 0x3e
    8b68:	4e06      	ldr	r6, [pc, #24]	; (8b84 <system_board_init+0x30>)
    8b6a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    8b6c:	2280      	movs	r2, #128	; 0x80
    8b6e:	05d2      	lsls	r2, r2, #23
    8b70:	4b05      	ldr	r3, [pc, #20]	; (8b88 <system_board_init+0x34>)
    8b72:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    8b74:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    8b76:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    8b78:	0021      	movs	r1, r4
    8b7a:	200f      	movs	r0, #15
    8b7c:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    8b7e:	b003      	add	sp, #12
    8b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b82:	46c0      	nop			; (mov r8, r8)
    8b84:	00008b8d 	.word	0x00008b8d
    8b88:	41004480 	.word	0x41004480

00008b8c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    8b8c:	b500      	push	{lr}
    8b8e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8b90:	ab01      	add	r3, sp, #4
    8b92:	2280      	movs	r2, #128	; 0x80
    8b94:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    8b96:	780a      	ldrb	r2, [r1, #0]
    8b98:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    8b9a:	784a      	ldrb	r2, [r1, #1]
    8b9c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    8b9e:	788a      	ldrb	r2, [r1, #2]
    8ba0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    8ba2:	0019      	movs	r1, r3
    8ba4:	4b01      	ldr	r3, [pc, #4]	; (8bac <port_pin_set_config+0x20>)
    8ba6:	4798      	blx	r3
}
    8ba8:	b003      	add	sp, #12
    8baa:	bd00      	pop	{pc}
    8bac:	00008ee1 	.word	0x00008ee1

00008bb0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    8bb0:	4a06      	ldr	r2, [pc, #24]	; (8bcc <system_gclk_init+0x1c>)
    8bb2:	6993      	ldr	r3, [r2, #24]
    8bb4:	2108      	movs	r1, #8
    8bb6:	430b      	orrs	r3, r1
    8bb8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    8bba:	2201      	movs	r2, #1
    8bbc:	4b04      	ldr	r3, [pc, #16]	; (8bd0 <system_gclk_init+0x20>)
    8bbe:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    8bc0:	0019      	movs	r1, r3
    8bc2:	780b      	ldrb	r3, [r1, #0]
    8bc4:	4213      	tst	r3, r2
    8bc6:	d1fc      	bne.n	8bc2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    8bc8:	4770      	bx	lr
    8bca:	46c0      	nop			; (mov r8, r8)
    8bcc:	40000400 	.word	0x40000400
    8bd0:	40000c00 	.word	0x40000c00

00008bd4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    8bd4:	b570      	push	{r4, r5, r6, lr}
    8bd6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    8bd8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    8bda:	780d      	ldrb	r5, [r1, #0]
    8bdc:	022d      	lsls	r5, r5, #8
    8bde:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    8be0:	784b      	ldrb	r3, [r1, #1]
    8be2:	2b00      	cmp	r3, #0
    8be4:	d002      	beq.n	8bec <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    8be6:	2380      	movs	r3, #128	; 0x80
    8be8:	02db      	lsls	r3, r3, #11
    8bea:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    8bec:	7a4b      	ldrb	r3, [r1, #9]
    8bee:	2b00      	cmp	r3, #0
    8bf0:	d002      	beq.n	8bf8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    8bf2:	2380      	movs	r3, #128	; 0x80
    8bf4:	031b      	lsls	r3, r3, #12
    8bf6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    8bf8:	6848      	ldr	r0, [r1, #4]
    8bfa:	2801      	cmp	r0, #1
    8bfc:	d910      	bls.n	8c20 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    8bfe:	1e43      	subs	r3, r0, #1
    8c00:	4218      	tst	r0, r3
    8c02:	d134      	bne.n	8c6e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    8c04:	2802      	cmp	r0, #2
    8c06:	d930      	bls.n	8c6a <system_gclk_gen_set_config+0x96>
    8c08:	2302      	movs	r3, #2
    8c0a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    8c0c:	3201      	adds	r2, #1
						mask <<= 1) {
    8c0e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    8c10:	4298      	cmp	r0, r3
    8c12:	d8fb      	bhi.n	8c0c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    8c14:	0212      	lsls	r2, r2, #8
    8c16:	4332      	orrs	r2, r6
    8c18:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    8c1a:	2380      	movs	r3, #128	; 0x80
    8c1c:	035b      	lsls	r3, r3, #13
    8c1e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    8c20:	7a0b      	ldrb	r3, [r1, #8]
    8c22:	2b00      	cmp	r3, #0
    8c24:	d002      	beq.n	8c2c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    8c26:	2380      	movs	r3, #128	; 0x80
    8c28:	039b      	lsls	r3, r3, #14
    8c2a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8c2c:	4a13      	ldr	r2, [pc, #76]	; (8c7c <system_gclk_gen_set_config+0xa8>)
    8c2e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    8c30:	b25b      	sxtb	r3, r3
    8c32:	2b00      	cmp	r3, #0
    8c34:	dbfb      	blt.n	8c2e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    8c36:	4b12      	ldr	r3, [pc, #72]	; (8c80 <system_gclk_gen_set_config+0xac>)
    8c38:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8c3a:	4b12      	ldr	r3, [pc, #72]	; (8c84 <system_gclk_gen_set_config+0xb0>)
    8c3c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8c3e:	4a0f      	ldr	r2, [pc, #60]	; (8c7c <system_gclk_gen_set_config+0xa8>)
    8c40:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    8c42:	b25b      	sxtb	r3, r3
    8c44:	2b00      	cmp	r3, #0
    8c46:	dbfb      	blt.n	8c40 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    8c48:	4b0c      	ldr	r3, [pc, #48]	; (8c7c <system_gclk_gen_set_config+0xa8>)
    8c4a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8c4c:	001a      	movs	r2, r3
    8c4e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    8c50:	b25b      	sxtb	r3, r3
    8c52:	2b00      	cmp	r3, #0
    8c54:	dbfb      	blt.n	8c4e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    8c56:	4a09      	ldr	r2, [pc, #36]	; (8c7c <system_gclk_gen_set_config+0xa8>)
    8c58:	6853      	ldr	r3, [r2, #4]
    8c5a:	2180      	movs	r1, #128	; 0x80
    8c5c:	0249      	lsls	r1, r1, #9
    8c5e:	400b      	ands	r3, r1
    8c60:	431d      	orrs	r5, r3
    8c62:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    8c64:	4b08      	ldr	r3, [pc, #32]	; (8c88 <system_gclk_gen_set_config+0xb4>)
    8c66:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8c68:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    8c6a:	2200      	movs	r2, #0
    8c6c:	e7d2      	b.n	8c14 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    8c6e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    8c70:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    8c72:	2380      	movs	r3, #128	; 0x80
    8c74:	029b      	lsls	r3, r3, #10
    8c76:	431d      	orrs	r5, r3
    8c78:	e7d2      	b.n	8c20 <system_gclk_gen_set_config+0x4c>
    8c7a:	46c0      	nop			; (mov r8, r8)
    8c7c:	40000c00 	.word	0x40000c00
    8c80:	00008ae5 	.word	0x00008ae5
    8c84:	40000c08 	.word	0x40000c08
    8c88:	00008b25 	.word	0x00008b25

00008c8c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    8c8c:	b510      	push	{r4, lr}
    8c8e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8c90:	4a0b      	ldr	r2, [pc, #44]	; (8cc0 <system_gclk_gen_enable+0x34>)
    8c92:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8c94:	b25b      	sxtb	r3, r3
    8c96:	2b00      	cmp	r3, #0
    8c98:	dbfb      	blt.n	8c92 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    8c9a:	4b0a      	ldr	r3, [pc, #40]	; (8cc4 <system_gclk_gen_enable+0x38>)
    8c9c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8c9e:	4b0a      	ldr	r3, [pc, #40]	; (8cc8 <system_gclk_gen_enable+0x3c>)
    8ca0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8ca2:	4a07      	ldr	r2, [pc, #28]	; (8cc0 <system_gclk_gen_enable+0x34>)
    8ca4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8ca6:	b25b      	sxtb	r3, r3
    8ca8:	2b00      	cmp	r3, #0
    8caa:	dbfb      	blt.n	8ca4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    8cac:	4a04      	ldr	r2, [pc, #16]	; (8cc0 <system_gclk_gen_enable+0x34>)
    8cae:	6851      	ldr	r1, [r2, #4]
    8cb0:	2380      	movs	r3, #128	; 0x80
    8cb2:	025b      	lsls	r3, r3, #9
    8cb4:	430b      	orrs	r3, r1
    8cb6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    8cb8:	4b04      	ldr	r3, [pc, #16]	; (8ccc <system_gclk_gen_enable+0x40>)
    8cba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8cbc:	bd10      	pop	{r4, pc}
    8cbe:	46c0      	nop			; (mov r8, r8)
    8cc0:	40000c00 	.word	0x40000c00
    8cc4:	00008ae5 	.word	0x00008ae5
    8cc8:	40000c04 	.word	0x40000c04
    8ccc:	00008b25 	.word	0x00008b25

00008cd0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    8cd0:	b570      	push	{r4, r5, r6, lr}
    8cd2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8cd4:	4a1a      	ldr	r2, [pc, #104]	; (8d40 <system_gclk_gen_get_hz+0x70>)
    8cd6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8cd8:	b25b      	sxtb	r3, r3
    8cda:	2b00      	cmp	r3, #0
    8cdc:	dbfb      	blt.n	8cd6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    8cde:	4b19      	ldr	r3, [pc, #100]	; (8d44 <system_gclk_gen_get_hz+0x74>)
    8ce0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8ce2:	4b19      	ldr	r3, [pc, #100]	; (8d48 <system_gclk_gen_get_hz+0x78>)
    8ce4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8ce6:	4a16      	ldr	r2, [pc, #88]	; (8d40 <system_gclk_gen_get_hz+0x70>)
    8ce8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8cea:	b25b      	sxtb	r3, r3
    8cec:	2b00      	cmp	r3, #0
    8cee:	dbfb      	blt.n	8ce8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    8cf0:	4e13      	ldr	r6, [pc, #76]	; (8d40 <system_gclk_gen_get_hz+0x70>)
    8cf2:	6870      	ldr	r0, [r6, #4]
    8cf4:	04c0      	lsls	r0, r0, #19
    8cf6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    8cf8:	4b14      	ldr	r3, [pc, #80]	; (8d4c <system_gclk_gen_get_hz+0x7c>)
    8cfa:	4798      	blx	r3
    8cfc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8cfe:	4b12      	ldr	r3, [pc, #72]	; (8d48 <system_gclk_gen_get_hz+0x78>)
    8d00:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    8d02:	6876      	ldr	r6, [r6, #4]
    8d04:	02f6      	lsls	r6, r6, #11
    8d06:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8d08:	4b11      	ldr	r3, [pc, #68]	; (8d50 <system_gclk_gen_get_hz+0x80>)
    8d0a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8d0c:	4a0c      	ldr	r2, [pc, #48]	; (8d40 <system_gclk_gen_get_hz+0x70>)
    8d0e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8d10:	b25b      	sxtb	r3, r3
    8d12:	2b00      	cmp	r3, #0
    8d14:	dbfb      	blt.n	8d0e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    8d16:	4b0a      	ldr	r3, [pc, #40]	; (8d40 <system_gclk_gen_get_hz+0x70>)
    8d18:	689c      	ldr	r4, [r3, #8]
    8d1a:	0224      	lsls	r4, r4, #8
    8d1c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    8d1e:	4b0d      	ldr	r3, [pc, #52]	; (8d54 <system_gclk_gen_get_hz+0x84>)
    8d20:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    8d22:	2e00      	cmp	r6, #0
    8d24:	d107      	bne.n	8d36 <system_gclk_gen_get_hz+0x66>
    8d26:	2c01      	cmp	r4, #1
    8d28:	d907      	bls.n	8d3a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    8d2a:	0021      	movs	r1, r4
    8d2c:	0028      	movs	r0, r5
    8d2e:	4b0a      	ldr	r3, [pc, #40]	; (8d58 <system_gclk_gen_get_hz+0x88>)
    8d30:	4798      	blx	r3
    8d32:	0005      	movs	r5, r0
    8d34:	e001      	b.n	8d3a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    8d36:	3401      	adds	r4, #1
    8d38:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    8d3a:	0028      	movs	r0, r5
    8d3c:	bd70      	pop	{r4, r5, r6, pc}
    8d3e:	46c0      	nop			; (mov r8, r8)
    8d40:	40000c00 	.word	0x40000c00
    8d44:	00008ae5 	.word	0x00008ae5
    8d48:	40000c04 	.word	0x40000c04
    8d4c:	00002be9 	.word	0x00002be9
    8d50:	40000c08 	.word	0x40000c08
    8d54:	00008b25 	.word	0x00008b25
    8d58:	00009065 	.word	0x00009065

00008d5c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    8d5c:	b510      	push	{r4, lr}
    8d5e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8d60:	4b06      	ldr	r3, [pc, #24]	; (8d7c <system_gclk_chan_enable+0x20>)
    8d62:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8d64:	4b06      	ldr	r3, [pc, #24]	; (8d80 <system_gclk_chan_enable+0x24>)
    8d66:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    8d68:	4a06      	ldr	r2, [pc, #24]	; (8d84 <system_gclk_chan_enable+0x28>)
    8d6a:	8853      	ldrh	r3, [r2, #2]
    8d6c:	2180      	movs	r1, #128	; 0x80
    8d6e:	01c9      	lsls	r1, r1, #7
    8d70:	430b      	orrs	r3, r1
    8d72:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    8d74:	4b04      	ldr	r3, [pc, #16]	; (8d88 <system_gclk_chan_enable+0x2c>)
    8d76:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8d78:	bd10      	pop	{r4, pc}
    8d7a:	46c0      	nop			; (mov r8, r8)
    8d7c:	00008ae5 	.word	0x00008ae5
    8d80:	40000c02 	.word	0x40000c02
    8d84:	40000c00 	.word	0x40000c00
    8d88:	00008b25 	.word	0x00008b25

00008d8c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8d8c:	b510      	push	{r4, lr}
    8d8e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8d90:	4b0f      	ldr	r3, [pc, #60]	; (8dd0 <system_gclk_chan_disable+0x44>)
    8d92:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8d94:	4b0f      	ldr	r3, [pc, #60]	; (8dd4 <system_gclk_chan_disable+0x48>)
    8d96:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8d98:	4a0f      	ldr	r2, [pc, #60]	; (8dd8 <system_gclk_chan_disable+0x4c>)
    8d9a:	8853      	ldrh	r3, [r2, #2]
    8d9c:	051b      	lsls	r3, r3, #20
    8d9e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    8da0:	8853      	ldrh	r3, [r2, #2]
    8da2:	490e      	ldr	r1, [pc, #56]	; (8ddc <system_gclk_chan_disable+0x50>)
    8da4:	400b      	ands	r3, r1
    8da6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    8da8:	8853      	ldrh	r3, [r2, #2]
    8daa:	490d      	ldr	r1, [pc, #52]	; (8de0 <system_gclk_chan_disable+0x54>)
    8dac:	400b      	ands	r3, r1
    8dae:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    8db0:	0011      	movs	r1, r2
    8db2:	2280      	movs	r2, #128	; 0x80
    8db4:	01d2      	lsls	r2, r2, #7
    8db6:	884b      	ldrh	r3, [r1, #2]
    8db8:	4213      	tst	r3, r2
    8dba:	d1fc      	bne.n	8db6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    8dbc:	4906      	ldr	r1, [pc, #24]	; (8dd8 <system_gclk_chan_disable+0x4c>)
    8dbe:	884a      	ldrh	r2, [r1, #2]
    8dc0:	0203      	lsls	r3, r0, #8
    8dc2:	4806      	ldr	r0, [pc, #24]	; (8ddc <system_gclk_chan_disable+0x50>)
    8dc4:	4002      	ands	r2, r0
    8dc6:	4313      	orrs	r3, r2
    8dc8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    8dca:	4b06      	ldr	r3, [pc, #24]	; (8de4 <system_gclk_chan_disable+0x58>)
    8dcc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8dce:	bd10      	pop	{r4, pc}
    8dd0:	00008ae5 	.word	0x00008ae5
    8dd4:	40000c02 	.word	0x40000c02
    8dd8:	40000c00 	.word	0x40000c00
    8ddc:	fffff0ff 	.word	0xfffff0ff
    8de0:	ffffbfff 	.word	0xffffbfff
    8de4:	00008b25 	.word	0x00008b25

00008de8 <system_gclk_chan_set_config>:
{
    8de8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    8dea:	780c      	ldrb	r4, [r1, #0]
    8dec:	0224      	lsls	r4, r4, #8
    8dee:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    8df0:	4b02      	ldr	r3, [pc, #8]	; (8dfc <system_gclk_chan_set_config+0x14>)
    8df2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    8df4:	b2a4      	uxth	r4, r4
    8df6:	4b02      	ldr	r3, [pc, #8]	; (8e00 <system_gclk_chan_set_config+0x18>)
    8df8:	805c      	strh	r4, [r3, #2]
}
    8dfa:	bd10      	pop	{r4, pc}
    8dfc:	00008d8d 	.word	0x00008d8d
    8e00:	40000c00 	.word	0x40000c00

00008e04 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8e04:	b510      	push	{r4, lr}
    8e06:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8e08:	4b06      	ldr	r3, [pc, #24]	; (8e24 <system_gclk_chan_get_hz+0x20>)
    8e0a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8e0c:	4b06      	ldr	r3, [pc, #24]	; (8e28 <system_gclk_chan_get_hz+0x24>)
    8e0e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    8e10:	4b06      	ldr	r3, [pc, #24]	; (8e2c <system_gclk_chan_get_hz+0x28>)
    8e12:	885c      	ldrh	r4, [r3, #2]
    8e14:	0524      	lsls	r4, r4, #20
    8e16:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    8e18:	4b05      	ldr	r3, [pc, #20]	; (8e30 <system_gclk_chan_get_hz+0x2c>)
    8e1a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    8e1c:	0020      	movs	r0, r4
    8e1e:	4b05      	ldr	r3, [pc, #20]	; (8e34 <system_gclk_chan_get_hz+0x30>)
    8e20:	4798      	blx	r3
}
    8e22:	bd10      	pop	{r4, pc}
    8e24:	00008ae5 	.word	0x00008ae5
    8e28:	40000c02 	.word	0x40000c02
    8e2c:	40000c00 	.word	0x40000c00
    8e30:	00008b25 	.word	0x00008b25
    8e34:	00008cd1 	.word	0x00008cd1

00008e38 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    8e38:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    8e3a:	78d3      	ldrb	r3, [r2, #3]
    8e3c:	2b00      	cmp	r3, #0
    8e3e:	d135      	bne.n	8eac <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    8e40:	7813      	ldrb	r3, [r2, #0]
    8e42:	2b80      	cmp	r3, #128	; 0x80
    8e44:	d029      	beq.n	8e9a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    8e46:	061b      	lsls	r3, r3, #24
    8e48:	2480      	movs	r4, #128	; 0x80
    8e4a:	0264      	lsls	r4, r4, #9
    8e4c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8e4e:	7854      	ldrb	r4, [r2, #1]
    8e50:	2502      	movs	r5, #2
    8e52:	43ac      	bics	r4, r5
    8e54:	d106      	bne.n	8e64 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    8e56:	7894      	ldrb	r4, [r2, #2]
    8e58:	2c00      	cmp	r4, #0
    8e5a:	d120      	bne.n	8e9e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    8e5c:	2480      	movs	r4, #128	; 0x80
    8e5e:	02a4      	lsls	r4, r4, #10
    8e60:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    8e62:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8e64:	7854      	ldrb	r4, [r2, #1]
    8e66:	3c01      	subs	r4, #1
    8e68:	2c01      	cmp	r4, #1
    8e6a:	d91c      	bls.n	8ea6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8e6c:	040d      	lsls	r5, r1, #16
    8e6e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8e70:	24a0      	movs	r4, #160	; 0xa0
    8e72:	05e4      	lsls	r4, r4, #23
    8e74:	432c      	orrs	r4, r5
    8e76:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8e78:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8e7a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8e7c:	24d0      	movs	r4, #208	; 0xd0
    8e7e:	0624      	lsls	r4, r4, #24
    8e80:	432c      	orrs	r4, r5
    8e82:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8e84:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    8e86:	78d4      	ldrb	r4, [r2, #3]
    8e88:	2c00      	cmp	r4, #0
    8e8a:	d122      	bne.n	8ed2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8e8c:	035b      	lsls	r3, r3, #13
    8e8e:	d51c      	bpl.n	8eca <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    8e90:	7893      	ldrb	r3, [r2, #2]
    8e92:	2b01      	cmp	r3, #1
    8e94:	d01e      	beq.n	8ed4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    8e96:	6141      	str	r1, [r0, #20]
    8e98:	e017      	b.n	8eca <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    8e9a:	2300      	movs	r3, #0
    8e9c:	e7d7      	b.n	8e4e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    8e9e:	24c0      	movs	r4, #192	; 0xc0
    8ea0:	02e4      	lsls	r4, r4, #11
    8ea2:	4323      	orrs	r3, r4
    8ea4:	e7dd      	b.n	8e62 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    8ea6:	4c0d      	ldr	r4, [pc, #52]	; (8edc <_system_pinmux_config+0xa4>)
    8ea8:	4023      	ands	r3, r4
    8eaa:	e7df      	b.n	8e6c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    8eac:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8eae:	040c      	lsls	r4, r1, #16
    8eb0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8eb2:	23a0      	movs	r3, #160	; 0xa0
    8eb4:	05db      	lsls	r3, r3, #23
    8eb6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8eb8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8eba:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8ebc:	23d0      	movs	r3, #208	; 0xd0
    8ebe:	061b      	lsls	r3, r3, #24
    8ec0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8ec2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    8ec4:	78d3      	ldrb	r3, [r2, #3]
    8ec6:	2b00      	cmp	r3, #0
    8ec8:	d103      	bne.n	8ed2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8eca:	7853      	ldrb	r3, [r2, #1]
    8ecc:	3b01      	subs	r3, #1
    8ece:	2b01      	cmp	r3, #1
    8ed0:	d902      	bls.n	8ed8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    8ed2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    8ed4:	6181      	str	r1, [r0, #24]
    8ed6:	e7f8      	b.n	8eca <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    8ed8:	6081      	str	r1, [r0, #8]
}
    8eda:	e7fa      	b.n	8ed2 <_system_pinmux_config+0x9a>
    8edc:	fffbffff 	.word	0xfffbffff

00008ee0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    8ee0:	b510      	push	{r4, lr}
    8ee2:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    8ee4:	09c1      	lsrs	r1, r0, #7
		return NULL;
    8ee6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8ee8:	2900      	cmp	r1, #0
    8eea:	d104      	bne.n	8ef6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    8eec:	0943      	lsrs	r3, r0, #5
    8eee:	01db      	lsls	r3, r3, #7
    8ef0:	4905      	ldr	r1, [pc, #20]	; (8f08 <system_pinmux_pin_set_config+0x28>)
    8ef2:	468c      	mov	ip, r1
    8ef4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    8ef6:	241f      	movs	r4, #31
    8ef8:	4020      	ands	r0, r4
    8efa:	2101      	movs	r1, #1
    8efc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    8efe:	0018      	movs	r0, r3
    8f00:	4b02      	ldr	r3, [pc, #8]	; (8f0c <system_pinmux_pin_set_config+0x2c>)
    8f02:	4798      	blx	r3
}
    8f04:	bd10      	pop	{r4, pc}
    8f06:	46c0      	nop			; (mov r8, r8)
    8f08:	41004400 	.word	0x41004400
    8f0c:	00008e39 	.word	0x00008e39

00008f10 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    8f10:	4770      	bx	lr
	...

00008f14 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    8f14:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    8f16:	4b05      	ldr	r3, [pc, #20]	; (8f2c <system_init+0x18>)
    8f18:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    8f1a:	4b05      	ldr	r3, [pc, #20]	; (8f30 <system_init+0x1c>)
    8f1c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    8f1e:	4b05      	ldr	r3, [pc, #20]	; (8f34 <system_init+0x20>)
    8f20:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    8f22:	4b05      	ldr	r3, [pc, #20]	; (8f38 <system_init+0x24>)
    8f24:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    8f26:	4b05      	ldr	r3, [pc, #20]	; (8f3c <system_init+0x28>)
    8f28:	4798      	blx	r3
}
    8f2a:	bd10      	pop	{r4, pc}
    8f2c:	00002f45 	.word	0x00002f45
    8f30:	00008b55 	.word	0x00008b55
    8f34:	00008f11 	.word	0x00008f11
    8f38:	00002179 	.word	0x00002179
    8f3c:	00008f11 	.word	0x00008f11

00008f40 <Dummy_Handler>:
 */
void Dummy_Handler(void)
{
        //while (1) {
        //}
}
    8f40:	4770      	bx	lr
	...

00008f44 <Reset_Handler>:
{
    8f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    8f46:	4a2a      	ldr	r2, [pc, #168]	; (8ff0 <Reset_Handler+0xac>)
    8f48:	4b2a      	ldr	r3, [pc, #168]	; (8ff4 <Reset_Handler+0xb0>)
    8f4a:	429a      	cmp	r2, r3
    8f4c:	d011      	beq.n	8f72 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    8f4e:	001a      	movs	r2, r3
    8f50:	4b29      	ldr	r3, [pc, #164]	; (8ff8 <Reset_Handler+0xb4>)
    8f52:	429a      	cmp	r2, r3
    8f54:	d20d      	bcs.n	8f72 <Reset_Handler+0x2e>
    8f56:	4a29      	ldr	r2, [pc, #164]	; (8ffc <Reset_Handler+0xb8>)
    8f58:	3303      	adds	r3, #3
    8f5a:	1a9b      	subs	r3, r3, r2
    8f5c:	089b      	lsrs	r3, r3, #2
    8f5e:	3301      	adds	r3, #1
    8f60:	009b      	lsls	r3, r3, #2
    8f62:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    8f64:	4823      	ldr	r0, [pc, #140]	; (8ff4 <Reset_Handler+0xb0>)
    8f66:	4922      	ldr	r1, [pc, #136]	; (8ff0 <Reset_Handler+0xac>)
    8f68:	588c      	ldr	r4, [r1, r2]
    8f6a:	5084      	str	r4, [r0, r2]
    8f6c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    8f6e:	429a      	cmp	r2, r3
    8f70:	d1fa      	bne.n	8f68 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    8f72:	4a23      	ldr	r2, [pc, #140]	; (9000 <Reset_Handler+0xbc>)
    8f74:	4b23      	ldr	r3, [pc, #140]	; (9004 <Reset_Handler+0xc0>)
    8f76:	429a      	cmp	r2, r3
    8f78:	d20a      	bcs.n	8f90 <Reset_Handler+0x4c>
    8f7a:	43d3      	mvns	r3, r2
    8f7c:	4921      	ldr	r1, [pc, #132]	; (9004 <Reset_Handler+0xc0>)
    8f7e:	185b      	adds	r3, r3, r1
    8f80:	2103      	movs	r1, #3
    8f82:	438b      	bics	r3, r1
    8f84:	3304      	adds	r3, #4
    8f86:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    8f88:	2100      	movs	r1, #0
    8f8a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    8f8c:	4293      	cmp	r3, r2
    8f8e:	d1fc      	bne.n	8f8a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8f90:	4a1d      	ldr	r2, [pc, #116]	; (9008 <Reset_Handler+0xc4>)
    8f92:	21ff      	movs	r1, #255	; 0xff
    8f94:	4b1d      	ldr	r3, [pc, #116]	; (900c <Reset_Handler+0xc8>)
    8f96:	438b      	bics	r3, r1
    8f98:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    8f9a:	39fd      	subs	r1, #253	; 0xfd
    8f9c:	2390      	movs	r3, #144	; 0x90
    8f9e:	005b      	lsls	r3, r3, #1
    8fa0:	4a1b      	ldr	r2, [pc, #108]	; (9010 <Reset_Handler+0xcc>)
    8fa2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8fa4:	4a1b      	ldr	r2, [pc, #108]	; (9014 <Reset_Handler+0xd0>)
    8fa6:	78d3      	ldrb	r3, [r2, #3]
    8fa8:	2503      	movs	r5, #3
    8faa:	43ab      	bics	r3, r5
    8fac:	2402      	movs	r4, #2
    8fae:	4323      	orrs	r3, r4
    8fb0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8fb2:	78d3      	ldrb	r3, [r2, #3]
    8fb4:	270c      	movs	r7, #12
    8fb6:	43bb      	bics	r3, r7
    8fb8:	2608      	movs	r6, #8
    8fba:	4333      	orrs	r3, r6
    8fbc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    8fbe:	4b16      	ldr	r3, [pc, #88]	; (9018 <Reset_Handler+0xd4>)
    8fc0:	7b98      	ldrb	r0, [r3, #14]
    8fc2:	2230      	movs	r2, #48	; 0x30
    8fc4:	4390      	bics	r0, r2
    8fc6:	2220      	movs	r2, #32
    8fc8:	4310      	orrs	r0, r2
    8fca:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    8fcc:	7b99      	ldrb	r1, [r3, #14]
    8fce:	43b9      	bics	r1, r7
    8fd0:	4331      	orrs	r1, r6
    8fd2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8fd4:	7b9a      	ldrb	r2, [r3, #14]
    8fd6:	43aa      	bics	r2, r5
    8fd8:	4322      	orrs	r2, r4
    8fda:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    8fdc:	4a0f      	ldr	r2, [pc, #60]	; (901c <Reset_Handler+0xd8>)
    8fde:	6853      	ldr	r3, [r2, #4]
    8fe0:	2180      	movs	r1, #128	; 0x80
    8fe2:	430b      	orrs	r3, r1
    8fe4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    8fe6:	4b0e      	ldr	r3, [pc, #56]	; (9020 <Reset_Handler+0xdc>)
    8fe8:	4798      	blx	r3
        main();
    8fea:	4b0e      	ldr	r3, [pc, #56]	; (9024 <Reset_Handler+0xe0>)
    8fec:	4798      	blx	r3
    8fee:	e7fe      	b.n	8fee <Reset_Handler+0xaa>
    8ff0:	0000b08c 	.word	0x0000b08c
    8ff4:	20000000 	.word	0x20000000
    8ff8:	2000018c 	.word	0x2000018c
    8ffc:	20000004 	.word	0x20000004
    9000:	2000018c 	.word	0x2000018c
    9004:	20001a48 	.word	0x20001a48
    9008:	e000ed00 	.word	0xe000ed00
    900c:	00000000 	.word	0x00000000
    9010:	41007000 	.word	0x41007000
    9014:	41005000 	.word	0x41005000
    9018:	41004800 	.word	0x41004800
    901c:	41004000 	.word	0x41004000
    9020:	000095f9 	.word	0x000095f9
    9024:	0000606d 	.word	0x0000606d

00009028 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    9028:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    902a:	4a06      	ldr	r2, [pc, #24]	; (9044 <_sbrk+0x1c>)
    902c:	6812      	ldr	r2, [r2, #0]
    902e:	2a00      	cmp	r2, #0
    9030:	d004      	beq.n	903c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    9032:	4a04      	ldr	r2, [pc, #16]	; (9044 <_sbrk+0x1c>)
    9034:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    9036:	18c3      	adds	r3, r0, r3
    9038:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    903a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    903c:	4902      	ldr	r1, [pc, #8]	; (9048 <_sbrk+0x20>)
    903e:	4a01      	ldr	r2, [pc, #4]	; (9044 <_sbrk+0x1c>)
    9040:	6011      	str	r1, [r2, #0]
    9042:	e7f6      	b.n	9032 <_sbrk+0xa>
    9044:	2000035c 	.word	0x2000035c
    9048:	20003a48 	.word	0x20003a48

0000904c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    904c:	2001      	movs	r0, #1
    904e:	4240      	negs	r0, r0
    9050:	4770      	bx	lr

00009052 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    9052:	2380      	movs	r3, #128	; 0x80
    9054:	019b      	lsls	r3, r3, #6
    9056:	604b      	str	r3, [r1, #4]

	return 0;
}
    9058:	2000      	movs	r0, #0
    905a:	4770      	bx	lr

0000905c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    905c:	2001      	movs	r0, #1
    905e:	4770      	bx	lr

00009060 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    9060:	2000      	movs	r0, #0
    9062:	4770      	bx	lr

00009064 <__udivsi3>:
    9064:	2200      	movs	r2, #0
    9066:	0843      	lsrs	r3, r0, #1
    9068:	428b      	cmp	r3, r1
    906a:	d374      	bcc.n	9156 <__udivsi3+0xf2>
    906c:	0903      	lsrs	r3, r0, #4
    906e:	428b      	cmp	r3, r1
    9070:	d35f      	bcc.n	9132 <__udivsi3+0xce>
    9072:	0a03      	lsrs	r3, r0, #8
    9074:	428b      	cmp	r3, r1
    9076:	d344      	bcc.n	9102 <__udivsi3+0x9e>
    9078:	0b03      	lsrs	r3, r0, #12
    907a:	428b      	cmp	r3, r1
    907c:	d328      	bcc.n	90d0 <__udivsi3+0x6c>
    907e:	0c03      	lsrs	r3, r0, #16
    9080:	428b      	cmp	r3, r1
    9082:	d30d      	bcc.n	90a0 <__udivsi3+0x3c>
    9084:	22ff      	movs	r2, #255	; 0xff
    9086:	0209      	lsls	r1, r1, #8
    9088:	ba12      	rev	r2, r2
    908a:	0c03      	lsrs	r3, r0, #16
    908c:	428b      	cmp	r3, r1
    908e:	d302      	bcc.n	9096 <__udivsi3+0x32>
    9090:	1212      	asrs	r2, r2, #8
    9092:	0209      	lsls	r1, r1, #8
    9094:	d065      	beq.n	9162 <__udivsi3+0xfe>
    9096:	0b03      	lsrs	r3, r0, #12
    9098:	428b      	cmp	r3, r1
    909a:	d319      	bcc.n	90d0 <__udivsi3+0x6c>
    909c:	e000      	b.n	90a0 <__udivsi3+0x3c>
    909e:	0a09      	lsrs	r1, r1, #8
    90a0:	0bc3      	lsrs	r3, r0, #15
    90a2:	428b      	cmp	r3, r1
    90a4:	d301      	bcc.n	90aa <__udivsi3+0x46>
    90a6:	03cb      	lsls	r3, r1, #15
    90a8:	1ac0      	subs	r0, r0, r3
    90aa:	4152      	adcs	r2, r2
    90ac:	0b83      	lsrs	r3, r0, #14
    90ae:	428b      	cmp	r3, r1
    90b0:	d301      	bcc.n	90b6 <__udivsi3+0x52>
    90b2:	038b      	lsls	r3, r1, #14
    90b4:	1ac0      	subs	r0, r0, r3
    90b6:	4152      	adcs	r2, r2
    90b8:	0b43      	lsrs	r3, r0, #13
    90ba:	428b      	cmp	r3, r1
    90bc:	d301      	bcc.n	90c2 <__udivsi3+0x5e>
    90be:	034b      	lsls	r3, r1, #13
    90c0:	1ac0      	subs	r0, r0, r3
    90c2:	4152      	adcs	r2, r2
    90c4:	0b03      	lsrs	r3, r0, #12
    90c6:	428b      	cmp	r3, r1
    90c8:	d301      	bcc.n	90ce <__udivsi3+0x6a>
    90ca:	030b      	lsls	r3, r1, #12
    90cc:	1ac0      	subs	r0, r0, r3
    90ce:	4152      	adcs	r2, r2
    90d0:	0ac3      	lsrs	r3, r0, #11
    90d2:	428b      	cmp	r3, r1
    90d4:	d301      	bcc.n	90da <__udivsi3+0x76>
    90d6:	02cb      	lsls	r3, r1, #11
    90d8:	1ac0      	subs	r0, r0, r3
    90da:	4152      	adcs	r2, r2
    90dc:	0a83      	lsrs	r3, r0, #10
    90de:	428b      	cmp	r3, r1
    90e0:	d301      	bcc.n	90e6 <__udivsi3+0x82>
    90e2:	028b      	lsls	r3, r1, #10
    90e4:	1ac0      	subs	r0, r0, r3
    90e6:	4152      	adcs	r2, r2
    90e8:	0a43      	lsrs	r3, r0, #9
    90ea:	428b      	cmp	r3, r1
    90ec:	d301      	bcc.n	90f2 <__udivsi3+0x8e>
    90ee:	024b      	lsls	r3, r1, #9
    90f0:	1ac0      	subs	r0, r0, r3
    90f2:	4152      	adcs	r2, r2
    90f4:	0a03      	lsrs	r3, r0, #8
    90f6:	428b      	cmp	r3, r1
    90f8:	d301      	bcc.n	90fe <__udivsi3+0x9a>
    90fa:	020b      	lsls	r3, r1, #8
    90fc:	1ac0      	subs	r0, r0, r3
    90fe:	4152      	adcs	r2, r2
    9100:	d2cd      	bcs.n	909e <__udivsi3+0x3a>
    9102:	09c3      	lsrs	r3, r0, #7
    9104:	428b      	cmp	r3, r1
    9106:	d301      	bcc.n	910c <__udivsi3+0xa8>
    9108:	01cb      	lsls	r3, r1, #7
    910a:	1ac0      	subs	r0, r0, r3
    910c:	4152      	adcs	r2, r2
    910e:	0983      	lsrs	r3, r0, #6
    9110:	428b      	cmp	r3, r1
    9112:	d301      	bcc.n	9118 <__udivsi3+0xb4>
    9114:	018b      	lsls	r3, r1, #6
    9116:	1ac0      	subs	r0, r0, r3
    9118:	4152      	adcs	r2, r2
    911a:	0943      	lsrs	r3, r0, #5
    911c:	428b      	cmp	r3, r1
    911e:	d301      	bcc.n	9124 <__udivsi3+0xc0>
    9120:	014b      	lsls	r3, r1, #5
    9122:	1ac0      	subs	r0, r0, r3
    9124:	4152      	adcs	r2, r2
    9126:	0903      	lsrs	r3, r0, #4
    9128:	428b      	cmp	r3, r1
    912a:	d301      	bcc.n	9130 <__udivsi3+0xcc>
    912c:	010b      	lsls	r3, r1, #4
    912e:	1ac0      	subs	r0, r0, r3
    9130:	4152      	adcs	r2, r2
    9132:	08c3      	lsrs	r3, r0, #3
    9134:	428b      	cmp	r3, r1
    9136:	d301      	bcc.n	913c <__udivsi3+0xd8>
    9138:	00cb      	lsls	r3, r1, #3
    913a:	1ac0      	subs	r0, r0, r3
    913c:	4152      	adcs	r2, r2
    913e:	0883      	lsrs	r3, r0, #2
    9140:	428b      	cmp	r3, r1
    9142:	d301      	bcc.n	9148 <__udivsi3+0xe4>
    9144:	008b      	lsls	r3, r1, #2
    9146:	1ac0      	subs	r0, r0, r3
    9148:	4152      	adcs	r2, r2
    914a:	0843      	lsrs	r3, r0, #1
    914c:	428b      	cmp	r3, r1
    914e:	d301      	bcc.n	9154 <__udivsi3+0xf0>
    9150:	004b      	lsls	r3, r1, #1
    9152:	1ac0      	subs	r0, r0, r3
    9154:	4152      	adcs	r2, r2
    9156:	1a41      	subs	r1, r0, r1
    9158:	d200      	bcs.n	915c <__udivsi3+0xf8>
    915a:	4601      	mov	r1, r0
    915c:	4152      	adcs	r2, r2
    915e:	4610      	mov	r0, r2
    9160:	4770      	bx	lr
    9162:	e7ff      	b.n	9164 <__udivsi3+0x100>
    9164:	b501      	push	{r0, lr}
    9166:	2000      	movs	r0, #0
    9168:	f000 f8f0 	bl	934c <__aeabi_idiv0>
    916c:	bd02      	pop	{r1, pc}
    916e:	46c0      	nop			; (mov r8, r8)

00009170 <__aeabi_uidivmod>:
    9170:	2900      	cmp	r1, #0
    9172:	d0f7      	beq.n	9164 <__udivsi3+0x100>
    9174:	e776      	b.n	9064 <__udivsi3>
    9176:	4770      	bx	lr

00009178 <__divsi3>:
    9178:	4603      	mov	r3, r0
    917a:	430b      	orrs	r3, r1
    917c:	d47f      	bmi.n	927e <__divsi3+0x106>
    917e:	2200      	movs	r2, #0
    9180:	0843      	lsrs	r3, r0, #1
    9182:	428b      	cmp	r3, r1
    9184:	d374      	bcc.n	9270 <__divsi3+0xf8>
    9186:	0903      	lsrs	r3, r0, #4
    9188:	428b      	cmp	r3, r1
    918a:	d35f      	bcc.n	924c <__divsi3+0xd4>
    918c:	0a03      	lsrs	r3, r0, #8
    918e:	428b      	cmp	r3, r1
    9190:	d344      	bcc.n	921c <__divsi3+0xa4>
    9192:	0b03      	lsrs	r3, r0, #12
    9194:	428b      	cmp	r3, r1
    9196:	d328      	bcc.n	91ea <__divsi3+0x72>
    9198:	0c03      	lsrs	r3, r0, #16
    919a:	428b      	cmp	r3, r1
    919c:	d30d      	bcc.n	91ba <__divsi3+0x42>
    919e:	22ff      	movs	r2, #255	; 0xff
    91a0:	0209      	lsls	r1, r1, #8
    91a2:	ba12      	rev	r2, r2
    91a4:	0c03      	lsrs	r3, r0, #16
    91a6:	428b      	cmp	r3, r1
    91a8:	d302      	bcc.n	91b0 <__divsi3+0x38>
    91aa:	1212      	asrs	r2, r2, #8
    91ac:	0209      	lsls	r1, r1, #8
    91ae:	d065      	beq.n	927c <__divsi3+0x104>
    91b0:	0b03      	lsrs	r3, r0, #12
    91b2:	428b      	cmp	r3, r1
    91b4:	d319      	bcc.n	91ea <__divsi3+0x72>
    91b6:	e000      	b.n	91ba <__divsi3+0x42>
    91b8:	0a09      	lsrs	r1, r1, #8
    91ba:	0bc3      	lsrs	r3, r0, #15
    91bc:	428b      	cmp	r3, r1
    91be:	d301      	bcc.n	91c4 <__divsi3+0x4c>
    91c0:	03cb      	lsls	r3, r1, #15
    91c2:	1ac0      	subs	r0, r0, r3
    91c4:	4152      	adcs	r2, r2
    91c6:	0b83      	lsrs	r3, r0, #14
    91c8:	428b      	cmp	r3, r1
    91ca:	d301      	bcc.n	91d0 <__divsi3+0x58>
    91cc:	038b      	lsls	r3, r1, #14
    91ce:	1ac0      	subs	r0, r0, r3
    91d0:	4152      	adcs	r2, r2
    91d2:	0b43      	lsrs	r3, r0, #13
    91d4:	428b      	cmp	r3, r1
    91d6:	d301      	bcc.n	91dc <__divsi3+0x64>
    91d8:	034b      	lsls	r3, r1, #13
    91da:	1ac0      	subs	r0, r0, r3
    91dc:	4152      	adcs	r2, r2
    91de:	0b03      	lsrs	r3, r0, #12
    91e0:	428b      	cmp	r3, r1
    91e2:	d301      	bcc.n	91e8 <__divsi3+0x70>
    91e4:	030b      	lsls	r3, r1, #12
    91e6:	1ac0      	subs	r0, r0, r3
    91e8:	4152      	adcs	r2, r2
    91ea:	0ac3      	lsrs	r3, r0, #11
    91ec:	428b      	cmp	r3, r1
    91ee:	d301      	bcc.n	91f4 <__divsi3+0x7c>
    91f0:	02cb      	lsls	r3, r1, #11
    91f2:	1ac0      	subs	r0, r0, r3
    91f4:	4152      	adcs	r2, r2
    91f6:	0a83      	lsrs	r3, r0, #10
    91f8:	428b      	cmp	r3, r1
    91fa:	d301      	bcc.n	9200 <__divsi3+0x88>
    91fc:	028b      	lsls	r3, r1, #10
    91fe:	1ac0      	subs	r0, r0, r3
    9200:	4152      	adcs	r2, r2
    9202:	0a43      	lsrs	r3, r0, #9
    9204:	428b      	cmp	r3, r1
    9206:	d301      	bcc.n	920c <__divsi3+0x94>
    9208:	024b      	lsls	r3, r1, #9
    920a:	1ac0      	subs	r0, r0, r3
    920c:	4152      	adcs	r2, r2
    920e:	0a03      	lsrs	r3, r0, #8
    9210:	428b      	cmp	r3, r1
    9212:	d301      	bcc.n	9218 <__divsi3+0xa0>
    9214:	020b      	lsls	r3, r1, #8
    9216:	1ac0      	subs	r0, r0, r3
    9218:	4152      	adcs	r2, r2
    921a:	d2cd      	bcs.n	91b8 <__divsi3+0x40>
    921c:	09c3      	lsrs	r3, r0, #7
    921e:	428b      	cmp	r3, r1
    9220:	d301      	bcc.n	9226 <__divsi3+0xae>
    9222:	01cb      	lsls	r3, r1, #7
    9224:	1ac0      	subs	r0, r0, r3
    9226:	4152      	adcs	r2, r2
    9228:	0983      	lsrs	r3, r0, #6
    922a:	428b      	cmp	r3, r1
    922c:	d301      	bcc.n	9232 <__divsi3+0xba>
    922e:	018b      	lsls	r3, r1, #6
    9230:	1ac0      	subs	r0, r0, r3
    9232:	4152      	adcs	r2, r2
    9234:	0943      	lsrs	r3, r0, #5
    9236:	428b      	cmp	r3, r1
    9238:	d301      	bcc.n	923e <__divsi3+0xc6>
    923a:	014b      	lsls	r3, r1, #5
    923c:	1ac0      	subs	r0, r0, r3
    923e:	4152      	adcs	r2, r2
    9240:	0903      	lsrs	r3, r0, #4
    9242:	428b      	cmp	r3, r1
    9244:	d301      	bcc.n	924a <__divsi3+0xd2>
    9246:	010b      	lsls	r3, r1, #4
    9248:	1ac0      	subs	r0, r0, r3
    924a:	4152      	adcs	r2, r2
    924c:	08c3      	lsrs	r3, r0, #3
    924e:	428b      	cmp	r3, r1
    9250:	d301      	bcc.n	9256 <__divsi3+0xde>
    9252:	00cb      	lsls	r3, r1, #3
    9254:	1ac0      	subs	r0, r0, r3
    9256:	4152      	adcs	r2, r2
    9258:	0883      	lsrs	r3, r0, #2
    925a:	428b      	cmp	r3, r1
    925c:	d301      	bcc.n	9262 <__divsi3+0xea>
    925e:	008b      	lsls	r3, r1, #2
    9260:	1ac0      	subs	r0, r0, r3
    9262:	4152      	adcs	r2, r2
    9264:	0843      	lsrs	r3, r0, #1
    9266:	428b      	cmp	r3, r1
    9268:	d301      	bcc.n	926e <__divsi3+0xf6>
    926a:	004b      	lsls	r3, r1, #1
    926c:	1ac0      	subs	r0, r0, r3
    926e:	4152      	adcs	r2, r2
    9270:	1a41      	subs	r1, r0, r1
    9272:	d200      	bcs.n	9276 <__divsi3+0xfe>
    9274:	4601      	mov	r1, r0
    9276:	4152      	adcs	r2, r2
    9278:	4610      	mov	r0, r2
    927a:	4770      	bx	lr
    927c:	e05d      	b.n	933a <__divsi3+0x1c2>
    927e:	0fca      	lsrs	r2, r1, #31
    9280:	d000      	beq.n	9284 <__divsi3+0x10c>
    9282:	4249      	negs	r1, r1
    9284:	1003      	asrs	r3, r0, #32
    9286:	d300      	bcc.n	928a <__divsi3+0x112>
    9288:	4240      	negs	r0, r0
    928a:	4053      	eors	r3, r2
    928c:	2200      	movs	r2, #0
    928e:	469c      	mov	ip, r3
    9290:	0903      	lsrs	r3, r0, #4
    9292:	428b      	cmp	r3, r1
    9294:	d32d      	bcc.n	92f2 <__divsi3+0x17a>
    9296:	0a03      	lsrs	r3, r0, #8
    9298:	428b      	cmp	r3, r1
    929a:	d312      	bcc.n	92c2 <__divsi3+0x14a>
    929c:	22fc      	movs	r2, #252	; 0xfc
    929e:	0189      	lsls	r1, r1, #6
    92a0:	ba12      	rev	r2, r2
    92a2:	0a03      	lsrs	r3, r0, #8
    92a4:	428b      	cmp	r3, r1
    92a6:	d30c      	bcc.n	92c2 <__divsi3+0x14a>
    92a8:	0189      	lsls	r1, r1, #6
    92aa:	1192      	asrs	r2, r2, #6
    92ac:	428b      	cmp	r3, r1
    92ae:	d308      	bcc.n	92c2 <__divsi3+0x14a>
    92b0:	0189      	lsls	r1, r1, #6
    92b2:	1192      	asrs	r2, r2, #6
    92b4:	428b      	cmp	r3, r1
    92b6:	d304      	bcc.n	92c2 <__divsi3+0x14a>
    92b8:	0189      	lsls	r1, r1, #6
    92ba:	d03a      	beq.n	9332 <__divsi3+0x1ba>
    92bc:	1192      	asrs	r2, r2, #6
    92be:	e000      	b.n	92c2 <__divsi3+0x14a>
    92c0:	0989      	lsrs	r1, r1, #6
    92c2:	09c3      	lsrs	r3, r0, #7
    92c4:	428b      	cmp	r3, r1
    92c6:	d301      	bcc.n	92cc <__divsi3+0x154>
    92c8:	01cb      	lsls	r3, r1, #7
    92ca:	1ac0      	subs	r0, r0, r3
    92cc:	4152      	adcs	r2, r2
    92ce:	0983      	lsrs	r3, r0, #6
    92d0:	428b      	cmp	r3, r1
    92d2:	d301      	bcc.n	92d8 <__divsi3+0x160>
    92d4:	018b      	lsls	r3, r1, #6
    92d6:	1ac0      	subs	r0, r0, r3
    92d8:	4152      	adcs	r2, r2
    92da:	0943      	lsrs	r3, r0, #5
    92dc:	428b      	cmp	r3, r1
    92de:	d301      	bcc.n	92e4 <__divsi3+0x16c>
    92e0:	014b      	lsls	r3, r1, #5
    92e2:	1ac0      	subs	r0, r0, r3
    92e4:	4152      	adcs	r2, r2
    92e6:	0903      	lsrs	r3, r0, #4
    92e8:	428b      	cmp	r3, r1
    92ea:	d301      	bcc.n	92f0 <__divsi3+0x178>
    92ec:	010b      	lsls	r3, r1, #4
    92ee:	1ac0      	subs	r0, r0, r3
    92f0:	4152      	adcs	r2, r2
    92f2:	08c3      	lsrs	r3, r0, #3
    92f4:	428b      	cmp	r3, r1
    92f6:	d301      	bcc.n	92fc <__divsi3+0x184>
    92f8:	00cb      	lsls	r3, r1, #3
    92fa:	1ac0      	subs	r0, r0, r3
    92fc:	4152      	adcs	r2, r2
    92fe:	0883      	lsrs	r3, r0, #2
    9300:	428b      	cmp	r3, r1
    9302:	d301      	bcc.n	9308 <__divsi3+0x190>
    9304:	008b      	lsls	r3, r1, #2
    9306:	1ac0      	subs	r0, r0, r3
    9308:	4152      	adcs	r2, r2
    930a:	d2d9      	bcs.n	92c0 <__divsi3+0x148>
    930c:	0843      	lsrs	r3, r0, #1
    930e:	428b      	cmp	r3, r1
    9310:	d301      	bcc.n	9316 <__divsi3+0x19e>
    9312:	004b      	lsls	r3, r1, #1
    9314:	1ac0      	subs	r0, r0, r3
    9316:	4152      	adcs	r2, r2
    9318:	1a41      	subs	r1, r0, r1
    931a:	d200      	bcs.n	931e <__divsi3+0x1a6>
    931c:	4601      	mov	r1, r0
    931e:	4663      	mov	r3, ip
    9320:	4152      	adcs	r2, r2
    9322:	105b      	asrs	r3, r3, #1
    9324:	4610      	mov	r0, r2
    9326:	d301      	bcc.n	932c <__divsi3+0x1b4>
    9328:	4240      	negs	r0, r0
    932a:	2b00      	cmp	r3, #0
    932c:	d500      	bpl.n	9330 <__divsi3+0x1b8>
    932e:	4249      	negs	r1, r1
    9330:	4770      	bx	lr
    9332:	4663      	mov	r3, ip
    9334:	105b      	asrs	r3, r3, #1
    9336:	d300      	bcc.n	933a <__divsi3+0x1c2>
    9338:	4240      	negs	r0, r0
    933a:	b501      	push	{r0, lr}
    933c:	2000      	movs	r0, #0
    933e:	f000 f805 	bl	934c <__aeabi_idiv0>
    9342:	bd02      	pop	{r1, pc}

00009344 <__aeabi_idivmod>:
    9344:	2900      	cmp	r1, #0
    9346:	d0f8      	beq.n	933a <__divsi3+0x1c2>
    9348:	e716      	b.n	9178 <__divsi3>
    934a:	4770      	bx	lr

0000934c <__aeabi_idiv0>:
    934c:	4770      	bx	lr
    934e:	46c0      	nop			; (mov r8, r8)

00009350 <__clzsi2>:
    9350:	211c      	movs	r1, #28
    9352:	2301      	movs	r3, #1
    9354:	041b      	lsls	r3, r3, #16
    9356:	4298      	cmp	r0, r3
    9358:	d301      	bcc.n	935e <__clzsi2+0xe>
    935a:	0c00      	lsrs	r0, r0, #16
    935c:	3910      	subs	r1, #16
    935e:	0a1b      	lsrs	r3, r3, #8
    9360:	4298      	cmp	r0, r3
    9362:	d301      	bcc.n	9368 <__clzsi2+0x18>
    9364:	0a00      	lsrs	r0, r0, #8
    9366:	3908      	subs	r1, #8
    9368:	091b      	lsrs	r3, r3, #4
    936a:	4298      	cmp	r0, r3
    936c:	d301      	bcc.n	9372 <__clzsi2+0x22>
    936e:	0900      	lsrs	r0, r0, #4
    9370:	3904      	subs	r1, #4
    9372:	a202      	add	r2, pc, #8	; (adr r2, 937c <__clzsi2+0x2c>)
    9374:	5c10      	ldrb	r0, [r2, r0]
    9376:	1840      	adds	r0, r0, r1
    9378:	4770      	bx	lr
    937a:	46c0      	nop			; (mov r8, r8)
    937c:	02020304 	.word	0x02020304
    9380:	01010101 	.word	0x01010101
	...

0000938c <__ctzsi2>:
    938c:	4241      	negs	r1, r0
    938e:	4008      	ands	r0, r1
    9390:	211c      	movs	r1, #28
    9392:	2301      	movs	r3, #1
    9394:	041b      	lsls	r3, r3, #16
    9396:	4298      	cmp	r0, r3
    9398:	d301      	bcc.n	939e <__ctzsi2+0x12>
    939a:	0c00      	lsrs	r0, r0, #16
    939c:	3910      	subs	r1, #16
    939e:	0a1b      	lsrs	r3, r3, #8
    93a0:	4298      	cmp	r0, r3
    93a2:	d301      	bcc.n	93a8 <__ctzsi2+0x1c>
    93a4:	0a00      	lsrs	r0, r0, #8
    93a6:	3908      	subs	r1, #8
    93a8:	091b      	lsrs	r3, r3, #4
    93aa:	4298      	cmp	r0, r3
    93ac:	d301      	bcc.n	93b2 <__ctzsi2+0x26>
    93ae:	0900      	lsrs	r0, r0, #4
    93b0:	3904      	subs	r1, #4
    93b2:	a202      	add	r2, pc, #8	; (adr r2, 93bc <__ctzsi2+0x30>)
    93b4:	5c10      	ldrb	r0, [r2, r0]
    93b6:	1a40      	subs	r0, r0, r1
    93b8:	4770      	bx	lr
    93ba:	46c0      	nop			; (mov r8, r8)
    93bc:	1d1d1c1b 	.word	0x1d1d1c1b
    93c0:	1e1e1e1e 	.word	0x1e1e1e1e
    93c4:	1f1f1f1f 	.word	0x1f1f1f1f
    93c8:	1f1f1f1f 	.word	0x1f1f1f1f

000093cc <__aeabi_uldivmod>:
    93cc:	2b00      	cmp	r3, #0
    93ce:	d111      	bne.n	93f4 <__aeabi_uldivmod+0x28>
    93d0:	2a00      	cmp	r2, #0
    93d2:	d10f      	bne.n	93f4 <__aeabi_uldivmod+0x28>
    93d4:	2900      	cmp	r1, #0
    93d6:	d100      	bne.n	93da <__aeabi_uldivmod+0xe>
    93d8:	2800      	cmp	r0, #0
    93da:	d002      	beq.n	93e2 <__aeabi_uldivmod+0x16>
    93dc:	2100      	movs	r1, #0
    93de:	43c9      	mvns	r1, r1
    93e0:	1c08      	adds	r0, r1, #0
    93e2:	b407      	push	{r0, r1, r2}
    93e4:	4802      	ldr	r0, [pc, #8]	; (93f0 <__aeabi_uldivmod+0x24>)
    93e6:	a102      	add	r1, pc, #8	; (adr r1, 93f0 <__aeabi_uldivmod+0x24>)
    93e8:	1840      	adds	r0, r0, r1
    93ea:	9002      	str	r0, [sp, #8]
    93ec:	bd03      	pop	{r0, r1, pc}
    93ee:	46c0      	nop			; (mov r8, r8)
    93f0:	ffffff5d 	.word	0xffffff5d
    93f4:	b403      	push	{r0, r1}
    93f6:	4668      	mov	r0, sp
    93f8:	b501      	push	{r0, lr}
    93fa:	9802      	ldr	r0, [sp, #8]
    93fc:	f000 f830 	bl	9460 <__udivmoddi4>
    9400:	9b01      	ldr	r3, [sp, #4]
    9402:	469e      	mov	lr, r3
    9404:	b002      	add	sp, #8
    9406:	bc0c      	pop	{r2, r3}
    9408:	4770      	bx	lr
    940a:	46c0      	nop			; (mov r8, r8)

0000940c <__aeabi_lmul>:
    940c:	b5f0      	push	{r4, r5, r6, r7, lr}
    940e:	46ce      	mov	lr, r9
    9410:	4647      	mov	r7, r8
    9412:	0415      	lsls	r5, r2, #16
    9414:	0c2d      	lsrs	r5, r5, #16
    9416:	002e      	movs	r6, r5
    9418:	b580      	push	{r7, lr}
    941a:	0407      	lsls	r7, r0, #16
    941c:	0c14      	lsrs	r4, r2, #16
    941e:	0c3f      	lsrs	r7, r7, #16
    9420:	4699      	mov	r9, r3
    9422:	0c03      	lsrs	r3, r0, #16
    9424:	437e      	muls	r6, r7
    9426:	435d      	muls	r5, r3
    9428:	4367      	muls	r7, r4
    942a:	4363      	muls	r3, r4
    942c:	197f      	adds	r7, r7, r5
    942e:	0c34      	lsrs	r4, r6, #16
    9430:	19e4      	adds	r4, r4, r7
    9432:	469c      	mov	ip, r3
    9434:	42a5      	cmp	r5, r4
    9436:	d903      	bls.n	9440 <__aeabi_lmul+0x34>
    9438:	2380      	movs	r3, #128	; 0x80
    943a:	025b      	lsls	r3, r3, #9
    943c:	4698      	mov	r8, r3
    943e:	44c4      	add	ip, r8
    9440:	464b      	mov	r3, r9
    9442:	4351      	muls	r1, r2
    9444:	4343      	muls	r3, r0
    9446:	0436      	lsls	r6, r6, #16
    9448:	0c36      	lsrs	r6, r6, #16
    944a:	0c25      	lsrs	r5, r4, #16
    944c:	0424      	lsls	r4, r4, #16
    944e:	4465      	add	r5, ip
    9450:	19a4      	adds	r4, r4, r6
    9452:	1859      	adds	r1, r3, r1
    9454:	1949      	adds	r1, r1, r5
    9456:	0020      	movs	r0, r4
    9458:	bc0c      	pop	{r2, r3}
    945a:	4690      	mov	r8, r2
    945c:	4699      	mov	r9, r3
    945e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009460 <__udivmoddi4>:
    9460:	b5f0      	push	{r4, r5, r6, r7, lr}
    9462:	4657      	mov	r7, sl
    9464:	464e      	mov	r6, r9
    9466:	4645      	mov	r5, r8
    9468:	46de      	mov	lr, fp
    946a:	b5e0      	push	{r5, r6, r7, lr}
    946c:	0004      	movs	r4, r0
    946e:	b083      	sub	sp, #12
    9470:	000d      	movs	r5, r1
    9472:	4692      	mov	sl, r2
    9474:	4699      	mov	r9, r3
    9476:	428b      	cmp	r3, r1
    9478:	d82f      	bhi.n	94da <__udivmoddi4+0x7a>
    947a:	d02c      	beq.n	94d6 <__udivmoddi4+0x76>
    947c:	4649      	mov	r1, r9
    947e:	4650      	mov	r0, sl
    9480:	f000 f8ae 	bl	95e0 <__clzdi2>
    9484:	0029      	movs	r1, r5
    9486:	0006      	movs	r6, r0
    9488:	0020      	movs	r0, r4
    948a:	f000 f8a9 	bl	95e0 <__clzdi2>
    948e:	1a33      	subs	r3, r6, r0
    9490:	4698      	mov	r8, r3
    9492:	3b20      	subs	r3, #32
    9494:	469b      	mov	fp, r3
    9496:	d500      	bpl.n	949a <__udivmoddi4+0x3a>
    9498:	e074      	b.n	9584 <__udivmoddi4+0x124>
    949a:	4653      	mov	r3, sl
    949c:	465a      	mov	r2, fp
    949e:	4093      	lsls	r3, r2
    94a0:	001f      	movs	r7, r3
    94a2:	4653      	mov	r3, sl
    94a4:	4642      	mov	r2, r8
    94a6:	4093      	lsls	r3, r2
    94a8:	001e      	movs	r6, r3
    94aa:	42af      	cmp	r7, r5
    94ac:	d829      	bhi.n	9502 <__udivmoddi4+0xa2>
    94ae:	d026      	beq.n	94fe <__udivmoddi4+0x9e>
    94b0:	465b      	mov	r3, fp
    94b2:	1ba4      	subs	r4, r4, r6
    94b4:	41bd      	sbcs	r5, r7
    94b6:	2b00      	cmp	r3, #0
    94b8:	da00      	bge.n	94bc <__udivmoddi4+0x5c>
    94ba:	e079      	b.n	95b0 <__udivmoddi4+0x150>
    94bc:	2200      	movs	r2, #0
    94be:	2300      	movs	r3, #0
    94c0:	9200      	str	r2, [sp, #0]
    94c2:	9301      	str	r3, [sp, #4]
    94c4:	2301      	movs	r3, #1
    94c6:	465a      	mov	r2, fp
    94c8:	4093      	lsls	r3, r2
    94ca:	9301      	str	r3, [sp, #4]
    94cc:	2301      	movs	r3, #1
    94ce:	4642      	mov	r2, r8
    94d0:	4093      	lsls	r3, r2
    94d2:	9300      	str	r3, [sp, #0]
    94d4:	e019      	b.n	950a <__udivmoddi4+0xaa>
    94d6:	4282      	cmp	r2, r0
    94d8:	d9d0      	bls.n	947c <__udivmoddi4+0x1c>
    94da:	2200      	movs	r2, #0
    94dc:	2300      	movs	r3, #0
    94de:	9200      	str	r2, [sp, #0]
    94e0:	9301      	str	r3, [sp, #4]
    94e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    94e4:	2b00      	cmp	r3, #0
    94e6:	d001      	beq.n	94ec <__udivmoddi4+0x8c>
    94e8:	601c      	str	r4, [r3, #0]
    94ea:	605d      	str	r5, [r3, #4]
    94ec:	9800      	ldr	r0, [sp, #0]
    94ee:	9901      	ldr	r1, [sp, #4]
    94f0:	b003      	add	sp, #12
    94f2:	bc3c      	pop	{r2, r3, r4, r5}
    94f4:	4690      	mov	r8, r2
    94f6:	4699      	mov	r9, r3
    94f8:	46a2      	mov	sl, r4
    94fa:	46ab      	mov	fp, r5
    94fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94fe:	42a3      	cmp	r3, r4
    9500:	d9d6      	bls.n	94b0 <__udivmoddi4+0x50>
    9502:	2200      	movs	r2, #0
    9504:	2300      	movs	r3, #0
    9506:	9200      	str	r2, [sp, #0]
    9508:	9301      	str	r3, [sp, #4]
    950a:	4643      	mov	r3, r8
    950c:	2b00      	cmp	r3, #0
    950e:	d0e8      	beq.n	94e2 <__udivmoddi4+0x82>
    9510:	07fb      	lsls	r3, r7, #31
    9512:	0872      	lsrs	r2, r6, #1
    9514:	431a      	orrs	r2, r3
    9516:	4646      	mov	r6, r8
    9518:	087b      	lsrs	r3, r7, #1
    951a:	e00e      	b.n	953a <__udivmoddi4+0xda>
    951c:	42ab      	cmp	r3, r5
    951e:	d101      	bne.n	9524 <__udivmoddi4+0xc4>
    9520:	42a2      	cmp	r2, r4
    9522:	d80c      	bhi.n	953e <__udivmoddi4+0xde>
    9524:	1aa4      	subs	r4, r4, r2
    9526:	419d      	sbcs	r5, r3
    9528:	2001      	movs	r0, #1
    952a:	1924      	adds	r4, r4, r4
    952c:	416d      	adcs	r5, r5
    952e:	2100      	movs	r1, #0
    9530:	3e01      	subs	r6, #1
    9532:	1824      	adds	r4, r4, r0
    9534:	414d      	adcs	r5, r1
    9536:	2e00      	cmp	r6, #0
    9538:	d006      	beq.n	9548 <__udivmoddi4+0xe8>
    953a:	42ab      	cmp	r3, r5
    953c:	d9ee      	bls.n	951c <__udivmoddi4+0xbc>
    953e:	3e01      	subs	r6, #1
    9540:	1924      	adds	r4, r4, r4
    9542:	416d      	adcs	r5, r5
    9544:	2e00      	cmp	r6, #0
    9546:	d1f8      	bne.n	953a <__udivmoddi4+0xda>
    9548:	465b      	mov	r3, fp
    954a:	9800      	ldr	r0, [sp, #0]
    954c:	9901      	ldr	r1, [sp, #4]
    954e:	1900      	adds	r0, r0, r4
    9550:	4169      	adcs	r1, r5
    9552:	2b00      	cmp	r3, #0
    9554:	db22      	blt.n	959c <__udivmoddi4+0x13c>
    9556:	002b      	movs	r3, r5
    9558:	465a      	mov	r2, fp
    955a:	40d3      	lsrs	r3, r2
    955c:	002a      	movs	r2, r5
    955e:	4644      	mov	r4, r8
    9560:	40e2      	lsrs	r2, r4
    9562:	001c      	movs	r4, r3
    9564:	465b      	mov	r3, fp
    9566:	0015      	movs	r5, r2
    9568:	2b00      	cmp	r3, #0
    956a:	db2c      	blt.n	95c6 <__udivmoddi4+0x166>
    956c:	0026      	movs	r6, r4
    956e:	409e      	lsls	r6, r3
    9570:	0033      	movs	r3, r6
    9572:	0026      	movs	r6, r4
    9574:	4647      	mov	r7, r8
    9576:	40be      	lsls	r6, r7
    9578:	0032      	movs	r2, r6
    957a:	1a80      	subs	r0, r0, r2
    957c:	4199      	sbcs	r1, r3
    957e:	9000      	str	r0, [sp, #0]
    9580:	9101      	str	r1, [sp, #4]
    9582:	e7ae      	b.n	94e2 <__udivmoddi4+0x82>
    9584:	4642      	mov	r2, r8
    9586:	2320      	movs	r3, #32
    9588:	1a9b      	subs	r3, r3, r2
    958a:	4652      	mov	r2, sl
    958c:	40da      	lsrs	r2, r3
    958e:	4641      	mov	r1, r8
    9590:	0013      	movs	r3, r2
    9592:	464a      	mov	r2, r9
    9594:	408a      	lsls	r2, r1
    9596:	0017      	movs	r7, r2
    9598:	431f      	orrs	r7, r3
    959a:	e782      	b.n	94a2 <__udivmoddi4+0x42>
    959c:	4642      	mov	r2, r8
    959e:	2320      	movs	r3, #32
    95a0:	1a9b      	subs	r3, r3, r2
    95a2:	002a      	movs	r2, r5
    95a4:	4646      	mov	r6, r8
    95a6:	409a      	lsls	r2, r3
    95a8:	0023      	movs	r3, r4
    95aa:	40f3      	lsrs	r3, r6
    95ac:	4313      	orrs	r3, r2
    95ae:	e7d5      	b.n	955c <__udivmoddi4+0xfc>
    95b0:	4642      	mov	r2, r8
    95b2:	2320      	movs	r3, #32
    95b4:	2100      	movs	r1, #0
    95b6:	1a9b      	subs	r3, r3, r2
    95b8:	2200      	movs	r2, #0
    95ba:	9100      	str	r1, [sp, #0]
    95bc:	9201      	str	r2, [sp, #4]
    95be:	2201      	movs	r2, #1
    95c0:	40da      	lsrs	r2, r3
    95c2:	9201      	str	r2, [sp, #4]
    95c4:	e782      	b.n	94cc <__udivmoddi4+0x6c>
    95c6:	4642      	mov	r2, r8
    95c8:	2320      	movs	r3, #32
    95ca:	0026      	movs	r6, r4
    95cc:	1a9b      	subs	r3, r3, r2
    95ce:	40de      	lsrs	r6, r3
    95d0:	002f      	movs	r7, r5
    95d2:	46b4      	mov	ip, r6
    95d4:	4097      	lsls	r7, r2
    95d6:	4666      	mov	r6, ip
    95d8:	003b      	movs	r3, r7
    95da:	4333      	orrs	r3, r6
    95dc:	e7c9      	b.n	9572 <__udivmoddi4+0x112>
    95de:	46c0      	nop			; (mov r8, r8)

000095e0 <__clzdi2>:
    95e0:	b510      	push	{r4, lr}
    95e2:	2900      	cmp	r1, #0
    95e4:	d103      	bne.n	95ee <__clzdi2+0xe>
    95e6:	f7ff feb3 	bl	9350 <__clzsi2>
    95ea:	3020      	adds	r0, #32
    95ec:	e002      	b.n	95f4 <__clzdi2+0x14>
    95ee:	1c08      	adds	r0, r1, #0
    95f0:	f7ff feae 	bl	9350 <__clzsi2>
    95f4:	bd10      	pop	{r4, pc}
    95f6:	46c0      	nop			; (mov r8, r8)

000095f8 <__libc_init_array>:
    95f8:	b570      	push	{r4, r5, r6, lr}
    95fa:	2600      	movs	r6, #0
    95fc:	4d0c      	ldr	r5, [pc, #48]	; (9630 <__libc_init_array+0x38>)
    95fe:	4c0d      	ldr	r4, [pc, #52]	; (9634 <__libc_init_array+0x3c>)
    9600:	1b64      	subs	r4, r4, r5
    9602:	10a4      	asrs	r4, r4, #2
    9604:	42a6      	cmp	r6, r4
    9606:	d109      	bne.n	961c <__libc_init_array+0x24>
    9608:	2600      	movs	r6, #0
    960a:	f001 fd2b 	bl	b064 <_init>
    960e:	4d0a      	ldr	r5, [pc, #40]	; (9638 <__libc_init_array+0x40>)
    9610:	4c0a      	ldr	r4, [pc, #40]	; (963c <__libc_init_array+0x44>)
    9612:	1b64      	subs	r4, r4, r5
    9614:	10a4      	asrs	r4, r4, #2
    9616:	42a6      	cmp	r6, r4
    9618:	d105      	bne.n	9626 <__libc_init_array+0x2e>
    961a:	bd70      	pop	{r4, r5, r6, pc}
    961c:	00b3      	lsls	r3, r6, #2
    961e:	58eb      	ldr	r3, [r5, r3]
    9620:	4798      	blx	r3
    9622:	3601      	adds	r6, #1
    9624:	e7ee      	b.n	9604 <__libc_init_array+0xc>
    9626:	00b3      	lsls	r3, r6, #2
    9628:	58eb      	ldr	r3, [r5, r3]
    962a:	4798      	blx	r3
    962c:	3601      	adds	r6, #1
    962e:	e7f2      	b.n	9616 <__libc_init_array+0x1e>
    9630:	0000b070 	.word	0x0000b070
    9634:	0000b070 	.word	0x0000b070
    9638:	0000b070 	.word	0x0000b070
    963c:	0000b074 	.word	0x0000b074

00009640 <memcpy>:
    9640:	2300      	movs	r3, #0
    9642:	b510      	push	{r4, lr}
    9644:	429a      	cmp	r2, r3
    9646:	d100      	bne.n	964a <memcpy+0xa>
    9648:	bd10      	pop	{r4, pc}
    964a:	5ccc      	ldrb	r4, [r1, r3]
    964c:	54c4      	strb	r4, [r0, r3]
    964e:	3301      	adds	r3, #1
    9650:	e7f8      	b.n	9644 <memcpy+0x4>

00009652 <memset>:
    9652:	0003      	movs	r3, r0
    9654:	1882      	adds	r2, r0, r2
    9656:	4293      	cmp	r3, r2
    9658:	d100      	bne.n	965c <memset+0xa>
    965a:	4770      	bx	lr
    965c:	7019      	strb	r1, [r3, #0]
    965e:	3301      	adds	r3, #1
    9660:	e7f9      	b.n	9656 <memset+0x4>
	...

00009664 <iprintf>:
    9664:	b40f      	push	{r0, r1, r2, r3}
    9666:	4b0b      	ldr	r3, [pc, #44]	; (9694 <iprintf+0x30>)
    9668:	b513      	push	{r0, r1, r4, lr}
    966a:	681c      	ldr	r4, [r3, #0]
    966c:	2c00      	cmp	r4, #0
    966e:	d005      	beq.n	967c <iprintf+0x18>
    9670:	69a3      	ldr	r3, [r4, #24]
    9672:	2b00      	cmp	r3, #0
    9674:	d102      	bne.n	967c <iprintf+0x18>
    9676:	0020      	movs	r0, r4
    9678:	f000 f9bc 	bl	99f4 <__sinit>
    967c:	ab05      	add	r3, sp, #20
    967e:	9a04      	ldr	r2, [sp, #16]
    9680:	68a1      	ldr	r1, [r4, #8]
    9682:	0020      	movs	r0, r4
    9684:	9301      	str	r3, [sp, #4]
    9686:	f000 fb91 	bl	9dac <_vfiprintf_r>
    968a:	bc16      	pop	{r1, r2, r4}
    968c:	bc08      	pop	{r3}
    968e:	b004      	add	sp, #16
    9690:	4718      	bx	r3
    9692:	46c0      	nop			; (mov r8, r8)
    9694:	20000128 	.word	0x20000128

00009698 <setbuf>:
    9698:	424a      	negs	r2, r1
    969a:	414a      	adcs	r2, r1
    969c:	2380      	movs	r3, #128	; 0x80
    969e:	b510      	push	{r4, lr}
    96a0:	0052      	lsls	r2, r2, #1
    96a2:	00db      	lsls	r3, r3, #3
    96a4:	f000 f802 	bl	96ac <setvbuf>
    96a8:	bd10      	pop	{r4, pc}
	...

000096ac <setvbuf>:
    96ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    96ae:	001d      	movs	r5, r3
    96b0:	4b4f      	ldr	r3, [pc, #316]	; (97f0 <setvbuf+0x144>)
    96b2:	b085      	sub	sp, #20
    96b4:	681e      	ldr	r6, [r3, #0]
    96b6:	0004      	movs	r4, r0
    96b8:	000f      	movs	r7, r1
    96ba:	9200      	str	r2, [sp, #0]
    96bc:	2e00      	cmp	r6, #0
    96be:	d005      	beq.n	96cc <setvbuf+0x20>
    96c0:	69b3      	ldr	r3, [r6, #24]
    96c2:	2b00      	cmp	r3, #0
    96c4:	d102      	bne.n	96cc <setvbuf+0x20>
    96c6:	0030      	movs	r0, r6
    96c8:	f000 f994 	bl	99f4 <__sinit>
    96cc:	4b49      	ldr	r3, [pc, #292]	; (97f4 <setvbuf+0x148>)
    96ce:	429c      	cmp	r4, r3
    96d0:	d150      	bne.n	9774 <setvbuf+0xc8>
    96d2:	6874      	ldr	r4, [r6, #4]
    96d4:	9b00      	ldr	r3, [sp, #0]
    96d6:	2b02      	cmp	r3, #2
    96d8:	d005      	beq.n	96e6 <setvbuf+0x3a>
    96da:	2b01      	cmp	r3, #1
    96dc:	d900      	bls.n	96e0 <setvbuf+0x34>
    96de:	e084      	b.n	97ea <setvbuf+0x13e>
    96e0:	2d00      	cmp	r5, #0
    96e2:	da00      	bge.n	96e6 <setvbuf+0x3a>
    96e4:	e081      	b.n	97ea <setvbuf+0x13e>
    96e6:	0021      	movs	r1, r4
    96e8:	0030      	movs	r0, r6
    96ea:	f000 f915 	bl	9918 <_fflush_r>
    96ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    96f0:	2900      	cmp	r1, #0
    96f2:	d008      	beq.n	9706 <setvbuf+0x5a>
    96f4:	0023      	movs	r3, r4
    96f6:	3344      	adds	r3, #68	; 0x44
    96f8:	4299      	cmp	r1, r3
    96fa:	d002      	beq.n	9702 <setvbuf+0x56>
    96fc:	0030      	movs	r0, r6
    96fe:	f000 fa85 	bl	9c0c <_free_r>
    9702:	2300      	movs	r3, #0
    9704:	6363      	str	r3, [r4, #52]	; 0x34
    9706:	2300      	movs	r3, #0
    9708:	61a3      	str	r3, [r4, #24]
    970a:	6063      	str	r3, [r4, #4]
    970c:	89a3      	ldrh	r3, [r4, #12]
    970e:	061b      	lsls	r3, r3, #24
    9710:	d503      	bpl.n	971a <setvbuf+0x6e>
    9712:	6921      	ldr	r1, [r4, #16]
    9714:	0030      	movs	r0, r6
    9716:	f000 fa79 	bl	9c0c <_free_r>
    971a:	89a3      	ldrh	r3, [r4, #12]
    971c:	4a36      	ldr	r2, [pc, #216]	; (97f8 <setvbuf+0x14c>)
    971e:	4013      	ands	r3, r2
    9720:	81a3      	strh	r3, [r4, #12]
    9722:	9b00      	ldr	r3, [sp, #0]
    9724:	2b02      	cmp	r3, #2
    9726:	d05a      	beq.n	97de <setvbuf+0x132>
    9728:	ab03      	add	r3, sp, #12
    972a:	aa02      	add	r2, sp, #8
    972c:	0021      	movs	r1, r4
    972e:	0030      	movs	r0, r6
    9730:	f000 f9f6 	bl	9b20 <__swhatbuf_r>
    9734:	89a3      	ldrh	r3, [r4, #12]
    9736:	4318      	orrs	r0, r3
    9738:	81a0      	strh	r0, [r4, #12]
    973a:	2d00      	cmp	r5, #0
    973c:	d124      	bne.n	9788 <setvbuf+0xdc>
    973e:	9d02      	ldr	r5, [sp, #8]
    9740:	0028      	movs	r0, r5
    9742:	f000 fa59 	bl	9bf8 <malloc>
    9746:	9501      	str	r5, [sp, #4]
    9748:	1e07      	subs	r7, r0, #0
    974a:	d142      	bne.n	97d2 <setvbuf+0x126>
    974c:	9b02      	ldr	r3, [sp, #8]
    974e:	9301      	str	r3, [sp, #4]
    9750:	42ab      	cmp	r3, r5
    9752:	d139      	bne.n	97c8 <setvbuf+0x11c>
    9754:	2001      	movs	r0, #1
    9756:	4240      	negs	r0, r0
    9758:	2302      	movs	r3, #2
    975a:	89a2      	ldrh	r2, [r4, #12]
    975c:	4313      	orrs	r3, r2
    975e:	81a3      	strh	r3, [r4, #12]
    9760:	2300      	movs	r3, #0
    9762:	60a3      	str	r3, [r4, #8]
    9764:	0023      	movs	r3, r4
    9766:	3347      	adds	r3, #71	; 0x47
    9768:	6023      	str	r3, [r4, #0]
    976a:	6123      	str	r3, [r4, #16]
    976c:	2301      	movs	r3, #1
    976e:	6163      	str	r3, [r4, #20]
    9770:	b005      	add	sp, #20
    9772:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9774:	4b21      	ldr	r3, [pc, #132]	; (97fc <setvbuf+0x150>)
    9776:	429c      	cmp	r4, r3
    9778:	d101      	bne.n	977e <setvbuf+0xd2>
    977a:	68b4      	ldr	r4, [r6, #8]
    977c:	e7aa      	b.n	96d4 <setvbuf+0x28>
    977e:	4b20      	ldr	r3, [pc, #128]	; (9800 <setvbuf+0x154>)
    9780:	429c      	cmp	r4, r3
    9782:	d1a7      	bne.n	96d4 <setvbuf+0x28>
    9784:	68f4      	ldr	r4, [r6, #12]
    9786:	e7a5      	b.n	96d4 <setvbuf+0x28>
    9788:	2f00      	cmp	r7, #0
    978a:	d0d9      	beq.n	9740 <setvbuf+0x94>
    978c:	69b3      	ldr	r3, [r6, #24]
    978e:	2b00      	cmp	r3, #0
    9790:	d102      	bne.n	9798 <setvbuf+0xec>
    9792:	0030      	movs	r0, r6
    9794:	f000 f92e 	bl	99f4 <__sinit>
    9798:	9b00      	ldr	r3, [sp, #0]
    979a:	2b01      	cmp	r3, #1
    979c:	d103      	bne.n	97a6 <setvbuf+0xfa>
    979e:	89a3      	ldrh	r3, [r4, #12]
    97a0:	9a00      	ldr	r2, [sp, #0]
    97a2:	431a      	orrs	r2, r3
    97a4:	81a2      	strh	r2, [r4, #12]
    97a6:	2008      	movs	r0, #8
    97a8:	89a3      	ldrh	r3, [r4, #12]
    97aa:	6027      	str	r7, [r4, #0]
    97ac:	6127      	str	r7, [r4, #16]
    97ae:	6165      	str	r5, [r4, #20]
    97b0:	4018      	ands	r0, r3
    97b2:	d018      	beq.n	97e6 <setvbuf+0x13a>
    97b4:	2001      	movs	r0, #1
    97b6:	4018      	ands	r0, r3
    97b8:	2300      	movs	r3, #0
    97ba:	4298      	cmp	r0, r3
    97bc:	d011      	beq.n	97e2 <setvbuf+0x136>
    97be:	426d      	negs	r5, r5
    97c0:	60a3      	str	r3, [r4, #8]
    97c2:	61a5      	str	r5, [r4, #24]
    97c4:	0018      	movs	r0, r3
    97c6:	e7d3      	b.n	9770 <setvbuf+0xc4>
    97c8:	9801      	ldr	r0, [sp, #4]
    97ca:	f000 fa15 	bl	9bf8 <malloc>
    97ce:	1e07      	subs	r7, r0, #0
    97d0:	d0c0      	beq.n	9754 <setvbuf+0xa8>
    97d2:	2380      	movs	r3, #128	; 0x80
    97d4:	89a2      	ldrh	r2, [r4, #12]
    97d6:	9d01      	ldr	r5, [sp, #4]
    97d8:	4313      	orrs	r3, r2
    97da:	81a3      	strh	r3, [r4, #12]
    97dc:	e7d6      	b.n	978c <setvbuf+0xe0>
    97de:	2000      	movs	r0, #0
    97e0:	e7ba      	b.n	9758 <setvbuf+0xac>
    97e2:	60a5      	str	r5, [r4, #8]
    97e4:	e7c4      	b.n	9770 <setvbuf+0xc4>
    97e6:	60a0      	str	r0, [r4, #8]
    97e8:	e7c2      	b.n	9770 <setvbuf+0xc4>
    97ea:	2001      	movs	r0, #1
    97ec:	4240      	negs	r0, r0
    97ee:	e7bf      	b.n	9770 <setvbuf+0xc4>
    97f0:	20000128 	.word	0x20000128
    97f4:	0000aff0 	.word	0x0000aff0
    97f8:	fffff35c 	.word	0xfffff35c
    97fc:	0000b010 	.word	0x0000b010
    9800:	0000afd0 	.word	0x0000afd0

00009804 <__sflush_r>:
    9804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9806:	898a      	ldrh	r2, [r1, #12]
    9808:	0005      	movs	r5, r0
    980a:	000c      	movs	r4, r1
    980c:	0713      	lsls	r3, r2, #28
    980e:	d460      	bmi.n	98d2 <__sflush_r+0xce>
    9810:	684b      	ldr	r3, [r1, #4]
    9812:	2b00      	cmp	r3, #0
    9814:	dc04      	bgt.n	9820 <__sflush_r+0x1c>
    9816:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    9818:	2b00      	cmp	r3, #0
    981a:	dc01      	bgt.n	9820 <__sflush_r+0x1c>
    981c:	2000      	movs	r0, #0
    981e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9820:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9822:	2f00      	cmp	r7, #0
    9824:	d0fa      	beq.n	981c <__sflush_r+0x18>
    9826:	2300      	movs	r3, #0
    9828:	682e      	ldr	r6, [r5, #0]
    982a:	602b      	str	r3, [r5, #0]
    982c:	2380      	movs	r3, #128	; 0x80
    982e:	015b      	lsls	r3, r3, #5
    9830:	401a      	ands	r2, r3
    9832:	d034      	beq.n	989e <__sflush_r+0x9a>
    9834:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9836:	89a3      	ldrh	r3, [r4, #12]
    9838:	075b      	lsls	r3, r3, #29
    983a:	d506      	bpl.n	984a <__sflush_r+0x46>
    983c:	6863      	ldr	r3, [r4, #4]
    983e:	1ac0      	subs	r0, r0, r3
    9840:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9842:	2b00      	cmp	r3, #0
    9844:	d001      	beq.n	984a <__sflush_r+0x46>
    9846:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9848:	1ac0      	subs	r0, r0, r3
    984a:	0002      	movs	r2, r0
    984c:	6a21      	ldr	r1, [r4, #32]
    984e:	2300      	movs	r3, #0
    9850:	0028      	movs	r0, r5
    9852:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9854:	47b8      	blx	r7
    9856:	89a1      	ldrh	r1, [r4, #12]
    9858:	1c43      	adds	r3, r0, #1
    985a:	d106      	bne.n	986a <__sflush_r+0x66>
    985c:	682b      	ldr	r3, [r5, #0]
    985e:	2b1d      	cmp	r3, #29
    9860:	d831      	bhi.n	98c6 <__sflush_r+0xc2>
    9862:	4a2c      	ldr	r2, [pc, #176]	; (9914 <__sflush_r+0x110>)
    9864:	40da      	lsrs	r2, r3
    9866:	07d3      	lsls	r3, r2, #31
    9868:	d52d      	bpl.n	98c6 <__sflush_r+0xc2>
    986a:	2300      	movs	r3, #0
    986c:	6063      	str	r3, [r4, #4]
    986e:	6923      	ldr	r3, [r4, #16]
    9870:	6023      	str	r3, [r4, #0]
    9872:	04cb      	lsls	r3, r1, #19
    9874:	d505      	bpl.n	9882 <__sflush_r+0x7e>
    9876:	1c43      	adds	r3, r0, #1
    9878:	d102      	bne.n	9880 <__sflush_r+0x7c>
    987a:	682b      	ldr	r3, [r5, #0]
    987c:	2b00      	cmp	r3, #0
    987e:	d100      	bne.n	9882 <__sflush_r+0x7e>
    9880:	6560      	str	r0, [r4, #84]	; 0x54
    9882:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9884:	602e      	str	r6, [r5, #0]
    9886:	2900      	cmp	r1, #0
    9888:	d0c8      	beq.n	981c <__sflush_r+0x18>
    988a:	0023      	movs	r3, r4
    988c:	3344      	adds	r3, #68	; 0x44
    988e:	4299      	cmp	r1, r3
    9890:	d002      	beq.n	9898 <__sflush_r+0x94>
    9892:	0028      	movs	r0, r5
    9894:	f000 f9ba 	bl	9c0c <_free_r>
    9898:	2000      	movs	r0, #0
    989a:	6360      	str	r0, [r4, #52]	; 0x34
    989c:	e7bf      	b.n	981e <__sflush_r+0x1a>
    989e:	2301      	movs	r3, #1
    98a0:	6a21      	ldr	r1, [r4, #32]
    98a2:	0028      	movs	r0, r5
    98a4:	47b8      	blx	r7
    98a6:	1c43      	adds	r3, r0, #1
    98a8:	d1c5      	bne.n	9836 <__sflush_r+0x32>
    98aa:	682b      	ldr	r3, [r5, #0]
    98ac:	2b00      	cmp	r3, #0
    98ae:	d0c2      	beq.n	9836 <__sflush_r+0x32>
    98b0:	2b1d      	cmp	r3, #29
    98b2:	d001      	beq.n	98b8 <__sflush_r+0xb4>
    98b4:	2b16      	cmp	r3, #22
    98b6:	d101      	bne.n	98bc <__sflush_r+0xb8>
    98b8:	602e      	str	r6, [r5, #0]
    98ba:	e7af      	b.n	981c <__sflush_r+0x18>
    98bc:	2340      	movs	r3, #64	; 0x40
    98be:	89a2      	ldrh	r2, [r4, #12]
    98c0:	4313      	orrs	r3, r2
    98c2:	81a3      	strh	r3, [r4, #12]
    98c4:	e7ab      	b.n	981e <__sflush_r+0x1a>
    98c6:	2340      	movs	r3, #64	; 0x40
    98c8:	430b      	orrs	r3, r1
    98ca:	2001      	movs	r0, #1
    98cc:	81a3      	strh	r3, [r4, #12]
    98ce:	4240      	negs	r0, r0
    98d0:	e7a5      	b.n	981e <__sflush_r+0x1a>
    98d2:	690f      	ldr	r7, [r1, #16]
    98d4:	2f00      	cmp	r7, #0
    98d6:	d0a1      	beq.n	981c <__sflush_r+0x18>
    98d8:	680b      	ldr	r3, [r1, #0]
    98da:	600f      	str	r7, [r1, #0]
    98dc:	1bdb      	subs	r3, r3, r7
    98de:	9301      	str	r3, [sp, #4]
    98e0:	2300      	movs	r3, #0
    98e2:	0792      	lsls	r2, r2, #30
    98e4:	d100      	bne.n	98e8 <__sflush_r+0xe4>
    98e6:	694b      	ldr	r3, [r1, #20]
    98e8:	60a3      	str	r3, [r4, #8]
    98ea:	9b01      	ldr	r3, [sp, #4]
    98ec:	2b00      	cmp	r3, #0
    98ee:	dc00      	bgt.n	98f2 <__sflush_r+0xee>
    98f0:	e794      	b.n	981c <__sflush_r+0x18>
    98f2:	9b01      	ldr	r3, [sp, #4]
    98f4:	003a      	movs	r2, r7
    98f6:	6a21      	ldr	r1, [r4, #32]
    98f8:	0028      	movs	r0, r5
    98fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    98fc:	47b0      	blx	r6
    98fe:	2800      	cmp	r0, #0
    9900:	dc03      	bgt.n	990a <__sflush_r+0x106>
    9902:	2340      	movs	r3, #64	; 0x40
    9904:	89a2      	ldrh	r2, [r4, #12]
    9906:	4313      	orrs	r3, r2
    9908:	e7df      	b.n	98ca <__sflush_r+0xc6>
    990a:	9b01      	ldr	r3, [sp, #4]
    990c:	183f      	adds	r7, r7, r0
    990e:	1a1b      	subs	r3, r3, r0
    9910:	9301      	str	r3, [sp, #4]
    9912:	e7ea      	b.n	98ea <__sflush_r+0xe6>
    9914:	20400001 	.word	0x20400001

00009918 <_fflush_r>:
    9918:	690b      	ldr	r3, [r1, #16]
    991a:	b570      	push	{r4, r5, r6, lr}
    991c:	0005      	movs	r5, r0
    991e:	000c      	movs	r4, r1
    9920:	2b00      	cmp	r3, #0
    9922:	d101      	bne.n	9928 <_fflush_r+0x10>
    9924:	2000      	movs	r0, #0
    9926:	bd70      	pop	{r4, r5, r6, pc}
    9928:	2800      	cmp	r0, #0
    992a:	d004      	beq.n	9936 <_fflush_r+0x1e>
    992c:	6983      	ldr	r3, [r0, #24]
    992e:	2b00      	cmp	r3, #0
    9930:	d101      	bne.n	9936 <_fflush_r+0x1e>
    9932:	f000 f85f 	bl	99f4 <__sinit>
    9936:	4b0b      	ldr	r3, [pc, #44]	; (9964 <_fflush_r+0x4c>)
    9938:	429c      	cmp	r4, r3
    993a:	d109      	bne.n	9950 <_fflush_r+0x38>
    993c:	686c      	ldr	r4, [r5, #4]
    993e:	220c      	movs	r2, #12
    9940:	5ea3      	ldrsh	r3, [r4, r2]
    9942:	2b00      	cmp	r3, #0
    9944:	d0ee      	beq.n	9924 <_fflush_r+0xc>
    9946:	0021      	movs	r1, r4
    9948:	0028      	movs	r0, r5
    994a:	f7ff ff5b 	bl	9804 <__sflush_r>
    994e:	e7ea      	b.n	9926 <_fflush_r+0xe>
    9950:	4b05      	ldr	r3, [pc, #20]	; (9968 <_fflush_r+0x50>)
    9952:	429c      	cmp	r4, r3
    9954:	d101      	bne.n	995a <_fflush_r+0x42>
    9956:	68ac      	ldr	r4, [r5, #8]
    9958:	e7f1      	b.n	993e <_fflush_r+0x26>
    995a:	4b04      	ldr	r3, [pc, #16]	; (996c <_fflush_r+0x54>)
    995c:	429c      	cmp	r4, r3
    995e:	d1ee      	bne.n	993e <_fflush_r+0x26>
    9960:	68ec      	ldr	r4, [r5, #12]
    9962:	e7ec      	b.n	993e <_fflush_r+0x26>
    9964:	0000aff0 	.word	0x0000aff0
    9968:	0000b010 	.word	0x0000b010
    996c:	0000afd0 	.word	0x0000afd0

00009970 <_cleanup_r>:
    9970:	b510      	push	{r4, lr}
    9972:	4902      	ldr	r1, [pc, #8]	; (997c <_cleanup_r+0xc>)
    9974:	f000 f8b2 	bl	9adc <_fwalk_reent>
    9978:	bd10      	pop	{r4, pc}
    997a:	46c0      	nop			; (mov r8, r8)
    997c:	00009919 	.word	0x00009919

00009980 <std.isra.0>:
    9980:	2300      	movs	r3, #0
    9982:	b510      	push	{r4, lr}
    9984:	0004      	movs	r4, r0
    9986:	6003      	str	r3, [r0, #0]
    9988:	6043      	str	r3, [r0, #4]
    998a:	6083      	str	r3, [r0, #8]
    998c:	8181      	strh	r1, [r0, #12]
    998e:	6643      	str	r3, [r0, #100]	; 0x64
    9990:	81c2      	strh	r2, [r0, #14]
    9992:	6103      	str	r3, [r0, #16]
    9994:	6143      	str	r3, [r0, #20]
    9996:	6183      	str	r3, [r0, #24]
    9998:	0019      	movs	r1, r3
    999a:	2208      	movs	r2, #8
    999c:	305c      	adds	r0, #92	; 0x5c
    999e:	f7ff fe58 	bl	9652 <memset>
    99a2:	4b05      	ldr	r3, [pc, #20]	; (99b8 <std.isra.0+0x38>)
    99a4:	6224      	str	r4, [r4, #32]
    99a6:	6263      	str	r3, [r4, #36]	; 0x24
    99a8:	4b04      	ldr	r3, [pc, #16]	; (99bc <std.isra.0+0x3c>)
    99aa:	62a3      	str	r3, [r4, #40]	; 0x28
    99ac:	4b04      	ldr	r3, [pc, #16]	; (99c0 <std.isra.0+0x40>)
    99ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    99b0:	4b04      	ldr	r3, [pc, #16]	; (99c4 <std.isra.0+0x44>)
    99b2:	6323      	str	r3, [r4, #48]	; 0x30
    99b4:	bd10      	pop	{r4, pc}
    99b6:	46c0      	nop			; (mov r8, r8)
    99b8:	0000a319 	.word	0x0000a319
    99bc:	0000a341 	.word	0x0000a341
    99c0:	0000a379 	.word	0x0000a379
    99c4:	0000a3a5 	.word	0x0000a3a5

000099c8 <__sfmoreglue>:
    99c8:	b570      	push	{r4, r5, r6, lr}
    99ca:	2568      	movs	r5, #104	; 0x68
    99cc:	1e4a      	subs	r2, r1, #1
    99ce:	4355      	muls	r5, r2
    99d0:	000e      	movs	r6, r1
    99d2:	0029      	movs	r1, r5
    99d4:	3174      	adds	r1, #116	; 0x74
    99d6:	f000 f963 	bl	9ca0 <_malloc_r>
    99da:	1e04      	subs	r4, r0, #0
    99dc:	d008      	beq.n	99f0 <__sfmoreglue+0x28>
    99de:	2100      	movs	r1, #0
    99e0:	002a      	movs	r2, r5
    99e2:	6001      	str	r1, [r0, #0]
    99e4:	6046      	str	r6, [r0, #4]
    99e6:	300c      	adds	r0, #12
    99e8:	60a0      	str	r0, [r4, #8]
    99ea:	3268      	adds	r2, #104	; 0x68
    99ec:	f7ff fe31 	bl	9652 <memset>
    99f0:	0020      	movs	r0, r4
    99f2:	bd70      	pop	{r4, r5, r6, pc}

000099f4 <__sinit>:
    99f4:	6983      	ldr	r3, [r0, #24]
    99f6:	b513      	push	{r0, r1, r4, lr}
    99f8:	0004      	movs	r4, r0
    99fa:	2b00      	cmp	r3, #0
    99fc:	d128      	bne.n	9a50 <__sinit+0x5c>
    99fe:	6483      	str	r3, [r0, #72]	; 0x48
    9a00:	64c3      	str	r3, [r0, #76]	; 0x4c
    9a02:	6503      	str	r3, [r0, #80]	; 0x50
    9a04:	4b13      	ldr	r3, [pc, #76]	; (9a54 <__sinit+0x60>)
    9a06:	4a14      	ldr	r2, [pc, #80]	; (9a58 <__sinit+0x64>)
    9a08:	681b      	ldr	r3, [r3, #0]
    9a0a:	6282      	str	r2, [r0, #40]	; 0x28
    9a0c:	9301      	str	r3, [sp, #4]
    9a0e:	4298      	cmp	r0, r3
    9a10:	d101      	bne.n	9a16 <__sinit+0x22>
    9a12:	2301      	movs	r3, #1
    9a14:	6183      	str	r3, [r0, #24]
    9a16:	0020      	movs	r0, r4
    9a18:	f000 f820 	bl	9a5c <__sfp>
    9a1c:	6060      	str	r0, [r4, #4]
    9a1e:	0020      	movs	r0, r4
    9a20:	f000 f81c 	bl	9a5c <__sfp>
    9a24:	60a0      	str	r0, [r4, #8]
    9a26:	0020      	movs	r0, r4
    9a28:	f000 f818 	bl	9a5c <__sfp>
    9a2c:	2200      	movs	r2, #0
    9a2e:	60e0      	str	r0, [r4, #12]
    9a30:	2104      	movs	r1, #4
    9a32:	6860      	ldr	r0, [r4, #4]
    9a34:	f7ff ffa4 	bl	9980 <std.isra.0>
    9a38:	2201      	movs	r2, #1
    9a3a:	2109      	movs	r1, #9
    9a3c:	68a0      	ldr	r0, [r4, #8]
    9a3e:	f7ff ff9f 	bl	9980 <std.isra.0>
    9a42:	2202      	movs	r2, #2
    9a44:	2112      	movs	r1, #18
    9a46:	68e0      	ldr	r0, [r4, #12]
    9a48:	f7ff ff9a 	bl	9980 <std.isra.0>
    9a4c:	2301      	movs	r3, #1
    9a4e:	61a3      	str	r3, [r4, #24]
    9a50:	bd13      	pop	{r0, r1, r4, pc}
    9a52:	46c0      	nop			; (mov r8, r8)
    9a54:	0000afcc 	.word	0x0000afcc
    9a58:	00009971 	.word	0x00009971

00009a5c <__sfp>:
    9a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a5e:	4b1e      	ldr	r3, [pc, #120]	; (9ad8 <__sfp+0x7c>)
    9a60:	0007      	movs	r7, r0
    9a62:	681e      	ldr	r6, [r3, #0]
    9a64:	69b3      	ldr	r3, [r6, #24]
    9a66:	2b00      	cmp	r3, #0
    9a68:	d102      	bne.n	9a70 <__sfp+0x14>
    9a6a:	0030      	movs	r0, r6
    9a6c:	f7ff ffc2 	bl	99f4 <__sinit>
    9a70:	3648      	adds	r6, #72	; 0x48
    9a72:	68b4      	ldr	r4, [r6, #8]
    9a74:	6873      	ldr	r3, [r6, #4]
    9a76:	3b01      	subs	r3, #1
    9a78:	d504      	bpl.n	9a84 <__sfp+0x28>
    9a7a:	6833      	ldr	r3, [r6, #0]
    9a7c:	2b00      	cmp	r3, #0
    9a7e:	d007      	beq.n	9a90 <__sfp+0x34>
    9a80:	6836      	ldr	r6, [r6, #0]
    9a82:	e7f6      	b.n	9a72 <__sfp+0x16>
    9a84:	220c      	movs	r2, #12
    9a86:	5ea5      	ldrsh	r5, [r4, r2]
    9a88:	2d00      	cmp	r5, #0
    9a8a:	d00d      	beq.n	9aa8 <__sfp+0x4c>
    9a8c:	3468      	adds	r4, #104	; 0x68
    9a8e:	e7f2      	b.n	9a76 <__sfp+0x1a>
    9a90:	2104      	movs	r1, #4
    9a92:	0038      	movs	r0, r7
    9a94:	f7ff ff98 	bl	99c8 <__sfmoreglue>
    9a98:	6030      	str	r0, [r6, #0]
    9a9a:	2800      	cmp	r0, #0
    9a9c:	d1f0      	bne.n	9a80 <__sfp+0x24>
    9a9e:	230c      	movs	r3, #12
    9aa0:	0004      	movs	r4, r0
    9aa2:	603b      	str	r3, [r7, #0]
    9aa4:	0020      	movs	r0, r4
    9aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9aa8:	2301      	movs	r3, #1
    9aaa:	0020      	movs	r0, r4
    9aac:	425b      	negs	r3, r3
    9aae:	81e3      	strh	r3, [r4, #14]
    9ab0:	3302      	adds	r3, #2
    9ab2:	81a3      	strh	r3, [r4, #12]
    9ab4:	6665      	str	r5, [r4, #100]	; 0x64
    9ab6:	6025      	str	r5, [r4, #0]
    9ab8:	60a5      	str	r5, [r4, #8]
    9aba:	6065      	str	r5, [r4, #4]
    9abc:	6125      	str	r5, [r4, #16]
    9abe:	6165      	str	r5, [r4, #20]
    9ac0:	61a5      	str	r5, [r4, #24]
    9ac2:	2208      	movs	r2, #8
    9ac4:	0029      	movs	r1, r5
    9ac6:	305c      	adds	r0, #92	; 0x5c
    9ac8:	f7ff fdc3 	bl	9652 <memset>
    9acc:	6365      	str	r5, [r4, #52]	; 0x34
    9ace:	63a5      	str	r5, [r4, #56]	; 0x38
    9ad0:	64a5      	str	r5, [r4, #72]	; 0x48
    9ad2:	64e5      	str	r5, [r4, #76]	; 0x4c
    9ad4:	e7e6      	b.n	9aa4 <__sfp+0x48>
    9ad6:	46c0      	nop			; (mov r8, r8)
    9ad8:	0000afcc 	.word	0x0000afcc

00009adc <_fwalk_reent>:
    9adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9ade:	0004      	movs	r4, r0
    9ae0:	0007      	movs	r7, r0
    9ae2:	2600      	movs	r6, #0
    9ae4:	9101      	str	r1, [sp, #4]
    9ae6:	3448      	adds	r4, #72	; 0x48
    9ae8:	2c00      	cmp	r4, #0
    9aea:	d101      	bne.n	9af0 <_fwalk_reent+0x14>
    9aec:	0030      	movs	r0, r6
    9aee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9af0:	6863      	ldr	r3, [r4, #4]
    9af2:	68a5      	ldr	r5, [r4, #8]
    9af4:	9300      	str	r3, [sp, #0]
    9af6:	9b00      	ldr	r3, [sp, #0]
    9af8:	3b01      	subs	r3, #1
    9afa:	9300      	str	r3, [sp, #0]
    9afc:	d501      	bpl.n	9b02 <_fwalk_reent+0x26>
    9afe:	6824      	ldr	r4, [r4, #0]
    9b00:	e7f2      	b.n	9ae8 <_fwalk_reent+0xc>
    9b02:	89ab      	ldrh	r3, [r5, #12]
    9b04:	2b01      	cmp	r3, #1
    9b06:	d908      	bls.n	9b1a <_fwalk_reent+0x3e>
    9b08:	220e      	movs	r2, #14
    9b0a:	5eab      	ldrsh	r3, [r5, r2]
    9b0c:	3301      	adds	r3, #1
    9b0e:	d004      	beq.n	9b1a <_fwalk_reent+0x3e>
    9b10:	0029      	movs	r1, r5
    9b12:	0038      	movs	r0, r7
    9b14:	9b01      	ldr	r3, [sp, #4]
    9b16:	4798      	blx	r3
    9b18:	4306      	orrs	r6, r0
    9b1a:	3568      	adds	r5, #104	; 0x68
    9b1c:	e7eb      	b.n	9af6 <_fwalk_reent+0x1a>
	...

00009b20 <__swhatbuf_r>:
    9b20:	b570      	push	{r4, r5, r6, lr}
    9b22:	000e      	movs	r6, r1
    9b24:	001d      	movs	r5, r3
    9b26:	230e      	movs	r3, #14
    9b28:	5ec9      	ldrsh	r1, [r1, r3]
    9b2a:	b090      	sub	sp, #64	; 0x40
    9b2c:	0014      	movs	r4, r2
    9b2e:	2900      	cmp	r1, #0
    9b30:	da07      	bge.n	9b42 <__swhatbuf_r+0x22>
    9b32:	2300      	movs	r3, #0
    9b34:	602b      	str	r3, [r5, #0]
    9b36:	89b3      	ldrh	r3, [r6, #12]
    9b38:	061b      	lsls	r3, r3, #24
    9b3a:	d411      	bmi.n	9b60 <__swhatbuf_r+0x40>
    9b3c:	2380      	movs	r3, #128	; 0x80
    9b3e:	00db      	lsls	r3, r3, #3
    9b40:	e00f      	b.n	9b62 <__swhatbuf_r+0x42>
    9b42:	aa01      	add	r2, sp, #4
    9b44:	f000 fd26 	bl	a594 <_fstat_r>
    9b48:	2800      	cmp	r0, #0
    9b4a:	dbf2      	blt.n	9b32 <__swhatbuf_r+0x12>
    9b4c:	22f0      	movs	r2, #240	; 0xf0
    9b4e:	9b02      	ldr	r3, [sp, #8]
    9b50:	0212      	lsls	r2, r2, #8
    9b52:	4013      	ands	r3, r2
    9b54:	4a05      	ldr	r2, [pc, #20]	; (9b6c <__swhatbuf_r+0x4c>)
    9b56:	189b      	adds	r3, r3, r2
    9b58:	425a      	negs	r2, r3
    9b5a:	4153      	adcs	r3, r2
    9b5c:	602b      	str	r3, [r5, #0]
    9b5e:	e7ed      	b.n	9b3c <__swhatbuf_r+0x1c>
    9b60:	2340      	movs	r3, #64	; 0x40
    9b62:	2000      	movs	r0, #0
    9b64:	6023      	str	r3, [r4, #0]
    9b66:	b010      	add	sp, #64	; 0x40
    9b68:	bd70      	pop	{r4, r5, r6, pc}
    9b6a:	46c0      	nop			; (mov r8, r8)
    9b6c:	ffffe000 	.word	0xffffe000

00009b70 <__smakebuf_r>:
    9b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9b72:	2602      	movs	r6, #2
    9b74:	898b      	ldrh	r3, [r1, #12]
    9b76:	0005      	movs	r5, r0
    9b78:	000c      	movs	r4, r1
    9b7a:	4233      	tst	r3, r6
    9b7c:	d006      	beq.n	9b8c <__smakebuf_r+0x1c>
    9b7e:	0023      	movs	r3, r4
    9b80:	3347      	adds	r3, #71	; 0x47
    9b82:	6023      	str	r3, [r4, #0]
    9b84:	6123      	str	r3, [r4, #16]
    9b86:	2301      	movs	r3, #1
    9b88:	6163      	str	r3, [r4, #20]
    9b8a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    9b8c:	ab01      	add	r3, sp, #4
    9b8e:	466a      	mov	r2, sp
    9b90:	f7ff ffc6 	bl	9b20 <__swhatbuf_r>
    9b94:	9900      	ldr	r1, [sp, #0]
    9b96:	0007      	movs	r7, r0
    9b98:	0028      	movs	r0, r5
    9b9a:	f000 f881 	bl	9ca0 <_malloc_r>
    9b9e:	2800      	cmp	r0, #0
    9ba0:	d108      	bne.n	9bb4 <__smakebuf_r+0x44>
    9ba2:	220c      	movs	r2, #12
    9ba4:	5ea3      	ldrsh	r3, [r4, r2]
    9ba6:	059a      	lsls	r2, r3, #22
    9ba8:	d4ef      	bmi.n	9b8a <__smakebuf_r+0x1a>
    9baa:	2203      	movs	r2, #3
    9bac:	4393      	bics	r3, r2
    9bae:	431e      	orrs	r6, r3
    9bb0:	81a6      	strh	r6, [r4, #12]
    9bb2:	e7e4      	b.n	9b7e <__smakebuf_r+0xe>
    9bb4:	4b0f      	ldr	r3, [pc, #60]	; (9bf4 <__smakebuf_r+0x84>)
    9bb6:	62ab      	str	r3, [r5, #40]	; 0x28
    9bb8:	2380      	movs	r3, #128	; 0x80
    9bba:	89a2      	ldrh	r2, [r4, #12]
    9bbc:	6020      	str	r0, [r4, #0]
    9bbe:	4313      	orrs	r3, r2
    9bc0:	81a3      	strh	r3, [r4, #12]
    9bc2:	9b00      	ldr	r3, [sp, #0]
    9bc4:	6120      	str	r0, [r4, #16]
    9bc6:	6163      	str	r3, [r4, #20]
    9bc8:	9b01      	ldr	r3, [sp, #4]
    9bca:	2b00      	cmp	r3, #0
    9bcc:	d00d      	beq.n	9bea <__smakebuf_r+0x7a>
    9bce:	230e      	movs	r3, #14
    9bd0:	5ee1      	ldrsh	r1, [r4, r3]
    9bd2:	0028      	movs	r0, r5
    9bd4:	f000 fcf0 	bl	a5b8 <_isatty_r>
    9bd8:	2800      	cmp	r0, #0
    9bda:	d006      	beq.n	9bea <__smakebuf_r+0x7a>
    9bdc:	2203      	movs	r2, #3
    9bde:	89a3      	ldrh	r3, [r4, #12]
    9be0:	4393      	bics	r3, r2
    9be2:	001a      	movs	r2, r3
    9be4:	2301      	movs	r3, #1
    9be6:	4313      	orrs	r3, r2
    9be8:	81a3      	strh	r3, [r4, #12]
    9bea:	89a0      	ldrh	r0, [r4, #12]
    9bec:	4338      	orrs	r0, r7
    9bee:	81a0      	strh	r0, [r4, #12]
    9bf0:	e7cb      	b.n	9b8a <__smakebuf_r+0x1a>
    9bf2:	46c0      	nop			; (mov r8, r8)
    9bf4:	00009971 	.word	0x00009971

00009bf8 <malloc>:
    9bf8:	b510      	push	{r4, lr}
    9bfa:	4b03      	ldr	r3, [pc, #12]	; (9c08 <malloc+0x10>)
    9bfc:	0001      	movs	r1, r0
    9bfe:	6818      	ldr	r0, [r3, #0]
    9c00:	f000 f84e 	bl	9ca0 <_malloc_r>
    9c04:	bd10      	pop	{r4, pc}
    9c06:	46c0      	nop			; (mov r8, r8)
    9c08:	20000128 	.word	0x20000128

00009c0c <_free_r>:
    9c0c:	b570      	push	{r4, r5, r6, lr}
    9c0e:	0005      	movs	r5, r0
    9c10:	2900      	cmp	r1, #0
    9c12:	d010      	beq.n	9c36 <_free_r+0x2a>
    9c14:	1f0c      	subs	r4, r1, #4
    9c16:	6823      	ldr	r3, [r4, #0]
    9c18:	2b00      	cmp	r3, #0
    9c1a:	da00      	bge.n	9c1e <_free_r+0x12>
    9c1c:	18e4      	adds	r4, r4, r3
    9c1e:	0028      	movs	r0, r5
    9c20:	f000 fcfb 	bl	a61a <__malloc_lock>
    9c24:	4a1d      	ldr	r2, [pc, #116]	; (9c9c <_free_r+0x90>)
    9c26:	6813      	ldr	r3, [r2, #0]
    9c28:	2b00      	cmp	r3, #0
    9c2a:	d105      	bne.n	9c38 <_free_r+0x2c>
    9c2c:	6063      	str	r3, [r4, #4]
    9c2e:	6014      	str	r4, [r2, #0]
    9c30:	0028      	movs	r0, r5
    9c32:	f000 fcf3 	bl	a61c <__malloc_unlock>
    9c36:	bd70      	pop	{r4, r5, r6, pc}
    9c38:	42a3      	cmp	r3, r4
    9c3a:	d909      	bls.n	9c50 <_free_r+0x44>
    9c3c:	6821      	ldr	r1, [r4, #0]
    9c3e:	1860      	adds	r0, r4, r1
    9c40:	4283      	cmp	r3, r0
    9c42:	d1f3      	bne.n	9c2c <_free_r+0x20>
    9c44:	6818      	ldr	r0, [r3, #0]
    9c46:	685b      	ldr	r3, [r3, #4]
    9c48:	1841      	adds	r1, r0, r1
    9c4a:	6021      	str	r1, [r4, #0]
    9c4c:	e7ee      	b.n	9c2c <_free_r+0x20>
    9c4e:	0013      	movs	r3, r2
    9c50:	685a      	ldr	r2, [r3, #4]
    9c52:	2a00      	cmp	r2, #0
    9c54:	d001      	beq.n	9c5a <_free_r+0x4e>
    9c56:	42a2      	cmp	r2, r4
    9c58:	d9f9      	bls.n	9c4e <_free_r+0x42>
    9c5a:	6819      	ldr	r1, [r3, #0]
    9c5c:	1858      	adds	r0, r3, r1
    9c5e:	42a0      	cmp	r0, r4
    9c60:	d10b      	bne.n	9c7a <_free_r+0x6e>
    9c62:	6820      	ldr	r0, [r4, #0]
    9c64:	1809      	adds	r1, r1, r0
    9c66:	1858      	adds	r0, r3, r1
    9c68:	6019      	str	r1, [r3, #0]
    9c6a:	4282      	cmp	r2, r0
    9c6c:	d1e0      	bne.n	9c30 <_free_r+0x24>
    9c6e:	6810      	ldr	r0, [r2, #0]
    9c70:	6852      	ldr	r2, [r2, #4]
    9c72:	1841      	adds	r1, r0, r1
    9c74:	6019      	str	r1, [r3, #0]
    9c76:	605a      	str	r2, [r3, #4]
    9c78:	e7da      	b.n	9c30 <_free_r+0x24>
    9c7a:	42a0      	cmp	r0, r4
    9c7c:	d902      	bls.n	9c84 <_free_r+0x78>
    9c7e:	230c      	movs	r3, #12
    9c80:	602b      	str	r3, [r5, #0]
    9c82:	e7d5      	b.n	9c30 <_free_r+0x24>
    9c84:	6821      	ldr	r1, [r4, #0]
    9c86:	1860      	adds	r0, r4, r1
    9c88:	4282      	cmp	r2, r0
    9c8a:	d103      	bne.n	9c94 <_free_r+0x88>
    9c8c:	6810      	ldr	r0, [r2, #0]
    9c8e:	6852      	ldr	r2, [r2, #4]
    9c90:	1841      	adds	r1, r0, r1
    9c92:	6021      	str	r1, [r4, #0]
    9c94:	6062      	str	r2, [r4, #4]
    9c96:	605c      	str	r4, [r3, #4]
    9c98:	e7ca      	b.n	9c30 <_free_r+0x24>
    9c9a:	46c0      	nop			; (mov r8, r8)
    9c9c:	20000360 	.word	0x20000360

00009ca0 <_malloc_r>:
    9ca0:	2303      	movs	r3, #3
    9ca2:	b570      	push	{r4, r5, r6, lr}
    9ca4:	1ccd      	adds	r5, r1, #3
    9ca6:	439d      	bics	r5, r3
    9ca8:	3508      	adds	r5, #8
    9caa:	0006      	movs	r6, r0
    9cac:	2d0c      	cmp	r5, #12
    9cae:	d21e      	bcs.n	9cee <_malloc_r+0x4e>
    9cb0:	250c      	movs	r5, #12
    9cb2:	42a9      	cmp	r1, r5
    9cb4:	d81d      	bhi.n	9cf2 <_malloc_r+0x52>
    9cb6:	0030      	movs	r0, r6
    9cb8:	f000 fcaf 	bl	a61a <__malloc_lock>
    9cbc:	4a25      	ldr	r2, [pc, #148]	; (9d54 <_malloc_r+0xb4>)
    9cbe:	6814      	ldr	r4, [r2, #0]
    9cc0:	0021      	movs	r1, r4
    9cc2:	2900      	cmp	r1, #0
    9cc4:	d119      	bne.n	9cfa <_malloc_r+0x5a>
    9cc6:	4c24      	ldr	r4, [pc, #144]	; (9d58 <_malloc_r+0xb8>)
    9cc8:	6823      	ldr	r3, [r4, #0]
    9cca:	2b00      	cmp	r3, #0
    9ccc:	d103      	bne.n	9cd6 <_malloc_r+0x36>
    9cce:	0030      	movs	r0, r6
    9cd0:	f000 fb10 	bl	a2f4 <_sbrk_r>
    9cd4:	6020      	str	r0, [r4, #0]
    9cd6:	0029      	movs	r1, r5
    9cd8:	0030      	movs	r0, r6
    9cda:	f000 fb0b 	bl	a2f4 <_sbrk_r>
    9cde:	1c43      	adds	r3, r0, #1
    9ce0:	d12c      	bne.n	9d3c <_malloc_r+0x9c>
    9ce2:	230c      	movs	r3, #12
    9ce4:	0030      	movs	r0, r6
    9ce6:	6033      	str	r3, [r6, #0]
    9ce8:	f000 fc98 	bl	a61c <__malloc_unlock>
    9cec:	e003      	b.n	9cf6 <_malloc_r+0x56>
    9cee:	2d00      	cmp	r5, #0
    9cf0:	dadf      	bge.n	9cb2 <_malloc_r+0x12>
    9cf2:	230c      	movs	r3, #12
    9cf4:	6033      	str	r3, [r6, #0]
    9cf6:	2000      	movs	r0, #0
    9cf8:	bd70      	pop	{r4, r5, r6, pc}
    9cfa:	680b      	ldr	r3, [r1, #0]
    9cfc:	1b5b      	subs	r3, r3, r5
    9cfe:	d41a      	bmi.n	9d36 <_malloc_r+0x96>
    9d00:	2b0b      	cmp	r3, #11
    9d02:	d903      	bls.n	9d0c <_malloc_r+0x6c>
    9d04:	600b      	str	r3, [r1, #0]
    9d06:	18cc      	adds	r4, r1, r3
    9d08:	6025      	str	r5, [r4, #0]
    9d0a:	e003      	b.n	9d14 <_malloc_r+0x74>
    9d0c:	428c      	cmp	r4, r1
    9d0e:	d10e      	bne.n	9d2e <_malloc_r+0x8e>
    9d10:	6863      	ldr	r3, [r4, #4]
    9d12:	6013      	str	r3, [r2, #0]
    9d14:	0030      	movs	r0, r6
    9d16:	f000 fc81 	bl	a61c <__malloc_unlock>
    9d1a:	0020      	movs	r0, r4
    9d1c:	2207      	movs	r2, #7
    9d1e:	300b      	adds	r0, #11
    9d20:	1d23      	adds	r3, r4, #4
    9d22:	4390      	bics	r0, r2
    9d24:	1ac3      	subs	r3, r0, r3
    9d26:	d0e7      	beq.n	9cf8 <_malloc_r+0x58>
    9d28:	425a      	negs	r2, r3
    9d2a:	50e2      	str	r2, [r4, r3]
    9d2c:	e7e4      	b.n	9cf8 <_malloc_r+0x58>
    9d2e:	684b      	ldr	r3, [r1, #4]
    9d30:	6063      	str	r3, [r4, #4]
    9d32:	000c      	movs	r4, r1
    9d34:	e7ee      	b.n	9d14 <_malloc_r+0x74>
    9d36:	000c      	movs	r4, r1
    9d38:	6849      	ldr	r1, [r1, #4]
    9d3a:	e7c2      	b.n	9cc2 <_malloc_r+0x22>
    9d3c:	2303      	movs	r3, #3
    9d3e:	1cc4      	adds	r4, r0, #3
    9d40:	439c      	bics	r4, r3
    9d42:	42a0      	cmp	r0, r4
    9d44:	d0e0      	beq.n	9d08 <_malloc_r+0x68>
    9d46:	1a21      	subs	r1, r4, r0
    9d48:	0030      	movs	r0, r6
    9d4a:	f000 fad3 	bl	a2f4 <_sbrk_r>
    9d4e:	1c43      	adds	r3, r0, #1
    9d50:	d1da      	bne.n	9d08 <_malloc_r+0x68>
    9d52:	e7c6      	b.n	9ce2 <_malloc_r+0x42>
    9d54:	20000360 	.word	0x20000360
    9d58:	20000364 	.word	0x20000364

00009d5c <__sfputc_r>:
    9d5c:	6893      	ldr	r3, [r2, #8]
    9d5e:	b510      	push	{r4, lr}
    9d60:	3b01      	subs	r3, #1
    9d62:	6093      	str	r3, [r2, #8]
    9d64:	2b00      	cmp	r3, #0
    9d66:	da05      	bge.n	9d74 <__sfputc_r+0x18>
    9d68:	6994      	ldr	r4, [r2, #24]
    9d6a:	42a3      	cmp	r3, r4
    9d6c:	db08      	blt.n	9d80 <__sfputc_r+0x24>
    9d6e:	b2cb      	uxtb	r3, r1
    9d70:	2b0a      	cmp	r3, #10
    9d72:	d005      	beq.n	9d80 <__sfputc_r+0x24>
    9d74:	6813      	ldr	r3, [r2, #0]
    9d76:	1c58      	adds	r0, r3, #1
    9d78:	6010      	str	r0, [r2, #0]
    9d7a:	7019      	strb	r1, [r3, #0]
    9d7c:	b2c8      	uxtb	r0, r1
    9d7e:	bd10      	pop	{r4, pc}
    9d80:	f000 fb16 	bl	a3b0 <__swbuf_r>
    9d84:	e7fb      	b.n	9d7e <__sfputc_r+0x22>

00009d86 <__sfputs_r>:
    9d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d88:	0006      	movs	r6, r0
    9d8a:	000f      	movs	r7, r1
    9d8c:	0014      	movs	r4, r2
    9d8e:	18d5      	adds	r5, r2, r3
    9d90:	42ac      	cmp	r4, r5
    9d92:	d101      	bne.n	9d98 <__sfputs_r+0x12>
    9d94:	2000      	movs	r0, #0
    9d96:	e007      	b.n	9da8 <__sfputs_r+0x22>
    9d98:	7821      	ldrb	r1, [r4, #0]
    9d9a:	003a      	movs	r2, r7
    9d9c:	0030      	movs	r0, r6
    9d9e:	f7ff ffdd 	bl	9d5c <__sfputc_r>
    9da2:	3401      	adds	r4, #1
    9da4:	1c43      	adds	r3, r0, #1
    9da6:	d1f3      	bne.n	9d90 <__sfputs_r+0xa>
    9da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00009dac <_vfiprintf_r>:
    9dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dae:	b09f      	sub	sp, #124	; 0x7c
    9db0:	0006      	movs	r6, r0
    9db2:	000f      	movs	r7, r1
    9db4:	0014      	movs	r4, r2
    9db6:	9305      	str	r3, [sp, #20]
    9db8:	2800      	cmp	r0, #0
    9dba:	d004      	beq.n	9dc6 <_vfiprintf_r+0x1a>
    9dbc:	6983      	ldr	r3, [r0, #24]
    9dbe:	2b00      	cmp	r3, #0
    9dc0:	d101      	bne.n	9dc6 <_vfiprintf_r+0x1a>
    9dc2:	f7ff fe17 	bl	99f4 <__sinit>
    9dc6:	4b7f      	ldr	r3, [pc, #508]	; (9fc4 <_vfiprintf_r+0x218>)
    9dc8:	429f      	cmp	r7, r3
    9dca:	d15c      	bne.n	9e86 <_vfiprintf_r+0xda>
    9dcc:	6877      	ldr	r7, [r6, #4]
    9dce:	89bb      	ldrh	r3, [r7, #12]
    9dd0:	071b      	lsls	r3, r3, #28
    9dd2:	d562      	bpl.n	9e9a <_vfiprintf_r+0xee>
    9dd4:	693b      	ldr	r3, [r7, #16]
    9dd6:	2b00      	cmp	r3, #0
    9dd8:	d05f      	beq.n	9e9a <_vfiprintf_r+0xee>
    9dda:	2300      	movs	r3, #0
    9ddc:	ad06      	add	r5, sp, #24
    9dde:	616b      	str	r3, [r5, #20]
    9de0:	3320      	adds	r3, #32
    9de2:	766b      	strb	r3, [r5, #25]
    9de4:	3310      	adds	r3, #16
    9de6:	76ab      	strb	r3, [r5, #26]
    9de8:	9402      	str	r4, [sp, #8]
    9dea:	9c02      	ldr	r4, [sp, #8]
    9dec:	7823      	ldrb	r3, [r4, #0]
    9dee:	2b00      	cmp	r3, #0
    9df0:	d15d      	bne.n	9eae <_vfiprintf_r+0x102>
    9df2:	9b02      	ldr	r3, [sp, #8]
    9df4:	1ae3      	subs	r3, r4, r3
    9df6:	9304      	str	r3, [sp, #16]
    9df8:	d00d      	beq.n	9e16 <_vfiprintf_r+0x6a>
    9dfa:	9b04      	ldr	r3, [sp, #16]
    9dfc:	9a02      	ldr	r2, [sp, #8]
    9dfe:	0039      	movs	r1, r7
    9e00:	0030      	movs	r0, r6
    9e02:	f7ff ffc0 	bl	9d86 <__sfputs_r>
    9e06:	1c43      	adds	r3, r0, #1
    9e08:	d100      	bne.n	9e0c <_vfiprintf_r+0x60>
    9e0a:	e0cc      	b.n	9fa6 <_vfiprintf_r+0x1fa>
    9e0c:	696a      	ldr	r2, [r5, #20]
    9e0e:	9b04      	ldr	r3, [sp, #16]
    9e10:	4694      	mov	ip, r2
    9e12:	4463      	add	r3, ip
    9e14:	616b      	str	r3, [r5, #20]
    9e16:	7823      	ldrb	r3, [r4, #0]
    9e18:	2b00      	cmp	r3, #0
    9e1a:	d100      	bne.n	9e1e <_vfiprintf_r+0x72>
    9e1c:	e0c3      	b.n	9fa6 <_vfiprintf_r+0x1fa>
    9e1e:	2201      	movs	r2, #1
    9e20:	2300      	movs	r3, #0
    9e22:	4252      	negs	r2, r2
    9e24:	606a      	str	r2, [r5, #4]
    9e26:	a902      	add	r1, sp, #8
    9e28:	3254      	adds	r2, #84	; 0x54
    9e2a:	1852      	adds	r2, r2, r1
    9e2c:	3401      	adds	r4, #1
    9e2e:	602b      	str	r3, [r5, #0]
    9e30:	60eb      	str	r3, [r5, #12]
    9e32:	60ab      	str	r3, [r5, #8]
    9e34:	7013      	strb	r3, [r2, #0]
    9e36:	65ab      	str	r3, [r5, #88]	; 0x58
    9e38:	7821      	ldrb	r1, [r4, #0]
    9e3a:	2205      	movs	r2, #5
    9e3c:	4862      	ldr	r0, [pc, #392]	; (9fc8 <_vfiprintf_r+0x21c>)
    9e3e:	f000 fbe1 	bl	a604 <memchr>
    9e42:	1c63      	adds	r3, r4, #1
    9e44:	469c      	mov	ip, r3
    9e46:	2800      	cmp	r0, #0
    9e48:	d135      	bne.n	9eb6 <_vfiprintf_r+0x10a>
    9e4a:	6829      	ldr	r1, [r5, #0]
    9e4c:	06cb      	lsls	r3, r1, #27
    9e4e:	d504      	bpl.n	9e5a <_vfiprintf_r+0xae>
    9e50:	2353      	movs	r3, #83	; 0x53
    9e52:	aa02      	add	r2, sp, #8
    9e54:	3020      	adds	r0, #32
    9e56:	189b      	adds	r3, r3, r2
    9e58:	7018      	strb	r0, [r3, #0]
    9e5a:	070b      	lsls	r3, r1, #28
    9e5c:	d504      	bpl.n	9e68 <_vfiprintf_r+0xbc>
    9e5e:	2353      	movs	r3, #83	; 0x53
    9e60:	202b      	movs	r0, #43	; 0x2b
    9e62:	aa02      	add	r2, sp, #8
    9e64:	189b      	adds	r3, r3, r2
    9e66:	7018      	strb	r0, [r3, #0]
    9e68:	7823      	ldrb	r3, [r4, #0]
    9e6a:	2b2a      	cmp	r3, #42	; 0x2a
    9e6c:	d02c      	beq.n	9ec8 <_vfiprintf_r+0x11c>
    9e6e:	2000      	movs	r0, #0
    9e70:	210a      	movs	r1, #10
    9e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9e74:	7822      	ldrb	r2, [r4, #0]
    9e76:	3a30      	subs	r2, #48	; 0x30
    9e78:	2a09      	cmp	r2, #9
    9e7a:	d800      	bhi.n	9e7e <_vfiprintf_r+0xd2>
    9e7c:	e06b      	b.n	9f56 <_vfiprintf_r+0x1aa>
    9e7e:	2800      	cmp	r0, #0
    9e80:	d02a      	beq.n	9ed8 <_vfiprintf_r+0x12c>
    9e82:	9309      	str	r3, [sp, #36]	; 0x24
    9e84:	e028      	b.n	9ed8 <_vfiprintf_r+0x12c>
    9e86:	4b51      	ldr	r3, [pc, #324]	; (9fcc <_vfiprintf_r+0x220>)
    9e88:	429f      	cmp	r7, r3
    9e8a:	d101      	bne.n	9e90 <_vfiprintf_r+0xe4>
    9e8c:	68b7      	ldr	r7, [r6, #8]
    9e8e:	e79e      	b.n	9dce <_vfiprintf_r+0x22>
    9e90:	4b4f      	ldr	r3, [pc, #316]	; (9fd0 <_vfiprintf_r+0x224>)
    9e92:	429f      	cmp	r7, r3
    9e94:	d19b      	bne.n	9dce <_vfiprintf_r+0x22>
    9e96:	68f7      	ldr	r7, [r6, #12]
    9e98:	e799      	b.n	9dce <_vfiprintf_r+0x22>
    9e9a:	0039      	movs	r1, r7
    9e9c:	0030      	movs	r0, r6
    9e9e:	f000 faf1 	bl	a484 <__swsetup_r>
    9ea2:	2800      	cmp	r0, #0
    9ea4:	d099      	beq.n	9dda <_vfiprintf_r+0x2e>
    9ea6:	2001      	movs	r0, #1
    9ea8:	4240      	negs	r0, r0
    9eaa:	b01f      	add	sp, #124	; 0x7c
    9eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9eae:	2b25      	cmp	r3, #37	; 0x25
    9eb0:	d09f      	beq.n	9df2 <_vfiprintf_r+0x46>
    9eb2:	3401      	adds	r4, #1
    9eb4:	e79a      	b.n	9dec <_vfiprintf_r+0x40>
    9eb6:	4b44      	ldr	r3, [pc, #272]	; (9fc8 <_vfiprintf_r+0x21c>)
    9eb8:	6829      	ldr	r1, [r5, #0]
    9eba:	1ac0      	subs	r0, r0, r3
    9ebc:	2301      	movs	r3, #1
    9ebe:	4083      	lsls	r3, r0
    9ec0:	430b      	orrs	r3, r1
    9ec2:	602b      	str	r3, [r5, #0]
    9ec4:	4664      	mov	r4, ip
    9ec6:	e7b7      	b.n	9e38 <_vfiprintf_r+0x8c>
    9ec8:	9b05      	ldr	r3, [sp, #20]
    9eca:	1d18      	adds	r0, r3, #4
    9ecc:	681b      	ldr	r3, [r3, #0]
    9ece:	9005      	str	r0, [sp, #20]
    9ed0:	2b00      	cmp	r3, #0
    9ed2:	db3a      	blt.n	9f4a <_vfiprintf_r+0x19e>
    9ed4:	9309      	str	r3, [sp, #36]	; 0x24
    9ed6:	4664      	mov	r4, ip
    9ed8:	7823      	ldrb	r3, [r4, #0]
    9eda:	2b2e      	cmp	r3, #46	; 0x2e
    9edc:	d10b      	bne.n	9ef6 <_vfiprintf_r+0x14a>
    9ede:	7863      	ldrb	r3, [r4, #1]
    9ee0:	1c62      	adds	r2, r4, #1
    9ee2:	2b2a      	cmp	r3, #42	; 0x2a
    9ee4:	d13f      	bne.n	9f66 <_vfiprintf_r+0x1ba>
    9ee6:	9b05      	ldr	r3, [sp, #20]
    9ee8:	3402      	adds	r4, #2
    9eea:	1d1a      	adds	r2, r3, #4
    9eec:	681b      	ldr	r3, [r3, #0]
    9eee:	9205      	str	r2, [sp, #20]
    9ef0:	2b00      	cmp	r3, #0
    9ef2:	db35      	blt.n	9f60 <_vfiprintf_r+0x1b4>
    9ef4:	9307      	str	r3, [sp, #28]
    9ef6:	7821      	ldrb	r1, [r4, #0]
    9ef8:	2203      	movs	r2, #3
    9efa:	4836      	ldr	r0, [pc, #216]	; (9fd4 <_vfiprintf_r+0x228>)
    9efc:	f000 fb82 	bl	a604 <memchr>
    9f00:	2800      	cmp	r0, #0
    9f02:	d007      	beq.n	9f14 <_vfiprintf_r+0x168>
    9f04:	4b33      	ldr	r3, [pc, #204]	; (9fd4 <_vfiprintf_r+0x228>)
    9f06:	682a      	ldr	r2, [r5, #0]
    9f08:	1ac0      	subs	r0, r0, r3
    9f0a:	2340      	movs	r3, #64	; 0x40
    9f0c:	4083      	lsls	r3, r0
    9f0e:	4313      	orrs	r3, r2
    9f10:	602b      	str	r3, [r5, #0]
    9f12:	3401      	adds	r4, #1
    9f14:	7821      	ldrb	r1, [r4, #0]
    9f16:	1c63      	adds	r3, r4, #1
    9f18:	2206      	movs	r2, #6
    9f1a:	482f      	ldr	r0, [pc, #188]	; (9fd8 <_vfiprintf_r+0x22c>)
    9f1c:	9302      	str	r3, [sp, #8]
    9f1e:	7629      	strb	r1, [r5, #24]
    9f20:	f000 fb70 	bl	a604 <memchr>
    9f24:	2800      	cmp	r0, #0
    9f26:	d044      	beq.n	9fb2 <_vfiprintf_r+0x206>
    9f28:	4b2c      	ldr	r3, [pc, #176]	; (9fdc <_vfiprintf_r+0x230>)
    9f2a:	2b00      	cmp	r3, #0
    9f2c:	d12f      	bne.n	9f8e <_vfiprintf_r+0x1e2>
    9f2e:	6829      	ldr	r1, [r5, #0]
    9f30:	9b05      	ldr	r3, [sp, #20]
    9f32:	2207      	movs	r2, #7
    9f34:	05c9      	lsls	r1, r1, #23
    9f36:	d528      	bpl.n	9f8a <_vfiprintf_r+0x1de>
    9f38:	189b      	adds	r3, r3, r2
    9f3a:	4393      	bics	r3, r2
    9f3c:	3308      	adds	r3, #8
    9f3e:	9305      	str	r3, [sp, #20]
    9f40:	696b      	ldr	r3, [r5, #20]
    9f42:	9a03      	ldr	r2, [sp, #12]
    9f44:	189b      	adds	r3, r3, r2
    9f46:	616b      	str	r3, [r5, #20]
    9f48:	e74f      	b.n	9dea <_vfiprintf_r+0x3e>
    9f4a:	425b      	negs	r3, r3
    9f4c:	60eb      	str	r3, [r5, #12]
    9f4e:	2302      	movs	r3, #2
    9f50:	430b      	orrs	r3, r1
    9f52:	602b      	str	r3, [r5, #0]
    9f54:	e7bf      	b.n	9ed6 <_vfiprintf_r+0x12a>
    9f56:	434b      	muls	r3, r1
    9f58:	3401      	adds	r4, #1
    9f5a:	189b      	adds	r3, r3, r2
    9f5c:	2001      	movs	r0, #1
    9f5e:	e789      	b.n	9e74 <_vfiprintf_r+0xc8>
    9f60:	2301      	movs	r3, #1
    9f62:	425b      	negs	r3, r3
    9f64:	e7c6      	b.n	9ef4 <_vfiprintf_r+0x148>
    9f66:	2300      	movs	r3, #0
    9f68:	0014      	movs	r4, r2
    9f6a:	200a      	movs	r0, #10
    9f6c:	001a      	movs	r2, r3
    9f6e:	606b      	str	r3, [r5, #4]
    9f70:	7821      	ldrb	r1, [r4, #0]
    9f72:	3930      	subs	r1, #48	; 0x30
    9f74:	2909      	cmp	r1, #9
    9f76:	d903      	bls.n	9f80 <_vfiprintf_r+0x1d4>
    9f78:	2b00      	cmp	r3, #0
    9f7a:	d0bc      	beq.n	9ef6 <_vfiprintf_r+0x14a>
    9f7c:	9207      	str	r2, [sp, #28]
    9f7e:	e7ba      	b.n	9ef6 <_vfiprintf_r+0x14a>
    9f80:	4342      	muls	r2, r0
    9f82:	3401      	adds	r4, #1
    9f84:	1852      	adds	r2, r2, r1
    9f86:	2301      	movs	r3, #1
    9f88:	e7f2      	b.n	9f70 <_vfiprintf_r+0x1c4>
    9f8a:	3307      	adds	r3, #7
    9f8c:	e7d5      	b.n	9f3a <_vfiprintf_r+0x18e>
    9f8e:	ab05      	add	r3, sp, #20
    9f90:	9300      	str	r3, [sp, #0]
    9f92:	003a      	movs	r2, r7
    9f94:	4b12      	ldr	r3, [pc, #72]	; (9fe0 <_vfiprintf_r+0x234>)
    9f96:	0029      	movs	r1, r5
    9f98:	0030      	movs	r0, r6
    9f9a:	e000      	b.n	9f9e <_vfiprintf_r+0x1f2>
    9f9c:	bf00      	nop
    9f9e:	9003      	str	r0, [sp, #12]
    9fa0:	9b03      	ldr	r3, [sp, #12]
    9fa2:	3301      	adds	r3, #1
    9fa4:	d1cc      	bne.n	9f40 <_vfiprintf_r+0x194>
    9fa6:	89bb      	ldrh	r3, [r7, #12]
    9fa8:	065b      	lsls	r3, r3, #25
    9faa:	d500      	bpl.n	9fae <_vfiprintf_r+0x202>
    9fac:	e77b      	b.n	9ea6 <_vfiprintf_r+0xfa>
    9fae:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9fb0:	e77b      	b.n	9eaa <_vfiprintf_r+0xfe>
    9fb2:	ab05      	add	r3, sp, #20
    9fb4:	9300      	str	r3, [sp, #0]
    9fb6:	003a      	movs	r2, r7
    9fb8:	4b09      	ldr	r3, [pc, #36]	; (9fe0 <_vfiprintf_r+0x234>)
    9fba:	0029      	movs	r1, r5
    9fbc:	0030      	movs	r0, r6
    9fbe:	f000 f87f 	bl	a0c0 <_printf_i>
    9fc2:	e7ec      	b.n	9f9e <_vfiprintf_r+0x1f2>
    9fc4:	0000aff0 	.word	0x0000aff0
    9fc8:	0000b030 	.word	0x0000b030
    9fcc:	0000b010 	.word	0x0000b010
    9fd0:	0000afd0 	.word	0x0000afd0
    9fd4:	0000b036 	.word	0x0000b036
    9fd8:	0000b03a 	.word	0x0000b03a
    9fdc:	00000000 	.word	0x00000000
    9fe0:	00009d87 	.word	0x00009d87

00009fe4 <_printf_common>:
    9fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9fe6:	0015      	movs	r5, r2
    9fe8:	9301      	str	r3, [sp, #4]
    9fea:	688a      	ldr	r2, [r1, #8]
    9fec:	690b      	ldr	r3, [r1, #16]
    9fee:	9000      	str	r0, [sp, #0]
    9ff0:	000c      	movs	r4, r1
    9ff2:	4293      	cmp	r3, r2
    9ff4:	da00      	bge.n	9ff8 <_printf_common+0x14>
    9ff6:	0013      	movs	r3, r2
    9ff8:	0022      	movs	r2, r4
    9ffa:	602b      	str	r3, [r5, #0]
    9ffc:	3243      	adds	r2, #67	; 0x43
    9ffe:	7812      	ldrb	r2, [r2, #0]
    a000:	2a00      	cmp	r2, #0
    a002:	d001      	beq.n	a008 <_printf_common+0x24>
    a004:	3301      	adds	r3, #1
    a006:	602b      	str	r3, [r5, #0]
    a008:	6823      	ldr	r3, [r4, #0]
    a00a:	069b      	lsls	r3, r3, #26
    a00c:	d502      	bpl.n	a014 <_printf_common+0x30>
    a00e:	682b      	ldr	r3, [r5, #0]
    a010:	3302      	adds	r3, #2
    a012:	602b      	str	r3, [r5, #0]
    a014:	2706      	movs	r7, #6
    a016:	6823      	ldr	r3, [r4, #0]
    a018:	401f      	ands	r7, r3
    a01a:	d027      	beq.n	a06c <_printf_common+0x88>
    a01c:	0023      	movs	r3, r4
    a01e:	3343      	adds	r3, #67	; 0x43
    a020:	781b      	ldrb	r3, [r3, #0]
    a022:	1e5a      	subs	r2, r3, #1
    a024:	4193      	sbcs	r3, r2
    a026:	6822      	ldr	r2, [r4, #0]
    a028:	0692      	lsls	r2, r2, #26
    a02a:	d430      	bmi.n	a08e <_printf_common+0xaa>
    a02c:	0022      	movs	r2, r4
    a02e:	9901      	ldr	r1, [sp, #4]
    a030:	3243      	adds	r2, #67	; 0x43
    a032:	9800      	ldr	r0, [sp, #0]
    a034:	9e08      	ldr	r6, [sp, #32]
    a036:	47b0      	blx	r6
    a038:	1c43      	adds	r3, r0, #1
    a03a:	d025      	beq.n	a088 <_printf_common+0xa4>
    a03c:	2306      	movs	r3, #6
    a03e:	6820      	ldr	r0, [r4, #0]
    a040:	682a      	ldr	r2, [r5, #0]
    a042:	68e1      	ldr	r1, [r4, #12]
    a044:	4003      	ands	r3, r0
    a046:	2500      	movs	r5, #0
    a048:	2b04      	cmp	r3, #4
    a04a:	d103      	bne.n	a054 <_printf_common+0x70>
    a04c:	1a8d      	subs	r5, r1, r2
    a04e:	43eb      	mvns	r3, r5
    a050:	17db      	asrs	r3, r3, #31
    a052:	401d      	ands	r5, r3
    a054:	68a3      	ldr	r3, [r4, #8]
    a056:	6922      	ldr	r2, [r4, #16]
    a058:	4293      	cmp	r3, r2
    a05a:	dd01      	ble.n	a060 <_printf_common+0x7c>
    a05c:	1a9b      	subs	r3, r3, r2
    a05e:	18ed      	adds	r5, r5, r3
    a060:	2700      	movs	r7, #0
    a062:	42bd      	cmp	r5, r7
    a064:	d120      	bne.n	a0a8 <_printf_common+0xc4>
    a066:	2000      	movs	r0, #0
    a068:	e010      	b.n	a08c <_printf_common+0xa8>
    a06a:	3701      	adds	r7, #1
    a06c:	68e3      	ldr	r3, [r4, #12]
    a06e:	682a      	ldr	r2, [r5, #0]
    a070:	1a9b      	subs	r3, r3, r2
    a072:	429f      	cmp	r7, r3
    a074:	dad2      	bge.n	a01c <_printf_common+0x38>
    a076:	0022      	movs	r2, r4
    a078:	2301      	movs	r3, #1
    a07a:	3219      	adds	r2, #25
    a07c:	9901      	ldr	r1, [sp, #4]
    a07e:	9800      	ldr	r0, [sp, #0]
    a080:	9e08      	ldr	r6, [sp, #32]
    a082:	47b0      	blx	r6
    a084:	1c43      	adds	r3, r0, #1
    a086:	d1f0      	bne.n	a06a <_printf_common+0x86>
    a088:	2001      	movs	r0, #1
    a08a:	4240      	negs	r0, r0
    a08c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a08e:	2030      	movs	r0, #48	; 0x30
    a090:	18e1      	adds	r1, r4, r3
    a092:	3143      	adds	r1, #67	; 0x43
    a094:	7008      	strb	r0, [r1, #0]
    a096:	0021      	movs	r1, r4
    a098:	1c5a      	adds	r2, r3, #1
    a09a:	3145      	adds	r1, #69	; 0x45
    a09c:	7809      	ldrb	r1, [r1, #0]
    a09e:	18a2      	adds	r2, r4, r2
    a0a0:	3243      	adds	r2, #67	; 0x43
    a0a2:	3302      	adds	r3, #2
    a0a4:	7011      	strb	r1, [r2, #0]
    a0a6:	e7c1      	b.n	a02c <_printf_common+0x48>
    a0a8:	0022      	movs	r2, r4
    a0aa:	2301      	movs	r3, #1
    a0ac:	321a      	adds	r2, #26
    a0ae:	9901      	ldr	r1, [sp, #4]
    a0b0:	9800      	ldr	r0, [sp, #0]
    a0b2:	9e08      	ldr	r6, [sp, #32]
    a0b4:	47b0      	blx	r6
    a0b6:	1c43      	adds	r3, r0, #1
    a0b8:	d0e6      	beq.n	a088 <_printf_common+0xa4>
    a0ba:	3701      	adds	r7, #1
    a0bc:	e7d1      	b.n	a062 <_printf_common+0x7e>
	...

0000a0c0 <_printf_i>:
    a0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0c2:	b08b      	sub	sp, #44	; 0x2c
    a0c4:	9206      	str	r2, [sp, #24]
    a0c6:	000a      	movs	r2, r1
    a0c8:	3243      	adds	r2, #67	; 0x43
    a0ca:	9307      	str	r3, [sp, #28]
    a0cc:	9005      	str	r0, [sp, #20]
    a0ce:	9204      	str	r2, [sp, #16]
    a0d0:	7e0a      	ldrb	r2, [r1, #24]
    a0d2:	000c      	movs	r4, r1
    a0d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a0d6:	2a6e      	cmp	r2, #110	; 0x6e
    a0d8:	d100      	bne.n	a0dc <_printf_i+0x1c>
    a0da:	e08f      	b.n	a1fc <_printf_i+0x13c>
    a0dc:	d817      	bhi.n	a10e <_printf_i+0x4e>
    a0de:	2a63      	cmp	r2, #99	; 0x63
    a0e0:	d02c      	beq.n	a13c <_printf_i+0x7c>
    a0e2:	d808      	bhi.n	a0f6 <_printf_i+0x36>
    a0e4:	2a00      	cmp	r2, #0
    a0e6:	d100      	bne.n	a0ea <_printf_i+0x2a>
    a0e8:	e099      	b.n	a21e <_printf_i+0x15e>
    a0ea:	2a58      	cmp	r2, #88	; 0x58
    a0ec:	d054      	beq.n	a198 <_printf_i+0xd8>
    a0ee:	0026      	movs	r6, r4
    a0f0:	3642      	adds	r6, #66	; 0x42
    a0f2:	7032      	strb	r2, [r6, #0]
    a0f4:	e029      	b.n	a14a <_printf_i+0x8a>
    a0f6:	2a64      	cmp	r2, #100	; 0x64
    a0f8:	d001      	beq.n	a0fe <_printf_i+0x3e>
    a0fa:	2a69      	cmp	r2, #105	; 0x69
    a0fc:	d1f7      	bne.n	a0ee <_printf_i+0x2e>
    a0fe:	6821      	ldr	r1, [r4, #0]
    a100:	681a      	ldr	r2, [r3, #0]
    a102:	0608      	lsls	r0, r1, #24
    a104:	d523      	bpl.n	a14e <_printf_i+0x8e>
    a106:	1d11      	adds	r1, r2, #4
    a108:	6019      	str	r1, [r3, #0]
    a10a:	6815      	ldr	r5, [r2, #0]
    a10c:	e025      	b.n	a15a <_printf_i+0x9a>
    a10e:	2a73      	cmp	r2, #115	; 0x73
    a110:	d100      	bne.n	a114 <_printf_i+0x54>
    a112:	e088      	b.n	a226 <_printf_i+0x166>
    a114:	d808      	bhi.n	a128 <_printf_i+0x68>
    a116:	2a6f      	cmp	r2, #111	; 0x6f
    a118:	d029      	beq.n	a16e <_printf_i+0xae>
    a11a:	2a70      	cmp	r2, #112	; 0x70
    a11c:	d1e7      	bne.n	a0ee <_printf_i+0x2e>
    a11e:	2220      	movs	r2, #32
    a120:	6809      	ldr	r1, [r1, #0]
    a122:	430a      	orrs	r2, r1
    a124:	6022      	str	r2, [r4, #0]
    a126:	e003      	b.n	a130 <_printf_i+0x70>
    a128:	2a75      	cmp	r2, #117	; 0x75
    a12a:	d020      	beq.n	a16e <_printf_i+0xae>
    a12c:	2a78      	cmp	r2, #120	; 0x78
    a12e:	d1de      	bne.n	a0ee <_printf_i+0x2e>
    a130:	0022      	movs	r2, r4
    a132:	2178      	movs	r1, #120	; 0x78
    a134:	3245      	adds	r2, #69	; 0x45
    a136:	7011      	strb	r1, [r2, #0]
    a138:	4a6c      	ldr	r2, [pc, #432]	; (a2ec <_printf_i+0x22c>)
    a13a:	e030      	b.n	a19e <_printf_i+0xde>
    a13c:	000e      	movs	r6, r1
    a13e:	681a      	ldr	r2, [r3, #0]
    a140:	3642      	adds	r6, #66	; 0x42
    a142:	1d11      	adds	r1, r2, #4
    a144:	6019      	str	r1, [r3, #0]
    a146:	6813      	ldr	r3, [r2, #0]
    a148:	7033      	strb	r3, [r6, #0]
    a14a:	2301      	movs	r3, #1
    a14c:	e079      	b.n	a242 <_printf_i+0x182>
    a14e:	0649      	lsls	r1, r1, #25
    a150:	d5d9      	bpl.n	a106 <_printf_i+0x46>
    a152:	1d11      	adds	r1, r2, #4
    a154:	6019      	str	r1, [r3, #0]
    a156:	2300      	movs	r3, #0
    a158:	5ed5      	ldrsh	r5, [r2, r3]
    a15a:	2d00      	cmp	r5, #0
    a15c:	da03      	bge.n	a166 <_printf_i+0xa6>
    a15e:	232d      	movs	r3, #45	; 0x2d
    a160:	9a04      	ldr	r2, [sp, #16]
    a162:	426d      	negs	r5, r5
    a164:	7013      	strb	r3, [r2, #0]
    a166:	4b62      	ldr	r3, [pc, #392]	; (a2f0 <_printf_i+0x230>)
    a168:	270a      	movs	r7, #10
    a16a:	9303      	str	r3, [sp, #12]
    a16c:	e02f      	b.n	a1ce <_printf_i+0x10e>
    a16e:	6820      	ldr	r0, [r4, #0]
    a170:	6819      	ldr	r1, [r3, #0]
    a172:	0605      	lsls	r5, r0, #24
    a174:	d503      	bpl.n	a17e <_printf_i+0xbe>
    a176:	1d08      	adds	r0, r1, #4
    a178:	6018      	str	r0, [r3, #0]
    a17a:	680d      	ldr	r5, [r1, #0]
    a17c:	e005      	b.n	a18a <_printf_i+0xca>
    a17e:	0640      	lsls	r0, r0, #25
    a180:	d5f9      	bpl.n	a176 <_printf_i+0xb6>
    a182:	680d      	ldr	r5, [r1, #0]
    a184:	1d08      	adds	r0, r1, #4
    a186:	6018      	str	r0, [r3, #0]
    a188:	b2ad      	uxth	r5, r5
    a18a:	4b59      	ldr	r3, [pc, #356]	; (a2f0 <_printf_i+0x230>)
    a18c:	2708      	movs	r7, #8
    a18e:	9303      	str	r3, [sp, #12]
    a190:	2a6f      	cmp	r2, #111	; 0x6f
    a192:	d018      	beq.n	a1c6 <_printf_i+0x106>
    a194:	270a      	movs	r7, #10
    a196:	e016      	b.n	a1c6 <_printf_i+0x106>
    a198:	3145      	adds	r1, #69	; 0x45
    a19a:	700a      	strb	r2, [r1, #0]
    a19c:	4a54      	ldr	r2, [pc, #336]	; (a2f0 <_printf_i+0x230>)
    a19e:	9203      	str	r2, [sp, #12]
    a1a0:	681a      	ldr	r2, [r3, #0]
    a1a2:	6821      	ldr	r1, [r4, #0]
    a1a4:	1d10      	adds	r0, r2, #4
    a1a6:	6018      	str	r0, [r3, #0]
    a1a8:	6815      	ldr	r5, [r2, #0]
    a1aa:	0608      	lsls	r0, r1, #24
    a1ac:	d522      	bpl.n	a1f4 <_printf_i+0x134>
    a1ae:	07cb      	lsls	r3, r1, #31
    a1b0:	d502      	bpl.n	a1b8 <_printf_i+0xf8>
    a1b2:	2320      	movs	r3, #32
    a1b4:	4319      	orrs	r1, r3
    a1b6:	6021      	str	r1, [r4, #0]
    a1b8:	2710      	movs	r7, #16
    a1ba:	2d00      	cmp	r5, #0
    a1bc:	d103      	bne.n	a1c6 <_printf_i+0x106>
    a1be:	2320      	movs	r3, #32
    a1c0:	6822      	ldr	r2, [r4, #0]
    a1c2:	439a      	bics	r2, r3
    a1c4:	6022      	str	r2, [r4, #0]
    a1c6:	0023      	movs	r3, r4
    a1c8:	2200      	movs	r2, #0
    a1ca:	3343      	adds	r3, #67	; 0x43
    a1cc:	701a      	strb	r2, [r3, #0]
    a1ce:	6863      	ldr	r3, [r4, #4]
    a1d0:	60a3      	str	r3, [r4, #8]
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	db5c      	blt.n	a290 <_printf_i+0x1d0>
    a1d6:	2204      	movs	r2, #4
    a1d8:	6821      	ldr	r1, [r4, #0]
    a1da:	4391      	bics	r1, r2
    a1dc:	6021      	str	r1, [r4, #0]
    a1de:	2d00      	cmp	r5, #0
    a1e0:	d158      	bne.n	a294 <_printf_i+0x1d4>
    a1e2:	9e04      	ldr	r6, [sp, #16]
    a1e4:	2b00      	cmp	r3, #0
    a1e6:	d064      	beq.n	a2b2 <_printf_i+0x1f2>
    a1e8:	0026      	movs	r6, r4
    a1ea:	9b03      	ldr	r3, [sp, #12]
    a1ec:	3642      	adds	r6, #66	; 0x42
    a1ee:	781b      	ldrb	r3, [r3, #0]
    a1f0:	7033      	strb	r3, [r6, #0]
    a1f2:	e05e      	b.n	a2b2 <_printf_i+0x1f2>
    a1f4:	0648      	lsls	r0, r1, #25
    a1f6:	d5da      	bpl.n	a1ae <_printf_i+0xee>
    a1f8:	b2ad      	uxth	r5, r5
    a1fa:	e7d8      	b.n	a1ae <_printf_i+0xee>
    a1fc:	6809      	ldr	r1, [r1, #0]
    a1fe:	681a      	ldr	r2, [r3, #0]
    a200:	0608      	lsls	r0, r1, #24
    a202:	d505      	bpl.n	a210 <_printf_i+0x150>
    a204:	1d11      	adds	r1, r2, #4
    a206:	6019      	str	r1, [r3, #0]
    a208:	6813      	ldr	r3, [r2, #0]
    a20a:	6962      	ldr	r2, [r4, #20]
    a20c:	601a      	str	r2, [r3, #0]
    a20e:	e006      	b.n	a21e <_printf_i+0x15e>
    a210:	0649      	lsls	r1, r1, #25
    a212:	d5f7      	bpl.n	a204 <_printf_i+0x144>
    a214:	1d11      	adds	r1, r2, #4
    a216:	6019      	str	r1, [r3, #0]
    a218:	6813      	ldr	r3, [r2, #0]
    a21a:	8aa2      	ldrh	r2, [r4, #20]
    a21c:	801a      	strh	r2, [r3, #0]
    a21e:	2300      	movs	r3, #0
    a220:	9e04      	ldr	r6, [sp, #16]
    a222:	6123      	str	r3, [r4, #16]
    a224:	e054      	b.n	a2d0 <_printf_i+0x210>
    a226:	681a      	ldr	r2, [r3, #0]
    a228:	1d11      	adds	r1, r2, #4
    a22a:	6019      	str	r1, [r3, #0]
    a22c:	6816      	ldr	r6, [r2, #0]
    a22e:	2100      	movs	r1, #0
    a230:	6862      	ldr	r2, [r4, #4]
    a232:	0030      	movs	r0, r6
    a234:	f000 f9e6 	bl	a604 <memchr>
    a238:	2800      	cmp	r0, #0
    a23a:	d001      	beq.n	a240 <_printf_i+0x180>
    a23c:	1b80      	subs	r0, r0, r6
    a23e:	6060      	str	r0, [r4, #4]
    a240:	6863      	ldr	r3, [r4, #4]
    a242:	6123      	str	r3, [r4, #16]
    a244:	2300      	movs	r3, #0
    a246:	9a04      	ldr	r2, [sp, #16]
    a248:	7013      	strb	r3, [r2, #0]
    a24a:	e041      	b.n	a2d0 <_printf_i+0x210>
    a24c:	6923      	ldr	r3, [r4, #16]
    a24e:	0032      	movs	r2, r6
    a250:	9906      	ldr	r1, [sp, #24]
    a252:	9805      	ldr	r0, [sp, #20]
    a254:	9d07      	ldr	r5, [sp, #28]
    a256:	47a8      	blx	r5
    a258:	1c43      	adds	r3, r0, #1
    a25a:	d043      	beq.n	a2e4 <_printf_i+0x224>
    a25c:	6823      	ldr	r3, [r4, #0]
    a25e:	2500      	movs	r5, #0
    a260:	079b      	lsls	r3, r3, #30
    a262:	d40f      	bmi.n	a284 <_printf_i+0x1c4>
    a264:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a266:	68e0      	ldr	r0, [r4, #12]
    a268:	4298      	cmp	r0, r3
    a26a:	da3d      	bge.n	a2e8 <_printf_i+0x228>
    a26c:	0018      	movs	r0, r3
    a26e:	e03b      	b.n	a2e8 <_printf_i+0x228>
    a270:	0022      	movs	r2, r4
    a272:	2301      	movs	r3, #1
    a274:	3219      	adds	r2, #25
    a276:	9906      	ldr	r1, [sp, #24]
    a278:	9805      	ldr	r0, [sp, #20]
    a27a:	9e07      	ldr	r6, [sp, #28]
    a27c:	47b0      	blx	r6
    a27e:	1c43      	adds	r3, r0, #1
    a280:	d030      	beq.n	a2e4 <_printf_i+0x224>
    a282:	3501      	adds	r5, #1
    a284:	68e3      	ldr	r3, [r4, #12]
    a286:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a288:	1a9b      	subs	r3, r3, r2
    a28a:	429d      	cmp	r5, r3
    a28c:	dbf0      	blt.n	a270 <_printf_i+0x1b0>
    a28e:	e7e9      	b.n	a264 <_printf_i+0x1a4>
    a290:	2d00      	cmp	r5, #0
    a292:	d0a9      	beq.n	a1e8 <_printf_i+0x128>
    a294:	9e04      	ldr	r6, [sp, #16]
    a296:	0028      	movs	r0, r5
    a298:	0039      	movs	r1, r7
    a29a:	f7fe ff69 	bl	9170 <__aeabi_uidivmod>
    a29e:	9b03      	ldr	r3, [sp, #12]
    a2a0:	3e01      	subs	r6, #1
    a2a2:	5c5b      	ldrb	r3, [r3, r1]
    a2a4:	0028      	movs	r0, r5
    a2a6:	7033      	strb	r3, [r6, #0]
    a2a8:	0039      	movs	r1, r7
    a2aa:	f7fe fedb 	bl	9064 <__udivsi3>
    a2ae:	1e05      	subs	r5, r0, #0
    a2b0:	d1f1      	bne.n	a296 <_printf_i+0x1d6>
    a2b2:	2f08      	cmp	r7, #8
    a2b4:	d109      	bne.n	a2ca <_printf_i+0x20a>
    a2b6:	6823      	ldr	r3, [r4, #0]
    a2b8:	07db      	lsls	r3, r3, #31
    a2ba:	d506      	bpl.n	a2ca <_printf_i+0x20a>
    a2bc:	6863      	ldr	r3, [r4, #4]
    a2be:	6922      	ldr	r2, [r4, #16]
    a2c0:	4293      	cmp	r3, r2
    a2c2:	dc02      	bgt.n	a2ca <_printf_i+0x20a>
    a2c4:	2330      	movs	r3, #48	; 0x30
    a2c6:	3e01      	subs	r6, #1
    a2c8:	7033      	strb	r3, [r6, #0]
    a2ca:	9b04      	ldr	r3, [sp, #16]
    a2cc:	1b9b      	subs	r3, r3, r6
    a2ce:	6123      	str	r3, [r4, #16]
    a2d0:	9b07      	ldr	r3, [sp, #28]
    a2d2:	aa09      	add	r2, sp, #36	; 0x24
    a2d4:	9300      	str	r3, [sp, #0]
    a2d6:	0021      	movs	r1, r4
    a2d8:	9b06      	ldr	r3, [sp, #24]
    a2da:	9805      	ldr	r0, [sp, #20]
    a2dc:	f7ff fe82 	bl	9fe4 <_printf_common>
    a2e0:	1c43      	adds	r3, r0, #1
    a2e2:	d1b3      	bne.n	a24c <_printf_i+0x18c>
    a2e4:	2001      	movs	r0, #1
    a2e6:	4240      	negs	r0, r0
    a2e8:	b00b      	add	sp, #44	; 0x2c
    a2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a2ec:	0000b052 	.word	0x0000b052
    a2f0:	0000b041 	.word	0x0000b041

0000a2f4 <_sbrk_r>:
    a2f4:	2300      	movs	r3, #0
    a2f6:	b570      	push	{r4, r5, r6, lr}
    a2f8:	4c06      	ldr	r4, [pc, #24]	; (a314 <_sbrk_r+0x20>)
    a2fa:	0005      	movs	r5, r0
    a2fc:	0008      	movs	r0, r1
    a2fe:	6023      	str	r3, [r4, #0]
    a300:	f7fe fe92 	bl	9028 <_sbrk>
    a304:	1c43      	adds	r3, r0, #1
    a306:	d103      	bne.n	a310 <_sbrk_r+0x1c>
    a308:	6823      	ldr	r3, [r4, #0]
    a30a:	2b00      	cmp	r3, #0
    a30c:	d000      	beq.n	a310 <_sbrk_r+0x1c>
    a30e:	602b      	str	r3, [r5, #0]
    a310:	bd70      	pop	{r4, r5, r6, pc}
    a312:	46c0      	nop			; (mov r8, r8)
    a314:	20001a44 	.word	0x20001a44

0000a318 <__sread>:
    a318:	b570      	push	{r4, r5, r6, lr}
    a31a:	000c      	movs	r4, r1
    a31c:	250e      	movs	r5, #14
    a31e:	5f49      	ldrsh	r1, [r1, r5]
    a320:	f000 f97e 	bl	a620 <_read_r>
    a324:	2800      	cmp	r0, #0
    a326:	db03      	blt.n	a330 <__sread+0x18>
    a328:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a32a:	181b      	adds	r3, r3, r0
    a32c:	6563      	str	r3, [r4, #84]	; 0x54
    a32e:	bd70      	pop	{r4, r5, r6, pc}
    a330:	89a3      	ldrh	r3, [r4, #12]
    a332:	4a02      	ldr	r2, [pc, #8]	; (a33c <__sread+0x24>)
    a334:	4013      	ands	r3, r2
    a336:	81a3      	strh	r3, [r4, #12]
    a338:	e7f9      	b.n	a32e <__sread+0x16>
    a33a:	46c0      	nop			; (mov r8, r8)
    a33c:	ffffefff 	.word	0xffffefff

0000a340 <__swrite>:
    a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a342:	001f      	movs	r7, r3
    a344:	898b      	ldrh	r3, [r1, #12]
    a346:	0005      	movs	r5, r0
    a348:	000c      	movs	r4, r1
    a34a:	0016      	movs	r6, r2
    a34c:	05db      	lsls	r3, r3, #23
    a34e:	d505      	bpl.n	a35c <__swrite+0x1c>
    a350:	230e      	movs	r3, #14
    a352:	5ec9      	ldrsh	r1, [r1, r3]
    a354:	2200      	movs	r2, #0
    a356:	2302      	movs	r3, #2
    a358:	f000 f940 	bl	a5dc <_lseek_r>
    a35c:	89a3      	ldrh	r3, [r4, #12]
    a35e:	4a05      	ldr	r2, [pc, #20]	; (a374 <__swrite+0x34>)
    a360:	0028      	movs	r0, r5
    a362:	4013      	ands	r3, r2
    a364:	81a3      	strh	r3, [r4, #12]
    a366:	0032      	movs	r2, r6
    a368:	230e      	movs	r3, #14
    a36a:	5ee1      	ldrsh	r1, [r4, r3]
    a36c:	003b      	movs	r3, r7
    a36e:	f000 f875 	bl	a45c <_write_r>
    a372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a374:	ffffefff 	.word	0xffffefff

0000a378 <__sseek>:
    a378:	b570      	push	{r4, r5, r6, lr}
    a37a:	000c      	movs	r4, r1
    a37c:	250e      	movs	r5, #14
    a37e:	5f49      	ldrsh	r1, [r1, r5]
    a380:	f000 f92c 	bl	a5dc <_lseek_r>
    a384:	89a3      	ldrh	r3, [r4, #12]
    a386:	1c42      	adds	r2, r0, #1
    a388:	d103      	bne.n	a392 <__sseek+0x1a>
    a38a:	4a05      	ldr	r2, [pc, #20]	; (a3a0 <__sseek+0x28>)
    a38c:	4013      	ands	r3, r2
    a38e:	81a3      	strh	r3, [r4, #12]
    a390:	bd70      	pop	{r4, r5, r6, pc}
    a392:	2280      	movs	r2, #128	; 0x80
    a394:	0152      	lsls	r2, r2, #5
    a396:	4313      	orrs	r3, r2
    a398:	81a3      	strh	r3, [r4, #12]
    a39a:	6560      	str	r0, [r4, #84]	; 0x54
    a39c:	e7f8      	b.n	a390 <__sseek+0x18>
    a39e:	46c0      	nop			; (mov r8, r8)
    a3a0:	ffffefff 	.word	0xffffefff

0000a3a4 <__sclose>:
    a3a4:	b510      	push	{r4, lr}
    a3a6:	230e      	movs	r3, #14
    a3a8:	5ec9      	ldrsh	r1, [r1, r3]
    a3aa:	f000 f8e1 	bl	a570 <_close_r>
    a3ae:	bd10      	pop	{r4, pc}

0000a3b0 <__swbuf_r>:
    a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a3b2:	0005      	movs	r5, r0
    a3b4:	000e      	movs	r6, r1
    a3b6:	0014      	movs	r4, r2
    a3b8:	2800      	cmp	r0, #0
    a3ba:	d004      	beq.n	a3c6 <__swbuf_r+0x16>
    a3bc:	6983      	ldr	r3, [r0, #24]
    a3be:	2b00      	cmp	r3, #0
    a3c0:	d101      	bne.n	a3c6 <__swbuf_r+0x16>
    a3c2:	f7ff fb17 	bl	99f4 <__sinit>
    a3c6:	4b22      	ldr	r3, [pc, #136]	; (a450 <__swbuf_r+0xa0>)
    a3c8:	429c      	cmp	r4, r3
    a3ca:	d12d      	bne.n	a428 <__swbuf_r+0x78>
    a3cc:	686c      	ldr	r4, [r5, #4]
    a3ce:	69a3      	ldr	r3, [r4, #24]
    a3d0:	60a3      	str	r3, [r4, #8]
    a3d2:	89a3      	ldrh	r3, [r4, #12]
    a3d4:	071b      	lsls	r3, r3, #28
    a3d6:	d531      	bpl.n	a43c <__swbuf_r+0x8c>
    a3d8:	6923      	ldr	r3, [r4, #16]
    a3da:	2b00      	cmp	r3, #0
    a3dc:	d02e      	beq.n	a43c <__swbuf_r+0x8c>
    a3de:	6823      	ldr	r3, [r4, #0]
    a3e0:	6922      	ldr	r2, [r4, #16]
    a3e2:	b2f7      	uxtb	r7, r6
    a3e4:	1a98      	subs	r0, r3, r2
    a3e6:	6963      	ldr	r3, [r4, #20]
    a3e8:	b2f6      	uxtb	r6, r6
    a3ea:	4298      	cmp	r0, r3
    a3ec:	db05      	blt.n	a3fa <__swbuf_r+0x4a>
    a3ee:	0021      	movs	r1, r4
    a3f0:	0028      	movs	r0, r5
    a3f2:	f7ff fa91 	bl	9918 <_fflush_r>
    a3f6:	2800      	cmp	r0, #0
    a3f8:	d126      	bne.n	a448 <__swbuf_r+0x98>
    a3fa:	68a3      	ldr	r3, [r4, #8]
    a3fc:	3001      	adds	r0, #1
    a3fe:	3b01      	subs	r3, #1
    a400:	60a3      	str	r3, [r4, #8]
    a402:	6823      	ldr	r3, [r4, #0]
    a404:	1c5a      	adds	r2, r3, #1
    a406:	6022      	str	r2, [r4, #0]
    a408:	701f      	strb	r7, [r3, #0]
    a40a:	6963      	ldr	r3, [r4, #20]
    a40c:	4298      	cmp	r0, r3
    a40e:	d004      	beq.n	a41a <__swbuf_r+0x6a>
    a410:	89a3      	ldrh	r3, [r4, #12]
    a412:	07db      	lsls	r3, r3, #31
    a414:	d51a      	bpl.n	a44c <__swbuf_r+0x9c>
    a416:	2e0a      	cmp	r6, #10
    a418:	d118      	bne.n	a44c <__swbuf_r+0x9c>
    a41a:	0021      	movs	r1, r4
    a41c:	0028      	movs	r0, r5
    a41e:	f7ff fa7b 	bl	9918 <_fflush_r>
    a422:	2800      	cmp	r0, #0
    a424:	d012      	beq.n	a44c <__swbuf_r+0x9c>
    a426:	e00f      	b.n	a448 <__swbuf_r+0x98>
    a428:	4b0a      	ldr	r3, [pc, #40]	; (a454 <__swbuf_r+0xa4>)
    a42a:	429c      	cmp	r4, r3
    a42c:	d101      	bne.n	a432 <__swbuf_r+0x82>
    a42e:	68ac      	ldr	r4, [r5, #8]
    a430:	e7cd      	b.n	a3ce <__swbuf_r+0x1e>
    a432:	4b09      	ldr	r3, [pc, #36]	; (a458 <__swbuf_r+0xa8>)
    a434:	429c      	cmp	r4, r3
    a436:	d1ca      	bne.n	a3ce <__swbuf_r+0x1e>
    a438:	68ec      	ldr	r4, [r5, #12]
    a43a:	e7c8      	b.n	a3ce <__swbuf_r+0x1e>
    a43c:	0021      	movs	r1, r4
    a43e:	0028      	movs	r0, r5
    a440:	f000 f820 	bl	a484 <__swsetup_r>
    a444:	2800      	cmp	r0, #0
    a446:	d0ca      	beq.n	a3de <__swbuf_r+0x2e>
    a448:	2601      	movs	r6, #1
    a44a:	4276      	negs	r6, r6
    a44c:	0030      	movs	r0, r6
    a44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a450:	0000aff0 	.word	0x0000aff0
    a454:	0000b010 	.word	0x0000b010
    a458:	0000afd0 	.word	0x0000afd0

0000a45c <_write_r>:
    a45c:	b570      	push	{r4, r5, r6, lr}
    a45e:	0005      	movs	r5, r0
    a460:	0008      	movs	r0, r1
    a462:	0011      	movs	r1, r2
    a464:	2200      	movs	r2, #0
    a466:	4c06      	ldr	r4, [pc, #24]	; (a480 <_write_r+0x24>)
    a468:	6022      	str	r2, [r4, #0]
    a46a:	001a      	movs	r2, r3
    a46c:	f7f9 fd72 	bl	3f54 <_write>
    a470:	1c43      	adds	r3, r0, #1
    a472:	d103      	bne.n	a47c <_write_r+0x20>
    a474:	6823      	ldr	r3, [r4, #0]
    a476:	2b00      	cmp	r3, #0
    a478:	d000      	beq.n	a47c <_write_r+0x20>
    a47a:	602b      	str	r3, [r5, #0]
    a47c:	bd70      	pop	{r4, r5, r6, pc}
    a47e:	46c0      	nop			; (mov r8, r8)
    a480:	20001a44 	.word	0x20001a44

0000a484 <__swsetup_r>:
    a484:	4b36      	ldr	r3, [pc, #216]	; (a560 <__swsetup_r+0xdc>)
    a486:	b570      	push	{r4, r5, r6, lr}
    a488:	681d      	ldr	r5, [r3, #0]
    a48a:	0006      	movs	r6, r0
    a48c:	000c      	movs	r4, r1
    a48e:	2d00      	cmp	r5, #0
    a490:	d005      	beq.n	a49e <__swsetup_r+0x1a>
    a492:	69ab      	ldr	r3, [r5, #24]
    a494:	2b00      	cmp	r3, #0
    a496:	d102      	bne.n	a49e <__swsetup_r+0x1a>
    a498:	0028      	movs	r0, r5
    a49a:	f7ff faab 	bl	99f4 <__sinit>
    a49e:	4b31      	ldr	r3, [pc, #196]	; (a564 <__swsetup_r+0xe0>)
    a4a0:	429c      	cmp	r4, r3
    a4a2:	d10f      	bne.n	a4c4 <__swsetup_r+0x40>
    a4a4:	686c      	ldr	r4, [r5, #4]
    a4a6:	230c      	movs	r3, #12
    a4a8:	5ee2      	ldrsh	r2, [r4, r3]
    a4aa:	b293      	uxth	r3, r2
    a4ac:	0719      	lsls	r1, r3, #28
    a4ae:	d42d      	bmi.n	a50c <__swsetup_r+0x88>
    a4b0:	06d9      	lsls	r1, r3, #27
    a4b2:	d411      	bmi.n	a4d8 <__swsetup_r+0x54>
    a4b4:	2309      	movs	r3, #9
    a4b6:	2001      	movs	r0, #1
    a4b8:	6033      	str	r3, [r6, #0]
    a4ba:	3337      	adds	r3, #55	; 0x37
    a4bc:	4313      	orrs	r3, r2
    a4be:	81a3      	strh	r3, [r4, #12]
    a4c0:	4240      	negs	r0, r0
    a4c2:	bd70      	pop	{r4, r5, r6, pc}
    a4c4:	4b28      	ldr	r3, [pc, #160]	; (a568 <__swsetup_r+0xe4>)
    a4c6:	429c      	cmp	r4, r3
    a4c8:	d101      	bne.n	a4ce <__swsetup_r+0x4a>
    a4ca:	68ac      	ldr	r4, [r5, #8]
    a4cc:	e7eb      	b.n	a4a6 <__swsetup_r+0x22>
    a4ce:	4b27      	ldr	r3, [pc, #156]	; (a56c <__swsetup_r+0xe8>)
    a4d0:	429c      	cmp	r4, r3
    a4d2:	d1e8      	bne.n	a4a6 <__swsetup_r+0x22>
    a4d4:	68ec      	ldr	r4, [r5, #12]
    a4d6:	e7e6      	b.n	a4a6 <__swsetup_r+0x22>
    a4d8:	075b      	lsls	r3, r3, #29
    a4da:	d513      	bpl.n	a504 <__swsetup_r+0x80>
    a4dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a4de:	2900      	cmp	r1, #0
    a4e0:	d008      	beq.n	a4f4 <__swsetup_r+0x70>
    a4e2:	0023      	movs	r3, r4
    a4e4:	3344      	adds	r3, #68	; 0x44
    a4e6:	4299      	cmp	r1, r3
    a4e8:	d002      	beq.n	a4f0 <__swsetup_r+0x6c>
    a4ea:	0030      	movs	r0, r6
    a4ec:	f7ff fb8e 	bl	9c0c <_free_r>
    a4f0:	2300      	movs	r3, #0
    a4f2:	6363      	str	r3, [r4, #52]	; 0x34
    a4f4:	2224      	movs	r2, #36	; 0x24
    a4f6:	89a3      	ldrh	r3, [r4, #12]
    a4f8:	4393      	bics	r3, r2
    a4fa:	81a3      	strh	r3, [r4, #12]
    a4fc:	2300      	movs	r3, #0
    a4fe:	6063      	str	r3, [r4, #4]
    a500:	6923      	ldr	r3, [r4, #16]
    a502:	6023      	str	r3, [r4, #0]
    a504:	2308      	movs	r3, #8
    a506:	89a2      	ldrh	r2, [r4, #12]
    a508:	4313      	orrs	r3, r2
    a50a:	81a3      	strh	r3, [r4, #12]
    a50c:	6923      	ldr	r3, [r4, #16]
    a50e:	2b00      	cmp	r3, #0
    a510:	d10b      	bne.n	a52a <__swsetup_r+0xa6>
    a512:	21a0      	movs	r1, #160	; 0xa0
    a514:	2280      	movs	r2, #128	; 0x80
    a516:	89a3      	ldrh	r3, [r4, #12]
    a518:	0089      	lsls	r1, r1, #2
    a51a:	0092      	lsls	r2, r2, #2
    a51c:	400b      	ands	r3, r1
    a51e:	4293      	cmp	r3, r2
    a520:	d003      	beq.n	a52a <__swsetup_r+0xa6>
    a522:	0021      	movs	r1, r4
    a524:	0030      	movs	r0, r6
    a526:	f7ff fb23 	bl	9b70 <__smakebuf_r>
    a52a:	2301      	movs	r3, #1
    a52c:	89a2      	ldrh	r2, [r4, #12]
    a52e:	4013      	ands	r3, r2
    a530:	d011      	beq.n	a556 <__swsetup_r+0xd2>
    a532:	2300      	movs	r3, #0
    a534:	60a3      	str	r3, [r4, #8]
    a536:	6963      	ldr	r3, [r4, #20]
    a538:	425b      	negs	r3, r3
    a53a:	61a3      	str	r3, [r4, #24]
    a53c:	2000      	movs	r0, #0
    a53e:	6923      	ldr	r3, [r4, #16]
    a540:	4283      	cmp	r3, r0
    a542:	d1be      	bne.n	a4c2 <__swsetup_r+0x3e>
    a544:	230c      	movs	r3, #12
    a546:	5ee2      	ldrsh	r2, [r4, r3]
    a548:	0613      	lsls	r3, r2, #24
    a54a:	d5ba      	bpl.n	a4c2 <__swsetup_r+0x3e>
    a54c:	2340      	movs	r3, #64	; 0x40
    a54e:	4313      	orrs	r3, r2
    a550:	81a3      	strh	r3, [r4, #12]
    a552:	3801      	subs	r0, #1
    a554:	e7b5      	b.n	a4c2 <__swsetup_r+0x3e>
    a556:	0792      	lsls	r2, r2, #30
    a558:	d400      	bmi.n	a55c <__swsetup_r+0xd8>
    a55a:	6963      	ldr	r3, [r4, #20]
    a55c:	60a3      	str	r3, [r4, #8]
    a55e:	e7ed      	b.n	a53c <__swsetup_r+0xb8>
    a560:	20000128 	.word	0x20000128
    a564:	0000aff0 	.word	0x0000aff0
    a568:	0000b010 	.word	0x0000b010
    a56c:	0000afd0 	.word	0x0000afd0

0000a570 <_close_r>:
    a570:	2300      	movs	r3, #0
    a572:	b570      	push	{r4, r5, r6, lr}
    a574:	4c06      	ldr	r4, [pc, #24]	; (a590 <_close_r+0x20>)
    a576:	0005      	movs	r5, r0
    a578:	0008      	movs	r0, r1
    a57a:	6023      	str	r3, [r4, #0]
    a57c:	f7fe fd66 	bl	904c <_close>
    a580:	1c43      	adds	r3, r0, #1
    a582:	d103      	bne.n	a58c <_close_r+0x1c>
    a584:	6823      	ldr	r3, [r4, #0]
    a586:	2b00      	cmp	r3, #0
    a588:	d000      	beq.n	a58c <_close_r+0x1c>
    a58a:	602b      	str	r3, [r5, #0]
    a58c:	bd70      	pop	{r4, r5, r6, pc}
    a58e:	46c0      	nop			; (mov r8, r8)
    a590:	20001a44 	.word	0x20001a44

0000a594 <_fstat_r>:
    a594:	2300      	movs	r3, #0
    a596:	b570      	push	{r4, r5, r6, lr}
    a598:	4c06      	ldr	r4, [pc, #24]	; (a5b4 <_fstat_r+0x20>)
    a59a:	0005      	movs	r5, r0
    a59c:	0008      	movs	r0, r1
    a59e:	0011      	movs	r1, r2
    a5a0:	6023      	str	r3, [r4, #0]
    a5a2:	f7fe fd56 	bl	9052 <_fstat>
    a5a6:	1c43      	adds	r3, r0, #1
    a5a8:	d103      	bne.n	a5b2 <_fstat_r+0x1e>
    a5aa:	6823      	ldr	r3, [r4, #0]
    a5ac:	2b00      	cmp	r3, #0
    a5ae:	d000      	beq.n	a5b2 <_fstat_r+0x1e>
    a5b0:	602b      	str	r3, [r5, #0]
    a5b2:	bd70      	pop	{r4, r5, r6, pc}
    a5b4:	20001a44 	.word	0x20001a44

0000a5b8 <_isatty_r>:
    a5b8:	2300      	movs	r3, #0
    a5ba:	b570      	push	{r4, r5, r6, lr}
    a5bc:	4c06      	ldr	r4, [pc, #24]	; (a5d8 <_isatty_r+0x20>)
    a5be:	0005      	movs	r5, r0
    a5c0:	0008      	movs	r0, r1
    a5c2:	6023      	str	r3, [r4, #0]
    a5c4:	f7fe fd4a 	bl	905c <_isatty>
    a5c8:	1c43      	adds	r3, r0, #1
    a5ca:	d103      	bne.n	a5d4 <_isatty_r+0x1c>
    a5cc:	6823      	ldr	r3, [r4, #0]
    a5ce:	2b00      	cmp	r3, #0
    a5d0:	d000      	beq.n	a5d4 <_isatty_r+0x1c>
    a5d2:	602b      	str	r3, [r5, #0]
    a5d4:	bd70      	pop	{r4, r5, r6, pc}
    a5d6:	46c0      	nop			; (mov r8, r8)
    a5d8:	20001a44 	.word	0x20001a44

0000a5dc <_lseek_r>:
    a5dc:	b570      	push	{r4, r5, r6, lr}
    a5de:	0005      	movs	r5, r0
    a5e0:	0008      	movs	r0, r1
    a5e2:	0011      	movs	r1, r2
    a5e4:	2200      	movs	r2, #0
    a5e6:	4c06      	ldr	r4, [pc, #24]	; (a600 <_lseek_r+0x24>)
    a5e8:	6022      	str	r2, [r4, #0]
    a5ea:	001a      	movs	r2, r3
    a5ec:	f7fe fd38 	bl	9060 <_lseek>
    a5f0:	1c43      	adds	r3, r0, #1
    a5f2:	d103      	bne.n	a5fc <_lseek_r+0x20>
    a5f4:	6823      	ldr	r3, [r4, #0]
    a5f6:	2b00      	cmp	r3, #0
    a5f8:	d000      	beq.n	a5fc <_lseek_r+0x20>
    a5fa:	602b      	str	r3, [r5, #0]
    a5fc:	bd70      	pop	{r4, r5, r6, pc}
    a5fe:	46c0      	nop			; (mov r8, r8)
    a600:	20001a44 	.word	0x20001a44

0000a604 <memchr>:
    a604:	b2c9      	uxtb	r1, r1
    a606:	1882      	adds	r2, r0, r2
    a608:	4290      	cmp	r0, r2
    a60a:	d101      	bne.n	a610 <memchr+0xc>
    a60c:	2000      	movs	r0, #0
    a60e:	4770      	bx	lr
    a610:	7803      	ldrb	r3, [r0, #0]
    a612:	428b      	cmp	r3, r1
    a614:	d0fb      	beq.n	a60e <memchr+0xa>
    a616:	3001      	adds	r0, #1
    a618:	e7f6      	b.n	a608 <memchr+0x4>

0000a61a <__malloc_lock>:
    a61a:	4770      	bx	lr

0000a61c <__malloc_unlock>:
    a61c:	4770      	bx	lr
	...

0000a620 <_read_r>:
    a620:	b570      	push	{r4, r5, r6, lr}
    a622:	0005      	movs	r5, r0
    a624:	0008      	movs	r0, r1
    a626:	0011      	movs	r1, r2
    a628:	2200      	movs	r2, #0
    a62a:	4c06      	ldr	r4, [pc, #24]	; (a644 <_read_r+0x24>)
    a62c:	6022      	str	r2, [r4, #0]
    a62e:	001a      	movs	r2, r3
    a630:	f7f9 fc6e 	bl	3f10 <_read>
    a634:	1c43      	adds	r3, r0, #1
    a636:	d103      	bne.n	a640 <_read_r+0x20>
    a638:	6823      	ldr	r3, [r4, #0]
    a63a:	2b00      	cmp	r3, #0
    a63c:	d000      	beq.n	a640 <_read_r+0x20>
    a63e:	602b      	str	r3, [r5, #0]
    a640:	bd70      	pop	{r4, r5, r6, pc}
    a642:	46c0      	nop			; (mov r8, r8)
    a644:	20001a44 	.word	0x20001a44

0000a648 <_tcc_apbcmasks>:
    a648:	00000100 00000200 00000400              ............

0000a654 <_tcc_cc_nums>:
    a654:	00020204                                ....

0000a658 <_tcc_gclk_ids>:
    a658:	001b1a1a                                ....

0000a65c <_tcc_maxs>:
    a65c:	00ffffff 00ffffff 0000ffff              ............

0000a668 <_tcc_ow_nums>:
    a668:	00020408                                ....

0000a66c <_tcc_intflag>:
    a66c:	00000001 00000002 00000004 00000008     ................
    a67c:	00001000 00002000 00004000 00008000     ..... ...@......
    a68c:	00010000 00020000 00040000 00080000     ................

0000a69c <tcc_interrupt_vectors.12466>:
    a69c:	0011100f                                ....

0000a6a0 <mmc_trans_multipliers>:
    a6a0:	00000000 0000000a 0000000c 0000000d     ................
    a6b0:	0000000f 00000014 0000001a 0000001e     ................
    a6c0:	00000023 00000028 0000002d 00000034     #...(...-...4...
    a6d0:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000a6e0 <sd_mmc_trans_units>:
    a6e0:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0000a6fc <sd_trans_multipliers>:
    a6fc:	00000000 0000000a 0000000c 0000000d     ................
    a70c:	0000000f 00000014 00000019 0000001e     ................
    a71c:	00000023 00000028 0000002d 00000032     #...(...-...2...
    a72c:	00000037 0000003c 00000046 00000050     7...<...F...P...
    a73c:	0000189a 00001970 00001970 000017dc     ....p...p.......
    a74c:	00001970 00001970 00001970 00001970     p...p...p...p...
    a75c:	00001970 00001970 00001970 00001970     p...p...p...p...
    a76c:	00001970 00001970 00001970 00001970     p...p...p...p...
    a77c:	00001970 00001970 00001800 00001970     p...p.......p...
    a78c:	00001970 00001970 00001970 00001970     p...p...p...p...
    a79c:	00001970 00001970 0000188a 0000191e     p...p...........
    a7ac:	00001970 00001970 0000193e 00001970     p...p...>...p...
    a7bc:	00001970 00001970 00001970 00001970     p...p...p...p...
    a7cc:	00001970 000018c6 00001970 00001970     p.......p...p...
    a7dc:	00001960 00001970 00001968 00001970     `...p...h...p...
    a7ec:	00001970 00001970 00001970 00001956     p...p...p...V...
    a7fc:	00001970 00001970 00001970 00001970     p...p...p...p...
    a80c:	00001970 00001970 00001970 00001970     p...p...p...p...
    a81c:	00001970 00001970 00001970 00001970     p...p...p...p...
    a82c:	00001970 00001970 00001970 00001970     p...p...p...p...
    a83c:	00001970 00001970 00001970 00001970     p...p...p...p...
    a84c:	00001970 00001970 00001970 00001970     p...p...p...p...
    a85c:	00001970 00001970 00001970 00001970     p...p...p...p...
    a86c:	00001970 00001970 00001970 00001970     p...p...p...p...
    a87c:	00001970 00001970 00001970 00001970     p...p...p...p...
    a88c:	00001970 00001970 00001970 00001970     p...p...p...p...
    a89c:	00001970 00001970 00001892 31333231     p...p.......1231
    a8ac:	32313332 33323133 00000000 00002bfa     23123123.....+..
    a8bc:	00002bf6 00002bf6 00002c64 00002c64     .+...+..d,..d,..
    a8cc:	00002c0e 00002c00 00002c14 00002c52     .,...,...,..R,..
    a8dc:	00002ec8 00002ea8 00002ea8 00002f34     ............4/..
    a8ec:	00002eba 00002ed6 00002eac 00002ee4     ................
    a8fc:	00002f24                                $/..

0000a900 <LfnOfs>:
    a900:	07050301 12100e09 1c181614 0000001e     ................

0000a910 <excvt.4558>:
    a910:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    a920:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    a930:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    a940:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    a950:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    a960:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    a970:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    a980:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    a990:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    a9a0:	00005d5b                                []..

0000a9a4 <Tbl>:
    a9a4:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    a9b4:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    a9c4:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    a9d4:	00d600ff 00f800dc 00d800a3 019200d7     ................
    a9e4:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    a9f4:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    aa04:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    aa14:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    aa24:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    aa34:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    aa44:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    aa54:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    aa64:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    aa74:	00da00de 00d900db 00dd00fd 00b400af     ................
    aa84:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    aa94:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0000aaa4 <tbl_lower.4308>:
    aaa4:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    aab4:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    aac4:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    aad4:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    aae4:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    aaf4:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    ab04:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    ab14:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    ab24:	01050103 01090107 010d010b 0111010f     ................
    ab34:	01150113 01190117 011d011b 0121011f     ..............!.
    ab44:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    ab54:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    ab64:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    ab74:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    ab84:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    ab94:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    aba4:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    abb4:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    abc4:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    abd4:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    abe4:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    abf4:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    ac04:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    ac14:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    ac24:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    ac34:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    ac44:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    ac54:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    ac64:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    ac74:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0000ac84 <tbl_upper.4309>:
    ac84:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    ac94:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    aca4:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    acb4:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    acc4:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    acd4:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    ace4:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    acf4:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    ad04:	01040102 01080106 010c010a 0110010e     ................
    ad14:	01140112 01180116 011c011a 0120011e     .............. .
    ad24:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    ad34:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    ad44:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    ad54:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    ad64:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    ad74:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    ad84:	03940393 03960395 03980397 039a0399     ................
    ad94:	039c039b 039e039d 03a0039f 03a303a1     ................
    ada4:	03a503a4 03a703a6 03a903a8 041003aa     ................
    adb4:	04120411 04140413 04160415 04180417     ................
    adc4:	041a0419 041c041b 041e041d 0420041f     .............. .
    add4:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    ade4:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    adf4:	04030402 04050404 04070406 04090408     ................
    ae04:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    ae14:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    ae24:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    ae34:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    ae44:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    ae54:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    ae64:	6f727245 68772072 20656c69 6e65706f     Error while open
    ae74:	20676e69 656c6966 2523203a 000d0a64     ing file: #%d...
    ae84:	6f727245 68772072 20656c69 74697277     Error while writ
    ae94:	20676e69 20564157 64616568 203a7265     ing WAV header: 
    aea4:	0a642523 0000000d 32303831 315f3231     #%d.....180212_1
    aeb4:	32393034 61772e35 00000076 74697257     40925.wav...Writ
    aec4:	20676e69 6e756863 2e2e2e6b 66756220     ing chunk... buf
    aed4:	3a726566 2c642520 74616420 0d0a3a61     fer: %d, data:..
    aee4:	00000000 5d64255b 00007830 78323025     ....[%d]0x..%02x
    aef4:	00000020 00000d0a 4f525245 6c632052      .......ERROR cl
    af04:	6e69736f 65722067 64726f63 66206465     osing recorded f
    af14:	0a656c69 0000000d 74697257 20676e69     ile.....Writing 
    af24:	62206f74 65666675 25202372 000d0a64     to buffer# %d...
    af34:	64726143 736e6920 6c6c6174 69616620     Card install fai
    af44:	0d0a216c 00000000 61656c50 75206573     l!......Please u
    af54:	756c706e 6e612067 65722064 756c702d     nplug and re-plu
    af64:	68742067 61632065 0a2e6472 0000000d     g the card......
    af74:	00006a30 00006a3e 00006ad8 00006b78     0j..>j...j..xk..
    af84:	00006bdc                                .k..

0000af88 <_usb_device_irq_bits>:
    af88:	00080004 00800070 01000001 00000200     ....p...........

0000af98 <_usb_endpoint_irq_bits>:
    af98:	60100c03 42000800 42000c00 42001000     ...`...B...B...B
    afa8:	42001400 42001800 42001c00 2f445322     ...B...B...B"SD/
    afb8:	20434d4d 64726143 65766f20 50532072     MMC Card over SP
    afc8:	00002249                                I"..

0000afcc <_global_impure_ptr>:
    afcc:	2000012c                                ,.. 

0000afd0 <__sf_fake_stderr>:
	...

0000aff0 <__sf_fake_stdin>:
	...

0000b010 <__sf_fake_stdout>:
	...
    b030:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    b040:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    b050:	31300046 35343332 39383736 64636261     F.0123456789abcd
    b060:	00006665                                ef..

0000b064 <_init>:
    b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b066:	46c0      	nop			; (mov r8, r8)
    b068:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b06a:	bc08      	pop	{r3}
    b06c:	469e      	mov	lr, r3
    b06e:	4770      	bx	lr

0000b070 <__init_array_start>:
    b070:	000000dd 	.word	0x000000dd

0000b074 <_fini>:
    b074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b076:	46c0      	nop			; (mov r8, r8)
    b078:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b07a:	bc08      	pop	{r3}
    b07c:	469e      	mov	lr, r3
    b07e:	4770      	bx	lr

0000b080 <__fini_array_start>:
    b080:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <sd_mmc_cards>:
	...
20000014:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

20000030 <udi_api_msc>:
20000030:	139d 0000 1a11 0000 1a39 0000 135d 0000     ........9...]...
20000040:	0000 0000                                   ....

20000044 <udi_msc_b_ack_trans>:
20000044:	0101                                             .

20000045 <udi_msc_b_reset_trans>:
20000045:	0001 5500                                        ...

20000048 <udi_msc_csw>:
20000048:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20000058 <udi_msc_inquiry_data.12606>:
20000058:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
20000078:	2e31 3030                                   1.00

2000007c <udc_string_desc>:
2000007c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000098 <udc_string_desc_languageid>:
20000098:	0304 0409                                   ....

2000009c <udc_string_manufacturer_name>:
2000009c:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

200000a8 <udc_string_product_name>:
200000a8:	534d 0043                                   MSC.

200000ac <wave_header>:
200000ac:	4952 4646 0000 0000 4157 4556 6d66 2074     RIFF....WAVEfmt 
200000bc:	0010 0000 0001 0002 ac44 0000 b110 0002     ........D.......
200000cc:	0004 0010 6164 6174 0000 0000               ....data....

200000d8 <udc_config>:
200000d8:	010c 2000 00e4 2000 0000 0000               ... ... ....

200000e4 <udc_config_lsfs>:
200000e4:	00ec 2000 0120 2000                         ...  .. 

200000ec <udc_desc_fs>:
200000ec:	0209 0020 0101 c000 0932 0004 0200 0608     .. .....2.......
200000fc:	0050 0507 0281 0040 0700 0205 4002 0000     P.....@......@..

2000010c <udc_device_desc>:
2000010c:	0112 0200 0000 4000 03eb 2403 0100 0201     .......@...$....
2000011c:	0103 0000                                   ....

20000120 <udi_apis>:
20000120:	0030 2000                                   0.. 

20000124 <ss_pins>:
20000124:	0105                                             .

20000125 <g_interrupt_enabled>:
20000125:	0001 2c00                                        ...

20000128 <_impure_ptr>:
20000128:	012c 2000                                   ,.. 

2000012c <impure_data>:
2000012c:	0000 0000 aff0 0000 b010 0000 afd0 0000     ................
	...
