
SoundingSoil_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000855c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000855c  0000855c  0001855c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000160  20000000  00008564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000aa0  20000160  000086c4  00020160  2**2
                  ALLOC
  4 .stack        00002000  20000c00  00009164  00020160  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
  7 .debug_info   00061288  00000000  00000000  000201e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007b5d  00000000  00000000  00081469  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f698  00000000  00000000  00088fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000df8  00000000  00000000  0009865e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001590  00000000  00000000  00099456  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002561e  00000000  00000000  0009a9e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001cf10  00000000  00000000  000c0004  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009e0fa  00000000  00000000  000dcf14  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002b54  00000000  00000000  0017b010  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 2c 00 20 51 6a 00 00 4d 6a 00 00 4d 6a 00 00     .,. Qj..Mj..Mj..
	...
      2c:	4d 6a 00 00 00 00 00 00 00 00 00 00 4d 6a 00 00     Mj..........Mj..
      3c:	4d 6a 00 00 4d 6a 00 00 4d 6a 00 00 4d 6a 00 00     Mj..Mj..Mj..Mj..
      4c:	4d 6a 00 00 45 50 00 00 4d 6a 00 00 4d 6a 00 00     Mj..EP..Mj..Mj..
      5c:	01 48 00 00 4d 6a 00 00 a5 23 00 00 b5 23 00 00     .H..Mj...#...#..
      6c:	c5 23 00 00 d5 23 00 00 e5 23 00 00 f5 23 00 00     .#...#...#...#..
      7c:	45 07 00 00 55 07 00 00 65 07 00 00 4d 6a 00 00     E...U...e...Mj..
      8c:	4d 6a 00 00 4d 6a 00 00 4d 6a 00 00 4d 6a 00 00     Mj..Mj..Mj..Mj..
      9c:	4d 6a 00 00 4d 6a 00 00 4d 6a 00 00 4d 6a 00 00     Mj..Mj..Mj..Mj..
      ac:	4d 6a 00 00 00 00 00 00                             Mj......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000160 	.word	0x20000160
      d4:	00000000 	.word	0x00000000
      d8:	00008564 	.word	0x00008564

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000164 	.word	0x20000164
     108:	00008564 	.word	0x00008564
     10c:	00008564 	.word	0x00008564
     110:	00000000 	.word	0x00000000

00000114 <_tcc_get_inst_index>:
	uint32_t ch;
	for(ch = 0; ch < TCC_NUM_CHANNELS; ch ++) {
		if (events->generate_event_on_channel[ch]) {
			evctrl |= (TCC_EVCTRL_MCEO(1) << ch);
		}
		if (events->on_event_perform_channel_action[ch]) {
     114:	4b09      	ldr	r3, [pc, #36]	; (13c <_tcc_get_inst_index+0x28>)
     116:	4298      	cmp	r0, r3
			evctrl |= (TCC_EVCTRL_MCEI(1) << ch);
     118:	d00c      	beq.n	134 <_tcc_get_inst_index+0x20>
     11a:	4b09      	ldr	r3, [pc, #36]	; (140 <_tcc_get_inst_index+0x2c>)
     11c:	4298      	cmp	r0, r3
     11e:	d007      	beq.n	130 <_tcc_get_inst_index+0x1c>
		}
	}
	if (events->generate_event_on_counter_overflow) {
     120:	4a08      	ldr	r2, [pc, #32]	; (144 <_tcc_get_inst_index+0x30>)
     122:	2300      	movs	r3, #0
     124:	4290      	cmp	r0, r2
		evctrl |= TCC_EVCTRL_OVFEO;
     126:	d001      	beq.n	12c <_tcc_get_inst_index+0x18>
     128:	0018      	movs	r0, r3
     12a:	4770      	bx	lr
	}
	if (events->generate_event_on_counter_retrigger) {
     12c:	3302      	adds	r3, #2
     12e:	e002      	b.n	136 <_tcc_get_inst_index+0x22>
     130:	2301      	movs	r3, #1
		evctrl |= TCC_EVCTRL_TRGEO;
     132:	e000      	b.n	136 <_tcc_get_inst_index+0x22>
     134:	2300      	movs	r3, #0
     136:	b2db      	uxtb	r3, r3
	}
	if (events->generate_event_on_counter_event) {
     138:	e7f6      	b.n	128 <_tcc_get_inst_index+0x14>
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	42002000 	.word	0x42002000
		evctrl |= TCC_EVCTRL_CNTEO;
     140:	42002400 	.word	0x42002400
	}

	tcc_module->EVCTRL.reg = evctrl;
     144:	42002800 	.word	0x42002800

00000148 <tcc_get_config_defaults>:

	return STATUS_OK;
     148:	b510      	push	{r4, lr}
			return STATUS_ERR_INVALID_ARG;
     14a:	0004      	movs	r4, r0
     14c:	0008      	movs	r0, r1
			return STATUS_ERR_INVALID_ARG;
     14e:	4b4f      	ldr	r3, [pc, #316]	; (28c <tcc_get_config_defaults+0x144>)
     150:	4798      	blx	r3
     152:	2300      	movs	r3, #0
     154:	6023      	str	r3, [r4, #0]
     156:	0080      	lsls	r0, r0, #2
     158:	4a4d      	ldr	r2, [pc, #308]	; (290 <tcc_get_config_defaults+0x148>)
     15a:	5882      	ldr	r2, [r0, r2]
     15c:	6062      	str	r2, [r4, #4]
     15e:	72a3      	strb	r3, [r4, #10]
     160:	72e3      	strb	r3, [r4, #11]
     162:	7323      	strb	r3, [r4, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     164:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     166:	7223      	strb	r3, [r4, #8]
	MREPEAT(TCC_NUM_CHANNELS,
     168:	61e3      	str	r3, [r4, #28]
     16a:	6223      	str	r3, [r4, #32]
     16c:	6263      	str	r3, [r4, #36]	; 0x24
     16e:	62a3      	str	r3, [r4, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
     170:	7523      	strb	r3, [r4, #20]
     172:	7563      	strb	r3, [r4, #21]
     174:	75a3      	strb	r3, [r4, #22]
     176:	75e3      	strb	r3, [r4, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     178:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     17a:	7663      	strb	r3, [r4, #25]
	MREPEAT(TCC_NUM_CHANNELS,
     17c:	7423      	strb	r3, [r4, #16]
     17e:	7463      	strb	r3, [r4, #17]
     180:	74a3      	strb	r3, [r4, #18]
     182:	74e3      	strb	r3, [r4, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     184:	222c      	movs	r2, #44	; 0x2c
     186:	54a3      	strb	r3, [r4, r2]
     188:	3201      	adds	r2, #1
     18a:	54a3      	strb	r3, [r4, r2]
     18c:	3201      	adds	r2, #1
     18e:	54a3      	strb	r3, [r4, r2]
     190:	3201      	adds	r2, #1
     192:	54a3      	strb	r3, [r4, r2]
     194:	3201      	adds	r2, #1
     196:	54a3      	strb	r3, [r4, r2]
     198:	3201      	adds	r2, #1
     19a:	54a3      	strb	r3, [r4, r2]
     19c:	3201      	adds	r2, #1
     19e:	54a3      	strb	r3, [r4, r2]
     1a0:	3201      	adds	r2, #1
     1a2:	54a3      	strb	r3, [r4, r2]
     1a4:	3201      	adds	r2, #1
     1a6:	54a3      	strb	r3, [r4, r2]
     1a8:	3201      	adds	r2, #1
     1aa:	54a3      	strb	r3, [r4, r2]
     1ac:	3201      	adds	r2, #1
     1ae:	54a3      	strb	r3, [r4, r2]
     1b0:	3201      	adds	r2, #1
     1b2:	54a3      	strb	r3, [r4, r2]
     1b4:	3201      	adds	r2, #1
     1b6:	54a3      	strb	r3, [r4, r2]
     1b8:	3201      	adds	r2, #1
     1ba:	54a3      	strb	r3, [r4, r2]
     1bc:	3201      	adds	r2, #1
     1be:	54a3      	strb	r3, [r4, r2]
     1c0:	3201      	adds	r2, #1
     1c2:	54a3      	strb	r3, [r4, r2]
     1c4:	3201      	adds	r2, #1
     1c6:	54a3      	strb	r3, [r4, r2]
     1c8:	3201      	adds	r2, #1
     1ca:	54a3      	strb	r3, [r4, r2]
     1cc:	3201      	adds	r2, #1
     1ce:	54a3      	strb	r3, [r4, r2]
     1d0:	3201      	adds	r2, #1
     1d2:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     1d4:	3201      	adds	r2, #1
     1d6:	54a3      	strb	r3, [r4, r2]
     1d8:	3201      	adds	r2, #1
     1da:	54a3      	strb	r3, [r4, r2]
     1dc:	3201      	adds	r2, #1
     1de:	54a3      	strb	r3, [r4, r2]
     1e0:	3201      	adds	r2, #1
     1e2:	54a3      	strb	r3, [r4, r2]
     1e4:	3201      	adds	r2, #1
     1e6:	54a3      	strb	r3, [r4, r2]
     1e8:	3201      	adds	r2, #1
     1ea:	54a3      	strb	r3, [r4, r2]
     1ec:	3201      	adds	r2, #1
     1ee:	54a3      	strb	r3, [r4, r2]
     1f0:	3201      	adds	r2, #1
     1f2:	54a3      	strb	r3, [r4, r2]
     1f4:	3201      	adds	r2, #1
     1f6:	54a3      	strb	r3, [r4, r2]
     1f8:	3201      	adds	r2, #1
     1fa:	54a3      	strb	r3, [r4, r2]
     1fc:	3201      	adds	r2, #1
     1fe:	54a3      	strb	r3, [r4, r2]
     200:	3201      	adds	r2, #1
     202:	54a3      	strb	r3, [r4, r2]
     204:	3201      	adds	r2, #1
     206:	54a3      	strb	r3, [r4, r2]
     208:	3201      	adds	r2, #1
     20a:	54a3      	strb	r3, [r4, r2]
     20c:	3201      	adds	r2, #1
     20e:	54a3      	strb	r3, [r4, r2]
     210:	3201      	adds	r2, #1
     212:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     214:	3201      	adds	r2, #1
     216:	54a3      	strb	r3, [r4, r2]
     218:	3201      	adds	r2, #1
     21a:	54a3      	strb	r3, [r4, r2]
     21c:	3201      	adds	r2, #1
     21e:	54a3      	strb	r3, [r4, r2]
     220:	3201      	adds	r2, #1
     222:	54a3      	strb	r3, [r4, r2]
     224:	3201      	adds	r2, #1
     226:	54a3      	strb	r3, [r4, r2]
     228:	3201      	adds	r2, #1
     22a:	54a3      	strb	r3, [r4, r2]
     22c:	3201      	adds	r2, #1
     22e:	54a3      	strb	r3, [r4, r2]
     230:	3201      	adds	r2, #1
     232:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     234:	3241      	adds	r2, #65	; 0x41
     236:	54a3      	strb	r3, [r4, r2]
     238:	65a3      	str	r3, [r4, #88]	; 0x58
     23a:	67a3      	str	r3, [r4, #120]	; 0x78
     23c:	3201      	adds	r2, #1
     23e:	54a3      	strb	r3, [r4, r2]
     240:	65e3      	str	r3, [r4, #92]	; 0x5c
     242:	67e3      	str	r3, [r4, #124]	; 0x7c
     244:	3201      	adds	r2, #1
     246:	54a3      	strb	r3, [r4, r2]
     248:	6623      	str	r3, [r4, #96]	; 0x60
     24a:	3a1a      	subs	r2, #26
     24c:	50a3      	str	r3, [r4, r2]
     24e:	321b      	adds	r2, #27
     250:	54a3      	strb	r3, [r4, r2]
     252:	6663      	str	r3, [r4, #100]	; 0x64
     254:	3a17      	subs	r2, #23
     256:	50a3      	str	r3, [r4, r2]
     258:	3218      	adds	r2, #24
     25a:	54a3      	strb	r3, [r4, r2]
     25c:	66a3      	str	r3, [r4, #104]	; 0x68
     25e:	3a14      	subs	r2, #20
     260:	50a3      	str	r3, [r4, r2]
     262:	3215      	adds	r2, #21
     264:	54a3      	strb	r3, [r4, r2]
     266:	66e3      	str	r3, [r4, #108]	; 0x6c
     268:	3a11      	subs	r2, #17
     26a:	50a3      	str	r3, [r4, r2]
     26c:	3212      	adds	r2, #18
     26e:	54a3      	strb	r3, [r4, r2]
     270:	6723      	str	r3, [r4, #112]	; 0x70
     272:	3a0e      	subs	r2, #14
     274:	50a3      	str	r3, [r4, r2]
     276:	320f      	adds	r2, #15
     278:	54a3      	strb	r3, [r4, r2]
     27a:	6763      	str	r3, [r4, #116]	; 0x74
     27c:	3a0b      	subs	r2, #11
     27e:	50a3      	str	r3, [r4, r2]
	config->double_buffering_enabled  = true;
     280:	2101      	movs	r1, #1
     282:	320c      	adds	r2, #12
     284:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     286:	3201      	adds	r2, #1
     288:	54a3      	strb	r3, [r4, r2]
}
     28a:	bd10      	pop	{r4, pc}
     28c:	00000115 	.word	0x00000115
     290:	00008168 	.word	0x00008168

00000294 <tcc_init>:
{
     294:	b5f0      	push	{r4, r5, r6, r7, lr}
     296:	46de      	mov	lr, fp
     298:	4657      	mov	r7, sl
     29a:	464e      	mov	r6, r9
     29c:	4645      	mov	r5, r8
     29e:	b5e0      	push	{r5, r6, r7, lr}
     2a0:	b091      	sub	sp, #68	; 0x44
     2a2:	9001      	str	r0, [sp, #4]
     2a4:	000c      	movs	r4, r1
     2a6:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
     2a8:	0008      	movs	r0, r1
     2aa:	4bc3      	ldr	r3, [pc, #780]	; (5b8 <tcc_init+0x324>)
     2ac:	4798      	blx	r3
     2ae:	0003      	movs	r3, r0
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     2b0:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2b2:	48c2      	ldr	r0, [pc, #776]	; (5bc <tcc_init+0x328>)
     2b4:	6a02      	ldr	r2, [r0, #32]
     2b6:	009e      	lsls	r6, r3, #2
     2b8:	4fc1      	ldr	r7, [pc, #772]	; (5c0 <tcc_init+0x32c>)
     2ba:	59f7      	ldr	r7, [r6, r7]
     2bc:	433a      	orrs	r2, r7
     2be:	6202      	str	r2, [r0, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     2c0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     2c2:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     2c4:	0792      	lsls	r2, r2, #30
     2c6:	d506      	bpl.n	2d6 <tcc_init+0x42>
}
     2c8:	b011      	add	sp, #68	; 0x44
     2ca:	bc3c      	pop	{r2, r3, r4, r5}
     2cc:	4690      	mov	r8, r2
     2ce:	4699      	mov	r9, r3
     2d0:	46a2      	mov	sl, r4
     2d2:	46ab      	mov	fp, r5
     2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     2d6:	6822      	ldr	r2, [r4, #0]
     2d8:	2701      	movs	r7, #1
     2da:	4017      	ands	r7, r2
     2dc:	d1f4      	bne.n	2c8 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
     2de:	48b9      	ldr	r0, [pc, #740]	; (5c4 <tcc_init+0x330>)
     2e0:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
     2e2:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
     2e4:	682e      	ldr	r6, [r5, #0]
     2e6:	42b2      	cmp	r2, r6
     2e8:	d3ee      	bcc.n	2c8 <tcc_init+0x34>
		|| (config->counter.period > count_max)
     2ea:	686e      	ldr	r6, [r5, #4]
     2ec:	42b2      	cmp	r2, r6
     2ee:	d3eb      	bcc.n	2c8 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
     2f0:	69e8      	ldr	r0, [r5, #28]
     2f2:	4282      	cmp	r2, r0
     2f4:	d200      	bcs.n	2f8 <tcc_init+0x64>
     2f6:	e1b9      	b.n	66c <tcc_init+0x3d8>
     2f8:	6a28      	ldr	r0, [r5, #32]
     2fa:	4282      	cmp	r2, r0
     2fc:	d200      	bcs.n	300 <tcc_init+0x6c>
     2fe:	e1b7      	b.n	670 <tcc_init+0x3dc>
     300:	6a68      	ldr	r0, [r5, #36]	; 0x24
     302:	4282      	cmp	r2, r0
     304:	d200      	bcs.n	308 <tcc_init+0x74>
     306:	e1b5      	b.n	674 <tcc_init+0x3e0>
     308:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     30a:	4282      	cmp	r2, r0
     30c:	d200      	bcs.n	310 <tcc_init+0x7c>
     30e:	e1b3      	b.n	678 <tcc_init+0x3e4>
     310:	2298      	movs	r2, #152	; 0x98
     312:	4694      	mov	ip, r2
     314:	44ac      	add	ip, r5
     316:	4662      	mov	r2, ip
     318:	9208      	str	r2, [sp, #32]
     31a:	2000      	movs	r0, #0
     31c:	e003      	b.n	326 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     31e:	3001      	adds	r0, #1
     320:	3201      	adds	r2, #1
     322:	2808      	cmp	r0, #8
     324:	d008      	beq.n	338 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
     326:	7816      	ldrb	r6, [r2, #0]
     328:	2e00      	cmp	r6, #0
     32a:	d0f8      	beq.n	31e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
     32c:	4ea6      	ldr	r6, [pc, #664]	; (5c8 <tcc_init+0x334>)
     32e:	5c76      	ldrb	r6, [r6, r1]
     330:	4286      	cmp	r6, r0
     332:	dcf4      	bgt.n	31e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
     334:	2017      	movs	r0, #23
     336:	e7c7      	b.n	2c8 <tcc_init+0x34>
     338:	2200      	movs	r2, #0
     33a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     33c:	2080      	movs	r0, #128	; 0x80
     33e:	0440      	lsls	r0, r0, #17
     340:	4684      	mov	ip, r0
     342:	e002      	b.n	34a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     344:	3201      	adds	r2, #1
     346:	2a04      	cmp	r2, #4
     348:	d00e      	beq.n	368 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
     34a:	18a8      	adds	r0, r5, r2
     34c:	7c00      	ldrb	r0, [r0, #16]
     34e:	2801      	cmp	r0, #1
     350:	d1f8      	bne.n	344 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
     352:	489e      	ldr	r0, [pc, #632]	; (5cc <tcc_init+0x338>)
     354:	5c40      	ldrb	r0, [r0, r1]
     356:	4290      	cmp	r0, r2
     358:	da00      	bge.n	35c <tcc_init+0xc8>
     35a:	e18f      	b.n	67c <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     35c:	4660      	mov	r0, ip
     35e:	4090      	lsls	r0, r2
     360:	9e02      	ldr	r6, [sp, #8]
     362:	4306      	orrs	r6, r0
     364:	9602      	str	r6, [sp, #8]
     366:	e7ed      	b.n	344 <tcc_init+0xb0>
	if (config->run_in_standby) {
     368:	329d      	adds	r2, #157	; 0x9d
     36a:	5caa      	ldrb	r2, [r5, r2]
     36c:	2a00      	cmp	r2, #0
     36e:	d004      	beq.n	37a <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     370:	2280      	movs	r2, #128	; 0x80
     372:	0112      	lsls	r2, r2, #4
     374:	9902      	ldr	r1, [sp, #8]
     376:	4311      	orrs	r1, r2
     378:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
     37a:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     37c:	1e51      	subs	r1, r2, #1
     37e:	418a      	sbcs	r2, r1
     380:	0092      	lsls	r2, r2, #2
     382:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     384:	7a6a      	ldrb	r2, [r5, #9]
     386:	2a01      	cmp	r2, #1
     388:	d022      	beq.n	3d0 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
     38a:	4a90      	ldr	r2, [pc, #576]	; (5cc <tcc_init+0x338>)
     38c:	5cd2      	ldrb	r2, [r2, r3]
     38e:	0011      	movs	r1, r2
     390:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
     392:	2235      	movs	r2, #53	; 0x35
     394:	5caa      	ldrb	r2, [r5, r2]
     396:	428a      	cmp	r2, r1
     398:	d300      	bcc.n	39c <tcc_init+0x108>
     39a:	e179      	b.n	690 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     39c:	212c      	movs	r1, #44	; 0x2c
     39e:	5c69      	ldrb	r1, [r5, r1]
     3a0:	290f      	cmp	r1, #15
     3a2:	d900      	bls.n	3a6 <tcc_init+0x112>
     3a4:	e174      	b.n	690 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     3a6:	7b28      	ldrb	r0, [r5, #12]
     3a8:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     3aa:	7ae8      	ldrb	r0, [r5, #11]
     3ac:	900b      	str	r0, [sp, #44]	; 0x2c
     3ae:	202d      	movs	r0, #45	; 0x2d
     3b0:	4682      	mov	sl, r0
     3b2:	44aa      	add	sl, r5
     3b4:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     3b6:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
     3b8:	ae0e      	add	r6, sp, #56	; 0x38
     3ba:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     3bc:	26c0      	movs	r6, #192	; 0xc0
     3be:	0136      	lsls	r6, r6, #4
     3c0:	46b1      	mov	r9, r6
     3c2:	4684      	mov	ip, r0
     3c4:	46a0      	mov	r8, r4
     3c6:	0028      	movs	r0, r5
     3c8:	4655      	mov	r5, sl
     3ca:	9309      	str	r3, [sp, #36]	; 0x24
     3cc:	4682      	mov	sl, r0
     3ce:	e035      	b.n	43c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
     3d0:	9906      	ldr	r1, [sp, #24]
     3d2:	4311      	orrs	r1, r2
     3d4:	9106      	str	r1, [sp, #24]
     3d6:	e7d8      	b.n	38a <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     3d8:	0292      	lsls	r2, r2, #10
     3da:	464f      	mov	r7, r9
     3dc:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3de:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
     3e0:	7919      	ldrb	r1, [r3, #4]
     3e2:	468b      	mov	fp, r1
     3e4:	2103      	movs	r1, #3
     3e6:	465f      	mov	r7, fp
     3e8:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3ea:	430a      	orrs	r2, r1
     3ec:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
     3ee:	795a      	ldrb	r2, [r3, #5]
     3f0:	0152      	lsls	r2, r2, #5
     3f2:	2160      	movs	r1, #96	; 0x60
     3f4:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3f6:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
     3f8:	7999      	ldrb	r1, [r3, #6]
     3fa:	0209      	lsls	r1, r1, #8
     3fc:	26c0      	movs	r6, #192	; 0xc0
     3fe:	00b6      	lsls	r6, r6, #2
     400:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     402:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     404:	79da      	ldrb	r2, [r3, #7]
     406:	0312      	lsls	r2, r2, #12
     408:	21e0      	movs	r1, #224	; 0xe0
     40a:	01c9      	lsls	r1, r1, #7
     40c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     40e:	4316      	orrs	r6, r2
     410:	4334      	orrs	r4, r6
     412:	9a03      	ldr	r2, [sp, #12]
     414:	4314      	orrs	r4, r2
     416:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
     418:	4662      	mov	r2, ip
     41a:	9907      	ldr	r1, [sp, #28]
     41c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     41e:	2a04      	cmp	r2, #4
     420:	d02a      	beq.n	478 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
     422:	7c9a      	ldrb	r2, [r3, #18]
     424:	9905      	ldr	r1, [sp, #20]
     426:	4291      	cmp	r1, r2
     428:	d800      	bhi.n	42c <tcc_init+0x198>
     42a:	e131      	b.n	690 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     42c:	7a59      	ldrb	r1, [r3, #9]
     42e:	350a      	adds	r5, #10
     430:	2304      	movs	r3, #4
     432:	469b      	mov	fp, r3
     434:	44dc      	add	ip, fp
     436:	290f      	cmp	r1, #15
     438:	d900      	bls.n	43c <tcc_init+0x1a8>
     43a:	e129      	b.n	690 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     43c:	0609      	lsls	r1, r1, #24
     43e:	23f0      	movs	r3, #240	; 0xf0
     440:	051b      	lsls	r3, r3, #20
     442:	4019      	ands	r1, r3
     444:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     446:	782e      	ldrb	r6, [r5, #0]
     448:	0436      	lsls	r6, r6, #16
     44a:	20ff      	movs	r0, #255	; 0xff
     44c:	0400      	lsls	r0, r0, #16
     44e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     450:	7868      	ldrb	r0, [r5, #1]
     452:	2480      	movs	r4, #128	; 0x80
     454:	2800      	cmp	r0, #0
     456:	d100      	bne.n	45a <tcc_init+0x1c6>
     458:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     45a:	7898      	ldrb	r0, [r3, #2]
     45c:	2708      	movs	r7, #8
     45e:	9703      	str	r7, [sp, #12]
     460:	2800      	cmp	r0, #0
     462:	d101      	bne.n	468 <tcc_init+0x1d4>
     464:	9804      	ldr	r0, [sp, #16]
     466:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     468:	78d8      	ldrb	r0, [r3, #3]
     46a:	4683      	mov	fp, r0
     46c:	2010      	movs	r0, #16
     46e:	465f      	mov	r7, fp
     470:	2f00      	cmp	r7, #0
     472:	d1b1      	bne.n	3d8 <tcc_init+0x144>
     474:	9804      	ldr	r0, [sp, #16]
     476:	e7af      	b.n	3d8 <tcc_init+0x144>
     478:	4644      	mov	r4, r8
     47a:	4655      	mov	r5, sl
     47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
     47e:	4a52      	ldr	r2, [pc, #328]	; (5c8 <tcc_init+0x334>)
     480:	5cd2      	ldrb	r2, [r2, r3]
     482:	4691      	mov	r9, r2
     484:	4651      	mov	r1, sl
     486:	3150      	adds	r1, #80	; 0x50
     488:	4650      	mov	r0, sl
     48a:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
     48c:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     48e:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     490:	2601      	movs	r6, #1
     492:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     494:	2602      	movs	r6, #2
     496:	36ff      	adds	r6, #255	; 0xff
     498:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     49a:	2680      	movs	r6, #128	; 0x80
     49c:	0276      	lsls	r6, r6, #9
     49e:	46b0      	mov	r8, r6
     4a0:	46a4      	mov	ip, r4
     4a2:	001c      	movs	r4, r3
     4a4:	464b      	mov	r3, r9
     4a6:	e00f      	b.n	4c8 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
     4a8:	7806      	ldrb	r6, [r0, #0]
     4aa:	2e00      	cmp	r6, #0
     4ac:	d007      	beq.n	4be <tcc_init+0x22a>
			if (i >= ow_num) {
     4ae:	4293      	cmp	r3, r2
     4b0:	d800      	bhi.n	4b4 <tcc_init+0x220>
     4b2:	e0e7      	b.n	684 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     4b4:	2e02      	cmp	r6, #2
     4b6:	d014      	beq.n	4e2 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     4b8:	4656      	mov	r6, sl
     4ba:	4096      	lsls	r6, r2
     4bc:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     4be:	3201      	adds	r2, #1
     4c0:	3101      	adds	r1, #1
     4c2:	3002      	adds	r0, #2
     4c4:	2a08      	cmp	r2, #8
     4c6:	d010      	beq.n	4ea <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
     4c8:	780e      	ldrb	r6, [r1, #0]
     4ca:	2e00      	cmp	r6, #0
     4cc:	d0ec      	beq.n	4a8 <tcc_init+0x214>
			if (i >= ow_num) {
     4ce:	4293      	cmp	r3, r2
     4d0:	d800      	bhi.n	4d4 <tcc_init+0x240>
     4d2:	e0d5      	b.n	680 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     4d4:	4646      	mov	r6, r8
     4d6:	4096      	lsls	r6, r2
     4d8:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
     4da:	7806      	ldrb	r6, [r0, #0]
     4dc:	2e00      	cmp	r6, #0
     4de:	d1e9      	bne.n	4b4 <tcc_init+0x220>
     4e0:	e7ed      	b.n	4be <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     4e2:	465e      	mov	r6, fp
     4e4:	4096      	lsls	r6, r2
     4e6:	4337      	orrs	r7, r6
     4e8:	e7e9      	b.n	4be <tcc_init+0x22a>
     4ea:	4699      	mov	r9, r3
     4ec:	0023      	movs	r3, r4
     4ee:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     4f0:	7e6a      	ldrb	r2, [r5, #25]
     4f2:	0112      	lsls	r2, r2, #4
     4f4:	2130      	movs	r1, #48	; 0x30
     4f6:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     4f8:	7e28      	ldrb	r0, [r5, #24]
     4fa:	2207      	movs	r2, #7
     4fc:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     4fe:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     500:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     502:	2080      	movs	r0, #128	; 0x80
     504:	0240      	lsls	r0, r0, #9
     506:	000e      	movs	r6, r1
     508:	e002      	b.n	510 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     50a:	3201      	adds	r2, #1
     50c:	2a04      	cmp	r2, #4
     50e:	d00b      	beq.n	528 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
     510:	18a9      	adds	r1, r5, r2
     512:	7d09      	ldrb	r1, [r1, #20]
     514:	2900      	cmp	r1, #0
     516:	d0f8      	beq.n	50a <tcc_init+0x276>
			if (n >= cc_num) {
     518:	9905      	ldr	r1, [sp, #20]
     51a:	4291      	cmp	r1, r2
     51c:	dc00      	bgt.n	520 <tcc_init+0x28c>
     51e:	e0b3      	b.n	688 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
     520:	0001      	movs	r1, r0
     522:	4091      	lsls	r1, r2
     524:	430e      	orrs	r6, r1
     526:	e7f0      	b.n	50a <tcc_init+0x276>
     528:	46b2      	mov	sl, r6
     52a:	9801      	ldr	r0, [sp, #4]
     52c:	0002      	movs	r2, r0
     52e:	3204      	adds	r2, #4
     530:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
     532:	2100      	movs	r1, #0
     534:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     536:	4282      	cmp	r2, r0
     538:	d1fc      	bne.n	534 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
     53a:	2200      	movs	r2, #0
     53c:	9801      	ldr	r0, [sp, #4]
     53e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     540:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     542:	0099      	lsls	r1, r3, #2
     544:	4a22      	ldr	r2, [pc, #136]	; (5d0 <tcc_init+0x33c>)
     546:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
     548:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     54a:	22a0      	movs	r2, #160	; 0xa0
     54c:	5ca9      	ldrb	r1, [r5, r2]
     54e:	3a64      	subs	r2, #100	; 0x64
     550:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
     552:	a90d      	add	r1, sp, #52	; 0x34
     554:	7aaa      	ldrb	r2, [r5, #10]
     556:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     558:	4a1e      	ldr	r2, [pc, #120]	; (5d4 <tcc_init+0x340>)
     55a:	5cd6      	ldrb	r6, [r2, r3]
     55c:	0030      	movs	r0, r6
     55e:	4b1e      	ldr	r3, [pc, #120]	; (5d8 <tcc_init+0x344>)
     560:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     562:	0030      	movs	r0, r6
     564:	4b1d      	ldr	r3, [pc, #116]	; (5dc <tcc_init+0x348>)
     566:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     568:	464b      	mov	r3, r9
     56a:	2b00      	cmp	r3, #0
     56c:	dd3c      	ble.n	5e8 <tcc_init+0x354>
     56e:	002e      	movs	r6, r5
     570:	3658      	adds	r6, #88	; 0x58
     572:	3398      	adds	r3, #152	; 0x98
     574:	4698      	mov	r8, r3
     576:	44a8      	add	r8, r5
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     578:	2301      	movs	r3, #1
     57a:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
     57c:	46ab      	mov	fp, r5
     57e:	4645      	mov	r5, r8
     580:	46a0      	mov	r8, r4
     582:	9c08      	ldr	r4, [sp, #32]
     584:	e003      	b.n	58e <tcc_init+0x2fa>
     586:	3401      	adds	r4, #1
     588:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     58a:	42ac      	cmp	r4, r5
     58c:	d02a      	beq.n	5e4 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
     58e:	7823      	ldrb	r3, [r4, #0]
     590:	2b00      	cmp	r3, #0
     592:	d0f8      	beq.n	586 <tcc_init+0x2f2>
     594:	ab0c      	add	r3, sp, #48	; 0x30
     596:	464a      	mov	r2, r9
     598:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     59a:	2300      	movs	r3, #0
     59c:	aa0c      	add	r2, sp, #48	; 0x30
     59e:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     5a0:	0013      	movs	r3, r2
     5a2:	2220      	movs	r2, #32
     5a4:	18b2      	adds	r2, r6, r2
     5a6:	7812      	ldrb	r2, [r2, #0]
     5a8:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     5aa:	464a      	mov	r2, r9
     5ac:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     5ae:	7830      	ldrb	r0, [r6, #0]
     5b0:	0019      	movs	r1, r3
     5b2:	4b0b      	ldr	r3, [pc, #44]	; (5e0 <tcc_init+0x34c>)
     5b4:	4798      	blx	r3
     5b6:	e7e6      	b.n	586 <tcc_init+0x2f2>
     5b8:	00000115 	.word	0x00000115
     5bc:	40000400 	.word	0x40000400
     5c0:	00008154 	.word	0x00008154
     5c4:	00008168 	.word	0x00008168
     5c8:	00008174 	.word	0x00008174
     5cc:	00008160 	.word	0x00008160
     5d0:	200003b8 	.word	0x200003b8
     5d4:	00008164 	.word	0x00008164
     5d8:	000068f5 	.word	0x000068f5
     5dc:	00006869 	.word	0x00006869
     5e0:	000069ed 	.word	0x000069ed
     5e4:	4644      	mov	r4, r8
     5e6:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     5ea:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     5ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     5ee:	0212      	lsls	r2, r2, #8
     5f0:	4313      	orrs	r3, r2
     5f2:	9a02      	ldr	r2, [sp, #8]
     5f4:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     5f6:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     5f8:	2204      	movs	r2, #4
     5fa:	68a3      	ldr	r3, [r4, #8]
     5fc:	421a      	tst	r2, r3
     5fe:	d1fc      	bne.n	5fa <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
     600:	23ff      	movs	r3, #255	; 0xff
     602:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     604:	2204      	movs	r2, #4
     606:	68a3      	ldr	r3, [r4, #8]
     608:	421a      	tst	r2, r3
     60a:	d1fc      	bne.n	606 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
     60c:	466b      	mov	r3, sp
     60e:	7e1b      	ldrb	r3, [r3, #24]
     610:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     614:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     618:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     61a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     61c:	4a1d      	ldr	r2, [pc, #116]	; (694 <tcc_init+0x400>)
     61e:	68a3      	ldr	r3, [r4, #8]
     620:	4213      	tst	r3, r2
     622:	d1fc      	bne.n	61e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
     624:	4653      	mov	r3, sl
     626:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     628:	2210      	movs	r2, #16
     62a:	68a3      	ldr	r3, [r4, #8]
     62c:	421a      	tst	r2, r3
     62e:	d1fc      	bne.n	62a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
     630:	682b      	ldr	r3, [r5, #0]
     632:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     634:	4a18      	ldr	r2, [pc, #96]	; (698 <tcc_init+0x404>)
     636:	68a3      	ldr	r3, [r4, #8]
     638:	4213      	tst	r3, r2
     63a:	d1fc      	bne.n	636 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
     63c:	686b      	ldr	r3, [r5, #4]
     63e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     640:	9805      	ldr	r0, [sp, #20]
     642:	2800      	cmp	r0, #0
     644:	dd22      	ble.n	68c <tcc_init+0x3f8>
     646:	351c      	adds	r5, #28
     648:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     64a:	4e14      	ldr	r6, [pc, #80]	; (69c <tcc_init+0x408>)
     64c:	0032      	movs	r2, r6
     64e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
     650:	68a3      	ldr	r3, [r4, #8]
     652:	421a      	tst	r2, r3
     654:	d1fc      	bne.n	650 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
     656:	cd04      	ldmia	r5!, {r2}
     658:	000b      	movs	r3, r1
     65a:	3310      	adds	r3, #16
     65c:	009b      	lsls	r3, r3, #2
     65e:	18e3      	adds	r3, r4, r3
     660:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     662:	3101      	adds	r1, #1
     664:	4288      	cmp	r0, r1
     666:	dcf1      	bgt.n	64c <tcc_init+0x3b8>
	return STATUS_OK;
     668:	2000      	movs	r0, #0
     66a:	e62d      	b.n	2c8 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
     66c:	2017      	movs	r0, #23
     66e:	e62b      	b.n	2c8 <tcc_init+0x34>
     670:	2017      	movs	r0, #23
     672:	e629      	b.n	2c8 <tcc_init+0x34>
     674:	2017      	movs	r0, #23
     676:	e627      	b.n	2c8 <tcc_init+0x34>
     678:	2017      	movs	r0, #23
     67a:	e625      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     67c:	2017      	movs	r0, #23
     67e:	e623      	b.n	2c8 <tcc_init+0x34>
			if (i >= ow_num) {
     680:	2017      	movs	r0, #23
     682:	e621      	b.n	2c8 <tcc_init+0x34>
			if (i >= ow_num) {
     684:	2017      	movs	r0, #23
     686:	e61f      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     688:	2017      	movs	r0, #23
     68a:	e61d      	b.n	2c8 <tcc_init+0x34>
	return STATUS_OK;
     68c:	2000      	movs	r0, #0
     68e:	e61b      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     690:	2017      	movs	r0, #23
     692:	e619      	b.n	2c8 <tcc_init+0x34>
     694:	00020040 	.word	0x00020040
     698:	00040080 	.word	0x00040080
     69c:	00080100 	.word	0x00080100

000006a0 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     6a0:	0092      	lsls	r2, r2, #2
     6a2:	1883      	adds	r3, r0, r2
     6a4:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
     6a6:	4b03      	ldr	r3, [pc, #12]	; (6b4 <tcc_register_callback+0x14>)
     6a8:	58d3      	ldr	r3, [r2, r3]
     6aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
     6ac:	4313      	orrs	r3, r2
     6ae:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
     6b0:	2000      	movs	r0, #0
     6b2:	4770      	bx	lr
     6b4:	00008178 	.word	0x00008178

000006b8 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
     6b8:	b570      	push	{r4, r5, r6, lr}
     6ba:	0004      	movs	r4, r0
     6bc:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
     6be:	6800      	ldr	r0, [r0, #0]
     6c0:	4b09      	ldr	r3, [pc, #36]	; (6e8 <tcc_enable_callback+0x30>)
     6c2:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
     6c4:	4b09      	ldr	r3, [pc, #36]	; (6ec <tcc_enable_callback+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6c6:	5c1b      	ldrb	r3, [r3, r0]
     6c8:	221f      	movs	r2, #31
     6ca:	401a      	ands	r2, r3
     6cc:	2301      	movs	r3, #1
     6ce:	4093      	lsls	r3, r2
     6d0:	4a07      	ldr	r2, [pc, #28]	; (6f0 <tcc_enable_callback+0x38>)
     6d2:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
     6d4:	00ad      	lsls	r5, r5, #2
     6d6:	4b07      	ldr	r3, [pc, #28]	; (6f4 <tcc_enable_callback+0x3c>)
     6d8:	58ea      	ldr	r2, [r5, r3]
     6da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     6dc:	4313      	orrs	r3, r2
     6de:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
     6e0:	6823      	ldr	r3, [r4, #0]
     6e2:	629a      	str	r2, [r3, #40]	; 0x28
}
     6e4:	bd70      	pop	{r4, r5, r6, pc}
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	00000115 	.word	0x00000115
     6ec:	000081a8 	.word	0x000081a8
     6f0:	e000e100 	.word	0xe000e100
     6f4:	00008178 	.word	0x00008178

000006f8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fa:	46c6      	mov	lr, r8
     6fc:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     6fe:	0080      	lsls	r0, r0, #2
     700:	4b0e      	ldr	r3, [pc, #56]	; (73c <_tcc_interrupt_handler+0x44>)
     702:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     704:	683b      	ldr	r3, [r7, #0]
     706:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     70a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     70c:	4013      	ands	r3, r2
     70e:	401e      	ands	r6, r3
     710:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     712:	4b0b      	ldr	r3, [pc, #44]	; (740 <_tcc_interrupt_handler+0x48>)
     714:	4698      	mov	r8, r3
     716:	e002      	b.n	71e <_tcc_interrupt_handler+0x26>
     718:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     71a:	2c30      	cmp	r4, #48	; 0x30
     71c:	d00a      	beq.n	734 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     71e:	4643      	mov	r3, r8
     720:	58e5      	ldr	r5, [r4, r3]
     722:	4235      	tst	r5, r6
     724:	d0f8      	beq.n	718 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     726:	193b      	adds	r3, r7, r4
     728:	685b      	ldr	r3, [r3, #4]
     72a:	0038      	movs	r0, r7
     72c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     72e:	683b      	ldr	r3, [r7, #0]
     730:	62dd      	str	r5, [r3, #44]	; 0x2c
     732:	e7f1      	b.n	718 <_tcc_interrupt_handler+0x20>
		}
	}
}
     734:	bc04      	pop	{r2}
     736:	4690      	mov	r8, r2
     738:	bdf0      	pop	{r4, r5, r6, r7, pc}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	200003b8 	.word	0x200003b8
     740:	00008178 	.word	0x00008178

00000744 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     744:	b510      	push	{r4, lr}
     746:	2000      	movs	r0, #0
     748:	4b01      	ldr	r3, [pc, #4]	; (750 <TCC0_Handler+0xc>)
     74a:	4798      	blx	r3
     74c:	bd10      	pop	{r4, pc}
     74e:	46c0      	nop			; (mov r8, r8)
     750:	000006f9 	.word	0x000006f9

00000754 <TCC1_Handler>:
     754:	b510      	push	{r4, lr}
     756:	2001      	movs	r0, #1
     758:	4b01      	ldr	r3, [pc, #4]	; (760 <TCC1_Handler+0xc>)
     75a:	4798      	blx	r3
     75c:	bd10      	pop	{r4, pc}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	000006f9 	.word	0x000006f9

00000764 <TCC2_Handler>:
     764:	b510      	push	{r4, lr}
     766:	2002      	movs	r0, #2
     768:	4b01      	ldr	r3, [pc, #4]	; (770 <TCC2_Handler+0xc>)
     76a:	4798      	blx	r3
     76c:	bd10      	pop	{r4, pc}
     76e:	46c0      	nop			; (mov r8, r8)
     770:	000006f9 	.word	0x000006f9

00000774 <audio_in_init>:
extern uint16_t audio_buffer[100];

volatile uint32_t audio_frame_cnt = 0;

void audio_in_init(void)
{
     774:	b5f0      	push	{r4, r5, r6, r7, lr}
     776:	b091      	sub	sp, #68	; 0x44
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     778:	a90f      	add	r1, sp, #60	; 0x3c
     77a:	2501      	movs	r5, #1
     77c:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
     77e:	2600      	movs	r6, #0
     780:	708e      	strb	r6, [r1, #2]
	/* Initializing the CONV pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     782:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(ADC_CONV_PIN, &pin_conf);
     784:	2014      	movs	r0, #20
     786:	4f28      	ldr	r7, [pc, #160]	; (828 <audio_in_init+0xb4>)
     788:	47b8      	blx	r7
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     78a:	2280      	movs	r2, #128	; 0x80
     78c:	0352      	lsls	r2, r2, #13
     78e:	4b27      	ldr	r3, [pc, #156]	; (82c <audio_in_init+0xb8>)
     790:	619a      	str	r2, [r3, #24]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     792:	4c27      	ldr	r4, [pc, #156]	; (830 <audio_in_init+0xbc>)
     794:	232f      	movs	r3, #47	; 0x2f
     796:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     798:	7066      	strb	r6, [r4, #1]
	slave->address         = config->address;
     79a:	70a6      	strb	r6, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     79c:	466b      	mov	r3, sp
     79e:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
     7a0:	709e      	strb	r6, [r3, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     7a2:	701d      	strb	r5, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     7a4:	4669      	mov	r1, sp
     7a6:	202f      	movs	r0, #47	; 0x2f
     7a8:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
     7aa:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     7ac:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     7ae:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7b0:	2900      	cmp	r1, #0
     7b2:	d104      	bne.n	7be <audio_in_init+0x4a>
		return &(ports[port_index]->Group[group_index]);
     7b4:	0953      	lsrs	r3, r2, #5
     7b6:	01db      	lsls	r3, r3, #7
     7b8:	491c      	ldr	r1, [pc, #112]	; (82c <audio_in_init+0xb8>)
     7ba:	468c      	mov	ip, r1
     7bc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7be:	211f      	movs	r1, #31
     7c0:	4011      	ands	r1, r2
     7c2:	2201      	movs	r2, #1
     7c4:	0010      	movs	r0, r2
     7c6:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     7c8:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     7ca:	ac01      	add	r4, sp, #4
     7cc:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     7ce:	2300      	movs	r3, #0
     7d0:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     7d2:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     7d4:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     7d6:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     7d8:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     7da:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     7dc:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     7de:	3223      	adds	r2, #35	; 0x23
     7e0:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     7e2:	3a18      	subs	r2, #24
     7e4:	2100      	movs	r1, #0
     7e6:	a807      	add	r0, sp, #28
     7e8:	4b12      	ldr	r3, [pc, #72]	; (834 <audio_in_init+0xc0>)
     7ea:	4798      	blx	r3
	config_spi_slave.ss_pin = ADC_SPI_SS_PIN;
	spi_attach_slave(&adc_spi_slave, &config_spi_slave);
	
	/* Initializing the SPI master */
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.mux_setting = ADC_SPI_MUX_SETTING;
     7ec:	2380      	movs	r3, #128	; 0x80
     7ee:	039b      	lsls	r3, r3, #14
     7f0:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = ADC_SPI_PINMUX_PAD0;
     7f2:	4b11      	ldr	r3, [pc, #68]	; (838 <audio_in_init+0xc4>)
     7f4:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = ADC_SPI_PINMUX_PAD1;
     7f6:	4b11      	ldr	r3, [pc, #68]	; (83c <audio_in_init+0xc8>)
     7f8:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = ADC_SPI_PINMUX_PAD2;
     7fa:	4b11      	ldr	r3, [pc, #68]	; (840 <audio_in_init+0xcc>)
     7fc:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = ADC_SPI_PINMUX_PAD3;
     7fe:	2301      	movs	r3, #1
     800:	425b      	negs	r3, r3
     802:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate = ADC_SPI_BAUDRATE;
     804:	4b0f      	ldr	r3, [pc, #60]	; (844 <audio_in_init+0xd0>)
     806:	61a3      	str	r3, [r4, #24]
	spi_init(&adc_spi_module, ADC_SPI_MODULE, &config_spi_master);
     808:	4d0f      	ldr	r5, [pc, #60]	; (848 <audio_in_init+0xd4>)
     80a:	0022      	movs	r2, r4
     80c:	490f      	ldr	r1, [pc, #60]	; (84c <audio_in_init+0xd8>)
     80e:	0028      	movs	r0, r5
     810:	4b0f      	ldr	r3, [pc, #60]	; (850 <audio_in_init+0xdc>)
     812:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     814:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     816:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     818:	2b00      	cmp	r3, #0
     81a:	d1fc      	bne.n	816 <audio_in_init+0xa2>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     81c:	6813      	ldr	r3, [r2, #0]
     81e:	2102      	movs	r1, #2
     820:	430b      	orrs	r3, r1
     822:	6013      	str	r3, [r2, #0]
	spi_enable(&adc_spi_module);
}
     824:	b011      	add	sp, #68	; 0x44
     826:	bdf0      	pop	{r4, r5, r6, r7, pc}
     828:	00006699 	.word	0x00006699
     82c:	41004400 	.word	0x41004400
     830:	200006ac 	.word	0x200006ac
     834:	0000715f 	.word	0x0000715f
     838:	00100002 	.word	0x00100002
     83c:	00110002 	.word	0x00110002
     840:	00120002 	.word	0x00120002
     844:	001e8480 	.word	0x001e8480
     848:	2000066c 	.word	0x2000066c
     84c:	42000c00 	.word	0x42000c00
     850:	00005491 	.word	0x00005491

00000854 <audio_record_1samp>:

void audio_record_1samp(void) {
     854:	b5f0      	push	{r4, r5, r6, r7, lr}
     856:	b083      	sub	sp, #12
     858:	2332      	movs	r3, #50	; 0x32
     85a:	3b01      	subs	r3, #1
	uint8_t adc_vals[2];
	for(uint32_t i = 0; i < 50; i++) {
     85c:	2b00      	cmp	r3, #0
     85e:	d1fc      	bne.n	85a <audio_record_1samp+0x6>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     860:	4d0c      	ldr	r5, [pc, #48]	; (894 <audio_record_1samp+0x40>)
     862:	2680      	movs	r6, #128	; 0x80
     864:	0376      	lsls	r6, r6, #13
     866:	616e      	str	r6, [r5, #20]
		
	}
	port_pin_set_output_level(ADC_CONV_PIN, false);
	spi_read_buffer_wait(&adc_spi_module, adc_vals, 2, 0xFF);
     868:	ac01      	add	r4, sp, #4
     86a:	33ff      	adds	r3, #255	; 0xff
     86c:	2202      	movs	r2, #2
     86e:	0021      	movs	r1, r4
     870:	4809      	ldr	r0, [pc, #36]	; (898 <audio_record_1samp+0x44>)
     872:	4f0a      	ldr	r7, [pc, #40]	; (89c <audio_record_1samp+0x48>)
     874:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
     876:	61ae      	str	r6, [r5, #24]
	port_pin_set_output_level(ADC_CONV_PIN, true);
	audio_buffer[0] = ((uint16_t)adc_vals[0] << 8) || (adc_vals[1]);
     878:	7822      	ldrb	r2, [r4, #0]
     87a:	2301      	movs	r3, #1
     87c:	2a00      	cmp	r2, #0
     87e:	d104      	bne.n	88a <audio_record_1samp+0x36>
     880:	ab01      	add	r3, sp, #4
     882:	785b      	ldrb	r3, [r3, #1]
     884:	1e5a      	subs	r2, r3, #1
     886:	4193      	sbcs	r3, r2
     888:	b2db      	uxtb	r3, r3
     88a:	4a05      	ldr	r2, [pc, #20]	; (8a0 <audio_record_1samp+0x4c>)
     88c:	8013      	strh	r3, [r2, #0]
}
     88e:	b003      	add	sp, #12
     890:	bdf0      	pop	{r4, r5, r6, r7, pc}
     892:	46c0      	nop			; (mov r8, r8)
     894:	41004400 	.word	0x41004400
     898:	2000066c 	.word	0x2000066c
     89c:	000057c5 	.word	0x000057c5
     8a0:	20000290 	.word	0x20000290

000008a4 <audio_sync_reached_callback>:

static void audio_sync_reached_callback(void) {
     8a4:	b510      	push	{r4, lr}
	audio_record_1samp();
     8a6:	4b07      	ldr	r3, [pc, #28]	; (8c4 <audio_sync_reached_callback+0x20>)
     8a8:	4798      	blx	r3
	audio_frame_cnt++;
     8aa:	4b07      	ldr	r3, [pc, #28]	; (8c8 <audio_sync_reached_callback+0x24>)
     8ac:	681a      	ldr	r2, [r3, #0]
     8ae:	3201      	adds	r2, #1
     8b0:	601a      	str	r2, [r3, #0]
	if(audio_frame_cnt >= 10000) {
     8b2:	681a      	ldr	r2, [r3, #0]
     8b4:	4b05      	ldr	r3, [pc, #20]	; (8cc <audio_sync_reached_callback+0x28>)
     8b6:	429a      	cmp	r2, r3
     8b8:	d902      	bls.n	8c0 <audio_sync_reached_callback+0x1c>
		audio_frame_cnt = 0;
     8ba:	2200      	movs	r2, #0
     8bc:	4b02      	ldr	r3, [pc, #8]	; (8c8 <audio_sync_reached_callback+0x24>)
     8be:	601a      	str	r2, [r3, #0]
	}
}
     8c0:	bd10      	pop	{r4, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	00000855 	.word	0x00000855
     8c8:	2000017c 	.word	0x2000017c
     8cc:	0000270f 	.word	0x0000270f

000008d0 <audio_sync_init>:

void audio_sync_init(void) {
     8d0:	b570      	push	{r4, r5, r6, lr}
     8d2:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
     8d4:	4d1f      	ldr	r5, [pc, #124]	; (954 <audio_sync_init+0x84>)
     8d6:	0029      	movs	r1, r5
     8d8:	a801      	add	r0, sp, #4
     8da:	4b1f      	ldr	r3, [pc, #124]	; (958 <audio_sync_init+0x88>)
     8dc:	4798      	blx	r3
	config_tcc.counter.period = AUDIO_SYNC_44_1KHZ_CNT;
     8de:	4b1f      	ldr	r3, [pc, #124]	; (95c <audio_sync_init+0x8c>)
     8e0:	9302      	str	r3, [sp, #8]
	config_tcc.compare.match[0] = AUDIO_SYNC_CONV_CNT;
     8e2:	2332      	movs	r3, #50	; 0x32
     8e4:	9308      	str	r3, [sp, #32]
	tcc_init(&audio_syncer_module, TCC0, &config_tcc);
     8e6:	4c1e      	ldr	r4, [pc, #120]	; (960 <audio_sync_init+0x90>)
     8e8:	aa01      	add	r2, sp, #4
     8ea:	0029      	movs	r1, r5
     8ec:	0020      	movs	r0, r4
     8ee:	4b1d      	ldr	r3, [pc, #116]	; (964 <audio_sync_init+0x94>)
     8f0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     8f2:	6822      	ldr	r2, [r4, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     8f4:	2102      	movs	r1, #2
     8f6:	6893      	ldr	r3, [r2, #8]
     8f8:	4219      	tst	r1, r3
     8fa:	d1fc      	bne.n	8f6 <audio_sync_init+0x26>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     8fc:	6813      	ldr	r3, [r2, #0]
     8fe:	2102      	movs	r1, #2
     900:	430b      	orrs	r3, r1
     902:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     904:	4b16      	ldr	r3, [pc, #88]	; (960 <audio_sync_init+0x90>)
     906:	681a      	ldr	r2, [r3, #0]
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     908:	3102      	adds	r1, #2
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     90a:	201f      	movs	r0, #31
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
			/* Command have been issued */
			return;
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
			/* Cancel RETRIGGER command and issue STOP */
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
     90c:	24e0      	movs	r4, #224	; 0xe0
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     90e:	6893      	ldr	r3, [r2, #8]
     910:	4219      	tst	r1, r3
     912:	d1fc      	bne.n	90e <audio_sync_init+0x3e>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     914:	7953      	ldrb	r3, [r2, #5]
     916:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
     918:	d005      	beq.n	926 <audio_sync_init+0x56>
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
     91a:	2b40      	cmp	r3, #64	; 0x40
     91c:	d005      	beq.n	92a <audio_sync_init+0x5a>
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
     91e:	2b20      	cmp	r3, #32
     920:	d1f5      	bne.n	90e <audio_sync_init+0x3e>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
     922:	7114      	strb	r4, [r2, #4]
     924:	e7f3      	b.n	90e <audio_sync_init+0x3e>
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_STOP;
     926:	2340      	movs	r3, #64	; 0x40
     928:	7153      	strb	r3, [r2, #5]
	tcc_enable(&audio_syncer_module);
	tcc_stop_counter(&audio_syncer_module);
	
	tcc_register_callback(&audio_syncer_module, audio_sync_reached_callback, TCC_CALLBACK_OVERFLOW);
     92a:	4e0f      	ldr	r6, [pc, #60]	; (968 <audio_sync_init+0x98>)
     92c:	4c0c      	ldr	r4, [pc, #48]	; (960 <audio_sync_init+0x90>)
     92e:	2200      	movs	r2, #0
     930:	0031      	movs	r1, r6
     932:	0020      	movs	r0, r4
     934:	4d0d      	ldr	r5, [pc, #52]	; (96c <audio_sync_init+0x9c>)
     936:	47a8      	blx	r5
	tcc_register_callback(&audio_syncer_module, audio_sync_reached_callback, TCC_CALLBACK_CHANNEL_0);
     938:	2208      	movs	r2, #8
     93a:	0031      	movs	r1, r6
     93c:	0020      	movs	r0, r4
     93e:	47a8      	blx	r5
	tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_OVERFLOW);
     940:	2100      	movs	r1, #0
     942:	0020      	movs	r0, r4
     944:	4d0a      	ldr	r5, [pc, #40]	; (970 <audio_sync_init+0xa0>)
     946:	47a8      	blx	r5
	tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_CHANNEL_0);
     948:	2108      	movs	r1, #8
     94a:	0020      	movs	r0, r4
     94c:	47a8      	blx	r5
     94e:	b02a      	add	sp, #168	; 0xa8
     950:	bd70      	pop	{r4, r5, r6, pc}
     952:	46c0      	nop			; (mov r8, r8)
     954:	42002000 	.word	0x42002000
     958:	00000149 	.word	0x00000149
     95c:	00000424 	.word	0x00000424
     960:	200006b0 	.word	0x200006b0
     964:	00000295 	.word	0x00000295
     968:	000008a5 	.word	0x000008a5
     96c:	000006a1 	.word	0x000006a1
     970:	000006b9 	.word	0x000006b9

00000974 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     974:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     976:	4b07      	ldr	r3, [pc, #28]	; (994 <sd_mmc_configure_slot+0x20>)
     978:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     97a:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     97c:	5ccb      	ldrb	r3, [r1, r3]
     97e:	1e5a      	subs	r2, r3, #1
     980:	4193      	sbcs	r3, r2
     982:	b2db      	uxtb	r3, r3
     984:	7c4a      	ldrb	r2, [r1, #17]
     986:	6809      	ldr	r1, [r1, #0]
     988:	4803      	ldr	r0, [pc, #12]	; (998 <sd_mmc_configure_slot+0x24>)
     98a:	7800      	ldrb	r0, [r0, #0]
     98c:	4c03      	ldr	r4, [pc, #12]	; (99c <sd_mmc_configure_slot+0x28>)
     98e:	47a0      	blx	r4
}
     990:	bd10      	pop	{r4, pc}
     992:	46c0      	nop			; (mov r8, r8)
     994:	20000180 	.word	0x20000180
     998:	20000189 	.word	0x20000189
     99c:	000060ed 	.word	0x000060ed

000009a0 <sd_mmc_select_slot>:
{
     9a0:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     9a2:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     9a4:	2800      	cmp	r0, #0
     9a6:	d001      	beq.n	9ac <sd_mmc_select_slot+0xc>
}
     9a8:	0018      	movs	r0, r3
     9aa:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     9ac:	4b40      	ldr	r3, [pc, #256]	; (ab0 <sd_mmc_select_slot+0x110>)
     9ae:	7a19      	ldrb	r1, [r3, #8]
	if (port_index < PORT_INST_NUM) {
     9b0:	09ca      	lsrs	r2, r1, #7
		return NULL;
     9b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9b4:	2a00      	cmp	r2, #0
     9b6:	d104      	bne.n	9c2 <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     9b8:	094b      	lsrs	r3, r1, #5
     9ba:	01db      	lsls	r3, r3, #7
     9bc:	4a3d      	ldr	r2, [pc, #244]	; (ab4 <sd_mmc_select_slot+0x114>)
     9be:	4694      	mov	ip, r2
     9c0:	4463      	add	r3, ip
	return (port_base->IN.reg & pin_mask);
     9c2:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9c4:	221f      	movs	r2, #31
     9c6:	400a      	ands	r2, r1
     9c8:	2301      	movs	r3, #1
     9ca:	4093      	lsls	r3, r2
     9cc:	4218      	tst	r0, r3
     9ce:	d010      	beq.n	9f2 <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     9d0:	4b37      	ldr	r3, [pc, #220]	; (ab0 <sd_mmc_select_slot+0x110>)
     9d2:	7b9b      	ldrb	r3, [r3, #14]
     9d4:	2b01      	cmp	r3, #1
     9d6:	d004      	beq.n	9e2 <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     9d8:	2204      	movs	r2, #4
     9da:	4b35      	ldr	r3, [pc, #212]	; (ab0 <sd_mmc_select_slot+0x110>)
     9dc:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     9de:	2302      	movs	r3, #2
     9e0:	e7e2      	b.n	9a8 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     9e2:	4b35      	ldr	r3, [pc, #212]	; (ab8 <sd_mmc_select_slot+0x118>)
     9e4:	781b      	ldrb	r3, [r3, #0]
     9e6:	2b00      	cmp	r3, #0
     9e8:	d0f6      	beq.n	9d8 <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     9ea:	2200      	movs	r2, #0
     9ec:	4b33      	ldr	r3, [pc, #204]	; (abc <sd_mmc_select_slot+0x11c>)
     9ee:	601a      	str	r2, [r3, #0]
     9f0:	e7f2      	b.n	9d8 <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     9f2:	4b2f      	ldr	r3, [pc, #188]	; (ab0 <sd_mmc_select_slot+0x110>)
     9f4:	7b9a      	ldrb	r2, [r3, #14]
     9f6:	2a04      	cmp	r2, #4
     9f8:	d005      	beq.n	a06 <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     9fa:	2a01      	cmp	r2, #1
     9fc:	d033      	beq.n	a66 <sd_mmc_select_slot+0xc6>
		return SD_MMC_ERR_UNUSABLE;
     9fe:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     a00:	2a03      	cmp	r2, #3
     a02:	d0d1      	beq.n	9a8 <sd_mmc_select_slot+0x8>
     a04:	e045      	b.n	a92 <sd_mmc_select_slot+0xf2>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     a06:	3a03      	subs	r2, #3
     a08:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     a0a:	4b2c      	ldr	r3, [pc, #176]	; (abc <sd_mmc_select_slot+0x11c>)
     a0c:	681b      	ldr	r3, [r3, #0]
     a0e:	2b00      	cmp	r3, #0
     a10:	d017      	beq.n	a42 <sd_mmc_select_slot+0xa2>
		sd_mmc_sam_systick_used = false;
     a12:	2200      	movs	r2, #0
     a14:	4b28      	ldr	r3, [pc, #160]	; (ab8 <sd_mmc_select_slot+0x118>)
     a16:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     a18:	2000      	movs	r0, #0
     a1a:	4b29      	ldr	r3, [pc, #164]	; (ac0 <sd_mmc_select_slot+0x120>)
     a1c:	4798      	blx	r3
     a1e:	22fa      	movs	r2, #250	; 0xfa
     a20:	0092      	lsls	r2, r2, #2
     a22:	2300      	movs	r3, #0
     a24:	2100      	movs	r1, #0
     a26:	4c27      	ldr	r4, [pc, #156]	; (ac4 <sd_mmc_select_slot+0x124>)
     a28:	47a0      	blx	r4
     a2a:	4a27      	ldr	r2, [pc, #156]	; (ac8 <sd_mmc_select_slot+0x128>)
     a2c:	2300      	movs	r3, #0
     a2e:	1880      	adds	r0, r0, r2
     a30:	4159      	adcs	r1, r3
     a32:	4a26      	ldr	r2, [pc, #152]	; (acc <sd_mmc_select_slot+0x12c>)
     a34:	2300      	movs	r3, #0
     a36:	4c26      	ldr	r4, [pc, #152]	; (ad0 <sd_mmc_select_slot+0x130>)
     a38:	47a0      	blx	r4
     a3a:	4b26      	ldr	r3, [pc, #152]	; (ad4 <sd_mmc_select_slot+0x134>)
     a3c:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     a3e:	2302      	movs	r3, #2
     a40:	e7b2      	b.n	9a8 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     a42:	2401      	movs	r4, #1
     a44:	4b1c      	ldr	r3, [pc, #112]	; (ab8 <sd_mmc_select_slot+0x118>)
     a46:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     a48:	2000      	movs	r0, #0
     a4a:	4b1d      	ldr	r3, [pc, #116]	; (ac0 <sd_mmc_select_slot+0x120>)
     a4c:	4798      	blx	r3
     a4e:	21fa      	movs	r1, #250	; 0xfa
     a50:	0149      	lsls	r1, r1, #5
     a52:	4b21      	ldr	r3, [pc, #132]	; (ad8 <sd_mmc_select_slot+0x138>)
     a54:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     a56:	23fa      	movs	r3, #250	; 0xfa
     a58:	009b      	lsls	r3, r3, #2
     a5a:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     a5c:	4b17      	ldr	r3, [pc, #92]	; (abc <sd_mmc_select_slot+0x11c>)
     a5e:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     a60:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     a62:	2302      	movs	r3, #2
     a64:	e7a0      	b.n	9a8 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     a66:	4b14      	ldr	r3, [pc, #80]	; (ab8 <sd_mmc_select_slot+0x118>)
     a68:	781b      	ldrb	r3, [r3, #0]
     a6a:	2b00      	cmp	r3, #0
     a6c:	d007      	beq.n	a7e <sd_mmc_select_slot+0xde>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     a6e:	4b13      	ldr	r3, [pc, #76]	; (abc <sd_mmc_select_slot+0x11c>)
     a70:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     a72:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     a74:	03d2      	lsls	r2, r2, #15
     a76:	d597      	bpl.n	9a8 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     a78:	2200      	movs	r2, #0
     a7a:	4b10      	ldr	r3, [pc, #64]	; (abc <sd_mmc_select_slot+0x11c>)
     a7c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     a7e:	4b0c      	ldr	r3, [pc, #48]	; (ab0 <sd_mmc_select_slot+0x110>)
     a80:	2202      	movs	r2, #2
     a82:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     a84:	4a15      	ldr	r2, [pc, #84]	; (adc <sd_mmc_select_slot+0x13c>)
     a86:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     a88:	2201      	movs	r2, #1
     a8a:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     a8c:	2100      	movs	r1, #0
     a8e:	3221      	adds	r2, #33	; 0x21
     a90:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     a92:	2200      	movs	r2, #0
     a94:	4b12      	ldr	r3, [pc, #72]	; (ae0 <sd_mmc_select_slot+0x140>)
     a96:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     a98:	4c05      	ldr	r4, [pc, #20]	; (ab0 <sd_mmc_select_slot+0x110>)
     a9a:	4b12      	ldr	r3, [pc, #72]	; (ae4 <sd_mmc_select_slot+0x144>)
     a9c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     a9e:	4b12      	ldr	r3, [pc, #72]	; (ae8 <sd_mmc_select_slot+0x148>)
     aa0:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     aa2:	7ba3      	ldrb	r3, [r4, #14]
     aa4:	3b02      	subs	r3, #2
     aa6:	425a      	negs	r2, r3
     aa8:	4153      	adcs	r3, r2
     aaa:	b2db      	uxtb	r3, r3
     aac:	e77c      	b.n	9a8 <sd_mmc_select_slot+0x8>
     aae:	46c0      	nop			; (mov r8, r8)
     ab0:	2000000c 	.word	0x2000000c
     ab4:	41004400 	.word	0x41004400
     ab8:	20000188 	.word	0x20000188
     abc:	e000e010 	.word	0xe000e010
     ac0:	000067dd 	.word	0x000067dd
     ac4:	00006f19 	.word	0x00006f19
     ac8:	00001b57 	.word	0x00001b57
     acc:	00001b58 	.word	0x00001b58
     ad0:	00006ed9 	.word	0x00006ed9
     ad4:	20000001 	.word	0x20000001
     ad8:	00006b71 	.word	0x00006b71
     adc:	00061a80 	.word	0x00061a80
     ae0:	20000189 	.word	0x20000189
     ae4:	20000180 	.word	0x20000180
     ae8:	00000975 	.word	0x00000975

00000aec <sd_mmc_cmd13>:
{
     aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     aee:	4d09      	ldr	r5, [pc, #36]	; (b14 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     af0:	4f09      	ldr	r7, [pc, #36]	; (b18 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     af2:	4e0a      	ldr	r6, [pc, #40]	; (b1c <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     af4:	2100      	movs	r1, #0
     af6:	480a      	ldr	r0, [pc, #40]	; (b20 <sd_mmc_cmd13+0x34>)
     af8:	47b8      	blx	r7
     afa:	1e04      	subs	r4, r0, #0
     afc:	d007      	beq.n	b0e <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     afe:	47b0      	blx	r6
     b00:	23ff      	movs	r3, #255	; 0xff
     b02:	4203      	tst	r3, r0
     b04:	d003      	beq.n	b0e <sd_mmc_cmd13+0x22>
     b06:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     b08:	2d00      	cmp	r5, #0
     b0a:	d1f3      	bne.n	af4 <sd_mmc_cmd13+0x8>
			return false;
     b0c:	2400      	movs	r4, #0
}
     b0e:	0020      	movs	r0, r4
     b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b12:	46c0      	nop			; (mov r8, r8)
     b14:	00030d41 	.word	0x00030d41
     b18:	00006331 	.word	0x00006331
     b1c:	00006349 	.word	0x00006349
     b20:	00001b0d 	.word	0x00001b0d

00000b24 <sd_mmc_cmd9_spi>:
{
     b24:	b510      	push	{r4, lr}
     b26:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     b28:	4b0c      	ldr	r3, [pc, #48]	; (b5c <sd_mmc_cmd9_spi+0x38>)
     b2a:	681b      	ldr	r3, [r3, #0]
     b2c:	8999      	ldrh	r1, [r3, #12]
     b2e:	0409      	lsls	r1, r1, #16
     b30:	2301      	movs	r3, #1
     b32:	9300      	str	r3, [sp, #0]
     b34:	2210      	movs	r2, #16
     b36:	480a      	ldr	r0, [pc, #40]	; (b60 <sd_mmc_cmd9_spi+0x3c>)
     b38:	4c0a      	ldr	r4, [pc, #40]	; (b64 <sd_mmc_cmd9_spi+0x40>)
     b3a:	47a0      	blx	r4
     b3c:	2800      	cmp	r0, #0
     b3e:	d101      	bne.n	b44 <sd_mmc_cmd9_spi+0x20>
}
     b40:	b002      	add	sp, #8
     b42:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     b44:	4b05      	ldr	r3, [pc, #20]	; (b5c <sd_mmc_cmd9_spi+0x38>)
     b46:	6818      	ldr	r0, [r3, #0]
     b48:	3012      	adds	r0, #18
     b4a:	2101      	movs	r1, #1
     b4c:	4b06      	ldr	r3, [pc, #24]	; (b68 <sd_mmc_cmd9_spi+0x44>)
     b4e:	4798      	blx	r3
     b50:	2800      	cmp	r0, #0
     b52:	d0f5      	beq.n	b40 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     b54:	4b05      	ldr	r3, [pc, #20]	; (b6c <sd_mmc_cmd9_spi+0x48>)
     b56:	4798      	blx	r3
     b58:	e7f2      	b.n	b40 <sd_mmc_cmd9_spi+0x1c>
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	20000180 	.word	0x20000180
     b60:	00081109 	.word	0x00081109
     b64:	000061a1 	.word	0x000061a1
     b68:	000063cd 	.word	0x000063cd
     b6c:	00006459 	.word	0x00006459

00000b70 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     b70:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     b72:	4b04      	ldr	r3, [pc, #16]	; (b84 <sd_mmc_deselect_slot+0x14>)
     b74:	781b      	ldrb	r3, [r3, #0]
     b76:	2b00      	cmp	r3, #0
     b78:	d000      	beq.n	b7c <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     b7a:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     b7c:	2000      	movs	r0, #0
     b7e:	4b02      	ldr	r3, [pc, #8]	; (b88 <sd_mmc_deselect_slot+0x18>)
     b80:	4798      	blx	r3
}
     b82:	e7fa      	b.n	b7a <sd_mmc_deselect_slot+0xa>
     b84:	20000189 	.word	0x20000189
     b88:	00006141 	.word	0x00006141

00000b8c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     b8c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     b8e:	2204      	movs	r2, #4
     b90:	4b03      	ldr	r3, [pc, #12]	; (ba0 <sd_mmc_init+0x14>)
     b92:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     b94:	32fb      	adds	r2, #251	; 0xfb
     b96:	4b03      	ldr	r3, [pc, #12]	; (ba4 <sd_mmc_init+0x18>)
     b98:	701a      	strb	r2, [r3, #0]
	driver_init();
     b9a:	4b03      	ldr	r3, [pc, #12]	; (ba8 <sd_mmc_init+0x1c>)
     b9c:	4798      	blx	r3
}
     b9e:	bd10      	pop	{r4, pc}
     ba0:	2000000c 	.word	0x2000000c
     ba4:	20000189 	.word	0x20000189
     ba8:	00005ff9 	.word	0x00005ff9

00000bac <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     bac:	b5f0      	push	{r4, r5, r6, r7, lr}
     bae:	46c6      	mov	lr, r8
     bb0:	b500      	push	{lr}
     bb2:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     bb4:	4bcb      	ldr	r3, [pc, #812]	; (ee4 <sd_mmc_check+0x338>)
     bb6:	4798      	blx	r3
     bb8:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     bba:	2801      	cmp	r0, #1
     bbc:	d006      	beq.n	bcc <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     bbe:	4bca      	ldr	r3, [pc, #808]	; (ee8 <sd_mmc_check+0x33c>)
     bc0:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     bc2:	0020      	movs	r0, r4
     bc4:	b008      	add	sp, #32
     bc6:	bc04      	pop	{r2}
     bc8:	4690      	mov	r8, r2
     bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     bcc:	4bc7      	ldr	r3, [pc, #796]	; (eec <sd_mmc_check+0x340>)
     bce:	681b      	ldr	r3, [r3, #0]
     bd0:	2201      	movs	r2, #1
     bd2:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     bd4:	2200      	movs	r2, #0
     bd6:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     bd8:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     bda:	4bc5      	ldr	r3, [pc, #788]	; (ef0 <sd_mmc_check+0x344>)
     bdc:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     bde:	2100      	movs	r1, #0
     be0:	2088      	movs	r0, #136	; 0x88
     be2:	0140      	lsls	r0, r0, #5
     be4:	4bc3      	ldr	r3, [pc, #780]	; (ef4 <sd_mmc_check+0x348>)
     be6:	4798      	blx	r3
     be8:	2800      	cmp	r0, #0
     bea:	d107      	bne.n	bfc <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     bec:	4bbf      	ldr	r3, [pc, #764]	; (eec <sd_mmc_check+0x340>)
     bee:	681b      	ldr	r3, [r3, #0]
     bf0:	2203      	movs	r2, #3
     bf2:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     bf4:	4bbc      	ldr	r3, [pc, #752]	; (ee8 <sd_mmc_check+0x33c>)
     bf6:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     bf8:	2403      	movs	r4, #3
     bfa:	e7e2      	b.n	bc2 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     bfc:	21d5      	movs	r1, #213	; 0xd5
     bfe:	0049      	lsls	r1, r1, #1
     c00:	48bd      	ldr	r0, [pc, #756]	; (ef8 <sd_mmc_check+0x34c>)
     c02:	4bbc      	ldr	r3, [pc, #752]	; (ef4 <sd_mmc_check+0x348>)
     c04:	4798      	blx	r3
	*v2 = 0;
     c06:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     c08:	2800      	cmp	r0, #0
     c0a:	d125      	bne.n	c58 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     c0c:	4bb7      	ldr	r3, [pc, #732]	; (eec <sd_mmc_check+0x340>)
     c0e:	681b      	ldr	r3, [r3, #0]
     c10:	7bdb      	ldrb	r3, [r3, #15]
     c12:	07db      	lsls	r3, r3, #31
     c14:	d500      	bpl.n	c18 <sd_mmc_check+0x6c>
     c16:	e1eb      	b.n	ff0 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     c18:	4bb4      	ldr	r3, [pc, #720]	; (eec <sd_mmc_check+0x340>)
     c1a:	681b      	ldr	r3, [r3, #0]
     c1c:	7bda      	ldrb	r2, [r3, #15]
     c1e:	2309      	movs	r3, #9
     c20:	4013      	ands	r3, r2
     c22:	2b01      	cmp	r3, #1
     c24:	d10f      	bne.n	c46 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     c26:	2180      	movs	r1, #128	; 0x80
     c28:	0089      	lsls	r1, r1, #2
     c2a:	48b4      	ldr	r0, [pc, #720]	; (efc <sd_mmc_check+0x350>)
     c2c:	4bb1      	ldr	r3, [pc, #708]	; (ef4 <sd_mmc_check+0x348>)
     c2e:	4798      	blx	r3
     c30:	2800      	cmp	r0, #0
     c32:	d0db      	beq.n	bec <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     c34:	4bad      	ldr	r3, [pc, #692]	; (eec <sd_mmc_check+0x340>)
     c36:	681b      	ldr	r3, [r3, #0]
     c38:	7bdb      	ldrb	r3, [r3, #15]
     c3a:	07db      	lsls	r3, r3, #31
     c3c:	d503      	bpl.n	c46 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     c3e:	4bb0      	ldr	r3, [pc, #704]	; (f00 <sd_mmc_check+0x354>)
     c40:	4798      	blx	r3
     c42:	2800      	cmp	r0, #0
     c44:	d0d2      	beq.n	bec <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     c46:	4baf      	ldr	r3, [pc, #700]	; (f04 <sd_mmc_check+0x358>)
     c48:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     c4a:	4ba8      	ldr	r3, [pc, #672]	; (eec <sd_mmc_check+0x340>)
     c4c:	681b      	ldr	r3, [r3, #0]
     c4e:	2200      	movs	r2, #0
     c50:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     c52:	4ba5      	ldr	r3, [pc, #660]	; (ee8 <sd_mmc_check+0x33c>)
     c54:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     c56:	e7b4      	b.n	bc2 <sd_mmc_check+0x16>
	resp = driver_get_response();
     c58:	4bab      	ldr	r3, [pc, #684]	; (f08 <sd_mmc_check+0x35c>)
     c5a:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     c5c:	1c43      	adds	r3, r0, #1
     c5e:	d100      	bne.n	c62 <sd_mmc_check+0xb6>
     c60:	e1c4      	b.n	fec <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     c62:	0500      	lsls	r0, r0, #20
     c64:	0d00      	lsrs	r0, r0, #20
     c66:	23d5      	movs	r3, #213	; 0xd5
     c68:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     c6a:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     c6c:	4298      	cmp	r0, r3
     c6e:	d1bd      	bne.n	bec <sd_mmc_check+0x40>
     c70:	e7cc      	b.n	c0c <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     c72:	2100      	movs	r1, #0
     c74:	48a5      	ldr	r0, [pc, #660]	; (f0c <sd_mmc_check+0x360>)
     c76:	4b9f      	ldr	r3, [pc, #636]	; (ef4 <sd_mmc_check+0x348>)
     c78:	4798      	blx	r3
     c7a:	2800      	cmp	r0, #0
     c7c:	d119      	bne.n	cb2 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     c7e:	4b9b      	ldr	r3, [pc, #620]	; (eec <sd_mmc_check+0x340>)
     c80:	681b      	ldr	r3, [r3, #0]
     c82:	2202      	movs	r2, #2
     c84:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     c86:	2100      	movs	r1, #0
     c88:	2088      	movs	r0, #136	; 0x88
     c8a:	0140      	lsls	r0, r0, #5
     c8c:	4b99      	ldr	r3, [pc, #612]	; (ef4 <sd_mmc_check+0x348>)
     c8e:	4798      	blx	r3
     c90:	2800      	cmp	r0, #0
     c92:	d0ab      	beq.n	bec <sd_mmc_check+0x40>
     c94:	4d9e      	ldr	r5, [pc, #632]	; (f10 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     c96:	4f97      	ldr	r7, [pc, #604]	; (ef4 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     c98:	4e9b      	ldr	r6, [pc, #620]	; (f08 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     c9a:	2100      	movs	r1, #0
     c9c:	489d      	ldr	r0, [pc, #628]	; (f14 <sd_mmc_check+0x368>)
     c9e:	47b8      	blx	r7
     ca0:	2800      	cmp	r0, #0
     ca2:	d0a3      	beq.n	bec <sd_mmc_check+0x40>
		resp = driver_get_response();
     ca4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     ca6:	07c3      	lsls	r3, r0, #31
     ca8:	d57d      	bpl.n	da6 <sd_mmc_check+0x1fa>
     caa:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     cac:	2d00      	cmp	r5, #0
     cae:	d1f4      	bne.n	c9a <sd_mmc_check+0xee>
     cb0:	e79c      	b.n	bec <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     cb2:	4b95      	ldr	r3, [pc, #596]	; (f08 <sd_mmc_check+0x35c>)
     cb4:	4798      	blx	r3
     cb6:	0043      	lsls	r3, r0, #1
     cb8:	d505      	bpl.n	cc6 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     cba:	4b8c      	ldr	r3, [pc, #560]	; (eec <sd_mmc_check+0x340>)
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	7bd3      	ldrb	r3, [r2, #15]
     cc0:	2108      	movs	r1, #8
     cc2:	430b      	orrs	r3, r1
     cc4:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     cc6:	2100      	movs	r1, #0
     cc8:	4893      	ldr	r0, [pc, #588]	; (f18 <sd_mmc_check+0x36c>)
     cca:	4b8a      	ldr	r3, [pc, #552]	; (ef4 <sd_mmc_check+0x348>)
     ccc:	4798      	blx	r3
     cce:	2800      	cmp	r0, #0
     cd0:	d08c      	beq.n	bec <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     cd2:	4b86      	ldr	r3, [pc, #536]	; (eec <sd_mmc_check+0x340>)
     cd4:	681b      	ldr	r3, [r3, #0]
     cd6:	7bdb      	ldrb	r3, [r3, #15]
     cd8:	07da      	lsls	r2, r3, #31
     cda:	d400      	bmi.n	cde <sd_mmc_check+0x132>
     cdc:	e1a4      	b.n	1028 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     cde:	4b8f      	ldr	r3, [pc, #572]	; (f1c <sd_mmc_check+0x370>)
     ce0:	4798      	blx	r3
     ce2:	2800      	cmp	r0, #0
     ce4:	d082      	beq.n	bec <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     ce6:	4b81      	ldr	r3, [pc, #516]	; (eec <sd_mmc_check+0x340>)
     ce8:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     cea:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     cec:	2107      	movs	r1, #7
     cee:	4019      	ands	r1, r3
     cf0:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     cf2:	488b      	ldr	r0, [pc, #556]	; (f20 <sd_mmc_check+0x374>)
     cf4:	5808      	ldr	r0, [r1, r0]
     cf6:	21fa      	movs	r1, #250	; 0xfa
     cf8:	0089      	lsls	r1, r1, #2
     cfa:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     cfc:	065b      	lsls	r3, r3, #25
     cfe:	0f1b      	lsrs	r3, r3, #28
     d00:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     d02:	4888      	ldr	r0, [pc, #544]	; (f24 <sd_mmc_check+0x378>)
     d04:	581b      	ldr	r3, [r3, r0]
     d06:	434b      	muls	r3, r1
     d08:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     d0a:	7c93      	ldrb	r3, [r2, #18]
     d0c:	099b      	lsrs	r3, r3, #6
     d0e:	d000      	beq.n	d12 <sd_mmc_check+0x166>
     d10:	e13c      	b.n	f8c <sd_mmc_check+0x3e0>
     d12:	7e91      	ldrb	r1, [r2, #26]
     d14:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     d16:	7e53      	ldrb	r3, [r2, #25]
     d18:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d1a:	7e10      	ldrb	r0, [r2, #24]
     d1c:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d1e:	4303      	orrs	r3, r0
     d20:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d22:	7f10      	ldrb	r0, [r2, #28]
     d24:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     d26:	7ed1      	ldrb	r1, [r2, #27]
     d28:	0049      	lsls	r1, r1, #1
     d2a:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     d2c:	051b      	lsls	r3, r3, #20
     d2e:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     d30:	3301      	adds	r3, #1
     d32:	2107      	movs	r1, #7
     d34:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     d36:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     d38:	408b      	lsls	r3, r1
     d3a:	7dd0      	ldrb	r0, [r2, #23]
     d3c:	210f      	movs	r1, #15
     d3e:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     d40:	408b      	lsls	r3, r1
				/ 1024;
     d42:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     d44:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     d46:	8991      	ldrh	r1, [r2, #12]
     d48:	0409      	lsls	r1, r1, #16
     d4a:	4877      	ldr	r0, [pc, #476]	; (f28 <sd_mmc_check+0x37c>)
     d4c:	4b69      	ldr	r3, [pc, #420]	; (ef4 <sd_mmc_check+0x348>)
     d4e:	4798      	blx	r3
     d50:	2800      	cmp	r0, #0
     d52:	d100      	bne.n	d56 <sd_mmc_check+0x1aa>
     d54:	e74a      	b.n	bec <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     d56:	2301      	movs	r3, #1
     d58:	9300      	str	r3, [sp, #0]
     d5a:	2208      	movs	r2, #8
     d5c:	2100      	movs	r1, #0
     d5e:	4873      	ldr	r0, [pc, #460]	; (f2c <sd_mmc_check+0x380>)
     d60:	4d73      	ldr	r5, [pc, #460]	; (f30 <sd_mmc_check+0x384>)
     d62:	47a8      	blx	r5
     d64:	2800      	cmp	r0, #0
     d66:	d100      	bne.n	d6a <sd_mmc_check+0x1be>
     d68:	e740      	b.n	bec <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     d6a:	2101      	movs	r1, #1
     d6c:	a806      	add	r0, sp, #24
     d6e:	4b71      	ldr	r3, [pc, #452]	; (f34 <sd_mmc_check+0x388>)
     d70:	4798      	blx	r3
     d72:	2800      	cmp	r0, #0
     d74:	d100      	bne.n	d78 <sd_mmc_check+0x1cc>
     d76:	e739      	b.n	bec <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     d78:	4b6f      	ldr	r3, [pc, #444]	; (f38 <sd_mmc_check+0x38c>)
     d7a:	4798      	blx	r3
     d7c:	2800      	cmp	r0, #0
     d7e:	d100      	bne.n	d82 <sd_mmc_check+0x1d6>
     d80:	e734      	b.n	bec <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d82:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     d84:	781b      	ldrb	r3, [r3, #0]
     d86:	220f      	movs	r2, #15
     d88:	4013      	ands	r3, r2
     d8a:	2b01      	cmp	r3, #1
     d8c:	d100      	bne.n	d90 <sd_mmc_check+0x1e4>
     d8e:	e119      	b.n	fc4 <sd_mmc_check+0x418>
     d90:	2b00      	cmp	r3, #0
     d92:	d100      	bne.n	d96 <sd_mmc_check+0x1ea>
     d94:	e109      	b.n	faa <sd_mmc_check+0x3fe>
     d96:	2b02      	cmp	r3, #2
     d98:	d100      	bne.n	d9c <sd_mmc_check+0x1f0>
     d9a:	e118      	b.n	fce <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     d9c:	4b53      	ldr	r3, [pc, #332]	; (eec <sd_mmc_check+0x340>)
     d9e:	681b      	ldr	r3, [r3, #0]
     da0:	2210      	movs	r2, #16
     da2:	741a      	strb	r2, [r3, #16]
     da4:	e105      	b.n	fb2 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     da6:	2100      	movs	r1, #0
     da8:	4858      	ldr	r0, [pc, #352]	; (f0c <sd_mmc_check+0x360>)
     daa:	4b52      	ldr	r3, [pc, #328]	; (ef4 <sd_mmc_check+0x348>)
     dac:	4798      	blx	r3
     dae:	2800      	cmp	r0, #0
     db0:	d100      	bne.n	db4 <sd_mmc_check+0x208>
     db2:	e71b      	b.n	bec <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     db4:	4b54      	ldr	r3, [pc, #336]	; (f08 <sd_mmc_check+0x35c>)
     db6:	4798      	blx	r3
     db8:	23c0      	movs	r3, #192	; 0xc0
     dba:	05db      	lsls	r3, r3, #23
     dbc:	4018      	ands	r0, r3
     dbe:	2380      	movs	r3, #128	; 0x80
     dc0:	05db      	lsls	r3, r3, #23
     dc2:	4298      	cmp	r0, r3
     dc4:	d105      	bne.n	dd2 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     dc6:	4b49      	ldr	r3, [pc, #292]	; (eec <sd_mmc_check+0x340>)
     dc8:	681a      	ldr	r2, [r3, #0]
     dca:	7bd1      	ldrb	r1, [r2, #15]
     dcc:	2308      	movs	r3, #8
     dce:	430b      	orrs	r3, r1
     dd0:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     dd2:	2100      	movs	r1, #0
     dd4:	4850      	ldr	r0, [pc, #320]	; (f18 <sd_mmc_check+0x36c>)
     dd6:	4b47      	ldr	r3, [pc, #284]	; (ef4 <sd_mmc_check+0x348>)
     dd8:	4798      	blx	r3
     dda:	2800      	cmp	r0, #0
     ddc:	d100      	bne.n	de0 <sd_mmc_check+0x234>
     dde:	e705      	b.n	bec <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     de0:	4b4e      	ldr	r3, [pc, #312]	; (f1c <sd_mmc_check+0x370>)
     de2:	4798      	blx	r3
     de4:	2800      	cmp	r0, #0
     de6:	d100      	bne.n	dea <sd_mmc_check+0x23e>
     de8:	e700      	b.n	bec <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     dea:	4b40      	ldr	r3, [pc, #256]	; (eec <sd_mmc_check+0x340>)
     dec:	681a      	ldr	r2, [r3, #0]
     dee:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     df0:	069b      	lsls	r3, r3, #26
     df2:	0f1b      	lsrs	r3, r3, #28
     df4:	2b02      	cmp	r3, #2
     df6:	d100      	bne.n	dfa <sd_mmc_check+0x24e>
     df8:	e0a8      	b.n	f4c <sd_mmc_check+0x3a0>
     dfa:	d907      	bls.n	e0c <sd_mmc_check+0x260>
     dfc:	2b03      	cmp	r3, #3
     dfe:	d100      	bne.n	e02 <sd_mmc_check+0x256>
     e00:	e0a7      	b.n	f52 <sd_mmc_check+0x3a6>
     e02:	2b04      	cmp	r3, #4
     e04:	d104      	bne.n	e10 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     e06:	2340      	movs	r3, #64	; 0x40
     e08:	7413      	strb	r3, [r2, #16]
     e0a:	e003      	b.n	e14 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     e0c:	2b01      	cmp	r3, #1
     e0e:	d066      	beq.n	ede <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     e10:	2312      	movs	r3, #18
     e12:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     e14:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     e16:	0659      	lsls	r1, r3, #25
     e18:	0f09      	lsrs	r1, r1, #28
     e1a:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     e1c:	2007      	movs	r0, #7
     e1e:	4003      	ands	r3, r0
     e20:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     e22:	483f      	ldr	r0, [pc, #252]	; (f20 <sd_mmc_check+0x374>)
     e24:	5818      	ldr	r0, [r3, r0]
     e26:	23fa      	movs	r3, #250	; 0xfa
     e28:	009b      	lsls	r3, r3, #2
     e2a:	4343      	muls	r3, r0
     e2c:	4843      	ldr	r0, [pc, #268]	; (f3c <sd_mmc_check+0x390>)
     e2e:	5809      	ldr	r1, [r1, r0]
     e30:	434b      	muls	r3, r1
     e32:	6013      	str	r3, [r2, #0]
     e34:	7e91      	ldrb	r1, [r2, #26]
     e36:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     e38:	7e53      	ldrb	r3, [r2, #25]
     e3a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     e3c:	7e10      	ldrb	r0, [r2, #24]
     e3e:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     e40:	4303      	orrs	r3, r0
     e42:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     e44:	051b      	lsls	r3, r3, #20
     e46:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     e48:	493d      	ldr	r1, [pc, #244]	; (f40 <sd_mmc_check+0x394>)
     e4a:	428b      	cmp	r3, r1
     e4c:	d00f      	beq.n	e6e <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     e4e:	7f10      	ldrb	r0, [r2, #28]
     e50:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     e52:	7ed1      	ldrb	r1, [r2, #27]
     e54:	0049      	lsls	r1, r1, #1
     e56:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     e58:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     e5a:	2007      	movs	r0, #7
     e5c:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     e5e:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     e60:	408b      	lsls	r3, r1
     e62:	7dd1      	ldrb	r1, [r2, #23]
     e64:	3008      	adds	r0, #8
     e66:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     e68:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     e6a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     e6c:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     e6e:	7c13      	ldrb	r3, [r2, #16]
     e70:	2b3f      	cmp	r3, #63	; 0x3f
     e72:	d97b      	bls.n	f6c <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     e74:	2100      	movs	r1, #0
     e76:	9100      	str	r1, [sp, #0]
     e78:	2301      	movs	r3, #1
     e7a:	2280      	movs	r2, #128	; 0x80
     e7c:	0092      	lsls	r2, r2, #2
     e7e:	4831      	ldr	r0, [pc, #196]	; (f44 <sd_mmc_check+0x398>)
     e80:	4d2b      	ldr	r5, [pc, #172]	; (f30 <sd_mmc_check+0x384>)
     e82:	47a8      	blx	r5
     e84:	2800      	cmp	r0, #0
     e86:	d100      	bne.n	e8a <sd_mmc_check+0x2de>
     e88:	e6b0      	b.n	bec <sd_mmc_check+0x40>
     e8a:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     e8c:	4e2e      	ldr	r6, [pc, #184]	; (f48 <sd_mmc_check+0x39c>)
     e8e:	a805      	add	r0, sp, #20
     e90:	47b0      	blx	r6
     e92:	2800      	cmp	r0, #0
     e94:	d100      	bne.n	e98 <sd_mmc_check+0x2ec>
     e96:	e6a9      	b.n	bec <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     e98:	3501      	adds	r5, #1
     e9a:	b2ad      	uxth	r5, r5
     e9c:	2d32      	cmp	r5, #50	; 0x32
     e9e:	d1f6      	bne.n	e8e <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     ea0:	4b12      	ldr	r3, [pc, #72]	; (eec <sd_mmc_check+0x340>)
     ea2:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     ea4:	7e8a      	ldrb	r2, [r1, #26]
     ea6:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     ea8:	7e4b      	ldrb	r3, [r1, #25]
     eaa:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     eac:	7e09      	ldrb	r1, [r1, #24]
     eae:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     eb0:	430b      	orrs	r3, r1
     eb2:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     eb4:	051b      	lsls	r3, r3, #20
     eb6:	0d1b      	lsrs	r3, r3, #20
     eb8:	4a21      	ldr	r2, [pc, #132]	; (f40 <sd_mmc_check+0x394>)
     eba:	4293      	cmp	r3, r2
     ebc:	d154      	bne.n	f68 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     ebe:	4e22      	ldr	r6, [pc, #136]	; (f48 <sd_mmc_check+0x39c>)
     ec0:	a806      	add	r0, sp, #24
     ec2:	47b0      	blx	r6
     ec4:	2800      	cmp	r0, #0
     ec6:	d100      	bne.n	eca <sd_mmc_check+0x31e>
     ec8:	e690      	b.n	bec <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     eca:	3501      	adds	r5, #1
     ecc:	b2ad      	uxth	r5, r5
     ece:	2d35      	cmp	r5, #53	; 0x35
     ed0:	d9f6      	bls.n	ec0 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     ed2:	4b06      	ldr	r3, [pc, #24]	; (eec <sd_mmc_check+0x340>)
     ed4:	681a      	ldr	r2, [r3, #0]
     ed6:	9b06      	ldr	r3, [sp, #24]
     ed8:	085b      	lsrs	r3, r3, #1
     eda:	6053      	str	r3, [r2, #4]
     edc:	e044      	b.n	f68 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     ede:	2314      	movs	r3, #20
     ee0:	7413      	strb	r3, [r2, #16]
     ee2:	e797      	b.n	e14 <sd_mmc_check+0x268>
     ee4:	000009a1 	.word	0x000009a1
     ee8:	00000b71 	.word	0x00000b71
     eec:	20000180 	.word	0x20000180
     ef0:	00006169 	.word	0x00006169
     ef4:	00006331 	.word	0x00006331
     ef8:	00005508 	.word	0x00005508
     efc:	00001110 	.word	0x00001110
     f00:	00000aed 	.word	0x00000aed
     f04:	00000975 	.word	0x00000975
     f08:	00006349 	.word	0x00006349
     f0c:	0000053a 	.word	0x0000053a
     f10:	00001bef 	.word	0x00001bef
     f14:	00001101 	.word	0x00001101
     f18:	0000113b 	.word	0x0000113b
     f1c:	00000b25 	.word	0x00000b25
     f20:	000081ec 	.word	0x000081ec
     f24:	00008208 	.word	0x00008208
     f28:	00001137 	.word	0x00001137
     f2c:	00081133 	.word	0x00081133
     f30:	000061a1 	.word	0x000061a1
     f34:	000063cd 	.word	0x000063cd
     f38:	00006459 	.word	0x00006459
     f3c:	000081ac 	.word	0x000081ac
     f40:	00000fff 	.word	0x00000fff
     f44:	00081108 	.word	0x00081108
     f48:	00006355 	.word	0x00006355
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     f4c:	2322      	movs	r3, #34	; 0x22
     f4e:	7413      	strb	r3, [r2, #16]
     f50:	e760      	b.n	e14 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     f52:	2330      	movs	r3, #48	; 0x30
     f54:	7413      	strb	r3, [r2, #16]
     f56:	e75d      	b.n	e14 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     f58:	a806      	add	r0, sp, #24
     f5a:	4b36      	ldr	r3, [pc, #216]	; (1034 <sd_mmc_check+0x488>)
     f5c:	4798      	blx	r3
     f5e:	2800      	cmp	r0, #0
     f60:	d100      	bne.n	f64 <sd_mmc_check+0x3b8>
     f62:	e643      	b.n	bec <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     f64:	3501      	adds	r5, #1
     f66:	b2ad      	uxth	r5, r5
     f68:	2d7f      	cmp	r5, #127	; 0x7f
     f6a:	d9f5      	bls.n	f58 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     f6c:	2180      	movs	r1, #128	; 0x80
     f6e:	0089      	lsls	r1, r1, #2
     f70:	4831      	ldr	r0, [pc, #196]	; (1038 <sd_mmc_check+0x48c>)
     f72:	4b32      	ldr	r3, [pc, #200]	; (103c <sd_mmc_check+0x490>)
     f74:	4798      	blx	r3
     f76:	2800      	cmp	r0, #0
     f78:	d100      	bne.n	f7c <sd_mmc_check+0x3d0>
     f7a:	e637      	b.n	bec <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     f7c:	4b30      	ldr	r3, [pc, #192]	; (1040 <sd_mmc_check+0x494>)
     f7e:	4798      	blx	r3
     f80:	2800      	cmp	r0, #0
     f82:	d100      	bne.n	f86 <sd_mmc_check+0x3da>
     f84:	e632      	b.n	bec <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     f86:	4b2f      	ldr	r3, [pc, #188]	; (1044 <sd_mmc_check+0x498>)
     f88:	4798      	blx	r3
     f8a:	e65e      	b.n	c4a <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     f8c:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     f8e:	7e93      	ldrb	r3, [r2, #26]
     f90:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     f92:	7e51      	ldrb	r1, [r2, #25]
     f94:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     f96:	430b      	orrs	r3, r1
     f98:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     f9a:	029b      	lsls	r3, r3, #10
				* 512;
     f9c:	085b      	lsrs	r3, r3, #1
     f9e:	2180      	movs	r1, #128	; 0x80
     fa0:	0089      	lsls	r1, r1, #2
     fa2:	468c      	mov	ip, r1
     fa4:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     fa6:	6053      	str	r3, [r2, #4]
     fa8:	e6cd      	b.n	d46 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     faa:	4b27      	ldr	r3, [pc, #156]	; (1048 <sd_mmc_check+0x49c>)
     fac:	681b      	ldr	r3, [r3, #0]
     fae:	2210      	movs	r2, #16
     fb0:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     fb2:	4b25      	ldr	r3, [pc, #148]	; (1048 <sd_mmc_check+0x49c>)
     fb4:	681b      	ldr	r3, [r3, #0]
     fb6:	7bdb      	ldrb	r3, [r3, #15]
     fb8:	2209      	movs	r2, #9
     fba:	4013      	ands	r3, r2
     fbc:	2b01      	cmp	r3, #1
     fbe:	d000      	beq.n	fc2 <sd_mmc_check+0x416>
     fc0:	e638      	b.n	c34 <sd_mmc_check+0x88>
     fc2:	e630      	b.n	c26 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     fc4:	4b20      	ldr	r3, [pc, #128]	; (1048 <sd_mmc_check+0x49c>)
     fc6:	681b      	ldr	r3, [r3, #0]
     fc8:	221a      	movs	r2, #26
     fca:	741a      	strb	r2, [r3, #16]
     fcc:	e7f1      	b.n	fb2 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     fce:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     fd0:	789b      	ldrb	r3, [r3, #2]
     fd2:	09db      	lsrs	r3, r3, #7
     fd4:	2b01      	cmp	r3, #1
     fd6:	d104      	bne.n	fe2 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     fd8:	4b1b      	ldr	r3, [pc, #108]	; (1048 <sd_mmc_check+0x49c>)
     fda:	681b      	ldr	r3, [r3, #0]
     fdc:	2230      	movs	r2, #48	; 0x30
     fde:	741a      	strb	r2, [r3, #16]
     fe0:	e7e7      	b.n	fb2 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     fe2:	4b19      	ldr	r3, [pc, #100]	; (1048 <sd_mmc_check+0x49c>)
     fe4:	681b      	ldr	r3, [r3, #0]
     fe6:	2220      	movs	r2, #32
     fe8:	741a      	strb	r2, [r3, #16]
     fea:	e7e2      	b.n	fb2 <sd_mmc_check+0x406>
	*v2 = 0;
     fec:	2600      	movs	r6, #0
     fee:	e60d      	b.n	c0c <sd_mmc_check+0x60>
     ff0:	1e73      	subs	r3, r6, #1
     ff2:	419e      	sbcs	r6, r3
     ff4:	07b3      	lsls	r3, r6, #30
     ff6:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     ff8:	4d14      	ldr	r5, [pc, #80]	; (104c <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     ffa:	4f10      	ldr	r7, [pc, #64]	; (103c <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     ffc:	46b8      	mov	r8, r7
		resp = driver_get_response();
     ffe:	4e14      	ldr	r6, [pc, #80]	; (1050 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    1000:	2100      	movs	r1, #0
    1002:	4814      	ldr	r0, [pc, #80]	; (1054 <sd_mmc_check+0x4a8>)
    1004:	47b8      	blx	r7
    1006:	2800      	cmp	r0, #0
    1008:	d100      	bne.n	100c <sd_mmc_check+0x460>
    100a:	e638      	b.n	c7e <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    100c:	9903      	ldr	r1, [sp, #12]
    100e:	4812      	ldr	r0, [pc, #72]	; (1058 <sd_mmc_check+0x4ac>)
    1010:	47c0      	blx	r8
    1012:	2800      	cmp	r0, #0
    1014:	d100      	bne.n	1018 <sd_mmc_check+0x46c>
    1016:	e632      	b.n	c7e <sd_mmc_check+0xd2>
		resp = driver_get_response();
    1018:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    101a:	07c3      	lsls	r3, r0, #31
    101c:	d400      	bmi.n	1020 <sd_mmc_check+0x474>
    101e:	e628      	b.n	c72 <sd_mmc_check+0xc6>
    1020:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    1022:	2d00      	cmp	r5, #0
    1024:	d1ec      	bne.n	1000 <sd_mmc_check+0x454>
    1026:	e62a      	b.n	c7e <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1028:	2209      	movs	r2, #9
    102a:	4013      	ands	r3, r2
    102c:	2b01      	cmp	r3, #1
    102e:	d000      	beq.n	1032 <sd_mmc_check+0x486>
    1030:	e609      	b.n	c46 <sd_mmc_check+0x9a>
    1032:	e5f8      	b.n	c26 <sd_mmc_check+0x7a>
    1034:	00006355 	.word	0x00006355
    1038:	00001110 	.word	0x00001110
    103c:	00006331 	.word	0x00006331
    1040:	00000aed 	.word	0x00000aed
    1044:	00000975 	.word	0x00000975
    1048:	20000180 	.word	0x20000180
    104c:	00001bef 	.word	0x00001bef
    1050:	00006349 	.word	0x00006349
    1054:	00001137 	.word	0x00001137
    1058:	00001129 	.word	0x00001129

0000105c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    105c:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    105e:	4b06      	ldr	r3, [pc, #24]	; (1078 <sd_mmc_get_type+0x1c>)
    1060:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
    1062:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1064:	2800      	cmp	r0, #0
    1066:	d001      	beq.n	106c <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    1068:	0018      	movs	r0, r3
    106a:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    106c:	4b03      	ldr	r3, [pc, #12]	; (107c <sd_mmc_get_type+0x20>)
    106e:	4798      	blx	r3
	return sd_mmc_card->type;
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <sd_mmc_get_type+0x24>)
    1072:	681b      	ldr	r3, [r3, #0]
    1074:	7bdb      	ldrb	r3, [r3, #15]
    1076:	e7f7      	b.n	1068 <sd_mmc_get_type+0xc>
    1078:	000009a1 	.word	0x000009a1
    107c:	00000b71 	.word	0x00000b71
    1080:	20000180 	.word	0x20000180

00001084 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    1084:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1086:	4b06      	ldr	r3, [pc, #24]	; (10a0 <sd_mmc_get_capacity+0x1c>)
    1088:	4798      	blx	r3
		return 0;
    108a:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    108c:	2800      	cmp	r0, #0
    108e:	d001      	beq.n	1094 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    1090:	0018      	movs	r0, r3
    1092:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    1094:	4b03      	ldr	r3, [pc, #12]	; (10a4 <sd_mmc_get_capacity+0x20>)
    1096:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1098:	4b03      	ldr	r3, [pc, #12]	; (10a8 <sd_mmc_get_capacity+0x24>)
    109a:	681b      	ldr	r3, [r3, #0]
    109c:	685b      	ldr	r3, [r3, #4]
    109e:	e7f7      	b.n	1090 <sd_mmc_get_capacity+0xc>
    10a0:	000009a1 	.word	0x000009a1
    10a4:	00000b71 	.word	0x00000b71
    10a8:	20000180 	.word	0x20000180

000010ac <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    10ac:	2000      	movs	r0, #0
    10ae:	4770      	bx	lr

000010b0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    10b0:	b570      	push	{r4, r5, r6, lr}
    10b2:	b082      	sub	sp, #8
    10b4:	000e      	movs	r6, r1
    10b6:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    10b8:	4b16      	ldr	r3, [pc, #88]	; (1114 <sd_mmc_init_read_blocks+0x64>)
    10ba:	4798      	blx	r3
    10bc:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    10be:	d002      	beq.n	10c6 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    10c0:	0020      	movs	r0, r4
    10c2:	b002      	add	sp, #8
    10c4:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    10c6:	4b14      	ldr	r3, [pc, #80]	; (1118 <sd_mmc_init_read_blocks+0x68>)
    10c8:	4798      	blx	r3
    10ca:	2800      	cmp	r0, #0
    10cc:	d017      	beq.n	10fe <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    10ce:	2d01      	cmp	r5, #1
    10d0:	d919      	bls.n	1106 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    10d2:	4812      	ldr	r0, [pc, #72]	; (111c <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    10d4:	4b12      	ldr	r3, [pc, #72]	; (1120 <sd_mmc_init_read_blocks+0x70>)
    10d6:	681b      	ldr	r3, [r3, #0]
    10d8:	7bdb      	ldrb	r3, [r3, #15]
    10da:	071b      	lsls	r3, r3, #28
    10dc:	d400      	bmi.n	10e0 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    10de:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    10e0:	2301      	movs	r3, #1
    10e2:	9300      	str	r3, [sp, #0]
    10e4:	002b      	movs	r3, r5
    10e6:	2280      	movs	r2, #128	; 0x80
    10e8:	0092      	lsls	r2, r2, #2
    10ea:	0031      	movs	r1, r6
    10ec:	4e0d      	ldr	r6, [pc, #52]	; (1124 <sd_mmc_init_read_blocks+0x74>)
    10ee:	47b0      	blx	r6
    10f0:	2800      	cmp	r0, #0
    10f2:	d00a      	beq.n	110a <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    10f4:	4b0c      	ldr	r3, [pc, #48]	; (1128 <sd_mmc_init_read_blocks+0x78>)
    10f6:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    10f8:	4b0c      	ldr	r3, [pc, #48]	; (112c <sd_mmc_init_read_blocks+0x7c>)
    10fa:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    10fc:	e7e0      	b.n	10c0 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    10fe:	4b0c      	ldr	r3, [pc, #48]	; (1130 <sd_mmc_init_read_blocks+0x80>)
    1100:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1102:	3405      	adds	r4, #5
    1104:	e7dc      	b.n	10c0 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    1106:	480b      	ldr	r0, [pc, #44]	; (1134 <sd_mmc_init_read_blocks+0x84>)
    1108:	e7e4      	b.n	10d4 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    110a:	4b09      	ldr	r3, [pc, #36]	; (1130 <sd_mmc_init_read_blocks+0x80>)
    110c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    110e:	2405      	movs	r4, #5
    1110:	e7d6      	b.n	10c0 <sd_mmc_init_read_blocks+0x10>
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	000009a1 	.word	0x000009a1
    1118:	00000aed 	.word	0x00000aed
    111c:	00101112 	.word	0x00101112
    1120:	20000180 	.word	0x20000180
    1124:	000061a1 	.word	0x000061a1
    1128:	20000184 	.word	0x20000184
    112c:	20000186 	.word	0x20000186
    1130:	00000b71 	.word	0x00000b71
    1134:	00081111 	.word	0x00081111

00001138 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    1138:	b510      	push	{r4, lr}
    113a:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    113c:	4b07      	ldr	r3, [pc, #28]	; (115c <sd_mmc_start_read_blocks+0x24>)
    113e:	4798      	blx	r3
    1140:	2800      	cmp	r0, #0
    1142:	d104      	bne.n	114e <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    1144:	2200      	movs	r2, #0
    1146:	4b06      	ldr	r3, [pc, #24]	; (1160 <sd_mmc_start_read_blocks+0x28>)
    1148:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    114a:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    114c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    114e:	4a04      	ldr	r2, [pc, #16]	; (1160 <sd_mmc_start_read_blocks+0x28>)
    1150:	8813      	ldrh	r3, [r2, #0]
    1152:	1b1c      	subs	r4, r3, r4
    1154:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    1156:	2000      	movs	r0, #0
    1158:	e7f8      	b.n	114c <sd_mmc_start_read_blocks+0x14>
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	000063cd 	.word	0x000063cd
    1160:	20000184 	.word	0x20000184

00001164 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    1164:	b510      	push	{r4, lr}
    1166:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    1168:	4b14      	ldr	r3, [pc, #80]	; (11bc <sd_mmc_wait_end_of_read_blocks+0x58>)
    116a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    116c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    116e:	2800      	cmp	r0, #0
    1170:	d101      	bne.n	1176 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    1172:	0018      	movs	r0, r3
    1174:	bd10      	pop	{r4, pc}
	if (abort) {
    1176:	2c00      	cmp	r4, #0
    1178:	d010      	beq.n	119c <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    117a:	2200      	movs	r2, #0
    117c:	4b10      	ldr	r3, [pc, #64]	; (11c0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    117e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1180:	4b10      	ldr	r3, [pc, #64]	; (11c4 <sd_mmc_wait_end_of_read_blocks+0x60>)
    1182:	881b      	ldrh	r3, [r3, #0]
    1184:	2b01      	cmp	r3, #1
    1186:	d00f      	beq.n	11a8 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1188:	2100      	movs	r1, #0
    118a:	480f      	ldr	r0, [pc, #60]	; (11c8 <sd_mmc_wait_end_of_read_blocks+0x64>)
    118c:	4b0f      	ldr	r3, [pc, #60]	; (11cc <sd_mmc_wait_end_of_read_blocks+0x68>)
    118e:	4798      	blx	r3
    1190:	2800      	cmp	r0, #0
    1192:	d00d      	beq.n	11b0 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    1194:	4b0e      	ldr	r3, [pc, #56]	; (11d0 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    1196:	4798      	blx	r3
	return SD_MMC_OK;
    1198:	2300      	movs	r3, #0
    119a:	e7ea      	b.n	1172 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    119c:	4b08      	ldr	r3, [pc, #32]	; (11c0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    119e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    11a0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    11a2:	2a00      	cmp	r2, #0
    11a4:	d0ec      	beq.n	1180 <sd_mmc_wait_end_of_read_blocks+0x1c>
    11a6:	e7e4      	b.n	1172 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    11a8:	4b09      	ldr	r3, [pc, #36]	; (11d0 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    11aa:	4798      	blx	r3
		return SD_MMC_OK;
    11ac:	2300      	movs	r3, #0
    11ae:	e7e0      	b.n	1172 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    11b0:	2100      	movs	r1, #0
    11b2:	4805      	ldr	r0, [pc, #20]	; (11c8 <sd_mmc_wait_end_of_read_blocks+0x64>)
    11b4:	4b05      	ldr	r3, [pc, #20]	; (11cc <sd_mmc_wait_end_of_read_blocks+0x68>)
    11b6:	4798      	blx	r3
    11b8:	e7ec      	b.n	1194 <sd_mmc_wait_end_of_read_blocks+0x30>
    11ba:	46c0      	nop			; (mov r8, r8)
    11bc:	00006459 	.word	0x00006459
    11c0:	20000184 	.word	0x20000184
    11c4:	20000186 	.word	0x20000186
    11c8:	0000310c 	.word	0x0000310c
    11cc:	00006331 	.word	0x00006331
    11d0:	00000b71 	.word	0x00000b71

000011d4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    11d4:	b570      	push	{r4, r5, r6, lr}
    11d6:	b082      	sub	sp, #8
    11d8:	000e      	movs	r6, r1
    11da:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    11dc:	4b11      	ldr	r3, [pc, #68]	; (1224 <sd_mmc_init_write_blocks+0x50>)
    11de:	4798      	blx	r3
    11e0:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    11e2:	d116      	bne.n	1212 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    11e4:	2d01      	cmp	r5, #1
    11e6:	d917      	bls.n	1218 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    11e8:	480f      	ldr	r0, [pc, #60]	; (1228 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    11ea:	4b10      	ldr	r3, [pc, #64]	; (122c <sd_mmc_init_write_blocks+0x58>)
    11ec:	681b      	ldr	r3, [r3, #0]
    11ee:	7bdb      	ldrb	r3, [r3, #15]
    11f0:	071b      	lsls	r3, r3, #28
    11f2:	d400      	bmi.n	11f6 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    11f4:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    11f6:	2301      	movs	r3, #1
    11f8:	9300      	str	r3, [sp, #0]
    11fa:	002b      	movs	r3, r5
    11fc:	2280      	movs	r2, #128	; 0x80
    11fe:	0092      	lsls	r2, r2, #2
    1200:	0031      	movs	r1, r6
    1202:	4e0b      	ldr	r6, [pc, #44]	; (1230 <sd_mmc_init_write_blocks+0x5c>)
    1204:	47b0      	blx	r6
    1206:	2800      	cmp	r0, #0
    1208:	d008      	beq.n	121c <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    120a:	4b0a      	ldr	r3, [pc, #40]	; (1234 <sd_mmc_init_write_blocks+0x60>)
    120c:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    120e:	4b0a      	ldr	r3, [pc, #40]	; (1238 <sd_mmc_init_write_blocks+0x64>)
    1210:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    1212:	0020      	movs	r0, r4
    1214:	b002      	add	sp, #8
    1216:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    1218:	4808      	ldr	r0, [pc, #32]	; (123c <sd_mmc_init_write_blocks+0x68>)
    121a:	e7e6      	b.n	11ea <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    121c:	4b08      	ldr	r3, [pc, #32]	; (1240 <sd_mmc_init_write_blocks+0x6c>)
    121e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1220:	2405      	movs	r4, #5
    1222:	e7f6      	b.n	1212 <sd_mmc_init_write_blocks+0x3e>
    1224:	000009a1 	.word	0x000009a1
    1228:	00109119 	.word	0x00109119
    122c:	20000180 	.word	0x20000180
    1230:	000061a1 	.word	0x000061a1
    1234:	20000184 	.word	0x20000184
    1238:	20000186 	.word	0x20000186
    123c:	00089118 	.word	0x00089118
    1240:	00000b71 	.word	0x00000b71

00001244 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    1244:	b510      	push	{r4, lr}
    1246:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    1248:	4b07      	ldr	r3, [pc, #28]	; (1268 <sd_mmc_start_write_blocks+0x24>)
    124a:	4798      	blx	r3
    124c:	2800      	cmp	r0, #0
    124e:	d104      	bne.n	125a <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    1250:	2200      	movs	r2, #0
    1252:	4b06      	ldr	r3, [pc, #24]	; (126c <sd_mmc_start_write_blocks+0x28>)
    1254:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1256:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    1258:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    125a:	4a04      	ldr	r2, [pc, #16]	; (126c <sd_mmc_start_write_blocks+0x28>)
    125c:	8813      	ldrh	r3, [r2, #0]
    125e:	1b1c      	subs	r4, r3, r4
    1260:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    1262:	2000      	movs	r0, #0
    1264:	e7f8      	b.n	1258 <sd_mmc_start_write_blocks+0x14>
    1266:	46c0      	nop			; (mov r8, r8)
    1268:	0000645d 	.word	0x0000645d
    126c:	20000184 	.word	0x20000184

00001270 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    1270:	b510      	push	{r4, lr}
    1272:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    1274:	4b0e      	ldr	r3, [pc, #56]	; (12b0 <sd_mmc_wait_end_of_write_blocks+0x40>)
    1276:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1278:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    127a:	2800      	cmp	r0, #0
    127c:	d101      	bne.n	1282 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    127e:	0018      	movs	r0, r3
    1280:	bd10      	pop	{r4, pc}
	if (abort) {
    1282:	2c00      	cmp	r4, #0
    1284:	d00a      	beq.n	129c <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    1286:	2200      	movs	r2, #0
    1288:	4b0a      	ldr	r3, [pc, #40]	; (12b4 <sd_mmc_wait_end_of_write_blocks+0x44>)
    128a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    128c:	4b0a      	ldr	r3, [pc, #40]	; (12b8 <sd_mmc_wait_end_of_write_blocks+0x48>)
    128e:	881b      	ldrh	r3, [r3, #0]
    1290:	2b01      	cmp	r3, #1
    1292:	d009      	beq.n	12a8 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    1294:	4b09      	ldr	r3, [pc, #36]	; (12bc <sd_mmc_wait_end_of_write_blocks+0x4c>)
    1296:	4798      	blx	r3
	return SD_MMC_OK;
    1298:	2300      	movs	r3, #0
    129a:	e7f0      	b.n	127e <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    129c:	4b05      	ldr	r3, [pc, #20]	; (12b4 <sd_mmc_wait_end_of_write_blocks+0x44>)
    129e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    12a0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    12a2:	2a00      	cmp	r2, #0
    12a4:	d0f2      	beq.n	128c <sd_mmc_wait_end_of_write_blocks+0x1c>
    12a6:	e7ea      	b.n	127e <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    12a8:	4b04      	ldr	r3, [pc, #16]	; (12bc <sd_mmc_wait_end_of_write_blocks+0x4c>)
    12aa:	4798      	blx	r3
		return SD_MMC_OK;
    12ac:	2300      	movs	r3, #0
    12ae:	e7e6      	b.n	127e <sd_mmc_wait_end_of_write_blocks+0xe>
    12b0:	000064dd 	.word	0x000064dd
    12b4:	20000184 	.word	0x20000184
    12b8:	20000186 	.word	0x20000186
    12bc:	00000b71 	.word	0x00000b71

000012c0 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
    12c0:	2000      	movs	r0, #0
    12c2:	4770      	bx	lr

000012c4 <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
    12c4:	1e43      	subs	r3, r0, #1
    12c6:	4198      	sbcs	r0, r3
    12c8:	b2c0      	uxtb	r0, r0
    12ca:	4b03      	ldr	r3, [pc, #12]	; (12d8 <udi_msc_trans_ack+0x14>)
    12cc:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
    12ce:	2201      	movs	r2, #1
    12d0:	4b02      	ldr	r3, [pc, #8]	; (12dc <udi_msc_trans_ack+0x18>)
    12d2:	701a      	strb	r2, [r3, #0]
}
    12d4:	4770      	bx	lr
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	200003c4 	.word	0x200003c4
    12dc:	20000044 	.word	0x20000044

000012e0 <udi_msc_cbw_wait>:
{
    12e0:	b510      	push	{r4, lr}
    12e2:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    12e4:	4b08      	ldr	r3, [pc, #32]	; (1308 <udi_msc_cbw_wait+0x28>)
    12e6:	9300      	str	r3, [sp, #0]
    12e8:	231f      	movs	r3, #31
    12ea:	4a08      	ldr	r2, [pc, #32]	; (130c <udi_msc_cbw_wait+0x2c>)
    12ec:	2101      	movs	r1, #1
    12ee:	2002      	movs	r0, #2
    12f0:	4c07      	ldr	r4, [pc, #28]	; (1310 <udi_msc_cbw_wait+0x30>)
    12f2:	47a0      	blx	r4
    12f4:	2800      	cmp	r0, #0
    12f6:	d001      	beq.n	12fc <udi_msc_cbw_wait+0x1c>
}
    12f8:	b002      	add	sp, #8
    12fa:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
    12fc:	4905      	ldr	r1, [pc, #20]	; (1314 <udi_msc_cbw_wait+0x34>)
    12fe:	3002      	adds	r0, #2
    1300:	4b05      	ldr	r3, [pc, #20]	; (1318 <udi_msc_cbw_wait+0x38>)
    1302:	4798      	blx	r3
}
    1304:	e7f8      	b.n	12f8 <udi_msc_cbw_wait+0x18>
    1306:	46c0      	nop			; (mov r8, r8)
    1308:	00001705 	.word	0x00001705
    130c:	200001b0 	.word	0x200001b0
    1310:	0000374d 	.word	0x0000374d
    1314:	000012e1 	.word	0x000012e1
    1318:	000036f5 	.word	0x000036f5

0000131c <udi_msc_enable>:
{
    131c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_msc_b_trans_req = false;
    131e:	2300      	movs	r3, #0
    1320:	4a13      	ldr	r2, [pc, #76]	; (1370 <udi_msc_enable+0x54>)
    1322:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
    1324:	4a13      	ldr	r2, [pc, #76]	; (1374 <udi_msc_enable+0x58>)
    1326:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
    1328:	3301      	adds	r3, #1
    132a:	4a13      	ldr	r2, [pc, #76]	; (1378 <udi_msc_enable+0x5c>)
    132c:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    132e:	4a13      	ldr	r2, [pc, #76]	; (137c <udi_msc_enable+0x60>)
    1330:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
    1332:	4b13      	ldr	r3, [pc, #76]	; (1380 <udi_msc_enable+0x64>)
    1334:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
    1336:	2800      	cmp	r0, #0
    1338:	d105      	bne.n	1346 <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
    133a:	2200      	movs	r2, #0
    133c:	4b11      	ldr	r3, [pc, #68]	; (1384 <udi_msc_enable+0x68>)
    133e:	701a      	strb	r2, [r3, #0]
		return false; // No lun available, then not authorize to enable interface
    1340:	2500      	movs	r5, #0
}
    1342:	0028      	movs	r0, r5
    1344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_nb_lun--;
    1346:	3801      	subs	r0, #1
    1348:	4b0e      	ldr	r3, [pc, #56]	; (1384 <udi_msc_enable+0x68>)
    134a:	7018      	strb	r0, [r3, #0]
	if (!UDI_MSC_ENABLE_EXT())
    134c:	4b0e      	ldr	r3, [pc, #56]	; (1388 <udi_msc_enable+0x6c>)
    134e:	4798      	blx	r3
    1350:	1e05      	subs	r5, r0, #0
    1352:	d0f6      	beq.n	1342 <udi_msc_enable+0x26>
    1354:	2400      	movs	r4, #0
		mem_unload(lun, false);
    1356:	4f0d      	ldr	r7, [pc, #52]	; (138c <udi_msc_enable+0x70>)
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    1358:	4e0a      	ldr	r6, [pc, #40]	; (1384 <udi_msc_enable+0x68>)
		mem_unload(lun, false);
    135a:	2100      	movs	r1, #0
    135c:	0020      	movs	r0, r4
    135e:	47b8      	blx	r7
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    1360:	3401      	adds	r4, #1
    1362:	b2e4      	uxtb	r4, r4
    1364:	7833      	ldrb	r3, [r6, #0]
    1366:	42a3      	cmp	r3, r4
    1368:	d2f7      	bcs.n	135a <udi_msc_enable+0x3e>
	udi_msc_cbw_wait();
    136a:	4b09      	ldr	r3, [pc, #36]	; (1390 <udi_msc_enable+0x74>)
    136c:	4798      	blx	r3
	return true;
    136e:	e7e8      	b.n	1342 <udi_msc_enable+0x26>
    1370:	200001a6 	.word	0x200001a6
    1374:	200001a4 	.word	0x200001a4
    1378:	20000044 	.word	0x20000044
    137c:	20000045 	.word	0x20000045
    1380:	00006501 	.word	0x00006501
    1384:	200001d4 	.word	0x200001d4
    1388:	00003cc1 	.word	0x00003cc1
    138c:	00006539 	.word	0x00006539
    1390:	000012e1 	.word	0x000012e1

00001394 <udi_msc_csw_sent>:
{
    1394:	b510      	push	{r4, lr}
	udi_msc_cbw_wait();
    1396:	4b01      	ldr	r3, [pc, #4]	; (139c <udi_msc_csw_sent+0x8>)
    1398:	4798      	blx	r3
}
    139a:	bd10      	pop	{r4, pc}
    139c:	000012e1 	.word	0x000012e1

000013a0 <udi_msc_csw_send>:
{
    13a0:	b510      	push	{r4, lr}
    13a2:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    13a4:	4b08      	ldr	r3, [pc, #32]	; (13c8 <udi_msc_csw_send+0x28>)
    13a6:	9300      	str	r3, [sp, #0]
    13a8:	230d      	movs	r3, #13
    13aa:	4a08      	ldr	r2, [pc, #32]	; (13cc <udi_msc_csw_send+0x2c>)
    13ac:	2100      	movs	r1, #0
    13ae:	2081      	movs	r0, #129	; 0x81
    13b0:	4c07      	ldr	r4, [pc, #28]	; (13d0 <udi_msc_csw_send+0x30>)
    13b2:	47a0      	blx	r4
    13b4:	2800      	cmp	r0, #0
    13b6:	d001      	beq.n	13bc <udi_msc_csw_send+0x1c>
}
    13b8:	b002      	add	sp, #8
    13ba:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    13bc:	4905      	ldr	r1, [pc, #20]	; (13d4 <udi_msc_csw_send+0x34>)
    13be:	3081      	adds	r0, #129	; 0x81
    13c0:	4b05      	ldr	r3, [pc, #20]	; (13d8 <udi_msc_csw_send+0x38>)
    13c2:	4798      	blx	r3
}
    13c4:	e7f8      	b.n	13b8 <udi_msc_csw_send+0x18>
    13c6:	46c0      	nop			; (mov r8, r8)
    13c8:	00001395 	.word	0x00001395
    13cc:	20000048 	.word	0x20000048
    13d0:	0000374d 	.word	0x0000374d
    13d4:	000013a1 	.word	0x000013a1
    13d8:	000036f5 	.word	0x000036f5

000013dc <udi_msc_cbw_invalid>:
{
    13dc:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    13de:	4b06      	ldr	r3, [pc, #24]	; (13f8 <udi_msc_cbw_invalid+0x1c>)
    13e0:	781b      	ldrb	r3, [r3, #0]
    13e2:	2b00      	cmp	r3, #0
    13e4:	d100      	bne.n	13e8 <udi_msc_cbw_invalid+0xc>
}
    13e6:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_OUT);
    13e8:	2002      	movs	r0, #2
    13ea:	4b04      	ldr	r3, [pc, #16]	; (13fc <udi_msc_cbw_invalid+0x20>)
    13ec:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
    13ee:	4904      	ldr	r1, [pc, #16]	; (1400 <udi_msc_cbw_invalid+0x24>)
    13f0:	2002      	movs	r0, #2
    13f2:	4b04      	ldr	r3, [pc, #16]	; (1404 <udi_msc_cbw_invalid+0x28>)
    13f4:	4798      	blx	r3
    13f6:	e7f6      	b.n	13e6 <udi_msc_cbw_invalid+0xa>
    13f8:	200001a4 	.word	0x200001a4
    13fc:	00003581 	.word	0x00003581
    1400:	000013dd 	.word	0x000013dd
    1404:	000036f5 	.word	0x000036f5

00001408 <udi_msc_csw_invalid>:
{
    1408:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    140a:	4b06      	ldr	r3, [pc, #24]	; (1424 <udi_msc_csw_invalid+0x1c>)
    140c:	781b      	ldrb	r3, [r3, #0]
    140e:	2b00      	cmp	r3, #0
    1410:	d100      	bne.n	1414 <udi_msc_csw_invalid+0xc>
}
    1412:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_IN);
    1414:	2081      	movs	r0, #129	; 0x81
    1416:	4b04      	ldr	r3, [pc, #16]	; (1428 <udi_msc_csw_invalid+0x20>)
    1418:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
    141a:	4904      	ldr	r1, [pc, #16]	; (142c <udi_msc_csw_invalid+0x24>)
    141c:	2081      	movs	r0, #129	; 0x81
    141e:	4b04      	ldr	r3, [pc, #16]	; (1430 <udi_msc_csw_invalid+0x28>)
    1420:	4798      	blx	r3
    1422:	e7f6      	b.n	1412 <udi_msc_csw_invalid+0xa>
    1424:	200001a4 	.word	0x200001a4
    1428:	00003581 	.word	0x00003581
    142c:	00001409 	.word	0x00001409
    1430:	000036f5 	.word	0x000036f5

00001434 <udi_msc_csw_process>:
{
    1434:	b510      	push	{r4, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
    1436:	4b0b      	ldr	r3, [pc, #44]	; (1464 <udi_msc_csw_process+0x30>)
    1438:	689b      	ldr	r3, [r3, #8]
    143a:	2b00      	cmp	r3, #0
    143c:	d006      	beq.n	144c <udi_msc_csw_process+0x18>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    143e:	4b0a      	ldr	r3, [pc, #40]	; (1468 <udi_msc_csw_process+0x34>)
    1440:	7b1b      	ldrb	r3, [r3, #12]
    1442:	2b7f      	cmp	r3, #127	; 0x7f
    1444:	d809      	bhi.n	145a <udi_msc_csw_process+0x26>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    1446:	2002      	movs	r0, #2
    1448:	4b08      	ldr	r3, [pc, #32]	; (146c <udi_msc_csw_process+0x38>)
    144a:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    144c:	4b06      	ldr	r3, [pc, #24]	; (1468 <udi_msc_csw_process+0x34>)
    144e:	685a      	ldr	r2, [r3, #4]
    1450:	4b04      	ldr	r3, [pc, #16]	; (1464 <udi_msc_csw_process+0x30>)
    1452:	605a      	str	r2, [r3, #4]
	udi_msc_csw_send();
    1454:	4b06      	ldr	r3, [pc, #24]	; (1470 <udi_msc_csw_process+0x3c>)
    1456:	4798      	blx	r3
}
    1458:	bd10      	pop	{r4, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
    145a:	2081      	movs	r0, #129	; 0x81
    145c:	4b03      	ldr	r3, [pc, #12]	; (146c <udi_msc_csw_process+0x38>)
    145e:	4798      	blx	r3
    1460:	e7f4      	b.n	144c <udi_msc_csw_process+0x18>
    1462:	46c0      	nop			; (mov r8, r8)
    1464:	20000048 	.word	0x20000048
    1468:	200001b0 	.word	0x200001b0
    146c:	00003581 	.word	0x00003581
    1470:	000013a1 	.word	0x000013a1

00001474 <udi_msc_clear_sense>:
{
    1474:	b510      	push	{r4, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    1476:	4c05      	ldr	r4, [pc, #20]	; (148c <udi_msc_clear_sense+0x18>)
    1478:	2212      	movs	r2, #18
    147a:	2100      	movs	r1, #0
    147c:	0020      	movs	r0, r4
    147e:	4b04      	ldr	r3, [pc, #16]	; (1490 <udi_msc_clear_sense+0x1c>)
    1480:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    1482:	23f0      	movs	r3, #240	; 0xf0
    1484:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    1486:	3be6      	subs	r3, #230	; 0xe6
    1488:	71e3      	strb	r3, [r4, #7]
}
    148a:	bd10      	pop	{r4, pc}
    148c:	200001d8 	.word	0x200001d8
    1490:	0000715f 	.word	0x0000715f

00001494 <udi_msc_sense_fail>:
{
    1494:	b570      	push	{r4, r5, r6, lr}
    1496:	0006      	movs	r6, r0
    1498:	000d      	movs	r5, r1
    149a:	0014      	movs	r4, r2
	udi_msc_clear_sense();
    149c:	4b08      	ldr	r3, [pc, #32]	; (14c0 <udi_msc_sense_fail+0x2c>)
    149e:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    14a0:	2201      	movs	r2, #1
    14a2:	4b08      	ldr	r3, [pc, #32]	; (14c4 <udi_msc_sense_fail+0x30>)
    14a4:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    14a6:	4b08      	ldr	r3, [pc, #32]	; (14c8 <udi_msc_sense_fail+0x34>)
    14a8:	709e      	strb	r6, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
    14aa:	0e22      	lsrs	r2, r4, #24
    14ac:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
    14ae:	0c22      	lsrs	r2, r4, #16
    14b0:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
    14b2:	0a22      	lsrs	r2, r4, #8
    14b4:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
    14b6:	719c      	strb	r4, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    14b8:	0a2a      	lsrs	r2, r5, #8
    14ba:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
    14bc:	735d      	strb	r5, [r3, #13]
}
    14be:	bd70      	pop	{r4, r5, r6, pc}
    14c0:	00001475 	.word	0x00001475
    14c4:	20000048 	.word	0x20000048
    14c8:	200001d8 	.word	0x200001d8

000014cc <udi_msc_sense_fail_cdb_invalid>:
{
    14cc:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    14ce:	2200      	movs	r2, #0
    14d0:	2190      	movs	r1, #144	; 0x90
    14d2:	0189      	lsls	r1, r1, #6
    14d4:	2005      	movs	r0, #5
    14d6:	4b01      	ldr	r3, [pc, #4]	; (14dc <udi_msc_sense_fail_cdb_invalid+0x10>)
    14d8:	4798      	blx	r3
}
    14da:	bd10      	pop	{r4, pc}
    14dc:	00001495 	.word	0x00001495

000014e0 <udi_msc_cbw_validate>:
{
    14e0:	b510      	push	{r4, lr}
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    14e2:	4b09      	ldr	r3, [pc, #36]	; (1508 <udi_msc_cbw_validate+0x28>)
    14e4:	7b1b      	ldrb	r3, [r3, #12]
    14e6:	4059      	eors	r1, r3
    14e8:	b249      	sxtb	r1, r1
    14ea:	2900      	cmp	r1, #0
    14ec:	db04      	blt.n	14f8 <udi_msc_cbw_validate+0x18>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    14ee:	4b07      	ldr	r3, [pc, #28]	; (150c <udi_msc_cbw_validate+0x2c>)
    14f0:	689a      	ldr	r2, [r3, #8]
	return true;
    14f2:	2301      	movs	r3, #1
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    14f4:	4282      	cmp	r2, r0
    14f6:	d204      	bcs.n	1502 <udi_msc_cbw_validate+0x22>
		udi_msc_sense_fail_cdb_invalid();
    14f8:	4b05      	ldr	r3, [pc, #20]	; (1510 <udi_msc_cbw_validate+0x30>)
    14fa:	4798      	blx	r3
		udi_msc_csw_process();
    14fc:	4b05      	ldr	r3, [pc, #20]	; (1514 <udi_msc_cbw_validate+0x34>)
    14fe:	4798      	blx	r3
		return false;
    1500:	2300      	movs	r3, #0
}
    1502:	0018      	movs	r0, r3
    1504:	bd10      	pop	{r4, pc}
    1506:	46c0      	nop			; (mov r8, r8)
    1508:	200001b0 	.word	0x200001b0
    150c:	20000048 	.word	0x20000048
    1510:	000014cd 	.word	0x000014cd
    1514:	00001435 	.word	0x00001435

00001518 <udi_msc_sense_fail_hardware>:
{
    1518:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    151a:	2200      	movs	r2, #0
    151c:	2100      	movs	r1, #0
    151e:	2004      	movs	r0, #4
    1520:	4b01      	ldr	r3, [pc, #4]	; (1528 <udi_msc_sense_fail_hardware+0x10>)
    1522:	4798      	blx	r3
}
    1524:	bd10      	pop	{r4, pc}
    1526:	46c0      	nop			; (mov r8, r8)
    1528:	00001495 	.word	0x00001495

0000152c <udi_msc_data_send>:
{
    152c:	b510      	push	{r4, lr}
    152e:	b082      	sub	sp, #8
    1530:	0002      	movs	r2, r0
    1532:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    1534:	4907      	ldr	r1, [pc, #28]	; (1554 <udi_msc_data_send+0x28>)
    1536:	9100      	str	r1, [sp, #0]
    1538:	2101      	movs	r1, #1
    153a:	2081      	movs	r0, #129	; 0x81
    153c:	4c06      	ldr	r4, [pc, #24]	; (1558 <udi_msc_data_send+0x2c>)
    153e:	47a0      	blx	r4
    1540:	2800      	cmp	r0, #0
    1542:	d001      	beq.n	1548 <udi_msc_data_send+0x1c>
}
    1544:	b002      	add	sp, #8
    1546:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_hardware();
    1548:	4b04      	ldr	r3, [pc, #16]	; (155c <udi_msc_data_send+0x30>)
    154a:	4798      	blx	r3
		udi_msc_csw_process();
    154c:	4b04      	ldr	r3, [pc, #16]	; (1560 <udi_msc_data_send+0x34>)
    154e:	4798      	blx	r3
}
    1550:	e7f8      	b.n	1544 <udi_msc_data_send+0x18>
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	000015a5 	.word	0x000015a5
    1558:	0000374d 	.word	0x0000374d
    155c:	00001519 	.word	0x00001519
    1560:	00001435 	.word	0x00001435

00001564 <udi_msc_sense_fail_busy_or_change>:
{
    1564:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    1566:	2200      	movs	r2, #0
    1568:	21a0      	movs	r1, #160	; 0xa0
    156a:	0189      	lsls	r1, r1, #6
    156c:	2006      	movs	r0, #6
    156e:	4b01      	ldr	r3, [pc, #4]	; (1574 <udi_msc_sense_fail_busy_or_change+0x10>)
    1570:	4798      	blx	r3
}
    1572:	bd10      	pop	{r4, pc}
    1574:	00001495 	.word	0x00001495

00001578 <udi_msc_sense_fail_not_present>:
{
    1578:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    157a:	2200      	movs	r2, #0
    157c:	21e8      	movs	r1, #232	; 0xe8
    157e:	0189      	lsls	r1, r1, #6
    1580:	2002      	movs	r0, #2
    1582:	4b01      	ldr	r3, [pc, #4]	; (1588 <udi_msc_sense_fail_not_present+0x10>)
    1584:	4798      	blx	r3
}
    1586:	bd10      	pop	{r4, pc}
    1588:	00001495 	.word	0x00001495

0000158c <udi_msc_sense_pass>:
{
    158c:	b510      	push	{r4, lr}
	udi_msc_clear_sense();
    158e:	4b03      	ldr	r3, [pc, #12]	; (159c <udi_msc_sense_pass+0x10>)
    1590:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    1592:	2200      	movs	r2, #0
    1594:	4b02      	ldr	r3, [pc, #8]	; (15a0 <udi_msc_sense_pass+0x14>)
    1596:	731a      	strb	r2, [r3, #12]
}
    1598:	bd10      	pop	{r4, pc}
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	00001475 	.word	0x00001475
    15a0:	20000048 	.word	0x20000048

000015a4 <udi_msc_data_sent>:
{
    15a4:	b510      	push	{r4, lr}
    15a6:	000c      	movs	r4, r1
	if (UDD_EP_TRANSFER_OK != status) {
    15a8:	2800      	cmp	r0, #0
    15aa:	d000      	beq.n	15ae <udi_msc_data_sent+0xa>
}
    15ac:	bd10      	pop	{r4, pc}
	udi_msc_sense_pass();
    15ae:	4b04      	ldr	r3, [pc, #16]	; (15c0 <udi_msc_data_sent+0x1c>)
    15b0:	4798      	blx	r3
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    15b2:	4b04      	ldr	r3, [pc, #16]	; (15c4 <udi_msc_data_sent+0x20>)
    15b4:	689a      	ldr	r2, [r3, #8]
    15b6:	1b14      	subs	r4, r2, r4
    15b8:	609c      	str	r4, [r3, #8]
	udi_msc_csw_process();
    15ba:	4b03      	ldr	r3, [pc, #12]	; (15c8 <udi_msc_data_sent+0x24>)
    15bc:	4798      	blx	r3
    15be:	e7f5      	b.n	15ac <udi_msc_data_sent+0x8>
    15c0:	0000158d 	.word	0x0000158d
    15c4:	20000048 	.word	0x20000048
    15c8:	00001435 	.word	0x00001435

000015cc <udi_msc_spc_mode_sense>:
{
    15cc:	b570      	push	{r4, r5, r6, lr}
    15ce:	0005      	movs	r5, r0
	memset(&sense, 0, sizeof(sense));
    15d0:	2214      	movs	r2, #20
    15d2:	2100      	movs	r1, #0
    15d4:	4823      	ldr	r0, [pc, #140]	; (1664 <udi_msc_spc_mode_sense+0x98>)
    15d6:	4b24      	ldr	r3, [pc, #144]	; (1668 <udi_msc_spc_mode_sense+0x9c>)
    15d8:	4798      	blx	r3
	if (b_sense10) {
    15da:	2d00      	cmp	r5, #0
    15dc:	d018      	beq.n	1610 <udi_msc_spc_mode_sense+0x44>
		request_lgt = udi_msc_cbw.CDB[8];
    15de:	4b23      	ldr	r3, [pc, #140]	; (166c <udi_msc_spc_mode_sense+0xa0>)
    15e0:	7dd9      	ldrb	r1, [r3, #23]
		ptr_mode = &sense.s10.sense_data;
    15e2:	4a20      	ldr	r2, [pc, #128]	; (1664 <udi_msc_spc_mode_sense+0x98>)
    15e4:	3208      	adds	r2, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    15e6:	2408      	movs	r4, #8
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    15e8:	4b20      	ldr	r3, [pc, #128]	; (166c <udi_msc_spc_mode_sense+0xa0>)
    15ea:	7c58      	ldrb	r0, [r3, #17]
    15ec:	233f      	movs	r3, #63	; 0x3f
    15ee:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
    15f0:	2b1c      	cmp	r3, #28
    15f2:	d013      	beq.n	161c <udi_msc_spc_mode_sense+0x50>
			|| (SCSI_MS_MODE_ALL == mode)) {
    15f4:	2b3f      	cmp	r3, #63	; 0x3f
    15f6:	d011      	beq.n	161c <udi_msc_spc_mode_sense+0x50>
    15f8:	1c20      	adds	r0, r4, #0
    15fa:	428c      	cmp	r4, r1
    15fc:	d900      	bls.n	1600 <udi_msc_spc_mode_sense+0x34>
    15fe:	1c08      	adds	r0, r1, #0
    1600:	b2c6      	uxtb	r6, r0
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    1602:	2180      	movs	r1, #128	; 0x80
    1604:	0030      	movs	r0, r6
    1606:	4b1a      	ldr	r3, [pc, #104]	; (1670 <udi_msc_spc_mode_sense+0xa4>)
    1608:	4798      	blx	r3
    160a:	2800      	cmp	r0, #0
    160c:	d10f      	bne.n	162e <udi_msc_spc_mode_sense+0x62>
}
    160e:	bd70      	pop	{r4, r5, r6, pc}
		request_lgt = udi_msc_cbw.CDB[4];
    1610:	4b16      	ldr	r3, [pc, #88]	; (166c <udi_msc_spc_mode_sense+0xa0>)
    1612:	7cd9      	ldrb	r1, [r3, #19]
		ptr_mode = &sense.s6.sense_data;
    1614:	4a13      	ldr	r2, [pc, #76]	; (1664 <udi_msc_spc_mode_sense+0x98>)
    1616:	3204      	adds	r2, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    1618:	2404      	movs	r4, #4
    161a:	e7e5      	b.n	15e8 <udi_msc_spc_mode_sense+0x1c>
		ptr_mode->page_code =
    161c:	231c      	movs	r3, #28
    161e:	7013      	strb	r3, [r2, #0]
		ptr_mode->page_length =
    1620:	3b12      	subs	r3, #18
    1622:	7053      	strb	r3, [r2, #1]
		ptr_mode->mrie =
    1624:	3b05      	subs	r3, #5
    1626:	70d3      	strb	r3, [r2, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    1628:	340c      	adds	r4, #12
    162a:	b2e4      	uxtb	r4, r4
    162c:	e7e4      	b.n	15f8 <udi_msc_spc_mode_sense+0x2c>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    162e:	4b0f      	ldr	r3, [pc, #60]	; (166c <udi_msc_spc_mode_sense+0xa0>)
    1630:	7b58      	ldrb	r0, [r3, #13]
    1632:	4b10      	ldr	r3, [pc, #64]	; (1674 <udi_msc_spc_mode_sense+0xa8>)
    1634:	4798      	blx	r3
    1636:	1e43      	subs	r3, r0, #1
    1638:	4198      	sbcs	r0, r3
    163a:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
    163c:	2d00      	cmp	r5, #0
    163e:	d00c      	beq.n	165a <udi_msc_spc_mode_sense+0x8e>
				cpu_to_be16((data_sense_lgt - 2));
    1640:	3c02      	subs	r4, #2
    1642:	b2a4      	uxth	r4, r4
		sense.s10.header.mode_data_length =
    1644:	4a07      	ldr	r2, [pc, #28]	; (1664 <udi_msc_spc_mode_sense+0x98>)
				cpu_to_be16((data_sense_lgt - 2));
    1646:	0a23      	lsrs	r3, r4, #8
    1648:	0224      	lsls	r4, r4, #8
    164a:	431c      	orrs	r4, r3
		sense.s10.header.mode_data_length =
    164c:	8014      	strh	r4, [r2, #0]
		sense.s10.header.device_specific_parameter = wp;
    164e:	70d0      	strb	r0, [r2, #3]
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
    1650:	0031      	movs	r1, r6
    1652:	4804      	ldr	r0, [pc, #16]	; (1664 <udi_msc_spc_mode_sense+0x98>)
    1654:	4b08      	ldr	r3, [pc, #32]	; (1678 <udi_msc_spc_mode_sense+0xac>)
    1656:	4798      	blx	r3
    1658:	e7d9      	b.n	160e <udi_msc_spc_mode_sense+0x42>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    165a:	4b02      	ldr	r3, [pc, #8]	; (1664 <udi_msc_spc_mode_sense+0x98>)
    165c:	3c01      	subs	r4, #1
    165e:	701c      	strb	r4, [r3, #0]
		sense.s6.header.device_specific_parameter = wp;
    1660:	7098      	strb	r0, [r3, #2]
    1662:	e7f5      	b.n	1650 <udi_msc_spc_mode_sense+0x84>
    1664:	2000018c 	.word	0x2000018c
    1668:	0000715f 	.word	0x0000715f
    166c:	200001b0 	.word	0x200001b0
    1670:	000014e1 	.word	0x000014e1
    1674:	00006549 	.word	0x00006549
    1678:	0000152d 	.word	0x0000152d

0000167c <udi_msc_sbc_trans>:
{
    167c:	b510      	push	{r4, lr}
    167e:	1e04      	subs	r4, r0, #0
	if (!b_read) {
    1680:	d01e      	beq.n	16c0 <udi_msc_sbc_trans+0x44>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    1682:	4a17      	ldr	r2, [pc, #92]	; (16e0 <udi_msc_sbc_trans+0x64>)
    1684:	4b17      	ldr	r3, [pc, #92]	; (16e4 <udi_msc_sbc_trans+0x68>)
    1686:	7c59      	ldrb	r1, [r3, #17]
    1688:	70d1      	strb	r1, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    168a:	7c99      	ldrb	r1, [r3, #18]
    168c:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    168e:	7cd9      	ldrb	r1, [r3, #19]
    1690:	7051      	strb	r1, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    1692:	7d19      	ldrb	r1, [r3, #20]
    1694:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    1696:	4a14      	ldr	r2, [pc, #80]	; (16e8 <udi_msc_sbc_trans+0x6c>)
    1698:	7d99      	ldrb	r1, [r3, #22]
    169a:	7051      	strb	r1, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    169c:	7ddb      	ldrb	r3, [r3, #23]
    169e:	7013      	strb	r3, [r2, #0]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    16a0:	8810      	ldrh	r0, [r2, #0]
    16a2:	0240      	lsls	r0, r0, #9
	if (!udi_msc_cbw_validate(trans_size,
    16a4:	0021      	movs	r1, r4
    16a6:	1e4b      	subs	r3, r1, #1
    16a8:	4199      	sbcs	r1, r3
    16aa:	01c9      	lsls	r1, r1, #7
    16ac:	4b0f      	ldr	r3, [pc, #60]	; (16ec <udi_msc_sbc_trans+0x70>)
    16ae:	4798      	blx	r3
    16b0:	2800      	cmp	r0, #0
    16b2:	d004      	beq.n	16be <udi_msc_sbc_trans+0x42>
	udi_msc_b_read = b_read;
    16b4:	4b0e      	ldr	r3, [pc, #56]	; (16f0 <udi_msc_sbc_trans+0x74>)
    16b6:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
    16b8:	2201      	movs	r2, #1
    16ba:	4b0e      	ldr	r3, [pc, #56]	; (16f4 <udi_msc_sbc_trans+0x78>)
    16bc:	701a      	strb	r2, [r3, #0]
}
    16be:	bd10      	pop	{r4, pc}
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    16c0:	4b08      	ldr	r3, [pc, #32]	; (16e4 <udi_msc_sbc_trans+0x68>)
    16c2:	7b58      	ldrb	r0, [r3, #13]
    16c4:	4b0c      	ldr	r3, [pc, #48]	; (16f8 <udi_msc_sbc_trans+0x7c>)
    16c6:	4798      	blx	r3
    16c8:	2800      	cmp	r0, #0
    16ca:	d0da      	beq.n	1682 <udi_msc_sbc_trans+0x6>
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
    16cc:	2200      	movs	r2, #0
    16ce:	219c      	movs	r1, #156	; 0x9c
    16d0:	0189      	lsls	r1, r1, #6
    16d2:	2007      	movs	r0, #7
    16d4:	4b09      	ldr	r3, [pc, #36]	; (16fc <udi_msc_sbc_trans+0x80>)
    16d6:	4798      	blx	r3
			udi_msc_csw_process();
    16d8:	4b09      	ldr	r3, [pc, #36]	; (1700 <udi_msc_sbc_trans+0x84>)
    16da:	4798      	blx	r3
			return;
    16dc:	e7ef      	b.n	16be <udi_msc_sbc_trans+0x42>
    16de:	46c0      	nop			; (mov r8, r8)
    16e0:	200001a0 	.word	0x200001a0
    16e4:	200001b0 	.word	0x200001b0
    16e8:	200001d0 	.word	0x200001d0
    16ec:	000014e1 	.word	0x000014e1
    16f0:	200001a5 	.word	0x200001a5
    16f4:	200001a6 	.word	0x200001a6
    16f8:	00006549 	.word	0x00006549
    16fc:	00001495 	.word	0x00001495
    1700:	00001435 	.word	0x00001435

00001704 <udi_msc_cbw_received>:
{
    1704:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    1706:	2800      	cmp	r0, #0
    1708:	d10d      	bne.n	1726 <udi_msc_cbw_received+0x22>
	if ((sizeof(udi_msc_cbw) != nb_received)
    170a:	291f      	cmp	r1, #31
    170c:	d104      	bne.n	1718 <udi_msc_cbw_received+0x14>
			|| (udi_msc_cbw.dCBWSignature !=
    170e:	4b84      	ldr	r3, [pc, #528]	; (1920 <udi_msc_cbw_received+0x21c>)
    1710:	4a84      	ldr	r2, [pc, #528]	; (1924 <udi_msc_cbw_received+0x220>)
    1712:	6812      	ldr	r2, [r2, #0]
    1714:	429a      	cmp	r2, r3
    1716:	d007      	beq.n	1728 <udi_msc_cbw_received+0x24>
		udi_msc_b_cbw_invalid = true;
    1718:	2201      	movs	r2, #1
    171a:	4b83      	ldr	r3, [pc, #524]	; (1928 <udi_msc_cbw_received+0x224>)
    171c:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
    171e:	4b83      	ldr	r3, [pc, #524]	; (192c <udi_msc_cbw_received+0x228>)
    1720:	4798      	blx	r3
		udi_msc_csw_invalid();
    1722:	4b83      	ldr	r3, [pc, #524]	; (1930 <udi_msc_cbw_received+0x22c>)
    1724:	4798      	blx	r3
}
    1726:	bd70      	pop	{r4, r5, r6, pc}
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    1728:	4b7e      	ldr	r3, [pc, #504]	; (1924 <udi_msc_cbw_received+0x220>)
    172a:	7b58      	ldrb	r0, [r3, #13]
    172c:	220f      	movs	r2, #15
    172e:	4010      	ands	r0, r2
    1730:	7358      	strb	r0, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    1732:	4b80      	ldr	r3, [pc, #512]	; (1934 <udi_msc_cbw_received+0x230>)
    1734:	781b      	ldrb	r3, [r3, #0]
    1736:	4283      	cmp	r3, r0
    1738:	d30b      	bcc.n	1752 <udi_msc_cbw_received+0x4e>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    173a:	4b7a      	ldr	r3, [pc, #488]	; (1924 <udi_msc_cbw_received+0x220>)
	udi_msc_csw.dCSWDataResidue =
    173c:	4a7e      	ldr	r2, [pc, #504]	; (1938 <udi_msc_cbw_received+0x234>)
    173e:	6899      	ldr	r1, [r3, #8]
    1740:	6091      	str	r1, [r2, #8]
	switch (udi_msc_cbw.CDB[0]) {
    1742:	7bda      	ldrb	r2, [r3, #15]
    1744:	2a5a      	cmp	r2, #90	; 0x5a
    1746:	d900      	bls.n	174a <udi_msc_cbw_received+0x46>
    1748:	e0d2      	b.n	18f0 <udi_msc_cbw_received+0x1ec>
    174a:	0093      	lsls	r3, r2, #2
    174c:	4a7b      	ldr	r2, [pc, #492]	; (193c <udi_msc_cbw_received+0x238>)
    174e:	58d3      	ldr	r3, [r2, r3]
    1750:	469f      	mov	pc, r3
		udi_msc_sense_fail_cdb_invalid();
    1752:	4b7b      	ldr	r3, [pc, #492]	; (1940 <udi_msc_cbw_received+0x23c>)
    1754:	4798      	blx	r3
		udi_msc_csw_process();
    1756:	4b7b      	ldr	r3, [pc, #492]	; (1944 <udi_msc_cbw_received+0x240>)
    1758:	4798      	blx	r3
		return;
    175a:	e7e4      	b.n	1726 <udi_msc_cbw_received+0x22>
	uint8_t length = udi_msc_cbw.CDB[4];
    175c:	4b71      	ldr	r3, [pc, #452]	; (1924 <udi_msc_cbw_received+0x220>)
    175e:	7cda      	ldrb	r2, [r3, #19]
    1760:	1c13      	adds	r3, r2, #0
    1762:	2a12      	cmp	r2, #18
    1764:	d900      	bls.n	1768 <udi_msc_cbw_received+0x64>
    1766:	2312      	movs	r3, #18
    1768:	b2dc      	uxtb	r4, r3
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    176a:	2180      	movs	r1, #128	; 0x80
    176c:	0020      	movs	r0, r4
    176e:	4b76      	ldr	r3, [pc, #472]	; (1948 <udi_msc_cbw_received+0x244>)
    1770:	4798      	blx	r3
    1772:	2800      	cmp	r0, #0
    1774:	d0d7      	beq.n	1726 <udi_msc_cbw_received+0x22>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    1776:	0021      	movs	r1, r4
    1778:	4874      	ldr	r0, [pc, #464]	; (194c <udi_msc_cbw_received+0x248>)
    177a:	4b75      	ldr	r3, [pc, #468]	; (1950 <udi_msc_cbw_received+0x24c>)
    177c:	4798      	blx	r3
    177e:	e7d2      	b.n	1726 <udi_msc_cbw_received+0x22>
	length = udi_msc_cbw.CDB[4];
    1780:	4b68      	ldr	r3, [pc, #416]	; (1924 <udi_msc_cbw_received+0x220>)
    1782:	7cdb      	ldrb	r3, [r3, #19]
    1784:	1c1a      	adds	r2, r3, #0
    1786:	2b24      	cmp	r3, #36	; 0x24
    1788:	d900      	bls.n	178c <udi_msc_cbw_received+0x88>
    178a:	2224      	movs	r2, #36	; 0x24
    178c:	b2d4      	uxtb	r4, r2
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    178e:	2180      	movs	r1, #128	; 0x80
    1790:	0020      	movs	r0, r4
    1792:	4b6d      	ldr	r3, [pc, #436]	; (1948 <udi_msc_cbw_received+0x244>)
    1794:	4798      	blx	r3
    1796:	2800      	cmp	r0, #0
    1798:	d0c5      	beq.n	1726 <udi_msc_cbw_received+0x22>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    179a:	4b62      	ldr	r3, [pc, #392]	; (1924 <udi_msc_cbw_received+0x220>)
    179c:	7c1b      	ldrb	r3, [r3, #16]
    179e:	079b      	lsls	r3, r3, #30
    17a0:	d103      	bne.n	17aa <udi_msc_cbw_received+0xa6>
			|| (0 != udi_msc_cbw.CDB[2])) {
    17a2:	4b60      	ldr	r3, [pc, #384]	; (1924 <udi_msc_cbw_received+0x220>)
    17a4:	7c5d      	ldrb	r5, [r3, #17]
    17a6:	2d00      	cmp	r5, #0
    17a8:	d004      	beq.n	17b4 <udi_msc_cbw_received+0xb0>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    17aa:	4b65      	ldr	r3, [pc, #404]	; (1940 <udi_msc_cbw_received+0x23c>)
    17ac:	4798      	blx	r3
		udi_msc_csw_process();
    17ae:	4b65      	ldr	r3, [pc, #404]	; (1944 <udi_msc_cbw_received+0x240>)
    17b0:	4798      	blx	r3
    17b2:	e7b8      	b.n	1726 <udi_msc_cbw_received+0x22>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    17b4:	4b5b      	ldr	r3, [pc, #364]	; (1924 <udi_msc_cbw_received+0x220>)
    17b6:	7b58      	ldrb	r0, [r3, #13]
    17b8:	4b66      	ldr	r3, [pc, #408]	; (1954 <udi_msc_cbw_received+0x250>)
    17ba:	4798      	blx	r3
    17bc:	2380      	movs	r3, #128	; 0x80
    17be:	2800      	cmp	r0, #0
    17c0:	d100      	bne.n	17c4 <udi_msc_cbw_received+0xc0>
    17c2:	002b      	movs	r3, r5
    17c4:	4e64      	ldr	r6, [pc, #400]	; (1958 <udi_msc_cbw_received+0x254>)
    17c6:	7073      	strb	r3, [r6, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    17c8:	4b56      	ldr	r3, [pc, #344]	; (1924 <udi_msc_cbw_received+0x220>)
    17ca:	7b58      	ldrb	r0, [r3, #13]
    17cc:	4b63      	ldr	r3, [pc, #396]	; (195c <udi_msc_cbw_received+0x258>)
    17ce:	4798      	blx	r3
    17d0:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
    17d2:	0030      	movs	r0, r6
    17d4:	3010      	adds	r0, #16
    17d6:	3101      	adds	r1, #1
    17d8:	2210      	movs	r2, #16
    17da:	4b61      	ldr	r3, [pc, #388]	; (1960 <udi_msc_cbw_received+0x25c>)
    17dc:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
    17de:	7c33      	ldrb	r3, [r6, #16]
    17e0:	2b00      	cmp	r3, #0
    17e2:	d100      	bne.n	17e6 <udi_msc_cbw_received+0xe2>
    17e4:	e08e      	b.n	1904 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    17e6:	2b22      	cmp	r3, #34	; 0x22
    17e8:	d100      	bne.n	17ec <udi_msc_cbw_received+0xe8>
    17ea:	e08a      	b.n	1902 <udi_msc_cbw_received+0x1fe>
    17ec:	495a      	ldr	r1, [pc, #360]	; (1958 <udi_msc_cbw_received+0x254>)
		i++;
    17ee:	2301      	movs	r3, #1
		if ((0 == udi_msc_inquiry_data.product_id[i])
    17f0:	7c4a      	ldrb	r2, [r1, #17]
    17f2:	2a00      	cmp	r2, #0
    17f4:	d100      	bne.n	17f8 <udi_msc_cbw_received+0xf4>
    17f6:	e085      	b.n	1904 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    17f8:	2a22      	cmp	r2, #34	; 0x22
    17fa:	d100      	bne.n	17fe <udi_msc_cbw_received+0xfa>
    17fc:	e082      	b.n	1904 <udi_msc_cbw_received+0x200>
		i++;
    17fe:	3301      	adds	r3, #1
    1800:	b2db      	uxtb	r3, r3
    1802:	3101      	adds	r1, #1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    1804:	2b10      	cmp	r3, #16
    1806:	d1f3      	bne.n	17f0 <udi_msc_cbw_received+0xec>
    1808:	e084      	b.n	1914 <udi_msc_cbw_received+0x210>
		udi_msc_spc_mode_sense(false);
    180a:	2000      	movs	r0, #0
    180c:	4b55      	ldr	r3, [pc, #340]	; (1964 <udi_msc_cbw_received+0x260>)
    180e:	4798      	blx	r3
		break;
    1810:	e789      	b.n	1726 <udi_msc_cbw_received+0x22>
		udi_msc_spc_mode_sense(true);
    1812:	2001      	movs	r0, #1
    1814:	4b53      	ldr	r3, [pc, #332]	; (1964 <udi_msc_cbw_received+0x260>)
    1816:	4798      	blx	r3
		break;
    1818:	e785      	b.n	1726 <udi_msc_cbw_received+0x22>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    181a:	4b53      	ldr	r3, [pc, #332]	; (1968 <udi_msc_cbw_received+0x264>)
    181c:	4798      	blx	r3
    181e:	2802      	cmp	r0, #2
    1820:	d009      	beq.n	1836 <udi_msc_cbw_received+0x132>
    1822:	2803      	cmp	r0, #3
    1824:	d004      	beq.n	1830 <udi_msc_cbw_received+0x12c>
    1826:	2800      	cmp	r0, #0
    1828:	d008      	beq.n	183c <udi_msc_cbw_received+0x138>
		udi_msc_sense_fail_hardware();
    182a:	4b50      	ldr	r3, [pc, #320]	; (196c <udi_msc_cbw_received+0x268>)
    182c:	4798      	blx	r3
    182e:	e007      	b.n	1840 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_busy_or_change();
    1830:	4b4f      	ldr	r3, [pc, #316]	; (1970 <udi_msc_cbw_received+0x26c>)
    1832:	4798      	blx	r3
    1834:	e004      	b.n	1840 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_not_present();
    1836:	4b4f      	ldr	r3, [pc, #316]	; (1974 <udi_msc_cbw_received+0x270>)
    1838:	4798      	blx	r3
    183a:	e001      	b.n	1840 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_pass();
    183c:	4b4e      	ldr	r3, [pc, #312]	; (1978 <udi_msc_cbw_received+0x274>)
    183e:	4798      	blx	r3
	udi_msc_csw_process();
    1840:	4b40      	ldr	r3, [pc, #256]	; (1944 <udi_msc_cbw_received+0x240>)
    1842:	4798      	blx	r3
    1844:	e76f      	b.n	1726 <udi_msc_cbw_received+0x22>
	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
    1846:	2180      	movs	r1, #128	; 0x80
    1848:	2008      	movs	r0, #8
    184a:	4b3f      	ldr	r3, [pc, #252]	; (1948 <udi_msc_cbw_received+0x244>)
    184c:	4798      	blx	r3
    184e:	2800      	cmp	r0, #0
    1850:	d100      	bne.n	1854 <udi_msc_cbw_received+0x150>
    1852:	e768      	b.n	1726 <udi_msc_cbw_received+0x22>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    1854:	4b33      	ldr	r3, [pc, #204]	; (1924 <udi_msc_cbw_received+0x220>)
    1856:	7b58      	ldrb	r0, [r3, #13]
    1858:	4948      	ldr	r1, [pc, #288]	; (197c <udi_msc_cbw_received+0x278>)
    185a:	4b49      	ldr	r3, [pc, #292]	; (1980 <udi_msc_cbw_received+0x27c>)
    185c:	4798      	blx	r3
    185e:	2802      	cmp	r0, #2
    1860:	d00d      	beq.n	187e <udi_msc_cbw_received+0x17a>
    1862:	2803      	cmp	r0, #3
    1864:	d006      	beq.n	1874 <udi_msc_cbw_received+0x170>
    1866:	2800      	cmp	r0, #0
    1868:	d00e      	beq.n	1888 <udi_msc_cbw_received+0x184>
		udi_msc_sense_fail_hardware();
    186a:	4b40      	ldr	r3, [pc, #256]	; (196c <udi_msc_cbw_received+0x268>)
    186c:	4798      	blx	r3
		udi_msc_csw_process();
    186e:	4b35      	ldr	r3, [pc, #212]	; (1944 <udi_msc_cbw_received+0x240>)
    1870:	4798      	blx	r3
    1872:	e758      	b.n	1726 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_busy_or_change();
    1874:	4b3e      	ldr	r3, [pc, #248]	; (1970 <udi_msc_cbw_received+0x26c>)
    1876:	4798      	blx	r3
		udi_msc_csw_process();
    1878:	4b32      	ldr	r3, [pc, #200]	; (1944 <udi_msc_cbw_received+0x240>)
    187a:	4798      	blx	r3
    187c:	e753      	b.n	1726 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_not_present();
    187e:	4b3d      	ldr	r3, [pc, #244]	; (1974 <udi_msc_cbw_received+0x270>)
    1880:	4798      	blx	r3
		udi_msc_csw_process();
    1882:	4b30      	ldr	r3, [pc, #192]	; (1944 <udi_msc_cbw_received+0x240>)
    1884:	4798      	blx	r3
    1886:	e74e      	b.n	1726 <udi_msc_cbw_received+0x22>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    1888:	483c      	ldr	r0, [pc, #240]	; (197c <udi_msc_cbw_received+0x278>)
    188a:	2380      	movs	r3, #128	; 0x80
    188c:	029b      	lsls	r3, r3, #10
    188e:	6043      	str	r3, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    1890:	6803      	ldr	r3, [r0, #0]
    1892:	ba1b      	rev	r3, r3
    1894:	6003      	str	r3, [r0, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    1896:	2108      	movs	r1, #8
    1898:	4b2d      	ldr	r3, [pc, #180]	; (1950 <udi_msc_cbw_received+0x24c>)
    189a:	4798      	blx	r3
    189c:	e743      	b.n	1726 <udi_msc_cbw_received+0x22>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    189e:	4b21      	ldr	r3, [pc, #132]	; (1924 <udi_msc_cbw_received+0x220>)
    18a0:	7cdb      	ldrb	r3, [r3, #19]
	if (loej) {
    18a2:	079a      	lsls	r2, r3, #30
    18a4:	d404      	bmi.n	18b0 <udi_msc_cbw_received+0x1ac>
	udi_msc_sense_pass();
    18a6:	4b34      	ldr	r3, [pc, #208]	; (1978 <udi_msc_cbw_received+0x274>)
    18a8:	4798      	blx	r3
	udi_msc_csw_process();
    18aa:	4b26      	ldr	r3, [pc, #152]	; (1944 <udi_msc_cbw_received+0x240>)
    18ac:	4798      	blx	r3
    18ae:	e73a      	b.n	1726 <udi_msc_cbw_received+0x22>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    18b0:	2101      	movs	r1, #1
    18b2:	404b      	eors	r3, r1
    18b4:	2101      	movs	r1, #1
    18b6:	4019      	ands	r1, r3
    18b8:	4b32      	ldr	r3, [pc, #200]	; (1984 <udi_msc_cbw_received+0x280>)
    18ba:	4798      	blx	r3
    18bc:	e7f3      	b.n	18a6 <udi_msc_cbw_received+0x1a2>
	uint8_t prevent = udi_msc_cbw.CDB[4];
    18be:	4b19      	ldr	r3, [pc, #100]	; (1924 <udi_msc_cbw_received+0x220>)
	if (0 == prevent) {
    18c0:	7cdb      	ldrb	r3, [r3, #19]
    18c2:	2b00      	cmp	r3, #0
    18c4:	d004      	beq.n	18d0 <udi_msc_cbw_received+0x1cc>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    18c6:	4b1e      	ldr	r3, [pc, #120]	; (1940 <udi_msc_cbw_received+0x23c>)
    18c8:	4798      	blx	r3
	udi_msc_csw_process();
    18ca:	4b1e      	ldr	r3, [pc, #120]	; (1944 <udi_msc_cbw_received+0x240>)
    18cc:	4798      	blx	r3
    18ce:	e72a      	b.n	1726 <udi_msc_cbw_received+0x22>
		udi_msc_sense_pass();
    18d0:	4b29      	ldr	r3, [pc, #164]	; (1978 <udi_msc_cbw_received+0x274>)
    18d2:	4798      	blx	r3
    18d4:	e7f9      	b.n	18ca <udi_msc_cbw_received+0x1c6>
		udi_msc_sense_pass();
    18d6:	4b28      	ldr	r3, [pc, #160]	; (1978 <udi_msc_cbw_received+0x274>)
    18d8:	4798      	blx	r3
		udi_msc_csw_process();
    18da:	4b1a      	ldr	r3, [pc, #104]	; (1944 <udi_msc_cbw_received+0x240>)
    18dc:	4798      	blx	r3
		break;
    18de:	e722      	b.n	1726 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(true);
    18e0:	2001      	movs	r0, #1
    18e2:	4b29      	ldr	r3, [pc, #164]	; (1988 <udi_msc_cbw_received+0x284>)
    18e4:	4798      	blx	r3
		break;
    18e6:	e71e      	b.n	1726 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(false);
    18e8:	2000      	movs	r0, #0
    18ea:	4b27      	ldr	r3, [pc, #156]	; (1988 <udi_msc_cbw_received+0x284>)
    18ec:	4798      	blx	r3
		break;
    18ee:	e71a      	b.n	1726 <udi_msc_cbw_received+0x22>
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    18f0:	2200      	movs	r2, #0
    18f2:	2180      	movs	r1, #128	; 0x80
    18f4:	0189      	lsls	r1, r1, #6
    18f6:	2005      	movs	r0, #5
    18f8:	4b24      	ldr	r3, [pc, #144]	; (198c <udi_msc_cbw_received+0x288>)
    18fa:	4798      	blx	r3
		udi_msc_csw_process();
    18fc:	4b11      	ldr	r3, [pc, #68]	; (1944 <udi_msc_cbw_received+0x240>)
    18fe:	4798      	blx	r3
		break;
    1900:	e711      	b.n	1726 <udi_msc_cbw_received+0x22>
	i = 0;
    1902:	002b      	movs	r3, r5
		udi_msc_inquiry_data.product_id[i] = ' ';
    1904:	4814      	ldr	r0, [pc, #80]	; (1958 <udi_msc_cbw_received+0x254>)
    1906:	2120      	movs	r1, #32
    1908:	18c2      	adds	r2, r0, r3
    190a:	7411      	strb	r1, [r2, #16]
		i++;
    190c:	3301      	adds	r3, #1
    190e:	b2db      	uxtb	r3, r3
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    1910:	2b10      	cmp	r3, #16
    1912:	d1f9      	bne.n	1908 <udi_msc_cbw_received+0x204>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    1914:	0021      	movs	r1, r4
    1916:	4810      	ldr	r0, [pc, #64]	; (1958 <udi_msc_cbw_received+0x254>)
    1918:	4b0d      	ldr	r3, [pc, #52]	; (1950 <udi_msc_cbw_received+0x24c>)
    191a:	4798      	blx	r3
    191c:	e703      	b.n	1726 <udi_msc_cbw_received+0x22>
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	43425355 	.word	0x43425355
    1924:	200001b0 	.word	0x200001b0
    1928:	200001a4 	.word	0x200001a4
    192c:	000013dd 	.word	0x000013dd
    1930:	00001409 	.word	0x00001409
    1934:	200001d4 	.word	0x200001d4
    1938:	20000048 	.word	0x20000048
    193c:	00008248 	.word	0x00008248
    1940:	000014cd 	.word	0x000014cd
    1944:	00001435 	.word	0x00001435
    1948:	000014e1 	.word	0x000014e1
    194c:	200001d8 	.word	0x200001d8
    1950:	0000152d 	.word	0x0000152d
    1954:	00006561 	.word	0x00006561
    1958:	20000058 	.word	0x20000058
    195c:	00006579 	.word	0x00006579
    1960:	0000714d 	.word	0x0000714d
    1964:	000015cd 	.word	0x000015cd
    1968:	00006505 	.word	0x00006505
    196c:	00001519 	.word	0x00001519
    1970:	00001565 	.word	0x00001565
    1974:	00001579 	.word	0x00001579
    1978:	0000158d 	.word	0x0000158d
    197c:	200001a8 	.word	0x200001a8
    1980:	0000651d 	.word	0x0000651d
    1984:	00006539 	.word	0x00006539
    1988:	0000167d 	.word	0x0000167d
    198c:	00001495 	.word	0x00001495

00001990 <udi_msc_disable>:
{
    1990:	b510      	push	{r4, lr}
	udi_msc_b_trans_req = false;
    1992:	2200      	movs	r2, #0
    1994:	4b04      	ldr	r3, [pc, #16]	; (19a8 <udi_msc_disable+0x18>)
    1996:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    1998:	2301      	movs	r3, #1
    199a:	4a04      	ldr	r2, [pc, #16]	; (19ac <udi_msc_disable+0x1c>)
    199c:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    199e:	4a04      	ldr	r2, [pc, #16]	; (19b0 <udi_msc_disable+0x20>)
    19a0:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
    19a2:	4b04      	ldr	r3, [pc, #16]	; (19b4 <udi_msc_disable+0x24>)
    19a4:	4798      	blx	r3
}
    19a6:	bd10      	pop	{r4, pc}
    19a8:	200001a6 	.word	0x200001a6
    19ac:	20000044 	.word	0x20000044
    19b0:	20000045 	.word	0x20000045
    19b4:	00003cd1 	.word	0x00003cd1

000019b8 <udi_msc_setup>:
{
    19b8:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    19ba:	4b20      	ldr	r3, [pc, #128]	; (1a3c <udi_msc_setup+0x84>)
    19bc:	781a      	ldrb	r2, [r3, #0]
    19be:	b253      	sxtb	r3, r2
    19c0:	2b00      	cmp	r3, #0
    19c2:	db05      	blt.n	19d0 <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    19c4:	2360      	movs	r3, #96	; 0x60
    19c6:	4013      	ands	r3, r2
	return false;	// Not supported request
    19c8:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    19ca:	2b20      	cmp	r3, #32
    19cc:	d018      	beq.n	1a00 <udi_msc_setup+0x48>
}
    19ce:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    19d0:	2360      	movs	r3, #96	; 0x60
    19d2:	4013      	ands	r3, r2
	return false;	// Not supported request
    19d4:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    19d6:	2b20      	cmp	r3, #32
    19d8:	d1f9      	bne.n	19ce <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    19da:	4b18      	ldr	r3, [pc, #96]	; (1a3c <udi_msc_setup+0x84>)
    19dc:	785b      	ldrb	r3, [r3, #1]
    19de:	2bfe      	cmp	r3, #254	; 0xfe
    19e0:	d127      	bne.n	1a32 <udi_msc_setup+0x7a>
				if (1 != udd_g_ctrlreq.req.wLength)
    19e2:	4b16      	ldr	r3, [pc, #88]	; (1a3c <udi_msc_setup+0x84>)
    19e4:	88db      	ldrh	r3, [r3, #6]
    19e6:	2b01      	cmp	r3, #1
    19e8:	d1f1      	bne.n	19ce <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    19ea:	4b14      	ldr	r3, [pc, #80]	; (1a3c <udi_msc_setup+0x84>)
    19ec:	885b      	ldrh	r3, [r3, #2]
    19ee:	2b00      	cmp	r3, #0
    19f0:	d1ed      	bne.n	19ce <udi_msc_setup+0x16>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    19f2:	4b12      	ldr	r3, [pc, #72]	; (1a3c <udi_msc_setup+0x84>)
    19f4:	4a12      	ldr	r2, [pc, #72]	; (1a40 <udi_msc_setup+0x88>)
    19f6:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    19f8:	2201      	movs	r2, #1
    19fa:	819a      	strh	r2, [r3, #12]
				return true;
    19fc:	3001      	adds	r0, #1
    19fe:	e7e6      	b.n	19ce <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    1a00:	4b0e      	ldr	r3, [pc, #56]	; (1a3c <udi_msc_setup+0x84>)
    1a02:	785b      	ldrb	r3, [r3, #1]
    1a04:	2bff      	cmp	r3, #255	; 0xff
    1a06:	d116      	bne.n	1a36 <udi_msc_setup+0x7e>
				if (0 != udd_g_ctrlreq.req.wLength)
    1a08:	4b0c      	ldr	r3, [pc, #48]	; (1a3c <udi_msc_setup+0x84>)
    1a0a:	88db      	ldrh	r3, [r3, #6]
    1a0c:	2b00      	cmp	r3, #0
    1a0e:	d1de      	bne.n	19ce <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    1a10:	4b0a      	ldr	r3, [pc, #40]	; (1a3c <udi_msc_setup+0x84>)
    1a12:	885b      	ldrh	r3, [r3, #2]
    1a14:	2b00      	cmp	r3, #0
    1a16:	d1da      	bne.n	19ce <udi_msc_setup+0x16>
				udi_msc_b_cbw_invalid = false;
    1a18:	4a0a      	ldr	r2, [pc, #40]	; (1a44 <udi_msc_setup+0x8c>)
    1a1a:	7013      	strb	r3, [r2, #0]
				udi_msc_b_trans_req = false;
    1a1c:	4a0a      	ldr	r2, [pc, #40]	; (1a48 <udi_msc_setup+0x90>)
    1a1e:	7013      	strb	r3, [r2, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
    1a20:	3002      	adds	r0, #2
    1a22:	4c0a      	ldr	r4, [pc, #40]	; (1a4c <udi_msc_setup+0x94>)
    1a24:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
    1a26:	2081      	movs	r0, #129	; 0x81
    1a28:	47a0      	blx	r4
				udi_msc_cbw_wait();
    1a2a:	4b09      	ldr	r3, [pc, #36]	; (1a50 <udi_msc_setup+0x98>)
    1a2c:	4798      	blx	r3
				return true;
    1a2e:	2001      	movs	r0, #1
    1a30:	e7cd      	b.n	19ce <udi_msc_setup+0x16>
	return false;	// Not supported request
    1a32:	2000      	movs	r0, #0
    1a34:	e7cb      	b.n	19ce <udi_msc_setup+0x16>
    1a36:	2000      	movs	r0, #0
    1a38:	e7c9      	b.n	19ce <udi_msc_setup+0x16>
    1a3a:	46c0      	nop			; (mov r8, r8)
    1a3c:	20000608 	.word	0x20000608
    1a40:	200001d4 	.word	0x200001d4
    1a44:	200001a4 	.word	0x200001a4
    1a48:	200001a6 	.word	0x200001a6
    1a4c:	000033c1 	.word	0x000033c1
    1a50:	000012e1 	.word	0x000012e1

00001a54 <udi_msc_process_trans>:
{
    1a54:	b510      	push	{r4, lr}
	if (!udi_msc_b_trans_req)
    1a56:	4b1e      	ldr	r3, [pc, #120]	; (1ad0 <udi_msc_process_trans+0x7c>)
    1a58:	781c      	ldrb	r4, [r3, #0]
    1a5a:	2c00      	cmp	r4, #0
    1a5c:	d030      	beq.n	1ac0 <udi_msc_process_trans+0x6c>
	udi_msc_b_trans_req = false;
    1a5e:	2300      	movs	r3, #0
    1a60:	4a1b      	ldr	r2, [pc, #108]	; (1ad0 <udi_msc_process_trans+0x7c>)
    1a62:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = false;
    1a64:	4a1b      	ldr	r2, [pc, #108]	; (1ad4 <udi_msc_process_trans+0x80>)
    1a66:	7013      	strb	r3, [r2, #0]
	if (udi_msc_b_read) {
    1a68:	4b1b      	ldr	r3, [pc, #108]	; (1ad8 <udi_msc_process_trans+0x84>)
    1a6a:	781b      	ldrb	r3, [r3, #0]
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	d015      	beq.n	1a9c <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    1a70:	4b1a      	ldr	r3, [pc, #104]	; (1adc <udi_msc_process_trans+0x88>)
    1a72:	881a      	ldrh	r2, [r3, #0]
    1a74:	4b1a      	ldr	r3, [pc, #104]	; (1ae0 <udi_msc_process_trans+0x8c>)
    1a76:	6819      	ldr	r1, [r3, #0]
    1a78:	4b1a      	ldr	r3, [pc, #104]	; (1ae4 <udi_msc_process_trans+0x90>)
    1a7a:	7b58      	ldrb	r0, [r3, #13]
    1a7c:	4b1a      	ldr	r3, [pc, #104]	; (1ae8 <udi_msc_process_trans+0x94>)
    1a7e:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
    1a80:	4b14      	ldr	r3, [pc, #80]	; (1ad4 <udi_msc_process_trans+0x80>)
    1a82:	781b      	ldrb	r3, [r3, #0]
    1a84:	b2db      	uxtb	r3, r3
    1a86:	2b00      	cmp	r3, #0
    1a88:	d111      	bne.n	1aae <udi_msc_process_trans+0x5a>
	switch (status) {
    1a8a:	2802      	cmp	r0, #2
    1a8c:	d01d      	beq.n	1aca <udi_msc_process_trans+0x76>
    1a8e:	2803      	cmp	r0, #3
    1a90:	d018      	beq.n	1ac4 <udi_msc_process_trans+0x70>
    1a92:	2800      	cmp	r0, #0
    1a94:	d010      	beq.n	1ab8 <udi_msc_process_trans+0x64>
		udi_msc_sense_fail_hardware();
    1a96:	4b15      	ldr	r3, [pc, #84]	; (1aec <udi_msc_process_trans+0x98>)
    1a98:	4798      	blx	r3
		break;
    1a9a:	e00f      	b.n	1abc <udi_msc_process_trans+0x68>
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    1a9c:	4b0f      	ldr	r3, [pc, #60]	; (1adc <udi_msc_process_trans+0x88>)
    1a9e:	881a      	ldrh	r2, [r3, #0]
    1aa0:	4b0f      	ldr	r3, [pc, #60]	; (1ae0 <udi_msc_process_trans+0x8c>)
    1aa2:	6819      	ldr	r1, [r3, #0]
    1aa4:	4b0f      	ldr	r3, [pc, #60]	; (1ae4 <udi_msc_process_trans+0x90>)
    1aa6:	7b58      	ldrb	r0, [r3, #13]
    1aa8:	4b11      	ldr	r3, [pc, #68]	; (1af0 <udi_msc_process_trans+0x9c>)
    1aaa:	4798      	blx	r3
    1aac:	e7e8      	b.n	1a80 <udi_msc_process_trans+0x2c>
		udi_msc_b_reset_trans = false;
    1aae:	2100      	movs	r1, #0
    1ab0:	4a08      	ldr	r2, [pc, #32]	; (1ad4 <udi_msc_process_trans+0x80>)
    1ab2:	7011      	strb	r1, [r2, #0]
		return true;
    1ab4:	001c      	movs	r4, r3
    1ab6:	e003      	b.n	1ac0 <udi_msc_process_trans+0x6c>
		udi_msc_sense_pass();
    1ab8:	4b0e      	ldr	r3, [pc, #56]	; (1af4 <udi_msc_process_trans+0xa0>)
    1aba:	4798      	blx	r3
	udi_msc_csw_process();
    1abc:	4b0e      	ldr	r3, [pc, #56]	; (1af8 <udi_msc_process_trans+0xa4>)
    1abe:	4798      	blx	r3
}
    1ac0:	0020      	movs	r0, r4
    1ac2:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_busy_or_change();
    1ac4:	4b0d      	ldr	r3, [pc, #52]	; (1afc <udi_msc_process_trans+0xa8>)
    1ac6:	4798      	blx	r3
		break;
    1ac8:	e7f8      	b.n	1abc <udi_msc_process_trans+0x68>
		udi_msc_sense_fail_not_present();
    1aca:	4b0d      	ldr	r3, [pc, #52]	; (1b00 <udi_msc_process_trans+0xac>)
    1acc:	4798      	blx	r3
		break;
    1ace:	e7f5      	b.n	1abc <udi_msc_process_trans+0x68>
    1ad0:	200001a6 	.word	0x200001a6
    1ad4:	20000045 	.word	0x20000045
    1ad8:	200001a5 	.word	0x200001a5
    1adc:	200001d0 	.word	0x200001d0
    1ae0:	200001a0 	.word	0x200001a0
    1ae4:	200001b0 	.word	0x200001b0
    1ae8:	00006589 	.word	0x00006589
    1aec:	00001519 	.word	0x00001519
    1af0:	000065bd 	.word	0x000065bd
    1af4:	0000158d 	.word	0x0000158d
    1af8:	00001435 	.word	0x00001435
    1afc:	00001565 	.word	0x00001565
    1b00:	00001579 	.word	0x00001579

00001b04 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
    1b04:	b530      	push	{r4, r5, lr}
    1b06:	b083      	sub	sp, #12
    1b08:	0005      	movs	r5, r0
    1b0a:	0014      	movs	r4, r2
	if (!udi_msc_b_ack_trans)
    1b0c:	4a1d      	ldr	r2, [pc, #116]	; (1b84 <udi_msc_trans_block+0x80>)
    1b0e:	7810      	ldrb	r0, [r2, #0]
    1b10:	b2c0      	uxtb	r0, r0
    1b12:	2800      	cmp	r0, #0
    1b14:	d013      	beq.n	1b3e <udi_msc_trans_block+0x3a>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
    1b16:	2000      	movs	r0, #0
    1b18:	7010      	strb	r0, [r2, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    1b1a:	3081      	adds	r0, #129	; 0x81
    1b1c:	2d00      	cmp	r5, #0
    1b1e:	d100      	bne.n	1b22 <udi_msc_trans_block+0x1e>
    1b20:	387f      	subs	r0, #127	; 0x7f
    1b22:	2b00      	cmp	r3, #0
    1b24:	d00d      	beq.n	1b42 <udi_msc_trans_block+0x3e>
    1b26:	9300      	str	r3, [sp, #0]
    1b28:	0023      	movs	r3, r4
    1b2a:	000a      	movs	r2, r1
    1b2c:	2100      	movs	r1, #0
    1b2e:	4d16      	ldr	r5, [pc, #88]	; (1b88 <udi_msc_trans_block+0x84>)
    1b30:	47a8      	blx	r5
    1b32:	2800      	cmp	r0, #0
    1b34:	d020      	beq.n	1b78 <udi_msc_trans_block+0x74>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
    1b36:	4b15      	ldr	r3, [pc, #84]	; (1b8c <udi_msc_trans_block+0x88>)
    1b38:	689a      	ldr	r2, [r3, #8]
    1b3a:	1b14      	subs	r4, r2, r4
    1b3c:	609c      	str	r4, [r3, #8]
	return true;
}
    1b3e:	b003      	add	sp, #12
    1b40:	bd30      	pop	{r4, r5, pc}
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    1b42:	4b13      	ldr	r3, [pc, #76]	; (1b90 <udi_msc_trans_block+0x8c>)
    1b44:	9300      	str	r3, [sp, #0]
    1b46:	0023      	movs	r3, r4
    1b48:	000a      	movs	r2, r1
    1b4a:	2100      	movs	r1, #0
    1b4c:	4d0e      	ldr	r5, [pc, #56]	; (1b88 <udi_msc_trans_block+0x84>)
    1b4e:	47a8      	blx	r5
    1b50:	2800      	cmp	r0, #0
    1b52:	d011      	beq.n	1b78 <udi_msc_trans_block+0x74>
		while (!udi_msc_b_ack_trans);
    1b54:	4a0b      	ldr	r2, [pc, #44]	; (1b84 <udi_msc_trans_block+0x80>)
    1b56:	7813      	ldrb	r3, [r2, #0]
    1b58:	2b00      	cmp	r3, #0
    1b5a:	d0fc      	beq.n	1b56 <udi_msc_trans_block+0x52>
		if (udi_msc_b_abort_trans) {
    1b5c:	4b0d      	ldr	r3, [pc, #52]	; (1b94 <udi_msc_trans_block+0x90>)
    1b5e:	781b      	ldrb	r3, [r3, #0]
			return false;
    1b60:	2000      	movs	r0, #0
		if (udi_msc_b_abort_trans) {
    1b62:	2b00      	cmp	r3, #0
    1b64:	d1eb      	bne.n	1b3e <udi_msc_trans_block+0x3a>
		udi_msc_csw.dCSWDataResidue -= block_size;
    1b66:	4b09      	ldr	r3, [pc, #36]	; (1b8c <udi_msc_trans_block+0x88>)
    1b68:	689a      	ldr	r2, [r3, #8]
    1b6a:	1b14      	subs	r4, r2, r4
    1b6c:	609c      	str	r4, [r3, #8]
		return (!udi_msc_b_abort_trans);
    1b6e:	4b09      	ldr	r3, [pc, #36]	; (1b94 <udi_msc_trans_block+0x90>)
    1b70:	7818      	ldrb	r0, [r3, #0]
    1b72:	2301      	movs	r3, #1
    1b74:	4058      	eors	r0, r3
    1b76:	e7e2      	b.n	1b3e <udi_msc_trans_block+0x3a>
		udi_msc_b_ack_trans = true;
    1b78:	2201      	movs	r2, #1
    1b7a:	4b02      	ldr	r3, [pc, #8]	; (1b84 <udi_msc_trans_block+0x80>)
    1b7c:	701a      	strb	r2, [r3, #0]
		return false;
    1b7e:	2000      	movs	r0, #0
    1b80:	e7dd      	b.n	1b3e <udi_msc_trans_block+0x3a>
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	20000044 	.word	0x20000044
    1b88:	0000374d 	.word	0x0000374d
    1b8c:	20000048 	.word	0x20000048
    1b90:	000012c5 	.word	0x000012c5
    1b94:	200003c4 	.word	0x200003c4

00001b98 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1b98:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    1b9a:	4b11      	ldr	r3, [pc, #68]	; (1be0 <udc_next_desc_in_iface+0x48>)
    1b9c:	681b      	ldr	r3, [r3, #0]
    1b9e:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1ba0:	7894      	ldrb	r4, [r2, #2]
    1ba2:	78d3      	ldrb	r3, [r2, #3]
    1ba4:	021b      	lsls	r3, r3, #8
    1ba6:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1ba8:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    1baa:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1bac:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    1bae:	4290      	cmp	r0, r2
    1bb0:	d210      	bcs.n	1bd4 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1bb2:	7843      	ldrb	r3, [r0, #1]
    1bb4:	2b04      	cmp	r3, #4
    1bb6:	d00f      	beq.n	1bd8 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1bb8:	428b      	cmp	r3, r1
    1bba:	d00a      	beq.n	1bd2 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    1bbc:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1bbe:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    1bc0:	4290      	cmp	r0, r2
    1bc2:	d205      	bcs.n	1bd0 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1bc4:	7843      	ldrb	r3, [r0, #1]
    1bc6:	2b04      	cmp	r3, #4
    1bc8:	d008      	beq.n	1bdc <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    1bca:	428b      	cmp	r3, r1
    1bcc:	d1f6      	bne.n	1bbc <udc_next_desc_in_iface+0x24>
    1bce:	e000      	b.n	1bd2 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    1bd0:	2000      	movs	r0, #0
}
    1bd2:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    1bd4:	2000      	movs	r0, #0
    1bd6:	e7fc      	b.n	1bd2 <udc_next_desc_in_iface+0x3a>
    1bd8:	2000      	movs	r0, #0
    1bda:	e7fa      	b.n	1bd2 <udc_next_desc_in_iface+0x3a>
    1bdc:	2000      	movs	r0, #0
    1bde:	e7f8      	b.n	1bd2 <udc_next_desc_in_iface+0x3a>
    1be0:	200001f8 	.word	0x200001f8

00001be4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    1be4:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1be6:	4b03      	ldr	r3, [pc, #12]	; (1bf4 <udc_valid_address+0x10>)
    1be8:	885b      	ldrh	r3, [r3, #2]
    1bea:	207f      	movs	r0, #127	; 0x7f
    1bec:	4018      	ands	r0, r3
    1bee:	4b02      	ldr	r3, [pc, #8]	; (1bf8 <udc_valid_address+0x14>)
    1bf0:	4798      	blx	r3
}
    1bf2:	bd10      	pop	{r4, pc}
    1bf4:	20000608 	.word	0x20000608
    1bf8:	00003925 	.word	0x00003925

00001bfc <udc_update_iface_desc>:
{
    1bfc:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    1bfe:	4b19      	ldr	r3, [pc, #100]	; (1c64 <udc_update_iface_desc+0x68>)
    1c00:	781b      	ldrb	r3, [r3, #0]
		return false;
    1c02:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    1c04:	2b00      	cmp	r3, #0
    1c06:	d029      	beq.n	1c5c <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1c08:	4b17      	ldr	r3, [pc, #92]	; (1c68 <udc_update_iface_desc+0x6c>)
    1c0a:	681b      	ldr	r3, [r3, #0]
    1c0c:	681b      	ldr	r3, [r3, #0]
    1c0e:	791c      	ldrb	r4, [r3, #4]
    1c10:	4284      	cmp	r4, r0
    1c12:	d923      	bls.n	1c5c <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1c14:	4a15      	ldr	r2, [pc, #84]	; (1c6c <udc_update_iface_desc+0x70>)
    1c16:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1c18:	789a      	ldrb	r2, [r3, #2]
    1c1a:	78dc      	ldrb	r4, [r3, #3]
    1c1c:	0224      	lsls	r4, r4, #8
    1c1e:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1c20:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    1c22:	42a3      	cmp	r3, r4
    1c24:	d21c      	bcs.n	1c60 <udc_update_iface_desc+0x64>
    1c26:	2500      	movs	r5, #0
    1c28:	2601      	movs	r6, #1
    1c2a:	e007      	b.n	1c3c <udc_update_iface_desc+0x40>
    1c2c:	4a0f      	ldr	r2, [pc, #60]	; (1c6c <udc_update_iface_desc+0x70>)
    1c2e:	6013      	str	r3, [r2, #0]
    1c30:	e00f      	b.n	1c52 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    1c32:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1c34:	189b      	adds	r3, r3, r2
    1c36:	0035      	movs	r5, r6
	while (ptr_end_desc >
    1c38:	42a3      	cmp	r3, r4
    1c3a:	d20c      	bcs.n	1c56 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    1c3c:	785a      	ldrb	r2, [r3, #1]
    1c3e:	2a04      	cmp	r2, #4
    1c40:	d1f7      	bne.n	1c32 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1c42:	789a      	ldrb	r2, [r3, #2]
    1c44:	4282      	cmp	r2, r0
    1c46:	d1f4      	bne.n	1c32 <udc_update_iface_desc+0x36>
    1c48:	78da      	ldrb	r2, [r3, #3]
    1c4a:	428a      	cmp	r2, r1
    1c4c:	d1f1      	bne.n	1c32 <udc_update_iface_desc+0x36>
    1c4e:	2d00      	cmp	r5, #0
    1c50:	d1ec      	bne.n	1c2c <udc_update_iface_desc+0x30>
				return true; // Interface found
    1c52:	2201      	movs	r2, #1
    1c54:	e002      	b.n	1c5c <udc_update_iface_desc+0x60>
    1c56:	4a05      	ldr	r2, [pc, #20]	; (1c6c <udc_update_iface_desc+0x70>)
    1c58:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    1c5a:	2200      	movs	r2, #0
}
    1c5c:	0010      	movs	r0, r2
    1c5e:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    1c60:	2200      	movs	r2, #0
    1c62:	e7fb      	b.n	1c5c <udc_update_iface_desc+0x60>
    1c64:	200001f4 	.word	0x200001f4
    1c68:	200001f8 	.word	0x200001f8
    1c6c:	200001fc 	.word	0x200001fc

00001c70 <udc_iface_disable>:
{
    1c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c72:	46c6      	mov	lr, r8
    1c74:	b500      	push	{lr}
    1c76:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1c78:	2100      	movs	r1, #0
    1c7a:	4b13      	ldr	r3, [pc, #76]	; (1cc8 <udc_iface_disable+0x58>)
    1c7c:	4798      	blx	r3
    1c7e:	1e05      	subs	r5, r0, #0
    1c80:	d103      	bne.n	1c8a <udc_iface_disable+0x1a>
}
    1c82:	0028      	movs	r0, r5
    1c84:	bc04      	pop	{r2}
    1c86:	4690      	mov	r8, r2
    1c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c8a:	4b10      	ldr	r3, [pc, #64]	; (1ccc <udc_iface_disable+0x5c>)
    1c8c:	681b      	ldr	r3, [r3, #0]
    1c8e:	685b      	ldr	r3, [r3, #4]
    1c90:	00a2      	lsls	r2, r4, #2
    1c92:	58d3      	ldr	r3, [r2, r3]
    1c94:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c96:	68db      	ldr	r3, [r3, #12]
    1c98:	4798      	blx	r3
    1c9a:	0001      	movs	r1, r0
    1c9c:	0020      	movs	r0, r4
    1c9e:	4b0a      	ldr	r3, [pc, #40]	; (1cc8 <udc_iface_disable+0x58>)
    1ca0:	4798      	blx	r3
    1ca2:	1e05      	subs	r5, r0, #0
    1ca4:	d0ed      	beq.n	1c82 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1ca6:	4b0a      	ldr	r3, [pc, #40]	; (1cd0 <udc_iface_disable+0x60>)
    1ca8:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1caa:	4e0a      	ldr	r6, [pc, #40]	; (1cd4 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    1cac:	4f0a      	ldr	r7, [pc, #40]	; (1cd8 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1cae:	2105      	movs	r1, #5
    1cb0:	0020      	movs	r0, r4
    1cb2:	47b0      	blx	r6
    1cb4:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    1cb6:	d002      	beq.n	1cbe <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    1cb8:	7880      	ldrb	r0, [r0, #2]
    1cba:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1cbc:	e7f7      	b.n	1cae <udc_iface_disable+0x3e>
	udi_api->disable();
    1cbe:	4643      	mov	r3, r8
    1cc0:	685b      	ldr	r3, [r3, #4]
    1cc2:	4798      	blx	r3
	return true;
    1cc4:	e7dd      	b.n	1c82 <udc_iface_disable+0x12>
    1cc6:	46c0      	nop			; (mov r8, r8)
    1cc8:	00001bfd 	.word	0x00001bfd
    1ccc:	200001f8 	.word	0x200001f8
    1cd0:	200001fc 	.word	0x200001fc
    1cd4:	00001b99 	.word	0x00001b99
    1cd8:	0000340d 	.word	0x0000340d

00001cdc <udc_iface_enable>:
{
    1cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cde:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    1ce0:	4b0f      	ldr	r3, [pc, #60]	; (1d20 <udc_iface_enable+0x44>)
    1ce2:	4798      	blx	r3
    1ce4:	2800      	cmp	r0, #0
    1ce6:	d019      	beq.n	1d1c <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1ce8:	4b0e      	ldr	r3, [pc, #56]	; (1d24 <udc_iface_enable+0x48>)
    1cea:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1cec:	4e0e      	ldr	r6, [pc, #56]	; (1d28 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1cee:	4f0f      	ldr	r7, [pc, #60]	; (1d2c <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1cf0:	2105      	movs	r1, #5
    1cf2:	0020      	movs	r0, r4
    1cf4:	47b0      	blx	r6
    1cf6:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    1cf8:	d009      	beq.n	1d0e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1cfa:	7903      	ldrb	r3, [r0, #4]
    1cfc:	7942      	ldrb	r2, [r0, #5]
    1cfe:	0212      	lsls	r2, r2, #8
    1d00:	431a      	orrs	r2, r3
    1d02:	78c1      	ldrb	r1, [r0, #3]
    1d04:	7880      	ldrb	r0, [r0, #2]
    1d06:	47b8      	blx	r7
    1d08:	2800      	cmp	r0, #0
    1d0a:	d1f1      	bne.n	1cf0 <udc_iface_enable+0x14>
    1d0c:	e006      	b.n	1d1c <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    1d0e:	4b08      	ldr	r3, [pc, #32]	; (1d30 <udc_iface_enable+0x54>)
    1d10:	681b      	ldr	r3, [r3, #0]
    1d12:	685b      	ldr	r3, [r3, #4]
    1d14:	00ad      	lsls	r5, r5, #2
    1d16:	58eb      	ldr	r3, [r5, r3]
    1d18:	681b      	ldr	r3, [r3, #0]
    1d1a:	4798      	blx	r3
}
    1d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	00001bfd 	.word	0x00001bfd
    1d24:	200001fc 	.word	0x200001fc
    1d28:	00001b99 	.word	0x00001b99
    1d2c:	00003465 	.word	0x00003465
    1d30:	200001f8 	.word	0x200001f8

00001d34 <udc_start>:
{
    1d34:	b510      	push	{r4, lr}
	udd_enable();
    1d36:	4b01      	ldr	r3, [pc, #4]	; (1d3c <udc_start+0x8>)
    1d38:	4798      	blx	r3
}
    1d3a:	bd10      	pop	{r4, pc}
    1d3c:	00003a31 	.word	0x00003a31

00001d40 <udc_reset>:
{
    1d40:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1d42:	4b0e      	ldr	r3, [pc, #56]	; (1d7c <udc_reset+0x3c>)
    1d44:	781b      	ldrb	r3, [r3, #0]
    1d46:	2b00      	cmp	r3, #0
    1d48:	d011      	beq.n	1d6e <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d4a:	4b0d      	ldr	r3, [pc, #52]	; (1d80 <udc_reset+0x40>)
    1d4c:	681b      	ldr	r3, [r3, #0]
    1d4e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1d50:	791b      	ldrb	r3, [r3, #4]
    1d52:	2b00      	cmp	r3, #0
    1d54:	d00b      	beq.n	1d6e <udc_reset+0x2e>
    1d56:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    1d58:	4e0a      	ldr	r6, [pc, #40]	; (1d84 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d5a:	4d09      	ldr	r5, [pc, #36]	; (1d80 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    1d5c:	0020      	movs	r0, r4
    1d5e:	47b0      	blx	r6
				iface_num++) {
    1d60:	3401      	adds	r4, #1
    1d62:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d64:	682b      	ldr	r3, [r5, #0]
    1d66:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1d68:	791b      	ldrb	r3, [r3, #4]
    1d6a:	42a3      	cmp	r3, r4
    1d6c:	d8f6      	bhi.n	1d5c <udc_reset+0x1c>
	udc_num_configuration = 0;
    1d6e:	2200      	movs	r2, #0
    1d70:	4b02      	ldr	r3, [pc, #8]	; (1d7c <udc_reset+0x3c>)
    1d72:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    1d74:	3201      	adds	r2, #1
    1d76:	4b04      	ldr	r3, [pc, #16]	; (1d88 <udc_reset+0x48>)
    1d78:	801a      	strh	r2, [r3, #0]
}
    1d7a:	bd70      	pop	{r4, r5, r6, pc}
    1d7c:	200001f4 	.word	0x200001f4
    1d80:	200001f8 	.word	0x200001f8
    1d84:	00001c71 	.word	0x00001c71
    1d88:	200001ea 	.word	0x200001ea

00001d8c <udc_sof_notify>:
{
    1d8c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1d8e:	4b0e      	ldr	r3, [pc, #56]	; (1dc8 <udc_sof_notify+0x3c>)
    1d90:	781b      	ldrb	r3, [r3, #0]
    1d92:	2b00      	cmp	r3, #0
    1d94:	d017      	beq.n	1dc6 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d96:	4b0d      	ldr	r3, [pc, #52]	; (1dcc <udc_sof_notify+0x40>)
    1d98:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1d9a:	681a      	ldr	r2, [r3, #0]
    1d9c:	7912      	ldrb	r2, [r2, #4]
    1d9e:	2a00      	cmp	r2, #0
    1da0:	d011      	beq.n	1dc6 <udc_sof_notify+0x3a>
    1da2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1da4:	4d09      	ldr	r5, [pc, #36]	; (1dcc <udc_sof_notify+0x40>)
    1da6:	e006      	b.n	1db6 <udc_sof_notify+0x2a>
				iface_num++) {
    1da8:	3401      	adds	r4, #1
    1daa:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1dac:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    1dae:	681a      	ldr	r2, [r3, #0]
    1db0:	7912      	ldrb	r2, [r2, #4]
    1db2:	42a2      	cmp	r2, r4
    1db4:	d907      	bls.n	1dc6 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1db6:	685b      	ldr	r3, [r3, #4]
    1db8:	00a2      	lsls	r2, r4, #2
    1dba:	58d3      	ldr	r3, [r2, r3]
    1dbc:	691b      	ldr	r3, [r3, #16]
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d0f2      	beq.n	1da8 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1dc2:	4798      	blx	r3
    1dc4:	e7f0      	b.n	1da8 <udc_sof_notify+0x1c>
}
    1dc6:	bd70      	pop	{r4, r5, r6, pc}
    1dc8:	200001f4 	.word	0x200001f4
    1dcc:	200001f8 	.word	0x200001f8

00001dd0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1dd2:	4bac      	ldr	r3, [pc, #688]	; (2084 <STACK_SIZE+0x84>)
    1dd4:	2200      	movs	r2, #0
    1dd6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1dd8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1dda:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    1ddc:	781b      	ldrb	r3, [r3, #0]
    1dde:	b25a      	sxtb	r2, r3
    1de0:	2a00      	cmp	r2, #0
    1de2:	db13      	blt.n	1e0c <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1de4:	2260      	movs	r2, #96	; 0x60
    1de6:	421a      	tst	r2, r3
    1de8:	d100      	bne.n	1dec <udc_process_setup+0x1c>
    1dea:	e0da      	b.n	1fa2 <udc_process_setup+0x1d2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1dec:	4ba5      	ldr	r3, [pc, #660]	; (2084 <STACK_SIZE+0x84>)
    1dee:	781a      	ldrb	r2, [r3, #0]
    1df0:	231f      	movs	r3, #31
    1df2:	4013      	ands	r3, r2
    1df4:	2b01      	cmp	r3, #1
    1df6:	d100      	bne.n	1dfa <udc_process_setup+0x2a>
    1df8:	e176      	b.n	20e8 <STACK_SIZE+0xe8>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1dfa:	4ba2      	ldr	r3, [pc, #648]	; (2084 <STACK_SIZE+0x84>)
    1dfc:	781a      	ldrb	r2, [r3, #0]
    1dfe:	231f      	movs	r3, #31
    1e00:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1e02:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1e04:	2b02      	cmp	r3, #2
    1e06:	d100      	bne.n	1e0a <udc_process_setup+0x3a>
    1e08:	e1cc      	b.n	21a4 <STACK_SIZE+0x1a4>
#endif
}
    1e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    1e0c:	4a9d      	ldr	r2, [pc, #628]	; (2084 <STACK_SIZE+0x84>)
    1e0e:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    1e10:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    1e12:	2a00      	cmp	r2, #0
    1e14:	d0f9      	beq.n	1e0a <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1e16:	2160      	movs	r1, #96	; 0x60
    1e18:	4219      	tst	r1, r3
    1e1a:	d1e7      	bne.n	1dec <udc_process_setup+0x1c>
    1e1c:	211f      	movs	r1, #31
    1e1e:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1e20:	d108      	bne.n	1e34 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    1e22:	4998      	ldr	r1, [pc, #608]	; (2084 <STACK_SIZE+0x84>)
    1e24:	7849      	ldrb	r1, [r1, #1]
    1e26:	2906      	cmp	r1, #6
    1e28:	d023      	beq.n	1e72 <udc_process_setup+0xa2>
    1e2a:	2908      	cmp	r1, #8
    1e2c:	d100      	bne.n	1e30 <udc_process_setup+0x60>
    1e2e:	e087      	b.n	1f40 <udc_process_setup+0x170>
    1e30:	2900      	cmp	r1, #0
    1e32:	d017      	beq.n	1e64 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1e34:	2b01      	cmp	r3, #1
    1e36:	d100      	bne.n	1e3a <udc_process_setup+0x6a>
    1e38:	e08a      	b.n	1f50 <udc_process_setup+0x180>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1e3a:	2b02      	cmp	r3, #2
    1e3c:	d1d6      	bne.n	1dec <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1e3e:	4b91      	ldr	r3, [pc, #580]	; (2084 <STACK_SIZE+0x84>)
    1e40:	785b      	ldrb	r3, [r3, #1]
	return false;
    1e42:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    1e44:	2b00      	cmp	r3, #0
    1e46:	d000      	beq.n	1e4a <udc_process_setup+0x7a>
    1e48:	e1a8      	b.n	219c <STACK_SIZE+0x19c>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1e4a:	2a02      	cmp	r2, #2
    1e4c:	d1d5      	bne.n	1dfa <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1e4e:	4b8d      	ldr	r3, [pc, #564]	; (2084 <STACK_SIZE+0x84>)
    1e50:	7918      	ldrb	r0, [r3, #4]
    1e52:	4b8d      	ldr	r3, [pc, #564]	; (2088 <STACK_SIZE+0x88>)
    1e54:	4798      	blx	r3
    1e56:	4b8d      	ldr	r3, [pc, #564]	; (208c <STACK_SIZE+0x8c>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    1e58:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1e5a:	2102      	movs	r1, #2
    1e5c:	0018      	movs	r0, r3
    1e5e:	4b8c      	ldr	r3, [pc, #560]	; (2090 <STACK_SIZE+0x90>)
    1e60:	4798      	blx	r3
    1e62:	e0ff      	b.n	2064 <STACK_SIZE+0x64>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1e64:	2a02      	cmp	r2, #2
    1e66:	d1c8      	bne.n	1dfa <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1e68:	3102      	adds	r1, #2
    1e6a:	488a      	ldr	r0, [pc, #552]	; (2094 <STACK_SIZE+0x94>)
    1e6c:	4b88      	ldr	r3, [pc, #544]	; (2090 <STACK_SIZE+0x90>)
    1e6e:	4798      	blx	r3
    1e70:	e0f8      	b.n	2064 <STACK_SIZE+0x64>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1e72:	4b84      	ldr	r3, [pc, #528]	; (2084 <STACK_SIZE+0x84>)
    1e74:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1e76:	0a13      	lsrs	r3, r2, #8
    1e78:	2b02      	cmp	r3, #2
    1e7a:	d023      	beq.n	1ec4 <udc_process_setup+0xf4>
    1e7c:	b2d9      	uxtb	r1, r3
    1e7e:	2902      	cmp	r1, #2
    1e80:	d90f      	bls.n	1ea2 <udc_process_setup+0xd2>
    1e82:	2b03      	cmp	r3, #3
    1e84:	d034      	beq.n	1ef0 <udc_process_setup+0x120>
    1e86:	2b0f      	cmp	r3, #15
    1e88:	d000      	beq.n	1e8c <udc_process_setup+0xbc>
    1e8a:	e184      	b.n	2196 <STACK_SIZE+0x196>
		if (udc_config.conf_bos == NULL) {
    1e8c:	4b82      	ldr	r3, [pc, #520]	; (2098 <STACK_SIZE+0x98>)
    1e8e:	6898      	ldr	r0, [r3, #8]
    1e90:	2800      	cmp	r0, #0
    1e92:	d0b2      	beq.n	1dfa <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1e94:	7883      	ldrb	r3, [r0, #2]
    1e96:	78c1      	ldrb	r1, [r0, #3]
    1e98:	0209      	lsls	r1, r1, #8
    1e9a:	4319      	orrs	r1, r3
    1e9c:	4b7c      	ldr	r3, [pc, #496]	; (2090 <STACK_SIZE+0x90>)
    1e9e:	4798      	blx	r3
    1ea0:	e007      	b.n	1eb2 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1ea2:	2b01      	cmp	r3, #1
    1ea4:	d000      	beq.n	1ea8 <udc_process_setup+0xd8>
    1ea6:	e176      	b.n	2196 <STACK_SIZE+0x196>
				(uint8_t *) udc_config.confdev_lsfs,
    1ea8:	4b7b      	ldr	r3, [pc, #492]	; (2098 <STACK_SIZE+0x98>)
    1eaa:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    1eac:	7801      	ldrb	r1, [r0, #0]
    1eae:	4b78      	ldr	r3, [pc, #480]	; (2090 <STACK_SIZE+0x90>)
    1eb0:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1eb2:	4b74      	ldr	r3, [pc, #464]	; (2084 <STACK_SIZE+0x84>)
    1eb4:	88da      	ldrh	r2, [r3, #6]
    1eb6:	899b      	ldrh	r3, [r3, #12]
    1eb8:	4293      	cmp	r3, r2
    1eba:	d800      	bhi.n	1ebe <udc_process_setup+0xee>
    1ebc:	e0d2      	b.n	2064 <STACK_SIZE+0x64>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1ebe:	4b71      	ldr	r3, [pc, #452]	; (2084 <STACK_SIZE+0x84>)
    1ec0:	819a      	strh	r2, [r3, #12]
    1ec2:	e0cf      	b.n	2064 <STACK_SIZE+0x64>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1ec4:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    1ec6:	4b74      	ldr	r3, [pc, #464]	; (2098 <STACK_SIZE+0x98>)
    1ec8:	681b      	ldr	r3, [r3, #0]
    1eca:	7c5b      	ldrb	r3, [r3, #17]
    1ecc:	4293      	cmp	r3, r2
    1ece:	d800      	bhi.n	1ed2 <udc_process_setup+0x102>
    1ed0:	e793      	b.n	1dfa <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1ed2:	4b71      	ldr	r3, [pc, #452]	; (2098 <STACK_SIZE+0x98>)
    1ed4:	685b      	ldr	r3, [r3, #4]
    1ed6:	00d2      	lsls	r2, r2, #3
    1ed8:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    1eda:	7883      	ldrb	r3, [r0, #2]
    1edc:	78c1      	ldrb	r1, [r0, #3]
    1ede:	0209      	lsls	r1, r1, #8
    1ee0:	4319      	orrs	r1, r3
    1ee2:	4b6b      	ldr	r3, [pc, #428]	; (2090 <STACK_SIZE+0x90>)
    1ee4:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1ee6:	4b67      	ldr	r3, [pc, #412]	; (2084 <STACK_SIZE+0x84>)
    1ee8:	689b      	ldr	r3, [r3, #8]
    1eea:	2202      	movs	r2, #2
    1eec:	705a      	strb	r2, [r3, #1]
    1eee:	e7e0      	b.n	1eb2 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1ef0:	23ff      	movs	r3, #255	; 0xff
    1ef2:	401a      	ands	r2, r3
    1ef4:	2a01      	cmp	r2, #1
    1ef6:	d020      	beq.n	1f3a <udc_process_setup+0x16a>
    1ef8:	2a00      	cmp	r2, #0
    1efa:	d019      	beq.n	1f30 <udc_process_setup+0x160>
    1efc:	2a02      	cmp	r2, #2
    1efe:	d100      	bne.n	1f02 <udc_process_setup+0x132>
    1f00:	e178      	b.n	21f4 <STACK_SIZE+0x1f4>
    1f02:	2a03      	cmp	r2, #3
    1f04:	d000      	beq.n	1f08 <udc_process_setup+0x138>
    1f06:	e771      	b.n	1dec <udc_process_setup+0x1c>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1f08:	210c      	movs	r1, #12
		str = udc_get_string_serial_name();
    1f0a:	4c64      	ldr	r4, [pc, #400]	; (209c <STACK_SIZE+0x9c>)
    1f0c:	4a64      	ldr	r2, [pc, #400]	; (20a0 <STACK_SIZE+0xa0>)
    1f0e:	3202      	adds	r2, #2
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1f10:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1f12:	5ce0      	ldrb	r0, [r4, r3]
    1f14:	8010      	strh	r0, [r2, #0]
    1f16:	3301      	adds	r3, #1
    1f18:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    1f1a:	b2d8      	uxtb	r0, r3
    1f1c:	4281      	cmp	r1, r0
    1f1e:	d8f8      	bhi.n	1f12 <udc_process_setup+0x142>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1f20:	0049      	lsls	r1, r1, #1
    1f22:	3102      	adds	r1, #2
    1f24:	485e      	ldr	r0, [pc, #376]	; (20a0 <STACK_SIZE+0xa0>)
    1f26:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    1f28:	b289      	uxth	r1, r1
    1f2a:	4b59      	ldr	r3, [pc, #356]	; (2090 <STACK_SIZE+0x90>)
    1f2c:	4798      	blx	r3
    1f2e:	e7c0      	b.n	1eb2 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1f30:	2104      	movs	r1, #4
    1f32:	485c      	ldr	r0, [pc, #368]	; (20a4 <STACK_SIZE+0xa4>)
    1f34:	4b56      	ldr	r3, [pc, #344]	; (2090 <STACK_SIZE+0x90>)
    1f36:	4798      	blx	r3
    1f38:	e7bb      	b.n	1eb2 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    1f3a:	4c5b      	ldr	r4, [pc, #364]	; (20a8 <STACK_SIZE+0xa8>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1f3c:	2109      	movs	r1, #9
    1f3e:	e7e5      	b.n	1f0c <udc_process_setup+0x13c>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1f40:	2a01      	cmp	r2, #1
    1f42:	d000      	beq.n	1f46 <udc_process_setup+0x176>
    1f44:	e759      	b.n	1dfa <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    1f46:	2101      	movs	r1, #1
    1f48:	4858      	ldr	r0, [pc, #352]	; (20ac <STACK_SIZE+0xac>)
    1f4a:	4b51      	ldr	r3, [pc, #324]	; (2090 <STACK_SIZE+0x90>)
    1f4c:	4798      	blx	r3
    1f4e:	e089      	b.n	2064 <STACK_SIZE+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    1f50:	494c      	ldr	r1, [pc, #304]	; (2084 <STACK_SIZE+0x84>)
    1f52:	7849      	ldrb	r1, [r1, #1]
    1f54:	290a      	cmp	r1, #10
    1f56:	d000      	beq.n	1f5a <udc_process_setup+0x18a>
    1f58:	e76f      	b.n	1e3a <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1f5a:	2a01      	cmp	r2, #1
    1f5c:	d000      	beq.n	1f60 <udc_process_setup+0x190>
    1f5e:	e0c3      	b.n	20e8 <STACK_SIZE+0xe8>
	if (!udc_num_configuration) {
    1f60:	4b52      	ldr	r3, [pc, #328]	; (20ac <STACK_SIZE+0xac>)
    1f62:	781b      	ldrb	r3, [r3, #0]
    1f64:	2b00      	cmp	r3, #0
    1f66:	d100      	bne.n	1f6a <udc_process_setup+0x19a>
    1f68:	e0be      	b.n	20e8 <STACK_SIZE+0xe8>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1f6a:	4b46      	ldr	r3, [pc, #280]	; (2084 <STACK_SIZE+0x84>)
    1f6c:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1f6e:	4b50      	ldr	r3, [pc, #320]	; (20b0 <STACK_SIZE+0xb0>)
    1f70:	681d      	ldr	r5, [r3, #0]
    1f72:	682b      	ldr	r3, [r5, #0]
    1f74:	791b      	ldrb	r3, [r3, #4]
    1f76:	42a3      	cmp	r3, r4
    1f78:	d800      	bhi.n	1f7c <udc_process_setup+0x1ac>
    1f7a:	e0b5      	b.n	20e8 <STACK_SIZE+0xe8>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1f7c:	2100      	movs	r1, #0
    1f7e:	0020      	movs	r0, r4
    1f80:	4b4c      	ldr	r3, [pc, #304]	; (20b4 <STACK_SIZE+0xb4>)
    1f82:	4798      	blx	r3
    1f84:	2800      	cmp	r0, #0
    1f86:	d100      	bne.n	1f8a <udc_process_setup+0x1ba>
    1f88:	e730      	b.n	1dec <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1f8a:	686b      	ldr	r3, [r5, #4]
    1f8c:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    1f8e:	58e3      	ldr	r3, [r4, r3]
    1f90:	68db      	ldr	r3, [r3, #12]
    1f92:	4798      	blx	r3
    1f94:	4b48      	ldr	r3, [pc, #288]	; (20b8 <STACK_SIZE+0xb8>)
    1f96:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    1f98:	2101      	movs	r1, #1
    1f9a:	0018      	movs	r0, r3
    1f9c:	4b3c      	ldr	r3, [pc, #240]	; (2090 <STACK_SIZE+0x90>)
    1f9e:	4798      	blx	r3
    1fa0:	e060      	b.n	2064 <STACK_SIZE+0x64>
    1fa2:	221f      	movs	r2, #31
    1fa4:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1fa6:	d15f      	bne.n	2068 <STACK_SIZE+0x68>
			switch (udd_g_ctrlreq.req.bRequest) {
    1fa8:	4a36      	ldr	r2, [pc, #216]	; (2084 <STACK_SIZE+0x84>)
    1faa:	7852      	ldrb	r2, [r2, #1]
    1fac:	2a03      	cmp	r2, #3
    1fae:	d100      	bne.n	1fb2 <udc_process_setup+0x1e2>
    1fb0:	e0f3      	b.n	219a <STACK_SIZE+0x19a>
    1fb2:	b2d1      	uxtb	r1, r2
    1fb4:	2903      	cmp	r1, #3
    1fb6:	d93b      	bls.n	2030 <STACK_SIZE+0x30>
    1fb8:	2a05      	cmp	r2, #5
    1fba:	d04b      	beq.n	2054 <STACK_SIZE+0x54>
    1fbc:	2a09      	cmp	r2, #9
    1fbe:	d153      	bne.n	2068 <STACK_SIZE+0x68>
	if (udd_g_ctrlreq.req.wLength) {
    1fc0:	4b30      	ldr	r3, [pc, #192]	; (2084 <STACK_SIZE+0x84>)
    1fc2:	88db      	ldrh	r3, [r3, #6]
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d000      	beq.n	1fca <udc_process_setup+0x1fa>
    1fc8:	e717      	b.n	1dfa <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    1fca:	4b3c      	ldr	r3, [pc, #240]	; (20bc <STACK_SIZE+0xbc>)
    1fcc:	4798      	blx	r3
    1fce:	2800      	cmp	r0, #0
    1fd0:	d100      	bne.n	1fd4 <udc_process_setup+0x204>
    1fd2:	e70b      	b.n	1dec <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1fd4:	4b2b      	ldr	r3, [pc, #172]	; (2084 <STACK_SIZE+0x84>)
    1fd6:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1fd8:	4b2f      	ldr	r3, [pc, #188]	; (2098 <STACK_SIZE+0x98>)
    1fda:	681b      	ldr	r3, [r3, #0]
    1fdc:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1fde:	429a      	cmp	r2, r3
    1fe0:	dd00      	ble.n	1fe4 <udc_process_setup+0x214>
    1fe2:	e703      	b.n	1dec <udc_process_setup+0x1c>
	udc_reset();
    1fe4:	4b36      	ldr	r3, [pc, #216]	; (20c0 <STACK_SIZE+0xc0>)
    1fe6:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1fe8:	4b26      	ldr	r3, [pc, #152]	; (2084 <STACK_SIZE+0x84>)
    1fea:	789b      	ldrb	r3, [r3, #2]
    1fec:	4a2f      	ldr	r2, [pc, #188]	; (20ac <STACK_SIZE+0xac>)
    1fee:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    1ff0:	2b00      	cmp	r3, #0
    1ff2:	d037      	beq.n	2064 <STACK_SIZE+0x64>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1ff4:	4a33      	ldr	r2, [pc, #204]	; (20c4 <STACK_SIZE+0xc4>)
    1ff6:	4694      	mov	ip, r2
    1ff8:	4463      	add	r3, ip
    1ffa:	00db      	lsls	r3, r3, #3
    1ffc:	4a26      	ldr	r2, [pc, #152]	; (2098 <STACK_SIZE+0x98>)
    1ffe:	6852      	ldr	r2, [r2, #4]
    2000:	18d3      	adds	r3, r2, r3
    2002:	4a2b      	ldr	r2, [pc, #172]	; (20b0 <STACK_SIZE+0xb0>)
    2004:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2006:	681b      	ldr	r3, [r3, #0]
    2008:	791b      	ldrb	r3, [r3, #4]
    200a:	2b00      	cmp	r3, #0
    200c:	d02a      	beq.n	2064 <STACK_SIZE+0x64>
    200e:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    2010:	4d2d      	ldr	r5, [pc, #180]	; (20c8 <STACK_SIZE+0xc8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2012:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    2014:	2100      	movs	r1, #0
    2016:	0020      	movs	r0, r4
    2018:	47a8      	blx	r5
    201a:	2800      	cmp	r0, #0
    201c:	d100      	bne.n	2020 <STACK_SIZE+0x20>
    201e:	e6e5      	b.n	1dec <udc_process_setup+0x1c>
			iface_num++) {
    2020:	3401      	adds	r4, #1
    2022:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2024:	6833      	ldr	r3, [r6, #0]
    2026:	681b      	ldr	r3, [r3, #0]
    2028:	791b      	ldrb	r3, [r3, #4]
    202a:	42a3      	cmp	r3, r4
    202c:	d8f2      	bhi.n	2014 <STACK_SIZE+0x14>
    202e:	e019      	b.n	2064 <STACK_SIZE+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    2030:	2a01      	cmp	r2, #1
    2032:	d119      	bne.n	2068 <STACK_SIZE+0x68>
	if (udd_g_ctrlreq.req.wLength) {
    2034:	4b13      	ldr	r3, [pc, #76]	; (2084 <STACK_SIZE+0x84>)
    2036:	88db      	ldrh	r3, [r3, #6]
    2038:	2b00      	cmp	r3, #0
    203a:	d000      	beq.n	203e <STACK_SIZE+0x3e>
    203c:	e6dd      	b.n	1dfa <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    203e:	4b11      	ldr	r3, [pc, #68]	; (2084 <STACK_SIZE+0x84>)
    2040:	885b      	ldrh	r3, [r3, #2]
    2042:	2b01      	cmp	r3, #1
    2044:	d000      	beq.n	2048 <STACK_SIZE+0x48>
    2046:	e6d8      	b.n	1dfa <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    2048:	4a12      	ldr	r2, [pc, #72]	; (2094 <STACK_SIZE+0x94>)
    204a:	8813      	ldrh	r3, [r2, #0]
    204c:	2102      	movs	r1, #2
    204e:	438b      	bics	r3, r1
    2050:	8013      	strh	r3, [r2, #0]
    2052:	e007      	b.n	2064 <STACK_SIZE+0x64>
	if (udd_g_ctrlreq.req.wLength) {
    2054:	4b0b      	ldr	r3, [pc, #44]	; (2084 <STACK_SIZE+0x84>)
    2056:	88db      	ldrh	r3, [r3, #6]
    2058:	2b00      	cmp	r3, #0
    205a:	d000      	beq.n	205e <STACK_SIZE+0x5e>
    205c:	e6cd      	b.n	1dfa <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    205e:	4a1b      	ldr	r2, [pc, #108]	; (20cc <STACK_SIZE+0xcc>)
    2060:	4b08      	ldr	r3, [pc, #32]	; (2084 <STACK_SIZE+0x84>)
    2062:	611a      	str	r2, [r3, #16]
			return true;
    2064:	2001      	movs	r0, #1
    2066:	e6d0      	b.n	1e0a <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2068:	2b01      	cmp	r3, #1
    206a:	d031      	beq.n	20d0 <STACK_SIZE+0xd0>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    206c:	2b02      	cmp	r3, #2
    206e:	d000      	beq.n	2072 <STACK_SIZE+0x72>
    2070:	e6bc      	b.n	1dec <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    2072:	4b04      	ldr	r3, [pc, #16]	; (2084 <STACK_SIZE+0x84>)
    2074:	785b      	ldrb	r3, [r3, #1]
    2076:	2b01      	cmp	r3, #1
    2078:	d06c      	beq.n	2154 <STACK_SIZE+0x154>
    207a:	2b03      	cmp	r3, #3
    207c:	d100      	bne.n	2080 <STACK_SIZE+0x80>
    207e:	e078      	b.n	2172 <STACK_SIZE+0x172>
	return false;
    2080:	2000      	movs	r0, #0
    2082:	e08b      	b.n	219c <STACK_SIZE+0x19c>
    2084:	20000608 	.word	0x20000608
    2088:	0000356d 	.word	0x0000356d
    208c:	200001ec 	.word	0x200001ec
    2090:	00003945 	.word	0x00003945
    2094:	200001ea 	.word	0x200001ea
    2098:	200000ac 	.word	0x200000ac
    209c:	000083b4 	.word	0x000083b4
    20a0:	2000007c 	.word	0x2000007c
    20a4:	20000098 	.word	0x20000098
    20a8:	2000009c 	.word	0x2000009c
    20ac:	200001f4 	.word	0x200001f4
    20b0:	200001f8 	.word	0x200001f8
    20b4:	00001bfd 	.word	0x00001bfd
    20b8:	200001f0 	.word	0x200001f0
    20bc:	00003935 	.word	0x00003935
    20c0:	00001d41 	.word	0x00001d41
    20c4:	1fffffff 	.word	0x1fffffff
    20c8:	00001cdd 	.word	0x00001cdd
    20cc:	00001be5 	.word	0x00001be5
			switch (udd_g_ctrlreq.req.bRequest) {
    20d0:	4a4a      	ldr	r2, [pc, #296]	; (21fc <STACK_SIZE+0x1fc>)
    20d2:	7852      	ldrb	r2, [r2, #1]
    20d4:	2a0b      	cmp	r2, #11
    20d6:	d1c9      	bne.n	206c <STACK_SIZE+0x6c>
	if (udd_g_ctrlreq.req.wLength) {
    20d8:	4b48      	ldr	r3, [pc, #288]	; (21fc <STACK_SIZE+0x1fc>)
    20da:	88db      	ldrh	r3, [r3, #6]
    20dc:	2b00      	cmp	r3, #0
    20de:	d103      	bne.n	20e8 <STACK_SIZE+0xe8>
	if (!udc_num_configuration) {
    20e0:	4b47      	ldr	r3, [pc, #284]	; (2200 <STACK_SIZE+0x200>)
    20e2:	781b      	ldrb	r3, [r3, #0]
    20e4:	2b00      	cmp	r3, #0
    20e6:	d127      	bne.n	2138 <STACK_SIZE+0x138>
	if (0 == udc_num_configuration) {
    20e8:	4b45      	ldr	r3, [pc, #276]	; (2200 <STACK_SIZE+0x200>)
    20ea:	781b      	ldrb	r3, [r3, #0]
	return false;
    20ec:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    20ee:	2b00      	cmp	r3, #0
    20f0:	d100      	bne.n	20f4 <STACK_SIZE+0xf4>
    20f2:	e68a      	b.n	1e0a <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    20f4:	4b41      	ldr	r3, [pc, #260]	; (21fc <STACK_SIZE+0x1fc>)
    20f6:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    20f8:	4b42      	ldr	r3, [pc, #264]	; (2204 <STACK_SIZE+0x204>)
    20fa:	681d      	ldr	r5, [r3, #0]
    20fc:	682b      	ldr	r3, [r5, #0]
    20fe:	791b      	ldrb	r3, [r3, #4]
    2100:	42a3      	cmp	r3, r4
    2102:	d800      	bhi.n	2106 <STACK_SIZE+0x106>
    2104:	e681      	b.n	1e0a <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    2106:	2100      	movs	r1, #0
    2108:	0020      	movs	r0, r4
    210a:	4b3f      	ldr	r3, [pc, #252]	; (2208 <STACK_SIZE+0x208>)
    210c:	4798      	blx	r3
    210e:	2800      	cmp	r0, #0
    2110:	d100      	bne.n	2114 <STACK_SIZE+0x114>
    2112:	e672      	b.n	1dfa <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2114:	686b      	ldr	r3, [r5, #4]
    2116:	00a2      	lsls	r2, r4, #2
    2118:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    211a:	68eb      	ldr	r3, [r5, #12]
    211c:	4798      	blx	r3
    211e:	0001      	movs	r1, r0
    2120:	0020      	movs	r0, r4
    2122:	4b39      	ldr	r3, [pc, #228]	; (2208 <STACK_SIZE+0x208>)
    2124:	4798      	blx	r3
    2126:	2800      	cmp	r0, #0
    2128:	d100      	bne.n	212c <STACK_SIZE+0x12c>
    212a:	e666      	b.n	1dfa <udc_process_setup+0x2a>
	return udi_api->setup();
    212c:	68ab      	ldr	r3, [r5, #8]
    212e:	4798      	blx	r3
		if (udc_req_iface()) {
    2130:	2800      	cmp	r0, #0
    2132:	d000      	beq.n	2136 <STACK_SIZE+0x136>
    2134:	e669      	b.n	1e0a <udc_process_setup+0x3a>
    2136:	e660      	b.n	1dfa <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2138:	4b30      	ldr	r3, [pc, #192]	; (21fc <STACK_SIZE+0x1fc>)
    213a:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    213c:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    213e:	0028      	movs	r0, r5
    2140:	4b32      	ldr	r3, [pc, #200]	; (220c <STACK_SIZE+0x20c>)
    2142:	4798      	blx	r3
    2144:	2800      	cmp	r0, #0
    2146:	d100      	bne.n	214a <STACK_SIZE+0x14a>
    2148:	e650      	b.n	1dec <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    214a:	b2e1      	uxtb	r1, r4
    214c:	0028      	movs	r0, r5
    214e:	4b30      	ldr	r3, [pc, #192]	; (2210 <STACK_SIZE+0x210>)
    2150:	4798      	blx	r3
    2152:	e023      	b.n	219c <STACK_SIZE+0x19c>
	if (udd_g_ctrlreq.req.wLength) {
    2154:	4b29      	ldr	r3, [pc, #164]	; (21fc <STACK_SIZE+0x1fc>)
    2156:	88db      	ldrh	r3, [r3, #6]
    2158:	2b00      	cmp	r3, #0
    215a:	d000      	beq.n	215e <STACK_SIZE+0x15e>
    215c:	e64d      	b.n	1dfa <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    215e:	4b27      	ldr	r3, [pc, #156]	; (21fc <STACK_SIZE+0x1fc>)
    2160:	885b      	ldrh	r3, [r3, #2]
    2162:	2b00      	cmp	r3, #0
    2164:	d000      	beq.n	2168 <STACK_SIZE+0x168>
    2166:	e648      	b.n	1dfa <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2168:	4b24      	ldr	r3, [pc, #144]	; (21fc <STACK_SIZE+0x1fc>)
    216a:	7918      	ldrb	r0, [r3, #4]
    216c:	4b29      	ldr	r3, [pc, #164]	; (2214 <STACK_SIZE+0x214>)
    216e:	4798      	blx	r3
    2170:	e014      	b.n	219c <STACK_SIZE+0x19c>
	if (udd_g_ctrlreq.req.wLength) {
    2172:	4b22      	ldr	r3, [pc, #136]	; (21fc <STACK_SIZE+0x1fc>)
    2174:	88db      	ldrh	r3, [r3, #6]
    2176:	2b00      	cmp	r3, #0
    2178:	d000      	beq.n	217c <STACK_SIZE+0x17c>
    217a:	e63e      	b.n	1dfa <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    217c:	4b1f      	ldr	r3, [pc, #124]	; (21fc <STACK_SIZE+0x1fc>)
    217e:	885b      	ldrh	r3, [r3, #2]
    2180:	2b00      	cmp	r3, #0
    2182:	d000      	beq.n	2186 <STACK_SIZE+0x186>
    2184:	e639      	b.n	1dfa <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    2186:	4c1d      	ldr	r4, [pc, #116]	; (21fc <STACK_SIZE+0x1fc>)
    2188:	7920      	ldrb	r0, [r4, #4]
    218a:	4b23      	ldr	r3, [pc, #140]	; (2218 <STACK_SIZE+0x218>)
    218c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    218e:	7920      	ldrb	r0, [r4, #4]
    2190:	4b22      	ldr	r3, [pc, #136]	; (221c <STACK_SIZE+0x21c>)
    2192:	4798      	blx	r3
    2194:	e002      	b.n	219c <STACK_SIZE+0x19c>
		return false;
    2196:	2000      	movs	r0, #0
    2198:	e000      	b.n	219c <STACK_SIZE+0x19c>
				return udc_req_std_dev_set_feature();
    219a:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    219c:	2800      	cmp	r0, #0
    219e:	d000      	beq.n	21a2 <STACK_SIZE+0x1a2>
    21a0:	e633      	b.n	1e0a <udc_process_setup+0x3a>
    21a2:	e623      	b.n	1dec <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    21a4:	4b16      	ldr	r3, [pc, #88]	; (2200 <STACK_SIZE+0x200>)
    21a6:	781b      	ldrb	r3, [r3, #0]
    21a8:	2b00      	cmp	r3, #0
    21aa:	d100      	bne.n	21ae <STACK_SIZE+0x1ae>
    21ac:	e62d      	b.n	1e0a <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    21ae:	4b15      	ldr	r3, [pc, #84]	; (2204 <STACK_SIZE+0x204>)
    21b0:	681b      	ldr	r3, [r3, #0]
    21b2:	681a      	ldr	r2, [r3, #0]
    21b4:	7912      	ldrb	r2, [r2, #4]
    21b6:	2a00      	cmp	r2, #0
    21b8:	d01a      	beq.n	21f0 <STACK_SIZE+0x1f0>
    21ba:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    21bc:	4e12      	ldr	r6, [pc, #72]	; (2208 <STACK_SIZE+0x208>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    21be:	4f11      	ldr	r7, [pc, #68]	; (2204 <STACK_SIZE+0x204>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    21c0:	685b      	ldr	r3, [r3, #4]
    21c2:	00aa      	lsls	r2, r5, #2
    21c4:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    21c6:	68e3      	ldr	r3, [r4, #12]
    21c8:	4798      	blx	r3
    21ca:	0001      	movs	r1, r0
    21cc:	0028      	movs	r0, r5
    21ce:	47b0      	blx	r6
    21d0:	2800      	cmp	r0, #0
    21d2:	d100      	bne.n	21d6 <STACK_SIZE+0x1d6>
    21d4:	e619      	b.n	1e0a <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    21d6:	68a3      	ldr	r3, [r4, #8]
    21d8:	4798      	blx	r3
    21da:	2800      	cmp	r0, #0
    21dc:	d000      	beq.n	21e0 <STACK_SIZE+0x1e0>
    21de:	e614      	b.n	1e0a <udc_process_setup+0x3a>
			iface_num++) {
    21e0:	3501      	adds	r5, #1
    21e2:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    21e4:	683b      	ldr	r3, [r7, #0]
    21e6:	681a      	ldr	r2, [r3, #0]
    21e8:	7912      	ldrb	r2, [r2, #4]
    21ea:	42aa      	cmp	r2, r5
    21ec:	d8e8      	bhi.n	21c0 <STACK_SIZE+0x1c0>
    21ee:	e60c      	b.n	1e0a <udc_process_setup+0x3a>
	return false;
    21f0:	2000      	movs	r0, #0
    21f2:	e60a      	b.n	1e0a <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    21f4:	2103      	movs	r1, #3
		str = udc_string_product_name;
    21f6:	4c0a      	ldr	r4, [pc, #40]	; (2220 <STACK_SIZE+0x220>)
    21f8:	e688      	b.n	1f0c <udc_process_setup+0x13c>
    21fa:	46c0      	nop			; (mov r8, r8)
    21fc:	20000608 	.word	0x20000608
    2200:	200001f4 	.word	0x200001f4
    2204:	200001f8 	.word	0x200001f8
    2208:	00001bfd 	.word	0x00001bfd
    220c:	00001c71 	.word	0x00001c71
    2210:	00001cdd 	.word	0x00001cdd
    2214:	000036b1 	.word	0x000036b1
    2218:	000033c1 	.word	0x000033c1
    221c:	00003581 	.word	0x00003581
    2220:	200000a8 	.word	0x200000a8

00002224 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    2224:	4a04      	ldr	r2, [pc, #16]	; (2238 <_extint_enable+0x14>)
    2226:	7813      	ldrb	r3, [r2, #0]
    2228:	2102      	movs	r1, #2
    222a:	430b      	orrs	r3, r1
    222c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    222e:	7853      	ldrb	r3, [r2, #1]
    2230:	b25b      	sxtb	r3, r3
    2232:	2b00      	cmp	r3, #0
    2234:	dbfb      	blt.n	222e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2236:	4770      	bx	lr
    2238:	40001800 	.word	0x40001800

0000223c <_system_extint_init>:
{
    223c:	b500      	push	{lr}
    223e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    2240:	4a12      	ldr	r2, [pc, #72]	; (228c <_system_extint_init+0x50>)
    2242:	6993      	ldr	r3, [r2, #24]
    2244:	2140      	movs	r1, #64	; 0x40
    2246:	430b      	orrs	r3, r1
    2248:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    224a:	a901      	add	r1, sp, #4
    224c:	2300      	movs	r3, #0
    224e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    2250:	2005      	movs	r0, #5
    2252:	4b0f      	ldr	r3, [pc, #60]	; (2290 <_system_extint_init+0x54>)
    2254:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    2256:	2005      	movs	r0, #5
    2258:	4b0e      	ldr	r3, [pc, #56]	; (2294 <_system_extint_init+0x58>)
    225a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    225c:	4a0e      	ldr	r2, [pc, #56]	; (2298 <_system_extint_init+0x5c>)
    225e:	7813      	ldrb	r3, [r2, #0]
    2260:	2101      	movs	r1, #1
    2262:	430b      	orrs	r3, r1
    2264:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    2266:	7853      	ldrb	r3, [r2, #1]
    2268:	b25b      	sxtb	r3, r3
    226a:	2b00      	cmp	r3, #0
    226c:	dbfb      	blt.n	2266 <_system_extint_init+0x2a>
    226e:	4b0b      	ldr	r3, [pc, #44]	; (229c <_system_extint_init+0x60>)
    2270:	0019      	movs	r1, r3
    2272:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    2274:	2200      	movs	r2, #0
    2276:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2278:	4299      	cmp	r1, r3
    227a:	d1fc      	bne.n	2276 <_system_extint_init+0x3a>
    227c:	2210      	movs	r2, #16
    227e:	4b08      	ldr	r3, [pc, #32]	; (22a0 <_system_extint_init+0x64>)
    2280:	601a      	str	r2, [r3, #0]
	_extint_enable();
    2282:	4b08      	ldr	r3, [pc, #32]	; (22a4 <_system_extint_init+0x68>)
    2284:	4798      	blx	r3
}
    2286:	b003      	add	sp, #12
    2288:	bd00      	pop	{pc}
    228a:	46c0      	nop			; (mov r8, r8)
    228c:	40000400 	.word	0x40000400
    2290:	000068f5 	.word	0x000068f5
    2294:	00006869 	.word	0x00006869
    2298:	40001800 	.word	0x40001800
    229c:	200003c8 	.word	0x200003c8
    22a0:	e000e100 	.word	0xe000e100
    22a4:	00002225 	.word	0x00002225

000022a8 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    22a8:	2300      	movs	r3, #0
    22aa:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    22ac:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    22ae:	2201      	movs	r2, #1
    22b0:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    22b2:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    22b4:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    22b6:	3302      	adds	r3, #2
    22b8:	72c3      	strb	r3, [r0, #11]
}
    22ba:	4770      	bx	lr

000022bc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    22bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    22be:	b083      	sub	sp, #12
    22c0:	0005      	movs	r5, r0
    22c2:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    22c4:	a901      	add	r1, sp, #4
    22c6:	2300      	movs	r3, #0
    22c8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    22ca:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    22cc:	7923      	ldrb	r3, [r4, #4]
    22ce:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    22d0:	7a23      	ldrb	r3, [r4, #8]
    22d2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    22d4:	7820      	ldrb	r0, [r4, #0]
    22d6:	4b15      	ldr	r3, [pc, #84]	; (232c <extint_chan_set_config+0x70>)
    22d8:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    22da:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    22dc:	2d1f      	cmp	r5, #31
    22de:	d800      	bhi.n	22e2 <extint_chan_set_config+0x26>
		return eics[eic_index];
    22e0:	4813      	ldr	r0, [pc, #76]	; (2330 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    22e2:	2207      	movs	r2, #7
    22e4:	402a      	ands	r2, r5
    22e6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    22e8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    22ea:	7aa3      	ldrb	r3, [r4, #10]
    22ec:	2b00      	cmp	r3, #0
    22ee:	d001      	beq.n	22f4 <extint_chan_set_config+0x38>
    22f0:	2308      	movs	r3, #8
    22f2:	431f      	orrs	r7, r3
    22f4:	08eb      	lsrs	r3, r5, #3
    22f6:	009b      	lsls	r3, r3, #2
    22f8:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    22fa:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    22fc:	260f      	movs	r6, #15
    22fe:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    2300:	43b1      	bics	r1, r6
			(new_config << config_pos);
    2302:	4097      	lsls	r7, r2
    2304:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2306:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    2308:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    230a:	7a63      	ldrb	r3, [r4, #9]
    230c:	2b00      	cmp	r3, #0
    230e:	d106      	bne.n	231e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    2310:	6943      	ldr	r3, [r0, #20]
    2312:	2201      	movs	r2, #1
    2314:	40aa      	lsls	r2, r5
    2316:	4393      	bics	r3, r2
    2318:	6143      	str	r3, [r0, #20]
	}
}
    231a:	b003      	add	sp, #12
    231c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    231e:	6942      	ldr	r2, [r0, #20]
    2320:	2301      	movs	r3, #1
    2322:	40ab      	lsls	r3, r5
    2324:	4313      	orrs	r3, r2
    2326:	6143      	str	r3, [r0, #20]
    2328:	e7f7      	b.n	231a <extint_chan_set_config+0x5e>
    232a:	46c0      	nop			; (mov r8, r8)
    232c:	000069ed 	.word	0x000069ed
    2330:	40001800 	.word	0x40001800

00002334 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2334:	4770      	bx	lr
	...

00002338 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2338:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    233a:	4b0a      	ldr	r3, [pc, #40]	; (2364 <_sercom_set_handler+0x2c>)
    233c:	781b      	ldrb	r3, [r3, #0]
    233e:	2b00      	cmp	r3, #0
    2340:	d10c      	bne.n	235c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2342:	4f09      	ldr	r7, [pc, #36]	; (2368 <_sercom_set_handler+0x30>)
    2344:	4e09      	ldr	r6, [pc, #36]	; (236c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2346:	4d0a      	ldr	r5, [pc, #40]	; (2370 <_sercom_set_handler+0x38>)
    2348:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    234a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    234c:	195a      	adds	r2, r3, r5
    234e:	6014      	str	r4, [r2, #0]
    2350:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2352:	2b18      	cmp	r3, #24
    2354:	d1f9      	bne.n	234a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2356:	2201      	movs	r2, #1
    2358:	4b02      	ldr	r3, [pc, #8]	; (2364 <_sercom_set_handler+0x2c>)
    235a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    235c:	0080      	lsls	r0, r0, #2
    235e:	4b02      	ldr	r3, [pc, #8]	; (2368 <_sercom_set_handler+0x30>)
    2360:	50c1      	str	r1, [r0, r3]
}
    2362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2364:	20000200 	.word	0x20000200
    2368:	20000204 	.word	0x20000204
    236c:	00002335 	.word	0x00002335
    2370:	20000408 	.word	0x20000408

00002374 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2374:	b500      	push	{lr}
    2376:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2378:	2309      	movs	r3, #9
    237a:	466a      	mov	r2, sp
    237c:	7013      	strb	r3, [r2, #0]
    237e:	3301      	adds	r3, #1
    2380:	7053      	strb	r3, [r2, #1]
    2382:	3301      	adds	r3, #1
    2384:	7093      	strb	r3, [r2, #2]
    2386:	3301      	adds	r3, #1
    2388:	70d3      	strb	r3, [r2, #3]
    238a:	3301      	adds	r3, #1
    238c:	7113      	strb	r3, [r2, #4]
    238e:	3301      	adds	r3, #1
    2390:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2392:	4b03      	ldr	r3, [pc, #12]	; (23a0 <_sercom_get_interrupt_vector+0x2c>)
    2394:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2396:	466b      	mov	r3, sp
    2398:	5618      	ldrsb	r0, [r3, r0]
}
    239a:	b003      	add	sp, #12
    239c:	bd00      	pop	{pc}
    239e:	46c0      	nop			; (mov r8, r8)
    23a0:	000053d5 	.word	0x000053d5

000023a4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    23a4:	b510      	push	{r4, lr}
    23a6:	4b02      	ldr	r3, [pc, #8]	; (23b0 <SERCOM0_Handler+0xc>)
    23a8:	681b      	ldr	r3, [r3, #0]
    23aa:	2000      	movs	r0, #0
    23ac:	4798      	blx	r3
    23ae:	bd10      	pop	{r4, pc}
    23b0:	20000204 	.word	0x20000204

000023b4 <SERCOM1_Handler>:
    23b4:	b510      	push	{r4, lr}
    23b6:	4b02      	ldr	r3, [pc, #8]	; (23c0 <SERCOM1_Handler+0xc>)
    23b8:	685b      	ldr	r3, [r3, #4]
    23ba:	2001      	movs	r0, #1
    23bc:	4798      	blx	r3
    23be:	bd10      	pop	{r4, pc}
    23c0:	20000204 	.word	0x20000204

000023c4 <SERCOM2_Handler>:
    23c4:	b510      	push	{r4, lr}
    23c6:	4b02      	ldr	r3, [pc, #8]	; (23d0 <SERCOM2_Handler+0xc>)
    23c8:	689b      	ldr	r3, [r3, #8]
    23ca:	2002      	movs	r0, #2
    23cc:	4798      	blx	r3
    23ce:	bd10      	pop	{r4, pc}
    23d0:	20000204 	.word	0x20000204

000023d4 <SERCOM3_Handler>:
    23d4:	b510      	push	{r4, lr}
    23d6:	4b02      	ldr	r3, [pc, #8]	; (23e0 <SERCOM3_Handler+0xc>)
    23d8:	68db      	ldr	r3, [r3, #12]
    23da:	2003      	movs	r0, #3
    23dc:	4798      	blx	r3
    23de:	bd10      	pop	{r4, pc}
    23e0:	20000204 	.word	0x20000204

000023e4 <SERCOM4_Handler>:
    23e4:	b510      	push	{r4, lr}
    23e6:	4b02      	ldr	r3, [pc, #8]	; (23f0 <SERCOM4_Handler+0xc>)
    23e8:	691b      	ldr	r3, [r3, #16]
    23ea:	2004      	movs	r0, #4
    23ec:	4798      	blx	r3
    23ee:	bd10      	pop	{r4, pc}
    23f0:	20000204 	.word	0x20000204

000023f4 <SERCOM5_Handler>:
    23f4:	b510      	push	{r4, lr}
    23f6:	4b02      	ldr	r3, [pc, #8]	; (2400 <SERCOM5_Handler+0xc>)
    23f8:	695b      	ldr	r3, [r3, #20]
    23fa:	2005      	movs	r0, #5
    23fc:	4798      	blx	r3
    23fe:	bd10      	pop	{r4, pc}
    2400:	20000204 	.word	0x20000204

00002404 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2404:	b5f0      	push	{r4, r5, r6, r7, lr}
    2406:	46de      	mov	lr, fp
    2408:	4657      	mov	r7, sl
    240a:	464e      	mov	r6, r9
    240c:	4645      	mov	r5, r8
    240e:	b5e0      	push	{r5, r6, r7, lr}
    2410:	b091      	sub	sp, #68	; 0x44
    2412:	0005      	movs	r5, r0
    2414:	000c      	movs	r4, r1
    2416:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2418:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    241a:	0008      	movs	r0, r1
    241c:	4bbc      	ldr	r3, [pc, #752]	; (2710 <usart_init+0x30c>)
    241e:	4798      	blx	r3
    2420:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2422:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2424:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2426:	07db      	lsls	r3, r3, #31
    2428:	d506      	bpl.n	2438 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    242a:	b011      	add	sp, #68	; 0x44
    242c:	bc3c      	pop	{r2, r3, r4, r5}
    242e:	4690      	mov	r8, r2
    2430:	4699      	mov	r9, r3
    2432:	46a2      	mov	sl, r4
    2434:	46ab      	mov	fp, r5
    2436:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2438:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    243a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    243c:	079b      	lsls	r3, r3, #30
    243e:	d4f4      	bmi.n	242a <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    2440:	49b4      	ldr	r1, [pc, #720]	; (2714 <usart_init+0x310>)
    2442:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2444:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2446:	2301      	movs	r3, #1
    2448:	40bb      	lsls	r3, r7
    244a:	4303      	orrs	r3, r0
    244c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    244e:	a90f      	add	r1, sp, #60	; 0x3c
    2450:	272d      	movs	r7, #45	; 0x2d
    2452:	5df3      	ldrb	r3, [r6, r7]
    2454:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2456:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2458:	b2d3      	uxtb	r3, r2
    245a:	9302      	str	r3, [sp, #8]
    245c:	0018      	movs	r0, r3
    245e:	4bae      	ldr	r3, [pc, #696]	; (2718 <usart_init+0x314>)
    2460:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2462:	9802      	ldr	r0, [sp, #8]
    2464:	4bad      	ldr	r3, [pc, #692]	; (271c <usart_init+0x318>)
    2466:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2468:	5df0      	ldrb	r0, [r6, r7]
    246a:	2100      	movs	r1, #0
    246c:	4bac      	ldr	r3, [pc, #688]	; (2720 <usart_init+0x31c>)
    246e:	4798      	blx	r3
	module->character_size = config->character_size;
    2470:	7af3      	ldrb	r3, [r6, #11]
    2472:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2474:	2324      	movs	r3, #36	; 0x24
    2476:	5cf3      	ldrb	r3, [r6, r3]
    2478:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    247a:	2325      	movs	r3, #37	; 0x25
    247c:	5cf3      	ldrb	r3, [r6, r3]
    247e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2480:	7ef3      	ldrb	r3, [r6, #27]
    2482:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2484:	7f33      	ldrb	r3, [r6, #28]
    2486:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2488:	682b      	ldr	r3, [r5, #0]
    248a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    248c:	0018      	movs	r0, r3
    248e:	4ba0      	ldr	r3, [pc, #640]	; (2710 <usart_init+0x30c>)
    2490:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2492:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2494:	2200      	movs	r2, #0
    2496:	230e      	movs	r3, #14
    2498:	a906      	add	r1, sp, #24
    249a:	468c      	mov	ip, r1
    249c:	4463      	add	r3, ip
    249e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    24a0:	8a32      	ldrh	r2, [r6, #16]
    24a2:	9202      	str	r2, [sp, #8]
    24a4:	2380      	movs	r3, #128	; 0x80
    24a6:	01db      	lsls	r3, r3, #7
    24a8:	429a      	cmp	r2, r3
    24aa:	d100      	bne.n	24ae <usart_init+0xaa>
    24ac:	e09e      	b.n	25ec <usart_init+0x1e8>
    24ae:	d90f      	bls.n	24d0 <usart_init+0xcc>
    24b0:	23c0      	movs	r3, #192	; 0xc0
    24b2:	01db      	lsls	r3, r3, #7
    24b4:	9a02      	ldr	r2, [sp, #8]
    24b6:	429a      	cmp	r2, r3
    24b8:	d100      	bne.n	24bc <usart_init+0xb8>
    24ba:	e092      	b.n	25e2 <usart_init+0x1de>
    24bc:	2380      	movs	r3, #128	; 0x80
    24be:	021b      	lsls	r3, r3, #8
    24c0:	429a      	cmp	r2, r3
    24c2:	d000      	beq.n	24c6 <usart_init+0xc2>
    24c4:	e11f      	b.n	2706 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    24c6:	2303      	movs	r3, #3
    24c8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    24ca:	2300      	movs	r3, #0
    24cc:	9307      	str	r3, [sp, #28]
    24ce:	e008      	b.n	24e2 <usart_init+0xde>
	switch (config->sample_rate) {
    24d0:	2380      	movs	r3, #128	; 0x80
    24d2:	019b      	lsls	r3, r3, #6
    24d4:	429a      	cmp	r2, r3
    24d6:	d000      	beq.n	24da <usart_init+0xd6>
    24d8:	e115      	b.n	2706 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    24da:	2310      	movs	r3, #16
    24dc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    24de:	3b0f      	subs	r3, #15
    24e0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    24e2:	6833      	ldr	r3, [r6, #0]
    24e4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    24e6:	68f3      	ldr	r3, [r6, #12]
    24e8:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    24ea:	6973      	ldr	r3, [r6, #20]
    24ec:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    24ee:	7e33      	ldrb	r3, [r6, #24]
    24f0:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    24f2:	2326      	movs	r3, #38	; 0x26
    24f4:	5cf3      	ldrb	r3, [r6, r3]
    24f6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    24f8:	6873      	ldr	r3, [r6, #4]
    24fa:	4699      	mov	r9, r3
	switch (transfer_mode)
    24fc:	2b00      	cmp	r3, #0
    24fe:	d100      	bne.n	2502 <usart_init+0xfe>
    2500:	e0a0      	b.n	2644 <usart_init+0x240>
    2502:	2380      	movs	r3, #128	; 0x80
    2504:	055b      	lsls	r3, r3, #21
    2506:	4599      	cmp	r9, r3
    2508:	d100      	bne.n	250c <usart_init+0x108>
    250a:	e084      	b.n	2616 <usart_init+0x212>
	if(config->encoding_format_enable) {
    250c:	7e73      	ldrb	r3, [r6, #25]
    250e:	2b00      	cmp	r3, #0
    2510:	d002      	beq.n	2518 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2512:	7eb3      	ldrb	r3, [r6, #26]
    2514:	4642      	mov	r2, r8
    2516:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2518:	682a      	ldr	r2, [r5, #0]
    251a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    251c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    251e:	2b00      	cmp	r3, #0
    2520:	d1fc      	bne.n	251c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    2522:	330e      	adds	r3, #14
    2524:	aa06      	add	r2, sp, #24
    2526:	4694      	mov	ip, r2
    2528:	4463      	add	r3, ip
    252a:	881b      	ldrh	r3, [r3, #0]
    252c:	4642      	mov	r2, r8
    252e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2530:	9b05      	ldr	r3, [sp, #20]
    2532:	9a03      	ldr	r2, [sp, #12]
    2534:	4313      	orrs	r3, r2
    2536:	9a04      	ldr	r2, [sp, #16]
    2538:	4313      	orrs	r3, r2
    253a:	464a      	mov	r2, r9
    253c:	4313      	orrs	r3, r2
    253e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2540:	465b      	mov	r3, fp
    2542:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2544:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2546:	4653      	mov	r3, sl
    2548:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    254a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    254c:	2327      	movs	r3, #39	; 0x27
    254e:	5cf3      	ldrb	r3, [r6, r3]
    2550:	2b00      	cmp	r3, #0
    2552:	d101      	bne.n	2558 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2554:	3304      	adds	r3, #4
    2556:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2558:	7e73      	ldrb	r3, [r6, #25]
    255a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    255c:	7f32      	ldrb	r2, [r6, #28]
    255e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2560:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2562:	7f72      	ldrb	r2, [r6, #29]
    2564:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2566:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2568:	2224      	movs	r2, #36	; 0x24
    256a:	5cb2      	ldrb	r2, [r6, r2]
    256c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    256e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2570:	2225      	movs	r2, #37	; 0x25
    2572:	5cb2      	ldrb	r2, [r6, r2]
    2574:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2576:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2578:	7ab1      	ldrb	r1, [r6, #10]
    257a:	7af2      	ldrb	r2, [r6, #11]
    257c:	4311      	orrs	r1, r2
    257e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2580:	8933      	ldrh	r3, [r6, #8]
    2582:	2bff      	cmp	r3, #255	; 0xff
    2584:	d100      	bne.n	2588 <usart_init+0x184>
    2586:	e081      	b.n	268c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2588:	2280      	movs	r2, #128	; 0x80
    258a:	0452      	lsls	r2, r2, #17
    258c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    258e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2590:	232c      	movs	r3, #44	; 0x2c
    2592:	5cf3      	ldrb	r3, [r6, r3]
    2594:	2b00      	cmp	r3, #0
    2596:	d103      	bne.n	25a0 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2598:	4b62      	ldr	r3, [pc, #392]	; (2724 <usart_init+0x320>)
    259a:	789b      	ldrb	r3, [r3, #2]
    259c:	079b      	lsls	r3, r3, #30
    259e:	d501      	bpl.n	25a4 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    25a0:	2380      	movs	r3, #128	; 0x80
    25a2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    25a4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    25a6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    25a8:	2b00      	cmp	r3, #0
    25aa:	d1fc      	bne.n	25a6 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    25ac:	4643      	mov	r3, r8
    25ae:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    25b0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    25b2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    25b4:	2b00      	cmp	r3, #0
    25b6:	d1fc      	bne.n	25b2 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    25b8:	4643      	mov	r3, r8
    25ba:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    25bc:	ab0e      	add	r3, sp, #56	; 0x38
    25be:	2280      	movs	r2, #128	; 0x80
    25c0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    25c2:	2200      	movs	r2, #0
    25c4:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    25c6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    25c8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    25ca:	6b33      	ldr	r3, [r6, #48]	; 0x30
    25cc:	930a      	str	r3, [sp, #40]	; 0x28
    25ce:	6b73      	ldr	r3, [r6, #52]	; 0x34
    25d0:	930b      	str	r3, [sp, #44]	; 0x2c
    25d2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    25d4:	930c      	str	r3, [sp, #48]	; 0x30
    25d6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    25d8:	9302      	str	r3, [sp, #8]
    25da:	930d      	str	r3, [sp, #52]	; 0x34
    25dc:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    25de:	ae0a      	add	r6, sp, #40	; 0x28
    25e0:	e063      	b.n	26aa <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    25e2:	2308      	movs	r3, #8
    25e4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    25e6:	3b07      	subs	r3, #7
    25e8:	9307      	str	r3, [sp, #28]
    25ea:	e77a      	b.n	24e2 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    25ec:	6833      	ldr	r3, [r6, #0]
    25ee:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    25f0:	68f3      	ldr	r3, [r6, #12]
    25f2:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    25f4:	6973      	ldr	r3, [r6, #20]
    25f6:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    25f8:	7e33      	ldrb	r3, [r6, #24]
    25fa:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    25fc:	2326      	movs	r3, #38	; 0x26
    25fe:	5cf3      	ldrb	r3, [r6, r3]
    2600:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2602:	6873      	ldr	r3, [r6, #4]
    2604:	4699      	mov	r9, r3
	switch (transfer_mode)
    2606:	2b00      	cmp	r3, #0
    2608:	d018      	beq.n	263c <usart_init+0x238>
    260a:	2380      	movs	r3, #128	; 0x80
    260c:	055b      	lsls	r3, r3, #21
    260e:	4599      	cmp	r9, r3
    2610:	d001      	beq.n	2616 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    2612:	2000      	movs	r0, #0
    2614:	e025      	b.n	2662 <usart_init+0x25e>
			if (!config->use_external_clock) {
    2616:	2327      	movs	r3, #39	; 0x27
    2618:	5cf3      	ldrb	r3, [r6, r3]
    261a:	2b00      	cmp	r3, #0
    261c:	d000      	beq.n	2620 <usart_init+0x21c>
    261e:	e775      	b.n	250c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2620:	6a33      	ldr	r3, [r6, #32]
    2622:	001f      	movs	r7, r3
    2624:	b2c0      	uxtb	r0, r0
    2626:	4b40      	ldr	r3, [pc, #256]	; (2728 <usart_init+0x324>)
    2628:	4798      	blx	r3
    262a:	0001      	movs	r1, r0
    262c:	220e      	movs	r2, #14
    262e:	ab06      	add	r3, sp, #24
    2630:	469c      	mov	ip, r3
    2632:	4462      	add	r2, ip
    2634:	0038      	movs	r0, r7
    2636:	4b3d      	ldr	r3, [pc, #244]	; (272c <usart_init+0x328>)
    2638:	4798      	blx	r3
    263a:	e012      	b.n	2662 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    263c:	2308      	movs	r3, #8
    263e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2640:	2300      	movs	r3, #0
    2642:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2644:	2327      	movs	r3, #39	; 0x27
    2646:	5cf3      	ldrb	r3, [r6, r3]
    2648:	2b00      	cmp	r3, #0
    264a:	d00e      	beq.n	266a <usart_init+0x266>
				status_code =
    264c:	9b06      	ldr	r3, [sp, #24]
    264e:	9300      	str	r3, [sp, #0]
    2650:	9b07      	ldr	r3, [sp, #28]
    2652:	220e      	movs	r2, #14
    2654:	a906      	add	r1, sp, #24
    2656:	468c      	mov	ip, r1
    2658:	4462      	add	r2, ip
    265a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    265c:	6a30      	ldr	r0, [r6, #32]
    265e:	4f34      	ldr	r7, [pc, #208]	; (2730 <usart_init+0x32c>)
    2660:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2662:	2800      	cmp	r0, #0
    2664:	d000      	beq.n	2668 <usart_init+0x264>
    2666:	e6e0      	b.n	242a <usart_init+0x26>
    2668:	e750      	b.n	250c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    266a:	6a33      	ldr	r3, [r6, #32]
    266c:	001f      	movs	r7, r3
    266e:	b2c0      	uxtb	r0, r0
    2670:	4b2d      	ldr	r3, [pc, #180]	; (2728 <usart_init+0x324>)
    2672:	4798      	blx	r3
    2674:	0001      	movs	r1, r0
				status_code =
    2676:	9b06      	ldr	r3, [sp, #24]
    2678:	9300      	str	r3, [sp, #0]
    267a:	9b07      	ldr	r3, [sp, #28]
    267c:	220e      	movs	r2, #14
    267e:	a806      	add	r0, sp, #24
    2680:	4684      	mov	ip, r0
    2682:	4462      	add	r2, ip
    2684:	0038      	movs	r0, r7
    2686:	4f2a      	ldr	r7, [pc, #168]	; (2730 <usart_init+0x32c>)
    2688:	47b8      	blx	r7
    268a:	e7ea      	b.n	2662 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    268c:	7ef3      	ldrb	r3, [r6, #27]
    268e:	2b00      	cmp	r3, #0
    2690:	d100      	bne.n	2694 <usart_init+0x290>
    2692:	e77d      	b.n	2590 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2694:	2380      	movs	r3, #128	; 0x80
    2696:	04db      	lsls	r3, r3, #19
    2698:	431f      	orrs	r7, r3
    269a:	e779      	b.n	2590 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    269c:	0020      	movs	r0, r4
    269e:	4b25      	ldr	r3, [pc, #148]	; (2734 <usart_init+0x330>)
    26a0:	4798      	blx	r3
    26a2:	e007      	b.n	26b4 <usart_init+0x2b0>
    26a4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    26a6:	2f04      	cmp	r7, #4
    26a8:	d00d      	beq.n	26c6 <usart_init+0x2c2>
    26aa:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    26ac:	00bb      	lsls	r3, r7, #2
    26ae:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    26b0:	2800      	cmp	r0, #0
    26b2:	d0f3      	beq.n	269c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    26b4:	1c43      	adds	r3, r0, #1
    26b6:	d0f5      	beq.n	26a4 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    26b8:	a90e      	add	r1, sp, #56	; 0x38
    26ba:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    26bc:	0c00      	lsrs	r0, r0, #16
    26be:	b2c0      	uxtb	r0, r0
    26c0:	4b1d      	ldr	r3, [pc, #116]	; (2738 <usart_init+0x334>)
    26c2:	4798      	blx	r3
    26c4:	e7ee      	b.n	26a4 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    26c6:	2300      	movs	r3, #0
    26c8:	60eb      	str	r3, [r5, #12]
    26ca:	612b      	str	r3, [r5, #16]
    26cc:	616b      	str	r3, [r5, #20]
    26ce:	61ab      	str	r3, [r5, #24]
    26d0:	61eb      	str	r3, [r5, #28]
    26d2:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    26d4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    26d6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    26d8:	2200      	movs	r2, #0
    26da:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    26dc:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    26de:	3330      	adds	r3, #48	; 0x30
    26e0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    26e2:	3301      	adds	r3, #1
    26e4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    26e6:	3301      	adds	r3, #1
    26e8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    26ea:	3301      	adds	r3, #1
    26ec:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    26ee:	6828      	ldr	r0, [r5, #0]
    26f0:	4b07      	ldr	r3, [pc, #28]	; (2710 <usart_init+0x30c>)
    26f2:	4798      	blx	r3
    26f4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    26f6:	4911      	ldr	r1, [pc, #68]	; (273c <usart_init+0x338>)
    26f8:	4b11      	ldr	r3, [pc, #68]	; (2740 <usart_init+0x33c>)
    26fa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    26fc:	00a4      	lsls	r4, r4, #2
    26fe:	4b11      	ldr	r3, [pc, #68]	; (2744 <usart_init+0x340>)
    2700:	50e5      	str	r5, [r4, r3]
	return status_code;
    2702:	2000      	movs	r0, #0
    2704:	e691      	b.n	242a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2706:	2310      	movs	r3, #16
    2708:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    270a:	2300      	movs	r3, #0
    270c:	9307      	str	r3, [sp, #28]
    270e:	e6e8      	b.n	24e2 <usart_init+0xde>
    2710:	000053d5 	.word	0x000053d5
    2714:	40000400 	.word	0x40000400
    2718:	000068f5 	.word	0x000068f5
    271c:	00006869 	.word	0x00006869
    2720:	00005211 	.word	0x00005211
    2724:	41002000 	.word	0x41002000
    2728:	00006911 	.word	0x00006911
    272c:	00005153 	.word	0x00005153
    2730:	0000517d 	.word	0x0000517d
    2734:	0000525d 	.word	0x0000525d
    2738:	000069ed 	.word	0x000069ed
    273c:	000027e5 	.word	0x000027e5
    2740:	00002339 	.word	0x00002339
    2744:	20000408 	.word	0x20000408

00002748 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2748:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    274a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    274c:	2a00      	cmp	r2, #0
    274e:	d101      	bne.n	2754 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2750:	0018      	movs	r0, r3
    2752:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2754:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2756:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2758:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    275a:	2a00      	cmp	r2, #0
    275c:	d1f8      	bne.n	2750 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    275e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2760:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2762:	2a00      	cmp	r2, #0
    2764:	d1fc      	bne.n	2760 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2766:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2768:	2102      	movs	r1, #2
    276a:	7e1a      	ldrb	r2, [r3, #24]
    276c:	420a      	tst	r2, r1
    276e:	d0fc      	beq.n	276a <usart_write_wait+0x22>
	return STATUS_OK;
    2770:	2300      	movs	r3, #0
    2772:	e7ed      	b.n	2750 <usart_write_wait+0x8>

00002774 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2774:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2776:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2778:	2a00      	cmp	r2, #0
    277a:	d101      	bne.n	2780 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    277c:	0018      	movs	r0, r3
    277e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2780:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2782:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2784:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2786:	2a00      	cmp	r2, #0
    2788:	d1f8      	bne.n	277c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    278a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    278c:	7e10      	ldrb	r0, [r2, #24]
    278e:	0740      	lsls	r0, r0, #29
    2790:	d5f4      	bpl.n	277c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2792:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2794:	2b00      	cmp	r3, #0
    2796:	d1fc      	bne.n	2792 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2798:	8b53      	ldrh	r3, [r2, #26]
    279a:	b2db      	uxtb	r3, r3
	if (error_code) {
    279c:	0698      	lsls	r0, r3, #26
    279e:	d01d      	beq.n	27dc <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    27a0:	0798      	lsls	r0, r3, #30
    27a2:	d503      	bpl.n	27ac <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    27a4:	2302      	movs	r3, #2
    27a6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    27a8:	3318      	adds	r3, #24
    27aa:	e7e7      	b.n	277c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    27ac:	0758      	lsls	r0, r3, #29
    27ae:	d503      	bpl.n	27b8 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    27b0:	2304      	movs	r3, #4
    27b2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    27b4:	331a      	adds	r3, #26
    27b6:	e7e1      	b.n	277c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    27b8:	07d8      	lsls	r0, r3, #31
    27ba:	d503      	bpl.n	27c4 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    27bc:	2301      	movs	r3, #1
    27be:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    27c0:	3312      	adds	r3, #18
    27c2:	e7db      	b.n	277c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    27c4:	06d8      	lsls	r0, r3, #27
    27c6:	d503      	bpl.n	27d0 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    27c8:	2310      	movs	r3, #16
    27ca:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    27cc:	3332      	adds	r3, #50	; 0x32
    27ce:	e7d5      	b.n	277c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    27d0:	069b      	lsls	r3, r3, #26
    27d2:	d503      	bpl.n	27dc <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    27d4:	2320      	movs	r3, #32
    27d6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    27d8:	3321      	adds	r3, #33	; 0x21
    27da:	e7cf      	b.n	277c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    27dc:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    27de:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    27e0:	2300      	movs	r3, #0
    27e2:	e7cb      	b.n	277c <usart_read_wait+0x8>

000027e4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    27e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    27e6:	0080      	lsls	r0, r0, #2
    27e8:	4b62      	ldr	r3, [pc, #392]	; (2974 <_usart_interrupt_handler+0x190>)
    27ea:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    27ec:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    27ee:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    27f0:	2b00      	cmp	r3, #0
    27f2:	d1fc      	bne.n	27ee <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    27f4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    27f6:	7da6      	ldrb	r6, [r4, #22]
    27f8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    27fa:	2330      	movs	r3, #48	; 0x30
    27fc:	5ceb      	ldrb	r3, [r5, r3]
    27fe:	2231      	movs	r2, #49	; 0x31
    2800:	5caf      	ldrb	r7, [r5, r2]
    2802:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2804:	07f3      	lsls	r3, r6, #31
    2806:	d522      	bpl.n	284e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2808:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    280a:	b29b      	uxth	r3, r3
    280c:	2b00      	cmp	r3, #0
    280e:	d01c      	beq.n	284a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2810:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2812:	7813      	ldrb	r3, [r2, #0]
    2814:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2816:	1c51      	adds	r1, r2, #1
    2818:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    281a:	7969      	ldrb	r1, [r5, #5]
    281c:	2901      	cmp	r1, #1
    281e:	d00e      	beq.n	283e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2820:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2822:	05db      	lsls	r3, r3, #23
    2824:	0ddb      	lsrs	r3, r3, #23
    2826:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2828:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    282a:	3b01      	subs	r3, #1
    282c:	b29b      	uxth	r3, r3
    282e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2830:	2b00      	cmp	r3, #0
    2832:	d10c      	bne.n	284e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2834:	3301      	adds	r3, #1
    2836:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2838:	3301      	adds	r3, #1
    283a:	75a3      	strb	r3, [r4, #22]
    283c:	e007      	b.n	284e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    283e:	7851      	ldrb	r1, [r2, #1]
    2840:	0209      	lsls	r1, r1, #8
    2842:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2844:	3202      	adds	r2, #2
    2846:	62aa      	str	r2, [r5, #40]	; 0x28
    2848:	e7eb      	b.n	2822 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    284a:	2301      	movs	r3, #1
    284c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    284e:	07b3      	lsls	r3, r6, #30
    2850:	d506      	bpl.n	2860 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2852:	2302      	movs	r3, #2
    2854:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2856:	2200      	movs	r2, #0
    2858:	3331      	adds	r3, #49	; 0x31
    285a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    285c:	07fb      	lsls	r3, r7, #31
    285e:	d41a      	bmi.n	2896 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2860:	0773      	lsls	r3, r6, #29
    2862:	d565      	bpl.n	2930 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2864:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2866:	b29b      	uxth	r3, r3
    2868:	2b00      	cmp	r3, #0
    286a:	d05f      	beq.n	292c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    286c:	8b63      	ldrh	r3, [r4, #26]
    286e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2870:	071a      	lsls	r2, r3, #28
    2872:	d414      	bmi.n	289e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2874:	223f      	movs	r2, #63	; 0x3f
    2876:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2878:	2b00      	cmp	r3, #0
    287a:	d034      	beq.n	28e6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    287c:	079a      	lsls	r2, r3, #30
    287e:	d511      	bpl.n	28a4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2880:	221a      	movs	r2, #26
    2882:	2332      	movs	r3, #50	; 0x32
    2884:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2886:	3b30      	subs	r3, #48	; 0x30
    2888:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    288a:	077b      	lsls	r3, r7, #29
    288c:	d550      	bpl.n	2930 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    288e:	0028      	movs	r0, r5
    2890:	696b      	ldr	r3, [r5, #20]
    2892:	4798      	blx	r3
    2894:	e04c      	b.n	2930 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2896:	0028      	movs	r0, r5
    2898:	68eb      	ldr	r3, [r5, #12]
    289a:	4798      	blx	r3
    289c:	e7e0      	b.n	2860 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    289e:	2237      	movs	r2, #55	; 0x37
    28a0:	4013      	ands	r3, r2
    28a2:	e7e9      	b.n	2878 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    28a4:	075a      	lsls	r2, r3, #29
    28a6:	d505      	bpl.n	28b4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    28a8:	221e      	movs	r2, #30
    28aa:	2332      	movs	r3, #50	; 0x32
    28ac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    28ae:	3b2e      	subs	r3, #46	; 0x2e
    28b0:	8363      	strh	r3, [r4, #26]
    28b2:	e7ea      	b.n	288a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    28b4:	07da      	lsls	r2, r3, #31
    28b6:	d505      	bpl.n	28c4 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    28b8:	2213      	movs	r2, #19
    28ba:	2332      	movs	r3, #50	; 0x32
    28bc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    28be:	3b31      	subs	r3, #49	; 0x31
    28c0:	8363      	strh	r3, [r4, #26]
    28c2:	e7e2      	b.n	288a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    28c4:	06da      	lsls	r2, r3, #27
    28c6:	d505      	bpl.n	28d4 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    28c8:	2242      	movs	r2, #66	; 0x42
    28ca:	2332      	movs	r3, #50	; 0x32
    28cc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    28ce:	3b22      	subs	r3, #34	; 0x22
    28d0:	8363      	strh	r3, [r4, #26]
    28d2:	e7da      	b.n	288a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    28d4:	2220      	movs	r2, #32
    28d6:	421a      	tst	r2, r3
    28d8:	d0d7      	beq.n	288a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    28da:	3221      	adds	r2, #33	; 0x21
    28dc:	2332      	movs	r3, #50	; 0x32
    28de:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    28e0:	3b12      	subs	r3, #18
    28e2:	8363      	strh	r3, [r4, #26]
    28e4:	e7d1      	b.n	288a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    28e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    28e8:	05db      	lsls	r3, r3, #23
    28ea:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    28ec:	b2da      	uxtb	r2, r3
    28ee:	6a69      	ldr	r1, [r5, #36]	; 0x24
    28f0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    28f2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    28f4:	1c51      	adds	r1, r2, #1
    28f6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    28f8:	7969      	ldrb	r1, [r5, #5]
    28fa:	2901      	cmp	r1, #1
    28fc:	d010      	beq.n	2920 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    28fe:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2900:	3b01      	subs	r3, #1
    2902:	b29b      	uxth	r3, r3
    2904:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2906:	2b00      	cmp	r3, #0
    2908:	d112      	bne.n	2930 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    290a:	3304      	adds	r3, #4
    290c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    290e:	2200      	movs	r2, #0
    2910:	332e      	adds	r3, #46	; 0x2e
    2912:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2914:	07bb      	lsls	r3, r7, #30
    2916:	d50b      	bpl.n	2930 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2918:	0028      	movs	r0, r5
    291a:	692b      	ldr	r3, [r5, #16]
    291c:	4798      	blx	r3
    291e:	e007      	b.n	2930 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2920:	0a1b      	lsrs	r3, r3, #8
    2922:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2924:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2926:	3301      	adds	r3, #1
    2928:	626b      	str	r3, [r5, #36]	; 0x24
    292a:	e7e8      	b.n	28fe <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    292c:	2304      	movs	r3, #4
    292e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2930:	06f3      	lsls	r3, r6, #27
    2932:	d504      	bpl.n	293e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2934:	2310      	movs	r3, #16
    2936:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2938:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    293a:	06fb      	lsls	r3, r7, #27
    293c:	d40e      	bmi.n	295c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    293e:	06b3      	lsls	r3, r6, #26
    2940:	d504      	bpl.n	294c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2942:	2320      	movs	r3, #32
    2944:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2946:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2948:	073b      	lsls	r3, r7, #28
    294a:	d40b      	bmi.n	2964 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    294c:	0733      	lsls	r3, r6, #28
    294e:	d504      	bpl.n	295a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2950:	2308      	movs	r3, #8
    2952:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2954:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2956:	06bb      	lsls	r3, r7, #26
    2958:	d408      	bmi.n	296c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    295a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    295c:	0028      	movs	r0, r5
    295e:	69eb      	ldr	r3, [r5, #28]
    2960:	4798      	blx	r3
    2962:	e7ec      	b.n	293e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2964:	0028      	movs	r0, r5
    2966:	69ab      	ldr	r3, [r5, #24]
    2968:	4798      	blx	r3
    296a:	e7ef      	b.n	294c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    296c:	6a2b      	ldr	r3, [r5, #32]
    296e:	0028      	movs	r0, r5
    2970:	4798      	blx	r3
}
    2972:	e7f2      	b.n	295a <_usart_interrupt_handler+0x176>
    2974:	20000408 	.word	0x20000408

00002978 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2978:	b510      	push	{r4, lr}
	switch (clock_source) {
    297a:	2808      	cmp	r0, #8
    297c:	d803      	bhi.n	2986 <system_clock_source_get_hz+0xe>
    297e:	0080      	lsls	r0, r0, #2
    2980:	4b1e      	ldr	r3, [pc, #120]	; (29fc <system_clock_source_get_hz+0x84>)
    2982:	581b      	ldr	r3, [r3, r0]
    2984:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2986:	2000      	movs	r0, #0
    2988:	e036      	b.n	29f8 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
    298a:	4b1d      	ldr	r3, [pc, #116]	; (2a00 <system_clock_source_get_hz+0x88>)
    298c:	6918      	ldr	r0, [r3, #16]
    298e:	e033      	b.n	29f8 <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2990:	4b1c      	ldr	r3, [pc, #112]	; (2a04 <system_clock_source_get_hz+0x8c>)
    2992:	6a1b      	ldr	r3, [r3, #32]
    2994:	059b      	lsls	r3, r3, #22
    2996:	0f9b      	lsrs	r3, r3, #30
    2998:	481b      	ldr	r0, [pc, #108]	; (2a08 <system_clock_source_get_hz+0x90>)
    299a:	40d8      	lsrs	r0, r3
    299c:	e02c      	b.n	29f8 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
    299e:	4b18      	ldr	r3, [pc, #96]	; (2a00 <system_clock_source_get_hz+0x88>)
    29a0:	6958      	ldr	r0, [r3, #20]
    29a2:	e029      	b.n	29f8 <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    29a4:	4b16      	ldr	r3, [pc, #88]	; (2a00 <system_clock_source_get_hz+0x88>)
    29a6:	681b      	ldr	r3, [r3, #0]
			return 0;
    29a8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    29aa:	079b      	lsls	r3, r3, #30
    29ac:	d524      	bpl.n	29f8 <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    29ae:	4915      	ldr	r1, [pc, #84]	; (2a04 <system_clock_source_get_hz+0x8c>)
    29b0:	2210      	movs	r2, #16
    29b2:	68cb      	ldr	r3, [r1, #12]
    29b4:	421a      	tst	r2, r3
    29b6:	d0fc      	beq.n	29b2 <system_clock_source_get_hz+0x3a>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    29b8:	4b11      	ldr	r3, [pc, #68]	; (2a00 <system_clock_source_get_hz+0x88>)
    29ba:	681b      	ldr	r3, [r3, #0]
    29bc:	075b      	lsls	r3, r3, #29
    29be:	d401      	bmi.n	29c4 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    29c0:	4812      	ldr	r0, [pc, #72]	; (2a0c <system_clock_source_get_hz+0x94>)
    29c2:	e019      	b.n	29f8 <system_clock_source_get_hz+0x80>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    29c4:	4b0e      	ldr	r3, [pc, #56]	; (2a00 <system_clock_source_get_hz+0x88>)
    29c6:	681b      	ldr	r3, [r3, #0]
    29c8:	069b      	lsls	r3, r3, #26
    29ca:	d501      	bpl.n	29d0 <system_clock_source_get_hz+0x58>
		return 48000000UL;
    29cc:	480f      	ldr	r0, [pc, #60]	; (2a0c <system_clock_source_get_hz+0x94>)
    29ce:	e013      	b.n	29f8 <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    29d0:	2000      	movs	r0, #0
    29d2:	4b0f      	ldr	r3, [pc, #60]	; (2a10 <system_clock_source_get_hz+0x98>)
    29d4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    29d6:	4b0a      	ldr	r3, [pc, #40]	; (2a00 <system_clock_source_get_hz+0x88>)
    29d8:	689b      	ldr	r3, [r3, #8]
    29da:	041b      	lsls	r3, r3, #16
    29dc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    29de:	4358      	muls	r0, r3
    29e0:	e00a      	b.n	29f8 <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    29e2:	2350      	movs	r3, #80	; 0x50
    29e4:	4a07      	ldr	r2, [pc, #28]	; (2a04 <system_clock_source_get_hz+0x8c>)
    29e6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    29e8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    29ea:	075b      	lsls	r3, r3, #29
    29ec:	d504      	bpl.n	29f8 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
    29ee:	4b04      	ldr	r3, [pc, #16]	; (2a00 <system_clock_source_get_hz+0x88>)
    29f0:	68d8      	ldr	r0, [r3, #12]
    29f2:	e001      	b.n	29f8 <system_clock_source_get_hz+0x80>
		return 32768UL;
    29f4:	2080      	movs	r0, #128	; 0x80
    29f6:	0200      	lsls	r0, r0, #8
	}
}
    29f8:	bd10      	pop	{r4, pc}
    29fa:	46c0      	nop			; (mov r8, r8)
    29fc:	000083c4 	.word	0x000083c4
    2a00:	2000021c 	.word	0x2000021c
    2a04:	40000800 	.word	0x40000800
    2a08:	007a1200 	.word	0x007a1200
    2a0c:	02dc6c00 	.word	0x02dc6c00
    2a10:	00006911 	.word	0x00006911

00002a14 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2a14:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2a16:	490c      	ldr	r1, [pc, #48]	; (2a48 <system_clock_source_osc8m_set_config+0x34>)
    2a18:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2a1a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2a1c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2a1e:	7840      	ldrb	r0, [r0, #1]
    2a20:	2201      	movs	r2, #1
    2a22:	4010      	ands	r0, r2
    2a24:	0180      	lsls	r0, r0, #6
    2a26:	2640      	movs	r6, #64	; 0x40
    2a28:	43b3      	bics	r3, r6
    2a2a:	4303      	orrs	r3, r0
    2a2c:	402a      	ands	r2, r5
    2a2e:	01d2      	lsls	r2, r2, #7
    2a30:	2080      	movs	r0, #128	; 0x80
    2a32:	4383      	bics	r3, r0
    2a34:	4313      	orrs	r3, r2
    2a36:	2203      	movs	r2, #3
    2a38:	4022      	ands	r2, r4
    2a3a:	0212      	lsls	r2, r2, #8
    2a3c:	4803      	ldr	r0, [pc, #12]	; (2a4c <system_clock_source_osc8m_set_config+0x38>)
    2a3e:	4003      	ands	r3, r0
    2a40:	4313      	orrs	r3, r2
    2a42:	620b      	str	r3, [r1, #32]
}
    2a44:	bd70      	pop	{r4, r5, r6, pc}
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	40000800 	.word	0x40000800
    2a4c:	fffffcff 	.word	0xfffffcff

00002a50 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a52:	46ce      	mov	lr, r9
    2a54:	4647      	mov	r7, r8
    2a56:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    2a58:	4b19      	ldr	r3, [pc, #100]	; (2ac0 <system_clock_source_osc32k_set_config+0x70>)
    2a5a:	4699      	mov	r9, r3
    2a5c:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    2a5e:	7841      	ldrb	r1, [r0, #1]
    2a60:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    2a62:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2a64:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2a66:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    2a68:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    2a6a:	7880      	ldrb	r0, [r0, #2]
    2a6c:	2101      	movs	r1, #1
    2a6e:	4008      	ands	r0, r1
    2a70:	0080      	lsls	r0, r0, #2
    2a72:	2204      	movs	r2, #4
    2a74:	4393      	bics	r3, r2
    2a76:	4303      	orrs	r3, r0
    2a78:	4660      	mov	r0, ip
    2a7a:	4008      	ands	r0, r1
    2a7c:	00c0      	lsls	r0, r0, #3
    2a7e:	3204      	adds	r2, #4
    2a80:	4393      	bics	r3, r2
    2a82:	4303      	orrs	r3, r0
    2a84:	0038      	movs	r0, r7
    2a86:	4008      	ands	r0, r1
    2a88:	0180      	lsls	r0, r0, #6
    2a8a:	2740      	movs	r7, #64	; 0x40
    2a8c:	43bb      	bics	r3, r7
    2a8e:	4303      	orrs	r3, r0
    2a90:	0030      	movs	r0, r6
    2a92:	4008      	ands	r0, r1
    2a94:	01c0      	lsls	r0, r0, #7
    2a96:	2680      	movs	r6, #128	; 0x80
    2a98:	43b3      	bics	r3, r6
    2a9a:	4303      	orrs	r3, r0
    2a9c:	2007      	movs	r0, #7
    2a9e:	4005      	ands	r5, r0
    2aa0:	022d      	lsls	r5, r5, #8
    2aa2:	4808      	ldr	r0, [pc, #32]	; (2ac4 <system_clock_source_osc32k_set_config+0x74>)
    2aa4:	4003      	ands	r3, r0
    2aa6:	432b      	orrs	r3, r5
    2aa8:	4021      	ands	r1, r4
    2aaa:	0309      	lsls	r1, r1, #12
    2aac:	4806      	ldr	r0, [pc, #24]	; (2ac8 <system_clock_source_osc32k_set_config+0x78>)
    2aae:	4003      	ands	r3, r0
    2ab0:	430b      	orrs	r3, r1
    2ab2:	464a      	mov	r2, r9
    2ab4:	6193      	str	r3, [r2, #24]
}
    2ab6:	bc0c      	pop	{r2, r3}
    2ab8:	4690      	mov	r8, r2
    2aba:	4699      	mov	r9, r3
    2abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2abe:	46c0      	nop			; (mov r8, r8)
    2ac0:	40000800 	.word	0x40000800
    2ac4:	fffff8ff 	.word	0xfffff8ff
    2ac8:	ffffefff 	.word	0xffffefff

00002acc <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2acc:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2ace:	7a03      	ldrb	r3, [r0, #8]
    2ad0:	069b      	lsls	r3, r3, #26
    2ad2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2ad4:	8942      	ldrh	r2, [r0, #10]
    2ad6:	0592      	lsls	r2, r2, #22
    2ad8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2ada:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2adc:	4918      	ldr	r1, [pc, #96]	; (2b40 <system_clock_source_dfll_set_config+0x74>)
    2ade:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2ae0:	7983      	ldrb	r3, [r0, #6]
    2ae2:	79c2      	ldrb	r2, [r0, #7]
    2ae4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2ae6:	8842      	ldrh	r2, [r0, #2]
    2ae8:	8884      	ldrh	r4, [r0, #4]
    2aea:	4322      	orrs	r2, r4
    2aec:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2aee:	7842      	ldrb	r2, [r0, #1]
    2af0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2af2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2af4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2af6:	7803      	ldrb	r3, [r0, #0]
    2af8:	2b04      	cmp	r3, #4
    2afa:	d011      	beq.n	2b20 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2afc:	2b20      	cmp	r3, #32
    2afe:	d10e      	bne.n	2b1e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2b00:	7b03      	ldrb	r3, [r0, #12]
    2b02:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2b04:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2b06:	4313      	orrs	r3, r2
    2b08:	89c2      	ldrh	r2, [r0, #14]
    2b0a:	0412      	lsls	r2, r2, #16
    2b0c:	490d      	ldr	r1, [pc, #52]	; (2b44 <system_clock_source_dfll_set_config+0x78>)
    2b0e:	400a      	ands	r2, r1
    2b10:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2b12:	4a0b      	ldr	r2, [pc, #44]	; (2b40 <system_clock_source_dfll_set_config+0x74>)
    2b14:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2b16:	6811      	ldr	r1, [r2, #0]
    2b18:	4b0b      	ldr	r3, [pc, #44]	; (2b48 <system_clock_source_dfll_set_config+0x7c>)
    2b1a:	430b      	orrs	r3, r1
    2b1c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2b1e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2b20:	7b03      	ldrb	r3, [r0, #12]
    2b22:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2b24:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2b26:	4313      	orrs	r3, r2
    2b28:	89c2      	ldrh	r2, [r0, #14]
    2b2a:	0412      	lsls	r2, r2, #16
    2b2c:	4905      	ldr	r1, [pc, #20]	; (2b44 <system_clock_source_dfll_set_config+0x78>)
    2b2e:	400a      	ands	r2, r1
    2b30:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2b32:	4a03      	ldr	r2, [pc, #12]	; (2b40 <system_clock_source_dfll_set_config+0x74>)
    2b34:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2b36:	6813      	ldr	r3, [r2, #0]
    2b38:	2104      	movs	r1, #4
    2b3a:	430b      	orrs	r3, r1
    2b3c:	6013      	str	r3, [r2, #0]
    2b3e:	e7ee      	b.n	2b1e <system_clock_source_dfll_set_config+0x52>
    2b40:	2000021c 	.word	0x2000021c
    2b44:	03ff0000 	.word	0x03ff0000
    2b48:	00000424 	.word	0x00000424

00002b4c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2b4c:	2808      	cmp	r0, #8
    2b4e:	d803      	bhi.n	2b58 <system_clock_source_enable+0xc>
    2b50:	0080      	lsls	r0, r0, #2
    2b52:	4b25      	ldr	r3, [pc, #148]	; (2be8 <system_clock_source_enable+0x9c>)
    2b54:	581b      	ldr	r3, [r3, r0]
    2b56:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2b58:	2017      	movs	r0, #23
    2b5a:	e044      	b.n	2be6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2b5c:	4a23      	ldr	r2, [pc, #140]	; (2bec <system_clock_source_enable+0xa0>)
    2b5e:	6a13      	ldr	r3, [r2, #32]
    2b60:	2102      	movs	r1, #2
    2b62:	430b      	orrs	r3, r1
    2b64:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2b66:	2000      	movs	r0, #0
    2b68:	e03d      	b.n	2be6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2b6a:	4a20      	ldr	r2, [pc, #128]	; (2bec <system_clock_source_enable+0xa0>)
    2b6c:	6993      	ldr	r3, [r2, #24]
    2b6e:	2102      	movs	r1, #2
    2b70:	430b      	orrs	r3, r1
    2b72:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2b74:	2000      	movs	r0, #0
		break;
    2b76:	e036      	b.n	2be6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2b78:	4a1c      	ldr	r2, [pc, #112]	; (2bec <system_clock_source_enable+0xa0>)
    2b7a:	8a13      	ldrh	r3, [r2, #16]
    2b7c:	2102      	movs	r1, #2
    2b7e:	430b      	orrs	r3, r1
    2b80:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2b82:	2000      	movs	r0, #0
		break;
    2b84:	e02f      	b.n	2be6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2b86:	4a19      	ldr	r2, [pc, #100]	; (2bec <system_clock_source_enable+0xa0>)
    2b88:	8a93      	ldrh	r3, [r2, #20]
    2b8a:	2102      	movs	r1, #2
    2b8c:	430b      	orrs	r3, r1
    2b8e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2b90:	2000      	movs	r0, #0
		break;
    2b92:	e028      	b.n	2be6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2b94:	4916      	ldr	r1, [pc, #88]	; (2bf0 <system_clock_source_enable+0xa4>)
    2b96:	680b      	ldr	r3, [r1, #0]
    2b98:	2202      	movs	r2, #2
    2b9a:	4313      	orrs	r3, r2
    2b9c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2b9e:	4b13      	ldr	r3, [pc, #76]	; (2bec <system_clock_source_enable+0xa0>)
    2ba0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2ba2:	0019      	movs	r1, r3
    2ba4:	320e      	adds	r2, #14
    2ba6:	68cb      	ldr	r3, [r1, #12]
    2ba8:	421a      	tst	r2, r3
    2baa:	d0fc      	beq.n	2ba6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2bac:	4a10      	ldr	r2, [pc, #64]	; (2bf0 <system_clock_source_enable+0xa4>)
    2bae:	6891      	ldr	r1, [r2, #8]
    2bb0:	4b0e      	ldr	r3, [pc, #56]	; (2bec <system_clock_source_enable+0xa0>)
    2bb2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2bb4:	6852      	ldr	r2, [r2, #4]
    2bb6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2bb8:	2200      	movs	r2, #0
    2bba:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2bbc:	0019      	movs	r1, r3
    2bbe:	3210      	adds	r2, #16
    2bc0:	68cb      	ldr	r3, [r1, #12]
    2bc2:	421a      	tst	r2, r3
    2bc4:	d0fc      	beq.n	2bc0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2bc6:	4b0a      	ldr	r3, [pc, #40]	; (2bf0 <system_clock_source_enable+0xa4>)
    2bc8:	681b      	ldr	r3, [r3, #0]
    2bca:	b29b      	uxth	r3, r3
    2bcc:	4a07      	ldr	r2, [pc, #28]	; (2bec <system_clock_source_enable+0xa0>)
    2bce:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2bd0:	2000      	movs	r0, #0
    2bd2:	e008      	b.n	2be6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2bd4:	4905      	ldr	r1, [pc, #20]	; (2bec <system_clock_source_enable+0xa0>)
    2bd6:	2244      	movs	r2, #68	; 0x44
    2bd8:	5c8b      	ldrb	r3, [r1, r2]
    2bda:	2002      	movs	r0, #2
    2bdc:	4303      	orrs	r3, r0
    2bde:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2be0:	2000      	movs	r0, #0
		break;
    2be2:	e000      	b.n	2be6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2be4:	2000      	movs	r0, #0
}
    2be6:	4770      	bx	lr
    2be8:	000083e8 	.word	0x000083e8
    2bec:	40000800 	.word	0x40000800
    2bf0:	2000021c 	.word	0x2000021c

00002bf4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2bf4:	b570      	push	{r4, r5, r6, lr}
    2bf6:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2bf8:	22c2      	movs	r2, #194	; 0xc2
    2bfa:	00d2      	lsls	r2, r2, #3
    2bfc:	4b42      	ldr	r3, [pc, #264]	; (2d08 <system_clock_init+0x114>)
    2bfe:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2c00:	4a42      	ldr	r2, [pc, #264]	; (2d0c <system_clock_init+0x118>)
    2c02:	6853      	ldr	r3, [r2, #4]
    2c04:	211e      	movs	r1, #30
    2c06:	438b      	bics	r3, r1
    2c08:	391a      	subs	r1, #26
    2c0a:	430b      	orrs	r3, r1
    2c0c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2c0e:	2201      	movs	r2, #1
    2c10:	ab01      	add	r3, sp, #4
    2c12:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2c14:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2c16:	4d3e      	ldr	r5, [pc, #248]	; (2d10 <system_clock_init+0x11c>)
    2c18:	b2e0      	uxtb	r0, r4
    2c1a:	a901      	add	r1, sp, #4
    2c1c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2c1e:	3401      	adds	r4, #1
    2c20:	2c25      	cmp	r4, #37	; 0x25
    2c22:	d1f9      	bne.n	2c18 <system_clock_init+0x24>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    2c24:	4c3b      	ldr	r4, [pc, #236]	; (2d14 <system_clock_init+0x120>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    2c26:	6823      	ldr	r3, [r4, #0]
    2c28:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    2c2a:	4937      	ldr	r1, [pc, #220]	; (2d08 <system_clock_init+0x114>)
    2c2c:	698a      	ldr	r2, [r1, #24]
    2c2e:	0e5b      	lsrs	r3, r3, #25
    2c30:	041b      	lsls	r3, r3, #16
    2c32:	4839      	ldr	r0, [pc, #228]	; (2d18 <system_clock_init+0x124>)
    2c34:	4002      	ands	r2, r0
    2c36:	4313      	orrs	r3, r2
    2c38:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    2c3a:	a80a      	add	r0, sp, #40	; 0x28
    2c3c:	2301      	movs	r3, #1
    2c3e:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    2c40:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    2c42:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2c44:	2207      	movs	r2, #7
    2c46:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    2c48:	2500      	movs	r5, #0
    2c4a:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    2c4c:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2c4e:	4b33      	ldr	r3, [pc, #204]	; (2d1c <system_clock_init+0x128>)
    2c50:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    2c52:	2004      	movs	r0, #4
    2c54:	4b32      	ldr	r3, [pc, #200]	; (2d20 <system_clock_init+0x12c>)
    2c56:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2c58:	ab05      	add	r3, sp, #20
    2c5a:	2200      	movs	r2, #0
    2c5c:	805d      	strh	r5, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2c5e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2c60:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2c62:	2120      	movs	r1, #32
    2c64:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2c66:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2c68:	6823      	ldr	r3, [r4, #0]
    2c6a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2c6c:	2b3f      	cmp	r3, #63	; 0x3f
    2c6e:	d049      	beq.n	2d04 <system_clock_init+0x110>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2c70:	a805      	add	r0, sp, #20
    2c72:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2c74:	2307      	movs	r3, #7
    2c76:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    2c78:	3303      	adds	r3, #3
    2c7a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    2c7c:	4b29      	ldr	r3, [pc, #164]	; (2d24 <system_clock_init+0x130>)
    2c7e:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    2c80:	3bff      	subs	r3, #255	; 0xff
    2c82:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    2c84:	4b28      	ldr	r3, [pc, #160]	; (2d28 <system_clock_init+0x134>)
    2c86:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2c88:	4b28      	ldr	r3, [pc, #160]	; (2d2c <system_clock_init+0x138>)
    2c8a:	4798      	blx	r3
	config->run_in_standby  = false;
    2c8c:	a804      	add	r0, sp, #16
    2c8e:	2400      	movs	r4, #0
    2c90:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    2c92:	2501      	movs	r5, #1
    2c94:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2c96:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2c98:	4b25      	ldr	r3, [pc, #148]	; (2d30 <system_clock_init+0x13c>)
    2c9a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2c9c:	2006      	movs	r0, #6
    2c9e:	4e20      	ldr	r6, [pc, #128]	; (2d20 <system_clock_init+0x12c>)
    2ca0:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2ca2:	4b24      	ldr	r3, [pc, #144]	; (2d34 <system_clock_init+0x140>)
    2ca4:	4798      	blx	r3
	config->division_factor    = 1;
    2ca6:	a901      	add	r1, sp, #4
    2ca8:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    2caa:	704c      	strb	r4, [r1, #1]
	config->output_enable      = false;
    2cac:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2cae:	2304      	movs	r3, #4
    2cb0:	700b      	strb	r3, [r1, #0]
    2cb2:	720d      	strb	r5, [r1, #8]
    2cb4:	2007      	movs	r0, #7
    2cb6:	4b20      	ldr	r3, [pc, #128]	; (2d38 <system_clock_init+0x144>)
    2cb8:	4798      	blx	r3
    2cba:	2007      	movs	r0, #7
    2cbc:	4b1f      	ldr	r3, [pc, #124]	; (2d3c <system_clock_init+0x148>)
    2cbe:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2cc0:	2007      	movs	r0, #7
    2cc2:	47b0      	blx	r6
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2cc4:	4910      	ldr	r1, [pc, #64]	; (2d08 <system_clock_init+0x114>)
    2cc6:	2210      	movs	r2, #16
    2cc8:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2cca:	421a      	tst	r2, r3
    2ccc:	d0fc      	beq.n	2cc8 <system_clock_init+0xd4>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    2cce:	4a0e      	ldr	r2, [pc, #56]	; (2d08 <system_clock_init+0x114>)
    2cd0:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2cd2:	2180      	movs	r1, #128	; 0x80
    2cd4:	430b      	orrs	r3, r1
    2cd6:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    2cd8:	4a19      	ldr	r2, [pc, #100]	; (2d40 <system_clock_init+0x14c>)
    2cda:	2300      	movs	r3, #0
    2cdc:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2cde:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2ce0:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2ce2:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2ce4:	a901      	add	r1, sp, #4
    2ce6:	2201      	movs	r2, #1
    2ce8:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2cea:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    2cec:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2cee:	3307      	adds	r3, #7
    2cf0:	700b      	strb	r3, [r1, #0]
    2cf2:	720a      	strb	r2, [r1, #8]
    2cf4:	2000      	movs	r0, #0
    2cf6:	4b10      	ldr	r3, [pc, #64]	; (2d38 <system_clock_init+0x144>)
    2cf8:	4798      	blx	r3
    2cfa:	2000      	movs	r0, #0
    2cfc:	4b0f      	ldr	r3, [pc, #60]	; (2d3c <system_clock_init+0x148>)
    2cfe:	4798      	blx	r3
#endif
}
    2d00:	b00c      	add	sp, #48	; 0x30
    2d02:	bd70      	pop	{r4, r5, r6, pc}
		coarse = 0x1f;
    2d04:	3b20      	subs	r3, #32
    2d06:	e7b3      	b.n	2c70 <system_clock_init+0x7c>
    2d08:	40000800 	.word	0x40000800
    2d0c:	41004000 	.word	0x41004000
    2d10:	000068f5 	.word	0x000068f5
    2d14:	00806024 	.word	0x00806024
    2d18:	ff80ffff 	.word	0xff80ffff
    2d1c:	00002a51 	.word	0x00002a51
    2d20:	00002b4d 	.word	0x00002b4d
    2d24:	000001ff 	.word	0x000001ff
    2d28:	ffffbb80 	.word	0xffffbb80
    2d2c:	00002acd 	.word	0x00002acd
    2d30:	00002a15 	.word	0x00002a15
    2d34:	000066bd 	.word	0x000066bd
    2d38:	000066e1 	.word	0x000066e1
    2d3c:	00006799 	.word	0x00006799
    2d40:	40000400 	.word	0x40000400

00002d44 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    2d44:	b510      	push	{r4, lr}
    2d46:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    2d48:	ab03      	add	r3, sp, #12
    2d4a:	2200      	movs	r2, #0
    2d4c:	701a      	strb	r2, [r3, #0]
    2d4e:	3203      	adds	r2, #3
    2d50:	705a      	strb	r2, [r3, #1]
    2d52:	3a01      	subs	r2, #1
    2d54:	709a      	strb	r2, [r3, #2]
    2d56:	3a01      	subs	r2, #1
    2d58:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    2d5a:	4b27      	ldr	r3, [pc, #156]	; (2df8 <udd_sleep_mode+0xb4>)
    2d5c:	781b      	ldrb	r3, [r3, #0]
    2d5e:	4283      	cmp	r3, r0
    2d60:	d007      	beq.n	2d72 <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    2d62:	2800      	cmp	r0, #0
    2d64:	d107      	bne.n	2d76 <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    2d66:	4b24      	ldr	r3, [pc, #144]	; (2df8 <udd_sleep_mode+0xb4>)
    2d68:	781b      	ldrb	r3, [r3, #0]
    2d6a:	2b00      	cmp	r3, #0
    2d6c:	d123      	bne.n	2db6 <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    2d6e:	4b22      	ldr	r3, [pc, #136]	; (2df8 <udd_sleep_mode+0xb4>)
    2d70:	7018      	strb	r0, [r3, #0]
}
    2d72:	b004      	add	sp, #16
    2d74:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    2d76:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    2d78:	5c1b      	ldrb	r3, [r3, r0]
    2d7a:	4a20      	ldr	r2, [pc, #128]	; (2dfc <udd_sleep_mode+0xb8>)
    2d7c:	5cd2      	ldrb	r2, [r2, r3]
    2d7e:	2aff      	cmp	r2, #255	; 0xff
    2d80:	d100      	bne.n	2d84 <udd_sleep_mode+0x40>
    2d82:	e7fe      	b.n	2d82 <udd_sleep_mode+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d84:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2d88:	4251      	negs	r1, r2
    2d8a:	414a      	adcs	r2, r1
    2d8c:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2d8e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2d90:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2d94:	2100      	movs	r1, #0
    2d96:	4a1a      	ldr	r2, [pc, #104]	; (2e00 <udd_sleep_mode+0xbc>)
    2d98:	7011      	strb	r1, [r2, #0]
	return flags;
    2d9a:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2d9c:	4917      	ldr	r1, [pc, #92]	; (2dfc <udd_sleep_mode+0xb8>)
    2d9e:	5cca      	ldrb	r2, [r1, r3]
    2da0:	3201      	adds	r2, #1
    2da2:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2da4:	2c00      	cmp	r4, #0
    2da6:	d0de      	beq.n	2d66 <udd_sleep_mode+0x22>
		cpu_irq_enable();
    2da8:	2201      	movs	r2, #1
    2daa:	4b15      	ldr	r3, [pc, #84]	; (2e00 <udd_sleep_mode+0xbc>)
    2dac:	701a      	strb	r2, [r3, #0]
    2dae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2db2:	b662      	cpsie	i
    2db4:	e7d7      	b.n	2d66 <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    2db6:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    2db8:	5cd3      	ldrb	r3, [r2, r3]
    2dba:	4a10      	ldr	r2, [pc, #64]	; (2dfc <udd_sleep_mode+0xb8>)
    2dbc:	5cd2      	ldrb	r2, [r2, r3]
    2dbe:	2a00      	cmp	r2, #0
    2dc0:	d100      	bne.n	2dc4 <udd_sleep_mode+0x80>
    2dc2:	e7fe      	b.n	2dc2 <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2dc4:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2dc8:	4251      	negs	r1, r2
    2dca:	414a      	adcs	r2, r1
    2dcc:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    2dce:	b672      	cpsid	i
    2dd0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2dd4:	2100      	movs	r1, #0
    2dd6:	4a0a      	ldr	r2, [pc, #40]	; (2e00 <udd_sleep_mode+0xbc>)
    2dd8:	7011      	strb	r1, [r2, #0]
	return flags;
    2dda:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    2ddc:	4907      	ldr	r1, [pc, #28]	; (2dfc <udd_sleep_mode+0xb8>)
    2dde:	5cca      	ldrb	r2, [r1, r3]
    2de0:	3a01      	subs	r2, #1
    2de2:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    2de4:	2c00      	cmp	r4, #0
    2de6:	d0c2      	beq.n	2d6e <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    2de8:	2201      	movs	r2, #1
    2dea:	4b05      	ldr	r3, [pc, #20]	; (2e00 <udd_sleep_mode+0xbc>)
    2dec:	701a      	strb	r2, [r3, #0]
    2dee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2df2:	b662      	cpsie	i
    2df4:	e7bb      	b.n	2d6e <udd_sleep_mode+0x2a>
    2df6:	46c0      	nop			; (mov r8, r8)
    2df8:	2000028c 	.word	0x2000028c
    2dfc:	20000bf4 	.word	0x20000bf4
    2e00:	200000f9 	.word	0x200000f9

00002e04 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    2e04:	0643      	lsls	r3, r0, #25
    2e06:	d00b      	beq.n	2e20 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2e08:	230f      	movs	r3, #15
    2e0a:	4003      	ands	r3, r0
    2e0c:	005b      	lsls	r3, r3, #1
    2e0e:	09c0      	lsrs	r0, r0, #7
    2e10:	1818      	adds	r0, r3, r0
    2e12:	3802      	subs	r0, #2
    2e14:	0083      	lsls	r3, r0, #2
    2e16:	1818      	adds	r0, r3, r0
    2e18:	0080      	lsls	r0, r0, #2
    2e1a:	4b02      	ldr	r3, [pc, #8]	; (2e24 <udd_ep_get_job+0x20>)
    2e1c:	1818      	adds	r0, r3, r0
	}
}
    2e1e:	4770      	bx	lr
		return NULL;
    2e20:	2000      	movs	r0, #0
    2e22:	e7fc      	b.n	2e1e <udd_ep_get_job+0x1a>
    2e24:	2000023c 	.word	0x2000023c

00002e28 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    2e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e2a:	46d6      	mov	lr, sl
    2e2c:	464f      	mov	r7, r9
    2e2e:	4646      	mov	r6, r8
    2e30:	b5c0      	push	{r6, r7, lr}
    2e32:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    2e34:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    2e36:	b26b      	sxtb	r3, r5
    2e38:	2b00      	cmp	r3, #0
    2e3a:	db26      	blt.n	2e8a <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    2e3c:	0028      	movs	r0, r5
    2e3e:	4b5e      	ldr	r3, [pc, #376]	; (2fb8 <udd_ep_transfer_process+0x190>)
    2e40:	4798      	blx	r3
    2e42:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2e44:	270f      	movs	r7, #15
    2e46:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2e48:	8a03      	ldrh	r3, [r0, #16]
    2e4a:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    2e4c:	464b      	mov	r3, r9
    2e4e:	881b      	ldrh	r3, [r3, #0]
    2e50:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    2e52:	7c83      	ldrb	r3, [r0, #18]
    2e54:	075b      	lsls	r3, r3, #29
    2e56:	d46a      	bmi.n	2f2e <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    2e58:	68e3      	ldr	r3, [r4, #12]
    2e5a:	4453      	add	r3, sl
    2e5c:	001e      	movs	r6, r3
    2e5e:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    2e60:	68a3      	ldr	r3, [r4, #8]
    2e62:	429e      	cmp	r6, r3
    2e64:	d800      	bhi.n	2e68 <udd_ep_transfer_process+0x40>
    2e66:	e074      	b.n	2f52 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    2e68:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    2e6a:	7ca3      	ldrb	r3, [r4, #18]
    2e6c:	2201      	movs	r2, #1
    2e6e:	4393      	bics	r3, r2
    2e70:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    2e72:	6823      	ldr	r3, [r4, #0]
    2e74:	2b00      	cmp	r3, #0
    2e76:	d003      	beq.n	2e80 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2e78:	68e1      	ldr	r1, [r4, #12]
    2e7a:	002a      	movs	r2, r5
    2e7c:	2000      	movs	r0, #0
    2e7e:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    2e80:	bc1c      	pop	{r2, r3, r4}
    2e82:	4690      	mov	r8, r2
    2e84:	4699      	mov	r9, r3
    2e86:	46a2      	mov	sl, r4
    2e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    2e8a:	0028      	movs	r0, r5
    2e8c:	4b4a      	ldr	r3, [pc, #296]	; (2fb8 <udd_ep_transfer_process+0x190>)
    2e8e:	4798      	blx	r3
    2e90:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2e92:	270f      	movs	r7, #15
    2e94:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2e96:	8a03      	ldrh	r3, [r0, #16]
    2e98:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    2e9a:	464b      	mov	r3, r9
    2e9c:	885e      	ldrh	r6, [r3, #2]
    2e9e:	68c3      	ldr	r3, [r0, #12]
    2ea0:	469c      	mov	ip, r3
    2ea2:	4466      	add	r6, ip
    2ea4:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    2ea6:	6881      	ldr	r1, [r0, #8]
    2ea8:	428e      	cmp	r6, r1
    2eaa:	d025      	beq.n	2ef8 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2eac:	1b8d      	subs	r5, r1, r6
    2eae:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2eb0:	4b42      	ldr	r3, [pc, #264]	; (2fbc <udd_ep_transfer_process+0x194>)
    2eb2:	429d      	cmp	r5, r3
    2eb4:	d906      	bls.n	2ec4 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    2eb6:	001d      	movs	r5, r3
    2eb8:	4641      	mov	r1, r8
    2eba:	0018      	movs	r0, r3
    2ebc:	4b40      	ldr	r3, [pc, #256]	; (2fc0 <udd_ep_transfer_process+0x198>)
    2ebe:	4798      	blx	r3
    2ec0:	1a6d      	subs	r5, r5, r1
    2ec2:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    2ec4:	7ca2      	ldrb	r2, [r4, #18]
    2ec6:	2300      	movs	r3, #0
    2ec8:	0792      	lsls	r2, r2, #30
    2eca:	d507      	bpl.n	2edc <udd_ep_transfer_process+0xb4>
    2ecc:	4641      	mov	r1, r8
    2ece:	0028      	movs	r0, r5
    2ed0:	4b3c      	ldr	r3, [pc, #240]	; (2fc4 <udd_ep_transfer_process+0x19c>)
    2ed2:	4798      	blx	r3
    2ed4:	b289      	uxth	r1, r1
    2ed6:	424b      	negs	r3, r1
    2ed8:	414b      	adcs	r3, r1
    2eda:	b2db      	uxtb	r3, r3
    2edc:	005b      	lsls	r3, r3, #1
    2ede:	7ca2      	ldrb	r2, [r4, #18]
    2ee0:	2102      	movs	r1, #2
    2ee2:	438a      	bics	r2, r1
    2ee4:	4313      	orrs	r3, r2
    2ee6:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2ee8:	6862      	ldr	r2, [r4, #4]
    2eea:	1992      	adds	r2, r2, r6
    2eec:	002b      	movs	r3, r5
    2eee:	0039      	movs	r1, r7
    2ef0:	4835      	ldr	r0, [pc, #212]	; (2fc8 <udd_ep_transfer_process+0x1a0>)
    2ef2:	4c36      	ldr	r4, [pc, #216]	; (2fcc <udd_ep_transfer_process+0x1a4>)
    2ef4:	47a0      	blx	r4
    2ef6:	e7c3      	b.n	2e80 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    2ef8:	7c83      	ldrb	r3, [r0, #18]
    2efa:	079b      	lsls	r3, r3, #30
    2efc:	d40b      	bmi.n	2f16 <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    2efe:	7c83      	ldrb	r3, [r0, #18]
    2f00:	2201      	movs	r2, #1
    2f02:	4393      	bics	r3, r2
    2f04:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2f06:	6803      	ldr	r3, [r0, #0]
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d0b9      	beq.n	2e80 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2f0c:	002a      	movs	r2, r5
    2f0e:	0031      	movs	r1, r6
    2f10:	2000      	movs	r0, #0
    2f12:	4798      	blx	r3
    2f14:	e7b4      	b.n	2e80 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    2f16:	7c83      	ldrb	r3, [r0, #18]
    2f18:	2202      	movs	r2, #2
    2f1a:	4393      	bics	r3, r2
    2f1c:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    2f1e:	6842      	ldr	r2, [r0, #4]
    2f20:	1992      	adds	r2, r2, r6
    2f22:	2300      	movs	r3, #0
    2f24:	0039      	movs	r1, r7
    2f26:	4828      	ldr	r0, [pc, #160]	; (2fc8 <udd_ep_transfer_process+0x1a0>)
    2f28:	4c28      	ldr	r4, [pc, #160]	; (2fcc <udd_ep_transfer_process+0x1a4>)
    2f2a:	47a0      	blx	r4
    2f2c:	e7a8      	b.n	2e80 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    2f2e:	6843      	ldr	r3, [r0, #4]
    2f30:	68c2      	ldr	r2, [r0, #12]
    2f32:	4694      	mov	ip, r2
    2f34:	4463      	add	r3, ip
    2f36:	001e      	movs	r6, r3
    2f38:	4641      	mov	r1, r8
    2f3a:	6880      	ldr	r0, [r0, #8]
    2f3c:	4b21      	ldr	r3, [pc, #132]	; (2fc4 <udd_ep_transfer_process+0x19c>)
    2f3e:	4798      	blx	r3
    2f40:	000a      	movs	r2, r1
    2f42:	1e7b      	subs	r3, r7, #1
    2f44:	019b      	lsls	r3, r3, #6
    2f46:	4922      	ldr	r1, [pc, #136]	; (2fd0 <udd_ep_transfer_process+0x1a8>)
    2f48:	1859      	adds	r1, r3, r1
    2f4a:	0030      	movs	r0, r6
    2f4c:	4b21      	ldr	r3, [pc, #132]	; (2fd4 <udd_ep_transfer_process+0x1ac>)
    2f4e:	4798      	blx	r3
    2f50:	e782      	b.n	2e58 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    2f52:	464a      	mov	r2, r9
    2f54:	8892      	ldrh	r2, [r2, #4]
    2f56:	4552      	cmp	r2, sl
    2f58:	d000      	beq.n	2f5c <udd_ep_transfer_process+0x134>
    2f5a:	e786      	b.n	2e6a <udd_ep_transfer_process+0x42>
    2f5c:	429e      	cmp	r6, r3
    2f5e:	d100      	bne.n	2f62 <udd_ep_transfer_process+0x13a>
    2f60:	e783      	b.n	2e6a <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2f62:	1b9b      	subs	r3, r3, r6
    2f64:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2f66:	4b15      	ldr	r3, [pc, #84]	; (2fbc <udd_ep_transfer_process+0x194>)
    2f68:	429d      	cmp	r5, r3
    2f6a:	d916      	bls.n	2f9a <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    2f6c:	001d      	movs	r5, r3
    2f6e:	4641      	mov	r1, r8
    2f70:	0018      	movs	r0, r3
    2f72:	4b13      	ldr	r3, [pc, #76]	; (2fc0 <udd_ep_transfer_process+0x198>)
    2f74:	4798      	blx	r3
    2f76:	1a6b      	subs	r3, r5, r1
    2f78:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    2f7a:	4598      	cmp	r8, r3
    2f7c:	d914      	bls.n	2fa8 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    2f7e:	7ca3      	ldrb	r3, [r4, #18]
    2f80:	2204      	movs	r2, #4
    2f82:	4313      	orrs	r3, r2
    2f84:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    2f86:	1e7a      	subs	r2, r7, #1
    2f88:	0192      	lsls	r2, r2, #6
    2f8a:	4b11      	ldr	r3, [pc, #68]	; (2fd0 <udd_ep_transfer_process+0x1a8>)
    2f8c:	18d2      	adds	r2, r2, r3
    2f8e:	4643      	mov	r3, r8
    2f90:	0039      	movs	r1, r7
    2f92:	480d      	ldr	r0, [pc, #52]	; (2fc8 <udd_ep_transfer_process+0x1a0>)
    2f94:	4c10      	ldr	r4, [pc, #64]	; (2fd8 <udd_ep_transfer_process+0x1b0>)
    2f96:	47a0      	blx	r4
    2f98:	e772      	b.n	2e80 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    2f9a:	4641      	mov	r1, r8
    2f9c:	0028      	movs	r0, r5
    2f9e:	4b09      	ldr	r3, [pc, #36]	; (2fc4 <udd_ep_transfer_process+0x19c>)
    2fa0:	4798      	blx	r3
    2fa2:	1a6b      	subs	r3, r5, r1
    2fa4:	b29b      	uxth	r3, r3
    2fa6:	e7e8      	b.n	2f7a <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2fa8:	6862      	ldr	r2, [r4, #4]
    2faa:	1992      	adds	r2, r2, r6
    2fac:	0039      	movs	r1, r7
    2fae:	4806      	ldr	r0, [pc, #24]	; (2fc8 <udd_ep_transfer_process+0x1a0>)
    2fb0:	4c09      	ldr	r4, [pc, #36]	; (2fd8 <udd_ep_transfer_process+0x1b0>)
    2fb2:	47a0      	blx	r4
    2fb4:	e764      	b.n	2e80 <udd_ep_transfer_process+0x58>
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	00002e05 	.word	0x00002e05
    2fbc:	00001fff 	.word	0x00001fff
    2fc0:	00006e51 	.word	0x00006e51
    2fc4:	00006c7d 	.word	0x00006c7d
    2fc8:	200004a0 	.word	0x200004a0
    2fcc:	00004719 	.word	0x00004719
    2fd0:	20000420 	.word	0x20000420
    2fd4:	0000714d 	.word	0x0000714d
    2fd8:	0000476d 	.word	0x0000476d

00002fdc <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    2fdc:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2fde:	2205      	movs	r2, #5
    2fe0:	4b05      	ldr	r3, [pc, #20]	; (2ff8 <udd_ctrl_stall_data+0x1c>)
    2fe2:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    2fe4:	4c05      	ldr	r4, [pc, #20]	; (2ffc <udd_ctrl_stall_data+0x20>)
    2fe6:	2180      	movs	r1, #128	; 0x80
    2fe8:	0020      	movs	r0, r4
    2fea:	4b05      	ldr	r3, [pc, #20]	; (3000 <udd_ctrl_stall_data+0x24>)
    2fec:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    2fee:	2100      	movs	r1, #0
    2ff0:	0020      	movs	r0, r4
    2ff2:	4b04      	ldr	r3, [pc, #16]	; (3004 <udd_ctrl_stall_data+0x28>)
    2ff4:	4798      	blx	r3
}
    2ff6:	bd10      	pop	{r4, pc}
    2ff8:	2000023a 	.word	0x2000023a
    2ffc:	200004a0 	.word	0x200004a0
    3000:	0000466d 	.word	0x0000466d
    3004:	00004693 	.word	0x00004693

00003008 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    3008:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    300a:	4c08      	ldr	r4, [pc, #32]	; (302c <_usb_device_lpm_suspend+0x24>)
    300c:	2106      	movs	r1, #6
    300e:	0020      	movs	r0, r4
    3010:	4d07      	ldr	r5, [pc, #28]	; (3030 <_usb_device_lpm_suspend+0x28>)
    3012:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3014:	2104      	movs	r1, #4
    3016:	0020      	movs	r0, r4
    3018:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    301a:	2102      	movs	r1, #2
    301c:	0020      	movs	r0, r4
    301e:	4b05      	ldr	r3, [pc, #20]	; (3034 <_usb_device_lpm_suspend+0x2c>)
    3020:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    3022:	2002      	movs	r0, #2
    3024:	4b04      	ldr	r3, [pc, #16]	; (3038 <_usb_device_lpm_suspend+0x30>)
    3026:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    3028:	bd70      	pop	{r4, r5, r6, pc}
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	200004a0 	.word	0x200004a0
    3030:	00004181 	.word	0x00004181
    3034:	00004161 	.word	0x00004161
    3038:	00002d45 	.word	0x00002d45

0000303c <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    303c:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    303e:	4b13      	ldr	r3, [pc, #76]	; (308c <_usb_on_wakeup+0x50>)
    3040:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3042:	069b      	lsls	r3, r3, #26
    3044:	d41c      	bmi.n	3080 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3046:	4911      	ldr	r1, [pc, #68]	; (308c <_usb_on_wakeup+0x50>)
    3048:	22d0      	movs	r2, #208	; 0xd0
    304a:	68cb      	ldr	r3, [r1, #12]
    304c:	4013      	ands	r3, r2
    304e:	2bd0      	cmp	r3, #208	; 0xd0
    3050:	d1fb      	bne.n	304a <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3052:	4c0f      	ldr	r4, [pc, #60]	; (3090 <_usb_on_wakeup+0x54>)
    3054:	2102      	movs	r1, #2
    3056:	0020      	movs	r0, r4
    3058:	4b0e      	ldr	r3, [pc, #56]	; (3094 <_usb_on_wakeup+0x58>)
    305a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    305c:	2104      	movs	r1, #4
    305e:	0020      	movs	r0, r4
    3060:	4d0d      	ldr	r5, [pc, #52]	; (3098 <_usb_on_wakeup+0x5c>)
    3062:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3064:	4a0d      	ldr	r2, [pc, #52]	; (309c <_usb_on_wakeup+0x60>)
    3066:	2106      	movs	r1, #6
    3068:	0020      	movs	r0, r4
    306a:	4b0d      	ldr	r3, [pc, #52]	; (30a0 <_usb_on_wakeup+0x64>)
    306c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    306e:	2106      	movs	r1, #6
    3070:	0020      	movs	r0, r4
    3072:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    3074:	2003      	movs	r0, #3
    3076:	4b0b      	ldr	r3, [pc, #44]	; (30a4 <_usb_on_wakeup+0x68>)
    3078:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    307a:	4b0b      	ldr	r3, [pc, #44]	; (30a8 <_usb_on_wakeup+0x6c>)
    307c:	4798      	blx	r3
#endif
}
    307e:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3080:	4902      	ldr	r1, [pc, #8]	; (308c <_usb_on_wakeup+0x50>)
    3082:	2210      	movs	r2, #16
    3084:	68cb      	ldr	r3, [r1, #12]
    3086:	421a      	tst	r2, r3
    3088:	d0fc      	beq.n	3084 <_usb_on_wakeup+0x48>
    308a:	e7e2      	b.n	3052 <_usb_on_wakeup+0x16>
    308c:	40000800 	.word	0x40000800
    3090:	200004a0 	.word	0x200004a0
    3094:	00004181 	.word	0x00004181
    3098:	00004161 	.word	0x00004161
    309c:	00003009 	.word	0x00003009
    30a0:	0000413d 	.word	0x0000413d
    30a4:	00002d45 	.word	0x00002d45
    30a8:	00003c91 	.word	0x00003c91

000030ac <_usb_on_bus_reset>:
{
    30ac:	b530      	push	{r4, r5, lr}
    30ae:	b083      	sub	sp, #12
    30b0:	0004      	movs	r4, r0
	udc_reset();
    30b2:	4b1e      	ldr	r3, [pc, #120]	; (312c <_usb_on_bus_reset+0x80>)
    30b4:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    30b6:	2380      	movs	r3, #128	; 0x80
    30b8:	6822      	ldr	r2, [r4, #0]
    30ba:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    30bc:	ad01      	add	r5, sp, #4
    30be:	0028      	movs	r0, r5
    30c0:	4b1b      	ldr	r3, [pc, #108]	; (3130 <_usb_on_bus_reset+0x84>)
    30c2:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    30c4:	2303      	movs	r3, #3
    30c6:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    30c8:	0029      	movs	r1, r5
    30ca:	0020      	movs	r0, r4
    30cc:	4b19      	ldr	r3, [pc, #100]	; (3134 <_usb_on_bus_reset+0x88>)
    30ce:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    30d0:	4919      	ldr	r1, [pc, #100]	; (3138 <_usb_on_bus_reset+0x8c>)
    30d2:	0020      	movs	r0, r4
    30d4:	4b19      	ldr	r3, [pc, #100]	; (313c <_usb_on_bus_reset+0x90>)
    30d6:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    30d8:	4b19      	ldr	r3, [pc, #100]	; (3140 <_usb_on_bus_reset+0x94>)
    30da:	2202      	movs	r2, #2
    30dc:	2100      	movs	r1, #0
    30de:	0020      	movs	r0, r4
    30e0:	4d18      	ldr	r5, [pc, #96]	; (3144 <_usb_on_bus_reset+0x98>)
    30e2:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    30e4:	4b18      	ldr	r3, [pc, #96]	; (3148 <_usb_on_bus_reset+0x9c>)
    30e6:	2200      	movs	r2, #0
    30e8:	2100      	movs	r1, #0
    30ea:	0020      	movs	r0, r4
    30ec:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    30ee:	4b17      	ldr	r3, [pc, #92]	; (314c <_usb_on_bus_reset+0xa0>)
    30f0:	2201      	movs	r2, #1
    30f2:	2100      	movs	r1, #0
    30f4:	0020      	movs	r0, r4
    30f6:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    30f8:	2202      	movs	r2, #2
    30fa:	2100      	movs	r1, #0
    30fc:	0020      	movs	r0, r4
    30fe:	4d14      	ldr	r5, [pc, #80]	; (3150 <_usb_on_bus_reset+0xa4>)
    3100:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3102:	2200      	movs	r2, #0
    3104:	2100      	movs	r1, #0
    3106:	0020      	movs	r0, r4
    3108:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    310a:	2201      	movs	r2, #1
    310c:	2100      	movs	r1, #0
    310e:	0020      	movs	r0, r4
    3110:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    3112:	6821      	ldr	r1, [r4, #0]
    3114:	890b      	ldrh	r3, [r1, #8]
    3116:	4a0f      	ldr	r2, [pc, #60]	; (3154 <_usb_on_bus_reset+0xa8>)
    3118:	401a      	ands	r2, r3
    311a:	2380      	movs	r3, #128	; 0x80
    311c:	00db      	lsls	r3, r3, #3
    311e:	4313      	orrs	r3, r2
    3120:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    3122:	2200      	movs	r2, #0
    3124:	4b0c      	ldr	r3, [pc, #48]	; (3158 <_usb_on_bus_reset+0xac>)
    3126:	701a      	strb	r2, [r3, #0]
}
    3128:	b003      	add	sp, #12
    312a:	bd30      	pop	{r4, r5, pc}
    312c:	00001d41 	.word	0x00001d41
    3130:	0000438d 	.word	0x0000438d
    3134:	0000439d 	.word	0x0000439d
    3138:	20000620 	.word	0x20000620
    313c:	000047bd 	.word	0x000047bd
    3140:	00003295 	.word	0x00003295
    3144:	0000419d 	.word	0x0000419d
    3148:	000035b1 	.word	0x000035b1
    314c:	00003199 	.word	0x00003199
    3150:	000041ed 	.word	0x000041ed
    3154:	fffff3ff 	.word	0xfffff3ff
    3158:	2000023a 	.word	0x2000023a

0000315c <udd_ctrl_send_zlp_in>:
{
    315c:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    315e:	2203      	movs	r2, #3
    3160:	4b07      	ldr	r3, [pc, #28]	; (3180 <udd_ctrl_send_zlp_in+0x24>)
    3162:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3164:	4c07      	ldr	r4, [pc, #28]	; (3184 <udd_ctrl_send_zlp_in+0x28>)
    3166:	4908      	ldr	r1, [pc, #32]	; (3188 <udd_ctrl_send_zlp_in+0x2c>)
    3168:	0020      	movs	r0, r4
    316a:	4b08      	ldr	r3, [pc, #32]	; (318c <udd_ctrl_send_zlp_in+0x30>)
    316c:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    316e:	4b08      	ldr	r3, [pc, #32]	; (3190 <udd_ctrl_send_zlp_in+0x34>)
    3170:	689a      	ldr	r2, [r3, #8]
    3172:	2300      	movs	r3, #0
    3174:	2100      	movs	r1, #0
    3176:	0020      	movs	r0, r4
    3178:	4c06      	ldr	r4, [pc, #24]	; (3194 <udd_ctrl_send_zlp_in+0x38>)
    317a:	47a0      	blx	r4
}
    317c:	bd10      	pop	{r4, pc}
    317e:	46c0      	nop			; (mov r8, r8)
    3180:	2000023a 	.word	0x2000023a
    3184:	200004a0 	.word	0x200004a0
    3188:	20000620 	.word	0x20000620
    318c:	000047bd 	.word	0x000047bd
    3190:	20000608 	.word	0x20000608
    3194:	00004719 	.word	0x00004719

00003198 <_usb_ep0_on_tansfer_fail>:
{
    3198:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    319a:	7989      	ldrb	r1, [r1, #6]
    319c:	b24b      	sxtb	r3, r1
    319e:	2b00      	cmp	r3, #0
    31a0:	db06      	blt.n	31b0 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    31a2:	4b0e      	ldr	r3, [pc, #56]	; (31dc <_usb_ep0_on_tansfer_fail+0x44>)
    31a4:	781b      	ldrb	r3, [r3, #0]
    31a6:	2b02      	cmp	r3, #2
    31a8:	d00f      	beq.n	31ca <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    31aa:	2b03      	cmp	r3, #3
    31ac:	d011      	beq.n	31d2 <_usb_ep0_on_tansfer_fail+0x3a>
}
    31ae:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    31b0:	4b0a      	ldr	r3, [pc, #40]	; (31dc <_usb_ep0_on_tansfer_fail+0x44>)
    31b2:	781b      	ldrb	r3, [r3, #0]
    31b4:	2b01      	cmp	r3, #1
    31b6:	d005      	beq.n	31c4 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    31b8:	2b04      	cmp	r3, #4
    31ba:	d1f8      	bne.n	31ae <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    31bc:	4808      	ldr	r0, [pc, #32]	; (31e0 <_usb_ep0_on_tansfer_fail+0x48>)
    31be:	4b09      	ldr	r3, [pc, #36]	; (31e4 <_usb_ep0_on_tansfer_fail+0x4c>)
    31c0:	4798      	blx	r3
    31c2:	e7f4      	b.n	31ae <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    31c4:	4b08      	ldr	r3, [pc, #32]	; (31e8 <_usb_ep0_on_tansfer_fail+0x50>)
    31c6:	4798      	blx	r3
    31c8:	e7f1      	b.n	31ae <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    31ca:	2204      	movs	r2, #4
    31cc:	4b03      	ldr	r3, [pc, #12]	; (31dc <_usb_ep0_on_tansfer_fail+0x44>)
    31ce:	701a      	strb	r2, [r3, #0]
    31d0:	e7ed      	b.n	31ae <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    31d2:	4803      	ldr	r0, [pc, #12]	; (31e0 <_usb_ep0_on_tansfer_fail+0x48>)
    31d4:	4b03      	ldr	r3, [pc, #12]	; (31e4 <_usb_ep0_on_tansfer_fail+0x4c>)
    31d6:	4798      	blx	r3
}
    31d8:	e7e9      	b.n	31ae <_usb_ep0_on_tansfer_fail+0x16>
    31da:	46c0      	nop			; (mov r8, r8)
    31dc:	2000023a 	.word	0x2000023a
    31e0:	200004a0 	.word	0x200004a0
    31e4:	0000466d 	.word	0x0000466d
    31e8:	0000315d 	.word	0x0000315d

000031ec <udd_ctrl_in_sent>:
{
    31ec:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    31ee:	4b20      	ldr	r3, [pc, #128]	; (3270 <udd_ctrl_in_sent+0x84>)
    31f0:	881b      	ldrh	r3, [r3, #0]
    31f2:	4a20      	ldr	r2, [pc, #128]	; (3274 <udd_ctrl_in_sent+0x88>)
    31f4:	8994      	ldrh	r4, [r2, #12]
    31f6:	1ae4      	subs	r4, r4, r3
    31f8:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    31fa:	2c00      	cmp	r4, #0
    31fc:	d118      	bne.n	3230 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    31fe:	4a1e      	ldr	r2, [pc, #120]	; (3278 <udd_ctrl_in_sent+0x8c>)
    3200:	8811      	ldrh	r1, [r2, #0]
    3202:	185b      	adds	r3, r3, r1
    3204:	b29b      	uxth	r3, r3
    3206:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    3208:	4a1a      	ldr	r2, [pc, #104]	; (3274 <udd_ctrl_in_sent+0x88>)
    320a:	88d2      	ldrh	r2, [r2, #6]
    320c:	429a      	cmp	r2, r3
    320e:	d023      	beq.n	3258 <udd_ctrl_in_sent+0x6c>
    3210:	4b1a      	ldr	r3, [pc, #104]	; (327c <udd_ctrl_in_sent+0x90>)
    3212:	781b      	ldrb	r3, [r3, #0]
    3214:	2b00      	cmp	r3, #0
    3216:	d11f      	bne.n	3258 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    3218:	4b16      	ldr	r3, [pc, #88]	; (3274 <udd_ctrl_in_sent+0x88>)
    321a:	695b      	ldr	r3, [r3, #20]
    321c:	2b00      	cmp	r3, #0
    321e:	d023      	beq.n	3268 <udd_ctrl_in_sent+0x7c>
    3220:	4798      	blx	r3
    3222:	2800      	cmp	r0, #0
    3224:	d020      	beq.n	3268 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    3226:	2200      	movs	r2, #0
    3228:	4b11      	ldr	r3, [pc, #68]	; (3270 <udd_ctrl_in_sent+0x84>)
    322a:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    322c:	4b11      	ldr	r3, [pc, #68]	; (3274 <udd_ctrl_in_sent+0x88>)
    322e:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    3230:	2c3f      	cmp	r4, #63	; 0x3f
    3232:	d919      	bls.n	3268 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    3234:	2200      	movs	r2, #0
    3236:	4b11      	ldr	r3, [pc, #68]	; (327c <udd_ctrl_in_sent+0x90>)
    3238:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    323a:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    323c:	4d0c      	ldr	r5, [pc, #48]	; (3270 <udd_ctrl_in_sent+0x84>)
    323e:	882b      	ldrh	r3, [r5, #0]
    3240:	4a0c      	ldr	r2, [pc, #48]	; (3274 <udd_ctrl_in_sent+0x88>)
    3242:	6892      	ldr	r2, [r2, #8]
    3244:	18d2      	adds	r2, r2, r3
    3246:	0023      	movs	r3, r4
    3248:	2100      	movs	r1, #0
    324a:	480d      	ldr	r0, [pc, #52]	; (3280 <udd_ctrl_in_sent+0x94>)
    324c:	4e0d      	ldr	r6, [pc, #52]	; (3284 <udd_ctrl_in_sent+0x98>)
    324e:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    3250:	882b      	ldrh	r3, [r5, #0]
    3252:	18e4      	adds	r4, r4, r3
    3254:	802c      	strh	r4, [r5, #0]
}
    3256:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    3258:	2204      	movs	r2, #4
    325a:	4b0b      	ldr	r3, [pc, #44]	; (3288 <udd_ctrl_in_sent+0x9c>)
    325c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    325e:	490b      	ldr	r1, [pc, #44]	; (328c <udd_ctrl_in_sent+0xa0>)
    3260:	4807      	ldr	r0, [pc, #28]	; (3280 <udd_ctrl_in_sent+0x94>)
    3262:	4b0b      	ldr	r3, [pc, #44]	; (3290 <udd_ctrl_in_sent+0xa4>)
    3264:	4798      	blx	r3
			return;
    3266:	e7f6      	b.n	3256 <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    3268:	2201      	movs	r2, #1
    326a:	4b04      	ldr	r3, [pc, #16]	; (327c <udd_ctrl_in_sent+0x90>)
    326c:	701a      	strb	r2, [r3, #0]
    326e:	e7e5      	b.n	323c <udd_ctrl_in_sent+0x50>
    3270:	20000236 	.word	0x20000236
    3274:	20000608 	.word	0x20000608
    3278:	20000238 	.word	0x20000238
    327c:	20000234 	.word	0x20000234
    3280:	200004a0 	.word	0x200004a0
    3284:	00004719 	.word	0x00004719
    3288:	2000023a 	.word	0x2000023a
    328c:	20000620 	.word	0x20000620
    3290:	000047bd 	.word	0x000047bd

00003294 <_usb_ep0_on_setup>:
{
    3294:	b510      	push	{r4, lr}
    3296:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    3298:	4b2c      	ldr	r3, [pc, #176]	; (334c <_usb_ep0_on_setup+0xb8>)
    329a:	781b      	ldrb	r3, [r3, #0]
    329c:	2b00      	cmp	r3, #0
    329e:	d007      	beq.n	32b0 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    32a0:	4b2b      	ldr	r3, [pc, #172]	; (3350 <_usb_ep0_on_setup+0xbc>)
    32a2:	691b      	ldr	r3, [r3, #16]
    32a4:	2b00      	cmp	r3, #0
    32a6:	d000      	beq.n	32aa <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    32a8:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    32aa:	2200      	movs	r2, #0
    32ac:	4b27      	ldr	r3, [pc, #156]	; (334c <_usb_ep0_on_setup+0xb8>)
    32ae:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    32b0:	8823      	ldrh	r3, [r4, #0]
    32b2:	2b08      	cmp	r3, #8
    32b4:	d002      	beq.n	32bc <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    32b6:	4b27      	ldr	r3, [pc, #156]	; (3354 <_usb_ep0_on_setup+0xc0>)
    32b8:	4798      	blx	r3
}
    32ba:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    32bc:	4a24      	ldr	r2, [pc, #144]	; (3350 <_usb_ep0_on_setup+0xbc>)
    32be:	4b26      	ldr	r3, [pc, #152]	; (3358 <_usb_ep0_on_setup+0xc4>)
    32c0:	7819      	ldrb	r1, [r3, #0]
    32c2:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    32c4:	7859      	ldrb	r1, [r3, #1]
    32c6:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    32c8:	78d8      	ldrb	r0, [r3, #3]
    32ca:	0200      	lsls	r0, r0, #8
    32cc:	7899      	ldrb	r1, [r3, #2]
    32ce:	1809      	adds	r1, r1, r0
    32d0:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    32d2:	7958      	ldrb	r0, [r3, #5]
    32d4:	0200      	lsls	r0, r0, #8
    32d6:	7919      	ldrb	r1, [r3, #4]
    32d8:	1809      	adds	r1, r1, r0
    32da:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    32dc:	79d9      	ldrb	r1, [r3, #7]
    32de:	0209      	lsls	r1, r1, #8
    32e0:	799b      	ldrb	r3, [r3, #6]
    32e2:	185b      	adds	r3, r3, r1
    32e4:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    32e6:	4b1d      	ldr	r3, [pc, #116]	; (335c <_usb_ep0_on_setup+0xc8>)
    32e8:	4798      	blx	r3
    32ea:	2800      	cmp	r0, #0
    32ec:	d016      	beq.n	331c <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    32ee:	4b18      	ldr	r3, [pc, #96]	; (3350 <_usb_ep0_on_setup+0xbc>)
    32f0:	781b      	ldrb	r3, [r3, #0]
    32f2:	2b7f      	cmp	r3, #127	; 0x7f
    32f4:	d815      	bhi.n	3322 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    32f6:	4b16      	ldr	r3, [pc, #88]	; (3350 <_usb_ep0_on_setup+0xbc>)
    32f8:	88db      	ldrh	r3, [r3, #6]
    32fa:	2b00      	cmp	r3, #0
    32fc:	d022      	beq.n	3344 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    32fe:	2300      	movs	r3, #0
    3300:	4a17      	ldr	r2, [pc, #92]	; (3360 <_usb_ep0_on_setup+0xcc>)
    3302:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    3304:	4a17      	ldr	r2, [pc, #92]	; (3364 <_usb_ep0_on_setup+0xd0>)
    3306:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    3308:	2201      	movs	r2, #1
    330a:	4b10      	ldr	r3, [pc, #64]	; (334c <_usb_ep0_on_setup+0xb8>)
    330c:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    330e:	2340      	movs	r3, #64	; 0x40
    3310:	4a11      	ldr	r2, [pc, #68]	; (3358 <_usb_ep0_on_setup+0xc4>)
    3312:	2100      	movs	r1, #0
    3314:	4814      	ldr	r0, [pc, #80]	; (3368 <_usb_ep0_on_setup+0xd4>)
    3316:	4c15      	ldr	r4, [pc, #84]	; (336c <_usb_ep0_on_setup+0xd8>)
    3318:	47a0      	blx	r4
    331a:	e7ce      	b.n	32ba <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    331c:	4b0d      	ldr	r3, [pc, #52]	; (3354 <_usb_ep0_on_setup+0xc0>)
    331e:	4798      	blx	r3
			return;
    3320:	e7cb      	b.n	32ba <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    3322:	2300      	movs	r3, #0
    3324:	4a0e      	ldr	r2, [pc, #56]	; (3360 <_usb_ep0_on_setup+0xcc>)
    3326:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    3328:	4a0e      	ldr	r2, [pc, #56]	; (3364 <_usb_ep0_on_setup+0xd0>)
    332a:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    332c:	2202      	movs	r2, #2
    332e:	4b07      	ldr	r3, [pc, #28]	; (334c <_usb_ep0_on_setup+0xb8>)
    3330:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3332:	2340      	movs	r3, #64	; 0x40
    3334:	4a08      	ldr	r2, [pc, #32]	; (3358 <_usb_ep0_on_setup+0xc4>)
    3336:	2100      	movs	r1, #0
    3338:	480b      	ldr	r0, [pc, #44]	; (3368 <_usb_ep0_on_setup+0xd4>)
    333a:	4c0c      	ldr	r4, [pc, #48]	; (336c <_usb_ep0_on_setup+0xd8>)
    333c:	47a0      	blx	r4
			udd_ctrl_in_sent();
    333e:	4b0c      	ldr	r3, [pc, #48]	; (3370 <_usb_ep0_on_setup+0xdc>)
    3340:	4798      	blx	r3
    3342:	e7ba      	b.n	32ba <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    3344:	4b0b      	ldr	r3, [pc, #44]	; (3374 <_usb_ep0_on_setup+0xe0>)
    3346:	4798      	blx	r3
				return;
    3348:	e7b7      	b.n	32ba <_usb_ep0_on_setup+0x26>
    334a:	46c0      	nop			; (mov r8, r8)
    334c:	2000023a 	.word	0x2000023a
    3350:	20000608 	.word	0x20000608
    3354:	00002fdd 	.word	0x00002fdd
    3358:	20000620 	.word	0x20000620
    335c:	00001dd1 	.word	0x00001dd1
    3360:	20000238 	.word	0x20000238
    3364:	20000236 	.word	0x20000236
    3368:	200004a0 	.word	0x200004a0
    336c:	0000476d 	.word	0x0000476d
    3370:	000031ed 	.word	0x000031ed
    3374:	0000315d 	.word	0x0000315d

00003378 <_usb_on_sof_notify>:
{
    3378:	b510      	push	{r4, lr}
	udc_sof_notify();
    337a:	4b02      	ldr	r3, [pc, #8]	; (3384 <_usb_on_sof_notify+0xc>)
    337c:	4798      	blx	r3
	UDC_SOF_EVENT();
    337e:	4b02      	ldr	r3, [pc, #8]	; (3388 <_usb_on_sof_notify+0x10>)
    3380:	4798      	blx	r3
}
    3382:	bd10      	pop	{r4, pc}
    3384:	00001d8d 	.word	0x00001d8d
    3388:	00003c9d 	.word	0x00003c9d

0000338c <_usb_on_suspend>:
{
    338c:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    338e:	4c07      	ldr	r4, [pc, #28]	; (33ac <_usb_on_suspend+0x20>)
    3390:	2104      	movs	r1, #4
    3392:	0020      	movs	r0, r4
    3394:	4b06      	ldr	r3, [pc, #24]	; (33b0 <_usb_on_suspend+0x24>)
    3396:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3398:	2102      	movs	r1, #2
    339a:	0020      	movs	r0, r4
    339c:	4b05      	ldr	r3, [pc, #20]	; (33b4 <_usb_on_suspend+0x28>)
    339e:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    33a0:	2001      	movs	r0, #1
    33a2:	4b05      	ldr	r3, [pc, #20]	; (33b8 <_usb_on_suspend+0x2c>)
    33a4:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    33a6:	4b05      	ldr	r3, [pc, #20]	; (33bc <_usb_on_suspend+0x30>)
    33a8:	4798      	blx	r3
}
    33aa:	bd10      	pop	{r4, pc}
    33ac:	200004a0 	.word	0x200004a0
    33b0:	00004181 	.word	0x00004181
    33b4:	00004161 	.word	0x00004161
    33b8:	00002d45 	.word	0x00002d45
    33bc:	00003c85 	.word	0x00003c85

000033c0 <udd_ep_abort>:
{
    33c0:	b510      	push	{r4, lr}
    33c2:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    33c4:	0001      	movs	r1, r0
    33c6:	480a      	ldr	r0, [pc, #40]	; (33f0 <udd_ep_abort+0x30>)
    33c8:	4b0a      	ldr	r3, [pc, #40]	; (33f4 <udd_ep_abort+0x34>)
    33ca:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    33cc:	0020      	movs	r0, r4
    33ce:	4b0a      	ldr	r3, [pc, #40]	; (33f8 <udd_ep_abort+0x38>)
    33d0:	4798      	blx	r3
	if (!ptr_job->busy) {
    33d2:	7c83      	ldrb	r3, [r0, #18]
    33d4:	07db      	lsls	r3, r3, #31
    33d6:	d50a      	bpl.n	33ee <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    33d8:	7c83      	ldrb	r3, [r0, #18]
    33da:	2201      	movs	r2, #1
    33dc:	4393      	bics	r3, r2
    33de:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    33e0:	6803      	ldr	r3, [r0, #0]
    33e2:	2b00      	cmp	r3, #0
    33e4:	d003      	beq.n	33ee <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    33e6:	68c1      	ldr	r1, [r0, #12]
    33e8:	0022      	movs	r2, r4
    33ea:	2001      	movs	r0, #1
    33ec:	4798      	blx	r3
}
    33ee:	bd10      	pop	{r4, pc}
    33f0:	200004a0 	.word	0x200004a0
    33f4:	0000460d 	.word	0x0000460d
    33f8:	00002e05 	.word	0x00002e05

000033fc <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    33fc:	4b02      	ldr	r3, [pc, #8]	; (3408 <udd_get_frame_number+0xc>)
    33fe:	681b      	ldr	r3, [r3, #0]
    3400:	8a18      	ldrh	r0, [r3, #16]
    3402:	0480      	lsls	r0, r0, #18
    3404:	0d40      	lsrs	r0, r0, #21
}
    3406:	4770      	bx	lr
    3408:	200004a0 	.word	0x200004a0

0000340c <udd_ep_free>:
{
    340c:	b570      	push	{r4, r5, r6, lr}
    340e:	b082      	sub	sp, #8
    3410:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    3412:	ad01      	add	r5, sp, #4
    3414:	0028      	movs	r0, r5
    3416:	4b0d      	ldr	r3, [pc, #52]	; (344c <udd_ep_free+0x40>)
    3418:	4798      	blx	r3
	udd_ep_abort(ep);
    341a:	0020      	movs	r0, r4
    341c:	4b0c      	ldr	r3, [pc, #48]	; (3450 <udd_ep_free+0x44>)
    341e:	4798      	blx	r3
	config_ep.ep_address = ep;
    3420:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    3422:	2300      	movs	r3, #0
    3424:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    3426:	4e0b      	ldr	r6, [pc, #44]	; (3454 <udd_ep_free+0x48>)
    3428:	0029      	movs	r1, r5
    342a:	0030      	movs	r0, r6
    342c:	4b0a      	ldr	r3, [pc, #40]	; (3458 <udd_ep_free+0x4c>)
    342e:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3430:	210f      	movs	r1, #15
    3432:	4021      	ands	r1, r4
    3434:	2200      	movs	r2, #0
    3436:	0030      	movs	r0, r6
    3438:	4b08      	ldr	r3, [pc, #32]	; (345c <udd_ep_free+0x50>)
    343a:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    343c:	2200      	movs	r2, #0
    343e:	0021      	movs	r1, r4
    3440:	0030      	movs	r0, r6
    3442:	4b07      	ldr	r3, [pc, #28]	; (3460 <udd_ep_free+0x54>)
    3444:	4798      	blx	r3
}
    3446:	b002      	add	sp, #8
    3448:	bd70      	pop	{r4, r5, r6, pc}
    344a:	46c0      	nop			; (mov r8, r8)
    344c:	0000438d 	.word	0x0000438d
    3450:	000033c1 	.word	0x000033c1
    3454:	200004a0 	.word	0x200004a0
    3458:	0000439d 	.word	0x0000439d
    345c:	000041c5 	.word	0x000041c5
    3460:	000042bd 	.word	0x000042bd

00003464 <udd_ep_alloc>:
{
    3464:	b5f0      	push	{r4, r5, r6, r7, lr}
    3466:	b083      	sub	sp, #12
    3468:	0005      	movs	r5, r0
    346a:	000f      	movs	r7, r1
    346c:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    346e:	ae01      	add	r6, sp, #4
    3470:	0030      	movs	r0, r6
    3472:	4b36      	ldr	r3, [pc, #216]	; (354c <udd_ep_alloc+0xe8>)
    3474:	4798      	blx	r3
	config_ep.ep_address = ep;
    3476:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    3478:	2c08      	cmp	r4, #8
    347a:	d813      	bhi.n	34a4 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    347c:	2200      	movs	r2, #0
    347e:	ab01      	add	r3, sp, #4
    3480:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    3482:	0028      	movs	r0, r5
    3484:	4b32      	ldr	r3, [pc, #200]	; (3550 <udd_ep_alloc+0xec>)
    3486:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    3488:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    348a:	2103      	movs	r1, #3
    348c:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    348e:	2901      	cmp	r1, #1
    3490:	d038      	beq.n	3504 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    3492:	2902      	cmp	r1, #2
    3494:	d043      	beq.n	351e <udd_ep_alloc+0xba>
		return false;
    3496:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    3498:	2903      	cmp	r1, #3
    349a:	d13d      	bne.n	3518 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    349c:	2204      	movs	r2, #4
    349e:	ab01      	add	r3, sp, #4
    34a0:	70da      	strb	r2, [r3, #3]
    34a2:	e032      	b.n	350a <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    34a4:	2c10      	cmp	r4, #16
    34a6:	d803      	bhi.n	34b0 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    34a8:	2201      	movs	r2, #1
    34aa:	ab01      	add	r3, sp, #4
    34ac:	705a      	strb	r2, [r3, #1]
    34ae:	e7e8      	b.n	3482 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    34b0:	2c20      	cmp	r4, #32
    34b2:	d803      	bhi.n	34bc <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    34b4:	2202      	movs	r2, #2
    34b6:	ab01      	add	r3, sp, #4
    34b8:	705a      	strb	r2, [r3, #1]
    34ba:	e7e2      	b.n	3482 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    34bc:	2c40      	cmp	r4, #64	; 0x40
    34be:	d803      	bhi.n	34c8 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    34c0:	2203      	movs	r2, #3
    34c2:	ab01      	add	r3, sp, #4
    34c4:	705a      	strb	r2, [r3, #1]
    34c6:	e7dc      	b.n	3482 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    34c8:	2c80      	cmp	r4, #128	; 0x80
    34ca:	d803      	bhi.n	34d4 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    34cc:	2204      	movs	r2, #4
    34ce:	ab01      	add	r3, sp, #4
    34d0:	705a      	strb	r2, [r3, #1]
    34d2:	e7d6      	b.n	3482 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    34d4:	2380      	movs	r3, #128	; 0x80
    34d6:	005b      	lsls	r3, r3, #1
    34d8:	429c      	cmp	r4, r3
    34da:	d803      	bhi.n	34e4 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    34dc:	2205      	movs	r2, #5
    34de:	ab01      	add	r3, sp, #4
    34e0:	705a      	strb	r2, [r3, #1]
    34e2:	e7ce      	b.n	3482 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    34e4:	2380      	movs	r3, #128	; 0x80
    34e6:	009b      	lsls	r3, r3, #2
    34e8:	429c      	cmp	r4, r3
    34ea:	d803      	bhi.n	34f4 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    34ec:	2206      	movs	r2, #6
    34ee:	ab01      	add	r3, sp, #4
    34f0:	705a      	strb	r2, [r3, #1]
    34f2:	e7c6      	b.n	3482 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    34f4:	4a17      	ldr	r2, [pc, #92]	; (3554 <udd_ep_alloc+0xf0>)
		return false;
    34f6:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    34f8:	4294      	cmp	r4, r2
    34fa:	d80d      	bhi.n	3518 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    34fc:	2207      	movs	r2, #7
    34fe:	ab01      	add	r3, sp, #4
    3500:	705a      	strb	r2, [r3, #1]
    3502:	e7be      	b.n	3482 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    3504:	2202      	movs	r2, #2
    3506:	ab01      	add	r3, sp, #4
    3508:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    350a:	a901      	add	r1, sp, #4
    350c:	4812      	ldr	r0, [pc, #72]	; (3558 <udd_ep_alloc+0xf4>)
    350e:	4b13      	ldr	r3, [pc, #76]	; (355c <udd_ep_alloc+0xf8>)
    3510:	4798      	blx	r3
		return false;
    3512:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3514:	2800      	cmp	r0, #0
    3516:	d006      	beq.n	3526 <udd_ep_alloc+0xc2>
}
    3518:	0018      	movs	r0, r3
    351a:	b003      	add	sp, #12
    351c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    351e:	2203      	movs	r2, #3
    3520:	ab01      	add	r3, sp, #4
    3522:	70da      	strb	r2, [r3, #3]
    3524:	e7f1      	b.n	350a <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    3526:	210f      	movs	r1, #15
    3528:	4029      	ands	r1, r5
    352a:	4c0b      	ldr	r4, [pc, #44]	; (3558 <udd_ep_alloc+0xf4>)
    352c:	4b0c      	ldr	r3, [pc, #48]	; (3560 <udd_ep_alloc+0xfc>)
    352e:	2200      	movs	r2, #0
    3530:	0020      	movs	r0, r4
    3532:	4e0c      	ldr	r6, [pc, #48]	; (3564 <udd_ep_alloc+0x100>)
    3534:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3536:	2200      	movs	r2, #0
    3538:	0029      	movs	r1, r5
    353a:	0020      	movs	r0, r4
    353c:	4e0a      	ldr	r6, [pc, #40]	; (3568 <udd_ep_alloc+0x104>)
    353e:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3540:	2201      	movs	r2, #1
    3542:	0029      	movs	r1, r5
    3544:	0020      	movs	r0, r4
    3546:	47b0      	blx	r6
	return true;
    3548:	2301      	movs	r3, #1
    354a:	e7e5      	b.n	3518 <udd_ep_alloc+0xb4>
    354c:	0000438d 	.word	0x0000438d
    3550:	00002e05 	.word	0x00002e05
    3554:	000003ff 	.word	0x000003ff
    3558:	200004a0 	.word	0x200004a0
    355c:	0000439d 	.word	0x0000439d
    3560:	00002e29 	.word	0x00002e29
    3564:	0000419d 	.word	0x0000419d
    3568:	000041ed 	.word	0x000041ed

0000356c <udd_ep_is_halted>:
{
    356c:	b510      	push	{r4, lr}
    356e:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    3570:	4801      	ldr	r0, [pc, #4]	; (3578 <udd_ep_is_halted+0xc>)
    3572:	4b02      	ldr	r3, [pc, #8]	; (357c <udd_ep_is_halted+0x10>)
    3574:	4798      	blx	r3
}
    3576:	bd10      	pop	{r4, pc}
    3578:	200004a0 	.word	0x200004a0
    357c:	00004643 	.word	0x00004643

00003580 <udd_ep_set_halt>:
{
    3580:	b510      	push	{r4, lr}
    3582:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3584:	230f      	movs	r3, #15
    3586:	4003      	ands	r3, r0
		return false;
    3588:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    358a:	2b02      	cmp	r3, #2
    358c:	d900      	bls.n	3590 <udd_ep_set_halt+0x10>
}
    358e:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    3590:	0021      	movs	r1, r4
    3592:	4804      	ldr	r0, [pc, #16]	; (35a4 <udd_ep_set_halt+0x24>)
    3594:	4b04      	ldr	r3, [pc, #16]	; (35a8 <udd_ep_set_halt+0x28>)
    3596:	4798      	blx	r3
	udd_ep_abort(ep);
    3598:	0020      	movs	r0, r4
    359a:	4b04      	ldr	r3, [pc, #16]	; (35ac <udd_ep_set_halt+0x2c>)
    359c:	4798      	blx	r3
	return true;
    359e:	2001      	movs	r0, #1
    35a0:	e7f5      	b.n	358e <udd_ep_set_halt+0xe>
    35a2:	46c0      	nop			; (mov r8, r8)
    35a4:	200004a0 	.word	0x200004a0
    35a8:	0000466d 	.word	0x0000466d
    35ac:	000033c1 	.word	0x000033c1

000035b0 <_usb_ep0_on_tansfer_ok>:
{
    35b0:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    35b2:	4b34      	ldr	r3, [pc, #208]	; (3684 <_usb_ep0_on_tansfer_ok+0xd4>)
    35b4:	781b      	ldrb	r3, [r3, #0]
    35b6:	2b01      	cmp	r3, #1
    35b8:	d00a      	beq.n	35d0 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    35ba:	2b02      	cmp	r3, #2
    35bc:	d05f      	beq.n	367e <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    35be:	4b32      	ldr	r3, [pc, #200]	; (3688 <_usb_ep0_on_tansfer_ok+0xd8>)
    35c0:	691b      	ldr	r3, [r3, #16]
    35c2:	2b00      	cmp	r3, #0
    35c4:	d000      	beq.n	35c8 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    35c6:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    35c8:	2200      	movs	r2, #0
    35ca:	4b2e      	ldr	r3, [pc, #184]	; (3684 <_usb_ep0_on_tansfer_ok+0xd4>)
    35cc:	701a      	strb	r2, [r3, #0]
}
    35ce:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    35d0:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    35d2:	4b2d      	ldr	r3, [pc, #180]	; (3688 <_usb_ep0_on_tansfer_ok+0xd8>)
    35d4:	899b      	ldrh	r3, [r3, #12]
    35d6:	4a2d      	ldr	r2, [pc, #180]	; (368c <_usb_ep0_on_tansfer_ok+0xdc>)
    35d8:	8814      	ldrh	r4, [r2, #0]
    35da:	1962      	adds	r2, r4, r5
    35dc:	4293      	cmp	r3, r2
    35de:	da01      	bge.n	35e4 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    35e0:	1b1d      	subs	r5, r3, r4
    35e2:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    35e4:	4b28      	ldr	r3, [pc, #160]	; (3688 <_usb_ep0_on_tansfer_ok+0xd8>)
    35e6:	6898      	ldr	r0, [r3, #8]
    35e8:	1900      	adds	r0, r0, r4
    35ea:	002a      	movs	r2, r5
    35ec:	4928      	ldr	r1, [pc, #160]	; (3690 <_usb_ep0_on_tansfer_ok+0xe0>)
    35ee:	4b29      	ldr	r3, [pc, #164]	; (3694 <_usb_ep0_on_tansfer_ok+0xe4>)
    35f0:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    35f2:	1964      	adds	r4, r4, r5
    35f4:	b2a4      	uxth	r4, r4
    35f6:	4b25      	ldr	r3, [pc, #148]	; (368c <_usb_ep0_on_tansfer_ok+0xdc>)
    35f8:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    35fa:	2d40      	cmp	r5, #64	; 0x40
    35fc:	d00a      	beq.n	3614 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    35fe:	4b22      	ldr	r3, [pc, #136]	; (3688 <_usb_ep0_on_tansfer_ok+0xd8>)
    3600:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    3602:	695b      	ldr	r3, [r3, #20]
    3604:	2b00      	cmp	r3, #0
    3606:	d002      	beq.n	360e <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    3608:	4798      	blx	r3
    360a:	2800      	cmp	r0, #0
    360c:	d014      	beq.n	3638 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    360e:	4b22      	ldr	r3, [pc, #136]	; (3698 <_usb_ep0_on_tansfer_ok+0xe8>)
    3610:	4798      	blx	r3
    3612:	e7dc      	b.n	35ce <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    3614:	4b1c      	ldr	r3, [pc, #112]	; (3688 <_usb_ep0_on_tansfer_ok+0xd8>)
    3616:	88da      	ldrh	r2, [r3, #6]
    3618:	4b20      	ldr	r3, [pc, #128]	; (369c <_usb_ep0_on_tansfer_ok+0xec>)
    361a:	881b      	ldrh	r3, [r3, #0]
    361c:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    361e:	429a      	cmp	r2, r3
    3620:	dded      	ble.n	35fe <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    3622:	4b19      	ldr	r3, [pc, #100]	; (3688 <_usb_ep0_on_tansfer_ok+0xd8>)
    3624:	899b      	ldrh	r3, [r3, #12]
    3626:	42a3      	cmp	r3, r4
    3628:	d00c      	beq.n	3644 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    362a:	2340      	movs	r3, #64	; 0x40
    362c:	4a18      	ldr	r2, [pc, #96]	; (3690 <_usb_ep0_on_tansfer_ok+0xe0>)
    362e:	2100      	movs	r1, #0
    3630:	481b      	ldr	r0, [pc, #108]	; (36a0 <_usb_ep0_on_tansfer_ok+0xf0>)
    3632:	4c1c      	ldr	r4, [pc, #112]	; (36a4 <_usb_ep0_on_tansfer_ok+0xf4>)
    3634:	47a0      	blx	r4
    3636:	e7ca      	b.n	35ce <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3638:	2205      	movs	r2, #5
    363a:	4b12      	ldr	r3, [pc, #72]	; (3684 <_usb_ep0_on_tansfer_ok+0xd4>)
    363c:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    363e:	4b1a      	ldr	r3, [pc, #104]	; (36a8 <_usb_ep0_on_tansfer_ok+0xf8>)
    3640:	4798      	blx	r3
    3642:	e7c4      	b.n	35ce <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    3644:	4b10      	ldr	r3, [pc, #64]	; (3688 <_usb_ep0_on_tansfer_ok+0xd8>)
    3646:	695b      	ldr	r3, [r3, #20]
    3648:	2b00      	cmp	r3, #0
    364a:	d00b      	beq.n	3664 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    364c:	4798      	blx	r3
    364e:	2800      	cmp	r0, #0
    3650:	d00f      	beq.n	3672 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3652:	4912      	ldr	r1, [pc, #72]	; (369c <_usb_ep0_on_tansfer_ok+0xec>)
    3654:	4a0d      	ldr	r2, [pc, #52]	; (368c <_usb_ep0_on_tansfer_ok+0xdc>)
    3656:	880b      	ldrh	r3, [r1, #0]
    3658:	8810      	ldrh	r0, [r2, #0]
    365a:	181b      	adds	r3, r3, r0
    365c:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    365e:	2300      	movs	r3, #0
    3660:	8013      	strh	r3, [r2, #0]
    3662:	e7e2      	b.n	362a <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3664:	2205      	movs	r2, #5
    3666:	4b07      	ldr	r3, [pc, #28]	; (3684 <_usb_ep0_on_tansfer_ok+0xd4>)
    3668:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    366a:	2000      	movs	r0, #0
    366c:	4b0e      	ldr	r3, [pc, #56]	; (36a8 <_usb_ep0_on_tansfer_ok+0xf8>)
    366e:	4798      	blx	r3
    3670:	e7ad      	b.n	35ce <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3672:	2205      	movs	r2, #5
    3674:	4b03      	ldr	r3, [pc, #12]	; (3684 <_usb_ep0_on_tansfer_ok+0xd4>)
    3676:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    3678:	4b0b      	ldr	r3, [pc, #44]	; (36a8 <_usb_ep0_on_tansfer_ok+0xf8>)
    367a:	4798      	blx	r3
    367c:	e7a7      	b.n	35ce <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    367e:	4b0b      	ldr	r3, [pc, #44]	; (36ac <_usb_ep0_on_tansfer_ok+0xfc>)
    3680:	4798      	blx	r3
    3682:	e7a4      	b.n	35ce <_usb_ep0_on_tansfer_ok+0x1e>
    3684:	2000023a 	.word	0x2000023a
    3688:	20000608 	.word	0x20000608
    368c:	20000236 	.word	0x20000236
    3690:	20000620 	.word	0x20000620
    3694:	0000714d 	.word	0x0000714d
    3698:	0000315d 	.word	0x0000315d
    369c:	20000238 	.word	0x20000238
    36a0:	200004a0 	.word	0x200004a0
    36a4:	0000476d 	.word	0x0000476d
    36a8:	00003581 	.word	0x00003581
    36ac:	000031ed 	.word	0x000031ed

000036b0 <udd_ep_clear_halt>:
{
    36b0:	b570      	push	{r4, r5, r6, lr}
    36b2:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    36b4:	230f      	movs	r3, #15
    36b6:	4003      	ands	r3, r0
		return false;
    36b8:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    36ba:	2b02      	cmp	r3, #2
    36bc:	d900      	bls.n	36c0 <udd_ep_clear_halt+0x10>
}
    36be:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    36c0:	0020      	movs	r0, r4
    36c2:	4b09      	ldr	r3, [pc, #36]	; (36e8 <udd_ep_clear_halt+0x38>)
    36c4:	4798      	blx	r3
    36c6:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    36c8:	0021      	movs	r1, r4
    36ca:	4808      	ldr	r0, [pc, #32]	; (36ec <udd_ep_clear_halt+0x3c>)
    36cc:	4b08      	ldr	r3, [pc, #32]	; (36f0 <udd_ep_clear_halt+0x40>)
    36ce:	4798      	blx	r3
	if (ptr_job->busy == true) {
    36d0:	7cab      	ldrb	r3, [r5, #18]
	return true;
    36d2:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    36d4:	07db      	lsls	r3, r3, #31
    36d6:	d5f2      	bpl.n	36be <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    36d8:	7cab      	ldrb	r3, [r5, #18]
    36da:	2201      	movs	r2, #1
    36dc:	4393      	bics	r3, r2
    36de:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    36e0:	682b      	ldr	r3, [r5, #0]
    36e2:	4798      	blx	r3
	return true;
    36e4:	2001      	movs	r0, #1
    36e6:	e7ea      	b.n	36be <udd_ep_clear_halt+0xe>
    36e8:	00002e05 	.word	0x00002e05
    36ec:	200004a0 	.word	0x200004a0
    36f0:	00004693 	.word	0x00004693

000036f4 <udd_ep_wait_stall_clear>:
{
    36f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36f6:	0004      	movs	r4, r0
    36f8:	000d      	movs	r5, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    36fa:	230f      	movs	r3, #15
    36fc:	4003      	ands	r3, r0
		return false;
    36fe:	2600      	movs	r6, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3700:	2b02      	cmp	r3, #2
    3702:	d805      	bhi.n	3710 <udd_ep_wait_stall_clear+0x1c>
	ptr_job = udd_ep_get_job(ep);
    3704:	4b0d      	ldr	r3, [pc, #52]	; (373c <udd_ep_wait_stall_clear+0x48>)
    3706:	4798      	blx	r3
    3708:	0007      	movs	r7, r0
	if (ptr_job->busy == true) {
    370a:	7c83      	ldrb	r3, [r0, #18]
    370c:	07db      	lsls	r3, r3, #31
    370e:	d501      	bpl.n	3714 <udd_ep_wait_stall_clear+0x20>
}
    3710:	0030      	movs	r0, r6
    3712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    3714:	0021      	movs	r1, r4
    3716:	480a      	ldr	r0, [pc, #40]	; (3740 <udd_ep_wait_stall_clear+0x4c>)
    3718:	4b0a      	ldr	r3, [pc, #40]	; (3744 <udd_ep_wait_stall_clear+0x50>)
    371a:	4798      	blx	r3
    371c:	1e06      	subs	r6, r0, #0
    371e:	d005      	beq.n	372c <udd_ep_wait_stall_clear+0x38>
		ptr_job->busy = true;
    3720:	7cbb      	ldrb	r3, [r7, #18]
    3722:	2201      	movs	r2, #1
    3724:	4313      	orrs	r3, r2
    3726:	74bb      	strb	r3, [r7, #18]
		ptr_job->call_nohalt = callback;
    3728:	603d      	str	r5, [r7, #0]
		return true;
    372a:	e7f1      	b.n	3710 <udd_ep_wait_stall_clear+0x1c>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    372c:	0021      	movs	r1, r4
    372e:	4804      	ldr	r0, [pc, #16]	; (3740 <udd_ep_wait_stall_clear+0x4c>)
    3730:	4b05      	ldr	r3, [pc, #20]	; (3748 <udd_ep_wait_stall_clear+0x54>)
    3732:	4798      	blx	r3
    3734:	1e06      	subs	r6, r0, #0
    3736:	d0eb      	beq.n	3710 <udd_ep_wait_stall_clear+0x1c>
		callback(); /* Endpoint not halted then call directly callback */
    3738:	47a8      	blx	r5
		return true;
    373a:	e7e9      	b.n	3710 <udd_ep_wait_stall_clear+0x1c>
    373c:	00002e05 	.word	0x00002e05
    3740:	200004a0 	.word	0x200004a0
    3744:	00004643 	.word	0x00004643
    3748:	000045e1 	.word	0x000045e1

0000374c <udd_ep_run>:
{
    374c:	b5f0      	push	{r4, r5, r6, r7, lr}
    374e:	b087      	sub	sp, #28
    3750:	0005      	movs	r5, r0
    3752:	9103      	str	r1, [sp, #12]
    3754:	9202      	str	r2, [sp, #8]
    3756:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    3758:	260f      	movs	r6, #15
    375a:	4006      	ands	r6, r0
		return false;
    375c:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    375e:	2e02      	cmp	r6, #2
    3760:	d902      	bls.n	3768 <udd_ep_run+0x1c>
}
    3762:	0020      	movs	r0, r4
    3764:	b007      	add	sp, #28
    3766:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3768:	4b64      	ldr	r3, [pc, #400]	; (38fc <udd_ep_run+0x1b0>)
    376a:	4798      	blx	r3
    376c:	1e04      	subs	r4, r0, #0
    376e:	d000      	beq.n	3772 <udd_ep_run+0x26>
    3770:	e0bd      	b.n	38ee <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    3772:	0028      	movs	r0, r5
    3774:	4b62      	ldr	r3, [pc, #392]	; (3900 <udd_ep_run+0x1b4>)
    3776:	4798      	blx	r3
    3778:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    377a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    377e:	425a      	negs	r2, r3
    3780:	4153      	adcs	r3, r2
    3782:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    3784:	b672      	cpsid	i
    3786:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    378a:	2200      	movs	r2, #0
    378c:	4b5d      	ldr	r3, [pc, #372]	; (3904 <udd_ep_run+0x1b8>)
    378e:	701a      	strb	r2, [r3, #0]
	return flags;
    3790:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    3792:	7c83      	ldrb	r3, [r0, #18]
    3794:	07db      	lsls	r3, r3, #31
    3796:	d508      	bpl.n	37aa <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    3798:	2a00      	cmp	r2, #0
    379a:	d0e2      	beq.n	3762 <udd_ep_run+0x16>
		cpu_irq_enable();
    379c:	2201      	movs	r2, #1
    379e:	4b59      	ldr	r3, [pc, #356]	; (3904 <udd_ep_run+0x1b8>)
    37a0:	701a      	strb	r2, [r3, #0]
    37a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    37a6:	b662      	cpsie	i
    37a8:	e7db      	b.n	3762 <udd_ep_run+0x16>
	ptr_job->busy = true;
    37aa:	7c83      	ldrb	r3, [r0, #18]
    37ac:	2101      	movs	r1, #1
    37ae:	430b      	orrs	r3, r1
    37b0:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    37b2:	2a00      	cmp	r2, #0
    37b4:	d005      	beq.n	37c2 <udd_ep_run+0x76>
		cpu_irq_enable();
    37b6:	2201      	movs	r2, #1
    37b8:	4b52      	ldr	r3, [pc, #328]	; (3904 <udd_ep_run+0x1b8>)
    37ba:	701a      	strb	r2, [r3, #0]
    37bc:	f3bf 8f5f 	dmb	sy
    37c0:	b662      	cpsie	i
	ptr_job->buf = buf;
    37c2:	9b02      	ldr	r3, [sp, #8]
    37c4:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    37c6:	9b01      	ldr	r3, [sp, #4]
    37c8:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    37ca:	2300      	movs	r3, #0
    37cc:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    37ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    37d0:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    37d2:	2301      	movs	r3, #1
    37d4:	9a03      	ldr	r2, [sp, #12]
    37d6:	4013      	ands	r3, r2
    37d8:	005a      	lsls	r2, r3, #1
    37da:	7cbb      	ldrb	r3, [r7, #18]
    37dc:	2102      	movs	r1, #2
    37de:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    37e0:	4313      	orrs	r3, r2
    37e2:	2204      	movs	r2, #4
    37e4:	4393      	bics	r3, r2
    37e6:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    37e8:	b26b      	sxtb	r3, r5
    37ea:	2b00      	cmp	r3, #0
    37ec:	db20      	blt.n	3830 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    37ee:	9b01      	ldr	r3, [sp, #4]
    37f0:	2b00      	cmp	r3, #0
    37f2:	d06f      	beq.n	38d4 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    37f4:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    37f6:	4b44      	ldr	r3, [pc, #272]	; (3908 <udd_ep_run+0x1bc>)
    37f8:	429c      	cmp	r4, r3
    37fa:	d95a      	bls.n	38b2 <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    37fc:	8a39      	ldrh	r1, [r7, #16]
    37fe:	001c      	movs	r4, r3
    3800:	0018      	movs	r0, r3
    3802:	4b42      	ldr	r3, [pc, #264]	; (390c <udd_ep_run+0x1c0>)
    3804:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3806:	1a63      	subs	r3, r4, r1
    3808:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    380a:	8a3b      	ldrh	r3, [r7, #16]
    380c:	429a      	cmp	r2, r3
    380e:	d257      	bcs.n	38c0 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    3810:	7cba      	ldrb	r2, [r7, #18]
    3812:	2104      	movs	r1, #4
    3814:	430a      	orrs	r2, r1
    3816:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    3818:	1e72      	subs	r2, r6, #1
    381a:	0192      	lsls	r2, r2, #6
    381c:	493c      	ldr	r1, [pc, #240]	; (3910 <udd_ep_run+0x1c4>)
    381e:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3820:	0031      	movs	r1, r6
    3822:	483c      	ldr	r0, [pc, #240]	; (3914 <udd_ep_run+0x1c8>)
    3824:	4c3c      	ldr	r4, [pc, #240]	; (3918 <udd_ep_run+0x1cc>)
    3826:	47a0      	blx	r4
				return (STATUS_OK ==
    3828:	4244      	negs	r4, r0
    382a:	4144      	adcs	r4, r0
    382c:	b2e4      	uxtb	r4, r4
    382e:	e798      	b.n	3762 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    3830:	9b01      	ldr	r3, [sp, #4]
    3832:	2b00      	cmp	r3, #0
    3834:	d027      	beq.n	3886 <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    3836:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3838:	4b33      	ldr	r3, [pc, #204]	; (3908 <udd_ep_run+0x1bc>)
    383a:	429d      	cmp	r5, r3
    383c:	d906      	bls.n	384c <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    383e:	8a39      	ldrh	r1, [r7, #16]
    3840:	001d      	movs	r5, r3
    3842:	0018      	movs	r0, r3
    3844:	4b31      	ldr	r3, [pc, #196]	; (390c <udd_ep_run+0x1c0>)
    3846:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3848:	1a6b      	subs	r3, r5, r1
    384a:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    384c:	7cbb      	ldrb	r3, [r7, #18]
    384e:	079b      	lsls	r3, r3, #30
    3850:	d507      	bpl.n	3862 <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    3852:	8a39      	ldrh	r1, [r7, #16]
    3854:	0028      	movs	r0, r5
    3856:	4b31      	ldr	r3, [pc, #196]	; (391c <udd_ep_run+0x1d0>)
    3858:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    385a:	b289      	uxth	r1, r1
    385c:	424c      	negs	r4, r1
    385e:	414c      	adcs	r4, r1
    3860:	b2e4      	uxtb	r4, r4
    3862:	2001      	movs	r0, #1
    3864:	4020      	ands	r0, r4
    3866:	0040      	lsls	r0, r0, #1
    3868:	7cbc      	ldrb	r4, [r7, #18]
    386a:	2302      	movs	r3, #2
    386c:	439c      	bics	r4, r3
    386e:	4304      	orrs	r4, r0
    3870:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    3872:	002b      	movs	r3, r5
    3874:	9a02      	ldr	r2, [sp, #8]
    3876:	0031      	movs	r1, r6
    3878:	4826      	ldr	r0, [pc, #152]	; (3914 <udd_ep_run+0x1c8>)
    387a:	4c29      	ldr	r4, [pc, #164]	; (3920 <udd_ep_run+0x1d4>)
    387c:	47a0      	blx	r4
		return (STATUS_OK ==
    387e:	4244      	negs	r4, r0
    3880:	4144      	adcs	r4, r0
    3882:	b2e4      	uxtb	r4, r4
    3884:	e76d      	b.n	3762 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    3886:	7cbb      	ldrb	r3, [r7, #18]
    3888:	079b      	lsls	r3, r3, #30
    388a:	d505      	bpl.n	3898 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    388c:	7cbb      	ldrb	r3, [r7, #18]
    388e:	2202      	movs	r2, #2
    3890:	4393      	bics	r3, r2
    3892:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    3894:	2500      	movs	r5, #0
    3896:	e7ec      	b.n	3872 <udd_ep_run+0x126>
			ptr_job->busy = false;
    3898:	7cbb      	ldrb	r3, [r7, #18]
    389a:	2201      	movs	r2, #1
    389c:	4393      	bics	r3, r2
    389e:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    38a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    38a2:	2b00      	cmp	r3, #0
    38a4:	d025      	beq.n	38f2 <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    38a6:	002a      	movs	r2, r5
    38a8:	2100      	movs	r1, #0
    38aa:	2000      	movs	r0, #0
    38ac:	4798      	blx	r3
			return true;
    38ae:	2401      	movs	r4, #1
    38b0:	e757      	b.n	3762 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    38b2:	8a39      	ldrh	r1, [r7, #16]
    38b4:	0020      	movs	r0, r4
    38b6:	4b19      	ldr	r3, [pc, #100]	; (391c <udd_ep_run+0x1d0>)
    38b8:	4798      	blx	r3
    38ba:	1a63      	subs	r3, r4, r1
    38bc:	b29a      	uxth	r2, r3
    38be:	e7a4      	b.n	380a <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    38c0:	0013      	movs	r3, r2
    38c2:	9a02      	ldr	r2, [sp, #8]
    38c4:	0031      	movs	r1, r6
    38c6:	4813      	ldr	r0, [pc, #76]	; (3914 <udd_ep_run+0x1c8>)
    38c8:	4c13      	ldr	r4, [pc, #76]	; (3918 <udd_ep_run+0x1cc>)
    38ca:	47a0      	blx	r4
				return (STATUS_OK ==
    38cc:	4244      	negs	r4, r0
    38ce:	4144      	adcs	r4, r0
    38d0:	b2e4      	uxtb	r4, r4
    38d2:	e746      	b.n	3762 <udd_ep_run+0x16>
			ptr_job->busy = false;
    38d4:	7cbb      	ldrb	r3, [r7, #18]
    38d6:	2201      	movs	r2, #1
    38d8:	4393      	bics	r3, r2
    38da:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    38dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    38de:	2b00      	cmp	r3, #0
    38e0:	d009      	beq.n	38f6 <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    38e2:	002a      	movs	r2, r5
    38e4:	2100      	movs	r1, #0
    38e6:	2000      	movs	r0, #0
    38e8:	4798      	blx	r3
			return true;
    38ea:	2401      	movs	r4, #1
    38ec:	e739      	b.n	3762 <udd_ep_run+0x16>
		return false;
    38ee:	2400      	movs	r4, #0
    38f0:	e737      	b.n	3762 <udd_ep_run+0x16>
			return true;
    38f2:	2401      	movs	r4, #1
    38f4:	e735      	b.n	3762 <udd_ep_run+0x16>
			return true;
    38f6:	2401      	movs	r4, #1
    38f8:	e733      	b.n	3762 <udd_ep_run+0x16>
    38fa:	46c0      	nop			; (mov r8, r8)
    38fc:	0000356d 	.word	0x0000356d
    3900:	00002e05 	.word	0x00002e05
    3904:	200000f9 	.word	0x200000f9
    3908:	00001fff 	.word	0x00001fff
    390c:	00006e51 	.word	0x00006e51
    3910:	20000420 	.word	0x20000420
    3914:	200004a0 	.word	0x200004a0
    3918:	0000476d 	.word	0x0000476d
    391c:	00006c7d 	.word	0x00006c7d
    3920:	00004719 	.word	0x00004719

00003924 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    3924:	4b02      	ldr	r3, [pc, #8]	; (3930 <udd_set_address+0xc>)
    3926:	681b      	ldr	r3, [r3, #0]
    3928:	2280      	movs	r2, #128	; 0x80
    392a:	4310      	orrs	r0, r2
    392c:	7298      	strb	r0, [r3, #10]
}
    392e:	4770      	bx	lr
    3930:	200004a0 	.word	0x200004a0

00003934 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    3934:	4b02      	ldr	r3, [pc, #8]	; (3940 <udd_getaddress+0xc>)
    3936:	681b      	ldr	r3, [r3, #0]
    3938:	7a98      	ldrb	r0, [r3, #10]
    393a:	0640      	lsls	r0, r0, #25
    393c:	0e40      	lsrs	r0, r0, #25
}
    393e:	4770      	bx	lr
    3940:	200004a0 	.word	0x200004a0

00003944 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    3944:	4b01      	ldr	r3, [pc, #4]	; (394c <udd_set_setup_payload+0x8>)
    3946:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    3948:	8199      	strh	r1, [r3, #12]
}
    394a:	4770      	bx	lr
    394c:	20000608 	.word	0x20000608

00003950 <udd_detach>:

void udd_detach(void)
{
    3950:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    3952:	4b05      	ldr	r3, [pc, #20]	; (3968 <udd_detach+0x18>)
    3954:	681a      	ldr	r2, [r3, #0]
    3956:	8913      	ldrh	r3, [r2, #8]
    3958:	2101      	movs	r1, #1
    395a:	430b      	orrs	r3, r1
    395c:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    395e:	2001      	movs	r0, #1
    3960:	4b02      	ldr	r3, [pc, #8]	; (396c <udd_detach+0x1c>)
    3962:	4798      	blx	r3
}
    3964:	bd10      	pop	{r4, pc}
    3966:	46c0      	nop			; (mov r8, r8)
    3968:	200004a0 	.word	0x200004a0
    396c:	00002d45 	.word	0x00002d45

00003970 <udd_attach>:

void udd_attach(void)
{
    3970:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    3972:	2003      	movs	r0, #3
    3974:	4b16      	ldr	r3, [pc, #88]	; (39d0 <udd_attach+0x60>)
    3976:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3978:	4c16      	ldr	r4, [pc, #88]	; (39d4 <udd_attach+0x64>)
    397a:	6822      	ldr	r2, [r4, #0]
    397c:	8913      	ldrh	r3, [r2, #8]
    397e:	2101      	movs	r1, #1
    3980:	438b      	bics	r3, r1
    3982:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    3984:	4a14      	ldr	r2, [pc, #80]	; (39d8 <udd_attach+0x68>)
    3986:	3103      	adds	r1, #3
    3988:	0020      	movs	r0, r4
    398a:	4e14      	ldr	r6, [pc, #80]	; (39dc <udd_attach+0x6c>)
    398c:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    398e:	4a14      	ldr	r2, [pc, #80]	; (39e0 <udd_attach+0x70>)
    3990:	2100      	movs	r1, #0
    3992:	0020      	movs	r0, r4
    3994:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    3996:	4a13      	ldr	r2, [pc, #76]	; (39e4 <udd_attach+0x74>)
    3998:	2101      	movs	r1, #1
    399a:	0020      	movs	r0, r4
    399c:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    399e:	4a12      	ldr	r2, [pc, #72]	; (39e8 <udd_attach+0x78>)
    39a0:	2102      	movs	r1, #2
    39a2:	0020      	movs	r0, r4
    39a4:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    39a6:	2104      	movs	r1, #4
    39a8:	0020      	movs	r0, r4
    39aa:	4d10      	ldr	r5, [pc, #64]	; (39ec <udd_attach+0x7c>)
    39ac:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    39ae:	2100      	movs	r1, #0
    39b0:	0020      	movs	r0, r4
    39b2:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    39b4:	2101      	movs	r1, #1
    39b6:	0020      	movs	r0, r4
    39b8:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    39ba:	2102      	movs	r1, #2
    39bc:	0020      	movs	r0, r4
    39be:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    39c0:	4a0b      	ldr	r2, [pc, #44]	; (39f0 <udd_attach+0x80>)
    39c2:	2106      	movs	r1, #6
    39c4:	0020      	movs	r0, r4
    39c6:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    39c8:	2106      	movs	r1, #6
    39ca:	0020      	movs	r0, r4
    39cc:	47a8      	blx	r5
#endif
}
    39ce:	bd70      	pop	{r4, r5, r6, pc}
    39d0:	00002d45 	.word	0x00002d45
    39d4:	200004a0 	.word	0x200004a0
    39d8:	0000338d 	.word	0x0000338d
    39dc:	0000413d 	.word	0x0000413d
    39e0:	00003379 	.word	0x00003379
    39e4:	000030ad 	.word	0x000030ad
    39e8:	0000303d 	.word	0x0000303d
    39ec:	00004161 	.word	0x00004161
    39f0:	00003009 	.word	0x00003009

000039f4 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    39f4:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    39f6:	2100      	movs	r1, #0
    39f8:	200e      	movs	r0, #14
    39fa:	4b08      	ldr	r3, [pc, #32]	; (3a1c <_uhd_vbus_handler+0x28>)
    39fc:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    39fe:	4b08      	ldr	r3, [pc, #32]	; (3a20 <_uhd_vbus_handler+0x2c>)
    3a00:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    3a02:	045b      	lsls	r3, r3, #17
    3a04:	d406      	bmi.n	3a14 <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    3a06:	4b07      	ldr	r3, [pc, #28]	; (3a24 <_uhd_vbus_handler+0x30>)
    3a08:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3a0a:	2100      	movs	r1, #0
    3a0c:	200e      	movs	r0, #14
    3a0e:	4b06      	ldr	r3, [pc, #24]	; (3a28 <_uhd_vbus_handler+0x34>)
    3a10:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    3a12:	bd10      	pop	{r4, pc}
		udd_attach();
    3a14:	4b05      	ldr	r3, [pc, #20]	; (3a2c <_uhd_vbus_handler+0x38>)
    3a16:	4798      	blx	r3
    3a18:	e7f7      	b.n	3a0a <_uhd_vbus_handler+0x16>
    3a1a:	46c0      	nop			; (mov r8, r8)
    3a1c:	00005025 	.word	0x00005025
    3a20:	41004400 	.word	0x41004400
    3a24:	00003951 	.word	0x00003951
    3a28:	00005005 	.word	0x00005005
    3a2c:	00003971 	.word	0x00003971

00003a30 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    3a30:	b570      	push	{r4, r5, r6, lr}
    3a32:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3a34:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3a38:	425a      	negs	r2, r3
    3a3a:	4153      	adcs	r3, r2
    3a3c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3a3e:	b672      	cpsid	i
    3a40:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3a44:	2600      	movs	r6, #0
    3a46:	4b29      	ldr	r3, [pc, #164]	; (3aec <udd_enable+0xbc>)
    3a48:	701e      	strb	r6, [r3, #0]
	return flags;
    3a4a:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    3a4c:	ac05      	add	r4, sp, #20
    3a4e:	0020      	movs	r0, r4
    3a50:	4b27      	ldr	r3, [pc, #156]	; (3af0 <udd_enable+0xc0>)
    3a52:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    3a54:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    3a56:	4e27      	ldr	r6, [pc, #156]	; (3af4 <udd_enable+0xc4>)
    3a58:	0022      	movs	r2, r4
    3a5a:	4927      	ldr	r1, [pc, #156]	; (3af8 <udd_enable+0xc8>)
    3a5c:	0030      	movs	r0, r6
    3a5e:	4b27      	ldr	r3, [pc, #156]	; (3afc <udd_enable+0xcc>)
    3a60:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    3a62:	0030      	movs	r0, r6
    3a64:	4b26      	ldr	r3, [pc, #152]	; (3b00 <udd_enable+0xd0>)
    3a66:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3a68:	4b26      	ldr	r3, [pc, #152]	; (3b04 <udd_enable+0xd4>)
    3a6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3a6c:	069b      	lsls	r3, r3, #26
    3a6e:	d434      	bmi.n	3ada <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3a70:	4924      	ldr	r1, [pc, #144]	; (3b04 <udd_enable+0xd4>)
    3a72:	22d0      	movs	r2, #208	; 0xd0
    3a74:	68cb      	ldr	r3, [r1, #12]
    3a76:	4013      	ands	r3, r2
    3a78:	2bd0      	cmp	r3, #208	; 0xd0
    3a7a:	d1fb      	bne.n	3a74 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    3a7c:	2001      	movs	r0, #1
    3a7e:	4b22      	ldr	r3, [pc, #136]	; (3b08 <udd_enable+0xd8>)
    3a80:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    3a82:	ac02      	add	r4, sp, #8
    3a84:	0020      	movs	r0, r4
    3a86:	4b21      	ldr	r3, [pc, #132]	; (3b0c <udd_enable+0xdc>)
    3a88:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    3a8a:	230e      	movs	r3, #14
    3a8c:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    3a8e:	2300      	movs	r3, #0
    3a90:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    3a92:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    3a94:	3303      	adds	r3, #3
    3a96:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    3a98:	3b02      	subs	r3, #2
    3a9a:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3a9c:	2100      	movs	r1, #0
    3a9e:	200e      	movs	r0, #14
    3aa0:	4b1b      	ldr	r3, [pc, #108]	; (3b10 <udd_enable+0xe0>)
    3aa2:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    3aa4:	0021      	movs	r1, r4
    3aa6:	200e      	movs	r0, #14
    3aa8:	4b1a      	ldr	r3, [pc, #104]	; (3b14 <udd_enable+0xe4>)
    3aaa:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    3aac:	2200      	movs	r2, #0
    3aae:	210e      	movs	r1, #14
    3ab0:	4819      	ldr	r0, [pc, #100]	; (3b18 <udd_enable+0xe8>)
    3ab2:	4b1a      	ldr	r3, [pc, #104]	; (3b1c <udd_enable+0xec>)
    3ab4:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3ab6:	2100      	movs	r1, #0
    3ab8:	200e      	movs	r0, #14
    3aba:	4b19      	ldr	r3, [pc, #100]	; (3b20 <udd_enable+0xf0>)
    3abc:	4798      	blx	r3
    3abe:	4b19      	ldr	r3, [pc, #100]	; (3b24 <udd_enable+0xf4>)
    3ac0:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    3ac2:	045b      	lsls	r3, r3, #17
    3ac4:	d40f      	bmi.n	3ae6 <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    3ac6:	2d00      	cmp	r5, #0
    3ac8:	d005      	beq.n	3ad6 <udd_enable+0xa6>
		cpu_irq_enable();
    3aca:	2201      	movs	r2, #1
    3acc:	4b07      	ldr	r3, [pc, #28]	; (3aec <udd_enable+0xbc>)
    3ace:	701a      	strb	r2, [r3, #0]
    3ad0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3ad4:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    3ad6:	b006      	add	sp, #24
    3ad8:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3ada:	490a      	ldr	r1, [pc, #40]	; (3b04 <udd_enable+0xd4>)
    3adc:	2210      	movs	r2, #16
    3ade:	68cb      	ldr	r3, [r1, #12]
    3ae0:	421a      	tst	r2, r3
    3ae2:	d0fc      	beq.n	3ade <udd_enable+0xae>
    3ae4:	e7ca      	b.n	3a7c <udd_enable+0x4c>
		_uhd_vbus_handler();
    3ae6:	4b0c      	ldr	r3, [pc, #48]	; (3b18 <udd_enable+0xe8>)
    3ae8:	4798      	blx	r3
    3aea:	e7ec      	b.n	3ac6 <udd_enable+0x96>
    3aec:	200000f9 	.word	0x200000f9
    3af0:	00004dc9 	.word	0x00004dc9
    3af4:	200004a0 	.word	0x200004a0
    3af8:	41005000 	.word	0x41005000
    3afc:	00004dd9 	.word	0x00004dd9
    3b00:	000047ed 	.word	0x000047ed
    3b04:	40000800 	.word	0x40000800
    3b08:	00002d45 	.word	0x00002d45
    3b0c:	000022a9 	.word	0x000022a9
    3b10:	00005025 	.word	0x00005025
    3b14:	000022bd 	.word	0x000022bd
    3b18:	000039f5 	.word	0x000039f5
    3b1c:	00004fd9 	.word	0x00004fd9
    3b20:	00005005 	.word	0x00005005
    3b24:	41004400 	.word	0x41004400

00003b28 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b2a:	46c6      	mov	lr, r8
    3b2c:	b500      	push	{lr}
    3b2e:	000c      	movs	r4, r1
    3b30:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    3b32:	2800      	cmp	r0, #0
    3b34:	d10f      	bne.n	3b56 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3b36:	2a00      	cmp	r2, #0
    3b38:	dd11      	ble.n	3b5e <_read+0x36>
    3b3a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3b3c:	4e09      	ldr	r6, [pc, #36]	; (3b64 <_read+0x3c>)
    3b3e:	4d0a      	ldr	r5, [pc, #40]	; (3b68 <_read+0x40>)
    3b40:	6830      	ldr	r0, [r6, #0]
    3b42:	0021      	movs	r1, r4
    3b44:	682b      	ldr	r3, [r5, #0]
    3b46:	4798      	blx	r3
		ptr++;
    3b48:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3b4a:	42bc      	cmp	r4, r7
    3b4c:	d1f8      	bne.n	3b40 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    3b4e:	4640      	mov	r0, r8
    3b50:	bc04      	pop	{r2}
    3b52:	4690      	mov	r8, r2
    3b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3b56:	2301      	movs	r3, #1
    3b58:	425b      	negs	r3, r3
    3b5a:	4698      	mov	r8, r3
    3b5c:	e7f7      	b.n	3b4e <_read+0x26>
	for (; len > 0; --len) {
    3b5e:	4680      	mov	r8, r0
    3b60:	e7f5      	b.n	3b4e <_read+0x26>
    3b62:	46c0      	nop			; (mov r8, r8)
    3b64:	20000668 	.word	0x20000668
    3b68:	20000660 	.word	0x20000660

00003b6c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b6e:	46c6      	mov	lr, r8
    3b70:	b500      	push	{lr}
    3b72:	000e      	movs	r6, r1
    3b74:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3b76:	3801      	subs	r0, #1
    3b78:	2802      	cmp	r0, #2
    3b7a:	d810      	bhi.n	3b9e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3b7c:	2a00      	cmp	r2, #0
    3b7e:	d011      	beq.n	3ba4 <_write+0x38>
    3b80:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3b82:	4b0c      	ldr	r3, [pc, #48]	; (3bb4 <_write+0x48>)
    3b84:	4698      	mov	r8, r3
    3b86:	4f0c      	ldr	r7, [pc, #48]	; (3bb8 <_write+0x4c>)
    3b88:	4643      	mov	r3, r8
    3b8a:	6818      	ldr	r0, [r3, #0]
    3b8c:	5d31      	ldrb	r1, [r6, r4]
    3b8e:	683b      	ldr	r3, [r7, #0]
    3b90:	4798      	blx	r3
    3b92:	2800      	cmp	r0, #0
    3b94:	db08      	blt.n	3ba8 <_write+0x3c>
			return -1;
		}
		++nChars;
    3b96:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3b98:	42a5      	cmp	r5, r4
    3b9a:	d1f5      	bne.n	3b88 <_write+0x1c>
    3b9c:	e006      	b.n	3bac <_write+0x40>
		return -1;
    3b9e:	2401      	movs	r4, #1
    3ba0:	4264      	negs	r4, r4
    3ba2:	e003      	b.n	3bac <_write+0x40>
	for (; len != 0; --len) {
    3ba4:	0014      	movs	r4, r2
    3ba6:	e001      	b.n	3bac <_write+0x40>
			return -1;
    3ba8:	2401      	movs	r4, #1
    3baa:	4264      	negs	r4, r4
	}
	return nChars;
}
    3bac:	0020      	movs	r0, r4
    3bae:	bc04      	pop	{r2}
    3bb0:	4690      	mov	r8, r2
    3bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bb4:	20000668 	.word	0x20000668
    3bb8:	20000664 	.word	0x20000664

00003bbc <main>:


/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    3bbc:	b570      	push	{r4, r5, r6, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
    3bbe:	2101      	movs	r1, #1
    3bc0:	4b1d      	ldr	r3, [pc, #116]	; (3c38 <main+0x7c>)
    3bc2:	7019      	strb	r1, [r3, #0]
    3bc4:	f3bf 8f5f 	dmb	sy
    3bc8:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    3bca:	4b1c      	ldr	r3, [pc, #112]	; (3c3c <main+0x80>)
    3bcc:	2200      	movs	r2, #0
    3bce:	701a      	strb	r2, [r3, #0]
    3bd0:	705a      	strb	r2, [r3, #1]
    3bd2:	709a      	strb	r2, [r3, #2]
    3bd4:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    3bd6:	7119      	strb	r1, [r3, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	system_init();
    3bd8:	4b19      	ldr	r3, [pc, #100]	; (3c40 <main+0x84>)
    3bda:	4798      	blx	r3
	
	delay_init();
    3bdc:	4b19      	ldr	r3, [pc, #100]	; (3c44 <main+0x88>)
    3bde:	4798      	blx	r3
	
	ui_lb_init();
    3be0:	4b19      	ldr	r3, [pc, #100]	; (3c48 <main+0x8c>)
    3be2:	4798      	blx	r3
	ui_powerdown();
    3be4:	4b19      	ldr	r3, [pc, #100]	; (3c4c <main+0x90>)
    3be6:	4798      	blx	r3
	ui_cdc_init();
    3be8:	4b19      	ldr	r3, [pc, #100]	; (3c50 <main+0x94>)
    3bea:	4798      	blx	r3
	
	audio_in_init();
    3bec:	4b19      	ldr	r3, [pc, #100]	; (3c54 <main+0x98>)
    3bee:	4798      	blx	r3
	audio_sync_init();
    3bf0:	4b19      	ldr	r3, [pc, #100]	; (3c58 <main+0x9c>)
    3bf2:	4798      	blx	r3
	
	sd_mmc_init();
    3bf4:	4b19      	ldr	r3, [pc, #100]	; (3c5c <main+0xa0>)
    3bf6:	4798      	blx	r3

	memories_initialization();
    3bf8:	4b19      	ldr	r3, [pc, #100]	; (3c60 <main+0xa4>)
    3bfa:	4798      	blx	r3

	ui_configure_callback();
    3bfc:	4b19      	ldr	r3, [pc, #100]	; (3c64 <main+0xa8>)
    3bfe:	4798      	blx	r3
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    3c00:	4b19      	ldr	r3, [pc, #100]	; (3c68 <main+0xac>)
    3c02:	4798      	blx	r3
	
	/* The main loop manages only the power mode
	 * because the USB management & button detection
	 * are done by interrupt */
	while (true) {
		if(recording_request) {
    3c04:	4c19      	ldr	r4, [pc, #100]	; (3c6c <main+0xb0>)
				recording_request = false;
				recording_on = true;
				LED_On(UI_LED_1_PIN);
			}
		}
		else if (main_b_msc_enable) {
    3c06:	4d1a      	ldr	r5, [pc, #104]	; (3c70 <main+0xb4>)
			if (!udi_msc_process_trans()) {
    3c08:	4e1a      	ldr	r6, [pc, #104]	; (3c74 <main+0xb8>)
    3c0a:	e00d      	b.n	3c28 <main+0x6c>
			if(sd_test_availability()) {
    3c0c:	4b1a      	ldr	r3, [pc, #104]	; (3c78 <main+0xbc>)
    3c0e:	4798      	blx	r3
    3c10:	2800      	cmp	r0, #0
    3c12:	d009      	beq.n	3c28 <main+0x6c>
				recording_request = false;
    3c14:	2200      	movs	r2, #0
    3c16:	4b15      	ldr	r3, [pc, #84]	; (3c6c <main+0xb0>)
    3c18:	701a      	strb	r2, [r3, #0]
				recording_on = true;
    3c1a:	3201      	adds	r2, #1
    3c1c:	4b17      	ldr	r3, [pc, #92]	; (3c7c <main+0xc0>)
    3c1e:	701a      	strb	r2, [r3, #0]
		port_base->OUTCLR.reg = pin_mask;
    3c20:	2280      	movs	r2, #128	; 0x80
    3c22:	0152      	lsls	r2, r2, #5
    3c24:	4b16      	ldr	r3, [pc, #88]	; (3c80 <main+0xc4>)
    3c26:	615a      	str	r2, [r3, #20]
		if(recording_request) {
    3c28:	7823      	ldrb	r3, [r4, #0]
    3c2a:	2b00      	cmp	r3, #0
    3c2c:	d1ee      	bne.n	3c0c <main+0x50>
		else if (main_b_msc_enable) {
    3c2e:	782b      	ldrb	r3, [r5, #0]
    3c30:	2b00      	cmp	r3, #0
    3c32:	d0f9      	beq.n	3c28 <main+0x6c>
			if (!udi_msc_process_trans()) {
    3c34:	47b0      	blx	r6
    3c36:	e7f7      	b.n	3c28 <main+0x6c>
    3c38:	200000f9 	.word	0x200000f9
    3c3c:	20000bf4 	.word	0x20000bf4
    3c40:	00006a21 	.word	0x00006a21
    3c44:	00005bd5 	.word	0x00005bd5
    3c48:	00004009 	.word	0x00004009
    3c4c:	000040f1 	.word	0x000040f1
    3c50:	00003f15 	.word	0x00003f15
    3c54:	00000775 	.word	0x00000775
    3c58:	000008d1 	.word	0x000008d1
    3c5c:	00000b8d 	.word	0x00000b8d
    3c60:	00003cdd 	.word	0x00003cdd
    3c64:	000040a9 	.word	0x000040a9
    3c68:	00001d35 	.word	0x00001d35
    3c6c:	2000035b 	.word	0x2000035b
    3c70:	20000358 	.word	0x20000358
    3c74:	00001a55 	.word	0x00001a55
    3c78:	00003ce1 	.word	0x00003ce1
    3c7c:	2000035a 	.word	0x2000035a
    3c80:	41004400 	.word	0x41004400

00003c84 <main_suspend_action>:
		//}
	}
}

void main_suspend_action(void)
{
    3c84:	b510      	push	{r4, lr}
	ui_powerdown();
    3c86:	4b01      	ldr	r3, [pc, #4]	; (3c8c <main_suspend_action+0x8>)
    3c88:	4798      	blx	r3
}
    3c8a:	bd10      	pop	{r4, pc}
    3c8c:	000040f1 	.word	0x000040f1

00003c90 <main_resume_action>:

void main_resume_action(void)
{
    3c90:	b510      	push	{r4, lr}
	ui_wakeup();
    3c92:	4b01      	ldr	r3, [pc, #4]	; (3c98 <main_resume_action+0x8>)
    3c94:	4798      	blx	r3
}
    3c96:	bd10      	pop	{r4, pc}
    3c98:	00004101 	.word	0x00004101

00003c9c <main_sof_action>:

void main_sof_action(void)
{
    3c9c:	b510      	push	{r4, lr}
	if (!main_b_msc_enable)
    3c9e:	4b05      	ldr	r3, [pc, #20]	; (3cb4 <main_sof_action+0x18>)
    3ca0:	781b      	ldrb	r3, [r3, #0]
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	d100      	bne.n	3ca8 <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    3ca6:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    3ca8:	4b03      	ldr	r3, [pc, #12]	; (3cb8 <main_sof_action+0x1c>)
    3caa:	4798      	blx	r3
    3cac:	4b03      	ldr	r3, [pc, #12]	; (3cbc <main_sof_action+0x20>)
    3cae:	4798      	blx	r3
    3cb0:	e7f9      	b.n	3ca6 <main_sof_action+0xa>
    3cb2:	46c0      	nop			; (mov r8, r8)
    3cb4:	20000358 	.word	0x20000358
    3cb8:	000033fd 	.word	0x000033fd
    3cbc:	00004119 	.word	0x00004119

00003cc0 <main_msc_enable>:

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
    3cc0:	2201      	movs	r2, #1
    3cc2:	4b02      	ldr	r3, [pc, #8]	; (3ccc <main_msc_enable+0xc>)
    3cc4:	701a      	strb	r2, [r3, #0]
	return true;
}
    3cc6:	2001      	movs	r0, #1
    3cc8:	4770      	bx	lr
    3cca:	46c0      	nop			; (mov r8, r8)
    3ccc:	20000358 	.word	0x20000358

00003cd0 <main_msc_disable>:

void main_msc_disable(void)
{
	main_b_msc_enable = false;
    3cd0:	2200      	movs	r2, #0
    3cd2:	4b01      	ldr	r3, [pc, #4]	; (3cd8 <main_msc_disable+0x8>)
    3cd4:	701a      	strb	r2, [r3, #0]
}
    3cd6:	4770      	bx	lr
    3cd8:	20000358 	.word	0x20000358

00003cdc <memories_initialization>:
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    3cdc:	4770      	bx	lr
	...

00003ce0 <sd_test_availability>:
#include "sd_management.h"

extern bool recording_request;

bool sd_test_availability(void)
{
    3ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Ctrl_status status;
	bool retVal = true;
	do {
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    3ce2:	4c2b      	ldr	r4, [pc, #172]	; (3d90 <sd_test_availability+0xb0>)
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
			}
		}
		LED_Toggle(UI_LED_1_PIN);
		LED_Toggle(UI_LED_3_PIN);
		delay_ms(300);
    3ce4:	4d2b      	ldr	r5, [pc, #172]	; (3d94 <sd_test_availability+0xb4>)
    3ce6:	e027      	b.n	3d38 <sd_test_availability+0x58>
			printf("Card install fail!\n\r");
    3ce8:	482b      	ldr	r0, [pc, #172]	; (3d98 <sd_test_availability+0xb8>)
    3cea:	4e2c      	ldr	r6, [pc, #176]	; (3d9c <sd_test_availability+0xbc>)
    3cec:	47b0      	blx	r6
			printf("Please unplug and re-plug the card.\n\r");
    3cee:	482c      	ldr	r0, [pc, #176]	; (3da0 <sd_test_availability+0xc0>)
    3cf0:	47b0      	blx	r6
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
    3cf2:	4e2c      	ldr	r6, [pc, #176]	; (3da4 <sd_test_availability+0xc4>)
    3cf4:	2000      	movs	r0, #0
    3cf6:	47b0      	blx	r6
    3cf8:	2802      	cmp	r0, #2
    3cfa:	d1fb      	bne.n	3cf4 <sd_test_availability+0x14>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    3cfc:	4b2a      	ldr	r3, [pc, #168]	; (3da8 <sd_test_availability+0xc8>)
    3cfe:	2280      	movs	r2, #128	; 0x80
    3d00:	0152      	lsls	r2, r2, #5
    3d02:	61da      	str	r2, [r3, #28]
    3d04:	2280      	movs	r2, #128	; 0x80
    3d06:	0212      	lsls	r2, r2, #8
    3d08:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    3d0a:	2000      	movs	r0, #0
    3d0c:	4b21      	ldr	r3, [pc, #132]	; (3d94 <sd_test_availability+0xb4>)
    3d0e:	4798      	blx	r3
    3d10:	2296      	movs	r2, #150	; 0x96
    3d12:	0052      	lsls	r2, r2, #1
    3d14:	2300      	movs	r3, #0
    3d16:	2100      	movs	r1, #0
    3d18:	4e24      	ldr	r6, [pc, #144]	; (3dac <sd_test_availability+0xcc>)
    3d1a:	47b0      	blx	r6
    3d1c:	4a24      	ldr	r2, [pc, #144]	; (3db0 <sd_test_availability+0xd0>)
    3d1e:	2300      	movs	r3, #0
    3d20:	1880      	adds	r0, r0, r2
    3d22:	4159      	adcs	r1, r3
    3d24:	4a23      	ldr	r2, [pc, #140]	; (3db4 <sd_test_availability+0xd4>)
    3d26:	2300      	movs	r3, #0
    3d28:	4e23      	ldr	r6, [pc, #140]	; (3db8 <sd_test_availability+0xd8>)
    3d2a:	47b0      	blx	r6
    3d2c:	4b23      	ldr	r3, [pc, #140]	; (3dbc <sd_test_availability+0xdc>)
    3d2e:	4798      	blx	r3
		if(!recording_request) {
    3d30:	4b23      	ldr	r3, [pc, #140]	; (3dc0 <sd_test_availability+0xe0>)
    3d32:	7818      	ldrb	r0, [r3, #0]
    3d34:	2800      	cmp	r0, #0
    3d36:	d023      	beq.n	3d80 <sd_test_availability+0xa0>
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    3d38:	2000      	movs	r0, #0
    3d3a:	47a0      	blx	r4
    3d3c:	0006      	movs	r6, r0
		if(status == CTRL_FAIL) {
    3d3e:	2801      	cmp	r0, #1
    3d40:	d0d2      	beq.n	3ce8 <sd_test_availability+0x8>
    3d42:	4b19      	ldr	r3, [pc, #100]	; (3da8 <sd_test_availability+0xc8>)
    3d44:	2280      	movs	r2, #128	; 0x80
    3d46:	0152      	lsls	r2, r2, #5
    3d48:	61da      	str	r2, [r3, #28]
    3d4a:	2280      	movs	r2, #128	; 0x80
    3d4c:	0212      	lsls	r2, r2, #8
    3d4e:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    3d50:	2000      	movs	r0, #0
    3d52:	47a8      	blx	r5
    3d54:	2296      	movs	r2, #150	; 0x96
    3d56:	0052      	lsls	r2, r2, #1
    3d58:	2300      	movs	r3, #0
    3d5a:	2100      	movs	r1, #0
    3d5c:	4f13      	ldr	r7, [pc, #76]	; (3dac <sd_test_availability+0xcc>)
    3d5e:	47b8      	blx	r7
    3d60:	4a13      	ldr	r2, [pc, #76]	; (3db0 <sd_test_availability+0xd0>)
    3d62:	2300      	movs	r3, #0
    3d64:	1880      	adds	r0, r0, r2
    3d66:	4159      	adcs	r1, r3
    3d68:	4a12      	ldr	r2, [pc, #72]	; (3db4 <sd_test_availability+0xd4>)
    3d6a:	2300      	movs	r3, #0
    3d6c:	4f12      	ldr	r7, [pc, #72]	; (3db8 <sd_test_availability+0xd8>)
    3d6e:	47b8      	blx	r7
    3d70:	4b12      	ldr	r3, [pc, #72]	; (3dbc <sd_test_availability+0xdc>)
    3d72:	4798      	blx	r3
		if(!recording_request) {
    3d74:	4b12      	ldr	r3, [pc, #72]	; (3dc0 <sd_test_availability+0xe0>)
    3d76:	7818      	ldrb	r0, [r3, #0]
    3d78:	2800      	cmp	r0, #0
    3d7a:	d001      	beq.n	3d80 <sd_test_availability+0xa0>
			retVal = false;
			break;
		}
	} while(status != CTRL_GOOD);
    3d7c:	2e00      	cmp	r6, #0
    3d7e:	d1db      	bne.n	3d38 <sd_test_availability+0x58>
		port_base->OUTSET.reg = pin_mask;
    3d80:	4b09      	ldr	r3, [pc, #36]	; (3da8 <sd_test_availability+0xc8>)
    3d82:	2280      	movs	r2, #128	; 0x80
    3d84:	0152      	lsls	r2, r2, #5
    3d86:	619a      	str	r2, [r3, #24]
    3d88:	2280      	movs	r2, #128	; 0x80
    3d8a:	0212      	lsls	r2, r2, #8
    3d8c:	619a      	str	r2, [r3, #24]
	LED_Off(UI_LED_1_PIN);
	LED_Off(UI_LED_3_PIN);
	return retVal;
    3d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d90:	00005bd9 	.word	0x00005bd9
    3d94:	000067dd 	.word	0x000067dd
    3d98:	0000840c 	.word	0x0000840c
    3d9c:	00007171 	.word	0x00007171
    3da0:	00008424 	.word	0x00008424
    3da4:	00000bad 	.word	0x00000bad
    3da8:	41004400 	.word	0x41004400
    3dac:	00006f19 	.word	0x00006f19
    3db0:	00001b57 	.word	0x00001b57
    3db4:	00001b58 	.word	0x00001b58
    3db8:	00006ed9 	.word	0x00006ed9
    3dbc:	20000001 	.word	0x20000001
    3dc0:	2000035b 	.word	0x2000035b

00003dc4 <ui_button2_callback>:
	}
}

void ui_button2_callback(void)
{
}
    3dc4:	4770      	bx	lr
	...

00003dc8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3dc8:	b570      	push	{r4, r5, r6, lr}
    3dca:	b082      	sub	sp, #8
    3dcc:	0005      	movs	r5, r0
    3dce:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3dd0:	2200      	movs	r2, #0
    3dd2:	466b      	mov	r3, sp
    3dd4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3dd6:	4c06      	ldr	r4, [pc, #24]	; (3df0 <usart_serial_getchar+0x28>)
    3dd8:	466b      	mov	r3, sp
    3dda:	1d99      	adds	r1, r3, #6
    3ddc:	0028      	movs	r0, r5
    3dde:	47a0      	blx	r4
    3de0:	2800      	cmp	r0, #0
    3de2:	d1f9      	bne.n	3dd8 <usart_serial_getchar+0x10>

	*c = temp;
    3de4:	466b      	mov	r3, sp
    3de6:	3306      	adds	r3, #6
    3de8:	881b      	ldrh	r3, [r3, #0]
    3dea:	7033      	strb	r3, [r6, #0]
}
    3dec:	b002      	add	sp, #8
    3dee:	bd70      	pop	{r4, r5, r6, pc}
    3df0:	00002775 	.word	0x00002775

00003df4 <usart_serial_putchar>:
{
    3df4:	b570      	push	{r4, r5, r6, lr}
    3df6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3df8:	b28c      	uxth	r4, r1
    3dfa:	4e03      	ldr	r6, [pc, #12]	; (3e08 <usart_serial_putchar+0x14>)
    3dfc:	0021      	movs	r1, r4
    3dfe:	0028      	movs	r0, r5
    3e00:	47b0      	blx	r6
    3e02:	2800      	cmp	r0, #0
    3e04:	d1fa      	bne.n	3dfc <usart_serial_putchar+0x8>
}
    3e06:	bd70      	pop	{r4, r5, r6, pc}
    3e08:	00002749 	.word	0x00002749

00003e0c <ui_button1_callback>:
{
    3e0c:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    3e0e:	4b18      	ldr	r3, [pc, #96]	; (3e70 <ui_button1_callback+0x64>)
    3e10:	6a1b      	ldr	r3, [r3, #32]
	if(press_state) {
    3e12:	00db      	lsls	r3, r3, #3
    3e14:	d500      	bpl.n	3e18 <ui_button1_callback+0xc>
}
    3e16:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    3e18:	2000      	movs	r0, #0
    3e1a:	4b16      	ldr	r3, [pc, #88]	; (3e74 <ui_button1_callback+0x68>)
    3e1c:	4798      	blx	r3
    3e1e:	2264      	movs	r2, #100	; 0x64
    3e20:	2300      	movs	r3, #0
    3e22:	2100      	movs	r1, #0
    3e24:	4c14      	ldr	r4, [pc, #80]	; (3e78 <ui_button1_callback+0x6c>)
    3e26:	47a0      	blx	r4
    3e28:	4a14      	ldr	r2, [pc, #80]	; (3e7c <ui_button1_callback+0x70>)
    3e2a:	2300      	movs	r3, #0
    3e2c:	1880      	adds	r0, r0, r2
    3e2e:	4159      	adcs	r1, r3
    3e30:	4a13      	ldr	r2, [pc, #76]	; (3e80 <ui_button1_callback+0x74>)
    3e32:	2300      	movs	r3, #0
    3e34:	4c13      	ldr	r4, [pc, #76]	; (3e84 <ui_button1_callback+0x78>)
    3e36:	47a0      	blx	r4
    3e38:	4b13      	ldr	r3, [pc, #76]	; (3e88 <ui_button1_callback+0x7c>)
    3e3a:	4798      	blx	r3
    3e3c:	4b0c      	ldr	r3, [pc, #48]	; (3e70 <ui_button1_callback+0x64>)
    3e3e:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    3e40:	00db      	lsls	r3, r3, #3
    3e42:	d4e8      	bmi.n	3e16 <ui_button1_callback+0xa>
		if(recording_on || recording_request) {
    3e44:	4b11      	ldr	r3, [pc, #68]	; (3e8c <ui_button1_callback+0x80>)
    3e46:	781b      	ldrb	r3, [r3, #0]
    3e48:	2b00      	cmp	r3, #0
    3e4a:	d107      	bne.n	3e5c <ui_button1_callback+0x50>
    3e4c:	4b10      	ldr	r3, [pc, #64]	; (3e90 <ui_button1_callback+0x84>)
    3e4e:	781b      	ldrb	r3, [r3, #0]
    3e50:	2b00      	cmp	r3, #0
    3e52:	d103      	bne.n	3e5c <ui_button1_callback+0x50>
			recording_request = true;
    3e54:	2201      	movs	r2, #1
    3e56:	4b0e      	ldr	r3, [pc, #56]	; (3e90 <ui_button1_callback+0x84>)
    3e58:	701a      	strb	r2, [r3, #0]
}
    3e5a:	e7dc      	b.n	3e16 <ui_button1_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    3e5c:	2280      	movs	r2, #128	; 0x80
    3e5e:	0152      	lsls	r2, r2, #5
    3e60:	4b03      	ldr	r3, [pc, #12]	; (3e70 <ui_button1_callback+0x64>)
    3e62:	619a      	str	r2, [r3, #24]
			recording_request = false;
    3e64:	2300      	movs	r3, #0
    3e66:	4a0a      	ldr	r2, [pc, #40]	; (3e90 <ui_button1_callback+0x84>)
    3e68:	7013      	strb	r3, [r2, #0]
			recording_on = false;
    3e6a:	4a08      	ldr	r2, [pc, #32]	; (3e8c <ui_button1_callback+0x80>)
    3e6c:	7013      	strb	r3, [r2, #0]
    3e6e:	e7d2      	b.n	3e16 <ui_button1_callback+0xa>
    3e70:	41004400 	.word	0x41004400
    3e74:	000067dd 	.word	0x000067dd
    3e78:	00006f19 	.word	0x00006f19
    3e7c:	00001b57 	.word	0x00001b57
    3e80:	00001b58 	.word	0x00001b58
    3e84:	00006ed9 	.word	0x00006ed9
    3e88:	20000001 	.word	0x20000001
    3e8c:	2000035a 	.word	0x2000035a
    3e90:	2000035b 	.word	0x2000035b

00003e94 <ui_button3_callback>:

void ui_button3_callback(void)
{
    3e94:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    3e96:	4b17      	ldr	r3, [pc, #92]	; (3ef4 <ui_button3_callback+0x60>)
    3e98:	6a1b      	ldr	r3, [r3, #32]
	//static uint32_t debounce_old3 = 0;
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_3_PIN);
	
	if(press_state) {
    3e9a:	071b      	lsls	r3, r3, #28
    3e9c:	d500      	bpl.n	3ea0 <ui_button3_callback+0xc>
		else {
			LED_On(UI_LED_3_PIN);
			monitoring_on = true;
		}
	}
}
    3e9e:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    3ea0:	2000      	movs	r0, #0
    3ea2:	4b15      	ldr	r3, [pc, #84]	; (3ef8 <ui_button3_callback+0x64>)
    3ea4:	4798      	blx	r3
    3ea6:	2264      	movs	r2, #100	; 0x64
    3ea8:	2300      	movs	r3, #0
    3eaa:	2100      	movs	r1, #0
    3eac:	4c13      	ldr	r4, [pc, #76]	; (3efc <ui_button3_callback+0x68>)
    3eae:	47a0      	blx	r4
    3eb0:	4a13      	ldr	r2, [pc, #76]	; (3f00 <ui_button3_callback+0x6c>)
    3eb2:	2300      	movs	r3, #0
    3eb4:	1880      	adds	r0, r0, r2
    3eb6:	4159      	adcs	r1, r3
    3eb8:	4a12      	ldr	r2, [pc, #72]	; (3f04 <ui_button3_callback+0x70>)
    3eba:	2300      	movs	r3, #0
    3ebc:	4c12      	ldr	r4, [pc, #72]	; (3f08 <ui_button3_callback+0x74>)
    3ebe:	47a0      	blx	r4
    3ec0:	4b12      	ldr	r3, [pc, #72]	; (3f0c <ui_button3_callback+0x78>)
    3ec2:	4798      	blx	r3
    3ec4:	4b0b      	ldr	r3, [pc, #44]	; (3ef4 <ui_button3_callback+0x60>)
    3ec6:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    3ec8:	071b      	lsls	r3, r3, #28
    3eca:	d4e8      	bmi.n	3e9e <ui_button3_callback+0xa>
		if(monitoring_on) {
    3ecc:	4b10      	ldr	r3, [pc, #64]	; (3f10 <ui_button3_callback+0x7c>)
    3ece:	781b      	ldrb	r3, [r3, #0]
    3ed0:	2b00      	cmp	r3, #0
    3ed2:	d107      	bne.n	3ee4 <ui_button3_callback+0x50>
		port_base->OUTCLR.reg = pin_mask;
    3ed4:	2280      	movs	r2, #128	; 0x80
    3ed6:	0212      	lsls	r2, r2, #8
    3ed8:	4b06      	ldr	r3, [pc, #24]	; (3ef4 <ui_button3_callback+0x60>)
    3eda:	615a      	str	r2, [r3, #20]
			monitoring_on = true;
    3edc:	2201      	movs	r2, #1
    3ede:	4b0c      	ldr	r3, [pc, #48]	; (3f10 <ui_button3_callback+0x7c>)
    3ee0:	701a      	strb	r2, [r3, #0]
}
    3ee2:	e7dc      	b.n	3e9e <ui_button3_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    3ee4:	2280      	movs	r2, #128	; 0x80
    3ee6:	0212      	lsls	r2, r2, #8
    3ee8:	4b02      	ldr	r3, [pc, #8]	; (3ef4 <ui_button3_callback+0x60>)
    3eea:	619a      	str	r2, [r3, #24]
			monitoring_on = false;
    3eec:	2200      	movs	r2, #0
    3eee:	4b08      	ldr	r3, [pc, #32]	; (3f10 <ui_button3_callback+0x7c>)
    3ef0:	701a      	strb	r2, [r3, #0]
    3ef2:	e7d4      	b.n	3e9e <ui_button3_callback+0xa>
    3ef4:	41004400 	.word	0x41004400
    3ef8:	000067dd 	.word	0x000067dd
    3efc:	00006f19 	.word	0x00006f19
    3f00:	00001b57 	.word	0x00001b57
    3f04:	00001b58 	.word	0x00001b58
    3f08:	00006ed9 	.word	0x00006ed9
    3f0c:	20000001 	.word	0x20000001
    3f10:	20000359 	.word	0x20000359

00003f14 <ui_cdc_init>:
{
    3f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f16:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3f18:	2380      	movs	r3, #128	; 0x80
    3f1a:	05db      	lsls	r3, r3, #23
    3f1c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3f1e:	2300      	movs	r3, #0
    3f20:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3f22:	22ff      	movs	r2, #255	; 0xff
    3f24:	4669      	mov	r1, sp
    3f26:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3f28:	2200      	movs	r2, #0
    3f2a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3f2c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3f2e:	2401      	movs	r4, #1
    3f30:	2124      	movs	r1, #36	; 0x24
    3f32:	4668      	mov	r0, sp
    3f34:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    3f36:	3101      	adds	r1, #1
    3f38:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    3f3a:	3101      	adds	r1, #1
    3f3c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    3f3e:	3101      	adds	r1, #1
    3f40:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    3f42:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3f44:	3105      	adds	r1, #5
    3f46:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3f48:	3101      	adds	r1, #1
    3f4a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3f4c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3f4e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3f50:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3f52:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3f54:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3f56:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    3f58:	2313      	movs	r3, #19
    3f5a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3f5c:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = UI_CDC_MUX_SETTING;
    3f5e:	2380      	movs	r3, #128	; 0x80
    3f60:	035b      	lsls	r3, r3, #13
    3f62:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = UI_CDC_PINMUX_PAD0;
    3f64:	4b1a      	ldr	r3, [pc, #104]	; (3fd0 <ui_cdc_init+0xbc>)
    3f66:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = UI_CDC_PINMUX_PAD1;
    3f68:	4b1a      	ldr	r3, [pc, #104]	; (3fd4 <ui_cdc_init+0xc0>)
    3f6a:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = UI_CDC_PINMUX_PAD2;
    3f6c:	2301      	movs	r3, #1
    3f6e:	425b      	negs	r3, r3
    3f70:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = UI_CDC_PINMUX_PAD3;
    3f72:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_CDC_BAUDRATE;
    3f74:	23e1      	movs	r3, #225	; 0xe1
    3f76:	025b      	lsls	r3, r3, #9
    3f78:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3f7a:	4d17      	ldr	r5, [pc, #92]	; (3fd8 <ui_cdc_init+0xc4>)
    3f7c:	4b17      	ldr	r3, [pc, #92]	; (3fdc <ui_cdc_init+0xc8>)
    3f7e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3f80:	4a17      	ldr	r2, [pc, #92]	; (3fe0 <ui_cdc_init+0xcc>)
    3f82:	4b18      	ldr	r3, [pc, #96]	; (3fe4 <ui_cdc_init+0xd0>)
    3f84:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3f86:	4a18      	ldr	r2, [pc, #96]	; (3fe8 <ui_cdc_init+0xd4>)
    3f88:	4b18      	ldr	r3, [pc, #96]	; (3fec <ui_cdc_init+0xd8>)
    3f8a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3f8c:	466a      	mov	r2, sp
    3f8e:	4918      	ldr	r1, [pc, #96]	; (3ff0 <ui_cdc_init+0xdc>)
    3f90:	0028      	movs	r0, r5
    3f92:	4b18      	ldr	r3, [pc, #96]	; (3ff4 <ui_cdc_init+0xe0>)
    3f94:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3f96:	4f18      	ldr	r7, [pc, #96]	; (3ff8 <ui_cdc_init+0xe4>)
    3f98:	683b      	ldr	r3, [r7, #0]
    3f9a:	6898      	ldr	r0, [r3, #8]
    3f9c:	2100      	movs	r1, #0
    3f9e:	4e17      	ldr	r6, [pc, #92]	; (3ffc <ui_cdc_init+0xe8>)
    3fa0:	47b0      	blx	r6
	setbuf(stdin, NULL);
    3fa2:	683b      	ldr	r3, [r7, #0]
    3fa4:	6858      	ldr	r0, [r3, #4]
    3fa6:	2100      	movs	r1, #0
    3fa8:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3faa:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3fac:	0030      	movs	r0, r6
    3fae:	4b14      	ldr	r3, [pc, #80]	; (4000 <ui_cdc_init+0xec>)
    3fb0:	4798      	blx	r3
    3fb2:	231f      	movs	r3, #31
    3fb4:	4018      	ands	r0, r3
    3fb6:	4084      	lsls	r4, r0
    3fb8:	4b12      	ldr	r3, [pc, #72]	; (4004 <ui_cdc_init+0xf0>)
    3fba:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3fbc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3fbe:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3fc0:	2b00      	cmp	r3, #0
    3fc2:	d1fc      	bne.n	3fbe <ui_cdc_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3fc4:	6833      	ldr	r3, [r6, #0]
    3fc6:	2202      	movs	r2, #2
    3fc8:	4313      	orrs	r3, r2
    3fca:	6033      	str	r3, [r6, #0]
}
    3fcc:	b011      	add	sp, #68	; 0x44
    3fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fd0:	00160002 	.word	0x00160002
    3fd4:	00170002 	.word	0x00170002
    3fd8:	20000678 	.word	0x20000678
    3fdc:	20000668 	.word	0x20000668
    3fe0:	00003df5 	.word	0x00003df5
    3fe4:	20000664 	.word	0x20000664
    3fe8:	00003dc9 	.word	0x00003dc9
    3fec:	20000660 	.word	0x20000660
    3ff0:	42001400 	.word	0x42001400
    3ff4:	00002405 	.word	0x00002405
    3ff8:	200000fc 	.word	0x200000fc
    3ffc:	000071a5 	.word	0x000071a5
    4000:	00002375 	.word	0x00002375
    4004:	e000e100 	.word	0xe000e100

00004008 <ui_lb_init>:
{
    4008:	b5f0      	push	{r4, r5, r6, r7, lr}
    400a:	46c6      	mov	lr, r8
    400c:	b500      	push	{lr}
    400e:	b084      	sub	sp, #16
	config->input_pull = PORT_PIN_PULL_UP;
    4010:	ac03      	add	r4, sp, #12
    4012:	2501      	movs	r5, #1
    4014:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    4016:	2600      	movs	r6, #0
    4018:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    401a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(UI_LED_1_PIN, &pin_conf);
    401c:	0021      	movs	r1, r4
    401e:	200c      	movs	r0, #12
    4020:	4b1c      	ldr	r3, [pc, #112]	; (4094 <ui_lb_init+0x8c>)
    4022:	4698      	mov	r8, r3
    4024:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    4026:	4f1c      	ldr	r7, [pc, #112]	; (4098 <ui_lb_init+0x90>)
    4028:	2380      	movs	r3, #128	; 0x80
    402a:	015b      	lsls	r3, r3, #5
    402c:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_2_PIN, &pin_conf);
    402e:	0021      	movs	r1, r4
    4030:	200d      	movs	r0, #13
    4032:	47c0      	blx	r8
    4034:	2380      	movs	r3, #128	; 0x80
    4036:	019b      	lsls	r3, r3, #6
    4038:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_3_PIN, &pin_conf);
    403a:	0021      	movs	r1, r4
    403c:	200f      	movs	r0, #15
    403e:	47c0      	blx	r8
    4040:	2380      	movs	r3, #128	; 0x80
    4042:	021b      	lsls	r3, r3, #8
    4044:	61bb      	str	r3, [r7, #24]
	extint_chan_get_config_defaults(&config_extint_chan);
    4046:	4668      	mov	r0, sp
    4048:	4b14      	ldr	r3, [pc, #80]	; (409c <ui_lb_init+0x94>)
    404a:	4798      	blx	r3
	config_extint_chan.gpio_pin = UI_BUT_1_EIC_PIN;
    404c:	231c      	movs	r3, #28
    404e:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_1_EIC_MUX;
    4050:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    4052:	466b      	mov	r3, sp
    4054:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    4056:	2403      	movs	r4, #3
    4058:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_1_EIC_LINE, &config_extint_chan);
    405a:	4669      	mov	r1, sp
    405c:	2008      	movs	r0, #8
    405e:	4f10      	ldr	r7, [pc, #64]	; (40a0 <ui_lb_init+0x98>)
    4060:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_2_EIC_PIN;
    4062:	2302      	movs	r3, #2
    4064:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_2_EIC_MUX;
    4066:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    4068:	466b      	mov	r3, sp
    406a:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    406c:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_2_EIC_LINE, &config_extint_chan);
    406e:	4669      	mov	r1, sp
    4070:	2002      	movs	r0, #2
    4072:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_3_EIC_PIN;
    4074:	9400      	str	r4, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_3_EIC_MUX;
    4076:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    4078:	466b      	mov	r3, sp
    407a:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    407c:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_3_EIC_LINE, &config_extint_chan);
    407e:	4669      	mov	r1, sp
    4080:	2003      	movs	r0, #3
    4082:	47b8      	blx	r7
		port_base->OUTCLR.reg = pin_mask;
    4084:	2280      	movs	r2, #128	; 0x80
    4086:	05d2      	lsls	r2, r2, #23
    4088:	4b06      	ldr	r3, [pc, #24]	; (40a4 <ui_lb_init+0x9c>)
    408a:	615a      	str	r2, [r3, #20]
}
    408c:	b004      	add	sp, #16
    408e:	bc04      	pop	{r2}
    4090:	4690      	mov	r8, r2
    4092:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4094:	00006699 	.word	0x00006699
    4098:	41004400 	.word	0x41004400
    409c:	000022a9 	.word	0x000022a9
    40a0:	000022bd 	.word	0x000022bd
    40a4:	41004480 	.word	0x41004480

000040a8 <ui_configure_callback>:
{
    40a8:	b510      	push	{r4, lr}
	extint_register_callback(ui_button1_callback, UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    40aa:	2200      	movs	r2, #0
    40ac:	2108      	movs	r1, #8
    40ae:	480b      	ldr	r0, [pc, #44]	; (40dc <ui_configure_callback+0x34>)
    40b0:	4c0b      	ldr	r4, [pc, #44]	; (40e0 <ui_configure_callback+0x38>)
    40b2:	47a0      	blx	r4
	extint_register_callback(ui_button2_callback, UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    40b4:	2200      	movs	r2, #0
    40b6:	2102      	movs	r1, #2
    40b8:	480a      	ldr	r0, [pc, #40]	; (40e4 <ui_configure_callback+0x3c>)
    40ba:	47a0      	blx	r4
	extint_register_callback(ui_button3_callback, UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    40bc:	2200      	movs	r2, #0
    40be:	2103      	movs	r1, #3
    40c0:	4809      	ldr	r0, [pc, #36]	; (40e8 <ui_configure_callback+0x40>)
    40c2:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    40c4:	2100      	movs	r1, #0
    40c6:	2008      	movs	r0, #8
    40c8:	4c08      	ldr	r4, [pc, #32]	; (40ec <ui_configure_callback+0x44>)
    40ca:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    40cc:	2100      	movs	r1, #0
    40ce:	2002      	movs	r0, #2
    40d0:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    40d2:	2100      	movs	r1, #0
    40d4:	2003      	movs	r0, #3
    40d6:	47a0      	blx	r4
}
    40d8:	bd10      	pop	{r4, pc}
    40da:	46c0      	nop			; (mov r8, r8)
    40dc:	00003e0d 	.word	0x00003e0d
    40e0:	00004fd9 	.word	0x00004fd9
    40e4:	00003dc5 	.word	0x00003dc5
    40e8:	00003e95 	.word	0x00003e95
    40ec:	00005005 	.word	0x00005005

000040f0 <ui_powerdown>:
		port_base->OUTSET.reg = pin_mask;
    40f0:	2280      	movs	r2, #128	; 0x80
    40f2:	05d2      	lsls	r2, r2, #23
    40f4:	4b01      	ldr	r3, [pc, #4]	; (40fc <ui_powerdown+0xc>)
    40f6:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    40f8:	4770      	bx	lr
    40fa:	46c0      	nop			; (mov r8, r8)
    40fc:	41004480 	.word	0x41004480

00004100 <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
    4100:	2280      	movs	r2, #128	; 0x80
    4102:	05d2      	lsls	r2, r2, #23
    4104:	4b01      	ldr	r3, [pc, #4]	; (410c <ui_wakeup+0xc>)
    4106:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    4108:	4770      	bx	lr
    410a:	46c0      	nop			; (mov r8, r8)
    410c:	41004480 	.word	0x41004480

00004110 <ui_start_read>:

void ui_start_read(void)
{
}
    4110:	4770      	bx	lr

00004112 <ui_stop_read>:

void ui_stop_read(void)
{
}
    4112:	4770      	bx	lr

00004114 <ui_start_write>:

void ui_start_write(void)
{
}
    4114:	4770      	bx	lr

00004116 <ui_stop_write>:

void ui_stop_write(void)
{
}
    4116:	4770      	bx	lr

00004118 <ui_process>:

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
    4118:	2800      	cmp	r0, #0
    411a:	d104      	bne.n	4126 <ui_process+0xe>
    411c:	2280      	movs	r2, #128	; 0x80
    411e:	05d2      	lsls	r2, r2, #23
    4120:	4b05      	ldr	r3, [pc, #20]	; (4138 <ui_process+0x20>)
    4122:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if (1000 == framenumber) {
		LED_Off(LED_0_PIN);
	}
}
    4124:	4770      	bx	lr
	if (1000 == framenumber) {
    4126:	23fa      	movs	r3, #250	; 0xfa
    4128:	009b      	lsls	r3, r3, #2
    412a:	4298      	cmp	r0, r3
    412c:	d1fa      	bne.n	4124 <ui_process+0xc>
		port_base->OUTSET.reg = pin_mask;
    412e:	2280      	movs	r2, #128	; 0x80
    4130:	05d2      	lsls	r2, r2, #23
    4132:	4b01      	ldr	r3, [pc, #4]	; (4138 <ui_process+0x20>)
    4134:	619a      	str	r2, [r3, #24]
}
    4136:	e7f5      	b.n	4124 <ui_process+0xc>
    4138:	41004480 	.word	0x41004480

0000413c <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    413c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    413e:	000b      	movs	r3, r1
    4140:	332e      	adds	r3, #46	; 0x2e
    4142:	009b      	lsls	r3, r3, #2
    4144:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    4146:	22aa      	movs	r2, #170	; 0xaa
    4148:	0052      	lsls	r2, r2, #1
    414a:	0049      	lsls	r1, r1, #1
    414c:	5a83      	ldrh	r3, [r0, r2]
    414e:	4c03      	ldr	r4, [pc, #12]	; (415c <usb_device_register_callback+0x20>)
    4150:	5b09      	ldrh	r1, [r1, r4]
    4152:	430b      	orrs	r3, r1
    4154:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    4156:	2000      	movs	r0, #0
    4158:	bd10      	pop	{r4, pc}
    415a:	46c0      	nop			; (mov r8, r8)
    415c:	00008460 	.word	0x00008460

00004160 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    4160:	0049      	lsls	r1, r1, #1
    4162:	4b06      	ldr	r3, [pc, #24]	; (417c <usb_device_enable_callback+0x1c>)
    4164:	5acb      	ldrh	r3, [r1, r3]
    4166:	6802      	ldr	r2, [r0, #0]
    4168:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    416a:	21ab      	movs	r1, #171	; 0xab
    416c:	0049      	lsls	r1, r1, #1
    416e:	5a42      	ldrh	r2, [r0, r1]
    4170:	431a      	orrs	r2, r3
    4172:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    4174:	6802      	ldr	r2, [r0, #0]
    4176:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    4178:	2000      	movs	r0, #0
    417a:	4770      	bx	lr
    417c:	00008460 	.word	0x00008460

00004180 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    4180:	0049      	lsls	r1, r1, #1
    4182:	4b05      	ldr	r3, [pc, #20]	; (4198 <usb_device_disable_callback+0x18>)
    4184:	5aca      	ldrh	r2, [r1, r3]
    4186:	21ab      	movs	r1, #171	; 0xab
    4188:	0049      	lsls	r1, r1, #1
    418a:	5a43      	ldrh	r3, [r0, r1]
    418c:	4393      	bics	r3, r2
    418e:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    4190:	6803      	ldr	r3, [r0, #0]
    4192:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    4194:	2000      	movs	r0, #0
    4196:	4770      	bx	lr
    4198:	00008460 	.word	0x00008460

0000419c <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    419c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    419e:	008c      	lsls	r4, r1, #2
    41a0:	18a4      	adds	r4, r4, r2
    41a2:	3434      	adds	r4, #52	; 0x34
    41a4:	00a4      	lsls	r4, r4, #2
    41a6:	1904      	adds	r4, r0, r4
    41a8:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    41aa:	1840      	adds	r0, r0, r1
    41ac:	3059      	adds	r0, #89	; 0x59
    41ae:	30ff      	adds	r0, #255	; 0xff
    41b0:	7803      	ldrb	r3, [r0, #0]
    41b2:	4903      	ldr	r1, [pc, #12]	; (41c0 <usb_device_endpoint_register_callback+0x24>)
    41b4:	5c8a      	ldrb	r2, [r1, r2]
    41b6:	4313      	orrs	r3, r2
    41b8:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    41ba:	2000      	movs	r0, #0
    41bc:	bd10      	pop	{r4, pc}
    41be:	46c0      	nop			; (mov r8, r8)
    41c0:	00008470 	.word	0x00008470

000041c4 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    41c4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    41c6:	008b      	lsls	r3, r1, #2
    41c8:	189b      	adds	r3, r3, r2
    41ca:	3334      	adds	r3, #52	; 0x34
    41cc:	009b      	lsls	r3, r3, #2
    41ce:	18c3      	adds	r3, r0, r3
    41d0:	2400      	movs	r4, #0
    41d2:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    41d4:	1840      	adds	r0, r0, r1
    41d6:	3059      	adds	r0, #89	; 0x59
    41d8:	30ff      	adds	r0, #255	; 0xff
    41da:	4b03      	ldr	r3, [pc, #12]	; (41e8 <usb_device_endpoint_unregister_callback+0x24>)
    41dc:	5c9a      	ldrb	r2, [r3, r2]
    41de:	7803      	ldrb	r3, [r0, #0]
    41e0:	4393      	bics	r3, r2
    41e2:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    41e4:	2000      	movs	r0, #0
    41e6:	bd10      	pop	{r4, pc}
    41e8:	00008470 	.word	0x00008470

000041ec <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    41ec:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    41ee:	230f      	movs	r3, #15
    41f0:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    41f2:	18c4      	adds	r4, r0, r3
    41f4:	3461      	adds	r4, #97	; 0x61
    41f6:	34ff      	adds	r4, #255	; 0xff
    41f8:	7825      	ldrb	r5, [r4, #0]
    41fa:	4e2f      	ldr	r6, [pc, #188]	; (42b8 <usb_device_endpoint_enable_callback+0xcc>)
    41fc:	5cb6      	ldrb	r6, [r6, r2]
    41fe:	4335      	orrs	r5, r6
    4200:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    4202:	2a00      	cmp	r2, #0
    4204:	d129      	bne.n	425a <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    4206:	2b00      	cmp	r3, #0
    4208:	d112      	bne.n	4230 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    420a:	2503      	movs	r5, #3
    420c:	240a      	movs	r4, #10
    420e:	34ff      	adds	r4, #255	; 0xff
    4210:	6806      	ldr	r6, [r0, #0]
    4212:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    4214:	2a03      	cmp	r2, #3
    4216:	d109      	bne.n	422c <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    4218:	b249      	sxtb	r1, r1
    421a:	2900      	cmp	r1, #0
    421c:	db44      	blt.n	42a8 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    421e:	6802      	ldr	r2, [r0, #0]
    4220:	015b      	lsls	r3, r3, #5
    4222:	18d3      	adds	r3, r2, r3
    4224:	330a      	adds	r3, #10
    4226:	33ff      	adds	r3, #255	; 0xff
    4228:	2220      	movs	r2, #32
    422a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    422c:	2000      	movs	r0, #0
    422e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    4230:	b24c      	sxtb	r4, r1
    4232:	2c00      	cmp	r4, #0
    4234:	db08      	blt.n	4248 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    4236:	015c      	lsls	r4, r3, #5
    4238:	6805      	ldr	r5, [r0, #0]
    423a:	46ac      	mov	ip, r5
    423c:	4464      	add	r4, ip
    423e:	340a      	adds	r4, #10
    4240:	34ff      	adds	r4, #255	; 0xff
    4242:	2501      	movs	r5, #1
    4244:	7025      	strb	r5, [r4, #0]
    4246:	e7e5      	b.n	4214 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    4248:	015c      	lsls	r4, r3, #5
    424a:	6805      	ldr	r5, [r0, #0]
    424c:	46ac      	mov	ip, r5
    424e:	4464      	add	r4, ip
    4250:	340a      	adds	r4, #10
    4252:	34ff      	adds	r4, #255	; 0xff
    4254:	2502      	movs	r5, #2
    4256:	7025      	strb	r5, [r4, #0]
    4258:	e7dc      	b.n	4214 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    425a:	2a01      	cmp	r2, #1
    425c:	d11a      	bne.n	4294 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    425e:	2b00      	cmp	r3, #0
    4260:	d105      	bne.n	426e <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    4262:	6802      	ldr	r2, [r0, #0]
    4264:	210c      	movs	r1, #12
    4266:	230a      	movs	r3, #10
    4268:	33ff      	adds	r3, #255	; 0xff
    426a:	54d1      	strb	r1, [r2, r3]
    426c:	e7de      	b.n	422c <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    426e:	b249      	sxtb	r1, r1
    4270:	2900      	cmp	r1, #0
    4272:	db07      	blt.n	4284 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    4274:	6802      	ldr	r2, [r0, #0]
    4276:	015b      	lsls	r3, r3, #5
    4278:	18d3      	adds	r3, r2, r3
    427a:	330a      	adds	r3, #10
    427c:	33ff      	adds	r3, #255	; 0xff
    427e:	2204      	movs	r2, #4
    4280:	701a      	strb	r2, [r3, #0]
    4282:	e7d3      	b.n	422c <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    4284:	6802      	ldr	r2, [r0, #0]
    4286:	015b      	lsls	r3, r3, #5
    4288:	18d3      	adds	r3, r2, r3
    428a:	330a      	adds	r3, #10
    428c:	33ff      	adds	r3, #255	; 0xff
    428e:	2208      	movs	r2, #8
    4290:	701a      	strb	r2, [r3, #0]
    4292:	e7cb      	b.n	422c <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    4294:	2a02      	cmp	r2, #2
    4296:	d1bd      	bne.n	4214 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    4298:	6802      	ldr	r2, [r0, #0]
    429a:	015b      	lsls	r3, r3, #5
    429c:	18d3      	adds	r3, r2, r3
    429e:	330a      	adds	r3, #10
    42a0:	33ff      	adds	r3, #255	; 0xff
    42a2:	2210      	movs	r2, #16
    42a4:	701a      	strb	r2, [r3, #0]
    42a6:	e7c1      	b.n	422c <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    42a8:	6802      	ldr	r2, [r0, #0]
    42aa:	015b      	lsls	r3, r3, #5
    42ac:	18d3      	adds	r3, r2, r3
    42ae:	330a      	adds	r3, #10
    42b0:	33ff      	adds	r3, #255	; 0xff
    42b2:	2240      	movs	r2, #64	; 0x40
    42b4:	701a      	strb	r2, [r3, #0]
    42b6:	e7b9      	b.n	422c <usb_device_endpoint_enable_callback+0x40>
    42b8:	00008470 	.word	0x00008470

000042bc <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    42bc:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    42be:	230f      	movs	r3, #15
    42c0:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    42c2:	18c4      	adds	r4, r0, r3
    42c4:	3461      	adds	r4, #97	; 0x61
    42c6:	34ff      	adds	r4, #255	; 0xff
    42c8:	4d2f      	ldr	r5, [pc, #188]	; (4388 <usb_device_endpoint_disable_callback+0xcc>)
    42ca:	5cae      	ldrb	r6, [r5, r2]
    42cc:	7825      	ldrb	r5, [r4, #0]
    42ce:	43b5      	bics	r5, r6
    42d0:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    42d2:	2a00      	cmp	r2, #0
    42d4:	d129      	bne.n	432a <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    42d6:	2b00      	cmp	r3, #0
    42d8:	d112      	bne.n	4300 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    42da:	2503      	movs	r5, #3
    42dc:	2484      	movs	r4, #132	; 0x84
    42de:	0064      	lsls	r4, r4, #1
    42e0:	6806      	ldr	r6, [r0, #0]
    42e2:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    42e4:	2a03      	cmp	r2, #3
    42e6:	d109      	bne.n	42fc <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    42e8:	b249      	sxtb	r1, r1
    42ea:	2900      	cmp	r1, #0
    42ec:	db44      	blt.n	4378 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    42ee:	6802      	ldr	r2, [r0, #0]
    42f0:	015b      	lsls	r3, r3, #5
    42f2:	18d3      	adds	r3, r2, r3
    42f4:	3309      	adds	r3, #9
    42f6:	33ff      	adds	r3, #255	; 0xff
    42f8:	2220      	movs	r2, #32
    42fa:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    42fc:	2000      	movs	r0, #0
    42fe:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    4300:	b24c      	sxtb	r4, r1
    4302:	2c00      	cmp	r4, #0
    4304:	db08      	blt.n	4318 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    4306:	015c      	lsls	r4, r3, #5
    4308:	6805      	ldr	r5, [r0, #0]
    430a:	46ac      	mov	ip, r5
    430c:	4464      	add	r4, ip
    430e:	3409      	adds	r4, #9
    4310:	34ff      	adds	r4, #255	; 0xff
    4312:	2501      	movs	r5, #1
    4314:	7025      	strb	r5, [r4, #0]
    4316:	e7e5      	b.n	42e4 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    4318:	015c      	lsls	r4, r3, #5
    431a:	6805      	ldr	r5, [r0, #0]
    431c:	46ac      	mov	ip, r5
    431e:	4464      	add	r4, ip
    4320:	3409      	adds	r4, #9
    4322:	34ff      	adds	r4, #255	; 0xff
    4324:	2502      	movs	r5, #2
    4326:	7025      	strb	r5, [r4, #0]
    4328:	e7dc      	b.n	42e4 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    432a:	2a01      	cmp	r2, #1
    432c:	d11a      	bne.n	4364 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    432e:	2b00      	cmp	r3, #0
    4330:	d105      	bne.n	433e <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    4332:	6802      	ldr	r2, [r0, #0]
    4334:	210c      	movs	r1, #12
    4336:	3309      	adds	r3, #9
    4338:	33ff      	adds	r3, #255	; 0xff
    433a:	54d1      	strb	r1, [r2, r3]
    433c:	e7de      	b.n	42fc <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    433e:	b249      	sxtb	r1, r1
    4340:	2900      	cmp	r1, #0
    4342:	db07      	blt.n	4354 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    4344:	6802      	ldr	r2, [r0, #0]
    4346:	015b      	lsls	r3, r3, #5
    4348:	18d3      	adds	r3, r2, r3
    434a:	3309      	adds	r3, #9
    434c:	33ff      	adds	r3, #255	; 0xff
    434e:	2204      	movs	r2, #4
    4350:	701a      	strb	r2, [r3, #0]
    4352:	e7d3      	b.n	42fc <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    4354:	6802      	ldr	r2, [r0, #0]
    4356:	015b      	lsls	r3, r3, #5
    4358:	18d3      	adds	r3, r2, r3
    435a:	3309      	adds	r3, #9
    435c:	33ff      	adds	r3, #255	; 0xff
    435e:	2208      	movs	r2, #8
    4360:	701a      	strb	r2, [r3, #0]
    4362:	e7cb      	b.n	42fc <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    4364:	2a02      	cmp	r2, #2
    4366:	d1bd      	bne.n	42e4 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    4368:	6802      	ldr	r2, [r0, #0]
    436a:	015b      	lsls	r3, r3, #5
    436c:	18d3      	adds	r3, r2, r3
    436e:	3309      	adds	r3, #9
    4370:	33ff      	adds	r3, #255	; 0xff
    4372:	2210      	movs	r2, #16
    4374:	701a      	strb	r2, [r3, #0]
    4376:	e7c1      	b.n	42fc <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    4378:	6802      	ldr	r2, [r0, #0]
    437a:	015b      	lsls	r3, r3, #5
    437c:	18d3      	adds	r3, r2, r3
    437e:	3309      	adds	r3, #9
    4380:	33ff      	adds	r3, #255	; 0xff
    4382:	2240      	movs	r2, #64	; 0x40
    4384:	701a      	strb	r2, [r3, #0]
    4386:	e7b9      	b.n	42fc <usb_device_endpoint_disable_callback+0x40>
    4388:	00008470 	.word	0x00008470

0000438c <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    438c:	2300      	movs	r3, #0
    438e:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    4390:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    4392:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    4394:	3301      	adds	r3, #1
    4396:	70c3      	strb	r3, [r0, #3]
}
    4398:	4770      	bx	lr
	...

0000439c <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    439c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    439e:	780c      	ldrb	r4, [r1, #0]
    43a0:	230f      	movs	r3, #15
    43a2:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    43a4:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    43a6:	78ca      	ldrb	r2, [r1, #3]
    43a8:	2a04      	cmp	r2, #4
    43aa:	d870      	bhi.n	448e <usb_device_endpoint_set_config+0xf2>
    43ac:	0092      	lsls	r2, r2, #2
    43ae:	4d89      	ldr	r5, [pc, #548]	; (45d4 <usb_device_endpoint_set_config+0x238>)
    43b0:	58aa      	ldr	r2, [r5, r2]
    43b2:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    43b4:	6802      	ldr	r2, [r0, #0]
    43b6:	3308      	adds	r3, #8
    43b8:	015b      	lsls	r3, r3, #5
    43ba:	2100      	movs	r1, #0
    43bc:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    43be:	2200      	movs	r2, #0
    43c0:	e082      	b.n	44c8 <usb_device_endpoint_set_config+0x12c>
    43c2:	015c      	lsls	r4, r3, #5
    43c4:	6802      	ldr	r2, [r0, #0]
    43c6:	4694      	mov	ip, r2
    43c8:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    43ca:	2280      	movs	r2, #128	; 0x80
    43cc:	0052      	lsls	r2, r2, #1
    43ce:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    43d0:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    43d2:	076d      	lsls	r5, r5, #29
    43d4:	d178      	bne.n	44c8 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    43d6:	32e4      	adds	r2, #228	; 0xe4
    43d8:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    43da:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    43dc:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    43de:	422e      	tst	r6, r5
    43e0:	d172      	bne.n	44c8 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    43e2:	3d5f      	subs	r5, #95	; 0x5f
    43e4:	32e4      	adds	r2, #228	; 0xe4
    43e6:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    43e8:	001a      	movs	r2, r3
    43ea:	3208      	adds	r2, #8
    43ec:	0152      	lsls	r2, r2, #5
    43ee:	6804      	ldr	r4, [r0, #0]
    43f0:	18a4      	adds	r4, r4, r2
    43f2:	352f      	adds	r5, #47	; 0x2f
    43f4:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    43f6:	6800      	ldr	r0, [r0, #0]
    43f8:	1882      	adds	r2, r0, r2
    43fa:	2080      	movs	r0, #128	; 0x80
    43fc:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    43fe:	788a      	ldrb	r2, [r1, #2]
    4400:	2a00      	cmp	r2, #0
    4402:	d01f      	beq.n	4444 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4404:	0158      	lsls	r0, r3, #5
    4406:	4a74      	ldr	r2, [pc, #464]	; (45d8 <usb_device_endpoint_set_config+0x23c>)
    4408:	1812      	adds	r2, r2, r0
    440a:	6854      	ldr	r4, [r2, #4]
    440c:	2080      	movs	r0, #128	; 0x80
    440e:	0600      	lsls	r0, r0, #24
    4410:	4304      	orrs	r4, r0
    4412:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4414:	6954      	ldr	r4, [r2, #20]
    4416:	4320      	orrs	r0, r4
    4418:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    441a:	2507      	movs	r5, #7
    441c:	784c      	ldrb	r4, [r1, #1]
    441e:	015a      	lsls	r2, r3, #5
    4420:	4b6d      	ldr	r3, [pc, #436]	; (45d8 <usb_device_endpoint_set_config+0x23c>)
    4422:	189b      	adds	r3, r3, r2
    4424:	6858      	ldr	r0, [r3, #4]
    4426:	402c      	ands	r4, r5
    4428:	0724      	lsls	r4, r4, #28
    442a:	4e6c      	ldr	r6, [pc, #432]	; (45dc <usb_device_endpoint_set_config+0x240>)
    442c:	4030      	ands	r0, r6
    442e:	4320      	orrs	r0, r4
    4430:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4432:	7849      	ldrb	r1, [r1, #1]
    4434:	695a      	ldr	r2, [r3, #20]
    4436:	4029      	ands	r1, r5
    4438:	0709      	lsls	r1, r1, #28
    443a:	4032      	ands	r2, r6
    443c:	430a      	orrs	r2, r1
    443e:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    4440:	2200      	movs	r2, #0
    4442:	e041      	b.n	44c8 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4444:	0158      	lsls	r0, r3, #5
    4446:	4a64      	ldr	r2, [pc, #400]	; (45d8 <usb_device_endpoint_set_config+0x23c>)
    4448:	1812      	adds	r2, r2, r0
    444a:	6850      	ldr	r0, [r2, #4]
    444c:	0040      	lsls	r0, r0, #1
    444e:	0840      	lsrs	r0, r0, #1
    4450:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4452:	6950      	ldr	r0, [r2, #20]
    4454:	0040      	lsls	r0, r0, #1
    4456:	0840      	lsrs	r0, r0, #1
    4458:	6150      	str	r0, [r2, #20]
    445a:	e7de      	b.n	441a <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    445c:	2c00      	cmp	r4, #0
    445e:	db35      	blt.n	44cc <usb_device_endpoint_set_config+0x130>
    4460:	015d      	lsls	r5, r3, #5
    4462:	6802      	ldr	r2, [r0, #0]
    4464:	4694      	mov	ip, r2
    4466:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4468:	2280      	movs	r2, #128	; 0x80
    446a:	0052      	lsls	r2, r2, #1
    446c:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    446e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4470:	0776      	lsls	r6, r6, #29
    4472:	d129      	bne.n	44c8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    4474:	2680      	movs	r6, #128	; 0x80
    4476:	0076      	lsls	r6, r6, #1
    4478:	5daa      	ldrb	r2, [r5, r6]
    447a:	2702      	movs	r7, #2
    447c:	433a      	orrs	r2, r7
    447e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4480:	6802      	ldr	r2, [r0, #0]
    4482:	0018      	movs	r0, r3
    4484:	3008      	adds	r0, #8
    4486:	0140      	lsls	r0, r0, #5
    4488:	1812      	adds	r2, r2, r0
    448a:	2040      	movs	r0, #64	; 0x40
    448c:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    448e:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4490:	784f      	ldrb	r7, [r1, #1]
    4492:	005d      	lsls	r5, r3, #1
    4494:	18ad      	adds	r5, r5, r2
    4496:	012d      	lsls	r5, r5, #4
    4498:	4e4f      	ldr	r6, [pc, #316]	; (45d8 <usb_device_endpoint_set_config+0x23c>)
    449a:	1975      	adds	r5, r6, r5
    449c:	6868      	ldr	r0, [r5, #4]
    449e:	2407      	movs	r4, #7
    44a0:	403c      	ands	r4, r7
    44a2:	0724      	lsls	r4, r4, #28
    44a4:	4e4d      	ldr	r6, [pc, #308]	; (45dc <usb_device_endpoint_set_config+0x240>)
    44a6:	4030      	ands	r0, r6
    44a8:	4320      	orrs	r0, r4
    44aa:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    44ac:	7889      	ldrb	r1, [r1, #2]
    44ae:	2900      	cmp	r1, #0
    44b0:	d000      	beq.n	44b4 <usb_device_endpoint_set_config+0x118>
    44b2:	e088      	b.n	45c6 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    44b4:	005b      	lsls	r3, r3, #1
    44b6:	189b      	adds	r3, r3, r2
    44b8:	011b      	lsls	r3, r3, #4
    44ba:	4a47      	ldr	r2, [pc, #284]	; (45d8 <usb_device_endpoint_set_config+0x23c>)
    44bc:	18d3      	adds	r3, r2, r3
    44be:	685a      	ldr	r2, [r3, #4]
    44c0:	0052      	lsls	r2, r2, #1
    44c2:	0852      	lsrs	r2, r2, #1
    44c4:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    44c6:	2200      	movs	r2, #0
}
    44c8:	0010      	movs	r0, r2
    44ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44cc:	015d      	lsls	r5, r3, #5
    44ce:	6802      	ldr	r2, [r0, #0]
    44d0:	4694      	mov	ip, r2
    44d2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    44d4:	2280      	movs	r2, #128	; 0x80
    44d6:	0052      	lsls	r2, r2, #1
    44d8:	5caf      	ldrb	r7, [r5, r2]
    44da:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    44dc:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    44de:	4237      	tst	r7, r6
    44e0:	d1f2      	bne.n	44c8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    44e2:	3690      	adds	r6, #144	; 0x90
    44e4:	5daa      	ldrb	r2, [r5, r6]
    44e6:	2720      	movs	r7, #32
    44e8:	433a      	orrs	r2, r7
    44ea:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    44ec:	6802      	ldr	r2, [r0, #0]
    44ee:	0018      	movs	r0, r3
    44f0:	3008      	adds	r0, #8
    44f2:	0140      	lsls	r0, r0, #5
    44f4:	1812      	adds	r2, r2, r0
    44f6:	2080      	movs	r0, #128	; 0x80
    44f8:	7110      	strb	r0, [r2, #4]
    44fa:	e7c8      	b.n	448e <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    44fc:	2c00      	cmp	r4, #0
    44fe:	db17      	blt.n	4530 <usb_device_endpoint_set_config+0x194>
    4500:	015d      	lsls	r5, r3, #5
    4502:	6802      	ldr	r2, [r0, #0]
    4504:	4694      	mov	ip, r2
    4506:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4508:	2280      	movs	r2, #128	; 0x80
    450a:	0052      	lsls	r2, r2, #1
    450c:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    450e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4510:	0776      	lsls	r6, r6, #29
    4512:	d1d9      	bne.n	44c8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    4514:	2680      	movs	r6, #128	; 0x80
    4516:	0076      	lsls	r6, r6, #1
    4518:	5daa      	ldrb	r2, [r5, r6]
    451a:	2703      	movs	r7, #3
    451c:	433a      	orrs	r2, r7
    451e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4520:	6802      	ldr	r2, [r0, #0]
    4522:	0018      	movs	r0, r3
    4524:	3008      	adds	r0, #8
    4526:	0140      	lsls	r0, r0, #5
    4528:	1812      	adds	r2, r2, r0
    452a:	2040      	movs	r0, #64	; 0x40
    452c:	7150      	strb	r0, [r2, #5]
    452e:	e7ae      	b.n	448e <usb_device_endpoint_set_config+0xf2>
    4530:	015d      	lsls	r5, r3, #5
    4532:	6802      	ldr	r2, [r0, #0]
    4534:	4694      	mov	ip, r2
    4536:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4538:	2280      	movs	r2, #128	; 0x80
    453a:	0052      	lsls	r2, r2, #1
    453c:	5caf      	ldrb	r7, [r5, r2]
    453e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    4540:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4542:	4237      	tst	r7, r6
    4544:	d1c0      	bne.n	44c8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    4546:	3690      	adds	r6, #144	; 0x90
    4548:	5daa      	ldrb	r2, [r5, r6]
    454a:	2730      	movs	r7, #48	; 0x30
    454c:	433a      	orrs	r2, r7
    454e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4550:	6802      	ldr	r2, [r0, #0]
    4552:	0018      	movs	r0, r3
    4554:	3008      	adds	r0, #8
    4556:	0140      	lsls	r0, r0, #5
    4558:	1812      	adds	r2, r2, r0
    455a:	2080      	movs	r0, #128	; 0x80
    455c:	7110      	strb	r0, [r2, #4]
    455e:	e796      	b.n	448e <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    4560:	2c00      	cmp	r4, #0
    4562:	db17      	blt.n	4594 <usb_device_endpoint_set_config+0x1f8>
    4564:	015d      	lsls	r5, r3, #5
    4566:	6802      	ldr	r2, [r0, #0]
    4568:	4694      	mov	ip, r2
    456a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    456c:	2280      	movs	r2, #128	; 0x80
    456e:	0052      	lsls	r2, r2, #1
    4570:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    4572:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4574:	0776      	lsls	r6, r6, #29
    4576:	d1a7      	bne.n	44c8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    4578:	2680      	movs	r6, #128	; 0x80
    457a:	0076      	lsls	r6, r6, #1
    457c:	5daa      	ldrb	r2, [r5, r6]
    457e:	2704      	movs	r7, #4
    4580:	433a      	orrs	r2, r7
    4582:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4584:	6802      	ldr	r2, [r0, #0]
    4586:	0018      	movs	r0, r3
    4588:	3008      	adds	r0, #8
    458a:	0140      	lsls	r0, r0, #5
    458c:	1812      	adds	r2, r2, r0
    458e:	2040      	movs	r0, #64	; 0x40
    4590:	7150      	strb	r0, [r2, #5]
    4592:	e77c      	b.n	448e <usb_device_endpoint_set_config+0xf2>
    4594:	015d      	lsls	r5, r3, #5
    4596:	6802      	ldr	r2, [r0, #0]
    4598:	4694      	mov	ip, r2
    459a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    459c:	2280      	movs	r2, #128	; 0x80
    459e:	0052      	lsls	r2, r2, #1
    45a0:	5caf      	ldrb	r7, [r5, r2]
    45a2:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    45a4:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    45a6:	4237      	tst	r7, r6
    45a8:	d000      	beq.n	45ac <usb_device_endpoint_set_config+0x210>
    45aa:	e78d      	b.n	44c8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    45ac:	3690      	adds	r6, #144	; 0x90
    45ae:	5daa      	ldrb	r2, [r5, r6]
    45b0:	2740      	movs	r7, #64	; 0x40
    45b2:	433a      	orrs	r2, r7
    45b4:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    45b6:	6802      	ldr	r2, [r0, #0]
    45b8:	0018      	movs	r0, r3
    45ba:	3008      	adds	r0, #8
    45bc:	0140      	lsls	r0, r0, #5
    45be:	1812      	adds	r2, r2, r0
    45c0:	2080      	movs	r0, #128	; 0x80
    45c2:	7110      	strb	r0, [r2, #4]
    45c4:	e763      	b.n	448e <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    45c6:	6869      	ldr	r1, [r5, #4]
    45c8:	2380      	movs	r3, #128	; 0x80
    45ca:	061b      	lsls	r3, r3, #24
    45cc:	430b      	orrs	r3, r1
    45ce:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    45d0:	2200      	movs	r2, #0
    45d2:	e779      	b.n	44c8 <usb_device_endpoint_set_config+0x12c>
    45d4:	0000844c 	.word	0x0000844c
    45d8:	200006f0 	.word	0x200006f0
    45dc:	8fffffff 	.word	0x8fffffff

000045e0 <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    45e0:	230f      	movs	r3, #15
    45e2:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    45e4:	b249      	sxtb	r1, r1
    45e6:	2900      	cmp	r1, #0
    45e8:	db09      	blt.n	45fe <usb_device_endpoint_is_configured+0x1e>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    45ea:	6802      	ldr	r2, [r0, #0]
    45ec:	3308      	adds	r3, #8
    45ee:	015b      	lsls	r3, r3, #5
    45f0:	5c98      	ldrb	r0, [r3, r2]
    45f2:	0740      	lsls	r0, r0, #29
    45f4:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    45f6:	1e43      	subs	r3, r0, #1
    45f8:	4198      	sbcs	r0, r3
    45fa:	b2c0      	uxtb	r0, r0
}
    45fc:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    45fe:	6802      	ldr	r2, [r0, #0]
    4600:	3308      	adds	r3, #8
    4602:	015b      	lsls	r3, r3, #5
    4604:	5c98      	ldrb	r0, [r3, r2]
    4606:	0640      	lsls	r0, r0, #25
    4608:	0f40      	lsrs	r0, r0, #29
    460a:	e7f4      	b.n	45f6 <usb_device_endpoint_is_configured+0x16>

0000460c <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    460c:	230f      	movs	r3, #15
    460e:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    4610:	b249      	sxtb	r1, r1
    4612:	2900      	cmp	r1, #0
    4614:	db0a      	blt.n	462c <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4616:	3308      	adds	r3, #8
    4618:	015b      	lsls	r3, r3, #5
    461a:	6802      	ldr	r2, [r0, #0]
    461c:	18d2      	adds	r2, r2, r3
    461e:	2140      	movs	r1, #64	; 0x40
    4620:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4622:	6802      	ldr	r2, [r0, #0]
    4624:	18d3      	adds	r3, r2, r3
    4626:	2201      	movs	r2, #1
    4628:	71da      	strb	r2, [r3, #7]
	}
}
    462a:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    462c:	3308      	adds	r3, #8
    462e:	015b      	lsls	r3, r3, #5
    4630:	6802      	ldr	r2, [r0, #0]
    4632:	18d2      	adds	r2, r2, r3
    4634:	2180      	movs	r1, #128	; 0x80
    4636:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4638:	6802      	ldr	r2, [r0, #0]
    463a:	18d3      	adds	r3, r2, r3
    463c:	2202      	movs	r2, #2
    463e:	71da      	strb	r2, [r3, #7]
    4640:	e7f3      	b.n	462a <usb_device_endpoint_abort_job+0x1e>

00004642 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4642:	230f      	movs	r3, #15
    4644:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    4646:	b249      	sxtb	r1, r1
    4648:	2900      	cmp	r1, #0
    464a:	db07      	blt.n	465c <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    464c:	6802      	ldr	r2, [r0, #0]
    464e:	3308      	adds	r3, #8
    4650:	015b      	lsls	r3, r3, #5
    4652:	18d3      	adds	r3, r2, r3
    4654:	7998      	ldrb	r0, [r3, #6]
    4656:	06c0      	lsls	r0, r0, #27
    4658:	0fc0      	lsrs	r0, r0, #31
	}
}
    465a:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    465c:	6802      	ldr	r2, [r0, #0]
    465e:	3308      	adds	r3, #8
    4660:	015b      	lsls	r3, r3, #5
    4662:	18d3      	adds	r3, r2, r3
    4664:	7998      	ldrb	r0, [r3, #6]
    4666:	0680      	lsls	r0, r0, #26
    4668:	0fc0      	lsrs	r0, r0, #31
    466a:	e7f6      	b.n	465a <usb_device_endpoint_is_halted+0x18>

0000466c <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    466c:	230f      	movs	r3, #15
    466e:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    4670:	b249      	sxtb	r1, r1
    4672:	2900      	cmp	r1, #0
    4674:	db06      	blt.n	4684 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    4676:	6802      	ldr	r2, [r0, #0]
    4678:	3308      	adds	r3, #8
    467a:	015b      	lsls	r3, r3, #5
    467c:	18d3      	adds	r3, r2, r3
    467e:	2210      	movs	r2, #16
    4680:	715a      	strb	r2, [r3, #5]
	}
}
    4682:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    4684:	6802      	ldr	r2, [r0, #0]
    4686:	3308      	adds	r3, #8
    4688:	015b      	lsls	r3, r3, #5
    468a:	18d3      	adds	r3, r2, r3
    468c:	2220      	movs	r2, #32
    468e:	715a      	strb	r2, [r3, #5]
    4690:	e7f7      	b.n	4682 <usb_device_endpoint_set_halt+0x16>

00004692 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    4692:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4694:	230f      	movs	r3, #15
    4696:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    4698:	b249      	sxtb	r1, r1
    469a:	2900      	cmp	r1, #0
    469c:	db1d      	blt.n	46da <usb_device_endpoint_clear_halt+0x48>
    469e:	0159      	lsls	r1, r3, #5
    46a0:	6802      	ldr	r2, [r0, #0]
    46a2:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    46a4:	2483      	movs	r4, #131	; 0x83
    46a6:	0064      	lsls	r4, r4, #1
    46a8:	5d14      	ldrb	r4, [r2, r4]
    46aa:	06e4      	lsls	r4, r4, #27
    46ac:	d514      	bpl.n	46d8 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    46ae:	2510      	movs	r5, #16
    46b0:	2482      	movs	r4, #130	; 0x82
    46b2:	0064      	lsls	r4, r4, #1
    46b4:	5515      	strb	r5, [r2, r4]
    46b6:	6802      	ldr	r2, [r0, #0]
    46b8:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    46ba:	2108      	movs	r1, #8
    46bc:	31ff      	adds	r1, #255	; 0xff
    46be:	5c51      	ldrb	r1, [r2, r1]
    46c0:	0689      	lsls	r1, r1, #26
    46c2:	d509      	bpl.n	46d8 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    46c4:	3ce4      	subs	r4, #228	; 0xe4
    46c6:	2108      	movs	r1, #8
    46c8:	31ff      	adds	r1, #255	; 0xff
    46ca:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    46cc:	6802      	ldr	r2, [r0, #0]
    46ce:	3308      	adds	r3, #8
    46d0:	015b      	lsls	r3, r3, #5
    46d2:	18d3      	adds	r3, r2, r3
    46d4:	2201      	movs	r2, #1
    46d6:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    46d8:	bd30      	pop	{r4, r5, pc}
    46da:	0159      	lsls	r1, r3, #5
    46dc:	6802      	ldr	r2, [r0, #0]
    46de:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    46e0:	2483      	movs	r4, #131	; 0x83
    46e2:	0064      	lsls	r4, r4, #1
    46e4:	5d14      	ldrb	r4, [r2, r4]
    46e6:	06a4      	lsls	r4, r4, #26
    46e8:	d5f6      	bpl.n	46d8 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    46ea:	2520      	movs	r5, #32
    46ec:	2482      	movs	r4, #130	; 0x82
    46ee:	0064      	lsls	r4, r4, #1
    46f0:	5515      	strb	r5, [r2, r4]
    46f2:	6802      	ldr	r2, [r0, #0]
    46f4:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    46f6:	2108      	movs	r1, #8
    46f8:	31ff      	adds	r1, #255	; 0xff
    46fa:	5c51      	ldrb	r1, [r2, r1]
    46fc:	0649      	lsls	r1, r1, #25
    46fe:	d5eb      	bpl.n	46d8 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4700:	3cc4      	subs	r4, #196	; 0xc4
    4702:	2108      	movs	r1, #8
    4704:	31ff      	adds	r1, #255	; 0xff
    4706:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    4708:	6802      	ldr	r2, [r0, #0]
    470a:	3308      	adds	r3, #8
    470c:	015b      	lsls	r3, r3, #5
    470e:	18d3      	adds	r3, r2, r3
    4710:	2202      	movs	r2, #2
    4712:	711a      	strb	r2, [r3, #4]
    4714:	e7e0      	b.n	46d8 <usb_device_endpoint_clear_halt+0x46>
	...

00004718 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4718:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    471a:	000c      	movs	r4, r1
    471c:	3408      	adds	r4, #8
    471e:	0164      	lsls	r4, r4, #5
    4720:	6805      	ldr	r5, [r0, #0]
    4722:	5d64      	ldrb	r4, [r4, r5]
    4724:	0664      	lsls	r4, r4, #25
    4726:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    4728:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    472a:	2c00      	cmp	r4, #0
    472c:	d101      	bne.n	4732 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    472e:	0028      	movs	r0, r5
    4730:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    4732:	014c      	lsls	r4, r1, #5
    4734:	4d0b      	ldr	r5, [pc, #44]	; (4764 <usb_device_endpoint_write_buffer_job+0x4c>)
    4736:	192d      	adds	r5, r5, r4
    4738:	002c      	movs	r4, r5
    473a:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    473c:	696a      	ldr	r2, [r5, #20]
    473e:	4d0a      	ldr	r5, [pc, #40]	; (4768 <usb_device_endpoint_write_buffer_job+0x50>)
    4740:	402a      	ands	r2, r5
    4742:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    4744:	6962      	ldr	r2, [r4, #20]
    4746:	049b      	lsls	r3, r3, #18
    4748:	0c9b      	lsrs	r3, r3, #18
    474a:	0b92      	lsrs	r2, r2, #14
    474c:	0392      	lsls	r2, r2, #14
    474e:	4313      	orrs	r3, r2
    4750:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    4752:	6803      	ldr	r3, [r0, #0]
    4754:	3108      	adds	r1, #8
    4756:	0149      	lsls	r1, r1, #5
    4758:	1859      	adds	r1, r3, r1
    475a:	2380      	movs	r3, #128	; 0x80
    475c:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    475e:	2500      	movs	r5, #0
    4760:	e7e5      	b.n	472e <usb_device_endpoint_write_buffer_job+0x16>
    4762:	46c0      	nop			; (mov r8, r8)
    4764:	200006f0 	.word	0x200006f0
    4768:	f0003fff 	.word	0xf0003fff

0000476c <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    476c:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    476e:	000c      	movs	r4, r1
    4770:	3408      	adds	r4, #8
    4772:	0164      	lsls	r4, r4, #5
    4774:	6805      	ldr	r5, [r0, #0]
    4776:	5d64      	ldrb	r4, [r4, r5]
    4778:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    477a:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    477c:	2c00      	cmp	r4, #0
    477e:	d101      	bne.n	4784 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    4780:	0028      	movs	r0, r5
    4782:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    4784:	4c0b      	ldr	r4, [pc, #44]	; (47b4 <usb_device_endpoint_read_buffer_job+0x48>)
    4786:	014d      	lsls	r5, r1, #5
    4788:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    478a:	1962      	adds	r2, r4, r5
    478c:	6854      	ldr	r4, [r2, #4]
    478e:	049b      	lsls	r3, r3, #18
    4790:	091b      	lsrs	r3, r3, #4
    4792:	4d09      	ldr	r5, [pc, #36]	; (47b8 <usb_device_endpoint_read_buffer_job+0x4c>)
    4794:	402c      	ands	r4, r5
    4796:	4323      	orrs	r3, r4
    4798:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    479a:	6853      	ldr	r3, [r2, #4]
    479c:	0b9b      	lsrs	r3, r3, #14
    479e:	039b      	lsls	r3, r3, #14
    47a0:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    47a2:	6803      	ldr	r3, [r0, #0]
    47a4:	3108      	adds	r1, #8
    47a6:	0149      	lsls	r1, r1, #5
    47a8:	1859      	adds	r1, r3, r1
    47aa:	2340      	movs	r3, #64	; 0x40
    47ac:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    47ae:	2500      	movs	r5, #0
    47b0:	e7e6      	b.n	4780 <usb_device_endpoint_read_buffer_job+0x14>
    47b2:	46c0      	nop			; (mov r8, r8)
    47b4:	200006f0 	.word	0x200006f0
    47b8:	f0003fff 	.word	0xf0003fff

000047bc <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    47bc:	4b09      	ldr	r3, [pc, #36]	; (47e4 <usb_device_endpoint_setup_buffer_job+0x28>)
    47be:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    47c0:	685a      	ldr	r2, [r3, #4]
    47c2:	4909      	ldr	r1, [pc, #36]	; (47e8 <usb_device_endpoint_setup_buffer_job+0x2c>)
    47c4:	4011      	ands	r1, r2
    47c6:	2280      	movs	r2, #128	; 0x80
    47c8:	0292      	lsls	r2, r2, #10
    47ca:	430a      	orrs	r2, r1
    47cc:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    47ce:	685a      	ldr	r2, [r3, #4]
    47d0:	0b92      	lsrs	r2, r2, #14
    47d2:	0392      	lsls	r2, r2, #14
    47d4:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    47d6:	6802      	ldr	r2, [r0, #0]
    47d8:	2140      	movs	r1, #64	; 0x40
    47da:	2382      	movs	r3, #130	; 0x82
    47dc:	005b      	lsls	r3, r3, #1
    47de:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    47e0:	2000      	movs	r0, #0
    47e2:	4770      	bx	lr
    47e4:	200006f0 	.word	0x200006f0
    47e8:	f0003fff 	.word	0xf0003fff

000047ec <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    47ec:	6802      	ldr	r2, [r0, #0]
    47ee:	7813      	ldrb	r3, [r2, #0]
    47f0:	2102      	movs	r1, #2
    47f2:	430b      	orrs	r3, r1
    47f4:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    47f6:	6802      	ldr	r2, [r0, #0]
    47f8:	7893      	ldrb	r3, [r2, #2]
    47fa:	2b02      	cmp	r3, #2
    47fc:	d0fc      	beq.n	47f8 <usb_enable+0xc>
}
    47fe:	4770      	bx	lr

00004800 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    4800:	b5f0      	push	{r4, r5, r6, r7, lr}
    4802:	46de      	mov	lr, fp
    4804:	4657      	mov	r7, sl
    4806:	464e      	mov	r6, r9
    4808:	4645      	mov	r5, r8
    480a:	b5e0      	push	{r5, r6, r7, lr}
    480c:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    480e:	4bc2      	ldr	r3, [pc, #776]	; (4b18 <USB_Handler+0x318>)
    4810:	681f      	ldr	r7, [r3, #0]
    4812:	683d      	ldr	r5, [r7, #0]
    4814:	782b      	ldrb	r3, [r5, #0]
    4816:	09db      	lsrs	r3, r3, #7
    4818:	d114      	bne.n	4844 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    481a:	8c2e      	ldrh	r6, [r5, #32]
    481c:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    481e:	2e00      	cmp	r6, #0
    4820:	d000      	beq.n	4824 <USB_Handler+0x24>
    4822:	e1a9      	b.n	4b78 <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    4824:	8bae      	ldrh	r6, [r5, #28]
    4826:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    4828:	23ab      	movs	r3, #171	; 0xab
    482a:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    482c:	5afb      	ldrh	r3, [r7, r3]
    482e:	22aa      	movs	r2, #170	; 0xaa
    4830:	0052      	lsls	r2, r2, #1
    4832:	5abd      	ldrh	r5, [r7, r2]
    4834:	401d      	ands	r5, r3
    4836:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4838:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    483a:	4fb8      	ldr	r7, [pc, #736]	; (4b1c <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    483c:	4bb6      	ldr	r3, [pc, #728]	; (4b18 <USB_Handler+0x318>)
    483e:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4840:	4698      	mov	r8, r3
    4842:	e184      	b.n	4b4e <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    4844:	8c2b      	ldrh	r3, [r5, #32]
    4846:	b29b      	uxth	r3, r3
    4848:	2b00      	cmp	r3, #0
    484a:	d100      	bne.n	484e <USB_Handler+0x4e>
    484c:	e0de      	b.n	4a0c <USB_Handler+0x20c>
    484e:	8c28      	ldrh	r0, [r5, #32]
    4850:	b280      	uxth	r0, r0
    4852:	4bb3      	ldr	r3, [pc, #716]	; (4b20 <USB_Handler+0x320>)
    4854:	4798      	blx	r3
    4856:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    4858:	281f      	cmp	r0, #31
    485a:	d900      	bls.n	485e <USB_Handler+0x5e>
    485c:	e0d6      	b.n	4a0c <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    485e:	0003      	movs	r3, r0
    4860:	3308      	adds	r3, #8
    4862:	015b      	lsls	r3, r3, #5
    4864:	18ed      	adds	r5, r5, r3
    4866:	79ed      	ldrb	r5, [r5, #7]
    4868:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    486a:	07ab      	lsls	r3, r5, #30
    486c:	d041      	beq.n	48f2 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    486e:	4aad      	ldr	r2, [pc, #692]	; (4b24 <USB_Handler+0x324>)
    4870:	2301      	movs	r3, #1
    4872:	4083      	lsls	r3, r0
    4874:	6811      	ldr	r1, [r2, #0]
    4876:	4399      	bics	r1, r3
    4878:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    487a:	0003      	movs	r3, r0
    487c:	3308      	adds	r3, #8
    487e:	015b      	lsls	r3, r3, #5
    4880:	683a      	ldr	r2, [r7, #0]
    4882:	4694      	mov	ip, r2
    4884:	4463      	add	r3, ip
    4886:	2203      	movs	r2, #3
    4888:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    488a:	183b      	adds	r3, r7, r0
    488c:	33ae      	adds	r3, #174	; 0xae
    488e:	781b      	ldrb	r3, [r3, #0]
    4890:	07db      	lsls	r3, r3, #31
    4892:	d52e      	bpl.n	48f2 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    4894:	4ba4      	ldr	r3, [pc, #656]	; (4b28 <USB_Handler+0x328>)
    4896:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    4898:	683a      	ldr	r2, [r7, #0]
    489a:	0003      	movs	r3, r0
    489c:	3308      	adds	r3, #8
    489e:	015b      	lsls	r3, r3, #5
    48a0:	5c9b      	ldrb	r3, [r3, r2]
    48a2:	079b      	lsls	r3, r3, #30
    48a4:	0f9b      	lsrs	r3, r3, #30
    48a6:	2b01      	cmp	r3, #1
    48a8:	d100      	bne.n	48ac <USB_Handler+0xac>
    48aa:	e081      	b.n	49b0 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    48ac:	0142      	lsls	r2, r0, #5
    48ae:	4b9f      	ldr	r3, [pc, #636]	; (4b2c <USB_Handler+0x32c>)
    48b0:	189b      	adds	r3, r3, r2
    48b2:	685a      	ldr	r2, [r3, #4]
    48b4:	0112      	lsls	r2, r2, #4
    48b6:	0c92      	lsrs	r2, r2, #18
    48b8:	b290      	uxth	r0, r2
    48ba:	499b      	ldr	r1, [pc, #620]	; (4b28 <USB_Handler+0x328>)
    48bc:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    48be:	685a      	ldr	r2, [r3, #4]
    48c0:	0492      	lsls	r2, r2, #18
    48c2:	0c92      	lsrs	r2, r2, #18
    48c4:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    48c6:	685a      	ldr	r2, [r3, #4]
    48c8:	4999      	ldr	r1, [pc, #612]	; (4b30 <USB_Handler+0x330>)
    48ca:	400a      	ands	r2, r1
    48cc:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    48ce:	2800      	cmp	r0, #0
    48d0:	d107      	bne.n	48e2 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    48d2:	0162      	lsls	r2, r4, #5
    48d4:	4b95      	ldr	r3, [pc, #596]	; (4b2c <USB_Handler+0x32c>)
    48d6:	189b      	adds	r3, r3, r2
    48d8:	685b      	ldr	r3, [r3, #4]
    48da:	049b      	lsls	r3, r3, #18
    48dc:	0c9b      	lsrs	r3, r3, #18
    48de:	4a92      	ldr	r2, [pc, #584]	; (4b28 <USB_Handler+0x328>)
    48e0:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    48e2:	4b8d      	ldr	r3, [pc, #564]	; (4b18 <USB_Handler+0x318>)
    48e4:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    48e6:	1ca3      	adds	r3, r4, #2
    48e8:	011b      	lsls	r3, r3, #4
    48ea:	18c3      	adds	r3, r0, r3
    48ec:	685b      	ldr	r3, [r3, #4]
    48ee:	498e      	ldr	r1, [pc, #568]	; (4b28 <USB_Handler+0x328>)
    48f0:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    48f2:	076b      	lsls	r3, r5, #29
    48f4:	d50e      	bpl.n	4914 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    48f6:	4a8b      	ldr	r2, [pc, #556]	; (4b24 <USB_Handler+0x324>)
    48f8:	2301      	movs	r3, #1
    48fa:	40a3      	lsls	r3, r4
    48fc:	6811      	ldr	r1, [r2, #0]
    48fe:	4399      	bics	r1, r3
    4900:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4902:	4b85      	ldr	r3, [pc, #532]	; (4b18 <USB_Handler+0x318>)
    4904:	681b      	ldr	r3, [r3, #0]
    4906:	681b      	ldr	r3, [r3, #0]
    4908:	0022      	movs	r2, r4
    490a:	3208      	adds	r2, #8
    490c:	0152      	lsls	r2, r2, #5
    490e:	189b      	adds	r3, r3, r2
    4910:	2204      	movs	r2, #4
    4912:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    4914:	072b      	lsls	r3, r5, #28
    4916:	d514      	bpl.n	4942 <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4918:	4a82      	ldr	r2, [pc, #520]	; (4b24 <USB_Handler+0x324>)
    491a:	2301      	movs	r3, #1
    491c:	40a3      	lsls	r3, r4
    491e:	6811      	ldr	r1, [r2, #0]
    4920:	4399      	bics	r1, r3
    4922:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4924:	4b7c      	ldr	r3, [pc, #496]	; (4b18 <USB_Handler+0x318>)
    4926:	6818      	ldr	r0, [r3, #0]
    4928:	0023      	movs	r3, r4
    492a:	3308      	adds	r3, #8
    492c:	015b      	lsls	r3, r3, #5
    492e:	6802      	ldr	r2, [r0, #0]
    4930:	4694      	mov	ip, r2
    4932:	4463      	add	r3, ip
    4934:	2208      	movs	r2, #8
    4936:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4938:	1903      	adds	r3, r0, r4
    493a:	33ae      	adds	r3, #174	; 0xae
    493c:	781b      	ldrb	r3, [r3, #0]
    493e:	079b      	lsls	r3, r3, #30
    4940:	d447      	bmi.n	49d2 <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    4942:	06eb      	lsls	r3, r5, #27
    4944:	d514      	bpl.n	4970 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4946:	4a77      	ldr	r2, [pc, #476]	; (4b24 <USB_Handler+0x324>)
    4948:	2301      	movs	r3, #1
    494a:	40a3      	lsls	r3, r4
    494c:	6811      	ldr	r1, [r2, #0]
    494e:	4399      	bics	r1, r3
    4950:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4952:	4b71      	ldr	r3, [pc, #452]	; (4b18 <USB_Handler+0x318>)
    4954:	6818      	ldr	r0, [r3, #0]
    4956:	0023      	movs	r3, r4
    4958:	3308      	adds	r3, #8
    495a:	015b      	lsls	r3, r3, #5
    495c:	6802      	ldr	r2, [r0, #0]
    495e:	4694      	mov	ip, r2
    4960:	4463      	add	r3, ip
    4962:	2210      	movs	r2, #16
    4964:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4966:	1903      	adds	r3, r0, r4
    4968:	33ae      	adds	r3, #174	; 0xae
    496a:	781b      	ldrb	r3, [r3, #0]
    496c:	075b      	lsls	r3, r3, #29
    496e:	d43e      	bmi.n	49ee <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    4970:	06ab      	lsls	r3, r5, #26
    4972:	d400      	bmi.n	4976 <USB_Handler+0x176>
    4974:	e0b0      	b.n	4ad8 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4976:	4a6b      	ldr	r2, [pc, #428]	; (4b24 <USB_Handler+0x324>)
    4978:	2301      	movs	r3, #1
    497a:	40a3      	lsls	r3, r4
    497c:	6811      	ldr	r1, [r2, #0]
    497e:	4399      	bics	r1, r3
    4980:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4982:	4b65      	ldr	r3, [pc, #404]	; (4b18 <USB_Handler+0x318>)
    4984:	6818      	ldr	r0, [r3, #0]
    4986:	0023      	movs	r3, r4
    4988:	3308      	adds	r3, #8
    498a:	015b      	lsls	r3, r3, #5
    498c:	6802      	ldr	r2, [r0, #0]
    498e:	4694      	mov	ip, r2
    4990:	4463      	add	r3, ip
    4992:	2220      	movs	r2, #32
    4994:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4996:	1903      	adds	r3, r0, r4
    4998:	33ae      	adds	r3, #174	; 0xae
    499a:	781b      	ldrb	r3, [r3, #0]
    499c:	071b      	lsls	r3, r3, #28
    499e:	d400      	bmi.n	49a2 <USB_Handler+0x1a2>
    49a0:	e09a      	b.n	4ad8 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    49a2:	4961      	ldr	r1, [pc, #388]	; (4b28 <USB_Handler+0x328>)
    49a4:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    49a6:	0124      	lsls	r4, r4, #4
    49a8:	1904      	adds	r4, r0, r4
    49aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    49ac:	4798      	blx	r3
    49ae:	e093      	b.n	4ad8 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    49b0:	0142      	lsls	r2, r0, #5
    49b2:	4b5e      	ldr	r3, [pc, #376]	; (4b2c <USB_Handler+0x32c>)
    49b4:	189b      	adds	r3, r3, r2
    49b6:	685a      	ldr	r2, [r3, #4]
    49b8:	0492      	lsls	r2, r2, #18
    49ba:	0c92      	lsrs	r2, r2, #18
    49bc:	495a      	ldr	r1, [pc, #360]	; (4b28 <USB_Handler+0x328>)
    49be:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    49c0:	685a      	ldr	r2, [r3, #4]
    49c2:	0112      	lsls	r2, r2, #4
    49c4:	0c92      	lsrs	r2, r2, #18
    49c6:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    49c8:	685a      	ldr	r2, [r3, #4]
    49ca:	0b92      	lsrs	r2, r2, #14
    49cc:	0392      	lsls	r2, r2, #14
    49ce:	605a      	str	r2, [r3, #4]
    49d0:	e787      	b.n	48e2 <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    49d2:	4955      	ldr	r1, [pc, #340]	; (4b28 <USB_Handler+0x328>)
    49d4:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    49d6:	0162      	lsls	r2, r4, #5
    49d8:	4b54      	ldr	r3, [pc, #336]	; (4b2c <USB_Handler+0x32c>)
    49da:	189b      	adds	r3, r3, r2
    49dc:	89db      	ldrh	r3, [r3, #14]
    49de:	221f      	movs	r2, #31
    49e0:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    49e2:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    49e4:	0123      	lsls	r3, r4, #4
    49e6:	18c3      	adds	r3, r0, r3
    49e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    49ea:	4798      	blx	r3
    49ec:	e7a9      	b.n	4942 <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    49ee:	494e      	ldr	r1, [pc, #312]	; (4b28 <USB_Handler+0x328>)
    49f0:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    49f2:	0162      	lsls	r2, r4, #5
    49f4:	4b4d      	ldr	r3, [pc, #308]	; (4b2c <USB_Handler+0x32c>)
    49f6:	189b      	adds	r3, r3, r2
    49f8:	685b      	ldr	r3, [r3, #4]
    49fa:	011b      	lsls	r3, r3, #4
    49fc:	0c9b      	lsrs	r3, r3, #18
    49fe:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    4a00:	0123      	lsls	r3, r4, #4
    4a02:	18c3      	adds	r3, r0, r3
    4a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a06:	2100      	movs	r1, #0
    4a08:	4798      	blx	r3
    4a0a:	e7b1      	b.n	4970 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    4a0c:	8bac      	ldrh	r4, [r5, #28]
    4a0e:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    4a10:	0763      	lsls	r3, r4, #29
    4a12:	d505      	bpl.n	4a20 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    4a14:	2304      	movs	r3, #4
    4a16:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    4a18:	33a1      	adds	r3, #161	; 0xa1
    4a1a:	5cfb      	ldrb	r3, [r7, r3]
    4a1c:	07db      	lsls	r3, r3, #31
    4a1e:	d462      	bmi.n	4ae6 <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    4a20:	0723      	lsls	r3, r4, #28
    4a22:	d50b      	bpl.n	4a3c <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    4a24:	2200      	movs	r2, #0
    4a26:	4b3f      	ldr	r3, [pc, #252]	; (4b24 <USB_Handler+0x324>)
    4a28:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    4a2a:	4b3b      	ldr	r3, [pc, #236]	; (4b18 <USB_Handler+0x318>)
    4a2c:	6818      	ldr	r0, [r3, #0]
    4a2e:	2308      	movs	r3, #8
    4a30:	6802      	ldr	r2, [r0, #0]
    4a32:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    4a34:	339d      	adds	r3, #157	; 0x9d
    4a36:	5cc3      	ldrb	r3, [r0, r3]
    4a38:	079b      	lsls	r3, r3, #30
    4a3a:	d458      	bmi.n	4aee <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    4a3c:	0663      	lsls	r3, r4, #25
    4a3e:	d508      	bpl.n	4a52 <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    4a40:	4b35      	ldr	r3, [pc, #212]	; (4b18 <USB_Handler+0x318>)
    4a42:	6818      	ldr	r0, [r3, #0]
    4a44:	2340      	movs	r3, #64	; 0x40
    4a46:	6802      	ldr	r2, [r0, #0]
    4a48:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    4a4a:	3365      	adds	r3, #101	; 0x65
    4a4c:	5cc3      	ldrb	r3, [r0, r3]
    4a4e:	06db      	lsls	r3, r3, #27
    4a50:	d450      	bmi.n	4af4 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    4a52:	06a3      	lsls	r3, r4, #26
    4a54:	d508      	bpl.n	4a68 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    4a56:	4b30      	ldr	r3, [pc, #192]	; (4b18 <USB_Handler+0x318>)
    4a58:	6818      	ldr	r0, [r3, #0]
    4a5a:	2320      	movs	r3, #32
    4a5c:	6802      	ldr	r2, [r0, #0]
    4a5e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    4a60:	3385      	adds	r3, #133	; 0x85
    4a62:	5cc3      	ldrb	r3, [r0, r3]
    4a64:	071b      	lsls	r3, r3, #28
    4a66:	d448      	bmi.n	4afa <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    4a68:	06e3      	lsls	r3, r4, #27
    4a6a:	d508      	bpl.n	4a7e <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    4a6c:	4b2a      	ldr	r3, [pc, #168]	; (4b18 <USB_Handler+0x318>)
    4a6e:	6818      	ldr	r0, [r3, #0]
    4a70:	2310      	movs	r3, #16
    4a72:	6802      	ldr	r2, [r0, #0]
    4a74:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    4a76:	3395      	adds	r3, #149	; 0x95
    4a78:	5cc3      	ldrb	r3, [r0, r3]
    4a7a:	075b      	lsls	r3, r3, #29
    4a7c:	d440      	bmi.n	4b00 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    4a7e:	0623      	lsls	r3, r4, #24
    4a80:	d50b      	bpl.n	4a9a <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    4a82:	2200      	movs	r2, #0
    4a84:	4b27      	ldr	r3, [pc, #156]	; (4b24 <USB_Handler+0x324>)
    4a86:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    4a88:	4b23      	ldr	r3, [pc, #140]	; (4b18 <USB_Handler+0x318>)
    4a8a:	6818      	ldr	r0, [r3, #0]
    4a8c:	2380      	movs	r3, #128	; 0x80
    4a8e:	6802      	ldr	r2, [r0, #0]
    4a90:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    4a92:	3325      	adds	r3, #37	; 0x25
    4a94:	5cc3      	ldrb	r3, [r0, r3]
    4a96:	069b      	lsls	r3, r3, #26
    4a98:	d435      	bmi.n	4b06 <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    4a9a:	05e3      	lsls	r3, r4, #23
    4a9c:	d50c      	bpl.n	4ab8 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    4a9e:	2200      	movs	r2, #0
    4aa0:	4b20      	ldr	r3, [pc, #128]	; (4b24 <USB_Handler+0x324>)
    4aa2:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    4aa4:	4b1c      	ldr	r3, [pc, #112]	; (4b18 <USB_Handler+0x318>)
    4aa6:	6818      	ldr	r0, [r3, #0]
    4aa8:	2380      	movs	r3, #128	; 0x80
    4aaa:	005b      	lsls	r3, r3, #1
    4aac:	6802      	ldr	r2, [r0, #0]
    4aae:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    4ab0:	3b5b      	subs	r3, #91	; 0x5b
    4ab2:	5cc3      	ldrb	r3, [r0, r3]
    4ab4:	065b      	lsls	r3, r3, #25
    4ab6:	d429      	bmi.n	4b0c <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    4ab8:	05a3      	lsls	r3, r4, #22
    4aba:	d50d      	bpl.n	4ad8 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    4abc:	2200      	movs	r2, #0
    4abe:	4b19      	ldr	r3, [pc, #100]	; (4b24 <USB_Handler+0x324>)
    4ac0:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    4ac2:	4b15      	ldr	r3, [pc, #84]	; (4b18 <USB_Handler+0x318>)
    4ac4:	6818      	ldr	r0, [r3, #0]
    4ac6:	2380      	movs	r3, #128	; 0x80
    4ac8:	009b      	lsls	r3, r3, #2
    4aca:	6802      	ldr	r2, [r0, #0]
    4acc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    4ace:	3b5c      	subs	r3, #92	; 0x5c
    4ad0:	3bff      	subs	r3, #255	; 0xff
    4ad2:	5cc3      	ldrb	r3, [r0, r3]
    4ad4:	2b7f      	cmp	r3, #127	; 0x7f
    4ad6:	d81c      	bhi.n	4b12 <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    4ad8:	b003      	add	sp, #12
    4ada:	bc3c      	pop	{r2, r3, r4, r5}
    4adc:	4690      	mov	r8, r2
    4ade:	4699      	mov	r9, r3
    4ae0:	46a2      	mov	sl, r4
    4ae2:	46ab      	mov	fp, r5
    4ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    4ae6:	687b      	ldr	r3, [r7, #4]
    4ae8:	0038      	movs	r0, r7
    4aea:	4798      	blx	r3
    4aec:	e798      	b.n	4a20 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    4aee:	6883      	ldr	r3, [r0, #8]
    4af0:	4798      	blx	r3
    4af2:	e7a3      	b.n	4a3c <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    4af4:	6943      	ldr	r3, [r0, #20]
    4af6:	4798      	blx	r3
    4af8:	e7ab      	b.n	4a52 <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    4afa:	6903      	ldr	r3, [r0, #16]
    4afc:	4798      	blx	r3
    4afe:	e7b3      	b.n	4a68 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    4b00:	68c3      	ldr	r3, [r0, #12]
    4b02:	4798      	blx	r3
    4b04:	e7bb      	b.n	4a7e <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    4b06:	6983      	ldr	r3, [r0, #24]
    4b08:	4798      	blx	r3
    4b0a:	e7c6      	b.n	4a9a <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    4b0c:	69c3      	ldr	r3, [r0, #28]
    4b0e:	4798      	blx	r3
    4b10:	e7d2      	b.n	4ab8 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    4b12:	6a03      	ldr	r3, [r0, #32]
    4b14:	4798      	blx	r3
    4b16:	e7df      	b.n	4ad8 <USB_Handler+0x2d8>
    4b18:	2000035c 	.word	0x2000035c
    4b1c:	00008460 	.word	0x00008460
    4b20:	00006e99 	.word	0x00006e99
    4b24:	2000036c 	.word	0x2000036c
    4b28:	20000370 	.word	0x20000370
    4b2c:	200006f0 	.word	0x200006f0
    4b30:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4b34:	0023      	movs	r3, r4
    4b36:	332e      	adds	r3, #46	; 0x2e
    4b38:	009b      	lsls	r3, r3, #2
    4b3a:	4642      	mov	r2, r8
    4b3c:	6812      	ldr	r2, [r2, #0]
    4b3e:	589b      	ldr	r3, [r3, r2]
    4b40:	499e      	ldr	r1, [pc, #632]	; (4dbc <USB_Handler+0x5bc>)
    4b42:	4642      	mov	r2, r8
    4b44:	6810      	ldr	r0, [r2, #0]
    4b46:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4b48:	3401      	adds	r4, #1
    4b4a:	2c07      	cmp	r4, #7
    4b4c:	d0c4      	beq.n	4ad8 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    4b4e:	0063      	lsls	r3, r4, #1
    4b50:	5bdb      	ldrh	r3, [r3, r7]
    4b52:	4233      	tst	r3, r6
    4b54:	d003      	beq.n	4b5e <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    4b56:	464a      	mov	r2, r9
    4b58:	6812      	ldr	r2, [r2, #0]
    4b5a:	6812      	ldr	r2, [r2, #0]
    4b5c:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    4b5e:	422b      	tst	r3, r5
    4b60:	d0f2      	beq.n	4b48 <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    4b62:	2c06      	cmp	r4, #6
    4b64:	d1e6      	bne.n	4b34 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    4b66:	4b96      	ldr	r3, [pc, #600]	; (4dc0 <USB_Handler+0x5c0>)
    4b68:	891b      	ldrh	r3, [r3, #8]
    4b6a:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    4b6c:	2280      	movs	r2, #128	; 0x80
    4b6e:	0052      	lsls	r2, r2, #1
    4b70:	4013      	ands	r3, r2
    4b72:	4a92      	ldr	r2, [pc, #584]	; (4dbc <USB_Handler+0x5bc>)
    4b74:	6013      	str	r3, [r2, #0]
    4b76:	e7dd      	b.n	4b34 <USB_Handler+0x334>
    4b78:	003c      	movs	r4, r7
    4b7a:	3459      	adds	r4, #89	; 0x59
    4b7c:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    4b7e:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    4b80:	2201      	movs	r2, #1
    4b82:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4b84:	325f      	adds	r2, #95	; 0x5f
    4b86:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4b88:	3a50      	subs	r2, #80	; 0x50
    4b8a:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4b8c:	3a0d      	subs	r2, #13
    4b8e:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4b90:	46b8      	mov	r8, r7
    4b92:	002f      	movs	r7, r5
    4b94:	e0b9      	b.n	4d0a <USB_Handler+0x50a>
    4b96:	002a      	movs	r2, r5
    4b98:	003d      	movs	r5, r7
    4b9a:	4647      	mov	r7, r8
    4b9c:	4690      	mov	r8, r2
    4b9e:	015b      	lsls	r3, r3, #5
    4ba0:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    4ba2:	2308      	movs	r3, #8
    4ba4:	33ff      	adds	r3, #255	; 0xff
    4ba6:	5ceb      	ldrb	r3, [r5, r3]
    4ba8:	065b      	lsls	r3, r3, #25
    4baa:	d516      	bpl.n	4bda <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4bac:	2240      	movs	r2, #64	; 0x40
    4bae:	2308      	movs	r3, #8
    4bb0:	33ff      	adds	r3, #255	; 0xff
    4bb2:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4bb4:	3b88      	subs	r3, #136	; 0x88
    4bb6:	3bff      	subs	r3, #255	; 0xff
    4bb8:	4642      	mov	r2, r8
    4bba:	4313      	orrs	r3, r2
    4bbc:	4a81      	ldr	r2, [pc, #516]	; (4dc4 <USB_Handler+0x5c4>)
    4bbe:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4bc0:	2360      	movs	r3, #96	; 0x60
    4bc2:	420b      	tst	r3, r1
    4bc4:	d100      	bne.n	4bc8 <USB_Handler+0x3c8>
    4bc6:	e787      	b.n	4ad8 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    4bc8:	9b01      	ldr	r3, [sp, #4]
    4bca:	011b      	lsls	r3, r3, #4
    4bcc:	18fb      	adds	r3, r7, r3
    4bce:	33e0      	adds	r3, #224	; 0xe0
    4bd0:	681b      	ldr	r3, [r3, #0]
    4bd2:	497c      	ldr	r1, [pc, #496]	; (4dc4 <USB_Handler+0x5c4>)
    4bd4:	0038      	movs	r0, r7
    4bd6:	4798      	blx	r3
    4bd8:	e77e      	b.n	4ad8 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4bda:	2308      	movs	r3, #8
    4bdc:	33ff      	adds	r3, #255	; 0xff
    4bde:	5ceb      	ldrb	r3, [r5, r3]
    4be0:	069b      	lsls	r3, r3, #26
    4be2:	d5ed      	bpl.n	4bc0 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4be4:	2220      	movs	r2, #32
    4be6:	2308      	movs	r3, #8
    4be8:	33ff      	adds	r3, #255	; 0xff
    4bea:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4bec:	4b75      	ldr	r3, [pc, #468]	; (4dc4 <USB_Handler+0x5c4>)
    4bee:	4642      	mov	r2, r8
    4bf0:	719a      	strb	r2, [r3, #6]
    4bf2:	e7e5      	b.n	4bc0 <USB_Handler+0x3c0>
    4bf4:	003d      	movs	r5, r7
    4bf6:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    4bf8:	9a01      	ldr	r2, [sp, #4]
    4bfa:	0013      	movs	r3, r2
    4bfc:	3308      	adds	r3, #8
    4bfe:	015b      	lsls	r3, r3, #5
    4c00:	18ed      	adds	r5, r5, r3
    4c02:	2310      	movs	r3, #16
    4c04:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    4c06:	18bb      	adds	r3, r7, r2
    4c08:	3361      	adds	r3, #97	; 0x61
    4c0a:	33ff      	adds	r3, #255	; 0xff
    4c0c:	781b      	ldrb	r3, [r3, #0]
    4c0e:	06db      	lsls	r3, r3, #27
    4c10:	d400      	bmi.n	4c14 <USB_Handler+0x414>
    4c12:	e761      	b.n	4ad8 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4c14:	0010      	movs	r0, r2
    4c16:	0152      	lsls	r2, r2, #5
    4c18:	4b69      	ldr	r3, [pc, #420]	; (4dc0 <USB_Handler+0x5c0>)
    4c1a:	189b      	adds	r3, r3, r2
    4c1c:	685b      	ldr	r3, [r3, #4]
    4c1e:	049b      	lsls	r3, r3, #18
    4c20:	0c9b      	lsrs	r3, r3, #18
    4c22:	4968      	ldr	r1, [pc, #416]	; (4dc4 <USB_Handler+0x5c4>)
    4c24:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    4c26:	0103      	lsls	r3, r0, #4
    4c28:	18fb      	adds	r3, r7, r3
    4c2a:	33dc      	adds	r3, #220	; 0xdc
    4c2c:	681b      	ldr	r3, [r3, #0]
    4c2e:	4640      	mov	r0, r8
    4c30:	4798      	blx	r3
    4c32:	e751      	b.n	4ad8 <USB_Handler+0x2d8>
    4c34:	002a      	movs	r2, r5
    4c36:	003d      	movs	r5, r7
    4c38:	4647      	mov	r7, r8
    4c3a:	4690      	mov	r8, r2
    4c3c:	015b      	lsls	r3, r3, #5
    4c3e:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4c40:	2308      	movs	r3, #8
    4c42:	33ff      	adds	r3, #255	; 0xff
    4c44:	5ceb      	ldrb	r3, [r5, r3]
    4c46:	079b      	lsls	r3, r3, #30
    4c48:	d51e      	bpl.n	4c88 <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4c4a:	2202      	movs	r2, #2
    4c4c:	2308      	movs	r3, #8
    4c4e:	33ff      	adds	r3, #255	; 0xff
    4c50:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4c52:	485c      	ldr	r0, [pc, #368]	; (4dc4 <USB_Handler+0x5c4>)
    4c54:	3b88      	subs	r3, #136	; 0x88
    4c56:	3bff      	subs	r3, #255	; 0xff
    4c58:	4642      	mov	r2, r8
    4c5a:	4313      	orrs	r3, r2
    4c5c:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    4c5e:	9b01      	ldr	r3, [sp, #4]
    4c60:	015a      	lsls	r2, r3, #5
    4c62:	4b57      	ldr	r3, [pc, #348]	; (4dc0 <USB_Handler+0x5c0>)
    4c64:	189b      	adds	r3, r3, r2
    4c66:	3310      	adds	r3, #16
    4c68:	685b      	ldr	r3, [r3, #4]
    4c6a:	049b      	lsls	r3, r3, #18
    4c6c:	0c9b      	lsrs	r3, r3, #18
    4c6e:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4c70:	078b      	lsls	r3, r1, #30
    4c72:	d100      	bne.n	4c76 <USB_Handler+0x476>
    4c74:	e730      	b.n	4ad8 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    4c76:	9b01      	ldr	r3, [sp, #4]
    4c78:	330d      	adds	r3, #13
    4c7a:	011b      	lsls	r3, r3, #4
    4c7c:	18fb      	adds	r3, r7, r3
    4c7e:	685b      	ldr	r3, [r3, #4]
    4c80:	4950      	ldr	r1, [pc, #320]	; (4dc4 <USB_Handler+0x5c4>)
    4c82:	0038      	movs	r0, r7
    4c84:	4798      	blx	r3
    4c86:	e727      	b.n	4ad8 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4c88:	2308      	movs	r3, #8
    4c8a:	33ff      	adds	r3, #255	; 0xff
    4c8c:	5ceb      	ldrb	r3, [r5, r3]
    4c8e:	07db      	lsls	r3, r3, #31
    4c90:	d5ee      	bpl.n	4c70 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4c92:	2201      	movs	r2, #1
    4c94:	2308      	movs	r3, #8
    4c96:	33ff      	adds	r3, #255	; 0xff
    4c98:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4c9a:	484a      	ldr	r0, [pc, #296]	; (4dc4 <USB_Handler+0x5c4>)
    4c9c:	4643      	mov	r3, r8
    4c9e:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4ca0:	9b01      	ldr	r3, [sp, #4]
    4ca2:	015b      	lsls	r3, r3, #5
    4ca4:	4a46      	ldr	r2, [pc, #280]	; (4dc0 <USB_Handler+0x5c0>)
    4ca6:	18d2      	adds	r2, r2, r3
    4ca8:	6853      	ldr	r3, [r2, #4]
    4caa:	049b      	lsls	r3, r3, #18
    4cac:	0c9b      	lsrs	r3, r3, #18
    4cae:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    4cb0:	6853      	ldr	r3, [r2, #4]
    4cb2:	011b      	lsls	r3, r3, #4
    4cb4:	0c9b      	lsrs	r3, r3, #18
    4cb6:	8083      	strh	r3, [r0, #4]
    4cb8:	e7da      	b.n	4c70 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4cba:	2208      	movs	r2, #8
    4cbc:	32ff      	adds	r2, #255	; 0xff
    4cbe:	5c9a      	ldrb	r2, [r3, r2]
    4cc0:	0752      	lsls	r2, r2, #29
    4cc2:	d56e      	bpl.n	4da2 <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    4cc4:	2004      	movs	r0, #4
    4cc6:	2208      	movs	r2, #8
    4cc8:	32ff      	adds	r2, #255	; 0xff
    4cca:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4ccc:	9801      	ldr	r0, [sp, #4]
    4cce:	0142      	lsls	r2, r0, #5
    4cd0:	4b3b      	ldr	r3, [pc, #236]	; (4dc0 <USB_Handler+0x5c0>)
    4cd2:	189b      	adds	r3, r3, r2
    4cd4:	7a9b      	ldrb	r3, [r3, #10]
    4cd6:	079b      	lsls	r3, r3, #30
    4cd8:	d505      	bpl.n	4ce6 <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4cda:	4b39      	ldr	r3, [pc, #228]	; (4dc0 <USB_Handler+0x5c0>)
    4cdc:	189b      	adds	r3, r3, r2
    4cde:	7a9a      	ldrb	r2, [r3, #10]
    4ce0:	2002      	movs	r0, #2
    4ce2:	4382      	bics	r2, r0
    4ce4:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4ce6:	4b37      	ldr	r3, [pc, #220]	; (4dc4 <USB_Handler+0x5c4>)
    4ce8:	4642      	mov	r2, r8
    4cea:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4cec:	9b01      	ldr	r3, [sp, #4]
    4cee:	3308      	adds	r3, #8
    4cf0:	015b      	lsls	r3, r3, #5
    4cf2:	683a      	ldr	r2, [r7, #0]
    4cf4:	4694      	mov	ip, r2
    4cf6:	4463      	add	r3, ip
    4cf8:	79db      	ldrb	r3, [r3, #7]
    4cfa:	07db      	lsls	r3, r3, #31
    4cfc:	d551      	bpl.n	4da2 <USB_Handler+0x5a2>
    4cfe:	e6eb      	b.n	4ad8 <USB_Handler+0x2d8>
    4d00:	3301      	adds	r3, #1
    4d02:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4d04:	2b08      	cmp	r3, #8
    4d06:	d100      	bne.n	4d0a <USB_Handler+0x50a>
    4d08:	e6e6      	b.n	4ad8 <USB_Handler+0x2d8>
    4d0a:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    4d0c:	9301      	str	r3, [sp, #4]
    4d0e:	0032      	movs	r2, r6
    4d10:	411a      	asrs	r2, r3
    4d12:	4661      	mov	r1, ip
    4d14:	4211      	tst	r1, r2
    4d16:	d0f3      	beq.n	4d00 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    4d18:	001a      	movs	r2, r3
    4d1a:	3208      	adds	r2, #8
    4d1c:	0152      	lsls	r2, r2, #5
    4d1e:	18ba      	adds	r2, r7, r2
    4d20:	79d2      	ldrb	r2, [r2, #7]
    4d22:	b2d2      	uxtb	r2, r2
    4d24:	7a21      	ldrb	r1, [r4, #8]
    4d26:	4011      	ands	r1, r2
    4d28:	7820      	ldrb	r0, [r4, #0]
    4d2a:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4d2c:	4648      	mov	r0, r9
    4d2e:	4210      	tst	r0, r2
    4d30:	d000      	beq.n	4d34 <USB_Handler+0x534>
    4d32:	e730      	b.n	4b96 <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4d34:	4650      	mov	r0, sl
    4d36:	4210      	tst	r0, r2
    4d38:	d000      	beq.n	4d3c <USB_Handler+0x53c>
    4d3a:	e75b      	b.n	4bf4 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4d3c:	4658      	mov	r0, fp
    4d3e:	4210      	tst	r0, r2
    4d40:	d000      	beq.n	4d44 <USB_Handler+0x544>
    4d42:	e777      	b.n	4c34 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4d44:	200c      	movs	r0, #12
    4d46:	4210      	tst	r0, r2
    4d48:	d0da      	beq.n	4d00 <USB_Handler+0x500>
    4d4a:	002a      	movs	r2, r5
    4d4c:	003d      	movs	r5, r7
    4d4e:	4647      	mov	r7, r8
    4d50:	4690      	mov	r8, r2
    4d52:	015b      	lsls	r3, r3, #5
    4d54:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4d56:	2208      	movs	r2, #8
    4d58:	32ff      	adds	r2, #255	; 0xff
    4d5a:	5c9a      	ldrb	r2, [r3, r2]
    4d5c:	0712      	lsls	r2, r2, #28
    4d5e:	d5ac      	bpl.n	4cba <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    4d60:	3804      	subs	r0, #4
    4d62:	2208      	movs	r2, #8
    4d64:	32ff      	adds	r2, #255	; 0xff
    4d66:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4d68:	9801      	ldr	r0, [sp, #4]
    4d6a:	0142      	lsls	r2, r0, #5
    4d6c:	4b14      	ldr	r3, [pc, #80]	; (4dc0 <USB_Handler+0x5c0>)
    4d6e:	189b      	adds	r3, r3, r2
    4d70:	7e9b      	ldrb	r3, [r3, #26]
    4d72:	079b      	lsls	r3, r3, #30
    4d74:	d505      	bpl.n	4d82 <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4d76:	4b12      	ldr	r3, [pc, #72]	; (4dc0 <USB_Handler+0x5c0>)
    4d78:	189b      	adds	r3, r3, r2
    4d7a:	7e9a      	ldrb	r2, [r3, #26]
    4d7c:	2002      	movs	r0, #2
    4d7e:	4382      	bics	r2, r0
    4d80:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4d82:	2380      	movs	r3, #128	; 0x80
    4d84:	425b      	negs	r3, r3
    4d86:	4642      	mov	r2, r8
    4d88:	4313      	orrs	r3, r2
    4d8a:	4a0e      	ldr	r2, [pc, #56]	; (4dc4 <USB_Handler+0x5c4>)
    4d8c:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4d8e:	9b01      	ldr	r3, [sp, #4]
    4d90:	3308      	adds	r3, #8
    4d92:	015b      	lsls	r3, r3, #5
    4d94:	683a      	ldr	r2, [r7, #0]
    4d96:	4694      	mov	ip, r2
    4d98:	4463      	add	r3, ip
    4d9a:	79db      	ldrb	r3, [r3, #7]
    4d9c:	079b      	lsls	r3, r3, #30
    4d9e:	d500      	bpl.n	4da2 <USB_Handler+0x5a2>
    4da0:	e69a      	b.n	4ad8 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4da2:	230c      	movs	r3, #12
    4da4:	420b      	tst	r3, r1
    4da6:	d100      	bne.n	4daa <USB_Handler+0x5aa>
    4da8:	e696      	b.n	4ad8 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4daa:	9b01      	ldr	r3, [sp, #4]
    4dac:	011b      	lsls	r3, r3, #4
    4dae:	18fb      	adds	r3, r7, r3
    4db0:	33d8      	adds	r3, #216	; 0xd8
    4db2:	681b      	ldr	r3, [r3, #0]
    4db4:	4903      	ldr	r1, [pc, #12]	; (4dc4 <USB_Handler+0x5c4>)
    4db6:	0038      	movs	r0, r7
    4db8:	4798      	blx	r3
    4dba:	e68d      	b.n	4ad8 <USB_Handler+0x2d8>
    4dbc:	20000360 	.word	0x20000360
    4dc0:	200006f0 	.word	0x200006f0
    4dc4:	20000364 	.word	0x20000364

00004dc8 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    4dc8:	2200      	movs	r2, #0
    4dca:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    4dcc:	2301      	movs	r3, #1
    4dce:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    4dd0:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    4dd2:	70c3      	strb	r3, [r0, #3]
}
    4dd4:	4770      	bx	lr
	...

00004dd8 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    4dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dda:	46ce      	mov	lr, r9
    4ddc:	4647      	mov	r7, r8
    4dde:	b580      	push	{r7, lr}
    4de0:	b083      	sub	sp, #12
    4de2:	0004      	movs	r4, r0
    4de4:	000d      	movs	r5, r1
    4de6:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    4de8:	2300      	movs	r3, #0
    4dea:	4a6e      	ldr	r2, [pc, #440]	; (4fa4 <usb_init+0x1cc>)
    4dec:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    4dee:	4a6e      	ldr	r2, [pc, #440]	; (4fa8 <usb_init+0x1d0>)
    4df0:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    4df2:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    4df4:	496d      	ldr	r1, [pc, #436]	; (4fac <usb_init+0x1d4>)
    4df6:	69ca      	ldr	r2, [r1, #28]
    4df8:	2020      	movs	r0, #32
    4dfa:	4302      	orrs	r2, r0
    4dfc:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4dfe:	af01      	add	r7, sp, #4
    4e00:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4e02:	2201      	movs	r2, #1
    4e04:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    4e06:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    4e08:	3306      	adds	r3, #6
    4e0a:	4699      	mov	r9, r3
    4e0c:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    4e0e:	0039      	movs	r1, r7
    4e10:	3808      	subs	r0, #8
    4e12:	4b67      	ldr	r3, [pc, #412]	; (4fb0 <usb_init+0x1d8>)
    4e14:	4698      	mov	r8, r3
    4e16:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    4e18:	464b      	mov	r3, r9
    4e1a:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    4e1c:	0039      	movs	r1, r7
    4e1e:	2019      	movs	r0, #25
    4e20:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    4e22:	78b3      	ldrb	r3, [r6, #2]
    4e24:	466a      	mov	r2, sp
    4e26:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    4e28:	4669      	mov	r1, sp
    4e2a:	2006      	movs	r0, #6
    4e2c:	4b61      	ldr	r3, [pc, #388]	; (4fb4 <usb_init+0x1dc>)
    4e2e:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    4e30:	2006      	movs	r0, #6
    4e32:	4b61      	ldr	r3, [pc, #388]	; (4fb8 <usb_init+0x1e0>)
    4e34:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    4e36:	782b      	ldrb	r3, [r5, #0]
    4e38:	2201      	movs	r2, #1
    4e3a:	4313      	orrs	r3, r2
    4e3c:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    4e3e:	78ab      	ldrb	r3, [r5, #2]
    4e40:	07db      	lsls	r3, r3, #31
    4e42:	d4fc      	bmi.n	4e3e <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4e44:	4a5d      	ldr	r2, [pc, #372]	; (4fbc <usb_init+0x1e4>)
    4e46:	78d3      	ldrb	r3, [r2, #3]
    4e48:	2103      	movs	r1, #3
    4e4a:	438b      	bics	r3, r1
    4e4c:	2102      	movs	r1, #2
    4e4e:	430b      	orrs	r3, r1
    4e50:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4e52:	78d3      	ldrb	r3, [r2, #3]
    4e54:	210c      	movs	r1, #12
    4e56:	438b      	bics	r3, r1
    4e58:	2108      	movs	r1, #8
    4e5a:	430b      	orrs	r3, r1
    4e5c:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    4e5e:	4b58      	ldr	r3, [pc, #352]	; (4fc0 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    4e60:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    4e62:	039b      	lsls	r3, r3, #14
    4e64:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    4e66:	2b1f      	cmp	r3, #31
    4e68:	d100      	bne.n	4e6c <usb_init+0x94>
    4e6a:	e08f      	b.n	4f8c <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    4e6c:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4e6e:	019b      	lsls	r3, r3, #6
    4e70:	4954      	ldr	r1, [pc, #336]	; (4fc4 <usb_init+0x1ec>)
    4e72:	400a      	ands	r2, r1
    4e74:	4313      	orrs	r3, r2
    4e76:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4e78:	4b51      	ldr	r3, [pc, #324]	; (4fc0 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    4e7a:	681b      	ldr	r3, [r3, #0]
    4e7c:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4e7e:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    4e80:	2b1f      	cmp	r3, #31
    4e82:	d100      	bne.n	4e86 <usb_init+0xae>
    4e84:	e084      	b.n	4f90 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    4e86:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4e88:	211f      	movs	r1, #31
    4e8a:	438a      	bics	r2, r1
    4e8c:	4313      	orrs	r3, r2
    4e8e:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4e90:	4b4b      	ldr	r3, [pc, #300]	; (4fc0 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    4e92:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4e94:	019b      	lsls	r3, r3, #6
    4e96:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    4e98:	2b07      	cmp	r3, #7
    4e9a:	d100      	bne.n	4e9e <usb_init+0xc6>
    4e9c:	e07a      	b.n	4f94 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    4e9e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4ea0:	031b      	lsls	r3, r3, #12
    4ea2:	4949      	ldr	r1, [pc, #292]	; (4fc8 <usb_init+0x1f0>)
    4ea4:	400a      	ands	r2, r1
    4ea6:	4313      	orrs	r3, r2
    4ea8:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    4eaa:	7832      	ldrb	r2, [r6, #0]
    4eac:	7829      	ldrb	r1, [r5, #0]
    4eae:	01d2      	lsls	r2, r2, #7
    4eb0:	237f      	movs	r3, #127	; 0x7f
    4eb2:	400b      	ands	r3, r1
    4eb4:	4313      	orrs	r3, r2
    4eb6:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    4eb8:	7871      	ldrb	r1, [r6, #1]
    4eba:	782b      	ldrb	r3, [r5, #0]
    4ebc:	2201      	movs	r2, #1
    4ebe:	400a      	ands	r2, r1
    4ec0:	0092      	lsls	r2, r2, #2
    4ec2:	2104      	movs	r1, #4
    4ec4:	438b      	bics	r3, r1
    4ec6:	4313      	orrs	r3, r2
    4ec8:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    4eca:	4b40      	ldr	r3, [pc, #256]	; (4fcc <usb_init+0x1f4>)
    4ecc:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    4ece:	78f3      	ldrb	r3, [r6, #3]
    4ed0:	2b01      	cmp	r3, #1
    4ed2:	d061      	beq.n	4f98 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    4ed4:	2b00      	cmp	r3, #0
    4ed6:	d106      	bne.n	4ee6 <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    4ed8:	6822      	ldr	r2, [r4, #0]
    4eda:	8913      	ldrh	r3, [r2, #8]
    4edc:	210c      	movs	r1, #12
    4ede:	438b      	bics	r3, r1
    4ee0:	2104      	movs	r1, #4
    4ee2:	430b      	orrs	r3, r1
    4ee4:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    4ee6:	2280      	movs	r2, #128	; 0x80
    4ee8:	0052      	lsls	r2, r2, #1
    4eea:	2100      	movs	r1, #0
    4eec:	4837      	ldr	r0, [pc, #220]	; (4fcc <usb_init+0x1f4>)
    4eee:	4b38      	ldr	r3, [pc, #224]	; (4fd0 <usb_init+0x1f8>)
    4ef0:	4798      	blx	r3
    4ef2:	1d23      	adds	r3, r4, #4
    4ef4:	0021      	movs	r1, r4
    4ef6:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    4ef8:	2200      	movs	r2, #0
    4efa:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    4efc:	428b      	cmp	r3, r1
    4efe:	d1fc      	bne.n	4efa <usb_init+0x122>
    4f00:	0021      	movs	r1, r4
    4f02:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    4f04:	2200      	movs	r2, #0
    4f06:	601a      	str	r2, [r3, #0]
    4f08:	605a      	str	r2, [r3, #4]
    4f0a:	609a      	str	r2, [r3, #8]
    4f0c:	60da      	str	r2, [r3, #12]
    4f0e:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4f10:	428b      	cmp	r3, r1
    4f12:	d1f8      	bne.n	4f06 <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    4f14:	2300      	movs	r3, #0
    4f16:	22a4      	movs	r2, #164	; 0xa4
    4f18:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    4f1a:	3201      	adds	r2, #1
    4f1c:	54a3      	strb	r3, [r4, r2]
    4f1e:	0023      	movs	r3, r4
    4f20:	33a6      	adds	r3, #166	; 0xa6
    4f22:	0021      	movs	r1, r4
    4f24:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    4f26:	2200      	movs	r2, #0
    4f28:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    4f2a:	721a      	strb	r2, [r3, #8]
    4f2c:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4f2e:	4299      	cmp	r1, r3
    4f30:	d1fa      	bne.n	4f28 <usb_init+0x150>
    4f32:	0023      	movs	r3, r4
    4f34:	33b8      	adds	r3, #184	; 0xb8
    4f36:	0021      	movs	r1, r4
    4f38:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    4f3a:	2200      	movs	r2, #0
    4f3c:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    4f3e:	428b      	cmp	r3, r1
    4f40:	d1fc      	bne.n	4f3c <usb_init+0x164>
    4f42:	0021      	movs	r1, r4
    4f44:	3155      	adds	r1, #85	; 0x55
    4f46:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    4f48:	2200      	movs	r2, #0
    4f4a:	601a      	str	r2, [r3, #0]
    4f4c:	605a      	str	r2, [r3, #4]
    4f4e:	609a      	str	r2, [r3, #8]
    4f50:	60da      	str	r2, [r3, #12]
    4f52:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    4f54:	428b      	cmp	r3, r1
    4f56:	d1f8      	bne.n	4f4a <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    4f58:	2300      	movs	r3, #0
    4f5a:	22aa      	movs	r2, #170	; 0xaa
    4f5c:	0052      	lsls	r2, r2, #1
    4f5e:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    4f60:	3202      	adds	r2, #2
    4f62:	52a3      	strh	r3, [r4, r2]
    4f64:	0023      	movs	r3, r4
    4f66:	3359      	adds	r3, #89	; 0x59
    4f68:	33ff      	adds	r3, #255	; 0xff
    4f6a:	3461      	adds	r4, #97	; 0x61
    4f6c:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    4f6e:	2200      	movs	r2, #0
    4f70:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    4f72:	721a      	strb	r2, [r3, #8]
    4f74:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    4f76:	42a3      	cmp	r3, r4
    4f78:	d1fa      	bne.n	4f70 <usb_init+0x198>
    4f7a:	2280      	movs	r2, #128	; 0x80
    4f7c:	4b15      	ldr	r3, [pc, #84]	; (4fd4 <usb_init+0x1fc>)
    4f7e:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    4f80:	2000      	movs	r0, #0
    4f82:	b003      	add	sp, #12
    4f84:	bc0c      	pop	{r2, r3}
    4f86:	4690      	mov	r8, r2
    4f88:	4699      	mov	r9, r3
    4f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    4f8c:	3b1a      	subs	r3, #26
    4f8e:	e76d      	b.n	4e6c <usb_init+0x94>
		pad_transp = 29;
    4f90:	3b02      	subs	r3, #2
    4f92:	e778      	b.n	4e86 <usb_init+0xae>
		pad_trim = 3;
    4f94:	3b04      	subs	r3, #4
    4f96:	e782      	b.n	4e9e <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    4f98:	6822      	ldr	r2, [r4, #0]
    4f9a:	8913      	ldrh	r3, [r2, #8]
    4f9c:	3108      	adds	r1, #8
    4f9e:	438b      	bics	r3, r1
    4fa0:	8113      	strh	r3, [r2, #8]
    4fa2:	e7a0      	b.n	4ee6 <usb_init+0x10e>
    4fa4:	2000036c 	.word	0x2000036c
    4fa8:	2000035c 	.word	0x2000035c
    4fac:	40000400 	.word	0x40000400
    4fb0:	000069ed 	.word	0x000069ed
    4fb4:	000068f5 	.word	0x000068f5
    4fb8:	00006869 	.word	0x00006869
    4fbc:	41005000 	.word	0x41005000
    4fc0:	00806024 	.word	0x00806024
    4fc4:	fffff83f 	.word	0xfffff83f
    4fc8:	ffff8fff 	.word	0xffff8fff
    4fcc:	200006f0 	.word	0x200006f0
    4fd0:	0000715f 	.word	0x0000715f
    4fd4:	e000e100 	.word	0xe000e100

00004fd8 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4fd8:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4fda:	2a00      	cmp	r2, #0
    4fdc:	d001      	beq.n	4fe2 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4fde:	0018      	movs	r0, r3
    4fe0:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4fe2:	008b      	lsls	r3, r1, #2
    4fe4:	4a06      	ldr	r2, [pc, #24]	; (5000 <extint_register_callback+0x28>)
    4fe6:	589b      	ldr	r3, [r3, r2]
    4fe8:	2b00      	cmp	r3, #0
    4fea:	d003      	beq.n	4ff4 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4fec:	4283      	cmp	r3, r0
    4fee:	d005      	beq.n	4ffc <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4ff0:	231d      	movs	r3, #29
    4ff2:	e7f4      	b.n	4fde <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4ff4:	0089      	lsls	r1, r1, #2
    4ff6:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4ff8:	2300      	movs	r3, #0
    4ffa:	e7f0      	b.n	4fde <extint_register_callback+0x6>
		return STATUS_OK;
    4ffc:	2300      	movs	r3, #0
    4ffe:	e7ee      	b.n	4fde <extint_register_callback+0x6>
    5000:	200003c8 	.word	0x200003c8

00005004 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5004:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    5006:	2900      	cmp	r1, #0
    5008:	d001      	beq.n	500e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    500a:	0018      	movs	r0, r3
    500c:	4770      	bx	lr
		return NULL;
    500e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    5010:	281f      	cmp	r0, #31
    5012:	d800      	bhi.n	5016 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    5014:	4a02      	ldr	r2, [pc, #8]	; (5020 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    5016:	2301      	movs	r3, #1
    5018:	4083      	lsls	r3, r0
    501a:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    501c:	2300      	movs	r3, #0
    501e:	e7f4      	b.n	500a <extint_chan_enable_callback+0x6>
    5020:	40001800 	.word	0x40001800

00005024 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5024:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    5026:	2900      	cmp	r1, #0
    5028:	d001      	beq.n	502e <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    502a:	0018      	movs	r0, r3
    502c:	4770      	bx	lr
		return NULL;
    502e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    5030:	281f      	cmp	r0, #31
    5032:	d800      	bhi.n	5036 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    5034:	4a02      	ldr	r2, [pc, #8]	; (5040 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    5036:	2301      	movs	r3, #1
    5038:	4083      	lsls	r3, r0
    503a:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    503c:	2300      	movs	r3, #0
    503e:	e7f4      	b.n	502a <extint_chan_disable_callback+0x6>
    5040:	40001800 	.word	0x40001800

00005044 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    5044:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5046:	2200      	movs	r2, #0
    5048:	4b10      	ldr	r3, [pc, #64]	; (508c <EIC_Handler+0x48>)
    504a:	701a      	strb	r2, [r3, #0]
    504c:	2300      	movs	r3, #0
    504e:	4910      	ldr	r1, [pc, #64]	; (5090 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    5050:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    5052:	4e10      	ldr	r6, [pc, #64]	; (5094 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5054:	4c0d      	ldr	r4, [pc, #52]	; (508c <EIC_Handler+0x48>)
    5056:	e00a      	b.n	506e <EIC_Handler+0x2a>
		return eics[eic_index];
    5058:	490d      	ldr	r1, [pc, #52]	; (5090 <EIC_Handler+0x4c>)
    505a:	e008      	b.n	506e <EIC_Handler+0x2a>
    505c:	7823      	ldrb	r3, [r4, #0]
    505e:	3301      	adds	r3, #1
    5060:	b2db      	uxtb	r3, r3
    5062:	7023      	strb	r3, [r4, #0]
    5064:	2b0f      	cmp	r3, #15
    5066:	d810      	bhi.n	508a <EIC_Handler+0x46>
		return NULL;
    5068:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    506a:	2b1f      	cmp	r3, #31
    506c:	d9f4      	bls.n	5058 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    506e:	0028      	movs	r0, r5
    5070:	4018      	ands	r0, r3
    5072:	2201      	movs	r2, #1
    5074:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    5076:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    5078:	4210      	tst	r0, r2
    507a:	d0ef      	beq.n	505c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    507c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    507e:	009b      	lsls	r3, r3, #2
    5080:	599b      	ldr	r3, [r3, r6]
    5082:	2b00      	cmp	r3, #0
    5084:	d0ea      	beq.n	505c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    5086:	4798      	blx	r3
    5088:	e7e8      	b.n	505c <EIC_Handler+0x18>
			}
		}
	}
}
    508a:	bd70      	pop	{r4, r5, r6, pc}
    508c:	200007f0 	.word	0x200007f0
    5090:	40001800 	.word	0x40001800
    5094:	200003c8 	.word	0x200003c8

00005098 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    5098:	b5f0      	push	{r4, r5, r6, r7, lr}
    509a:	46de      	mov	lr, fp
    509c:	4657      	mov	r7, sl
    509e:	464e      	mov	r6, r9
    50a0:	4645      	mov	r5, r8
    50a2:	b5e0      	push	{r5, r6, r7, lr}
    50a4:	b087      	sub	sp, #28
    50a6:	4680      	mov	r8, r0
    50a8:	9104      	str	r1, [sp, #16]
    50aa:	0016      	movs	r6, r2
    50ac:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    50ae:	2200      	movs	r2, #0
    50b0:	2300      	movs	r3, #0
    50b2:	2100      	movs	r1, #0
    50b4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    50b6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    50b8:	2001      	movs	r0, #1
    50ba:	0021      	movs	r1, r4
    50bc:	9600      	str	r6, [sp, #0]
    50be:	9701      	str	r7, [sp, #4]
    50c0:	465c      	mov	r4, fp
    50c2:	9403      	str	r4, [sp, #12]
    50c4:	4644      	mov	r4, r8
    50c6:	9405      	str	r4, [sp, #20]
    50c8:	e013      	b.n	50f2 <long_division+0x5a>
    50ca:	2420      	movs	r4, #32
    50cc:	1a64      	subs	r4, r4, r1
    50ce:	0005      	movs	r5, r0
    50d0:	40e5      	lsrs	r5, r4
    50d2:	46a8      	mov	r8, r5
    50d4:	e014      	b.n	5100 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    50d6:	9c00      	ldr	r4, [sp, #0]
    50d8:	9d01      	ldr	r5, [sp, #4]
    50da:	1b12      	subs	r2, r2, r4
    50dc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    50de:	465c      	mov	r4, fp
    50e0:	464d      	mov	r5, r9
    50e2:	432c      	orrs	r4, r5
    50e4:	46a3      	mov	fp, r4
    50e6:	9c03      	ldr	r4, [sp, #12]
    50e8:	4645      	mov	r5, r8
    50ea:	432c      	orrs	r4, r5
    50ec:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    50ee:	3901      	subs	r1, #1
    50f0:	d325      	bcc.n	513e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    50f2:	2420      	movs	r4, #32
    50f4:	4264      	negs	r4, r4
    50f6:	190c      	adds	r4, r1, r4
    50f8:	d4e7      	bmi.n	50ca <long_division+0x32>
    50fa:	0005      	movs	r5, r0
    50fc:	40a5      	lsls	r5, r4
    50fe:	46a8      	mov	r8, r5
    5100:	0004      	movs	r4, r0
    5102:	408c      	lsls	r4, r1
    5104:	46a1      	mov	r9, r4
		r = r << 1;
    5106:	1892      	adds	r2, r2, r2
    5108:	415b      	adcs	r3, r3
    510a:	0014      	movs	r4, r2
    510c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    510e:	9e05      	ldr	r6, [sp, #20]
    5110:	464f      	mov	r7, r9
    5112:	403e      	ands	r6, r7
    5114:	46b4      	mov	ip, r6
    5116:	9e04      	ldr	r6, [sp, #16]
    5118:	4647      	mov	r7, r8
    511a:	403e      	ands	r6, r7
    511c:	46b2      	mov	sl, r6
    511e:	4666      	mov	r6, ip
    5120:	4657      	mov	r7, sl
    5122:	433e      	orrs	r6, r7
    5124:	d003      	beq.n	512e <long_division+0x96>
			r |= 0x01;
    5126:	0006      	movs	r6, r0
    5128:	4326      	orrs	r6, r4
    512a:	0032      	movs	r2, r6
    512c:	002b      	movs	r3, r5
		if (r >= d) {
    512e:	9c00      	ldr	r4, [sp, #0]
    5130:	9d01      	ldr	r5, [sp, #4]
    5132:	429d      	cmp	r5, r3
    5134:	d8db      	bhi.n	50ee <long_division+0x56>
    5136:	d1ce      	bne.n	50d6 <long_division+0x3e>
    5138:	4294      	cmp	r4, r2
    513a:	d8d8      	bhi.n	50ee <long_division+0x56>
    513c:	e7cb      	b.n	50d6 <long_division+0x3e>
    513e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    5140:	4658      	mov	r0, fp
    5142:	0019      	movs	r1, r3
    5144:	b007      	add	sp, #28
    5146:	bc3c      	pop	{r2, r3, r4, r5}
    5148:	4690      	mov	r8, r2
    514a:	4699      	mov	r9, r3
    514c:	46a2      	mov	sl, r4
    514e:	46ab      	mov	fp, r5
    5150:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005152 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    5152:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5154:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5156:	2340      	movs	r3, #64	; 0x40
    5158:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    515a:	4281      	cmp	r1, r0
    515c:	d202      	bcs.n	5164 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    515e:	0018      	movs	r0, r3
    5160:	bd10      	pop	{r4, pc}
		baud_calculated++;
    5162:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5164:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    5166:	1c63      	adds	r3, r4, #1
    5168:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    516a:	4288      	cmp	r0, r1
    516c:	d9f9      	bls.n	5162 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    516e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    5170:	2cff      	cmp	r4, #255	; 0xff
    5172:	d8f4      	bhi.n	515e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5174:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    5176:	2300      	movs	r3, #0
    5178:	e7f1      	b.n	515e <_sercom_get_sync_baud_val+0xc>
	...

0000517c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    517c:	b5f0      	push	{r4, r5, r6, r7, lr}
    517e:	b083      	sub	sp, #12
    5180:	000f      	movs	r7, r1
    5182:	0016      	movs	r6, r2
    5184:	aa08      	add	r2, sp, #32
    5186:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    5188:	0004      	movs	r4, r0
    518a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    518c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    518e:	42bc      	cmp	r4, r7
    5190:	d902      	bls.n	5198 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    5192:	0010      	movs	r0, r2
    5194:	b003      	add	sp, #12
    5196:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    5198:	2b00      	cmp	r3, #0
    519a:	d114      	bne.n	51c6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    519c:	0002      	movs	r2, r0
    519e:	0008      	movs	r0, r1
    51a0:	2100      	movs	r1, #0
    51a2:	4c19      	ldr	r4, [pc, #100]	; (5208 <_sercom_get_async_baud_val+0x8c>)
    51a4:	47a0      	blx	r4
    51a6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    51a8:	003a      	movs	r2, r7
    51aa:	2300      	movs	r3, #0
    51ac:	2000      	movs	r0, #0
    51ae:	4c17      	ldr	r4, [pc, #92]	; (520c <_sercom_get_async_baud_val+0x90>)
    51b0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    51b2:	2200      	movs	r2, #0
    51b4:	2301      	movs	r3, #1
    51b6:	1a12      	subs	r2, r2, r0
    51b8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    51ba:	0c12      	lsrs	r2, r2, #16
    51bc:	041b      	lsls	r3, r3, #16
    51be:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    51c0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    51c2:	2200      	movs	r2, #0
    51c4:	e7e5      	b.n	5192 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    51c6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    51c8:	2b01      	cmp	r3, #1
    51ca:	d1f9      	bne.n	51c0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    51cc:	000a      	movs	r2, r1
    51ce:	2300      	movs	r3, #0
    51d0:	2100      	movs	r1, #0
    51d2:	4c0d      	ldr	r4, [pc, #52]	; (5208 <_sercom_get_async_baud_val+0x8c>)
    51d4:	47a0      	blx	r4
    51d6:	0002      	movs	r2, r0
    51d8:	000b      	movs	r3, r1
    51da:	9200      	str	r2, [sp, #0]
    51dc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    51de:	0038      	movs	r0, r7
    51e0:	2100      	movs	r1, #0
    51e2:	4c0a      	ldr	r4, [pc, #40]	; (520c <_sercom_get_async_baud_val+0x90>)
    51e4:	47a0      	blx	r4
    51e6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    51e8:	2380      	movs	r3, #128	; 0x80
    51ea:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    51ec:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    51ee:	4298      	cmp	r0, r3
    51f0:	d8cf      	bhi.n	5192 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    51f2:	0f79      	lsrs	r1, r7, #29
    51f4:	00f8      	lsls	r0, r7, #3
    51f6:	9a00      	ldr	r2, [sp, #0]
    51f8:	9b01      	ldr	r3, [sp, #4]
    51fa:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    51fc:	00ea      	lsls	r2, r5, #3
    51fe:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    5200:	b2d2      	uxtb	r2, r2
    5202:	0352      	lsls	r2, r2, #13
    5204:	432a      	orrs	r2, r5
    5206:	e7db      	b.n	51c0 <_sercom_get_async_baud_val+0x44>
    5208:	00006f19 	.word	0x00006f19
    520c:	00005099 	.word	0x00005099

00005210 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    5210:	b510      	push	{r4, lr}
    5212:	b082      	sub	sp, #8
    5214:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    5216:	4b0e      	ldr	r3, [pc, #56]	; (5250 <sercom_set_gclk_generator+0x40>)
    5218:	781b      	ldrb	r3, [r3, #0]
    521a:	2b00      	cmp	r3, #0
    521c:	d007      	beq.n	522e <sercom_set_gclk_generator+0x1e>
    521e:	2900      	cmp	r1, #0
    5220:	d105      	bne.n	522e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    5222:	4b0b      	ldr	r3, [pc, #44]	; (5250 <sercom_set_gclk_generator+0x40>)
    5224:	785b      	ldrb	r3, [r3, #1]
    5226:	4283      	cmp	r3, r0
    5228:	d010      	beq.n	524c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    522a:	201d      	movs	r0, #29
    522c:	e00c      	b.n	5248 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    522e:	a901      	add	r1, sp, #4
    5230:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    5232:	2013      	movs	r0, #19
    5234:	4b07      	ldr	r3, [pc, #28]	; (5254 <sercom_set_gclk_generator+0x44>)
    5236:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5238:	2013      	movs	r0, #19
    523a:	4b07      	ldr	r3, [pc, #28]	; (5258 <sercom_set_gclk_generator+0x48>)
    523c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    523e:	4b04      	ldr	r3, [pc, #16]	; (5250 <sercom_set_gclk_generator+0x40>)
    5240:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    5242:	2201      	movs	r2, #1
    5244:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    5246:	2000      	movs	r0, #0
}
    5248:	b002      	add	sp, #8
    524a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    524c:	2000      	movs	r0, #0
    524e:	e7fb      	b.n	5248 <sercom_set_gclk_generator+0x38>
    5250:	20000378 	.word	0x20000378
    5254:	000068f5 	.word	0x000068f5
    5258:	00006869 	.word	0x00006869

0000525c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    525c:	4b40      	ldr	r3, [pc, #256]	; (5360 <_sercom_get_default_pad+0x104>)
    525e:	4298      	cmp	r0, r3
    5260:	d031      	beq.n	52c6 <_sercom_get_default_pad+0x6a>
    5262:	d90a      	bls.n	527a <_sercom_get_default_pad+0x1e>
    5264:	4b3f      	ldr	r3, [pc, #252]	; (5364 <_sercom_get_default_pad+0x108>)
    5266:	4298      	cmp	r0, r3
    5268:	d04d      	beq.n	5306 <_sercom_get_default_pad+0xaa>
    526a:	4b3f      	ldr	r3, [pc, #252]	; (5368 <_sercom_get_default_pad+0x10c>)
    526c:	4298      	cmp	r0, r3
    526e:	d05a      	beq.n	5326 <_sercom_get_default_pad+0xca>
    5270:	4b3e      	ldr	r3, [pc, #248]	; (536c <_sercom_get_default_pad+0x110>)
    5272:	4298      	cmp	r0, r3
    5274:	d037      	beq.n	52e6 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    5276:	2000      	movs	r0, #0
}
    5278:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    527a:	4b3d      	ldr	r3, [pc, #244]	; (5370 <_sercom_get_default_pad+0x114>)
    527c:	4298      	cmp	r0, r3
    527e:	d00c      	beq.n	529a <_sercom_get_default_pad+0x3e>
    5280:	4b3c      	ldr	r3, [pc, #240]	; (5374 <_sercom_get_default_pad+0x118>)
    5282:	4298      	cmp	r0, r3
    5284:	d1f7      	bne.n	5276 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5286:	2901      	cmp	r1, #1
    5288:	d017      	beq.n	52ba <_sercom_get_default_pad+0x5e>
    528a:	2900      	cmp	r1, #0
    528c:	d05d      	beq.n	534a <_sercom_get_default_pad+0xee>
    528e:	2902      	cmp	r1, #2
    5290:	d015      	beq.n	52be <_sercom_get_default_pad+0x62>
    5292:	2903      	cmp	r1, #3
    5294:	d015      	beq.n	52c2 <_sercom_get_default_pad+0x66>
	return 0;
    5296:	2000      	movs	r0, #0
    5298:	e7ee      	b.n	5278 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    529a:	2901      	cmp	r1, #1
    529c:	d007      	beq.n	52ae <_sercom_get_default_pad+0x52>
    529e:	2900      	cmp	r1, #0
    52a0:	d051      	beq.n	5346 <_sercom_get_default_pad+0xea>
    52a2:	2902      	cmp	r1, #2
    52a4:	d005      	beq.n	52b2 <_sercom_get_default_pad+0x56>
    52a6:	2903      	cmp	r1, #3
    52a8:	d005      	beq.n	52b6 <_sercom_get_default_pad+0x5a>
	return 0;
    52aa:	2000      	movs	r0, #0
    52ac:	e7e4      	b.n	5278 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    52ae:	4832      	ldr	r0, [pc, #200]	; (5378 <_sercom_get_default_pad+0x11c>)
    52b0:	e7e2      	b.n	5278 <_sercom_get_default_pad+0x1c>
    52b2:	4832      	ldr	r0, [pc, #200]	; (537c <_sercom_get_default_pad+0x120>)
    52b4:	e7e0      	b.n	5278 <_sercom_get_default_pad+0x1c>
    52b6:	4832      	ldr	r0, [pc, #200]	; (5380 <_sercom_get_default_pad+0x124>)
    52b8:	e7de      	b.n	5278 <_sercom_get_default_pad+0x1c>
    52ba:	4832      	ldr	r0, [pc, #200]	; (5384 <_sercom_get_default_pad+0x128>)
    52bc:	e7dc      	b.n	5278 <_sercom_get_default_pad+0x1c>
    52be:	4832      	ldr	r0, [pc, #200]	; (5388 <_sercom_get_default_pad+0x12c>)
    52c0:	e7da      	b.n	5278 <_sercom_get_default_pad+0x1c>
    52c2:	4832      	ldr	r0, [pc, #200]	; (538c <_sercom_get_default_pad+0x130>)
    52c4:	e7d8      	b.n	5278 <_sercom_get_default_pad+0x1c>
    52c6:	2901      	cmp	r1, #1
    52c8:	d007      	beq.n	52da <_sercom_get_default_pad+0x7e>
    52ca:	2900      	cmp	r1, #0
    52cc:	d03f      	beq.n	534e <_sercom_get_default_pad+0xf2>
    52ce:	2902      	cmp	r1, #2
    52d0:	d005      	beq.n	52de <_sercom_get_default_pad+0x82>
    52d2:	2903      	cmp	r1, #3
    52d4:	d005      	beq.n	52e2 <_sercom_get_default_pad+0x86>
	return 0;
    52d6:	2000      	movs	r0, #0
    52d8:	e7ce      	b.n	5278 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    52da:	482d      	ldr	r0, [pc, #180]	; (5390 <_sercom_get_default_pad+0x134>)
    52dc:	e7cc      	b.n	5278 <_sercom_get_default_pad+0x1c>
    52de:	482d      	ldr	r0, [pc, #180]	; (5394 <_sercom_get_default_pad+0x138>)
    52e0:	e7ca      	b.n	5278 <_sercom_get_default_pad+0x1c>
    52e2:	482d      	ldr	r0, [pc, #180]	; (5398 <_sercom_get_default_pad+0x13c>)
    52e4:	e7c8      	b.n	5278 <_sercom_get_default_pad+0x1c>
    52e6:	2901      	cmp	r1, #1
    52e8:	d007      	beq.n	52fa <_sercom_get_default_pad+0x9e>
    52ea:	2900      	cmp	r1, #0
    52ec:	d031      	beq.n	5352 <_sercom_get_default_pad+0xf6>
    52ee:	2902      	cmp	r1, #2
    52f0:	d005      	beq.n	52fe <_sercom_get_default_pad+0xa2>
    52f2:	2903      	cmp	r1, #3
    52f4:	d005      	beq.n	5302 <_sercom_get_default_pad+0xa6>
	return 0;
    52f6:	2000      	movs	r0, #0
    52f8:	e7be      	b.n	5278 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    52fa:	4828      	ldr	r0, [pc, #160]	; (539c <_sercom_get_default_pad+0x140>)
    52fc:	e7bc      	b.n	5278 <_sercom_get_default_pad+0x1c>
    52fe:	4828      	ldr	r0, [pc, #160]	; (53a0 <_sercom_get_default_pad+0x144>)
    5300:	e7ba      	b.n	5278 <_sercom_get_default_pad+0x1c>
    5302:	4828      	ldr	r0, [pc, #160]	; (53a4 <_sercom_get_default_pad+0x148>)
    5304:	e7b8      	b.n	5278 <_sercom_get_default_pad+0x1c>
    5306:	2901      	cmp	r1, #1
    5308:	d007      	beq.n	531a <_sercom_get_default_pad+0xbe>
    530a:	2900      	cmp	r1, #0
    530c:	d023      	beq.n	5356 <_sercom_get_default_pad+0xfa>
    530e:	2902      	cmp	r1, #2
    5310:	d005      	beq.n	531e <_sercom_get_default_pad+0xc2>
    5312:	2903      	cmp	r1, #3
    5314:	d005      	beq.n	5322 <_sercom_get_default_pad+0xc6>
	return 0;
    5316:	2000      	movs	r0, #0
    5318:	e7ae      	b.n	5278 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    531a:	4823      	ldr	r0, [pc, #140]	; (53a8 <_sercom_get_default_pad+0x14c>)
    531c:	e7ac      	b.n	5278 <_sercom_get_default_pad+0x1c>
    531e:	4823      	ldr	r0, [pc, #140]	; (53ac <_sercom_get_default_pad+0x150>)
    5320:	e7aa      	b.n	5278 <_sercom_get_default_pad+0x1c>
    5322:	4823      	ldr	r0, [pc, #140]	; (53b0 <_sercom_get_default_pad+0x154>)
    5324:	e7a8      	b.n	5278 <_sercom_get_default_pad+0x1c>
    5326:	2901      	cmp	r1, #1
    5328:	d007      	beq.n	533a <_sercom_get_default_pad+0xde>
    532a:	2900      	cmp	r1, #0
    532c:	d015      	beq.n	535a <_sercom_get_default_pad+0xfe>
    532e:	2902      	cmp	r1, #2
    5330:	d005      	beq.n	533e <_sercom_get_default_pad+0xe2>
    5332:	2903      	cmp	r1, #3
    5334:	d005      	beq.n	5342 <_sercom_get_default_pad+0xe6>
	return 0;
    5336:	2000      	movs	r0, #0
    5338:	e79e      	b.n	5278 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    533a:	481e      	ldr	r0, [pc, #120]	; (53b4 <_sercom_get_default_pad+0x158>)
    533c:	e79c      	b.n	5278 <_sercom_get_default_pad+0x1c>
    533e:	481e      	ldr	r0, [pc, #120]	; (53b8 <_sercom_get_default_pad+0x15c>)
    5340:	e79a      	b.n	5278 <_sercom_get_default_pad+0x1c>
    5342:	481e      	ldr	r0, [pc, #120]	; (53bc <_sercom_get_default_pad+0x160>)
    5344:	e798      	b.n	5278 <_sercom_get_default_pad+0x1c>
    5346:	481e      	ldr	r0, [pc, #120]	; (53c0 <_sercom_get_default_pad+0x164>)
    5348:	e796      	b.n	5278 <_sercom_get_default_pad+0x1c>
    534a:	2003      	movs	r0, #3
    534c:	e794      	b.n	5278 <_sercom_get_default_pad+0x1c>
    534e:	481d      	ldr	r0, [pc, #116]	; (53c4 <_sercom_get_default_pad+0x168>)
    5350:	e792      	b.n	5278 <_sercom_get_default_pad+0x1c>
    5352:	481d      	ldr	r0, [pc, #116]	; (53c8 <_sercom_get_default_pad+0x16c>)
    5354:	e790      	b.n	5278 <_sercom_get_default_pad+0x1c>
    5356:	481d      	ldr	r0, [pc, #116]	; (53cc <_sercom_get_default_pad+0x170>)
    5358:	e78e      	b.n	5278 <_sercom_get_default_pad+0x1c>
    535a:	481d      	ldr	r0, [pc, #116]	; (53d0 <_sercom_get_default_pad+0x174>)
    535c:	e78c      	b.n	5278 <_sercom_get_default_pad+0x1c>
    535e:	46c0      	nop			; (mov r8, r8)
    5360:	42001000 	.word	0x42001000
    5364:	42001800 	.word	0x42001800
    5368:	42001c00 	.word	0x42001c00
    536c:	42001400 	.word	0x42001400
    5370:	42000800 	.word	0x42000800
    5374:	42000c00 	.word	0x42000c00
    5378:	00050003 	.word	0x00050003
    537c:	00060003 	.word	0x00060003
    5380:	00070003 	.word	0x00070003
    5384:	00010003 	.word	0x00010003
    5388:	001e0003 	.word	0x001e0003
    538c:	001f0003 	.word	0x001f0003
    5390:	00090003 	.word	0x00090003
    5394:	000a0003 	.word	0x000a0003
    5398:	000b0003 	.word	0x000b0003
    539c:	00110003 	.word	0x00110003
    53a0:	00120003 	.word	0x00120003
    53a4:	00130003 	.word	0x00130003
    53a8:	000d0003 	.word	0x000d0003
    53ac:	000e0003 	.word	0x000e0003
    53b0:	000f0003 	.word	0x000f0003
    53b4:	00170003 	.word	0x00170003
    53b8:	00180003 	.word	0x00180003
    53bc:	00190003 	.word	0x00190003
    53c0:	00040003 	.word	0x00040003
    53c4:	00080003 	.word	0x00080003
    53c8:	00100003 	.word	0x00100003
    53cc:	000c0003 	.word	0x000c0003
    53d0:	00160003 	.word	0x00160003

000053d4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    53d4:	b530      	push	{r4, r5, lr}
    53d6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    53d8:	4b0b      	ldr	r3, [pc, #44]	; (5408 <_sercom_get_sercom_inst_index+0x34>)
    53da:	466a      	mov	r2, sp
    53dc:	cb32      	ldmia	r3!, {r1, r4, r5}
    53de:	c232      	stmia	r2!, {r1, r4, r5}
    53e0:	cb32      	ldmia	r3!, {r1, r4, r5}
    53e2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    53e4:	9b00      	ldr	r3, [sp, #0]
    53e6:	4283      	cmp	r3, r0
    53e8:	d00b      	beq.n	5402 <_sercom_get_sercom_inst_index+0x2e>
    53ea:	2301      	movs	r3, #1
    53ec:	009a      	lsls	r2, r3, #2
    53ee:	4669      	mov	r1, sp
    53f0:	5852      	ldr	r2, [r2, r1]
    53f2:	4282      	cmp	r2, r0
    53f4:	d006      	beq.n	5404 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    53f6:	3301      	adds	r3, #1
    53f8:	2b06      	cmp	r3, #6
    53fa:	d1f7      	bne.n	53ec <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    53fc:	2000      	movs	r0, #0
}
    53fe:	b007      	add	sp, #28
    5400:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5402:	2300      	movs	r3, #0
			return i;
    5404:	b2d8      	uxtb	r0, r3
    5406:	e7fa      	b.n	53fe <_sercom_get_sercom_inst_index+0x2a>
    5408:	00008474 	.word	0x00008474

0000540c <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    540c:	b570      	push	{r4, r5, r6, lr}
    540e:	b082      	sub	sp, #8
    5410:	0006      	movs	r6, r0
    5412:	000d      	movs	r5, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    5414:	2200      	movs	r2, #0
    5416:	466b      	mov	r3, sp
    5418:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    541a:	6804      	ldr	r4, [r0, #0]
	return (spi_module->SYNCBUSY.reg);
    541c:	69e3      	ldr	r3, [r4, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    541e:	2b00      	cmp	r3, #0
    5420:	d1fc      	bne.n	541c <spi_set_baudrate+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    5422:	338f      	adds	r3, #143	; 0x8f
    5424:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    5426:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5428:	6823      	ldr	r3, [r4, #0]
    542a:	2202      	movs	r2, #2
    542c:	4393      	bics	r3, r2
    542e:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5430:	6830      	ldr	r0, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    5432:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    5434:	2b00      	cmp	r3, #0
    5436:	d1fc      	bne.n	5432 <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5438:	4b12      	ldr	r3, [pc, #72]	; (5484 <spi_set_baudrate+0x78>)
    543a:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    543c:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    543e:	b2c0      	uxtb	r0, r0
    5440:	4b11      	ldr	r3, [pc, #68]	; (5488 <spi_set_baudrate+0x7c>)
    5442:	4798      	blx	r3
    5444:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    5446:	466b      	mov	r3, sp
    5448:	1d9a      	adds	r2, r3, #6
    544a:	0028      	movs	r0, r5
    544c:	4b0f      	ldr	r3, [pc, #60]	; (548c <spi_set_baudrate+0x80>)
    544e:	4798      	blx	r3
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    5450:	2800      	cmp	r0, #0
    5452:	d002      	beq.n	545a <spi_set_baudrate+0x4e>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    5454:	2017      	movs	r0, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    5456:	b002      	add	sp, #8
    5458:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    545a:	466b      	mov	r3, sp
    545c:	3306      	adds	r3, #6
    545e:	781b      	ldrb	r3, [r3, #0]
    5460:	7323      	strb	r3, [r4, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5462:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    5464:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    5466:	2a00      	cmp	r2, #0
    5468:	d1fc      	bne.n	5464 <spi_set_baudrate+0x58>
    546a:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    546c:	2a00      	cmp	r2, #0
    546e:	d1fc      	bne.n	546a <spi_set_baudrate+0x5e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5470:	681a      	ldr	r2, [r3, #0]
    5472:	2102      	movs	r1, #2
    5474:	430a      	orrs	r2, r1
    5476:	601a      	str	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5478:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    547a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    547c:	2b00      	cmp	r3, #0
    547e:	d1fc      	bne.n	547a <spi_set_baudrate+0x6e>
    5480:	e7e9      	b.n	5456 <spi_set_baudrate+0x4a>
    5482:	46c0      	nop			; (mov r8, r8)
    5484:	000053d5 	.word	0x000053d5
    5488:	00006911 	.word	0x00006911
    548c:	00005153 	.word	0x00005153

00005490 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    5490:	b5f0      	push	{r4, r5, r6, r7, lr}
    5492:	46d6      	mov	lr, sl
    5494:	464f      	mov	r7, r9
    5496:	b580      	push	{r7, lr}
    5498:	b08b      	sub	sp, #44	; 0x2c
    549a:	4681      	mov	r9, r0
    549c:	000f      	movs	r7, r1
    549e:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    54a0:	0003      	movs	r3, r0
    54a2:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    54a4:	680b      	ldr	r3, [r1, #0]
    54a6:	079b      	lsls	r3, r3, #30
    54a8:	d409      	bmi.n	54be <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    54aa:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    54ac:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    54ae:	07db      	lsls	r3, r3, #31
    54b0:	d400      	bmi.n	54b4 <spi_init+0x24>
    54b2:	e0b1      	b.n	5618 <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    54b4:	b00b      	add	sp, #44	; 0x2c
    54b6:	bc0c      	pop	{r2, r3}
    54b8:	4691      	mov	r9, r2
    54ba:	469a      	mov	sl, r3
    54bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    54be:	6a93      	ldr	r3, [r2, #40]	; 0x28
    54c0:	9305      	str	r3, [sp, #20]
    54c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    54c4:	9306      	str	r3, [sp, #24]
    54c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    54c8:	9307      	str	r3, [sp, #28]
    54ca:	6b53      	ldr	r3, [r2, #52]	; 0x34
    54cc:	9308      	str	r3, [sp, #32]
    54ce:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    54d0:	ab05      	add	r3, sp, #20
    54d2:	9301      	str	r3, [sp, #4]
    54d4:	e00a      	b.n	54ec <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    54d6:	0038      	movs	r0, r7
    54d8:	4baf      	ldr	r3, [pc, #700]	; (5798 <spi_init+0x308>)
    54da:	4798      	blx	r3
    54dc:	e00c      	b.n	54f8 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    54de:	230f      	movs	r3, #15
    54e0:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    54e2:	4281      	cmp	r1, r0
    54e4:	d12d      	bne.n	5542 <spi_init+0xb2>
    54e6:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    54e8:	2e04      	cmp	r6, #4
    54ea:	d02f      	beq.n	554c <spi_init+0xbc>
    54ec:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    54ee:	00b3      	lsls	r3, r6, #2
    54f0:	9a01      	ldr	r2, [sp, #4]
    54f2:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    54f4:	2800      	cmp	r0, #0
    54f6:	d0ee      	beq.n	54d6 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    54f8:	1c43      	adds	r3, r0, #1
    54fa:	d0f4      	beq.n	54e6 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    54fc:	0401      	lsls	r1, r0, #16
    54fe:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    5500:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    5502:	b2c3      	uxtb	r3, r0
    5504:	469c      	mov	ip, r3
		return NULL;
    5506:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5508:	0602      	lsls	r2, r0, #24
    550a:	d405      	bmi.n	5518 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    550c:	4663      	mov	r3, ip
    550e:	095b      	lsrs	r3, r3, #5
    5510:	01db      	lsls	r3, r3, #7
    5512:	4aa2      	ldr	r2, [pc, #648]	; (579c <spi_init+0x30c>)
    5514:	4692      	mov	sl, r2
    5516:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    5518:	221f      	movs	r2, #31
    551a:	4660      	mov	r0, ip
    551c:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    551e:	1898      	adds	r0, r3, r2
    5520:	3040      	adds	r0, #64	; 0x40
    5522:	7800      	ldrb	r0, [r0, #0]
    5524:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    5526:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5528:	4655      	mov	r5, sl
    552a:	07ed      	lsls	r5, r5, #31
    552c:	d5d9      	bpl.n	54e2 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    552e:	0852      	lsrs	r2, r2, #1
    5530:	189b      	adds	r3, r3, r2
    5532:	3330      	adds	r3, #48	; 0x30
    5534:	7818      	ldrb	r0, [r3, #0]
    5536:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    5538:	4663      	mov	r3, ip
    553a:	07db      	lsls	r3, r3, #31
    553c:	d5cf      	bpl.n	54de <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    553e:	0900      	lsrs	r0, r0, #4
    5540:	e7cf      	b.n	54e2 <spi_init+0x52>
			module->hw = NULL;
    5542:	2300      	movs	r3, #0
    5544:	464a      	mov	r2, r9
    5546:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    5548:	201c      	movs	r0, #28
    554a:	e7b3      	b.n	54b4 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    554c:	2013      	movs	r0, #19
    554e:	4b94      	ldr	r3, [pc, #592]	; (57a0 <spi_init+0x310>)
    5550:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5552:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    5554:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    5556:	2a01      	cmp	r2, #1
    5558:	d016      	beq.n	5588 <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
    555a:	7821      	ldrb	r1, [r4, #0]
    555c:	2900      	cmp	r1, #0
    555e:	d127      	bne.n	55b0 <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
    5560:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5562:	7fe2      	ldrb	r2, [r4, #31]
    5564:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5566:	7fa0      	ldrb	r0, [r4, #30]
    5568:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    556a:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    556c:	429a      	cmp	r2, r3
    556e:	d1a1      	bne.n	54b4 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    5570:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    5572:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    5574:	3004      	adds	r0, #4
    5576:	5c20      	ldrb	r0, [r4, r0]
    5578:	2800      	cmp	r0, #0
    557a:	d001      	beq.n	5580 <spi_init+0xf0>
    557c:	2040      	movs	r0, #64	; 0x40
    557e:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    5580:	2008      	movs	r0, #8
    5582:	4303      	orrs	r3, r0
    5584:	431d      	orrs	r5, r3
    5586:	e014      	b.n	55b2 <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
    5588:	aa04      	add	r2, sp, #16
    558a:	0001      	movs	r1, r0
    558c:	69a0      	ldr	r0, [r4, #24]
    558e:	4b85      	ldr	r3, [pc, #532]	; (57a4 <spi_init+0x314>)
    5590:	4798      	blx	r3
    5592:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5594:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5596:	2b00      	cmp	r3, #0
    5598:	d000      	beq.n	559c <spi_init+0x10c>
    559a:	e78b      	b.n	54b4 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    559c:	7b3b      	ldrb	r3, [r7, #12]
    559e:	b2db      	uxtb	r3, r3
    55a0:	aa04      	add	r2, sp, #16
    55a2:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    55a4:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    55a6:	429a      	cmp	r2, r3
    55a8:	d000      	beq.n	55ac <spi_init+0x11c>
    55aa:	e783      	b.n	54b4 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    55ac:	350c      	adds	r5, #12
    55ae:	e7d4      	b.n	555a <spi_init+0xca>
	uint32_t ctrlb = 0;
    55b0:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    55b2:	6863      	ldr	r3, [r4, #4]
    55b4:	68a0      	ldr	r0, [r4, #8]
    55b6:	4303      	orrs	r3, r0
    55b8:	68e0      	ldr	r0, [r4, #12]
    55ba:	4303      	orrs	r3, r0
    55bc:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    55be:	7c20      	ldrb	r0, [r4, #16]
    55c0:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    55c2:	7c60      	ldrb	r0, [r4, #17]
    55c4:	2800      	cmp	r0, #0
    55c6:	d001      	beq.n	55cc <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    55c8:	2080      	movs	r0, #128	; 0x80
    55ca:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    55cc:	7ca0      	ldrb	r0, [r4, #18]
    55ce:	2800      	cmp	r0, #0
    55d0:	d002      	beq.n	55d8 <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    55d2:	2080      	movs	r0, #128	; 0x80
    55d4:	0280      	lsls	r0, r0, #10
    55d6:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    55d8:	7ce0      	ldrb	r0, [r4, #19]
    55da:	2800      	cmp	r0, #0
    55dc:	d002      	beq.n	55e4 <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    55de:	2080      	movs	r0, #128	; 0x80
    55e0:	0080      	lsls	r0, r0, #2
    55e2:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    55e4:	7d20      	ldrb	r0, [r4, #20]
    55e6:	2800      	cmp	r0, #0
    55e8:	d002      	beq.n	55f0 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    55ea:	2080      	movs	r0, #128	; 0x80
    55ec:	0180      	lsls	r0, r0, #6
    55ee:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    55f0:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    55f2:	2502      	movs	r5, #2
    55f4:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    55f6:	4283      	cmp	r3, r0
    55f8:	d004      	beq.n	5604 <spi_init+0x174>
	module->hw = NULL;
    55fa:	2300      	movs	r3, #0
    55fc:	464a      	mov	r2, r9
    55fe:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    5600:	201c      	movs	r0, #28
    5602:	e757      	b.n	54b4 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    5604:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    5606:	4293      	cmp	r3, r2
    5608:	d1f7      	bne.n	55fa <spi_init+0x16a>
		module->mode           = config->mode;
    560a:	464b      	mov	r3, r9
    560c:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
    560e:	7c23      	ldrb	r3, [r4, #16]
    5610:	464a      	mov	r2, r9
    5612:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    5614:	2000      	movs	r0, #0
    5616:	e74d      	b.n	54b4 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5618:	0008      	movs	r0, r1
    561a:	4b63      	ldr	r3, [pc, #396]	; (57a8 <spi_init+0x318>)
    561c:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    561e:	4a63      	ldr	r2, [pc, #396]	; (57ac <spi_init+0x31c>)
    5620:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5622:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5624:	2301      	movs	r3, #1
    5626:	40ab      	lsls	r3, r5
    5628:	430b      	orrs	r3, r1
    562a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    562c:	a909      	add	r1, sp, #36	; 0x24
    562e:	2624      	movs	r6, #36	; 0x24
    5630:	5da3      	ldrb	r3, [r4, r6]
    5632:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5634:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5636:	b2c5      	uxtb	r5, r0
    5638:	0028      	movs	r0, r5
    563a:	4b5d      	ldr	r3, [pc, #372]	; (57b0 <spi_init+0x320>)
    563c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    563e:	0028      	movs	r0, r5
    5640:	4b5c      	ldr	r3, [pc, #368]	; (57b4 <spi_init+0x324>)
    5642:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5644:	5da0      	ldrb	r0, [r4, r6]
    5646:	2100      	movs	r1, #0
    5648:	4b5b      	ldr	r3, [pc, #364]	; (57b8 <spi_init+0x328>)
    564a:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    564c:	7823      	ldrb	r3, [r4, #0]
    564e:	2b01      	cmp	r3, #1
    5650:	d020      	beq.n	5694 <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
    5652:	7823      	ldrb	r3, [r4, #0]
    5654:	2b00      	cmp	r3, #0
    5656:	d103      	bne.n	5660 <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    5658:	683b      	ldr	r3, [r7, #0]
    565a:	2208      	movs	r2, #8
    565c:	4313      	orrs	r3, r2
    565e:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5660:	464b      	mov	r3, r9
    5662:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5664:	ab04      	add	r3, sp, #16
    5666:	2280      	movs	r2, #128	; 0x80
    5668:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    566a:	2200      	movs	r2, #0
    566c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    566e:	2101      	movs	r1, #1
    5670:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    5672:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    5674:	7823      	ldrb	r3, [r4, #0]
    5676:	2b00      	cmp	r3, #0
    5678:	d101      	bne.n	567e <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    567a:	ab04      	add	r3, sp, #16
    567c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    567e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5680:	9305      	str	r3, [sp, #20]
    5682:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5684:	9306      	str	r3, [sp, #24]
    5686:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5688:	9307      	str	r3, [sp, #28]
    568a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    568c:	9308      	str	r3, [sp, #32]
    568e:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5690:	ad05      	add	r5, sp, #20
    5692:	e011      	b.n	56b8 <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5694:	683b      	ldr	r3, [r7, #0]
    5696:	220c      	movs	r2, #12
    5698:	4313      	orrs	r3, r2
    569a:	603b      	str	r3, [r7, #0]
    569c:	e7d9      	b.n	5652 <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    569e:	0030      	movs	r0, r6
    56a0:	4b3d      	ldr	r3, [pc, #244]	; (5798 <spi_init+0x308>)
    56a2:	4798      	blx	r3
    56a4:	e00d      	b.n	56c2 <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    56a6:	a904      	add	r1, sp, #16
    56a8:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    56aa:	0c00      	lsrs	r0, r0, #16
    56ac:	b2c0      	uxtb	r0, r0
    56ae:	4b43      	ldr	r3, [pc, #268]	; (57bc <spi_init+0x32c>)
    56b0:	4798      	blx	r3
    56b2:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    56b4:	2f04      	cmp	r7, #4
    56b6:	d007      	beq.n	56c8 <spi_init+0x238>
    56b8:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    56ba:	00bb      	lsls	r3, r7, #2
    56bc:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    56be:	2800      	cmp	r0, #0
    56c0:	d0ed      	beq.n	569e <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
    56c2:	1c43      	adds	r3, r0, #1
    56c4:	d1ef      	bne.n	56a6 <spi_init+0x216>
    56c6:	e7f4      	b.n	56b2 <spi_init+0x222>
	module->mode             = config->mode;
    56c8:	7823      	ldrb	r3, [r4, #0]
    56ca:	464a      	mov	r2, r9
    56cc:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    56ce:	7c23      	ldrb	r3, [r4, #16]
    56d0:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    56d2:	7ca3      	ldrb	r3, [r4, #18]
    56d4:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    56d6:	7d23      	ldrb	r3, [r4, #20]
    56d8:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    56da:	2200      	movs	r2, #0
    56dc:	ab02      	add	r3, sp, #8
    56de:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    56e0:	7823      	ldrb	r3, [r4, #0]
    56e2:	2b01      	cmp	r3, #1
    56e4:	d012      	beq.n	570c <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
    56e6:	7823      	ldrb	r3, [r4, #0]
    56e8:	2b00      	cmp	r3, #0
    56ea:	d127      	bne.n	573c <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
    56ec:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    56ee:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    56f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    56f2:	7fe1      	ldrb	r1, [r4, #31]
    56f4:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    56f6:	7fa5      	ldrb	r5, [r4, #30]
    56f8:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    56fa:	4319      	orrs	r1, r3
    56fc:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    56fe:	2320      	movs	r3, #32
    5700:	5ce3      	ldrb	r3, [r4, r3]
    5702:	2b00      	cmp	r3, #0
    5704:	d01c      	beq.n	5740 <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    5706:	2340      	movs	r3, #64	; 0x40
    5708:	431a      	orrs	r2, r3
    570a:	e019      	b.n	5740 <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    570c:	464b      	mov	r3, r9
    570e:	6818      	ldr	r0, [r3, #0]
    5710:	4b25      	ldr	r3, [pc, #148]	; (57a8 <spi_init+0x318>)
    5712:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5714:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5716:	b2c0      	uxtb	r0, r0
    5718:	4b21      	ldr	r3, [pc, #132]	; (57a0 <spi_init+0x310>)
    571a:	4798      	blx	r3
    571c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    571e:	ab02      	add	r3, sp, #8
    5720:	1d9a      	adds	r2, r3, #6
    5722:	69a0      	ldr	r0, [r4, #24]
    5724:	4b1f      	ldr	r3, [pc, #124]	; (57a4 <spi_init+0x314>)
    5726:	4798      	blx	r3
    5728:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    572a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    572c:	2b00      	cmp	r3, #0
    572e:	d000      	beq.n	5732 <spi_init+0x2a2>
    5730:	e6c0      	b.n	54b4 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    5732:	ab02      	add	r3, sp, #8
    5734:	3306      	adds	r3, #6
    5736:	781b      	ldrb	r3, [r3, #0]
    5738:	7333      	strb	r3, [r6, #12]
    573a:	e7d4      	b.n	56e6 <spi_init+0x256>
	uint32_t ctrlb = 0;
    573c:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    573e:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    5740:	6863      	ldr	r3, [r4, #4]
    5742:	68a1      	ldr	r1, [r4, #8]
    5744:	430b      	orrs	r3, r1
    5746:	68e1      	ldr	r1, [r4, #12]
    5748:	430b      	orrs	r3, r1
    574a:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    574c:	7c21      	ldrb	r1, [r4, #16]
    574e:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    5750:	7c61      	ldrb	r1, [r4, #17]
    5752:	2900      	cmp	r1, #0
    5754:	d103      	bne.n	575e <spi_init+0x2ce>
    5756:	491a      	ldr	r1, [pc, #104]	; (57c0 <spi_init+0x330>)
    5758:	7889      	ldrb	r1, [r1, #2]
    575a:	0789      	lsls	r1, r1, #30
    575c:	d501      	bpl.n	5762 <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    575e:	2180      	movs	r1, #128	; 0x80
    5760:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    5762:	7ca1      	ldrb	r1, [r4, #18]
    5764:	2900      	cmp	r1, #0
    5766:	d002      	beq.n	576e <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5768:	2180      	movs	r1, #128	; 0x80
    576a:	0289      	lsls	r1, r1, #10
    576c:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    576e:	7ce1      	ldrb	r1, [r4, #19]
    5770:	2900      	cmp	r1, #0
    5772:	d002      	beq.n	577a <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5774:	2180      	movs	r1, #128	; 0x80
    5776:	0089      	lsls	r1, r1, #2
    5778:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    577a:	7d21      	ldrb	r1, [r4, #20]
    577c:	2900      	cmp	r1, #0
    577e:	d002      	beq.n	5786 <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5780:	2180      	movs	r1, #128	; 0x80
    5782:	0189      	lsls	r1, r1, #6
    5784:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    5786:	6831      	ldr	r1, [r6, #0]
    5788:	430b      	orrs	r3, r1
    578a:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    578c:	6873      	ldr	r3, [r6, #4]
    578e:	431a      	orrs	r2, r3
    5790:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    5792:	2000      	movs	r0, #0
    5794:	e68e      	b.n	54b4 <spi_init+0x24>
    5796:	46c0      	nop			; (mov r8, r8)
    5798:	0000525d 	.word	0x0000525d
    579c:	41004400 	.word	0x41004400
    57a0:	00006911 	.word	0x00006911
    57a4:	00005153 	.word	0x00005153
    57a8:	000053d5 	.word	0x000053d5
    57ac:	40000400 	.word	0x40000400
    57b0:	000068f5 	.word	0x000068f5
    57b4:	00006869 	.word	0x00006869
    57b8:	00005211 	.word	0x00005211
    57bc:	000069ed 	.word	0x000069ed
    57c0:	41002000 	.word	0x41002000

000057c4 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    57c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    57c6:	46d6      	mov	lr, sl
    57c8:	464f      	mov	r7, r9
    57ca:	4646      	mov	r6, r8
    57cc:	b5c0      	push	{r6, r7, lr}
    57ce:	b082      	sub	sp, #8
    57d0:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    57d2:	2717      	movs	r7, #23
	if (length == 0) {
    57d4:	2a00      	cmp	r2, #0
    57d6:	d073      	beq.n	58c0 <spi_read_buffer_wait+0xfc>
	}

	if (!(module->receiver_enabled)) {
    57d8:	79c1      	ldrb	r1, [r0, #7]
		return STATUS_ERR_DENIED;
    57da:	3705      	adds	r7, #5
	if (!(module->receiver_enabled)) {
    57dc:	2900      	cmp	r1, #0
    57de:	d06f      	beq.n	58c0 <spi_read_buffer_wait+0xfc>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    57e0:	7941      	ldrb	r1, [r0, #5]
    57e2:	2900      	cmp	r1, #0
    57e4:	d103      	bne.n	57ee <spi_read_buffer_wait+0x2a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    57e6:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    57e8:	7e0c      	ldrb	r4, [r1, #24]
    57ea:	07a4      	lsls	r4, r4, #30
    57ec:	d40b      	bmi.n	5806 <spi_read_buffer_wait+0x42>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    57ee:	3a01      	subs	r2, #1
    57f0:	b294      	uxth	r4, r2
    57f2:	2500      	movs	r5, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    57f4:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    57f6:	2102      	movs	r1, #2
    57f8:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    57fa:	2601      	movs	r6, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    57fc:	05db      	lsls	r3, r3, #23
    57fe:	0ddb      	lsrs	r3, r3, #23
    5800:	469a      	mov	sl, r3
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    5802:	46c4      	mov	ip, r8
    5804:	e037      	b.n	5876 <spi_read_buffer_wait+0xb2>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5806:	2402      	movs	r4, #2
    5808:	760c      	strb	r4, [r1, #24]
    580a:	e7f0      	b.n	57ee <spi_read_buffer_wait+0x2a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    580c:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    580e:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    5810:	4233      	tst	r3, r6
    5812:	d0fc      	beq.n	580e <spi_read_buffer_wait+0x4a>
    5814:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    5816:	4233      	tst	r3, r6
    5818:	d009      	beq.n	582e <spi_read_buffer_wait+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    581a:	4653      	mov	r3, sl
    581c:	628b      	str	r3, [r1, #40]	; 0x28
    581e:	e02d      	b.n	587c <spi_read_buffer_wait+0xb8>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5820:	7e3b      	ldrb	r3, [r7, #24]
			if (spi_is_write_complete(module)) {
    5822:	4649      	mov	r1, r9
    5824:	420b      	tst	r3, r1
    5826:	d138      	bne.n	589a <spi_read_buffer_wait+0xd6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5828:	7e3b      	ldrb	r3, [r7, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    582a:	4213      	tst	r3, r2
    582c:	d045      	beq.n	58ba <spi_read_buffer_wait+0xf6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    582e:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5830:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    5832:	4213      	tst	r3, r2
    5834:	d0fc      	beq.n	5830 <spi_read_buffer_wait+0x6c>
    5836:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    5838:	4213      	tst	r3, r2
    583a:	d040      	beq.n	58be <spi_read_buffer_wait+0xfa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    583c:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    583e:	2700      	movs	r7, #0
    5840:	9701      	str	r7, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5842:	4213      	tst	r3, r2
    5844:	d002      	beq.n	584c <spi_read_buffer_wait+0x88>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5846:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    5848:	231e      	movs	r3, #30
    584a:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    584c:	7983      	ldrb	r3, [r0, #6]
    584e:	2b01      	cmp	r3, #1
    5850:	d027      	beq.n	58a2 <spi_read_buffer_wait+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5852:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    5854:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    5856:	9901      	ldr	r1, [sp, #4]
    5858:	2900      	cmp	r1, #0
    585a:	d138      	bne.n	58ce <spi_read_buffer_wait+0x10a>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    585c:	1c6f      	adds	r7, r5, #1
    585e:	b2bf      	uxth	r7, r7
    5860:	4661      	mov	r1, ip
    5862:	554b      	strb	r3, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5864:	7981      	ldrb	r1, [r0, #6]
    5866:	2901      	cmp	r1, #1
    5868:	d01f      	beq.n	58aa <spi_read_buffer_wait+0xe6>
		rx_data[rx_pos++] = received_data;
    586a:	003d      	movs	r5, r7
	while (length--) {
    586c:	3c01      	subs	r4, #1
    586e:	b2a4      	uxth	r4, r4
    5870:	4918      	ldr	r1, [pc, #96]	; (58d4 <spi_read_buffer_wait+0x110>)
    5872:	428c      	cmp	r4, r1
    5874:	d01f      	beq.n	58b6 <spi_read_buffer_wait+0xf2>
		if (module->mode == SPI_MODE_MASTER) {
    5876:	7943      	ldrb	r3, [r0, #5]
    5878:	2b01      	cmp	r3, #1
    587a:	d0c7      	beq.n	580c <spi_read_buffer_wait+0x48>
		if (module->mode == SPI_MODE_SLAVE) {
    587c:	7943      	ldrb	r3, [r0, #5]
    587e:	2b00      	cmp	r3, #0
    5880:	d1d5      	bne.n	582e <spi_read_buffer_wait+0x6a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5882:	6807      	ldr	r7, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5884:	7e3b      	ldrb	r3, [r7, #24]
				if (spi_is_ready_to_read(module)) {
    5886:	4213      	tst	r3, r2
    5888:	d1ca      	bne.n	5820 <spi_read_buffer_wait+0x5c>
    588a:	4b13      	ldr	r3, [pc, #76]	; (58d8 <spi_read_buffer_wait+0x114>)
    588c:	7e39      	ldrb	r1, [r7, #24]
    588e:	4211      	tst	r1, r2
    5890:	d1c6      	bne.n	5820 <spi_read_buffer_wait+0x5c>
    5892:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5894:	2b00      	cmp	r3, #0
    5896:	d1f9      	bne.n	588c <spi_read_buffer_wait+0xc8>
    5898:	e7c2      	b.n	5820 <spi_read_buffer_wait+0x5c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    589a:	2302      	movs	r3, #2
    589c:	763b      	strb	r3, [r7, #24]
				return STATUS_ABORTED;
    589e:	2704      	movs	r7, #4
    58a0:	e00e      	b.n	58c0 <spi_read_buffer_wait+0xfc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    58a2:	6a89      	ldr	r1, [r1, #40]	; 0x28
    58a4:	05c9      	lsls	r1, r1, #23
    58a6:	0dcb      	lsrs	r3, r1, #23
    58a8:	e7d5      	b.n	5856 <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
    58aa:	3502      	adds	r5, #2
    58ac:	b2ad      	uxth	r5, r5
    58ae:	0a19      	lsrs	r1, r3, #8
    58b0:	4663      	mov	r3, ip
    58b2:	55d9      	strb	r1, [r3, r7]
    58b4:	e7da      	b.n	586c <spi_read_buffer_wait+0xa8>
    58b6:	9f01      	ldr	r7, [sp, #4]
    58b8:	e002      	b.n	58c0 <spi_read_buffer_wait+0xfc>
				return STATUS_ERR_TIMEOUT;
    58ba:	2712      	movs	r7, #18
    58bc:	e000      	b.n	58c0 <spi_read_buffer_wait+0xfc>
		return STATUS_ERR_IO;
    58be:	2710      	movs	r7, #16
		}
	}

	return STATUS_OK;
}
    58c0:	0038      	movs	r0, r7
    58c2:	b002      	add	sp, #8
    58c4:	bc1c      	pop	{r2, r3, r4}
    58c6:	4690      	mov	r8, r2
    58c8:	4699      	mov	r9, r3
    58ca:	46a2      	mov	sl, r4
    58cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58ce:	9f01      	ldr	r7, [sp, #4]
    58d0:	e7f6      	b.n	58c0 <spi_read_buffer_wait+0xfc>
    58d2:	46c0      	nop			; (mov r8, r8)
    58d4:	0000ffff 	.word	0x0000ffff
    58d8:	00002710 	.word	0x00002710

000058dc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    58dc:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    58de:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    58e0:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    58e2:	2c01      	cmp	r4, #1
    58e4:	d001      	beq.n	58ea <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    58e6:	0018      	movs	r0, r3
    58e8:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    58ea:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    58ec:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    58ee:	2c00      	cmp	r4, #0
    58f0:	d1f9      	bne.n	58e6 <spi_select_slave+0xa>
		if (select) {
    58f2:	2a00      	cmp	r2, #0
    58f4:	d058      	beq.n	59a8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    58f6:	784b      	ldrb	r3, [r1, #1]
    58f8:	2b00      	cmp	r3, #0
    58fa:	d044      	beq.n	5986 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    58fc:	6803      	ldr	r3, [r0, #0]
    58fe:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    5900:	07db      	lsls	r3, r3, #31
    5902:	d410      	bmi.n	5926 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    5904:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5906:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5908:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    590a:	2900      	cmp	r1, #0
    590c:	d104      	bne.n	5918 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    590e:	0953      	lsrs	r3, r2, #5
    5910:	01db      	lsls	r3, r3, #7
    5912:	492e      	ldr	r1, [pc, #184]	; (59cc <spi_select_slave+0xf0>)
    5914:	468c      	mov	ip, r1
    5916:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5918:	211f      	movs	r1, #31
    591a:	4011      	ands	r1, r2
    591c:	2201      	movs	r2, #1
    591e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5920:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    5922:	2305      	movs	r3, #5
    5924:	e7df      	b.n	58e6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5926:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5928:	09d4      	lsrs	r4, r2, #7
		return NULL;
    592a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    592c:	2c00      	cmp	r4, #0
    592e:	d104      	bne.n	593a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    5930:	0953      	lsrs	r3, r2, #5
    5932:	01db      	lsls	r3, r3, #7
    5934:	4c25      	ldr	r4, [pc, #148]	; (59cc <spi_select_slave+0xf0>)
    5936:	46a4      	mov	ip, r4
    5938:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    593a:	241f      	movs	r4, #31
    593c:	4014      	ands	r4, r2
    593e:	2201      	movs	r2, #1
    5940:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    5942:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5944:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5946:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5948:	07d2      	lsls	r2, r2, #31
    594a:	d501      	bpl.n	5950 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    594c:	788a      	ldrb	r2, [r1, #2]
    594e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    5950:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    5952:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    5954:	2a00      	cmp	r2, #0
    5956:	d1c6      	bne.n	58e6 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5958:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    595a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    595c:	7e13      	ldrb	r3, [r2, #24]
    595e:	420b      	tst	r3, r1
    5960:	d0fc      	beq.n	595c <spi_select_slave+0x80>
    5962:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    5964:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    5966:	0749      	lsls	r1, r1, #29
    5968:	d5bd      	bpl.n	58e6 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    596a:	8b53      	ldrh	r3, [r2, #26]
    596c:	075b      	lsls	r3, r3, #29
    596e:	d501      	bpl.n	5974 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5970:	2304      	movs	r3, #4
    5972:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5974:	7983      	ldrb	r3, [r0, #6]
    5976:	2b01      	cmp	r3, #1
    5978:	d002      	beq.n	5980 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    597a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    597c:	2300      	movs	r3, #0
    597e:	e7b2      	b.n	58e6 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5980:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5982:	2300      	movs	r3, #0
    5984:	e7af      	b.n	58e6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5986:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5988:	09d1      	lsrs	r1, r2, #7
		return NULL;
    598a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    598c:	2900      	cmp	r1, #0
    598e:	d104      	bne.n	599a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5990:	0953      	lsrs	r3, r2, #5
    5992:	01db      	lsls	r3, r3, #7
    5994:	490d      	ldr	r1, [pc, #52]	; (59cc <spi_select_slave+0xf0>)
    5996:	468c      	mov	ip, r1
    5998:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    599a:	211f      	movs	r1, #31
    599c:	4011      	ands	r1, r2
    599e:	2201      	movs	r2, #1
    59a0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    59a2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    59a4:	2300      	movs	r3, #0
    59a6:	e79e      	b.n	58e6 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    59a8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    59aa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    59ac:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    59ae:	2900      	cmp	r1, #0
    59b0:	d104      	bne.n	59bc <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    59b2:	0953      	lsrs	r3, r2, #5
    59b4:	01db      	lsls	r3, r3, #7
    59b6:	4905      	ldr	r1, [pc, #20]	; (59cc <spi_select_slave+0xf0>)
    59b8:	468c      	mov	ip, r1
    59ba:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    59bc:	211f      	movs	r1, #31
    59be:	4011      	ands	r1, r2
    59c0:	2201      	movs	r2, #1
    59c2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    59c4:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    59c6:	2300      	movs	r3, #0
    59c8:	e78d      	b.n	58e6 <spi_select_slave+0xa>
    59ca:	46c0      	nop			; (mov r8, r8)
    59cc:	41004400 	.word	0x41004400

000059d0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    59d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    59d2:	46de      	mov	lr, fp
    59d4:	4657      	mov	r7, sl
    59d6:	464e      	mov	r6, r9
    59d8:	4645      	mov	r5, r8
    59da:	b5e0      	push	{r5, r6, r7, lr}
    59dc:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    59de:	2317      	movs	r3, #23
	if (length == 0) {
    59e0:	2a00      	cmp	r2, #0
    59e2:	d107      	bne.n	59f4 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    59e4:	0018      	movs	r0, r3
    59e6:	b003      	add	sp, #12
    59e8:	bc3c      	pop	{r2, r3, r4, r5}
    59ea:	4690      	mov	r8, r2
    59ec:	4699      	mov	r9, r3
    59ee:	46a2      	mov	sl, r4
    59f0:	46ab      	mov	fp, r5
    59f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    59f4:	7943      	ldrb	r3, [r0, #5]
    59f6:	2b00      	cmp	r3, #0
    59f8:	d103      	bne.n	5a02 <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    59fa:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    59fc:	7e1c      	ldrb	r4, [r3, #24]
    59fe:	07a4      	lsls	r4, r4, #30
    5a00:	d40a      	bmi.n	5a18 <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
    5a02:	4693      	mov	fp, r2
    5a04:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    5a06:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    5a08:	2502      	movs	r5, #2
    5a0a:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    5a0c:	3502      	adds	r5, #2
    5a0e:	46a8      	mov	r8, r5
    5a10:	3a01      	subs	r2, #1
    5a12:	b292      	uxth	r2, r2
    5a14:	468a      	mov	sl, r1
    5a16:	e023      	b.n	5a60 <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5a18:	2402      	movs	r4, #2
    5a1a:	761c      	strb	r4, [r3, #24]
    5a1c:	e7f1      	b.n	5a02 <spi_write_buffer_wait+0x32>
    5a1e:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    5a20:	4661      	mov	r1, ip
    5a22:	420d      	tst	r5, r1
    5a24:	d12e      	bne.n	5a84 <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5a26:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    5a28:	421d      	tst	r5, r3
    5a2a:	d100      	bne.n	5a2e <spi_write_buffer_wait+0x5e>
    5a2c:	e0c2      	b.n	5bb4 <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5a2e:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5a30:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    5a32:	421d      	tst	r5, r3
    5a34:	d0fc      	beq.n	5a30 <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
    5a36:	1c67      	adds	r7, r4, #1
    5a38:	b2bf      	uxth	r7, r7
    5a3a:	4651      	mov	r1, sl
    5a3c:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5a3e:	7981      	ldrb	r1, [r0, #6]
    5a40:	2901      	cmp	r1, #1
    5a42:	d023      	beq.n	5a8c <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    5a44:	b2ad      	uxth	r5, r5
    5a46:	003c      	movs	r4, r7
    5a48:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    5a4a:	421f      	tst	r7, r3
    5a4c:	d002      	beq.n	5a54 <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5a4e:	05ed      	lsls	r5, r5, #23
    5a50:	0ded      	lsrs	r5, r5, #23
    5a52:	62b5      	str	r5, [r6, #40]	; 0x28
    5a54:	1e55      	subs	r5, r2, #1
    5a56:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    5a58:	79c6      	ldrb	r6, [r0, #7]
    5a5a:	2e00      	cmp	r6, #0
    5a5c:	d11d      	bne.n	5a9a <spi_write_buffer_wait+0xca>
    5a5e:	002a      	movs	r2, r5
	while (length--) {
    5a60:	4d59      	ldr	r5, [pc, #356]	; (5bc8 <spi_write_buffer_wait+0x1f8>)
    5a62:	42aa      	cmp	r2, r5
    5a64:	d070      	beq.n	5b48 <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
    5a66:	7945      	ldrb	r5, [r0, #5]
    5a68:	2d00      	cmp	r5, #0
    5a6a:	d1e0      	bne.n	5a2e <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5a6c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5a6e:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    5a70:	421d      	tst	r5, r3
    5a72:	d1d4      	bne.n	5a1e <spi_write_buffer_wait+0x4e>
    5a74:	4d55      	ldr	r5, [pc, #340]	; (5bcc <spi_write_buffer_wait+0x1fc>)
    5a76:	7e37      	ldrb	r7, [r6, #24]
    5a78:	421f      	tst	r7, r3
    5a7a:	d1d0      	bne.n	5a1e <spi_write_buffer_wait+0x4e>
    5a7c:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5a7e:	2d00      	cmp	r5, #0
    5a80:	d1f9      	bne.n	5a76 <spi_write_buffer_wait+0xa6>
    5a82:	e7cc      	b.n	5a1e <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5a84:	2302      	movs	r3, #2
    5a86:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    5a88:	3302      	adds	r3, #2
    5a8a:	e7ab      	b.n	59e4 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    5a8c:	3402      	adds	r4, #2
    5a8e:	b2a4      	uxth	r4, r4
    5a90:	4651      	mov	r1, sl
    5a92:	5dcf      	ldrb	r7, [r1, r7]
    5a94:	023f      	lsls	r7, r7, #8
    5a96:	433d      	orrs	r5, r7
    5a98:	e7d6      	b.n	5a48 <spi_write_buffer_wait+0x78>
    5a9a:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    5a9c:	7945      	ldrb	r5, [r0, #5]
    5a9e:	2d00      	cmp	r5, #0
    5aa0:	d137      	bne.n	5b12 <spi_write_buffer_wait+0x142>
    5aa2:	4d4b      	ldr	r5, [pc, #300]	; (5bd0 <spi_write_buffer_wait+0x200>)
    5aa4:	9101      	str	r1, [sp, #4]
    5aa6:	e012      	b.n	5ace <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
    5aa8:	3402      	adds	r4, #2
    5aaa:	b2a4      	uxth	r4, r4
    5aac:	4649      	mov	r1, r9
    5aae:	9f01      	ldr	r7, [sp, #4]
    5ab0:	5c79      	ldrb	r1, [r7, r1]
    5ab2:	0209      	lsls	r1, r1, #8
    5ab4:	9f00      	ldr	r7, [sp, #0]
    5ab6:	430f      	orrs	r7, r1
    5ab8:	e01b      	b.n	5af2 <spi_write_buffer_wait+0x122>
						length--;
    5aba:	3a01      	subs	r2, #1
    5abc:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    5abe:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5ac0:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    5ac2:	4641      	mov	r1, r8
    5ac4:	420f      	tst	r7, r1
    5ac6:	d11b      	bne.n	5b00 <spi_write_buffer_wait+0x130>
    5ac8:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5aca:	2d00      	cmp	r5, #0
    5acc:	d018      	beq.n	5b00 <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
    5ace:	2a00      	cmp	r2, #0
    5ad0:	d0f5      	beq.n	5abe <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5ad2:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5ad4:	7e37      	ldrb	r7, [r6, #24]
    5ad6:	421f      	tst	r7, r3
    5ad8:	d0f1      	beq.n	5abe <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    5ada:	1c67      	adds	r7, r4, #1
    5adc:	b2b9      	uxth	r1, r7
    5ade:	4689      	mov	r9, r1
    5ae0:	9901      	ldr	r1, [sp, #4]
    5ae2:	5d09      	ldrb	r1, [r1, r4]
    5ae4:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5ae6:	7981      	ldrb	r1, [r0, #6]
    5ae8:	2901      	cmp	r1, #1
    5aea:	d0dd      	beq.n	5aa8 <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
    5aec:	4669      	mov	r1, sp
    5aee:	880f      	ldrh	r7, [r1, #0]
    5af0:	464c      	mov	r4, r9
    5af2:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    5af4:	4219      	tst	r1, r3
    5af6:	d0e0      	beq.n	5aba <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5af8:	05ff      	lsls	r7, r7, #23
    5afa:	0dff      	lsrs	r7, r7, #23
    5afc:	62b7      	str	r7, [r6, #40]	; 0x28
    5afe:	e7dc      	b.n	5aba <spi_write_buffer_wait+0xea>
    5b00:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5b02:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    5b04:	4667      	mov	r7, ip
    5b06:	423d      	tst	r5, r7
    5b08:	d118      	bne.n	5b3c <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5b0a:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    5b0c:	4646      	mov	r6, r8
    5b0e:	4235      	tst	r5, r6
    5b10:	d052      	beq.n	5bb8 <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5b12:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5b14:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    5b16:	4647      	mov	r7, r8
    5b18:	423d      	tst	r5, r7
    5b1a:	d0fb      	beq.n	5b14 <spi_write_buffer_wait+0x144>
    5b1c:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    5b1e:	423d      	tst	r5, r7
    5b20:	d007      	beq.n	5b32 <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5b22:	8b75      	ldrh	r5, [r6, #26]
    5b24:	423d      	tst	r5, r7
    5b26:	d000      	beq.n	5b2a <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5b28:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5b2a:	7985      	ldrb	r5, [r0, #6]
    5b2c:	2d01      	cmp	r5, #1
    5b2e:	d009      	beq.n	5b44 <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5b30:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    5b32:	465d      	mov	r5, fp
    5b34:	3d01      	subs	r5, #1
    5b36:	b2ad      	uxth	r5, r5
    5b38:	46ab      	mov	fp, r5
    5b3a:	e769      	b.n	5a10 <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5b3c:	2302      	movs	r3, #2
    5b3e:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    5b40:	3302      	adds	r3, #2
    5b42:	e74f      	b.n	59e4 <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5b44:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    5b46:	e7f4      	b.n	5b32 <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
    5b48:	7943      	ldrb	r3, [r0, #5]
    5b4a:	2b01      	cmp	r3, #1
    5b4c:	d00b      	beq.n	5b66 <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
    5b4e:	2b00      	cmp	r3, #0
    5b50:	d134      	bne.n	5bbc <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
    5b52:	79c2      	ldrb	r2, [r0, #7]
    5b54:	2a00      	cmp	r2, #0
    5b56:	d100      	bne.n	5b5a <spi_write_buffer_wait+0x18a>
    5b58:	e744      	b.n	59e4 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    5b5a:	2404      	movs	r4, #4
			while (flush_length) {
    5b5c:	465b      	mov	r3, fp
    5b5e:	465d      	mov	r5, fp
    5b60:	2b00      	cmp	r3, #0
    5b62:	d119      	bne.n	5b98 <spi_write_buffer_wait+0x1c8>
    5b64:	e73e      	b.n	59e4 <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5b66:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    5b68:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5b6a:	7e0b      	ldrb	r3, [r1, #24]
    5b6c:	4213      	tst	r3, r2
    5b6e:	d0fc      	beq.n	5b6a <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    5b70:	2300      	movs	r3, #0
    5b72:	e737      	b.n	59e4 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5b74:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    5b76:	4223      	tst	r3, r4
    5b78:	d022      	beq.n	5bc0 <spi_write_buffer_wait+0x1f0>
    5b7a:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    5b7c:	4223      	tst	r3, r4
    5b7e:	d007      	beq.n	5b90 <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5b80:	8b4b      	ldrh	r3, [r1, #26]
    5b82:	4223      	tst	r3, r4
    5b84:	d000      	beq.n	5b88 <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5b86:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5b88:	7983      	ldrb	r3, [r0, #6]
    5b8a:	2b01      	cmp	r3, #1
    5b8c:	d010      	beq.n	5bb0 <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5b8e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    5b90:	3d01      	subs	r5, #1
    5b92:	b2ad      	uxth	r5, r5
			while (flush_length) {
    5b94:	2d00      	cmp	r5, #0
    5b96:	d015      	beq.n	5bc4 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5b98:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5b9a:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    5b9c:	4223      	tst	r3, r4
    5b9e:	d1e9      	bne.n	5b74 <spi_write_buffer_wait+0x1a4>
    5ba0:	4b0a      	ldr	r3, [pc, #40]	; (5bcc <spi_write_buffer_wait+0x1fc>)
    5ba2:	7e0a      	ldrb	r2, [r1, #24]
    5ba4:	4222      	tst	r2, r4
    5ba6:	d1e5      	bne.n	5b74 <spi_write_buffer_wait+0x1a4>
    5ba8:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5baa:	2b00      	cmp	r3, #0
    5bac:	d1f9      	bne.n	5ba2 <spi_write_buffer_wait+0x1d2>
    5bae:	e7e1      	b.n	5b74 <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5bb0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    5bb2:	e7ed      	b.n	5b90 <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    5bb4:	2312      	movs	r3, #18
    5bb6:	e715      	b.n	59e4 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    5bb8:	2312      	movs	r3, #18
    5bba:	e713      	b.n	59e4 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    5bbc:	2300      	movs	r3, #0
    5bbe:	e711      	b.n	59e4 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    5bc0:	2312      	movs	r3, #18
    5bc2:	e70f      	b.n	59e4 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    5bc4:	2300      	movs	r3, #0
    5bc6:	e70d      	b.n	59e4 <spi_write_buffer_wait+0x14>
    5bc8:	0000ffff 	.word	0x0000ffff
    5bcc:	00002710 	.word	0x00002710
    5bd0:	00002711 	.word	0x00002711

00005bd4 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    5bd4:	4770      	bx	lr
	...

00005bd8 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    5bd8:	b510      	push	{r4, lr}
    5bda:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    5bdc:	4b0f      	ldr	r3, [pc, #60]	; (5c1c <sd_mmc_test_unit_ready+0x44>)
    5bde:	4798      	blx	r3
    5be0:	2801      	cmp	r0, #1
    5be2:	d019      	beq.n	5c18 <sd_mmc_test_unit_ready+0x40>
    5be4:	2800      	cmp	r0, #0
    5be6:	d003      	beq.n	5bf0 <sd_mmc_test_unit_ready+0x18>
    5be8:	2802      	cmp	r0, #2
    5bea:	d010      	beq.n	5c0e <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    5bec:	2001      	movs	r0, #1
	}
}
    5bee:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    5bf0:	4b0b      	ldr	r3, [pc, #44]	; (5c20 <sd_mmc_test_unit_ready+0x48>)
    5bf2:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    5bf4:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    5bf6:	2b00      	cmp	r3, #0
    5bf8:	d1f9      	bne.n	5bee <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    5bfa:	0020      	movs	r0, r4
    5bfc:	4b09      	ldr	r3, [pc, #36]	; (5c24 <sd_mmc_test_unit_ready+0x4c>)
    5bfe:	4798      	blx	r3
    5c00:	0003      	movs	r3, r0
    5c02:	2003      	movs	r0, #3
    5c04:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    5c06:	4243      	negs	r3, r0
    5c08:	4158      	adcs	r0, r3
    5c0a:	0040      	lsls	r0, r0, #1
    5c0c:	e7ef      	b.n	5bee <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    5c0e:	2200      	movs	r2, #0
    5c10:	4b03      	ldr	r3, [pc, #12]	; (5c20 <sd_mmc_test_unit_ready+0x48>)
    5c12:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    5c14:	2002      	movs	r0, #2
    5c16:	e7ea      	b.n	5bee <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    5c18:	2003      	movs	r0, #3
    5c1a:	e7e8      	b.n	5bee <sd_mmc_test_unit_ready+0x16>
    5c1c:	00000bad 	.word	0x00000bad
    5c20:	2000037c 	.word	0x2000037c
    5c24:	0000105d 	.word	0x0000105d

00005c28 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    5c28:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    5c2a:	2000      	movs	r0, #0
    5c2c:	4b01      	ldr	r3, [pc, #4]	; (5c34 <sd_mmc_test_unit_ready_0+0xc>)
    5c2e:	4798      	blx	r3
}
    5c30:	bd10      	pop	{r4, pc}
    5c32:	46c0      	nop			; (mov r8, r8)
    5c34:	00005bd9 	.word	0x00005bd9

00005c38 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    5c38:	b570      	push	{r4, r5, r6, lr}
    5c3a:	0004      	movs	r4, r0
    5c3c:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    5c3e:	4b04      	ldr	r3, [pc, #16]	; (5c50 <sd_mmc_read_capacity+0x18>)
    5c40:	4798      	blx	r3
    5c42:	0040      	lsls	r0, r0, #1
    5c44:	3801      	subs	r0, #1
    5c46:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    5c48:	0020      	movs	r0, r4
    5c4a:	4b02      	ldr	r3, [pc, #8]	; (5c54 <sd_mmc_read_capacity+0x1c>)
    5c4c:	4798      	blx	r3
}
    5c4e:	bd70      	pop	{r4, r5, r6, pc}
    5c50:	00001085 	.word	0x00001085
    5c54:	00005bd9 	.word	0x00005bd9

00005c58 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    5c58:	b510      	push	{r4, lr}
    5c5a:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    5c5c:	2000      	movs	r0, #0
    5c5e:	4b01      	ldr	r3, [pc, #4]	; (5c64 <sd_mmc_read_capacity_0+0xc>)
    5c60:	4798      	blx	r3
}
    5c62:	bd10      	pop	{r4, pc}
    5c64:	00005c39 	.word	0x00005c39

00005c68 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    5c68:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    5c6a:	2000      	movs	r0, #0
    5c6c:	4b01      	ldr	r3, [pc, #4]	; (5c74 <sd_mmc_wr_protect_0+0xc>)
    5c6e:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    5c70:	bd10      	pop	{r4, pc}
    5c72:	46c0      	nop			; (mov r8, r8)
    5c74:	000010ad 	.word	0x000010ad

00005c78 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
    5c78:	2001      	movs	r0, #1
    5c7a:	4770      	bx	lr

00005c7c <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    5c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c7e:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
    5c80:	4b24      	ldr	r3, [pc, #144]	; (5d14 <sd_mmc_usb_read_10+0x98>)
    5c82:	4798      	blx	r3
    5c84:	2800      	cmp	r0, #0
    5c86:	d004      	beq.n	5c92 <sd_mmc_usb_read_10+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    5c88:	3802      	subs	r0, #2
    5c8a:	4243      	negs	r3, r0
    5c8c:	4158      	adcs	r0, r3
    5c8e:	3001      	adds	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
    5c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nb_step = nb_sector + 1;
    5c92:	3401      	adds	r4, #1
    5c94:	b2a2      	uxth	r2, r4
	bool b_first_step = true;
    5c96:	2701      	movs	r7, #1
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    5c98:	4e1f      	ldr	r6, [pc, #124]	; (5d18 <sd_mmc_usb_read_10+0x9c>)
	while (nb_step--) {
    5c9a:	e008      	b.n	5cae <sd_mmc_usb_read_10+0x32>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    5c9c:	481f      	ldr	r0, [pc, #124]	; (5d1c <sd_mmc_usb_read_10+0xa0>)
    5c9e:	e010      	b.n	5cc2 <sd_mmc_usb_read_10+0x46>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    5ca0:	2000      	movs	r0, #0
    5ca2:	4b1f      	ldr	r3, [pc, #124]	; (5d20 <sd_mmc_usb_read_10+0xa4>)
    5ca4:	4798      	blx	r3
    5ca6:	2800      	cmp	r0, #0
    5ca8:	d126      	bne.n	5cf8 <sd_mmc_usb_read_10+0x7c>
    5caa:	2700      	movs	r7, #0
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    5cac:	0022      	movs	r2, r4
	while (nb_step--) {
    5cae:	1e54      	subs	r4, r2, #1
    5cb0:	b2a4      	uxth	r4, r4
    5cb2:	2a00      	cmp	r2, #0
    5cb4:	d01c      	beq.n	5cf0 <sd_mmc_usb_read_10+0x74>
		if (nb_step) { // Skip last step
    5cb6:	2c00      	cmp	r4, #0
    5cb8:	d020      	beq.n	5cfc <sd_mmc_usb_read_10+0x80>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    5cba:	2501      	movs	r5, #1
    5cbc:	4025      	ands	r5, r4
    5cbe:	d0ed      	beq.n	5c9c <sd_mmc_usb_read_10+0x20>
    5cc0:	4818      	ldr	r0, [pc, #96]	; (5d24 <sd_mmc_usb_read_10+0xa8>)
    5cc2:	2101      	movs	r1, #1
    5cc4:	47b0      	blx	r6
    5cc6:	2800      	cmp	r0, #0
    5cc8:	d114      	bne.n	5cf4 <sd_mmc_usb_read_10+0x78>
		if (!b_first_step) { // Skip first step
    5cca:	2f00      	cmp	r7, #0
    5ccc:	d1e8      	bne.n	5ca0 <sd_mmc_usb_read_10+0x24>
			if (!udi_msc_trans_block(true,
    5cce:	4915      	ldr	r1, [pc, #84]	; (5d24 <sd_mmc_usb_read_10+0xa8>)
    5cd0:	2d00      	cmp	r5, #0
    5cd2:	d000      	beq.n	5cd6 <sd_mmc_usb_read_10+0x5a>
    5cd4:	4911      	ldr	r1, [pc, #68]	; (5d1c <sd_mmc_usb_read_10+0xa0>)
    5cd6:	2300      	movs	r3, #0
    5cd8:	2280      	movs	r2, #128	; 0x80
    5cda:	0092      	lsls	r2, r2, #2
    5cdc:	2001      	movs	r0, #1
    5cde:	4d12      	ldr	r5, [pc, #72]	; (5d28 <sd_mmc_usb_read_10+0xac>)
    5ce0:	47a8      	blx	r5
    5ce2:	2800      	cmp	r0, #0
    5ce4:	d1dc      	bne.n	5ca0 <sd_mmc_usb_read_10+0x24>
					sd_mmc_wait_end_of_read_blocks(true);
    5ce6:	2001      	movs	r0, #1
    5ce8:	4b0d      	ldr	r3, [pc, #52]	; (5d20 <sd_mmc_usb_read_10+0xa4>)
    5cea:	4798      	blx	r3
				return CTRL_FAIL;
    5cec:	2001      	movs	r0, #1
    5cee:	e7cf      	b.n	5c90 <sd_mmc_usb_read_10+0x14>
	return CTRL_GOOD;
    5cf0:	2000      	movs	r0, #0
    5cf2:	e7cd      	b.n	5c90 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    5cf4:	2001      	movs	r0, #1
    5cf6:	e7cb      	b.n	5c90 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    5cf8:	2001      	movs	r0, #1
    5cfa:	e7c9      	b.n	5c90 <sd_mmc_usb_read_10+0x14>
		if (!b_first_step) { // Skip first step
    5cfc:	2f00      	cmp	r7, #0
    5cfe:	d1d4      	bne.n	5caa <sd_mmc_usb_read_10+0x2e>
			if (!udi_msc_trans_block(true,
    5d00:	2300      	movs	r3, #0
    5d02:	2280      	movs	r2, #128	; 0x80
    5d04:	0092      	lsls	r2, r2, #2
    5d06:	4907      	ldr	r1, [pc, #28]	; (5d24 <sd_mmc_usb_read_10+0xa8>)
    5d08:	2001      	movs	r0, #1
    5d0a:	4d07      	ldr	r5, [pc, #28]	; (5d28 <sd_mmc_usb_read_10+0xac>)
    5d0c:	47a8      	blx	r5
    5d0e:	2800      	cmp	r0, #0
    5d10:	d1cb      	bne.n	5caa <sd_mmc_usb_read_10+0x2e>
    5d12:	e7e8      	b.n	5ce6 <sd_mmc_usb_read_10+0x6a>
    5d14:	000010b1 	.word	0x000010b1
    5d18:	00001139 	.word	0x00001139
    5d1c:	200009f4 	.word	0x200009f4
    5d20:	00001165 	.word	0x00001165
    5d24:	200007f4 	.word	0x200007f4
    5d28:	00001b05 	.word	0x00001b05

00005d2c <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
    5d2c:	b510      	push	{r4, lr}
    5d2e:	000a      	movs	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
    5d30:	0001      	movs	r1, r0
    5d32:	2000      	movs	r0, #0
    5d34:	4b01      	ldr	r3, [pc, #4]	; (5d3c <sd_mmc_usb_read_10_0+0x10>)
    5d36:	4798      	blx	r3
}
    5d38:	bd10      	pop	{r4, pc}
    5d3a:	46c0      	nop			; (mov r8, r8)
    5d3c:	00005c7d 	.word	0x00005c7d

00005d40 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    5d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d42:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
    5d44:	4b20      	ldr	r3, [pc, #128]	; (5dc8 <sd_mmc_usb_write_10+0x88>)
    5d46:	4798      	blx	r3
    5d48:	2800      	cmp	r0, #0
    5d4a:	d00d      	beq.n	5d68 <sd_mmc_usb_write_10+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    5d4c:	3802      	subs	r0, #2
    5d4e:	4243      	negs	r3, r0
    5d50:	4158      	adcs	r0, r3
    5d52:	3001      	adds	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
    5d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    5d56:	481d      	ldr	r0, [pc, #116]	; (5dcc <sd_mmc_usb_write_10+0x8c>)
    5d58:	e01b      	b.n	5d92 <sd_mmc_usb_write_10+0x52>
				return CTRL_FAIL;
    5d5a:	3001      	adds	r0, #1
				if (!b_first_step) {
    5d5c:	2d00      	cmp	r5, #0
    5d5e:	d1f9      	bne.n	5d54 <sd_mmc_usb_write_10+0x14>
					sd_mmc_wait_end_of_write_blocks(true);
    5d60:	4b1b      	ldr	r3, [pc, #108]	; (5dd0 <sd_mmc_usb_write_10+0x90>)
    5d62:	4798      	blx	r3
				return CTRL_FAIL;
    5d64:	2001      	movs	r0, #1
    5d66:	e7f5      	b.n	5d54 <sd_mmc_usb_write_10+0x14>
	bool b_first_step = true;
    5d68:	2501      	movs	r5, #1
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    5d6a:	4f19      	ldr	r7, [pc, #100]	; (5dd0 <sd_mmc_usb_write_10+0x90>)
			if (!udi_msc_trans_block(false,
    5d6c:	4e19      	ldr	r6, [pc, #100]	; (5dd4 <sd_mmc_usb_write_10+0x94>)
    5d6e:	e008      	b.n	5d82 <sd_mmc_usb_write_10+0x42>
	return CTRL_GOOD;
    5d70:	2000      	movs	r0, #0
    5d72:	e7ef      	b.n	5d54 <sd_mmc_usb_write_10+0x14>
				return CTRL_FAIL;
    5d74:	2001      	movs	r0, #1
    5d76:	e7ed      	b.n	5d54 <sd_mmc_usb_write_10+0x14>
		if (nb_step) { // Skip last step
    5d78:	2c00      	cmp	r4, #0
    5d7a:	d111      	bne.n	5da0 <sd_mmc_usb_write_10+0x60>
    5d7c:	3c01      	subs	r4, #1
    5d7e:	b2a4      	uxth	r4, r4
    5d80:	2500      	movs	r5, #0
	while (nb_step--) {
    5d82:	4b15      	ldr	r3, [pc, #84]	; (5dd8 <sd_mmc_usb_write_10+0x98>)
    5d84:	429c      	cmp	r4, r3
    5d86:	d0f3      	beq.n	5d70 <sd_mmc_usb_write_10+0x30>
		if (!b_first_step) { // Skip first step
    5d88:	2d00      	cmp	r5, #0
    5d8a:	d1f5      	bne.n	5d78 <sd_mmc_usb_write_10+0x38>
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    5d8c:	07e3      	lsls	r3, r4, #31
    5d8e:	d5e2      	bpl.n	5d56 <sd_mmc_usb_write_10+0x16>
    5d90:	4812      	ldr	r0, [pc, #72]	; (5ddc <sd_mmc_usb_write_10+0x9c>)
    5d92:	2101      	movs	r1, #1
    5d94:	4b12      	ldr	r3, [pc, #72]	; (5de0 <sd_mmc_usb_write_10+0xa0>)
    5d96:	4798      	blx	r3
    5d98:	2800      	cmp	r0, #0
    5d9a:	d1eb      	bne.n	5d74 <sd_mmc_usb_write_10+0x34>
		if (nb_step) { // Skip last step
    5d9c:	2c00      	cmp	r4, #0
    5d9e:	d00c      	beq.n	5dba <sd_mmc_usb_write_10+0x7a>
			if (!udi_msc_trans_block(false,
    5da0:	490e      	ldr	r1, [pc, #56]	; (5ddc <sd_mmc_usb_write_10+0x9c>)
    5da2:	07e3      	lsls	r3, r4, #31
    5da4:	d500      	bpl.n	5da8 <sd_mmc_usb_write_10+0x68>
    5da6:	4909      	ldr	r1, [pc, #36]	; (5dcc <sd_mmc_usb_write_10+0x8c>)
    5da8:	2300      	movs	r3, #0
    5daa:	2280      	movs	r2, #128	; 0x80
    5dac:	0092      	lsls	r2, r2, #2
    5dae:	2000      	movs	r0, #0
    5db0:	47b0      	blx	r6
    5db2:	2800      	cmp	r0, #0
    5db4:	d0d1      	beq.n	5d5a <sd_mmc_usb_write_10+0x1a>
		if (!b_first_step) { // Skip first step
    5db6:	2d00      	cmp	r5, #0
    5db8:	d1e0      	bne.n	5d7c <sd_mmc_usb_write_10+0x3c>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    5dba:	2000      	movs	r0, #0
    5dbc:	47b8      	blx	r7
    5dbe:	2800      	cmp	r0, #0
    5dc0:	d0dc      	beq.n	5d7c <sd_mmc_usb_write_10+0x3c>
				return CTRL_FAIL;
    5dc2:	2001      	movs	r0, #1
    5dc4:	e7c6      	b.n	5d54 <sd_mmc_usb_write_10+0x14>
    5dc6:	46c0      	nop			; (mov r8, r8)
    5dc8:	000011d5 	.word	0x000011d5
    5dcc:	200009f4 	.word	0x200009f4
    5dd0:	00001271 	.word	0x00001271
    5dd4:	00001b05 	.word	0x00001b05
    5dd8:	0000ffff 	.word	0x0000ffff
    5ddc:	200007f4 	.word	0x200007f4
    5de0:	00001245 	.word	0x00001245

00005de4 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
    5de4:	b510      	push	{r4, lr}
    5de6:	000a      	movs	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
    5de8:	0001      	movs	r1, r0
    5dea:	2000      	movs	r0, #0
    5dec:	4b01      	ldr	r3, [pc, #4]	; (5df4 <sd_mmc_usb_write_10_0+0x10>)
    5dee:	4798      	blx	r3
}
    5df0:	bd10      	pop	{r4, pc}
    5df2:	46c0      	nop			; (mov r8, r8)
    5df4:	00005d41 	.word	0x00005d41

00005df8 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    5df8:	b500      	push	{lr}
    5dfa:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    5dfc:	466b      	mov	r3, sp
    5dfe:	1dd9      	adds	r1, r3, #7
    5e00:	23ff      	movs	r3, #255	; 0xff
    5e02:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    5e04:	2201      	movs	r2, #1
    5e06:	480b      	ldr	r0, [pc, #44]	; (5e34 <sd_mmc_spi_start_write_block+0x3c>)
    5e08:	4b0b      	ldr	r3, [pc, #44]	; (5e38 <sd_mmc_spi_start_write_block+0x40>)
    5e0a:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    5e0c:	4b0b      	ldr	r3, [pc, #44]	; (5e3c <sd_mmc_spi_start_write_block+0x44>)
    5e0e:	881b      	ldrh	r3, [r3, #0]
    5e10:	2b01      	cmp	r3, #1
    5e12:	d00a      	beq.n	5e2a <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    5e14:	22fc      	movs	r2, #252	; 0xfc
    5e16:	466b      	mov	r3, sp
    5e18:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    5e1a:	2201      	movs	r2, #1
    5e1c:	466b      	mov	r3, sp
    5e1e:	1d99      	adds	r1, r3, #6
    5e20:	4804      	ldr	r0, [pc, #16]	; (5e34 <sd_mmc_spi_start_write_block+0x3c>)
    5e22:	4b05      	ldr	r3, [pc, #20]	; (5e38 <sd_mmc_spi_start_write_block+0x40>)
    5e24:	4798      	blx	r3
}
    5e26:	b003      	add	sp, #12
    5e28:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    5e2a:	22fe      	movs	r2, #254	; 0xfe
    5e2c:	466b      	mov	r3, sp
    5e2e:	719a      	strb	r2, [r3, #6]
    5e30:	e7f3      	b.n	5e1a <sd_mmc_spi_start_write_block+0x22>
    5e32:	46c0      	nop			; (mov r8, r8)
    5e34:	20000380 	.word	0x20000380
    5e38:	000059d1 	.word	0x000059d1
    5e3c:	20000394 	.word	0x20000394

00005e40 <sd_mmc_spi_wait_busy>:
{
    5e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e42:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    5e44:	466b      	mov	r3, sp
    5e46:	1ddc      	adds	r4, r3, #7
    5e48:	23ff      	movs	r3, #255	; 0xff
    5e4a:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    5e4c:	4e12      	ldr	r6, [pc, #72]	; (5e98 <sd_mmc_spi_wait_busy+0x58>)
    5e4e:	2201      	movs	r2, #1
    5e50:	0021      	movs	r1, r4
    5e52:	0030      	movs	r0, r6
    5e54:	4d11      	ldr	r5, [pc, #68]	; (5e9c <sd_mmc_spi_wait_busy+0x5c>)
    5e56:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    5e58:	23ff      	movs	r3, #255	; 0xff
    5e5a:	2201      	movs	r2, #1
    5e5c:	0021      	movs	r1, r4
    5e5e:	0030      	movs	r0, r6
    5e60:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    5e62:	23ff      	movs	r3, #255	; 0xff
    5e64:	2201      	movs	r2, #1
    5e66:	0021      	movs	r1, r4
    5e68:	0030      	movs	r0, r6
    5e6a:	47a8      	blx	r5
    5e6c:	4c0c      	ldr	r4, [pc, #48]	; (5ea0 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    5e6e:	466b      	mov	r3, sp
    5e70:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    5e72:	4e09      	ldr	r6, [pc, #36]	; (5e98 <sd_mmc_spi_wait_busy+0x58>)
    5e74:	4f09      	ldr	r7, [pc, #36]	; (5e9c <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    5e76:	782b      	ldrb	r3, [r5, #0]
    5e78:	2bff      	cmp	r3, #255	; 0xff
    5e7a:	d009      	beq.n	5e90 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    5e7c:	23ff      	movs	r3, #255	; 0xff
    5e7e:	2201      	movs	r2, #1
    5e80:	0029      	movs	r1, r5
    5e82:	0030      	movs	r0, r6
    5e84:	47b8      	blx	r7
    5e86:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    5e88:	2c00      	cmp	r4, #0
    5e8a:	d1f4      	bne.n	5e76 <sd_mmc_spi_wait_busy+0x36>
			return false;
    5e8c:	2000      	movs	r0, #0
    5e8e:	e000      	b.n	5e92 <sd_mmc_spi_wait_busy+0x52>
	return true;
    5e90:	2001      	movs	r0, #1
}
    5e92:	b003      	add	sp, #12
    5e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e96:	46c0      	nop			; (mov r8, r8)
    5e98:	20000380 	.word	0x20000380
    5e9c:	000057c5 	.word	0x000057c5
    5ea0:	00030d40 	.word	0x00030d40

00005ea4 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    5ea4:	b570      	push	{r4, r5, r6, lr}
    5ea6:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    5ea8:	4b14      	ldr	r3, [pc, #80]	; (5efc <sd_mmc_spi_stop_multiwrite_block+0x58>)
    5eaa:	881c      	ldrh	r4, [r3, #0]
    5eac:	2c01      	cmp	r4, #1
    5eae:	d023      	beq.n	5ef8 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    5eb0:	4b13      	ldr	r3, [pc, #76]	; (5f00 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    5eb2:	8819      	ldrh	r1, [r3, #0]
    5eb4:	4b13      	ldr	r3, [pc, #76]	; (5f04 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    5eb6:	6818      	ldr	r0, [r3, #0]
    5eb8:	4b13      	ldr	r3, [pc, #76]	; (5f08 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    5eba:	4798      	blx	r3
		return true; // It is not the End of multi write
    5ebc:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    5ebe:	4284      	cmp	r4, r0
    5ec0:	d902      	bls.n	5ec8 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    5ec2:	0018      	movs	r0, r3
    5ec4:	b002      	add	sp, #8
    5ec6:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    5ec8:	466b      	mov	r3, sp
    5eca:	1ddc      	adds	r4, r3, #7
    5ecc:	23ff      	movs	r3, #255	; 0xff
    5ece:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    5ed0:	4e0e      	ldr	r6, [pc, #56]	; (5f0c <sd_mmc_spi_stop_multiwrite_block+0x68>)
    5ed2:	2201      	movs	r2, #1
    5ed4:	0021      	movs	r1, r4
    5ed6:	0030      	movs	r0, r6
    5ed8:	4d0d      	ldr	r5, [pc, #52]	; (5f10 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    5eda:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    5edc:	23fd      	movs	r3, #253	; 0xfd
    5ede:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    5ee0:	2201      	movs	r2, #1
    5ee2:	0021      	movs	r1, r4
    5ee4:	0030      	movs	r0, r6
    5ee6:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    5ee8:	4b0a      	ldr	r3, [pc, #40]	; (5f14 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    5eea:	4798      	blx	r3
    5eec:	1e03      	subs	r3, r0, #0
    5eee:	d1e8      	bne.n	5ec2 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    5ef0:	2105      	movs	r1, #5
    5ef2:	4a09      	ldr	r2, [pc, #36]	; (5f18 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    5ef4:	7011      	strb	r1, [r2, #0]
		return false;
    5ef6:	e7e4      	b.n	5ec2 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    5ef8:	2301      	movs	r3, #1
    5efa:	e7e2      	b.n	5ec2 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    5efc:	20000394 	.word	0x20000394
    5f00:	2000038c 	.word	0x2000038c
    5f04:	2000039c 	.word	0x2000039c
    5f08:	00006b71 	.word	0x00006b71
    5f0c:	20000380 	.word	0x20000380
    5f10:	000059d1 	.word	0x000059d1
    5f14:	00005e41 	.word	0x00005e41
    5f18:	20000393 	.word	0x20000393

00005f1c <sd_mmc_spi_start_read_block>:
{
    5f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f1e:	b083      	sub	sp, #12
	token = 0;
    5f20:	2200      	movs	r2, #0
    5f22:	466b      	mov	r3, sp
    5f24:	71da      	strb	r2, [r3, #7]
    5f26:	4c14      	ldr	r4, [pc, #80]	; (5f78 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    5f28:	466b      	mov	r3, sp
    5f2a:	1ddd      	adds	r5, r3, #7
    5f2c:	4e13      	ldr	r6, [pc, #76]	; (5f7c <sd_mmc_spi_start_read_block+0x60>)
    5f2e:	4f14      	ldr	r7, [pc, #80]	; (5f80 <sd_mmc_spi_start_read_block+0x64>)
    5f30:	23ff      	movs	r3, #255	; 0xff
    5f32:	2201      	movs	r2, #1
    5f34:	0029      	movs	r1, r5
    5f36:	0030      	movs	r0, r6
    5f38:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    5f3a:	782b      	ldrb	r3, [r5, #0]
    5f3c:	220f      	movs	r2, #15
    5f3e:	0019      	movs	r1, r3
    5f40:	4391      	bics	r1, r2
    5f42:	1e0a      	subs	r2, r1, #0
    5f44:	d009      	beq.n	5f5a <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    5f46:	2bfe      	cmp	r3, #254	; 0xfe
    5f48:	d013      	beq.n	5f72 <sd_mmc_spi_start_read_block+0x56>
    5f4a:	3c01      	subs	r4, #1
		if (i-- == 0) {
    5f4c:	2c00      	cmp	r4, #0
    5f4e:	d1ef      	bne.n	5f30 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    5f50:	2204      	movs	r2, #4
    5f52:	4b0c      	ldr	r3, [pc, #48]	; (5f84 <sd_mmc_spi_start_read_block+0x68>)
    5f54:	701a      	strb	r2, [r3, #0]
			return false;
    5f56:	2000      	movs	r0, #0
    5f58:	e00c      	b.n	5f74 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    5f5a:	075b      	lsls	r3, r3, #29
    5f5c:	d004      	beq.n	5f68 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    5f5e:	3207      	adds	r2, #7
    5f60:	4b08      	ldr	r3, [pc, #32]	; (5f84 <sd_mmc_spi_start_read_block+0x68>)
    5f62:	701a      	strb	r2, [r3, #0]
			return false;
    5f64:	2000      	movs	r0, #0
    5f66:	e005      	b.n	5f74 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    5f68:	220b      	movs	r2, #11
    5f6a:	4b06      	ldr	r3, [pc, #24]	; (5f84 <sd_mmc_spi_start_read_block+0x68>)
    5f6c:	701a      	strb	r2, [r3, #0]
			return false;
    5f6e:	2000      	movs	r0, #0
    5f70:	e000      	b.n	5f74 <sd_mmc_spi_start_read_block+0x58>
	return true;
    5f72:	2001      	movs	r0, #1
}
    5f74:	b003      	add	sp, #12
    5f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f78:	0007a120 	.word	0x0007a120
    5f7c:	20000380 	.word	0x20000380
    5f80:	000057c5 	.word	0x000057c5
    5f84:	20000393 	.word	0x20000393

00005f88 <sd_mmc_spi_stop_write_block>:
{
    5f88:	b530      	push	{r4, r5, lr}
    5f8a:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    5f8c:	a901      	add	r1, sp, #4
    5f8e:	2301      	movs	r3, #1
    5f90:	425b      	negs	r3, r3
    5f92:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    5f94:	4d14      	ldr	r5, [pc, #80]	; (5fe8 <sd_mmc_spi_stop_write_block+0x60>)
    5f96:	2202      	movs	r2, #2
    5f98:	0028      	movs	r0, r5
    5f9a:	4b14      	ldr	r3, [pc, #80]	; (5fec <sd_mmc_spi_stop_write_block+0x64>)
    5f9c:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    5f9e:	466b      	mov	r3, sp
    5fa0:	1ddc      	adds	r4, r3, #7
    5fa2:	23ff      	movs	r3, #255	; 0xff
    5fa4:	2201      	movs	r2, #1
    5fa6:	0021      	movs	r1, r4
    5fa8:	0028      	movs	r0, r5
    5faa:	4d11      	ldr	r5, [pc, #68]	; (5ff0 <sd_mmc_spi_stop_write_block+0x68>)
    5fac:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    5fae:	7822      	ldrb	r2, [r4, #0]
    5fb0:	2311      	movs	r3, #17
    5fb2:	4013      	ands	r3, r2
    5fb4:	2b01      	cmp	r3, #1
    5fb6:	d005      	beq.n	5fc4 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    5fb8:	2201      	movs	r2, #1
    5fba:	4b0e      	ldr	r3, [pc, #56]	; (5ff4 <sd_mmc_spi_stop_write_block+0x6c>)
    5fbc:	701a      	strb	r2, [r3, #0]
		return false;
    5fbe:	2000      	movs	r0, #0
}
    5fc0:	b003      	add	sp, #12
    5fc2:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    5fc4:	231e      	movs	r3, #30
    5fc6:	401a      	ands	r2, r3
    5fc8:	2a04      	cmp	r2, #4
    5fca:	d00b      	beq.n	5fe4 <sd_mmc_spi_stop_write_block+0x5c>
    5fcc:	2a0a      	cmp	r2, #10
    5fce:	d104      	bne.n	5fda <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    5fd0:	3a02      	subs	r2, #2
    5fd2:	4b08      	ldr	r3, [pc, #32]	; (5ff4 <sd_mmc_spi_stop_write_block+0x6c>)
    5fd4:	701a      	strb	r2, [r3, #0]
		return false;
    5fd6:	2000      	movs	r0, #0
    5fd8:	e7f2      	b.n	5fc0 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    5fda:	220a      	movs	r2, #10
    5fdc:	4b05      	ldr	r3, [pc, #20]	; (5ff4 <sd_mmc_spi_stop_write_block+0x6c>)
    5fde:	701a      	strb	r2, [r3, #0]
		return false;
    5fe0:	2000      	movs	r0, #0
    5fe2:	e7ed      	b.n	5fc0 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    5fe4:	2001      	movs	r0, #1
    5fe6:	e7eb      	b.n	5fc0 <sd_mmc_spi_stop_write_block+0x38>
    5fe8:	20000380 	.word	0x20000380
    5fec:	000059d1 	.word	0x000059d1
    5ff0:	000057c5 	.word	0x000057c5
    5ff4:	20000393 	.word	0x20000393

00005ff8 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    5ff8:	b570      	push	{r4, r5, r6, lr}
    5ffa:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5ffc:	2500      	movs	r5, #0
    5ffe:	4b2c      	ldr	r3, [pc, #176]	; (60b0 <sd_mmc_spi_init+0xb8>)
    6000:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    6002:	a90f      	add	r1, sp, #60	; 0x3c
    6004:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    6006:	2601      	movs	r6, #1
    6008:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    600a:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
    600c:	2025      	movs	r0, #37	; 0x25
    600e:	4b29      	ldr	r3, [pc, #164]	; (60b4 <sd_mmc_spi_init+0xbc>)
    6010:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    6012:	ac01      	add	r4, sp, #4
    6014:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    6016:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    6018:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    601a:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    601c:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    601e:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    6020:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    6022:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    6024:	2324      	movs	r3, #36	; 0x24
    6026:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    6028:	220c      	movs	r2, #12
    602a:	2100      	movs	r1, #0
    602c:	a807      	add	r0, sp, #28
    602e:	4b22      	ldr	r3, [pc, #136]	; (60b8 <sd_mmc_spi_init+0xc0>)
    6030:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    6032:	2380      	movs	r3, #128	; 0x80
    6034:	025b      	lsls	r3, r3, #9
    6036:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    6038:	4b20      	ldr	r3, [pc, #128]	; (60bc <sd_mmc_spi_init+0xc4>)
    603a:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    603c:	4b20      	ldr	r3, [pc, #128]	; (60c0 <sd_mmc_spi_init+0xc8>)
    603e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    6040:	4b20      	ldr	r3, [pc, #128]	; (60c4 <sd_mmc_spi_init+0xcc>)
    6042:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    6044:	4b20      	ldr	r3, [pc, #128]	; (60c8 <sd_mmc_spi_init+0xd0>)
    6046:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    6048:	4b20      	ldr	r3, [pc, #128]	; (60cc <sd_mmc_spi_init+0xd4>)
    604a:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    604c:	4d20      	ldr	r5, [pc, #128]	; (60d0 <sd_mmc_spi_init+0xd8>)
    604e:	0022      	movs	r2, r4
    6050:	4920      	ldr	r1, [pc, #128]	; (60d4 <sd_mmc_spi_init+0xdc>)
    6052:	0028      	movs	r0, r5
    6054:	4b20      	ldr	r3, [pc, #128]	; (60d8 <sd_mmc_spi_init+0xe0>)
    6056:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    6058:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    605a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    605c:	2b00      	cmp	r3, #0
    605e:	d1fc      	bne.n	605a <sd_mmc_spi_init+0x62>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6060:	6813      	ldr	r3, [r2, #0]
    6062:	2102      	movs	r1, #2
    6064:	430b      	orrs	r3, r1
    6066:	6013      	str	r3, [r2, #0]
	config->address_enabled = false;
    6068:	4a1c      	ldr	r2, [pc, #112]	; (60dc <sd_mmc_spi_init+0xe4>)
    606a:	2300      	movs	r3, #0
    606c:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    606e:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    6070:	491b      	ldr	r1, [pc, #108]	; (60e0 <sd_mmc_spi_init+0xe8>)
    6072:	7808      	ldrb	r0, [r1, #0]
    6074:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    6076:	4c1b      	ldr	r4, [pc, #108]	; (60e4 <sd_mmc_spi_init+0xec>)
    6078:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    607a:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    607c:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    607e:	2201      	movs	r2, #1
    6080:	4669      	mov	r1, sp
    6082:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    6084:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    6086:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    6088:	4b0a      	ldr	r3, [pc, #40]	; (60b4 <sd_mmc_spi_init+0xbc>)
    608a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    608c:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    608e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    6090:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6092:	2900      	cmp	r1, #0
    6094:	d104      	bne.n	60a0 <sd_mmc_spi_init+0xa8>
		return &(ports[port_index]->Group[group_index]);
    6096:	0953      	lsrs	r3, r2, #5
    6098:	01db      	lsls	r3, r3, #7
    609a:	4913      	ldr	r1, [pc, #76]	; (60e8 <sd_mmc_spi_init+0xf0>)
    609c:	468c      	mov	ip, r1
    609e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    60a0:	211f      	movs	r1, #31
    60a2:	4011      	ands	r1, r2
    60a4:	2201      	movs	r2, #1
    60a6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    60a8:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    60aa:	b010      	add	sp, #64	; 0x40
    60ac:	bd70      	pop	{r4, r5, r6, pc}
    60ae:	46c0      	nop			; (mov r8, r8)
    60b0:	20000393 	.word	0x20000393
    60b4:	00006699 	.word	0x00006699
    60b8:	0000715f 	.word	0x0000715f
    60bc:	00040003 	.word	0x00040003
    60c0:	00050003 	.word	0x00050003
    60c4:	00060003 	.word	0x00060003
    60c8:	00070003 	.word	0x00070003
    60cc:	00061a80 	.word	0x00061a80
    60d0:	20000380 	.word	0x20000380
    60d4:	42000800 	.word	0x42000800
    60d8:	00005491 	.word	0x00005491
    60dc:	200003a0 	.word	0x200003a0
    60e0:	200000f8 	.word	0x200000f8
    60e4:	20000390 	.word	0x20000390
    60e8:	41004400 	.word	0x41004400

000060ec <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    60ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60ee:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    60f0:	2200      	movs	r2, #0
    60f2:	4b0d      	ldr	r3, [pc, #52]	; (6128 <sd_mmc_spi_select_device+0x3c>)
    60f4:	701a      	strb	r2, [r3, #0]
    60f6:	000c      	movs	r4, r1
    60f8:	4b0c      	ldr	r3, [pc, #48]	; (612c <sd_mmc_spi_select_device+0x40>)
    60fa:	4299      	cmp	r1, r3
    60fc:	d900      	bls.n	6100 <sd_mmc_spi_select_device+0x14>
    60fe:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    6100:	4d0b      	ldr	r5, [pc, #44]	; (6130 <sd_mmc_spi_select_device+0x44>)
    6102:	4e0c      	ldr	r6, [pc, #48]	; (6134 <sd_mmc_spi_select_device+0x48>)
    6104:	e001      	b.n	610a <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    6106:	08e3      	lsrs	r3, r4, #3
    6108:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    610a:	0021      	movs	r1, r4
    610c:	0028      	movs	r0, r5
    610e:	47b0      	blx	r6
    6110:	2817      	cmp	r0, #23
    6112:	d0f8      	beq.n	6106 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    6114:	0079      	lsls	r1, r7, #1
    6116:	19cf      	adds	r7, r1, r7
    6118:	4907      	ldr	r1, [pc, #28]	; (6138 <sd_mmc_spi_select_device+0x4c>)
    611a:	19c9      	adds	r1, r1, r7
    611c:	2201      	movs	r2, #1
    611e:	4804      	ldr	r0, [pc, #16]	; (6130 <sd_mmc_spi_select_device+0x44>)
    6120:	4b06      	ldr	r3, [pc, #24]	; (613c <sd_mmc_spi_select_device+0x50>)
    6122:	4798      	blx	r3
}
    6124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6126:	46c0      	nop			; (mov r8, r8)
    6128:	20000393 	.word	0x20000393
    612c:	003d0900 	.word	0x003d0900
    6130:	20000380 	.word	0x20000380
    6134:	0000540d 	.word	0x0000540d
    6138:	20000390 	.word	0x20000390
    613c:	000058dd 	.word	0x000058dd

00006140 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    6140:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    6142:	2200      	movs	r2, #0
    6144:	4b04      	ldr	r3, [pc, #16]	; (6158 <sd_mmc_spi_deselect_device+0x18>)
    6146:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    6148:	0041      	lsls	r1, r0, #1
    614a:	1808      	adds	r0, r1, r0
    614c:	4903      	ldr	r1, [pc, #12]	; (615c <sd_mmc_spi_deselect_device+0x1c>)
    614e:	1809      	adds	r1, r1, r0
    6150:	4803      	ldr	r0, [pc, #12]	; (6160 <sd_mmc_spi_deselect_device+0x20>)
    6152:	4b04      	ldr	r3, [pc, #16]	; (6164 <sd_mmc_spi_deselect_device+0x24>)
    6154:	4798      	blx	r3
}
    6156:	bd10      	pop	{r4, pc}
    6158:	20000393 	.word	0x20000393
    615c:	20000390 	.word	0x20000390
    6160:	20000380 	.word	0x20000380
    6164:	000058dd 	.word	0x000058dd

00006168 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    6168:	b570      	push	{r4, r5, r6, lr}
    616a:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    616c:	22ff      	movs	r2, #255	; 0xff
    616e:	466b      	mov	r3, sp
    6170:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    6172:	2200      	movs	r2, #0
    6174:	4b07      	ldr	r3, [pc, #28]	; (6194 <sd_mmc_spi_send_clock+0x2c>)
    6176:	701a      	strb	r2, [r3, #0]
    6178:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    617a:	4e07      	ldr	r6, [pc, #28]	; (6198 <sd_mmc_spi_send_clock+0x30>)
    617c:	4d07      	ldr	r5, [pc, #28]	; (619c <sd_mmc_spi_send_clock+0x34>)
    617e:	2201      	movs	r2, #1
    6180:	466b      	mov	r3, sp
    6182:	1dd9      	adds	r1, r3, #7
    6184:	0030      	movs	r0, r6
    6186:	47a8      	blx	r5
    6188:	3c01      	subs	r4, #1
    618a:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    618c:	2c00      	cmp	r4, #0
    618e:	d1f6      	bne.n	617e <sd_mmc_spi_send_clock+0x16>
	}
}
    6190:	b002      	add	sp, #8
    6192:	bd70      	pop	{r4, r5, r6, pc}
    6194:	20000393 	.word	0x20000393
    6198:	20000380 	.word	0x20000380
    619c:	000059d1 	.word	0x000059d1

000061a0 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    61a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    61a2:	46c6      	mov	lr, r8
    61a4:	b500      	push	{lr}
    61a6:	b086      	sub	sp, #24
    61a8:	4680      	mov	r8, r0
    61aa:	9200      	str	r2, [sp, #0]
    61ac:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    61ae:	22ff      	movs	r2, #255	; 0xff
    61b0:	230f      	movs	r3, #15
    61b2:	a802      	add	r0, sp, #8
    61b4:	4684      	mov	ip, r0
    61b6:	4463      	add	r3, ip
    61b8:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    61ba:	2200      	movs	r2, #0
    61bc:	4b53      	ldr	r3, [pc, #332]	; (630c <sd_mmc_spi_adtc_start+0x16c>)
    61be:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    61c0:	ab04      	add	r3, sp, #16
    61c2:	323f      	adds	r2, #63	; 0x3f
    61c4:	4640      	mov	r0, r8
    61c6:	4002      	ands	r2, r0
    61c8:	2040      	movs	r0, #64	; 0x40
    61ca:	4302      	orrs	r2, r0
    61cc:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    61ce:	0e0a      	lsrs	r2, r1, #24
    61d0:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    61d2:	0c0a      	lsrs	r2, r1, #16
    61d4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    61d6:	0a0a      	lsrs	r2, r1, #8
    61d8:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    61da:	7119      	strb	r1, [r3, #4]
    61dc:	2700      	movs	r7, #0
	crc = 0;
    61de:	2300      	movs	r3, #0
		value = *buf++;
    61e0:	a904      	add	r1, sp, #16
    61e2:	2208      	movs	r2, #8
				crc ^= 0x09;
    61e4:	2409      	movs	r4, #9
    61e6:	e011      	b.n	620c <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    61e8:	0076      	lsls	r6, r6, #1
    61ea:	b2f6      	uxtb	r6, r6
    61ec:	3801      	subs	r0, #1
    61ee:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    61f0:	2800      	cmp	r0, #0
    61f2:	d008      	beq.n	6206 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    61f4:	005b      	lsls	r3, r3, #1
    61f6:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    61f8:	001d      	movs	r5, r3
    61fa:	4075      	eors	r5, r6
    61fc:	062d      	lsls	r5, r5, #24
    61fe:	d5f3      	bpl.n	61e8 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    6200:	4063      	eors	r3, r4
    6202:	b2db      	uxtb	r3, r3
    6204:	e7f0      	b.n	61e8 <sd_mmc_spi_adtc_start+0x48>
    6206:	3701      	adds	r7, #1
	while (size--) {
    6208:	2f05      	cmp	r7, #5
    620a:	d002      	beq.n	6212 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    620c:	5c7e      	ldrb	r6, [r7, r1]
    620e:	0010      	movs	r0, r2
    6210:	e7f0      	b.n	61f4 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    6212:	005b      	lsls	r3, r3, #1
    6214:	2201      	movs	r2, #1
    6216:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    6218:	ac04      	add	r4, sp, #16
    621a:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    621c:	4e3c      	ldr	r6, [pc, #240]	; (6310 <sd_mmc_spi_adtc_start+0x170>)
    621e:	2201      	movs	r2, #1
    6220:	210f      	movs	r1, #15
    6222:	ab02      	add	r3, sp, #8
    6224:	469c      	mov	ip, r3
    6226:	4461      	add	r1, ip
    6228:	0030      	movs	r0, r6
    622a:	4f3a      	ldr	r7, [pc, #232]	; (6314 <sd_mmc_spi_adtc_start+0x174>)
    622c:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    622e:	2206      	movs	r2, #6
    6230:	0021      	movs	r1, r4
    6232:	0030      	movs	r0, r6
    6234:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    6236:	ab02      	add	r3, sp, #8
    6238:	1dd9      	adds	r1, r3, #7
    623a:	23ff      	movs	r3, #255	; 0xff
    623c:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    623e:	2201      	movs	r2, #1
    6240:	0030      	movs	r0, r6
    6242:	4e35      	ldr	r6, [pc, #212]	; (6318 <sd_mmc_spi_adtc_start+0x178>)
    6244:	47b0      	blx	r6
    6246:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    6248:	ab02      	add	r3, sp, #8
    624a:	1dde      	adds	r6, r3, #7
    624c:	4f30      	ldr	r7, [pc, #192]	; (6310 <sd_mmc_spi_adtc_start+0x170>)
    624e:	4d32      	ldr	r5, [pc, #200]	; (6318 <sd_mmc_spi_adtc_start+0x178>)
    6250:	23ff      	movs	r3, #255	; 0xff
    6252:	2201      	movs	r2, #1
    6254:	0031      	movs	r1, r6
    6256:	0038      	movs	r0, r7
    6258:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    625a:	7833      	ldrb	r3, [r6, #0]
    625c:	b25a      	sxtb	r2, r3
    625e:	2a00      	cmp	r2, #0
    6260:	da0b      	bge.n	627a <sd_mmc_spi_adtc_start+0xda>
    6262:	3c01      	subs	r4, #1
    6264:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    6266:	2c00      	cmp	r4, #0
    6268:	d1f2      	bne.n	6250 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    626a:	2202      	movs	r2, #2
    626c:	4b27      	ldr	r3, [pc, #156]	; (630c <sd_mmc_spi_adtc_start+0x16c>)
    626e:	701a      	strb	r2, [r3, #0]
			return false;
    6270:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    6272:	b006      	add	sp, #24
    6274:	bc04      	pop	{r2}
    6276:	4690      	mov	r8, r2
    6278:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    627a:	4a28      	ldr	r2, [pc, #160]	; (631c <sd_mmc_spi_adtc_start+0x17c>)
    627c:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    627e:	071a      	lsls	r2, r3, #28
    6280:	d41a      	bmi.n	62b8 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    6282:	075a      	lsls	r2, r3, #29
    6284:	d41d      	bmi.n	62c2 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    6286:	2201      	movs	r2, #1
    6288:	4393      	bics	r3, r2
    628a:	d11f      	bne.n	62cc <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    628c:	4643      	mov	r3, r8
    628e:	049b      	lsls	r3, r3, #18
    6290:	d420      	bmi.n	62d4 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    6292:	4643      	mov	r3, r8
    6294:	059b      	lsls	r3, r3, #22
    6296:	d425      	bmi.n	62e4 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    6298:	4643      	mov	r3, r8
    629a:	055b      	lsls	r3, r3, #21
    629c:	d42b      	bmi.n	62f6 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    629e:	4b20      	ldr	r3, [pc, #128]	; (6320 <sd_mmc_spi_adtc_start+0x180>)
    62a0:	466a      	mov	r2, sp
    62a2:	8812      	ldrh	r2, [r2, #0]
    62a4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    62a6:	4b1f      	ldr	r3, [pc, #124]	; (6324 <sd_mmc_spi_adtc_start+0x184>)
    62a8:	466a      	mov	r2, sp
    62aa:	8892      	ldrh	r2, [r2, #4]
    62ac:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    62ae:	2200      	movs	r2, #0
    62b0:	4b1d      	ldr	r3, [pc, #116]	; (6328 <sd_mmc_spi_adtc_start+0x188>)
    62b2:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    62b4:	2001      	movs	r0, #1
    62b6:	e7dc      	b.n	6272 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    62b8:	2206      	movs	r2, #6
    62ba:	4b14      	ldr	r3, [pc, #80]	; (630c <sd_mmc_spi_adtc_start+0x16c>)
    62bc:	701a      	strb	r2, [r3, #0]
		return false;
    62be:	2000      	movs	r0, #0
    62c0:	e7d7      	b.n	6272 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    62c2:	2209      	movs	r2, #9
    62c4:	4b11      	ldr	r3, [pc, #68]	; (630c <sd_mmc_spi_adtc_start+0x16c>)
    62c6:	701a      	strb	r2, [r3, #0]
		return false;
    62c8:	2000      	movs	r0, #0
    62ca:	e7d2      	b.n	6272 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    62cc:	4b0f      	ldr	r3, [pc, #60]	; (630c <sd_mmc_spi_adtc_start+0x16c>)
    62ce:	701a      	strb	r2, [r3, #0]
		return false;
    62d0:	2000      	movs	r0, #0
    62d2:	e7ce      	b.n	6272 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    62d4:	4b15      	ldr	r3, [pc, #84]	; (632c <sd_mmc_spi_adtc_start+0x18c>)
    62d6:	4798      	blx	r3
    62d8:	2800      	cmp	r0, #0
    62da:	d1da      	bne.n	6292 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    62dc:	2203      	movs	r2, #3
    62de:	4b0b      	ldr	r3, [pc, #44]	; (630c <sd_mmc_spi_adtc_start+0x16c>)
    62e0:	701a      	strb	r2, [r3, #0]
			return false;
    62e2:	e7c6      	b.n	6272 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    62e4:	490d      	ldr	r1, [pc, #52]	; (631c <sd_mmc_spi_adtc_start+0x17c>)
    62e6:	2300      	movs	r3, #0
    62e8:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    62ea:	33ff      	adds	r3, #255	; 0xff
    62ec:	2201      	movs	r2, #1
    62ee:	4808      	ldr	r0, [pc, #32]	; (6310 <sd_mmc_spi_adtc_start+0x170>)
    62f0:	4e09      	ldr	r6, [pc, #36]	; (6318 <sd_mmc_spi_adtc_start+0x178>)
    62f2:	47b0      	blx	r6
    62f4:	e7d0      	b.n	6298 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    62f6:	4e09      	ldr	r6, [pc, #36]	; (631c <sd_mmc_spi_adtc_start+0x17c>)
    62f8:	23ff      	movs	r3, #255	; 0xff
    62fa:	2204      	movs	r2, #4
    62fc:	0031      	movs	r1, r6
    62fe:	4804      	ldr	r0, [pc, #16]	; (6310 <sd_mmc_spi_adtc_start+0x170>)
    6300:	4f05      	ldr	r7, [pc, #20]	; (6318 <sd_mmc_spi_adtc_start+0x178>)
    6302:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    6304:	6833      	ldr	r3, [r6, #0]
    6306:	ba1b      	rev	r3, r3
    6308:	6033      	str	r3, [r6, #0]
    630a:	e7c8      	b.n	629e <sd_mmc_spi_adtc_start+0xfe>
    630c:	20000393 	.word	0x20000393
    6310:	20000380 	.word	0x20000380
    6314:	000059d1 	.word	0x000059d1
    6318:	000057c5 	.word	0x000057c5
    631c:	20000398 	.word	0x20000398
    6320:	2000038c 	.word	0x2000038c
    6324:	20000394 	.word	0x20000394
    6328:	2000039c 	.word	0x2000039c
    632c:	00005e41 	.word	0x00005e41

00006330 <sd_mmc_spi_send_cmd>:
{
    6330:	b510      	push	{r4, lr}
    6332:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    6334:	2300      	movs	r3, #0
    6336:	9300      	str	r3, [sp, #0]
    6338:	2200      	movs	r2, #0
    633a:	4c02      	ldr	r4, [pc, #8]	; (6344 <sd_mmc_spi_send_cmd+0x14>)
    633c:	47a0      	blx	r4
}
    633e:	b002      	add	sp, #8
    6340:	bd10      	pop	{r4, pc}
    6342:	46c0      	nop			; (mov r8, r8)
    6344:	000061a1 	.word	0x000061a1

00006348 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    6348:	4b01      	ldr	r3, [pc, #4]	; (6350 <sd_mmc_spi_get_response+0x8>)
    634a:	6818      	ldr	r0, [r3, #0]
}
    634c:	4770      	bx	lr
    634e:	46c0      	nop			; (mov r8, r8)
    6350:	20000398 	.word	0x20000398

00006354 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    6354:	b510      	push	{r4, lr}
    6356:	b084      	sub	sp, #16
    6358:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    635a:	2200      	movs	r2, #0
    635c:	4b14      	ldr	r3, [pc, #80]	; (63b0 <sd_mmc_spi_read_word+0x5c>)
    635e:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    6360:	4b14      	ldr	r3, [pc, #80]	; (63b4 <sd_mmc_spi_read_word+0x60>)
    6362:	8819      	ldrh	r1, [r3, #0]
    6364:	4b14      	ldr	r3, [pc, #80]	; (63b8 <sd_mmc_spi_read_word+0x64>)
    6366:	6818      	ldr	r0, [r3, #0]
    6368:	4b14      	ldr	r3, [pc, #80]	; (63bc <sd_mmc_spi_read_word+0x68>)
    636a:	4798      	blx	r3
    636c:	2900      	cmp	r1, #0
    636e:	d103      	bne.n	6378 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    6370:	4b13      	ldr	r3, [pc, #76]	; (63c0 <sd_mmc_spi_read_word+0x6c>)
    6372:	4798      	blx	r3
    6374:	2800      	cmp	r0, #0
    6376:	d010      	beq.n	639a <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    6378:	23ff      	movs	r3, #255	; 0xff
    637a:	2204      	movs	r2, #4
    637c:	a901      	add	r1, sp, #4
    637e:	4811      	ldr	r0, [pc, #68]	; (63c4 <sd_mmc_spi_read_word+0x70>)
    6380:	4c11      	ldr	r4, [pc, #68]	; (63c8 <sd_mmc_spi_read_word+0x74>)
    6382:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    6384:	4b0c      	ldr	r3, [pc, #48]	; (63b8 <sd_mmc_spi_read_word+0x64>)
    6386:	681a      	ldr	r2, [r3, #0]
    6388:	1d10      	adds	r0, r2, #4
    638a:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    638c:	4b09      	ldr	r3, [pc, #36]	; (63b4 <sd_mmc_spi_read_word+0x60>)
    638e:	8819      	ldrh	r1, [r3, #0]
    6390:	4b0a      	ldr	r3, [pc, #40]	; (63bc <sd_mmc_spi_read_word+0x68>)
    6392:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    6394:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    6396:	2900      	cmp	r1, #0
    6398:	d001      	beq.n	639e <sd_mmc_spi_read_word+0x4a>
}
    639a:	b004      	add	sp, #16
    639c:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    639e:	23ff      	movs	r3, #255	; 0xff
    63a0:	2202      	movs	r2, #2
    63a2:	a903      	add	r1, sp, #12
    63a4:	4807      	ldr	r0, [pc, #28]	; (63c4 <sd_mmc_spi_read_word+0x70>)
    63a6:	4c08      	ldr	r4, [pc, #32]	; (63c8 <sd_mmc_spi_read_word+0x74>)
    63a8:	47a0      	blx	r4
	return true;
    63aa:	2001      	movs	r0, #1
    63ac:	e7f5      	b.n	639a <sd_mmc_spi_read_word+0x46>
    63ae:	46c0      	nop			; (mov r8, r8)
    63b0:	20000393 	.word	0x20000393
    63b4:	2000038c 	.word	0x2000038c
    63b8:	2000039c 	.word	0x2000039c
    63bc:	00006c7d 	.word	0x00006c7d
    63c0:	00005f1d 	.word	0x00005f1d
    63c4:	20000380 	.word	0x20000380
    63c8:	000057c5 	.word	0x000057c5

000063cc <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    63cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    63ce:	46de      	mov	lr, fp
    63d0:	4657      	mov	r7, sl
    63d2:	4646      	mov	r6, r8
    63d4:	b5c0      	push	{r6, r7, lr}
    63d6:	b082      	sub	sp, #8
    63d8:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    63da:	2200      	movs	r2, #0
    63dc:	4b17      	ldr	r3, [pc, #92]	; (643c <sd_mmc_spi_start_read_blocks+0x70>)
    63de:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    63e0:	1e4c      	subs	r4, r1, #1
    63e2:	b2a4      	uxth	r4, r4
    63e4:	2900      	cmp	r1, #0
    63e6:	d026      	beq.n	6436 <sd_mmc_spi_start_read_blocks+0x6a>
    63e8:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    63ea:	4b15      	ldr	r3, [pc, #84]	; (6440 <sd_mmc_spi_start_read_blocks+0x74>)
    63ec:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    63ee:	4f15      	ldr	r7, [pc, #84]	; (6444 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    63f0:	47d0      	blx	sl
    63f2:	4680      	mov	r8, r0
    63f4:	2800      	cmp	r0, #0
    63f6:	d017      	beq.n	6428 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    63f8:	883a      	ldrh	r2, [r7, #0]
    63fa:	465b      	mov	r3, fp
    63fc:	1999      	adds	r1, r3, r6
    63fe:	23ff      	movs	r3, #255	; 0xff
    6400:	4811      	ldr	r0, [pc, #68]	; (6448 <sd_mmc_spi_start_read_blocks+0x7c>)
    6402:	4d12      	ldr	r5, [pc, #72]	; (644c <sd_mmc_spi_start_read_blocks+0x80>)
    6404:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    6406:	883b      	ldrh	r3, [r7, #0]
    6408:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    640a:	4a11      	ldr	r2, [pc, #68]	; (6450 <sd_mmc_spi_start_read_blocks+0x84>)
    640c:	6811      	ldr	r1, [r2, #0]
    640e:	468c      	mov	ip, r1
    6410:	4463      	add	r3, ip
    6412:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    6414:	23ff      	movs	r3, #255	; 0xff
    6416:	2202      	movs	r2, #2
    6418:	a901      	add	r1, sp, #4
    641a:	480b      	ldr	r0, [pc, #44]	; (6448 <sd_mmc_spi_start_read_blocks+0x7c>)
    641c:	47a8      	blx	r5
	while (nb_block--) {
    641e:	3c01      	subs	r4, #1
    6420:	b2a4      	uxth	r4, r4
    6422:	4b0c      	ldr	r3, [pc, #48]	; (6454 <sd_mmc_spi_start_read_blocks+0x88>)
    6424:	429c      	cmp	r4, r3
    6426:	d1e3      	bne.n	63f0 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    6428:	4640      	mov	r0, r8
    642a:	b002      	add	sp, #8
    642c:	bc1c      	pop	{r2, r3, r4}
    642e:	4690      	mov	r8, r2
    6430:	469a      	mov	sl, r3
    6432:	46a3      	mov	fp, r4
    6434:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    6436:	2301      	movs	r3, #1
    6438:	4698      	mov	r8, r3
    643a:	e7f5      	b.n	6428 <sd_mmc_spi_start_read_blocks+0x5c>
    643c:	20000393 	.word	0x20000393
    6440:	00005f1d 	.word	0x00005f1d
    6444:	2000038c 	.word	0x2000038c
    6448:	20000380 	.word	0x20000380
    644c:	000057c5 	.word	0x000057c5
    6450:	2000039c 	.word	0x2000039c
    6454:	0000ffff 	.word	0x0000ffff

00006458 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    6458:	2001      	movs	r0, #1
    645a:	4770      	bx	lr

0000645c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    645c:	b5f0      	push	{r4, r5, r6, r7, lr}
    645e:	46c6      	mov	lr, r8
    6460:	b500      	push	{lr}
    6462:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    6464:	2200      	movs	r2, #0
    6466:	4b15      	ldr	r3, [pc, #84]	; (64bc <sd_mmc_spi_start_write_blocks+0x60>)
    6468:	701a      	strb	r2, [r3, #0]
	pos = 0;
    646a:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    646c:	4f14      	ldr	r7, [pc, #80]	; (64c0 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    646e:	4e15      	ldr	r6, [pc, #84]	; (64c4 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    6470:	e000      	b.n	6474 <sd_mmc_spi_start_write_blocks+0x18>
{
    6472:	0021      	movs	r1, r4
	while (nb_block--) {
    6474:	1e4c      	subs	r4, r1, #1
    6476:	b2a4      	uxth	r4, r4
    6478:	2900      	cmp	r1, #0
    647a:	d01b      	beq.n	64b4 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    647c:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    647e:	8832      	ldrh	r2, [r6, #0]
    6480:	4643      	mov	r3, r8
    6482:	1959      	adds	r1, r3, r5
    6484:	4810      	ldr	r0, [pc, #64]	; (64c8 <sd_mmc_spi_start_write_blocks+0x6c>)
    6486:	4b11      	ldr	r3, [pc, #68]	; (64cc <sd_mmc_spi_start_write_blocks+0x70>)
    6488:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    648a:	8833      	ldrh	r3, [r6, #0]
    648c:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    648e:	4a10      	ldr	r2, [pc, #64]	; (64d0 <sd_mmc_spi_start_write_blocks+0x74>)
    6490:	6811      	ldr	r1, [r2, #0]
    6492:	468c      	mov	ip, r1
    6494:	4463      	add	r3, ip
    6496:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    6498:	4b0e      	ldr	r3, [pc, #56]	; (64d4 <sd_mmc_spi_start_write_blocks+0x78>)
    649a:	4798      	blx	r3
    649c:	2800      	cmp	r0, #0
    649e:	d00a      	beq.n	64b6 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    64a0:	2c00      	cmp	r4, #0
    64a2:	d0e6      	beq.n	6472 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    64a4:	4b0c      	ldr	r3, [pc, #48]	; (64d8 <sd_mmc_spi_start_write_blocks+0x7c>)
    64a6:	4798      	blx	r3
    64a8:	2800      	cmp	r0, #0
    64aa:	d1e2      	bne.n	6472 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    64ac:	2205      	movs	r2, #5
    64ae:	4b03      	ldr	r3, [pc, #12]	; (64bc <sd_mmc_spi_start_write_blocks+0x60>)
    64b0:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    64b2:	e000      	b.n	64b6 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    64b4:	2001      	movs	r0, #1
}
    64b6:	bc04      	pop	{r2}
    64b8:	4690      	mov	r8, r2
    64ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64bc:	20000393 	.word	0x20000393
    64c0:	00005df9 	.word	0x00005df9
    64c4:	2000038c 	.word	0x2000038c
    64c8:	20000380 	.word	0x20000380
    64cc:	000059d1 	.word	0x000059d1
    64d0:	2000039c 	.word	0x2000039c
    64d4:	00005f89 	.word	0x00005f89
    64d8:	00005e41 	.word	0x00005e41

000064dc <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    64dc:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    64de:	4b05      	ldr	r3, [pc, #20]	; (64f4 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    64e0:	4798      	blx	r3
    64e2:	2800      	cmp	r0, #0
    64e4:	d103      	bne.n	64ee <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    64e6:	2205      	movs	r2, #5
    64e8:	4b03      	ldr	r3, [pc, #12]	; (64f8 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    64ea:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    64ec:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    64ee:	4b03      	ldr	r3, [pc, #12]	; (64fc <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    64f0:	4798      	blx	r3
    64f2:	e7fb      	b.n	64ec <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    64f4:	00005e41 	.word	0x00005e41
    64f8:	20000393 	.word	0x20000393
    64fc:	00005ea5 	.word	0x00005ea5

00006500 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
    6500:	2001      	movs	r0, #1
    6502:	4770      	bx	lr

00006504 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    6504:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    6506:	2301      	movs	r3, #1
    6508:	2800      	cmp	r0, #0
    650a:	d001      	beq.n	6510 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    650c:	0018      	movs	r0, r3
    650e:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    6510:	4b01      	ldr	r3, [pc, #4]	; (6518 <mem_test_unit_ready+0x14>)
    6512:	4798      	blx	r3
    6514:	0003      	movs	r3, r0
    6516:	e7f9      	b.n	650c <mem_test_unit_ready+0x8>
    6518:	00005c29 	.word	0x00005c29

0000651c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    651c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    651e:	2301      	movs	r3, #1
    6520:	2800      	cmp	r0, #0
    6522:	d001      	beq.n	6528 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    6524:	0018      	movs	r0, r3
    6526:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    6528:	0008      	movs	r0, r1
    652a:	4b02      	ldr	r3, [pc, #8]	; (6534 <mem_read_capacity+0x18>)
    652c:	4798      	blx	r3
    652e:	0003      	movs	r3, r0
    6530:	e7f8      	b.n	6524 <mem_read_capacity+0x8>
    6532:	46c0      	nop			; (mov r8, r8)
    6534:	00005c59 	.word	0x00005c59

00006538 <mem_unload>:
  return sector_size;
}


bool mem_unload(U8 lun, bool unload)
{
    6538:	0003      	movs	r3, r0

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    653a:	2000      	movs	r0, #0
    653c:	2b00      	cmp	r3, #0
    653e:	d101      	bne.n	6544 <mem_unload+0xc>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
    6540:	3001      	adds	r0, #1
    6542:	4048      	eors	r0, r1
#endif

  Ctrl_access_unlock();

  return unloaded;
}
    6544:	4770      	bx	lr
	...

00006548 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    6548:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    654a:	2301      	movs	r3, #1
    654c:	2800      	cmp	r0, #0
    654e:	d001      	beq.n	6554 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    6550:	0018      	movs	r0, r3
    6552:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    6554:	4b01      	ldr	r3, [pc, #4]	; (655c <mem_wr_protect+0x14>)
    6556:	4798      	blx	r3
    6558:	0003      	movs	r3, r0
    655a:	e7f9      	b.n	6550 <mem_wr_protect+0x8>
    655c:	00005c69 	.word	0x00005c69

00006560 <mem_removal>:


bool mem_removal(U8 lun)
{
    6560:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    6562:	2301      	movs	r3, #1
    6564:	2800      	cmp	r0, #0
    6566:	d001      	beq.n	656c <mem_removal+0xc>
#endif

  Ctrl_access_unlock();

  return removal;
}
    6568:	0018      	movs	r0, r3
    656a:	bd10      	pop	{r4, pc}
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    656c:	4b01      	ldr	r3, [pc, #4]	; (6574 <mem_removal+0x14>)
    656e:	4798      	blx	r3
    6570:	0003      	movs	r3, r0
    6572:	e7f9      	b.n	6568 <mem_removal+0x8>
    6574:	00005c79 	.word	0x00005c79

00006578 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    6578:	2800      	cmp	r0, #0
    657a:	d101      	bne.n	6580 <mem_name+0x8>
    657c:	4801      	ldr	r0, [pc, #4]	; (6584 <mem_name+0xc>)
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    657e:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
    6580:	2000      	movs	r0, #0
    6582:	e7fc      	b.n	657e <mem_name+0x6>
    6584:	0000848c 	.word	0x0000848c

00006588 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
    6588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    658a:	0005      	movs	r5, r0
    658c:	000e      	movs	r6, r1
    658e:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
    6590:	4b07      	ldr	r3, [pc, #28]	; (65b0 <memory_2_usb+0x28>)
    6592:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    6594:	2401      	movs	r4, #1
    6596:	2d00      	cmp	r5, #0
    6598:	d003      	beq.n	65a2 <memory_2_usb+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
    659a:	4b06      	ldr	r3, [pc, #24]	; (65b4 <memory_2_usb+0x2c>)
    659c:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    659e:	0020      	movs	r0, r4
    65a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    65a2:	0039      	movs	r1, r7
    65a4:	0030      	movs	r0, r6
    65a6:	4b04      	ldr	r3, [pc, #16]	; (65b8 <memory_2_usb+0x30>)
    65a8:	4798      	blx	r3
    65aa:	0004      	movs	r4, r0
    65ac:	e7f5      	b.n	659a <memory_2_usb+0x12>
    65ae:	46c0      	nop			; (mov r8, r8)
    65b0:	00004111 	.word	0x00004111
    65b4:	00004113 	.word	0x00004113
    65b8:	00005d2d 	.word	0x00005d2d

000065bc <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
    65bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65be:	0005      	movs	r5, r0
    65c0:	000e      	movs	r6, r1
    65c2:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
    65c4:	4b07      	ldr	r3, [pc, #28]	; (65e4 <usb_2_memory+0x28>)
    65c6:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    65c8:	2401      	movs	r4, #1
    65ca:	2d00      	cmp	r5, #0
    65cc:	d003      	beq.n	65d6 <usb_2_memory+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
    65ce:	4b06      	ldr	r3, [pc, #24]	; (65e8 <usb_2_memory+0x2c>)
    65d0:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    65d2:	0020      	movs	r0, r4
    65d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    65d6:	0039      	movs	r1, r7
    65d8:	0030      	movs	r0, r6
    65da:	4b04      	ldr	r3, [pc, #16]	; (65ec <usb_2_memory+0x30>)
    65dc:	4798      	blx	r3
    65de:	0004      	movs	r4, r0
    65e0:	e7f5      	b.n	65ce <usb_2_memory+0x12>
    65e2:	46c0      	nop			; (mov r8, r8)
    65e4:	00004115 	.word	0x00004115
    65e8:	00004117 	.word	0x00004117
    65ec:	00005de5 	.word	0x00005de5

000065f0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    65f0:	4b0c      	ldr	r3, [pc, #48]	; (6624 <cpu_irq_enter_critical+0x34>)
    65f2:	681b      	ldr	r3, [r3, #0]
    65f4:	2b00      	cmp	r3, #0
    65f6:	d106      	bne.n	6606 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    65f8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    65fc:	2b00      	cmp	r3, #0
    65fe:	d007      	beq.n	6610 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    6600:	2200      	movs	r2, #0
    6602:	4b09      	ldr	r3, [pc, #36]	; (6628 <cpu_irq_enter_critical+0x38>)
    6604:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    6606:	4a07      	ldr	r2, [pc, #28]	; (6624 <cpu_irq_enter_critical+0x34>)
    6608:	6813      	ldr	r3, [r2, #0]
    660a:	3301      	adds	r3, #1
    660c:	6013      	str	r3, [r2, #0]
}
    660e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    6610:	b672      	cpsid	i
    6612:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    6616:	2200      	movs	r2, #0
    6618:	4b04      	ldr	r3, [pc, #16]	; (662c <cpu_irq_enter_critical+0x3c>)
    661a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    661c:	3201      	adds	r2, #1
    661e:	4b02      	ldr	r3, [pc, #8]	; (6628 <cpu_irq_enter_critical+0x38>)
    6620:	701a      	strb	r2, [r3, #0]
    6622:	e7f0      	b.n	6606 <cpu_irq_enter_critical+0x16>
    6624:	200003a4 	.word	0x200003a4
    6628:	200003a8 	.word	0x200003a8
    662c:	200000f9 	.word	0x200000f9

00006630 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    6630:	4b08      	ldr	r3, [pc, #32]	; (6654 <cpu_irq_leave_critical+0x24>)
    6632:	681a      	ldr	r2, [r3, #0]
    6634:	3a01      	subs	r2, #1
    6636:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    6638:	681b      	ldr	r3, [r3, #0]
    663a:	2b00      	cmp	r3, #0
    663c:	d109      	bne.n	6652 <cpu_irq_leave_critical+0x22>
    663e:	4b06      	ldr	r3, [pc, #24]	; (6658 <cpu_irq_leave_critical+0x28>)
    6640:	781b      	ldrb	r3, [r3, #0]
    6642:	2b00      	cmp	r3, #0
    6644:	d005      	beq.n	6652 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    6646:	2201      	movs	r2, #1
    6648:	4b04      	ldr	r3, [pc, #16]	; (665c <cpu_irq_leave_critical+0x2c>)
    664a:	701a      	strb	r2, [r3, #0]
    664c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    6650:	b662      	cpsie	i
	}
}
    6652:	4770      	bx	lr
    6654:	200003a4 	.word	0x200003a4
    6658:	200003a8 	.word	0x200003a8
    665c:	200000f9 	.word	0x200000f9

00006660 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    6660:	b5f0      	push	{r4, r5, r6, r7, lr}
    6662:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    6664:	ac01      	add	r4, sp, #4
    6666:	2501      	movs	r5, #1
    6668:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    666a:	2700      	movs	r7, #0
    666c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    666e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    6670:	0021      	movs	r1, r4
    6672:	203e      	movs	r0, #62	; 0x3e
    6674:	4e06      	ldr	r6, [pc, #24]	; (6690 <system_board_init+0x30>)
    6676:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    6678:	2280      	movs	r2, #128	; 0x80
    667a:	05d2      	lsls	r2, r2, #23
    667c:	4b05      	ldr	r3, [pc, #20]	; (6694 <system_board_init+0x34>)
    667e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    6680:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    6682:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    6684:	0021      	movs	r1, r4
    6686:	200f      	movs	r0, #15
    6688:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    668a:	b003      	add	sp, #12
    668c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    668e:	46c0      	nop			; (mov r8, r8)
    6690:	00006699 	.word	0x00006699
    6694:	41004480 	.word	0x41004480

00006698 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    6698:	b500      	push	{lr}
    669a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    669c:	ab01      	add	r3, sp, #4
    669e:	2280      	movs	r2, #128	; 0x80
    66a0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    66a2:	780a      	ldrb	r2, [r1, #0]
    66a4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    66a6:	784a      	ldrb	r2, [r1, #1]
    66a8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    66aa:	788a      	ldrb	r2, [r1, #2]
    66ac:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    66ae:	0019      	movs	r1, r3
    66b0:	4b01      	ldr	r3, [pc, #4]	; (66b8 <port_pin_set_config+0x20>)
    66b2:	4798      	blx	r3
}
    66b4:	b003      	add	sp, #12
    66b6:	bd00      	pop	{pc}
    66b8:	000069ed 	.word	0x000069ed

000066bc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    66bc:	4a06      	ldr	r2, [pc, #24]	; (66d8 <system_gclk_init+0x1c>)
    66be:	6993      	ldr	r3, [r2, #24]
    66c0:	2108      	movs	r1, #8
    66c2:	430b      	orrs	r3, r1
    66c4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    66c6:	2201      	movs	r2, #1
    66c8:	4b04      	ldr	r3, [pc, #16]	; (66dc <system_gclk_init+0x20>)
    66ca:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    66cc:	0019      	movs	r1, r3
    66ce:	780b      	ldrb	r3, [r1, #0]
    66d0:	4213      	tst	r3, r2
    66d2:	d1fc      	bne.n	66ce <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    66d4:	4770      	bx	lr
    66d6:	46c0      	nop			; (mov r8, r8)
    66d8:	40000400 	.word	0x40000400
    66dc:	40000c00 	.word	0x40000c00

000066e0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    66e0:	b570      	push	{r4, r5, r6, lr}
    66e2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    66e4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    66e6:	780d      	ldrb	r5, [r1, #0]
    66e8:	022d      	lsls	r5, r5, #8
    66ea:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    66ec:	784b      	ldrb	r3, [r1, #1]
    66ee:	2b00      	cmp	r3, #0
    66f0:	d002      	beq.n	66f8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    66f2:	2380      	movs	r3, #128	; 0x80
    66f4:	02db      	lsls	r3, r3, #11
    66f6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    66f8:	7a4b      	ldrb	r3, [r1, #9]
    66fa:	2b00      	cmp	r3, #0
    66fc:	d002      	beq.n	6704 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    66fe:	2380      	movs	r3, #128	; 0x80
    6700:	031b      	lsls	r3, r3, #12
    6702:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6704:	6848      	ldr	r0, [r1, #4]
    6706:	2801      	cmp	r0, #1
    6708:	d910      	bls.n	672c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    670a:	1e43      	subs	r3, r0, #1
    670c:	4218      	tst	r0, r3
    670e:	d134      	bne.n	677a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6710:	2802      	cmp	r0, #2
    6712:	d930      	bls.n	6776 <system_gclk_gen_set_config+0x96>
    6714:	2302      	movs	r3, #2
    6716:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    6718:	3201      	adds	r2, #1
						mask <<= 1) {
    671a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    671c:	4298      	cmp	r0, r3
    671e:	d8fb      	bhi.n	6718 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6720:	0212      	lsls	r2, r2, #8
    6722:	4332      	orrs	r2, r6
    6724:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6726:	2380      	movs	r3, #128	; 0x80
    6728:	035b      	lsls	r3, r3, #13
    672a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    672c:	7a0b      	ldrb	r3, [r1, #8]
    672e:	2b00      	cmp	r3, #0
    6730:	d002      	beq.n	6738 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6732:	2380      	movs	r3, #128	; 0x80
    6734:	039b      	lsls	r3, r3, #14
    6736:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6738:	4a13      	ldr	r2, [pc, #76]	; (6788 <system_gclk_gen_set_config+0xa8>)
    673a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    673c:	b25b      	sxtb	r3, r3
    673e:	2b00      	cmp	r3, #0
    6740:	dbfb      	blt.n	673a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    6742:	4b12      	ldr	r3, [pc, #72]	; (678c <system_gclk_gen_set_config+0xac>)
    6744:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6746:	4b12      	ldr	r3, [pc, #72]	; (6790 <system_gclk_gen_set_config+0xb0>)
    6748:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    674a:	4a0f      	ldr	r2, [pc, #60]	; (6788 <system_gclk_gen_set_config+0xa8>)
    674c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    674e:	b25b      	sxtb	r3, r3
    6750:	2b00      	cmp	r3, #0
    6752:	dbfb      	blt.n	674c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6754:	4b0c      	ldr	r3, [pc, #48]	; (6788 <system_gclk_gen_set_config+0xa8>)
    6756:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6758:	001a      	movs	r2, r3
    675a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    675c:	b25b      	sxtb	r3, r3
    675e:	2b00      	cmp	r3, #0
    6760:	dbfb      	blt.n	675a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6762:	4a09      	ldr	r2, [pc, #36]	; (6788 <system_gclk_gen_set_config+0xa8>)
    6764:	6853      	ldr	r3, [r2, #4]
    6766:	2180      	movs	r1, #128	; 0x80
    6768:	0249      	lsls	r1, r1, #9
    676a:	400b      	ands	r3, r1
    676c:	431d      	orrs	r5, r3
    676e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    6770:	4b08      	ldr	r3, [pc, #32]	; (6794 <system_gclk_gen_set_config+0xb4>)
    6772:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6774:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    6776:	2200      	movs	r2, #0
    6778:	e7d2      	b.n	6720 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    677a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    677c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    677e:	2380      	movs	r3, #128	; 0x80
    6780:	029b      	lsls	r3, r3, #10
    6782:	431d      	orrs	r5, r3
    6784:	e7d2      	b.n	672c <system_gclk_gen_set_config+0x4c>
    6786:	46c0      	nop			; (mov r8, r8)
    6788:	40000c00 	.word	0x40000c00
    678c:	000065f1 	.word	0x000065f1
    6790:	40000c08 	.word	0x40000c08
    6794:	00006631 	.word	0x00006631

00006798 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6798:	b510      	push	{r4, lr}
    679a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    679c:	4a0b      	ldr	r2, [pc, #44]	; (67cc <system_gclk_gen_enable+0x34>)
    679e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    67a0:	b25b      	sxtb	r3, r3
    67a2:	2b00      	cmp	r3, #0
    67a4:	dbfb      	blt.n	679e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    67a6:	4b0a      	ldr	r3, [pc, #40]	; (67d0 <system_gclk_gen_enable+0x38>)
    67a8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    67aa:	4b0a      	ldr	r3, [pc, #40]	; (67d4 <system_gclk_gen_enable+0x3c>)
    67ac:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    67ae:	4a07      	ldr	r2, [pc, #28]	; (67cc <system_gclk_gen_enable+0x34>)
    67b0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    67b2:	b25b      	sxtb	r3, r3
    67b4:	2b00      	cmp	r3, #0
    67b6:	dbfb      	blt.n	67b0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    67b8:	4a04      	ldr	r2, [pc, #16]	; (67cc <system_gclk_gen_enable+0x34>)
    67ba:	6851      	ldr	r1, [r2, #4]
    67bc:	2380      	movs	r3, #128	; 0x80
    67be:	025b      	lsls	r3, r3, #9
    67c0:	430b      	orrs	r3, r1
    67c2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    67c4:	4b04      	ldr	r3, [pc, #16]	; (67d8 <system_gclk_gen_enable+0x40>)
    67c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    67c8:	bd10      	pop	{r4, pc}
    67ca:	46c0      	nop			; (mov r8, r8)
    67cc:	40000c00 	.word	0x40000c00
    67d0:	000065f1 	.word	0x000065f1
    67d4:	40000c04 	.word	0x40000c04
    67d8:	00006631 	.word	0x00006631

000067dc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    67dc:	b570      	push	{r4, r5, r6, lr}
    67de:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    67e0:	4a1a      	ldr	r2, [pc, #104]	; (684c <system_gclk_gen_get_hz+0x70>)
    67e2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    67e4:	b25b      	sxtb	r3, r3
    67e6:	2b00      	cmp	r3, #0
    67e8:	dbfb      	blt.n	67e2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    67ea:	4b19      	ldr	r3, [pc, #100]	; (6850 <system_gclk_gen_get_hz+0x74>)
    67ec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    67ee:	4b19      	ldr	r3, [pc, #100]	; (6854 <system_gclk_gen_get_hz+0x78>)
    67f0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    67f2:	4a16      	ldr	r2, [pc, #88]	; (684c <system_gclk_gen_get_hz+0x70>)
    67f4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    67f6:	b25b      	sxtb	r3, r3
    67f8:	2b00      	cmp	r3, #0
    67fa:	dbfb      	blt.n	67f4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    67fc:	4e13      	ldr	r6, [pc, #76]	; (684c <system_gclk_gen_get_hz+0x70>)
    67fe:	6870      	ldr	r0, [r6, #4]
    6800:	04c0      	lsls	r0, r0, #19
    6802:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6804:	4b14      	ldr	r3, [pc, #80]	; (6858 <system_gclk_gen_get_hz+0x7c>)
    6806:	4798      	blx	r3
    6808:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    680a:	4b12      	ldr	r3, [pc, #72]	; (6854 <system_gclk_gen_get_hz+0x78>)
    680c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    680e:	6876      	ldr	r6, [r6, #4]
    6810:	02f6      	lsls	r6, r6, #11
    6812:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6814:	4b11      	ldr	r3, [pc, #68]	; (685c <system_gclk_gen_get_hz+0x80>)
    6816:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6818:	4a0c      	ldr	r2, [pc, #48]	; (684c <system_gclk_gen_get_hz+0x70>)
    681a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    681c:	b25b      	sxtb	r3, r3
    681e:	2b00      	cmp	r3, #0
    6820:	dbfb      	blt.n	681a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6822:	4b0a      	ldr	r3, [pc, #40]	; (684c <system_gclk_gen_get_hz+0x70>)
    6824:	689c      	ldr	r4, [r3, #8]
    6826:	0224      	lsls	r4, r4, #8
    6828:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    682a:	4b0d      	ldr	r3, [pc, #52]	; (6860 <system_gclk_gen_get_hz+0x84>)
    682c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    682e:	2e00      	cmp	r6, #0
    6830:	d107      	bne.n	6842 <system_gclk_gen_get_hz+0x66>
    6832:	2c01      	cmp	r4, #1
    6834:	d907      	bls.n	6846 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    6836:	0021      	movs	r1, r4
    6838:	0028      	movs	r0, r5
    683a:	4b0a      	ldr	r3, [pc, #40]	; (6864 <system_gclk_gen_get_hz+0x88>)
    683c:	4798      	blx	r3
    683e:	0005      	movs	r5, r0
    6840:	e001      	b.n	6846 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    6842:	3401      	adds	r4, #1
    6844:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    6846:	0028      	movs	r0, r5
    6848:	bd70      	pop	{r4, r5, r6, pc}
    684a:	46c0      	nop			; (mov r8, r8)
    684c:	40000c00 	.word	0x40000c00
    6850:	000065f1 	.word	0x000065f1
    6854:	40000c04 	.word	0x40000c04
    6858:	00002979 	.word	0x00002979
    685c:	40000c08 	.word	0x40000c08
    6860:	00006631 	.word	0x00006631
    6864:	00006b71 	.word	0x00006b71

00006868 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6868:	b510      	push	{r4, lr}
    686a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    686c:	4b06      	ldr	r3, [pc, #24]	; (6888 <system_gclk_chan_enable+0x20>)
    686e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6870:	4b06      	ldr	r3, [pc, #24]	; (688c <system_gclk_chan_enable+0x24>)
    6872:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6874:	4a06      	ldr	r2, [pc, #24]	; (6890 <system_gclk_chan_enable+0x28>)
    6876:	8853      	ldrh	r3, [r2, #2]
    6878:	2180      	movs	r1, #128	; 0x80
    687a:	01c9      	lsls	r1, r1, #7
    687c:	430b      	orrs	r3, r1
    687e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    6880:	4b04      	ldr	r3, [pc, #16]	; (6894 <system_gclk_chan_enable+0x2c>)
    6882:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6884:	bd10      	pop	{r4, pc}
    6886:	46c0      	nop			; (mov r8, r8)
    6888:	000065f1 	.word	0x000065f1
    688c:	40000c02 	.word	0x40000c02
    6890:	40000c00 	.word	0x40000c00
    6894:	00006631 	.word	0x00006631

00006898 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6898:	b510      	push	{r4, lr}
    689a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    689c:	4b0f      	ldr	r3, [pc, #60]	; (68dc <system_gclk_chan_disable+0x44>)
    689e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    68a0:	4b0f      	ldr	r3, [pc, #60]	; (68e0 <system_gclk_chan_disable+0x48>)
    68a2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    68a4:	4a0f      	ldr	r2, [pc, #60]	; (68e4 <system_gclk_chan_disable+0x4c>)
    68a6:	8853      	ldrh	r3, [r2, #2]
    68a8:	051b      	lsls	r3, r3, #20
    68aa:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    68ac:	8853      	ldrh	r3, [r2, #2]
    68ae:	490e      	ldr	r1, [pc, #56]	; (68e8 <system_gclk_chan_disable+0x50>)
    68b0:	400b      	ands	r3, r1
    68b2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    68b4:	8853      	ldrh	r3, [r2, #2]
    68b6:	490d      	ldr	r1, [pc, #52]	; (68ec <system_gclk_chan_disable+0x54>)
    68b8:	400b      	ands	r3, r1
    68ba:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    68bc:	0011      	movs	r1, r2
    68be:	2280      	movs	r2, #128	; 0x80
    68c0:	01d2      	lsls	r2, r2, #7
    68c2:	884b      	ldrh	r3, [r1, #2]
    68c4:	4213      	tst	r3, r2
    68c6:	d1fc      	bne.n	68c2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    68c8:	4906      	ldr	r1, [pc, #24]	; (68e4 <system_gclk_chan_disable+0x4c>)
    68ca:	884a      	ldrh	r2, [r1, #2]
    68cc:	0203      	lsls	r3, r0, #8
    68ce:	4806      	ldr	r0, [pc, #24]	; (68e8 <system_gclk_chan_disable+0x50>)
    68d0:	4002      	ands	r2, r0
    68d2:	4313      	orrs	r3, r2
    68d4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    68d6:	4b06      	ldr	r3, [pc, #24]	; (68f0 <system_gclk_chan_disable+0x58>)
    68d8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    68da:	bd10      	pop	{r4, pc}
    68dc:	000065f1 	.word	0x000065f1
    68e0:	40000c02 	.word	0x40000c02
    68e4:	40000c00 	.word	0x40000c00
    68e8:	fffff0ff 	.word	0xfffff0ff
    68ec:	ffffbfff 	.word	0xffffbfff
    68f0:	00006631 	.word	0x00006631

000068f4 <system_gclk_chan_set_config>:
{
    68f4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    68f6:	780c      	ldrb	r4, [r1, #0]
    68f8:	0224      	lsls	r4, r4, #8
    68fa:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    68fc:	4b02      	ldr	r3, [pc, #8]	; (6908 <system_gclk_chan_set_config+0x14>)
    68fe:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6900:	b2a4      	uxth	r4, r4
    6902:	4b02      	ldr	r3, [pc, #8]	; (690c <system_gclk_chan_set_config+0x18>)
    6904:	805c      	strh	r4, [r3, #2]
}
    6906:	bd10      	pop	{r4, pc}
    6908:	00006899 	.word	0x00006899
    690c:	40000c00 	.word	0x40000c00

00006910 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6910:	b510      	push	{r4, lr}
    6912:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6914:	4b06      	ldr	r3, [pc, #24]	; (6930 <system_gclk_chan_get_hz+0x20>)
    6916:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6918:	4b06      	ldr	r3, [pc, #24]	; (6934 <system_gclk_chan_get_hz+0x24>)
    691a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    691c:	4b06      	ldr	r3, [pc, #24]	; (6938 <system_gclk_chan_get_hz+0x28>)
    691e:	885c      	ldrh	r4, [r3, #2]
    6920:	0524      	lsls	r4, r4, #20
    6922:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    6924:	4b05      	ldr	r3, [pc, #20]	; (693c <system_gclk_chan_get_hz+0x2c>)
    6926:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6928:	0020      	movs	r0, r4
    692a:	4b05      	ldr	r3, [pc, #20]	; (6940 <system_gclk_chan_get_hz+0x30>)
    692c:	4798      	blx	r3
}
    692e:	bd10      	pop	{r4, pc}
    6930:	000065f1 	.word	0x000065f1
    6934:	40000c02 	.word	0x40000c02
    6938:	40000c00 	.word	0x40000c00
    693c:	00006631 	.word	0x00006631
    6940:	000067dd 	.word	0x000067dd

00006944 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6944:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6946:	78d3      	ldrb	r3, [r2, #3]
    6948:	2b00      	cmp	r3, #0
    694a:	d135      	bne.n	69b8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    694c:	7813      	ldrb	r3, [r2, #0]
    694e:	2b80      	cmp	r3, #128	; 0x80
    6950:	d029      	beq.n	69a6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6952:	061b      	lsls	r3, r3, #24
    6954:	2480      	movs	r4, #128	; 0x80
    6956:	0264      	lsls	r4, r4, #9
    6958:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    695a:	7854      	ldrb	r4, [r2, #1]
    695c:	2502      	movs	r5, #2
    695e:	43ac      	bics	r4, r5
    6960:	d106      	bne.n	6970 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6962:	7894      	ldrb	r4, [r2, #2]
    6964:	2c00      	cmp	r4, #0
    6966:	d120      	bne.n	69aa <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6968:	2480      	movs	r4, #128	; 0x80
    696a:	02a4      	lsls	r4, r4, #10
    696c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    696e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6970:	7854      	ldrb	r4, [r2, #1]
    6972:	3c01      	subs	r4, #1
    6974:	2c01      	cmp	r4, #1
    6976:	d91c      	bls.n	69b2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6978:	040d      	lsls	r5, r1, #16
    697a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    697c:	24a0      	movs	r4, #160	; 0xa0
    697e:	05e4      	lsls	r4, r4, #23
    6980:	432c      	orrs	r4, r5
    6982:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6984:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6986:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6988:	24d0      	movs	r4, #208	; 0xd0
    698a:	0624      	lsls	r4, r4, #24
    698c:	432c      	orrs	r4, r5
    698e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6990:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6992:	78d4      	ldrb	r4, [r2, #3]
    6994:	2c00      	cmp	r4, #0
    6996:	d122      	bne.n	69de <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6998:	035b      	lsls	r3, r3, #13
    699a:	d51c      	bpl.n	69d6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    699c:	7893      	ldrb	r3, [r2, #2]
    699e:	2b01      	cmp	r3, #1
    69a0:	d01e      	beq.n	69e0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    69a2:	6141      	str	r1, [r0, #20]
    69a4:	e017      	b.n	69d6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    69a6:	2300      	movs	r3, #0
    69a8:	e7d7      	b.n	695a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    69aa:	24c0      	movs	r4, #192	; 0xc0
    69ac:	02e4      	lsls	r4, r4, #11
    69ae:	4323      	orrs	r3, r4
    69b0:	e7dd      	b.n	696e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    69b2:	4c0d      	ldr	r4, [pc, #52]	; (69e8 <_system_pinmux_config+0xa4>)
    69b4:	4023      	ands	r3, r4
    69b6:	e7df      	b.n	6978 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    69b8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    69ba:	040c      	lsls	r4, r1, #16
    69bc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    69be:	23a0      	movs	r3, #160	; 0xa0
    69c0:	05db      	lsls	r3, r3, #23
    69c2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    69c4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    69c6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    69c8:	23d0      	movs	r3, #208	; 0xd0
    69ca:	061b      	lsls	r3, r3, #24
    69cc:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    69ce:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    69d0:	78d3      	ldrb	r3, [r2, #3]
    69d2:	2b00      	cmp	r3, #0
    69d4:	d103      	bne.n	69de <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    69d6:	7853      	ldrb	r3, [r2, #1]
    69d8:	3b01      	subs	r3, #1
    69da:	2b01      	cmp	r3, #1
    69dc:	d902      	bls.n	69e4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    69de:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    69e0:	6181      	str	r1, [r0, #24]
    69e2:	e7f8      	b.n	69d6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    69e4:	6081      	str	r1, [r0, #8]
}
    69e6:	e7fa      	b.n	69de <_system_pinmux_config+0x9a>
    69e8:	fffbffff 	.word	0xfffbffff

000069ec <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    69ec:	b510      	push	{r4, lr}
    69ee:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    69f0:	09c1      	lsrs	r1, r0, #7
		return NULL;
    69f2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    69f4:	2900      	cmp	r1, #0
    69f6:	d104      	bne.n	6a02 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    69f8:	0943      	lsrs	r3, r0, #5
    69fa:	01db      	lsls	r3, r3, #7
    69fc:	4905      	ldr	r1, [pc, #20]	; (6a14 <system_pinmux_pin_set_config+0x28>)
    69fe:	468c      	mov	ip, r1
    6a00:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6a02:	241f      	movs	r4, #31
    6a04:	4020      	ands	r0, r4
    6a06:	2101      	movs	r1, #1
    6a08:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    6a0a:	0018      	movs	r0, r3
    6a0c:	4b02      	ldr	r3, [pc, #8]	; (6a18 <system_pinmux_pin_set_config+0x2c>)
    6a0e:	4798      	blx	r3
}
    6a10:	bd10      	pop	{r4, pc}
    6a12:	46c0      	nop			; (mov r8, r8)
    6a14:	41004400 	.word	0x41004400
    6a18:	00006945 	.word	0x00006945

00006a1c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6a1c:	4770      	bx	lr
	...

00006a20 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6a20:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6a22:	4b05      	ldr	r3, [pc, #20]	; (6a38 <system_init+0x18>)
    6a24:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6a26:	4b05      	ldr	r3, [pc, #20]	; (6a3c <system_init+0x1c>)
    6a28:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6a2a:	4b05      	ldr	r3, [pc, #20]	; (6a40 <system_init+0x20>)
    6a2c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6a2e:	4b05      	ldr	r3, [pc, #20]	; (6a44 <system_init+0x24>)
    6a30:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6a32:	4b05      	ldr	r3, [pc, #20]	; (6a48 <system_init+0x28>)
    6a34:	4798      	blx	r3
}
    6a36:	bd10      	pop	{r4, pc}
    6a38:	00002bf5 	.word	0x00002bf5
    6a3c:	00006661 	.word	0x00006661
    6a40:	00006a1d 	.word	0x00006a1d
    6a44:	0000223d 	.word	0x0000223d
    6a48:	00006a1d 	.word	0x00006a1d

00006a4c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6a4c:	e7fe      	b.n	6a4c <Dummy_Handler>
	...

00006a50 <Reset_Handler>:
{
    6a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    6a52:	4a2a      	ldr	r2, [pc, #168]	; (6afc <Reset_Handler+0xac>)
    6a54:	4b2a      	ldr	r3, [pc, #168]	; (6b00 <Reset_Handler+0xb0>)
    6a56:	429a      	cmp	r2, r3
    6a58:	d011      	beq.n	6a7e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    6a5a:	001a      	movs	r2, r3
    6a5c:	4b29      	ldr	r3, [pc, #164]	; (6b04 <Reset_Handler+0xb4>)
    6a5e:	429a      	cmp	r2, r3
    6a60:	d20d      	bcs.n	6a7e <Reset_Handler+0x2e>
    6a62:	4a29      	ldr	r2, [pc, #164]	; (6b08 <Reset_Handler+0xb8>)
    6a64:	3303      	adds	r3, #3
    6a66:	1a9b      	subs	r3, r3, r2
    6a68:	089b      	lsrs	r3, r3, #2
    6a6a:	3301      	adds	r3, #1
    6a6c:	009b      	lsls	r3, r3, #2
    6a6e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    6a70:	4823      	ldr	r0, [pc, #140]	; (6b00 <Reset_Handler+0xb0>)
    6a72:	4922      	ldr	r1, [pc, #136]	; (6afc <Reset_Handler+0xac>)
    6a74:	588c      	ldr	r4, [r1, r2]
    6a76:	5084      	str	r4, [r0, r2]
    6a78:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    6a7a:	429a      	cmp	r2, r3
    6a7c:	d1fa      	bne.n	6a74 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    6a7e:	4a23      	ldr	r2, [pc, #140]	; (6b0c <Reset_Handler+0xbc>)
    6a80:	4b23      	ldr	r3, [pc, #140]	; (6b10 <Reset_Handler+0xc0>)
    6a82:	429a      	cmp	r2, r3
    6a84:	d20a      	bcs.n	6a9c <Reset_Handler+0x4c>
    6a86:	43d3      	mvns	r3, r2
    6a88:	4921      	ldr	r1, [pc, #132]	; (6b10 <Reset_Handler+0xc0>)
    6a8a:	185b      	adds	r3, r3, r1
    6a8c:	2103      	movs	r1, #3
    6a8e:	438b      	bics	r3, r1
    6a90:	3304      	adds	r3, #4
    6a92:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    6a94:	2100      	movs	r1, #0
    6a96:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6a98:	4293      	cmp	r3, r2
    6a9a:	d1fc      	bne.n	6a96 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6a9c:	4a1d      	ldr	r2, [pc, #116]	; (6b14 <Reset_Handler+0xc4>)
    6a9e:	21ff      	movs	r1, #255	; 0xff
    6aa0:	4b1d      	ldr	r3, [pc, #116]	; (6b18 <Reset_Handler+0xc8>)
    6aa2:	438b      	bics	r3, r1
    6aa4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6aa6:	39fd      	subs	r1, #253	; 0xfd
    6aa8:	2390      	movs	r3, #144	; 0x90
    6aaa:	005b      	lsls	r3, r3, #1
    6aac:	4a1b      	ldr	r2, [pc, #108]	; (6b1c <Reset_Handler+0xcc>)
    6aae:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6ab0:	4a1b      	ldr	r2, [pc, #108]	; (6b20 <Reset_Handler+0xd0>)
    6ab2:	78d3      	ldrb	r3, [r2, #3]
    6ab4:	2503      	movs	r5, #3
    6ab6:	43ab      	bics	r3, r5
    6ab8:	2402      	movs	r4, #2
    6aba:	4323      	orrs	r3, r4
    6abc:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6abe:	78d3      	ldrb	r3, [r2, #3]
    6ac0:	270c      	movs	r7, #12
    6ac2:	43bb      	bics	r3, r7
    6ac4:	2608      	movs	r6, #8
    6ac6:	4333      	orrs	r3, r6
    6ac8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    6aca:	4b16      	ldr	r3, [pc, #88]	; (6b24 <Reset_Handler+0xd4>)
    6acc:	7b98      	ldrb	r0, [r3, #14]
    6ace:	2230      	movs	r2, #48	; 0x30
    6ad0:	4390      	bics	r0, r2
    6ad2:	2220      	movs	r2, #32
    6ad4:	4310      	orrs	r0, r2
    6ad6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6ad8:	7b99      	ldrb	r1, [r3, #14]
    6ada:	43b9      	bics	r1, r7
    6adc:	4331      	orrs	r1, r6
    6ade:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6ae0:	7b9a      	ldrb	r2, [r3, #14]
    6ae2:	43aa      	bics	r2, r5
    6ae4:	4322      	orrs	r2, r4
    6ae6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6ae8:	4a0f      	ldr	r2, [pc, #60]	; (6b28 <Reset_Handler+0xd8>)
    6aea:	6853      	ldr	r3, [r2, #4]
    6aec:	2180      	movs	r1, #128	; 0x80
    6aee:	430b      	orrs	r3, r1
    6af0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    6af2:	4b0e      	ldr	r3, [pc, #56]	; (6b2c <Reset_Handler+0xdc>)
    6af4:	4798      	blx	r3
        main();
    6af6:	4b0e      	ldr	r3, [pc, #56]	; (6b30 <Reset_Handler+0xe0>)
    6af8:	4798      	blx	r3
    6afa:	e7fe      	b.n	6afa <Reset_Handler+0xaa>
    6afc:	00008564 	.word	0x00008564
    6b00:	20000000 	.word	0x20000000
    6b04:	20000160 	.word	0x20000160
    6b08:	20000004 	.word	0x20000004
    6b0c:	20000160 	.word	0x20000160
    6b10:	20000c00 	.word	0x20000c00
    6b14:	e000ed00 	.word	0xe000ed00
    6b18:	00000000 	.word	0x00000000
    6b1c:	41007000 	.word	0x41007000
    6b20:	41005000 	.word	0x41005000
    6b24:	41004800 	.word	0x41004800
    6b28:	41004000 	.word	0x41004000
    6b2c:	00007105 	.word	0x00007105
    6b30:	00003bbd 	.word	0x00003bbd

00006b34 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6b34:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6b36:	4a06      	ldr	r2, [pc, #24]	; (6b50 <_sbrk+0x1c>)
    6b38:	6812      	ldr	r2, [r2, #0]
    6b3a:	2a00      	cmp	r2, #0
    6b3c:	d004      	beq.n	6b48 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    6b3e:	4a04      	ldr	r2, [pc, #16]	; (6b50 <_sbrk+0x1c>)
    6b40:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    6b42:	18c3      	adds	r3, r0, r3
    6b44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    6b46:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6b48:	4902      	ldr	r1, [pc, #8]	; (6b54 <_sbrk+0x20>)
    6b4a:	4a01      	ldr	r2, [pc, #4]	; (6b50 <_sbrk+0x1c>)
    6b4c:	6011      	str	r1, [r2, #0]
    6b4e:	e7f6      	b.n	6b3e <_sbrk+0xa>
    6b50:	200003ac 	.word	0x200003ac
    6b54:	20002c00 	.word	0x20002c00

00006b58 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    6b58:	2001      	movs	r0, #1
    6b5a:	4240      	negs	r0, r0
    6b5c:	4770      	bx	lr

00006b5e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    6b5e:	2380      	movs	r3, #128	; 0x80
    6b60:	019b      	lsls	r3, r3, #6
    6b62:	604b      	str	r3, [r1, #4]

	return 0;
}
    6b64:	2000      	movs	r0, #0
    6b66:	4770      	bx	lr

00006b68 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    6b68:	2001      	movs	r0, #1
    6b6a:	4770      	bx	lr

00006b6c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    6b6c:	2000      	movs	r0, #0
    6b6e:	4770      	bx	lr

00006b70 <__udivsi3>:
    6b70:	2200      	movs	r2, #0
    6b72:	0843      	lsrs	r3, r0, #1
    6b74:	428b      	cmp	r3, r1
    6b76:	d374      	bcc.n	6c62 <__udivsi3+0xf2>
    6b78:	0903      	lsrs	r3, r0, #4
    6b7a:	428b      	cmp	r3, r1
    6b7c:	d35f      	bcc.n	6c3e <__udivsi3+0xce>
    6b7e:	0a03      	lsrs	r3, r0, #8
    6b80:	428b      	cmp	r3, r1
    6b82:	d344      	bcc.n	6c0e <__udivsi3+0x9e>
    6b84:	0b03      	lsrs	r3, r0, #12
    6b86:	428b      	cmp	r3, r1
    6b88:	d328      	bcc.n	6bdc <__udivsi3+0x6c>
    6b8a:	0c03      	lsrs	r3, r0, #16
    6b8c:	428b      	cmp	r3, r1
    6b8e:	d30d      	bcc.n	6bac <__udivsi3+0x3c>
    6b90:	22ff      	movs	r2, #255	; 0xff
    6b92:	0209      	lsls	r1, r1, #8
    6b94:	ba12      	rev	r2, r2
    6b96:	0c03      	lsrs	r3, r0, #16
    6b98:	428b      	cmp	r3, r1
    6b9a:	d302      	bcc.n	6ba2 <__udivsi3+0x32>
    6b9c:	1212      	asrs	r2, r2, #8
    6b9e:	0209      	lsls	r1, r1, #8
    6ba0:	d065      	beq.n	6c6e <__udivsi3+0xfe>
    6ba2:	0b03      	lsrs	r3, r0, #12
    6ba4:	428b      	cmp	r3, r1
    6ba6:	d319      	bcc.n	6bdc <__udivsi3+0x6c>
    6ba8:	e000      	b.n	6bac <__udivsi3+0x3c>
    6baa:	0a09      	lsrs	r1, r1, #8
    6bac:	0bc3      	lsrs	r3, r0, #15
    6bae:	428b      	cmp	r3, r1
    6bb0:	d301      	bcc.n	6bb6 <__udivsi3+0x46>
    6bb2:	03cb      	lsls	r3, r1, #15
    6bb4:	1ac0      	subs	r0, r0, r3
    6bb6:	4152      	adcs	r2, r2
    6bb8:	0b83      	lsrs	r3, r0, #14
    6bba:	428b      	cmp	r3, r1
    6bbc:	d301      	bcc.n	6bc2 <__udivsi3+0x52>
    6bbe:	038b      	lsls	r3, r1, #14
    6bc0:	1ac0      	subs	r0, r0, r3
    6bc2:	4152      	adcs	r2, r2
    6bc4:	0b43      	lsrs	r3, r0, #13
    6bc6:	428b      	cmp	r3, r1
    6bc8:	d301      	bcc.n	6bce <__udivsi3+0x5e>
    6bca:	034b      	lsls	r3, r1, #13
    6bcc:	1ac0      	subs	r0, r0, r3
    6bce:	4152      	adcs	r2, r2
    6bd0:	0b03      	lsrs	r3, r0, #12
    6bd2:	428b      	cmp	r3, r1
    6bd4:	d301      	bcc.n	6bda <__udivsi3+0x6a>
    6bd6:	030b      	lsls	r3, r1, #12
    6bd8:	1ac0      	subs	r0, r0, r3
    6bda:	4152      	adcs	r2, r2
    6bdc:	0ac3      	lsrs	r3, r0, #11
    6bde:	428b      	cmp	r3, r1
    6be0:	d301      	bcc.n	6be6 <__udivsi3+0x76>
    6be2:	02cb      	lsls	r3, r1, #11
    6be4:	1ac0      	subs	r0, r0, r3
    6be6:	4152      	adcs	r2, r2
    6be8:	0a83      	lsrs	r3, r0, #10
    6bea:	428b      	cmp	r3, r1
    6bec:	d301      	bcc.n	6bf2 <__udivsi3+0x82>
    6bee:	028b      	lsls	r3, r1, #10
    6bf0:	1ac0      	subs	r0, r0, r3
    6bf2:	4152      	adcs	r2, r2
    6bf4:	0a43      	lsrs	r3, r0, #9
    6bf6:	428b      	cmp	r3, r1
    6bf8:	d301      	bcc.n	6bfe <__udivsi3+0x8e>
    6bfa:	024b      	lsls	r3, r1, #9
    6bfc:	1ac0      	subs	r0, r0, r3
    6bfe:	4152      	adcs	r2, r2
    6c00:	0a03      	lsrs	r3, r0, #8
    6c02:	428b      	cmp	r3, r1
    6c04:	d301      	bcc.n	6c0a <__udivsi3+0x9a>
    6c06:	020b      	lsls	r3, r1, #8
    6c08:	1ac0      	subs	r0, r0, r3
    6c0a:	4152      	adcs	r2, r2
    6c0c:	d2cd      	bcs.n	6baa <__udivsi3+0x3a>
    6c0e:	09c3      	lsrs	r3, r0, #7
    6c10:	428b      	cmp	r3, r1
    6c12:	d301      	bcc.n	6c18 <__udivsi3+0xa8>
    6c14:	01cb      	lsls	r3, r1, #7
    6c16:	1ac0      	subs	r0, r0, r3
    6c18:	4152      	adcs	r2, r2
    6c1a:	0983      	lsrs	r3, r0, #6
    6c1c:	428b      	cmp	r3, r1
    6c1e:	d301      	bcc.n	6c24 <__udivsi3+0xb4>
    6c20:	018b      	lsls	r3, r1, #6
    6c22:	1ac0      	subs	r0, r0, r3
    6c24:	4152      	adcs	r2, r2
    6c26:	0943      	lsrs	r3, r0, #5
    6c28:	428b      	cmp	r3, r1
    6c2a:	d301      	bcc.n	6c30 <__udivsi3+0xc0>
    6c2c:	014b      	lsls	r3, r1, #5
    6c2e:	1ac0      	subs	r0, r0, r3
    6c30:	4152      	adcs	r2, r2
    6c32:	0903      	lsrs	r3, r0, #4
    6c34:	428b      	cmp	r3, r1
    6c36:	d301      	bcc.n	6c3c <__udivsi3+0xcc>
    6c38:	010b      	lsls	r3, r1, #4
    6c3a:	1ac0      	subs	r0, r0, r3
    6c3c:	4152      	adcs	r2, r2
    6c3e:	08c3      	lsrs	r3, r0, #3
    6c40:	428b      	cmp	r3, r1
    6c42:	d301      	bcc.n	6c48 <__udivsi3+0xd8>
    6c44:	00cb      	lsls	r3, r1, #3
    6c46:	1ac0      	subs	r0, r0, r3
    6c48:	4152      	adcs	r2, r2
    6c4a:	0883      	lsrs	r3, r0, #2
    6c4c:	428b      	cmp	r3, r1
    6c4e:	d301      	bcc.n	6c54 <__udivsi3+0xe4>
    6c50:	008b      	lsls	r3, r1, #2
    6c52:	1ac0      	subs	r0, r0, r3
    6c54:	4152      	adcs	r2, r2
    6c56:	0843      	lsrs	r3, r0, #1
    6c58:	428b      	cmp	r3, r1
    6c5a:	d301      	bcc.n	6c60 <__udivsi3+0xf0>
    6c5c:	004b      	lsls	r3, r1, #1
    6c5e:	1ac0      	subs	r0, r0, r3
    6c60:	4152      	adcs	r2, r2
    6c62:	1a41      	subs	r1, r0, r1
    6c64:	d200      	bcs.n	6c68 <__udivsi3+0xf8>
    6c66:	4601      	mov	r1, r0
    6c68:	4152      	adcs	r2, r2
    6c6a:	4610      	mov	r0, r2
    6c6c:	4770      	bx	lr
    6c6e:	e7ff      	b.n	6c70 <__udivsi3+0x100>
    6c70:	b501      	push	{r0, lr}
    6c72:	2000      	movs	r0, #0
    6c74:	f000 f8f0 	bl	6e58 <__aeabi_idiv0>
    6c78:	bd02      	pop	{r1, pc}
    6c7a:	46c0      	nop			; (mov r8, r8)

00006c7c <__aeabi_uidivmod>:
    6c7c:	2900      	cmp	r1, #0
    6c7e:	d0f7      	beq.n	6c70 <__udivsi3+0x100>
    6c80:	e776      	b.n	6b70 <__udivsi3>
    6c82:	4770      	bx	lr

00006c84 <__divsi3>:
    6c84:	4603      	mov	r3, r0
    6c86:	430b      	orrs	r3, r1
    6c88:	d47f      	bmi.n	6d8a <__divsi3+0x106>
    6c8a:	2200      	movs	r2, #0
    6c8c:	0843      	lsrs	r3, r0, #1
    6c8e:	428b      	cmp	r3, r1
    6c90:	d374      	bcc.n	6d7c <__divsi3+0xf8>
    6c92:	0903      	lsrs	r3, r0, #4
    6c94:	428b      	cmp	r3, r1
    6c96:	d35f      	bcc.n	6d58 <__divsi3+0xd4>
    6c98:	0a03      	lsrs	r3, r0, #8
    6c9a:	428b      	cmp	r3, r1
    6c9c:	d344      	bcc.n	6d28 <__divsi3+0xa4>
    6c9e:	0b03      	lsrs	r3, r0, #12
    6ca0:	428b      	cmp	r3, r1
    6ca2:	d328      	bcc.n	6cf6 <__divsi3+0x72>
    6ca4:	0c03      	lsrs	r3, r0, #16
    6ca6:	428b      	cmp	r3, r1
    6ca8:	d30d      	bcc.n	6cc6 <__divsi3+0x42>
    6caa:	22ff      	movs	r2, #255	; 0xff
    6cac:	0209      	lsls	r1, r1, #8
    6cae:	ba12      	rev	r2, r2
    6cb0:	0c03      	lsrs	r3, r0, #16
    6cb2:	428b      	cmp	r3, r1
    6cb4:	d302      	bcc.n	6cbc <__divsi3+0x38>
    6cb6:	1212      	asrs	r2, r2, #8
    6cb8:	0209      	lsls	r1, r1, #8
    6cba:	d065      	beq.n	6d88 <__divsi3+0x104>
    6cbc:	0b03      	lsrs	r3, r0, #12
    6cbe:	428b      	cmp	r3, r1
    6cc0:	d319      	bcc.n	6cf6 <__divsi3+0x72>
    6cc2:	e000      	b.n	6cc6 <__divsi3+0x42>
    6cc4:	0a09      	lsrs	r1, r1, #8
    6cc6:	0bc3      	lsrs	r3, r0, #15
    6cc8:	428b      	cmp	r3, r1
    6cca:	d301      	bcc.n	6cd0 <__divsi3+0x4c>
    6ccc:	03cb      	lsls	r3, r1, #15
    6cce:	1ac0      	subs	r0, r0, r3
    6cd0:	4152      	adcs	r2, r2
    6cd2:	0b83      	lsrs	r3, r0, #14
    6cd4:	428b      	cmp	r3, r1
    6cd6:	d301      	bcc.n	6cdc <__divsi3+0x58>
    6cd8:	038b      	lsls	r3, r1, #14
    6cda:	1ac0      	subs	r0, r0, r3
    6cdc:	4152      	adcs	r2, r2
    6cde:	0b43      	lsrs	r3, r0, #13
    6ce0:	428b      	cmp	r3, r1
    6ce2:	d301      	bcc.n	6ce8 <__divsi3+0x64>
    6ce4:	034b      	lsls	r3, r1, #13
    6ce6:	1ac0      	subs	r0, r0, r3
    6ce8:	4152      	adcs	r2, r2
    6cea:	0b03      	lsrs	r3, r0, #12
    6cec:	428b      	cmp	r3, r1
    6cee:	d301      	bcc.n	6cf4 <__divsi3+0x70>
    6cf0:	030b      	lsls	r3, r1, #12
    6cf2:	1ac0      	subs	r0, r0, r3
    6cf4:	4152      	adcs	r2, r2
    6cf6:	0ac3      	lsrs	r3, r0, #11
    6cf8:	428b      	cmp	r3, r1
    6cfa:	d301      	bcc.n	6d00 <__divsi3+0x7c>
    6cfc:	02cb      	lsls	r3, r1, #11
    6cfe:	1ac0      	subs	r0, r0, r3
    6d00:	4152      	adcs	r2, r2
    6d02:	0a83      	lsrs	r3, r0, #10
    6d04:	428b      	cmp	r3, r1
    6d06:	d301      	bcc.n	6d0c <__divsi3+0x88>
    6d08:	028b      	lsls	r3, r1, #10
    6d0a:	1ac0      	subs	r0, r0, r3
    6d0c:	4152      	adcs	r2, r2
    6d0e:	0a43      	lsrs	r3, r0, #9
    6d10:	428b      	cmp	r3, r1
    6d12:	d301      	bcc.n	6d18 <__divsi3+0x94>
    6d14:	024b      	lsls	r3, r1, #9
    6d16:	1ac0      	subs	r0, r0, r3
    6d18:	4152      	adcs	r2, r2
    6d1a:	0a03      	lsrs	r3, r0, #8
    6d1c:	428b      	cmp	r3, r1
    6d1e:	d301      	bcc.n	6d24 <__divsi3+0xa0>
    6d20:	020b      	lsls	r3, r1, #8
    6d22:	1ac0      	subs	r0, r0, r3
    6d24:	4152      	adcs	r2, r2
    6d26:	d2cd      	bcs.n	6cc4 <__divsi3+0x40>
    6d28:	09c3      	lsrs	r3, r0, #7
    6d2a:	428b      	cmp	r3, r1
    6d2c:	d301      	bcc.n	6d32 <__divsi3+0xae>
    6d2e:	01cb      	lsls	r3, r1, #7
    6d30:	1ac0      	subs	r0, r0, r3
    6d32:	4152      	adcs	r2, r2
    6d34:	0983      	lsrs	r3, r0, #6
    6d36:	428b      	cmp	r3, r1
    6d38:	d301      	bcc.n	6d3e <__divsi3+0xba>
    6d3a:	018b      	lsls	r3, r1, #6
    6d3c:	1ac0      	subs	r0, r0, r3
    6d3e:	4152      	adcs	r2, r2
    6d40:	0943      	lsrs	r3, r0, #5
    6d42:	428b      	cmp	r3, r1
    6d44:	d301      	bcc.n	6d4a <__divsi3+0xc6>
    6d46:	014b      	lsls	r3, r1, #5
    6d48:	1ac0      	subs	r0, r0, r3
    6d4a:	4152      	adcs	r2, r2
    6d4c:	0903      	lsrs	r3, r0, #4
    6d4e:	428b      	cmp	r3, r1
    6d50:	d301      	bcc.n	6d56 <__divsi3+0xd2>
    6d52:	010b      	lsls	r3, r1, #4
    6d54:	1ac0      	subs	r0, r0, r3
    6d56:	4152      	adcs	r2, r2
    6d58:	08c3      	lsrs	r3, r0, #3
    6d5a:	428b      	cmp	r3, r1
    6d5c:	d301      	bcc.n	6d62 <__divsi3+0xde>
    6d5e:	00cb      	lsls	r3, r1, #3
    6d60:	1ac0      	subs	r0, r0, r3
    6d62:	4152      	adcs	r2, r2
    6d64:	0883      	lsrs	r3, r0, #2
    6d66:	428b      	cmp	r3, r1
    6d68:	d301      	bcc.n	6d6e <__divsi3+0xea>
    6d6a:	008b      	lsls	r3, r1, #2
    6d6c:	1ac0      	subs	r0, r0, r3
    6d6e:	4152      	adcs	r2, r2
    6d70:	0843      	lsrs	r3, r0, #1
    6d72:	428b      	cmp	r3, r1
    6d74:	d301      	bcc.n	6d7a <__divsi3+0xf6>
    6d76:	004b      	lsls	r3, r1, #1
    6d78:	1ac0      	subs	r0, r0, r3
    6d7a:	4152      	adcs	r2, r2
    6d7c:	1a41      	subs	r1, r0, r1
    6d7e:	d200      	bcs.n	6d82 <__divsi3+0xfe>
    6d80:	4601      	mov	r1, r0
    6d82:	4152      	adcs	r2, r2
    6d84:	4610      	mov	r0, r2
    6d86:	4770      	bx	lr
    6d88:	e05d      	b.n	6e46 <__divsi3+0x1c2>
    6d8a:	0fca      	lsrs	r2, r1, #31
    6d8c:	d000      	beq.n	6d90 <__divsi3+0x10c>
    6d8e:	4249      	negs	r1, r1
    6d90:	1003      	asrs	r3, r0, #32
    6d92:	d300      	bcc.n	6d96 <__divsi3+0x112>
    6d94:	4240      	negs	r0, r0
    6d96:	4053      	eors	r3, r2
    6d98:	2200      	movs	r2, #0
    6d9a:	469c      	mov	ip, r3
    6d9c:	0903      	lsrs	r3, r0, #4
    6d9e:	428b      	cmp	r3, r1
    6da0:	d32d      	bcc.n	6dfe <__divsi3+0x17a>
    6da2:	0a03      	lsrs	r3, r0, #8
    6da4:	428b      	cmp	r3, r1
    6da6:	d312      	bcc.n	6dce <__divsi3+0x14a>
    6da8:	22fc      	movs	r2, #252	; 0xfc
    6daa:	0189      	lsls	r1, r1, #6
    6dac:	ba12      	rev	r2, r2
    6dae:	0a03      	lsrs	r3, r0, #8
    6db0:	428b      	cmp	r3, r1
    6db2:	d30c      	bcc.n	6dce <__divsi3+0x14a>
    6db4:	0189      	lsls	r1, r1, #6
    6db6:	1192      	asrs	r2, r2, #6
    6db8:	428b      	cmp	r3, r1
    6dba:	d308      	bcc.n	6dce <__divsi3+0x14a>
    6dbc:	0189      	lsls	r1, r1, #6
    6dbe:	1192      	asrs	r2, r2, #6
    6dc0:	428b      	cmp	r3, r1
    6dc2:	d304      	bcc.n	6dce <__divsi3+0x14a>
    6dc4:	0189      	lsls	r1, r1, #6
    6dc6:	d03a      	beq.n	6e3e <__divsi3+0x1ba>
    6dc8:	1192      	asrs	r2, r2, #6
    6dca:	e000      	b.n	6dce <__divsi3+0x14a>
    6dcc:	0989      	lsrs	r1, r1, #6
    6dce:	09c3      	lsrs	r3, r0, #7
    6dd0:	428b      	cmp	r3, r1
    6dd2:	d301      	bcc.n	6dd8 <__divsi3+0x154>
    6dd4:	01cb      	lsls	r3, r1, #7
    6dd6:	1ac0      	subs	r0, r0, r3
    6dd8:	4152      	adcs	r2, r2
    6dda:	0983      	lsrs	r3, r0, #6
    6ddc:	428b      	cmp	r3, r1
    6dde:	d301      	bcc.n	6de4 <__divsi3+0x160>
    6de0:	018b      	lsls	r3, r1, #6
    6de2:	1ac0      	subs	r0, r0, r3
    6de4:	4152      	adcs	r2, r2
    6de6:	0943      	lsrs	r3, r0, #5
    6de8:	428b      	cmp	r3, r1
    6dea:	d301      	bcc.n	6df0 <__divsi3+0x16c>
    6dec:	014b      	lsls	r3, r1, #5
    6dee:	1ac0      	subs	r0, r0, r3
    6df0:	4152      	adcs	r2, r2
    6df2:	0903      	lsrs	r3, r0, #4
    6df4:	428b      	cmp	r3, r1
    6df6:	d301      	bcc.n	6dfc <__divsi3+0x178>
    6df8:	010b      	lsls	r3, r1, #4
    6dfa:	1ac0      	subs	r0, r0, r3
    6dfc:	4152      	adcs	r2, r2
    6dfe:	08c3      	lsrs	r3, r0, #3
    6e00:	428b      	cmp	r3, r1
    6e02:	d301      	bcc.n	6e08 <__divsi3+0x184>
    6e04:	00cb      	lsls	r3, r1, #3
    6e06:	1ac0      	subs	r0, r0, r3
    6e08:	4152      	adcs	r2, r2
    6e0a:	0883      	lsrs	r3, r0, #2
    6e0c:	428b      	cmp	r3, r1
    6e0e:	d301      	bcc.n	6e14 <__divsi3+0x190>
    6e10:	008b      	lsls	r3, r1, #2
    6e12:	1ac0      	subs	r0, r0, r3
    6e14:	4152      	adcs	r2, r2
    6e16:	d2d9      	bcs.n	6dcc <__divsi3+0x148>
    6e18:	0843      	lsrs	r3, r0, #1
    6e1a:	428b      	cmp	r3, r1
    6e1c:	d301      	bcc.n	6e22 <__divsi3+0x19e>
    6e1e:	004b      	lsls	r3, r1, #1
    6e20:	1ac0      	subs	r0, r0, r3
    6e22:	4152      	adcs	r2, r2
    6e24:	1a41      	subs	r1, r0, r1
    6e26:	d200      	bcs.n	6e2a <__divsi3+0x1a6>
    6e28:	4601      	mov	r1, r0
    6e2a:	4663      	mov	r3, ip
    6e2c:	4152      	adcs	r2, r2
    6e2e:	105b      	asrs	r3, r3, #1
    6e30:	4610      	mov	r0, r2
    6e32:	d301      	bcc.n	6e38 <__divsi3+0x1b4>
    6e34:	4240      	negs	r0, r0
    6e36:	2b00      	cmp	r3, #0
    6e38:	d500      	bpl.n	6e3c <__divsi3+0x1b8>
    6e3a:	4249      	negs	r1, r1
    6e3c:	4770      	bx	lr
    6e3e:	4663      	mov	r3, ip
    6e40:	105b      	asrs	r3, r3, #1
    6e42:	d300      	bcc.n	6e46 <__divsi3+0x1c2>
    6e44:	4240      	negs	r0, r0
    6e46:	b501      	push	{r0, lr}
    6e48:	2000      	movs	r0, #0
    6e4a:	f000 f805 	bl	6e58 <__aeabi_idiv0>
    6e4e:	bd02      	pop	{r1, pc}

00006e50 <__aeabi_idivmod>:
    6e50:	2900      	cmp	r1, #0
    6e52:	d0f8      	beq.n	6e46 <__divsi3+0x1c2>
    6e54:	e716      	b.n	6c84 <__divsi3>
    6e56:	4770      	bx	lr

00006e58 <__aeabi_idiv0>:
    6e58:	4770      	bx	lr
    6e5a:	46c0      	nop			; (mov r8, r8)

00006e5c <__clzsi2>:
    6e5c:	211c      	movs	r1, #28
    6e5e:	2301      	movs	r3, #1
    6e60:	041b      	lsls	r3, r3, #16
    6e62:	4298      	cmp	r0, r3
    6e64:	d301      	bcc.n	6e6a <__clzsi2+0xe>
    6e66:	0c00      	lsrs	r0, r0, #16
    6e68:	3910      	subs	r1, #16
    6e6a:	0a1b      	lsrs	r3, r3, #8
    6e6c:	4298      	cmp	r0, r3
    6e6e:	d301      	bcc.n	6e74 <__clzsi2+0x18>
    6e70:	0a00      	lsrs	r0, r0, #8
    6e72:	3908      	subs	r1, #8
    6e74:	091b      	lsrs	r3, r3, #4
    6e76:	4298      	cmp	r0, r3
    6e78:	d301      	bcc.n	6e7e <__clzsi2+0x22>
    6e7a:	0900      	lsrs	r0, r0, #4
    6e7c:	3904      	subs	r1, #4
    6e7e:	a202      	add	r2, pc, #8	; (adr r2, 6e88 <__clzsi2+0x2c>)
    6e80:	5c10      	ldrb	r0, [r2, r0]
    6e82:	1840      	adds	r0, r0, r1
    6e84:	4770      	bx	lr
    6e86:	46c0      	nop			; (mov r8, r8)
    6e88:	02020304 	.word	0x02020304
    6e8c:	01010101 	.word	0x01010101
	...

00006e98 <__ctzsi2>:
    6e98:	4241      	negs	r1, r0
    6e9a:	4008      	ands	r0, r1
    6e9c:	211c      	movs	r1, #28
    6e9e:	2301      	movs	r3, #1
    6ea0:	041b      	lsls	r3, r3, #16
    6ea2:	4298      	cmp	r0, r3
    6ea4:	d301      	bcc.n	6eaa <__ctzsi2+0x12>
    6ea6:	0c00      	lsrs	r0, r0, #16
    6ea8:	3910      	subs	r1, #16
    6eaa:	0a1b      	lsrs	r3, r3, #8
    6eac:	4298      	cmp	r0, r3
    6eae:	d301      	bcc.n	6eb4 <__ctzsi2+0x1c>
    6eb0:	0a00      	lsrs	r0, r0, #8
    6eb2:	3908      	subs	r1, #8
    6eb4:	091b      	lsrs	r3, r3, #4
    6eb6:	4298      	cmp	r0, r3
    6eb8:	d301      	bcc.n	6ebe <__ctzsi2+0x26>
    6eba:	0900      	lsrs	r0, r0, #4
    6ebc:	3904      	subs	r1, #4
    6ebe:	a202      	add	r2, pc, #8	; (adr r2, 6ec8 <__ctzsi2+0x30>)
    6ec0:	5c10      	ldrb	r0, [r2, r0]
    6ec2:	1a40      	subs	r0, r0, r1
    6ec4:	4770      	bx	lr
    6ec6:	46c0      	nop			; (mov r8, r8)
    6ec8:	1d1d1c1b 	.word	0x1d1d1c1b
    6ecc:	1e1e1e1e 	.word	0x1e1e1e1e
    6ed0:	1f1f1f1f 	.word	0x1f1f1f1f
    6ed4:	1f1f1f1f 	.word	0x1f1f1f1f

00006ed8 <__aeabi_uldivmod>:
    6ed8:	2b00      	cmp	r3, #0
    6eda:	d111      	bne.n	6f00 <__aeabi_uldivmod+0x28>
    6edc:	2a00      	cmp	r2, #0
    6ede:	d10f      	bne.n	6f00 <__aeabi_uldivmod+0x28>
    6ee0:	2900      	cmp	r1, #0
    6ee2:	d100      	bne.n	6ee6 <__aeabi_uldivmod+0xe>
    6ee4:	2800      	cmp	r0, #0
    6ee6:	d002      	beq.n	6eee <__aeabi_uldivmod+0x16>
    6ee8:	2100      	movs	r1, #0
    6eea:	43c9      	mvns	r1, r1
    6eec:	1c08      	adds	r0, r1, #0
    6eee:	b407      	push	{r0, r1, r2}
    6ef0:	4802      	ldr	r0, [pc, #8]	; (6efc <__aeabi_uldivmod+0x24>)
    6ef2:	a102      	add	r1, pc, #8	; (adr r1, 6efc <__aeabi_uldivmod+0x24>)
    6ef4:	1840      	adds	r0, r0, r1
    6ef6:	9002      	str	r0, [sp, #8]
    6ef8:	bd03      	pop	{r0, r1, pc}
    6efa:	46c0      	nop			; (mov r8, r8)
    6efc:	ffffff5d 	.word	0xffffff5d
    6f00:	b403      	push	{r0, r1}
    6f02:	4668      	mov	r0, sp
    6f04:	b501      	push	{r0, lr}
    6f06:	9802      	ldr	r0, [sp, #8]
    6f08:	f000 f830 	bl	6f6c <__udivmoddi4>
    6f0c:	9b01      	ldr	r3, [sp, #4]
    6f0e:	469e      	mov	lr, r3
    6f10:	b002      	add	sp, #8
    6f12:	bc0c      	pop	{r2, r3}
    6f14:	4770      	bx	lr
    6f16:	46c0      	nop			; (mov r8, r8)

00006f18 <__aeabi_lmul>:
    6f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f1a:	46ce      	mov	lr, r9
    6f1c:	4647      	mov	r7, r8
    6f1e:	0415      	lsls	r5, r2, #16
    6f20:	0c2d      	lsrs	r5, r5, #16
    6f22:	002e      	movs	r6, r5
    6f24:	b580      	push	{r7, lr}
    6f26:	0407      	lsls	r7, r0, #16
    6f28:	0c14      	lsrs	r4, r2, #16
    6f2a:	0c3f      	lsrs	r7, r7, #16
    6f2c:	4699      	mov	r9, r3
    6f2e:	0c03      	lsrs	r3, r0, #16
    6f30:	437e      	muls	r6, r7
    6f32:	435d      	muls	r5, r3
    6f34:	4367      	muls	r7, r4
    6f36:	4363      	muls	r3, r4
    6f38:	197f      	adds	r7, r7, r5
    6f3a:	0c34      	lsrs	r4, r6, #16
    6f3c:	19e4      	adds	r4, r4, r7
    6f3e:	469c      	mov	ip, r3
    6f40:	42a5      	cmp	r5, r4
    6f42:	d903      	bls.n	6f4c <__aeabi_lmul+0x34>
    6f44:	2380      	movs	r3, #128	; 0x80
    6f46:	025b      	lsls	r3, r3, #9
    6f48:	4698      	mov	r8, r3
    6f4a:	44c4      	add	ip, r8
    6f4c:	464b      	mov	r3, r9
    6f4e:	4351      	muls	r1, r2
    6f50:	4343      	muls	r3, r0
    6f52:	0436      	lsls	r6, r6, #16
    6f54:	0c36      	lsrs	r6, r6, #16
    6f56:	0c25      	lsrs	r5, r4, #16
    6f58:	0424      	lsls	r4, r4, #16
    6f5a:	4465      	add	r5, ip
    6f5c:	19a4      	adds	r4, r4, r6
    6f5e:	1859      	adds	r1, r3, r1
    6f60:	1949      	adds	r1, r1, r5
    6f62:	0020      	movs	r0, r4
    6f64:	bc0c      	pop	{r2, r3}
    6f66:	4690      	mov	r8, r2
    6f68:	4699      	mov	r9, r3
    6f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006f6c <__udivmoddi4>:
    6f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f6e:	4657      	mov	r7, sl
    6f70:	464e      	mov	r6, r9
    6f72:	4645      	mov	r5, r8
    6f74:	46de      	mov	lr, fp
    6f76:	b5e0      	push	{r5, r6, r7, lr}
    6f78:	0004      	movs	r4, r0
    6f7a:	b083      	sub	sp, #12
    6f7c:	000d      	movs	r5, r1
    6f7e:	4692      	mov	sl, r2
    6f80:	4699      	mov	r9, r3
    6f82:	428b      	cmp	r3, r1
    6f84:	d82f      	bhi.n	6fe6 <__udivmoddi4+0x7a>
    6f86:	d02c      	beq.n	6fe2 <__udivmoddi4+0x76>
    6f88:	4649      	mov	r1, r9
    6f8a:	4650      	mov	r0, sl
    6f8c:	f000 f8ae 	bl	70ec <__clzdi2>
    6f90:	0029      	movs	r1, r5
    6f92:	0006      	movs	r6, r0
    6f94:	0020      	movs	r0, r4
    6f96:	f000 f8a9 	bl	70ec <__clzdi2>
    6f9a:	1a33      	subs	r3, r6, r0
    6f9c:	4698      	mov	r8, r3
    6f9e:	3b20      	subs	r3, #32
    6fa0:	469b      	mov	fp, r3
    6fa2:	d500      	bpl.n	6fa6 <__udivmoddi4+0x3a>
    6fa4:	e074      	b.n	7090 <__udivmoddi4+0x124>
    6fa6:	4653      	mov	r3, sl
    6fa8:	465a      	mov	r2, fp
    6faa:	4093      	lsls	r3, r2
    6fac:	001f      	movs	r7, r3
    6fae:	4653      	mov	r3, sl
    6fb0:	4642      	mov	r2, r8
    6fb2:	4093      	lsls	r3, r2
    6fb4:	001e      	movs	r6, r3
    6fb6:	42af      	cmp	r7, r5
    6fb8:	d829      	bhi.n	700e <__udivmoddi4+0xa2>
    6fba:	d026      	beq.n	700a <__udivmoddi4+0x9e>
    6fbc:	465b      	mov	r3, fp
    6fbe:	1ba4      	subs	r4, r4, r6
    6fc0:	41bd      	sbcs	r5, r7
    6fc2:	2b00      	cmp	r3, #0
    6fc4:	da00      	bge.n	6fc8 <__udivmoddi4+0x5c>
    6fc6:	e079      	b.n	70bc <__udivmoddi4+0x150>
    6fc8:	2200      	movs	r2, #0
    6fca:	2300      	movs	r3, #0
    6fcc:	9200      	str	r2, [sp, #0]
    6fce:	9301      	str	r3, [sp, #4]
    6fd0:	2301      	movs	r3, #1
    6fd2:	465a      	mov	r2, fp
    6fd4:	4093      	lsls	r3, r2
    6fd6:	9301      	str	r3, [sp, #4]
    6fd8:	2301      	movs	r3, #1
    6fda:	4642      	mov	r2, r8
    6fdc:	4093      	lsls	r3, r2
    6fde:	9300      	str	r3, [sp, #0]
    6fe0:	e019      	b.n	7016 <__udivmoddi4+0xaa>
    6fe2:	4282      	cmp	r2, r0
    6fe4:	d9d0      	bls.n	6f88 <__udivmoddi4+0x1c>
    6fe6:	2200      	movs	r2, #0
    6fe8:	2300      	movs	r3, #0
    6fea:	9200      	str	r2, [sp, #0]
    6fec:	9301      	str	r3, [sp, #4]
    6fee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6ff0:	2b00      	cmp	r3, #0
    6ff2:	d001      	beq.n	6ff8 <__udivmoddi4+0x8c>
    6ff4:	601c      	str	r4, [r3, #0]
    6ff6:	605d      	str	r5, [r3, #4]
    6ff8:	9800      	ldr	r0, [sp, #0]
    6ffa:	9901      	ldr	r1, [sp, #4]
    6ffc:	b003      	add	sp, #12
    6ffe:	bc3c      	pop	{r2, r3, r4, r5}
    7000:	4690      	mov	r8, r2
    7002:	4699      	mov	r9, r3
    7004:	46a2      	mov	sl, r4
    7006:	46ab      	mov	fp, r5
    7008:	bdf0      	pop	{r4, r5, r6, r7, pc}
    700a:	42a3      	cmp	r3, r4
    700c:	d9d6      	bls.n	6fbc <__udivmoddi4+0x50>
    700e:	2200      	movs	r2, #0
    7010:	2300      	movs	r3, #0
    7012:	9200      	str	r2, [sp, #0]
    7014:	9301      	str	r3, [sp, #4]
    7016:	4643      	mov	r3, r8
    7018:	2b00      	cmp	r3, #0
    701a:	d0e8      	beq.n	6fee <__udivmoddi4+0x82>
    701c:	07fb      	lsls	r3, r7, #31
    701e:	0872      	lsrs	r2, r6, #1
    7020:	431a      	orrs	r2, r3
    7022:	4646      	mov	r6, r8
    7024:	087b      	lsrs	r3, r7, #1
    7026:	e00e      	b.n	7046 <__udivmoddi4+0xda>
    7028:	42ab      	cmp	r3, r5
    702a:	d101      	bne.n	7030 <__udivmoddi4+0xc4>
    702c:	42a2      	cmp	r2, r4
    702e:	d80c      	bhi.n	704a <__udivmoddi4+0xde>
    7030:	1aa4      	subs	r4, r4, r2
    7032:	419d      	sbcs	r5, r3
    7034:	2001      	movs	r0, #1
    7036:	1924      	adds	r4, r4, r4
    7038:	416d      	adcs	r5, r5
    703a:	2100      	movs	r1, #0
    703c:	3e01      	subs	r6, #1
    703e:	1824      	adds	r4, r4, r0
    7040:	414d      	adcs	r5, r1
    7042:	2e00      	cmp	r6, #0
    7044:	d006      	beq.n	7054 <__udivmoddi4+0xe8>
    7046:	42ab      	cmp	r3, r5
    7048:	d9ee      	bls.n	7028 <__udivmoddi4+0xbc>
    704a:	3e01      	subs	r6, #1
    704c:	1924      	adds	r4, r4, r4
    704e:	416d      	adcs	r5, r5
    7050:	2e00      	cmp	r6, #0
    7052:	d1f8      	bne.n	7046 <__udivmoddi4+0xda>
    7054:	465b      	mov	r3, fp
    7056:	9800      	ldr	r0, [sp, #0]
    7058:	9901      	ldr	r1, [sp, #4]
    705a:	1900      	adds	r0, r0, r4
    705c:	4169      	adcs	r1, r5
    705e:	2b00      	cmp	r3, #0
    7060:	db22      	blt.n	70a8 <__udivmoddi4+0x13c>
    7062:	002b      	movs	r3, r5
    7064:	465a      	mov	r2, fp
    7066:	40d3      	lsrs	r3, r2
    7068:	002a      	movs	r2, r5
    706a:	4644      	mov	r4, r8
    706c:	40e2      	lsrs	r2, r4
    706e:	001c      	movs	r4, r3
    7070:	465b      	mov	r3, fp
    7072:	0015      	movs	r5, r2
    7074:	2b00      	cmp	r3, #0
    7076:	db2c      	blt.n	70d2 <__udivmoddi4+0x166>
    7078:	0026      	movs	r6, r4
    707a:	409e      	lsls	r6, r3
    707c:	0033      	movs	r3, r6
    707e:	0026      	movs	r6, r4
    7080:	4647      	mov	r7, r8
    7082:	40be      	lsls	r6, r7
    7084:	0032      	movs	r2, r6
    7086:	1a80      	subs	r0, r0, r2
    7088:	4199      	sbcs	r1, r3
    708a:	9000      	str	r0, [sp, #0]
    708c:	9101      	str	r1, [sp, #4]
    708e:	e7ae      	b.n	6fee <__udivmoddi4+0x82>
    7090:	4642      	mov	r2, r8
    7092:	2320      	movs	r3, #32
    7094:	1a9b      	subs	r3, r3, r2
    7096:	4652      	mov	r2, sl
    7098:	40da      	lsrs	r2, r3
    709a:	4641      	mov	r1, r8
    709c:	0013      	movs	r3, r2
    709e:	464a      	mov	r2, r9
    70a0:	408a      	lsls	r2, r1
    70a2:	0017      	movs	r7, r2
    70a4:	431f      	orrs	r7, r3
    70a6:	e782      	b.n	6fae <__udivmoddi4+0x42>
    70a8:	4642      	mov	r2, r8
    70aa:	2320      	movs	r3, #32
    70ac:	1a9b      	subs	r3, r3, r2
    70ae:	002a      	movs	r2, r5
    70b0:	4646      	mov	r6, r8
    70b2:	409a      	lsls	r2, r3
    70b4:	0023      	movs	r3, r4
    70b6:	40f3      	lsrs	r3, r6
    70b8:	4313      	orrs	r3, r2
    70ba:	e7d5      	b.n	7068 <__udivmoddi4+0xfc>
    70bc:	4642      	mov	r2, r8
    70be:	2320      	movs	r3, #32
    70c0:	2100      	movs	r1, #0
    70c2:	1a9b      	subs	r3, r3, r2
    70c4:	2200      	movs	r2, #0
    70c6:	9100      	str	r1, [sp, #0]
    70c8:	9201      	str	r2, [sp, #4]
    70ca:	2201      	movs	r2, #1
    70cc:	40da      	lsrs	r2, r3
    70ce:	9201      	str	r2, [sp, #4]
    70d0:	e782      	b.n	6fd8 <__udivmoddi4+0x6c>
    70d2:	4642      	mov	r2, r8
    70d4:	2320      	movs	r3, #32
    70d6:	0026      	movs	r6, r4
    70d8:	1a9b      	subs	r3, r3, r2
    70da:	40de      	lsrs	r6, r3
    70dc:	002f      	movs	r7, r5
    70de:	46b4      	mov	ip, r6
    70e0:	4097      	lsls	r7, r2
    70e2:	4666      	mov	r6, ip
    70e4:	003b      	movs	r3, r7
    70e6:	4333      	orrs	r3, r6
    70e8:	e7c9      	b.n	707e <__udivmoddi4+0x112>
    70ea:	46c0      	nop			; (mov r8, r8)

000070ec <__clzdi2>:
    70ec:	b510      	push	{r4, lr}
    70ee:	2900      	cmp	r1, #0
    70f0:	d103      	bne.n	70fa <__clzdi2+0xe>
    70f2:	f7ff feb3 	bl	6e5c <__clzsi2>
    70f6:	3020      	adds	r0, #32
    70f8:	e002      	b.n	7100 <__clzdi2+0x14>
    70fa:	1c08      	adds	r0, r1, #0
    70fc:	f7ff feae 	bl	6e5c <__clzsi2>
    7100:	bd10      	pop	{r4, pc}
    7102:	46c0      	nop			; (mov r8, r8)

00007104 <__libc_init_array>:
    7104:	b570      	push	{r4, r5, r6, lr}
    7106:	2600      	movs	r6, #0
    7108:	4d0c      	ldr	r5, [pc, #48]	; (713c <__libc_init_array+0x38>)
    710a:	4c0d      	ldr	r4, [pc, #52]	; (7140 <__libc_init_array+0x3c>)
    710c:	1b64      	subs	r4, r4, r5
    710e:	10a4      	asrs	r4, r4, #2
    7110:	42a6      	cmp	r6, r4
    7112:	d109      	bne.n	7128 <__libc_init_array+0x24>
    7114:	2600      	movs	r6, #0
    7116:	f001 fa11 	bl	853c <_init>
    711a:	4d0a      	ldr	r5, [pc, #40]	; (7144 <__libc_init_array+0x40>)
    711c:	4c0a      	ldr	r4, [pc, #40]	; (7148 <__libc_init_array+0x44>)
    711e:	1b64      	subs	r4, r4, r5
    7120:	10a4      	asrs	r4, r4, #2
    7122:	42a6      	cmp	r6, r4
    7124:	d105      	bne.n	7132 <__libc_init_array+0x2e>
    7126:	bd70      	pop	{r4, r5, r6, pc}
    7128:	00b3      	lsls	r3, r6, #2
    712a:	58eb      	ldr	r3, [r5, r3]
    712c:	4798      	blx	r3
    712e:	3601      	adds	r6, #1
    7130:	e7ee      	b.n	7110 <__libc_init_array+0xc>
    7132:	00b3      	lsls	r3, r6, #2
    7134:	58eb      	ldr	r3, [r5, r3]
    7136:	4798      	blx	r3
    7138:	3601      	adds	r6, #1
    713a:	e7f2      	b.n	7122 <__libc_init_array+0x1e>
    713c:	00008548 	.word	0x00008548
    7140:	00008548 	.word	0x00008548
    7144:	00008548 	.word	0x00008548
    7148:	0000854c 	.word	0x0000854c

0000714c <memcpy>:
    714c:	2300      	movs	r3, #0
    714e:	b510      	push	{r4, lr}
    7150:	429a      	cmp	r2, r3
    7152:	d100      	bne.n	7156 <memcpy+0xa>
    7154:	bd10      	pop	{r4, pc}
    7156:	5ccc      	ldrb	r4, [r1, r3]
    7158:	54c4      	strb	r4, [r0, r3]
    715a:	3301      	adds	r3, #1
    715c:	e7f8      	b.n	7150 <memcpy+0x4>

0000715e <memset>:
    715e:	0003      	movs	r3, r0
    7160:	1882      	adds	r2, r0, r2
    7162:	4293      	cmp	r3, r2
    7164:	d100      	bne.n	7168 <memset+0xa>
    7166:	4770      	bx	lr
    7168:	7019      	strb	r1, [r3, #0]
    716a:	3301      	adds	r3, #1
    716c:	e7f9      	b.n	7162 <memset+0x4>
	...

00007170 <iprintf>:
    7170:	b40f      	push	{r0, r1, r2, r3}
    7172:	4b0b      	ldr	r3, [pc, #44]	; (71a0 <iprintf+0x30>)
    7174:	b513      	push	{r0, r1, r4, lr}
    7176:	681c      	ldr	r4, [r3, #0]
    7178:	2c00      	cmp	r4, #0
    717a:	d005      	beq.n	7188 <iprintf+0x18>
    717c:	69a3      	ldr	r3, [r4, #24]
    717e:	2b00      	cmp	r3, #0
    7180:	d102      	bne.n	7188 <iprintf+0x18>
    7182:	0020      	movs	r0, r4
    7184:	f000 f9bc 	bl	7500 <__sinit>
    7188:	ab05      	add	r3, sp, #20
    718a:	9a04      	ldr	r2, [sp, #16]
    718c:	68a1      	ldr	r1, [r4, #8]
    718e:	0020      	movs	r0, r4
    7190:	9301      	str	r3, [sp, #4]
    7192:	f000 fb91 	bl	78b8 <_vfiprintf_r>
    7196:	bc16      	pop	{r1, r2, r4}
    7198:	bc08      	pop	{r3}
    719a:	b004      	add	sp, #16
    719c:	4718      	bx	r3
    719e:	46c0      	nop			; (mov r8, r8)
    71a0:	200000fc 	.word	0x200000fc

000071a4 <setbuf>:
    71a4:	424a      	negs	r2, r1
    71a6:	414a      	adcs	r2, r1
    71a8:	2380      	movs	r3, #128	; 0x80
    71aa:	b510      	push	{r4, lr}
    71ac:	0052      	lsls	r2, r2, #1
    71ae:	00db      	lsls	r3, r3, #3
    71b0:	f000 f802 	bl	71b8 <setvbuf>
    71b4:	bd10      	pop	{r4, pc}
	...

000071b8 <setvbuf>:
    71b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    71ba:	001d      	movs	r5, r3
    71bc:	4b4f      	ldr	r3, [pc, #316]	; (72fc <setvbuf+0x144>)
    71be:	b085      	sub	sp, #20
    71c0:	681e      	ldr	r6, [r3, #0]
    71c2:	0004      	movs	r4, r0
    71c4:	000f      	movs	r7, r1
    71c6:	9200      	str	r2, [sp, #0]
    71c8:	2e00      	cmp	r6, #0
    71ca:	d005      	beq.n	71d8 <setvbuf+0x20>
    71cc:	69b3      	ldr	r3, [r6, #24]
    71ce:	2b00      	cmp	r3, #0
    71d0:	d102      	bne.n	71d8 <setvbuf+0x20>
    71d2:	0030      	movs	r0, r6
    71d4:	f000 f994 	bl	7500 <__sinit>
    71d8:	4b49      	ldr	r3, [pc, #292]	; (7300 <setvbuf+0x148>)
    71da:	429c      	cmp	r4, r3
    71dc:	d150      	bne.n	7280 <setvbuf+0xc8>
    71de:	6874      	ldr	r4, [r6, #4]
    71e0:	9b00      	ldr	r3, [sp, #0]
    71e2:	2b02      	cmp	r3, #2
    71e4:	d005      	beq.n	71f2 <setvbuf+0x3a>
    71e6:	2b01      	cmp	r3, #1
    71e8:	d900      	bls.n	71ec <setvbuf+0x34>
    71ea:	e084      	b.n	72f6 <setvbuf+0x13e>
    71ec:	2d00      	cmp	r5, #0
    71ee:	da00      	bge.n	71f2 <setvbuf+0x3a>
    71f0:	e081      	b.n	72f6 <setvbuf+0x13e>
    71f2:	0021      	movs	r1, r4
    71f4:	0030      	movs	r0, r6
    71f6:	f000 f915 	bl	7424 <_fflush_r>
    71fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    71fc:	2900      	cmp	r1, #0
    71fe:	d008      	beq.n	7212 <setvbuf+0x5a>
    7200:	0023      	movs	r3, r4
    7202:	3344      	adds	r3, #68	; 0x44
    7204:	4299      	cmp	r1, r3
    7206:	d002      	beq.n	720e <setvbuf+0x56>
    7208:	0030      	movs	r0, r6
    720a:	f000 fa85 	bl	7718 <_free_r>
    720e:	2300      	movs	r3, #0
    7210:	6363      	str	r3, [r4, #52]	; 0x34
    7212:	2300      	movs	r3, #0
    7214:	61a3      	str	r3, [r4, #24]
    7216:	6063      	str	r3, [r4, #4]
    7218:	89a3      	ldrh	r3, [r4, #12]
    721a:	061b      	lsls	r3, r3, #24
    721c:	d503      	bpl.n	7226 <setvbuf+0x6e>
    721e:	6921      	ldr	r1, [r4, #16]
    7220:	0030      	movs	r0, r6
    7222:	f000 fa79 	bl	7718 <_free_r>
    7226:	89a3      	ldrh	r3, [r4, #12]
    7228:	4a36      	ldr	r2, [pc, #216]	; (7304 <setvbuf+0x14c>)
    722a:	4013      	ands	r3, r2
    722c:	81a3      	strh	r3, [r4, #12]
    722e:	9b00      	ldr	r3, [sp, #0]
    7230:	2b02      	cmp	r3, #2
    7232:	d05a      	beq.n	72ea <setvbuf+0x132>
    7234:	ab03      	add	r3, sp, #12
    7236:	aa02      	add	r2, sp, #8
    7238:	0021      	movs	r1, r4
    723a:	0030      	movs	r0, r6
    723c:	f000 f9f6 	bl	762c <__swhatbuf_r>
    7240:	89a3      	ldrh	r3, [r4, #12]
    7242:	4318      	orrs	r0, r3
    7244:	81a0      	strh	r0, [r4, #12]
    7246:	2d00      	cmp	r5, #0
    7248:	d124      	bne.n	7294 <setvbuf+0xdc>
    724a:	9d02      	ldr	r5, [sp, #8]
    724c:	0028      	movs	r0, r5
    724e:	f000 fa59 	bl	7704 <malloc>
    7252:	9501      	str	r5, [sp, #4]
    7254:	1e07      	subs	r7, r0, #0
    7256:	d142      	bne.n	72de <setvbuf+0x126>
    7258:	9b02      	ldr	r3, [sp, #8]
    725a:	9301      	str	r3, [sp, #4]
    725c:	42ab      	cmp	r3, r5
    725e:	d139      	bne.n	72d4 <setvbuf+0x11c>
    7260:	2001      	movs	r0, #1
    7262:	4240      	negs	r0, r0
    7264:	2302      	movs	r3, #2
    7266:	89a2      	ldrh	r2, [r4, #12]
    7268:	4313      	orrs	r3, r2
    726a:	81a3      	strh	r3, [r4, #12]
    726c:	2300      	movs	r3, #0
    726e:	60a3      	str	r3, [r4, #8]
    7270:	0023      	movs	r3, r4
    7272:	3347      	adds	r3, #71	; 0x47
    7274:	6023      	str	r3, [r4, #0]
    7276:	6123      	str	r3, [r4, #16]
    7278:	2301      	movs	r3, #1
    727a:	6163      	str	r3, [r4, #20]
    727c:	b005      	add	sp, #20
    727e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7280:	4b21      	ldr	r3, [pc, #132]	; (7308 <setvbuf+0x150>)
    7282:	429c      	cmp	r4, r3
    7284:	d101      	bne.n	728a <setvbuf+0xd2>
    7286:	68b4      	ldr	r4, [r6, #8]
    7288:	e7aa      	b.n	71e0 <setvbuf+0x28>
    728a:	4b20      	ldr	r3, [pc, #128]	; (730c <setvbuf+0x154>)
    728c:	429c      	cmp	r4, r3
    728e:	d1a7      	bne.n	71e0 <setvbuf+0x28>
    7290:	68f4      	ldr	r4, [r6, #12]
    7292:	e7a5      	b.n	71e0 <setvbuf+0x28>
    7294:	2f00      	cmp	r7, #0
    7296:	d0d9      	beq.n	724c <setvbuf+0x94>
    7298:	69b3      	ldr	r3, [r6, #24]
    729a:	2b00      	cmp	r3, #0
    729c:	d102      	bne.n	72a4 <setvbuf+0xec>
    729e:	0030      	movs	r0, r6
    72a0:	f000 f92e 	bl	7500 <__sinit>
    72a4:	9b00      	ldr	r3, [sp, #0]
    72a6:	2b01      	cmp	r3, #1
    72a8:	d103      	bne.n	72b2 <setvbuf+0xfa>
    72aa:	89a3      	ldrh	r3, [r4, #12]
    72ac:	9a00      	ldr	r2, [sp, #0]
    72ae:	431a      	orrs	r2, r3
    72b0:	81a2      	strh	r2, [r4, #12]
    72b2:	2008      	movs	r0, #8
    72b4:	89a3      	ldrh	r3, [r4, #12]
    72b6:	6027      	str	r7, [r4, #0]
    72b8:	6127      	str	r7, [r4, #16]
    72ba:	6165      	str	r5, [r4, #20]
    72bc:	4018      	ands	r0, r3
    72be:	d018      	beq.n	72f2 <setvbuf+0x13a>
    72c0:	2001      	movs	r0, #1
    72c2:	4018      	ands	r0, r3
    72c4:	2300      	movs	r3, #0
    72c6:	4298      	cmp	r0, r3
    72c8:	d011      	beq.n	72ee <setvbuf+0x136>
    72ca:	426d      	negs	r5, r5
    72cc:	60a3      	str	r3, [r4, #8]
    72ce:	61a5      	str	r5, [r4, #24]
    72d0:	0018      	movs	r0, r3
    72d2:	e7d3      	b.n	727c <setvbuf+0xc4>
    72d4:	9801      	ldr	r0, [sp, #4]
    72d6:	f000 fa15 	bl	7704 <malloc>
    72da:	1e07      	subs	r7, r0, #0
    72dc:	d0c0      	beq.n	7260 <setvbuf+0xa8>
    72de:	2380      	movs	r3, #128	; 0x80
    72e0:	89a2      	ldrh	r2, [r4, #12]
    72e2:	9d01      	ldr	r5, [sp, #4]
    72e4:	4313      	orrs	r3, r2
    72e6:	81a3      	strh	r3, [r4, #12]
    72e8:	e7d6      	b.n	7298 <setvbuf+0xe0>
    72ea:	2000      	movs	r0, #0
    72ec:	e7ba      	b.n	7264 <setvbuf+0xac>
    72ee:	60a5      	str	r5, [r4, #8]
    72f0:	e7c4      	b.n	727c <setvbuf+0xc4>
    72f2:	60a0      	str	r0, [r4, #8]
    72f4:	e7c2      	b.n	727c <setvbuf+0xc4>
    72f6:	2001      	movs	r0, #1
    72f8:	4240      	negs	r0, r0
    72fa:	e7bf      	b.n	727c <setvbuf+0xc4>
    72fc:	200000fc 	.word	0x200000fc
    7300:	000084c8 	.word	0x000084c8
    7304:	fffff35c 	.word	0xfffff35c
    7308:	000084e8 	.word	0x000084e8
    730c:	000084a8 	.word	0x000084a8

00007310 <__sflush_r>:
    7310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7312:	898a      	ldrh	r2, [r1, #12]
    7314:	0005      	movs	r5, r0
    7316:	000c      	movs	r4, r1
    7318:	0713      	lsls	r3, r2, #28
    731a:	d460      	bmi.n	73de <__sflush_r+0xce>
    731c:	684b      	ldr	r3, [r1, #4]
    731e:	2b00      	cmp	r3, #0
    7320:	dc04      	bgt.n	732c <__sflush_r+0x1c>
    7322:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    7324:	2b00      	cmp	r3, #0
    7326:	dc01      	bgt.n	732c <__sflush_r+0x1c>
    7328:	2000      	movs	r0, #0
    732a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    732c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    732e:	2f00      	cmp	r7, #0
    7330:	d0fa      	beq.n	7328 <__sflush_r+0x18>
    7332:	2300      	movs	r3, #0
    7334:	682e      	ldr	r6, [r5, #0]
    7336:	602b      	str	r3, [r5, #0]
    7338:	2380      	movs	r3, #128	; 0x80
    733a:	015b      	lsls	r3, r3, #5
    733c:	401a      	ands	r2, r3
    733e:	d034      	beq.n	73aa <__sflush_r+0x9a>
    7340:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7342:	89a3      	ldrh	r3, [r4, #12]
    7344:	075b      	lsls	r3, r3, #29
    7346:	d506      	bpl.n	7356 <__sflush_r+0x46>
    7348:	6863      	ldr	r3, [r4, #4]
    734a:	1ac0      	subs	r0, r0, r3
    734c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    734e:	2b00      	cmp	r3, #0
    7350:	d001      	beq.n	7356 <__sflush_r+0x46>
    7352:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7354:	1ac0      	subs	r0, r0, r3
    7356:	0002      	movs	r2, r0
    7358:	6a21      	ldr	r1, [r4, #32]
    735a:	2300      	movs	r3, #0
    735c:	0028      	movs	r0, r5
    735e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7360:	47b8      	blx	r7
    7362:	89a1      	ldrh	r1, [r4, #12]
    7364:	1c43      	adds	r3, r0, #1
    7366:	d106      	bne.n	7376 <__sflush_r+0x66>
    7368:	682b      	ldr	r3, [r5, #0]
    736a:	2b1d      	cmp	r3, #29
    736c:	d831      	bhi.n	73d2 <__sflush_r+0xc2>
    736e:	4a2c      	ldr	r2, [pc, #176]	; (7420 <__sflush_r+0x110>)
    7370:	40da      	lsrs	r2, r3
    7372:	07d3      	lsls	r3, r2, #31
    7374:	d52d      	bpl.n	73d2 <__sflush_r+0xc2>
    7376:	2300      	movs	r3, #0
    7378:	6063      	str	r3, [r4, #4]
    737a:	6923      	ldr	r3, [r4, #16]
    737c:	6023      	str	r3, [r4, #0]
    737e:	04cb      	lsls	r3, r1, #19
    7380:	d505      	bpl.n	738e <__sflush_r+0x7e>
    7382:	1c43      	adds	r3, r0, #1
    7384:	d102      	bne.n	738c <__sflush_r+0x7c>
    7386:	682b      	ldr	r3, [r5, #0]
    7388:	2b00      	cmp	r3, #0
    738a:	d100      	bne.n	738e <__sflush_r+0x7e>
    738c:	6560      	str	r0, [r4, #84]	; 0x54
    738e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7390:	602e      	str	r6, [r5, #0]
    7392:	2900      	cmp	r1, #0
    7394:	d0c8      	beq.n	7328 <__sflush_r+0x18>
    7396:	0023      	movs	r3, r4
    7398:	3344      	adds	r3, #68	; 0x44
    739a:	4299      	cmp	r1, r3
    739c:	d002      	beq.n	73a4 <__sflush_r+0x94>
    739e:	0028      	movs	r0, r5
    73a0:	f000 f9ba 	bl	7718 <_free_r>
    73a4:	2000      	movs	r0, #0
    73a6:	6360      	str	r0, [r4, #52]	; 0x34
    73a8:	e7bf      	b.n	732a <__sflush_r+0x1a>
    73aa:	2301      	movs	r3, #1
    73ac:	6a21      	ldr	r1, [r4, #32]
    73ae:	0028      	movs	r0, r5
    73b0:	47b8      	blx	r7
    73b2:	1c43      	adds	r3, r0, #1
    73b4:	d1c5      	bne.n	7342 <__sflush_r+0x32>
    73b6:	682b      	ldr	r3, [r5, #0]
    73b8:	2b00      	cmp	r3, #0
    73ba:	d0c2      	beq.n	7342 <__sflush_r+0x32>
    73bc:	2b1d      	cmp	r3, #29
    73be:	d001      	beq.n	73c4 <__sflush_r+0xb4>
    73c0:	2b16      	cmp	r3, #22
    73c2:	d101      	bne.n	73c8 <__sflush_r+0xb8>
    73c4:	602e      	str	r6, [r5, #0]
    73c6:	e7af      	b.n	7328 <__sflush_r+0x18>
    73c8:	2340      	movs	r3, #64	; 0x40
    73ca:	89a2      	ldrh	r2, [r4, #12]
    73cc:	4313      	orrs	r3, r2
    73ce:	81a3      	strh	r3, [r4, #12]
    73d0:	e7ab      	b.n	732a <__sflush_r+0x1a>
    73d2:	2340      	movs	r3, #64	; 0x40
    73d4:	430b      	orrs	r3, r1
    73d6:	2001      	movs	r0, #1
    73d8:	81a3      	strh	r3, [r4, #12]
    73da:	4240      	negs	r0, r0
    73dc:	e7a5      	b.n	732a <__sflush_r+0x1a>
    73de:	690f      	ldr	r7, [r1, #16]
    73e0:	2f00      	cmp	r7, #0
    73e2:	d0a1      	beq.n	7328 <__sflush_r+0x18>
    73e4:	680b      	ldr	r3, [r1, #0]
    73e6:	600f      	str	r7, [r1, #0]
    73e8:	1bdb      	subs	r3, r3, r7
    73ea:	9301      	str	r3, [sp, #4]
    73ec:	2300      	movs	r3, #0
    73ee:	0792      	lsls	r2, r2, #30
    73f0:	d100      	bne.n	73f4 <__sflush_r+0xe4>
    73f2:	694b      	ldr	r3, [r1, #20]
    73f4:	60a3      	str	r3, [r4, #8]
    73f6:	9b01      	ldr	r3, [sp, #4]
    73f8:	2b00      	cmp	r3, #0
    73fa:	dc00      	bgt.n	73fe <__sflush_r+0xee>
    73fc:	e794      	b.n	7328 <__sflush_r+0x18>
    73fe:	9b01      	ldr	r3, [sp, #4]
    7400:	003a      	movs	r2, r7
    7402:	6a21      	ldr	r1, [r4, #32]
    7404:	0028      	movs	r0, r5
    7406:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    7408:	47b0      	blx	r6
    740a:	2800      	cmp	r0, #0
    740c:	dc03      	bgt.n	7416 <__sflush_r+0x106>
    740e:	2340      	movs	r3, #64	; 0x40
    7410:	89a2      	ldrh	r2, [r4, #12]
    7412:	4313      	orrs	r3, r2
    7414:	e7df      	b.n	73d6 <__sflush_r+0xc6>
    7416:	9b01      	ldr	r3, [sp, #4]
    7418:	183f      	adds	r7, r7, r0
    741a:	1a1b      	subs	r3, r3, r0
    741c:	9301      	str	r3, [sp, #4]
    741e:	e7ea      	b.n	73f6 <__sflush_r+0xe6>
    7420:	20400001 	.word	0x20400001

00007424 <_fflush_r>:
    7424:	690b      	ldr	r3, [r1, #16]
    7426:	b570      	push	{r4, r5, r6, lr}
    7428:	0005      	movs	r5, r0
    742a:	000c      	movs	r4, r1
    742c:	2b00      	cmp	r3, #0
    742e:	d101      	bne.n	7434 <_fflush_r+0x10>
    7430:	2000      	movs	r0, #0
    7432:	bd70      	pop	{r4, r5, r6, pc}
    7434:	2800      	cmp	r0, #0
    7436:	d004      	beq.n	7442 <_fflush_r+0x1e>
    7438:	6983      	ldr	r3, [r0, #24]
    743a:	2b00      	cmp	r3, #0
    743c:	d101      	bne.n	7442 <_fflush_r+0x1e>
    743e:	f000 f85f 	bl	7500 <__sinit>
    7442:	4b0b      	ldr	r3, [pc, #44]	; (7470 <_fflush_r+0x4c>)
    7444:	429c      	cmp	r4, r3
    7446:	d109      	bne.n	745c <_fflush_r+0x38>
    7448:	686c      	ldr	r4, [r5, #4]
    744a:	220c      	movs	r2, #12
    744c:	5ea3      	ldrsh	r3, [r4, r2]
    744e:	2b00      	cmp	r3, #0
    7450:	d0ee      	beq.n	7430 <_fflush_r+0xc>
    7452:	0021      	movs	r1, r4
    7454:	0028      	movs	r0, r5
    7456:	f7ff ff5b 	bl	7310 <__sflush_r>
    745a:	e7ea      	b.n	7432 <_fflush_r+0xe>
    745c:	4b05      	ldr	r3, [pc, #20]	; (7474 <_fflush_r+0x50>)
    745e:	429c      	cmp	r4, r3
    7460:	d101      	bne.n	7466 <_fflush_r+0x42>
    7462:	68ac      	ldr	r4, [r5, #8]
    7464:	e7f1      	b.n	744a <_fflush_r+0x26>
    7466:	4b04      	ldr	r3, [pc, #16]	; (7478 <_fflush_r+0x54>)
    7468:	429c      	cmp	r4, r3
    746a:	d1ee      	bne.n	744a <_fflush_r+0x26>
    746c:	68ec      	ldr	r4, [r5, #12]
    746e:	e7ec      	b.n	744a <_fflush_r+0x26>
    7470:	000084c8 	.word	0x000084c8
    7474:	000084e8 	.word	0x000084e8
    7478:	000084a8 	.word	0x000084a8

0000747c <_cleanup_r>:
    747c:	b510      	push	{r4, lr}
    747e:	4902      	ldr	r1, [pc, #8]	; (7488 <_cleanup_r+0xc>)
    7480:	f000 f8b2 	bl	75e8 <_fwalk_reent>
    7484:	bd10      	pop	{r4, pc}
    7486:	46c0      	nop			; (mov r8, r8)
    7488:	00007425 	.word	0x00007425

0000748c <std.isra.0>:
    748c:	2300      	movs	r3, #0
    748e:	b510      	push	{r4, lr}
    7490:	0004      	movs	r4, r0
    7492:	6003      	str	r3, [r0, #0]
    7494:	6043      	str	r3, [r0, #4]
    7496:	6083      	str	r3, [r0, #8]
    7498:	8181      	strh	r1, [r0, #12]
    749a:	6643      	str	r3, [r0, #100]	; 0x64
    749c:	81c2      	strh	r2, [r0, #14]
    749e:	6103      	str	r3, [r0, #16]
    74a0:	6143      	str	r3, [r0, #20]
    74a2:	6183      	str	r3, [r0, #24]
    74a4:	0019      	movs	r1, r3
    74a6:	2208      	movs	r2, #8
    74a8:	305c      	adds	r0, #92	; 0x5c
    74aa:	f7ff fe58 	bl	715e <memset>
    74ae:	4b05      	ldr	r3, [pc, #20]	; (74c4 <std.isra.0+0x38>)
    74b0:	6224      	str	r4, [r4, #32]
    74b2:	6263      	str	r3, [r4, #36]	; 0x24
    74b4:	4b04      	ldr	r3, [pc, #16]	; (74c8 <std.isra.0+0x3c>)
    74b6:	62a3      	str	r3, [r4, #40]	; 0x28
    74b8:	4b04      	ldr	r3, [pc, #16]	; (74cc <std.isra.0+0x40>)
    74ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    74bc:	4b04      	ldr	r3, [pc, #16]	; (74d0 <std.isra.0+0x44>)
    74be:	6323      	str	r3, [r4, #48]	; 0x30
    74c0:	bd10      	pop	{r4, pc}
    74c2:	46c0      	nop			; (mov r8, r8)
    74c4:	00007e25 	.word	0x00007e25
    74c8:	00007e4d 	.word	0x00007e4d
    74cc:	00007e85 	.word	0x00007e85
    74d0:	00007eb1 	.word	0x00007eb1

000074d4 <__sfmoreglue>:
    74d4:	b570      	push	{r4, r5, r6, lr}
    74d6:	2568      	movs	r5, #104	; 0x68
    74d8:	1e4a      	subs	r2, r1, #1
    74da:	4355      	muls	r5, r2
    74dc:	000e      	movs	r6, r1
    74de:	0029      	movs	r1, r5
    74e0:	3174      	adds	r1, #116	; 0x74
    74e2:	f000 f963 	bl	77ac <_malloc_r>
    74e6:	1e04      	subs	r4, r0, #0
    74e8:	d008      	beq.n	74fc <__sfmoreglue+0x28>
    74ea:	2100      	movs	r1, #0
    74ec:	002a      	movs	r2, r5
    74ee:	6001      	str	r1, [r0, #0]
    74f0:	6046      	str	r6, [r0, #4]
    74f2:	300c      	adds	r0, #12
    74f4:	60a0      	str	r0, [r4, #8]
    74f6:	3268      	adds	r2, #104	; 0x68
    74f8:	f7ff fe31 	bl	715e <memset>
    74fc:	0020      	movs	r0, r4
    74fe:	bd70      	pop	{r4, r5, r6, pc}

00007500 <__sinit>:
    7500:	6983      	ldr	r3, [r0, #24]
    7502:	b513      	push	{r0, r1, r4, lr}
    7504:	0004      	movs	r4, r0
    7506:	2b00      	cmp	r3, #0
    7508:	d128      	bne.n	755c <__sinit+0x5c>
    750a:	6483      	str	r3, [r0, #72]	; 0x48
    750c:	64c3      	str	r3, [r0, #76]	; 0x4c
    750e:	6503      	str	r3, [r0, #80]	; 0x50
    7510:	4b13      	ldr	r3, [pc, #76]	; (7560 <__sinit+0x60>)
    7512:	4a14      	ldr	r2, [pc, #80]	; (7564 <__sinit+0x64>)
    7514:	681b      	ldr	r3, [r3, #0]
    7516:	6282      	str	r2, [r0, #40]	; 0x28
    7518:	9301      	str	r3, [sp, #4]
    751a:	4298      	cmp	r0, r3
    751c:	d101      	bne.n	7522 <__sinit+0x22>
    751e:	2301      	movs	r3, #1
    7520:	6183      	str	r3, [r0, #24]
    7522:	0020      	movs	r0, r4
    7524:	f000 f820 	bl	7568 <__sfp>
    7528:	6060      	str	r0, [r4, #4]
    752a:	0020      	movs	r0, r4
    752c:	f000 f81c 	bl	7568 <__sfp>
    7530:	60a0      	str	r0, [r4, #8]
    7532:	0020      	movs	r0, r4
    7534:	f000 f818 	bl	7568 <__sfp>
    7538:	2200      	movs	r2, #0
    753a:	60e0      	str	r0, [r4, #12]
    753c:	2104      	movs	r1, #4
    753e:	6860      	ldr	r0, [r4, #4]
    7540:	f7ff ffa4 	bl	748c <std.isra.0>
    7544:	2201      	movs	r2, #1
    7546:	2109      	movs	r1, #9
    7548:	68a0      	ldr	r0, [r4, #8]
    754a:	f7ff ff9f 	bl	748c <std.isra.0>
    754e:	2202      	movs	r2, #2
    7550:	2112      	movs	r1, #18
    7552:	68e0      	ldr	r0, [r4, #12]
    7554:	f7ff ff9a 	bl	748c <std.isra.0>
    7558:	2301      	movs	r3, #1
    755a:	61a3      	str	r3, [r4, #24]
    755c:	bd13      	pop	{r0, r1, r4, pc}
    755e:	46c0      	nop			; (mov r8, r8)
    7560:	000084a4 	.word	0x000084a4
    7564:	0000747d 	.word	0x0000747d

00007568 <__sfp>:
    7568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    756a:	4b1e      	ldr	r3, [pc, #120]	; (75e4 <__sfp+0x7c>)
    756c:	0007      	movs	r7, r0
    756e:	681e      	ldr	r6, [r3, #0]
    7570:	69b3      	ldr	r3, [r6, #24]
    7572:	2b00      	cmp	r3, #0
    7574:	d102      	bne.n	757c <__sfp+0x14>
    7576:	0030      	movs	r0, r6
    7578:	f7ff ffc2 	bl	7500 <__sinit>
    757c:	3648      	adds	r6, #72	; 0x48
    757e:	68b4      	ldr	r4, [r6, #8]
    7580:	6873      	ldr	r3, [r6, #4]
    7582:	3b01      	subs	r3, #1
    7584:	d504      	bpl.n	7590 <__sfp+0x28>
    7586:	6833      	ldr	r3, [r6, #0]
    7588:	2b00      	cmp	r3, #0
    758a:	d007      	beq.n	759c <__sfp+0x34>
    758c:	6836      	ldr	r6, [r6, #0]
    758e:	e7f6      	b.n	757e <__sfp+0x16>
    7590:	220c      	movs	r2, #12
    7592:	5ea5      	ldrsh	r5, [r4, r2]
    7594:	2d00      	cmp	r5, #0
    7596:	d00d      	beq.n	75b4 <__sfp+0x4c>
    7598:	3468      	adds	r4, #104	; 0x68
    759a:	e7f2      	b.n	7582 <__sfp+0x1a>
    759c:	2104      	movs	r1, #4
    759e:	0038      	movs	r0, r7
    75a0:	f7ff ff98 	bl	74d4 <__sfmoreglue>
    75a4:	6030      	str	r0, [r6, #0]
    75a6:	2800      	cmp	r0, #0
    75a8:	d1f0      	bne.n	758c <__sfp+0x24>
    75aa:	230c      	movs	r3, #12
    75ac:	0004      	movs	r4, r0
    75ae:	603b      	str	r3, [r7, #0]
    75b0:	0020      	movs	r0, r4
    75b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75b4:	2301      	movs	r3, #1
    75b6:	0020      	movs	r0, r4
    75b8:	425b      	negs	r3, r3
    75ba:	81e3      	strh	r3, [r4, #14]
    75bc:	3302      	adds	r3, #2
    75be:	81a3      	strh	r3, [r4, #12]
    75c0:	6665      	str	r5, [r4, #100]	; 0x64
    75c2:	6025      	str	r5, [r4, #0]
    75c4:	60a5      	str	r5, [r4, #8]
    75c6:	6065      	str	r5, [r4, #4]
    75c8:	6125      	str	r5, [r4, #16]
    75ca:	6165      	str	r5, [r4, #20]
    75cc:	61a5      	str	r5, [r4, #24]
    75ce:	2208      	movs	r2, #8
    75d0:	0029      	movs	r1, r5
    75d2:	305c      	adds	r0, #92	; 0x5c
    75d4:	f7ff fdc3 	bl	715e <memset>
    75d8:	6365      	str	r5, [r4, #52]	; 0x34
    75da:	63a5      	str	r5, [r4, #56]	; 0x38
    75dc:	64a5      	str	r5, [r4, #72]	; 0x48
    75de:	64e5      	str	r5, [r4, #76]	; 0x4c
    75e0:	e7e6      	b.n	75b0 <__sfp+0x48>
    75e2:	46c0      	nop			; (mov r8, r8)
    75e4:	000084a4 	.word	0x000084a4

000075e8 <_fwalk_reent>:
    75e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    75ea:	0004      	movs	r4, r0
    75ec:	0007      	movs	r7, r0
    75ee:	2600      	movs	r6, #0
    75f0:	9101      	str	r1, [sp, #4]
    75f2:	3448      	adds	r4, #72	; 0x48
    75f4:	2c00      	cmp	r4, #0
    75f6:	d101      	bne.n	75fc <_fwalk_reent+0x14>
    75f8:	0030      	movs	r0, r6
    75fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    75fc:	6863      	ldr	r3, [r4, #4]
    75fe:	68a5      	ldr	r5, [r4, #8]
    7600:	9300      	str	r3, [sp, #0]
    7602:	9b00      	ldr	r3, [sp, #0]
    7604:	3b01      	subs	r3, #1
    7606:	9300      	str	r3, [sp, #0]
    7608:	d501      	bpl.n	760e <_fwalk_reent+0x26>
    760a:	6824      	ldr	r4, [r4, #0]
    760c:	e7f2      	b.n	75f4 <_fwalk_reent+0xc>
    760e:	89ab      	ldrh	r3, [r5, #12]
    7610:	2b01      	cmp	r3, #1
    7612:	d908      	bls.n	7626 <_fwalk_reent+0x3e>
    7614:	220e      	movs	r2, #14
    7616:	5eab      	ldrsh	r3, [r5, r2]
    7618:	3301      	adds	r3, #1
    761a:	d004      	beq.n	7626 <_fwalk_reent+0x3e>
    761c:	0029      	movs	r1, r5
    761e:	0038      	movs	r0, r7
    7620:	9b01      	ldr	r3, [sp, #4]
    7622:	4798      	blx	r3
    7624:	4306      	orrs	r6, r0
    7626:	3568      	adds	r5, #104	; 0x68
    7628:	e7eb      	b.n	7602 <_fwalk_reent+0x1a>
	...

0000762c <__swhatbuf_r>:
    762c:	b570      	push	{r4, r5, r6, lr}
    762e:	000e      	movs	r6, r1
    7630:	001d      	movs	r5, r3
    7632:	230e      	movs	r3, #14
    7634:	5ec9      	ldrsh	r1, [r1, r3]
    7636:	b090      	sub	sp, #64	; 0x40
    7638:	0014      	movs	r4, r2
    763a:	2900      	cmp	r1, #0
    763c:	da07      	bge.n	764e <__swhatbuf_r+0x22>
    763e:	2300      	movs	r3, #0
    7640:	602b      	str	r3, [r5, #0]
    7642:	89b3      	ldrh	r3, [r6, #12]
    7644:	061b      	lsls	r3, r3, #24
    7646:	d411      	bmi.n	766c <__swhatbuf_r+0x40>
    7648:	2380      	movs	r3, #128	; 0x80
    764a:	00db      	lsls	r3, r3, #3
    764c:	e00f      	b.n	766e <__swhatbuf_r+0x42>
    764e:	aa01      	add	r2, sp, #4
    7650:	f000 fd26 	bl	80a0 <_fstat_r>
    7654:	2800      	cmp	r0, #0
    7656:	dbf2      	blt.n	763e <__swhatbuf_r+0x12>
    7658:	22f0      	movs	r2, #240	; 0xf0
    765a:	9b02      	ldr	r3, [sp, #8]
    765c:	0212      	lsls	r2, r2, #8
    765e:	4013      	ands	r3, r2
    7660:	4a05      	ldr	r2, [pc, #20]	; (7678 <__swhatbuf_r+0x4c>)
    7662:	189b      	adds	r3, r3, r2
    7664:	425a      	negs	r2, r3
    7666:	4153      	adcs	r3, r2
    7668:	602b      	str	r3, [r5, #0]
    766a:	e7ed      	b.n	7648 <__swhatbuf_r+0x1c>
    766c:	2340      	movs	r3, #64	; 0x40
    766e:	2000      	movs	r0, #0
    7670:	6023      	str	r3, [r4, #0]
    7672:	b010      	add	sp, #64	; 0x40
    7674:	bd70      	pop	{r4, r5, r6, pc}
    7676:	46c0      	nop			; (mov r8, r8)
    7678:	ffffe000 	.word	0xffffe000

0000767c <__smakebuf_r>:
    767c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    767e:	2602      	movs	r6, #2
    7680:	898b      	ldrh	r3, [r1, #12]
    7682:	0005      	movs	r5, r0
    7684:	000c      	movs	r4, r1
    7686:	4233      	tst	r3, r6
    7688:	d006      	beq.n	7698 <__smakebuf_r+0x1c>
    768a:	0023      	movs	r3, r4
    768c:	3347      	adds	r3, #71	; 0x47
    768e:	6023      	str	r3, [r4, #0]
    7690:	6123      	str	r3, [r4, #16]
    7692:	2301      	movs	r3, #1
    7694:	6163      	str	r3, [r4, #20]
    7696:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7698:	ab01      	add	r3, sp, #4
    769a:	466a      	mov	r2, sp
    769c:	f7ff ffc6 	bl	762c <__swhatbuf_r>
    76a0:	9900      	ldr	r1, [sp, #0]
    76a2:	0007      	movs	r7, r0
    76a4:	0028      	movs	r0, r5
    76a6:	f000 f881 	bl	77ac <_malloc_r>
    76aa:	2800      	cmp	r0, #0
    76ac:	d108      	bne.n	76c0 <__smakebuf_r+0x44>
    76ae:	220c      	movs	r2, #12
    76b0:	5ea3      	ldrsh	r3, [r4, r2]
    76b2:	059a      	lsls	r2, r3, #22
    76b4:	d4ef      	bmi.n	7696 <__smakebuf_r+0x1a>
    76b6:	2203      	movs	r2, #3
    76b8:	4393      	bics	r3, r2
    76ba:	431e      	orrs	r6, r3
    76bc:	81a6      	strh	r6, [r4, #12]
    76be:	e7e4      	b.n	768a <__smakebuf_r+0xe>
    76c0:	4b0f      	ldr	r3, [pc, #60]	; (7700 <__smakebuf_r+0x84>)
    76c2:	62ab      	str	r3, [r5, #40]	; 0x28
    76c4:	2380      	movs	r3, #128	; 0x80
    76c6:	89a2      	ldrh	r2, [r4, #12]
    76c8:	6020      	str	r0, [r4, #0]
    76ca:	4313      	orrs	r3, r2
    76cc:	81a3      	strh	r3, [r4, #12]
    76ce:	9b00      	ldr	r3, [sp, #0]
    76d0:	6120      	str	r0, [r4, #16]
    76d2:	6163      	str	r3, [r4, #20]
    76d4:	9b01      	ldr	r3, [sp, #4]
    76d6:	2b00      	cmp	r3, #0
    76d8:	d00d      	beq.n	76f6 <__smakebuf_r+0x7a>
    76da:	230e      	movs	r3, #14
    76dc:	5ee1      	ldrsh	r1, [r4, r3]
    76de:	0028      	movs	r0, r5
    76e0:	f000 fcf0 	bl	80c4 <_isatty_r>
    76e4:	2800      	cmp	r0, #0
    76e6:	d006      	beq.n	76f6 <__smakebuf_r+0x7a>
    76e8:	2203      	movs	r2, #3
    76ea:	89a3      	ldrh	r3, [r4, #12]
    76ec:	4393      	bics	r3, r2
    76ee:	001a      	movs	r2, r3
    76f0:	2301      	movs	r3, #1
    76f2:	4313      	orrs	r3, r2
    76f4:	81a3      	strh	r3, [r4, #12]
    76f6:	89a0      	ldrh	r0, [r4, #12]
    76f8:	4338      	orrs	r0, r7
    76fa:	81a0      	strh	r0, [r4, #12]
    76fc:	e7cb      	b.n	7696 <__smakebuf_r+0x1a>
    76fe:	46c0      	nop			; (mov r8, r8)
    7700:	0000747d 	.word	0x0000747d

00007704 <malloc>:
    7704:	b510      	push	{r4, lr}
    7706:	4b03      	ldr	r3, [pc, #12]	; (7714 <malloc+0x10>)
    7708:	0001      	movs	r1, r0
    770a:	6818      	ldr	r0, [r3, #0]
    770c:	f000 f84e 	bl	77ac <_malloc_r>
    7710:	bd10      	pop	{r4, pc}
    7712:	46c0      	nop			; (mov r8, r8)
    7714:	200000fc 	.word	0x200000fc

00007718 <_free_r>:
    7718:	b570      	push	{r4, r5, r6, lr}
    771a:	0005      	movs	r5, r0
    771c:	2900      	cmp	r1, #0
    771e:	d010      	beq.n	7742 <_free_r+0x2a>
    7720:	1f0c      	subs	r4, r1, #4
    7722:	6823      	ldr	r3, [r4, #0]
    7724:	2b00      	cmp	r3, #0
    7726:	da00      	bge.n	772a <_free_r+0x12>
    7728:	18e4      	adds	r4, r4, r3
    772a:	0028      	movs	r0, r5
    772c:	f000 fcfb 	bl	8126 <__malloc_lock>
    7730:	4a1d      	ldr	r2, [pc, #116]	; (77a8 <_free_r+0x90>)
    7732:	6813      	ldr	r3, [r2, #0]
    7734:	2b00      	cmp	r3, #0
    7736:	d105      	bne.n	7744 <_free_r+0x2c>
    7738:	6063      	str	r3, [r4, #4]
    773a:	6014      	str	r4, [r2, #0]
    773c:	0028      	movs	r0, r5
    773e:	f000 fcf3 	bl	8128 <__malloc_unlock>
    7742:	bd70      	pop	{r4, r5, r6, pc}
    7744:	42a3      	cmp	r3, r4
    7746:	d909      	bls.n	775c <_free_r+0x44>
    7748:	6821      	ldr	r1, [r4, #0]
    774a:	1860      	adds	r0, r4, r1
    774c:	4283      	cmp	r3, r0
    774e:	d1f3      	bne.n	7738 <_free_r+0x20>
    7750:	6818      	ldr	r0, [r3, #0]
    7752:	685b      	ldr	r3, [r3, #4]
    7754:	1841      	adds	r1, r0, r1
    7756:	6021      	str	r1, [r4, #0]
    7758:	e7ee      	b.n	7738 <_free_r+0x20>
    775a:	0013      	movs	r3, r2
    775c:	685a      	ldr	r2, [r3, #4]
    775e:	2a00      	cmp	r2, #0
    7760:	d001      	beq.n	7766 <_free_r+0x4e>
    7762:	42a2      	cmp	r2, r4
    7764:	d9f9      	bls.n	775a <_free_r+0x42>
    7766:	6819      	ldr	r1, [r3, #0]
    7768:	1858      	adds	r0, r3, r1
    776a:	42a0      	cmp	r0, r4
    776c:	d10b      	bne.n	7786 <_free_r+0x6e>
    776e:	6820      	ldr	r0, [r4, #0]
    7770:	1809      	adds	r1, r1, r0
    7772:	1858      	adds	r0, r3, r1
    7774:	6019      	str	r1, [r3, #0]
    7776:	4282      	cmp	r2, r0
    7778:	d1e0      	bne.n	773c <_free_r+0x24>
    777a:	6810      	ldr	r0, [r2, #0]
    777c:	6852      	ldr	r2, [r2, #4]
    777e:	1841      	adds	r1, r0, r1
    7780:	6019      	str	r1, [r3, #0]
    7782:	605a      	str	r2, [r3, #4]
    7784:	e7da      	b.n	773c <_free_r+0x24>
    7786:	42a0      	cmp	r0, r4
    7788:	d902      	bls.n	7790 <_free_r+0x78>
    778a:	230c      	movs	r3, #12
    778c:	602b      	str	r3, [r5, #0]
    778e:	e7d5      	b.n	773c <_free_r+0x24>
    7790:	6821      	ldr	r1, [r4, #0]
    7792:	1860      	adds	r0, r4, r1
    7794:	4282      	cmp	r2, r0
    7796:	d103      	bne.n	77a0 <_free_r+0x88>
    7798:	6810      	ldr	r0, [r2, #0]
    779a:	6852      	ldr	r2, [r2, #4]
    779c:	1841      	adds	r1, r0, r1
    779e:	6021      	str	r1, [r4, #0]
    77a0:	6062      	str	r2, [r4, #4]
    77a2:	605c      	str	r4, [r3, #4]
    77a4:	e7ca      	b.n	773c <_free_r+0x24>
    77a6:	46c0      	nop			; (mov r8, r8)
    77a8:	200003b0 	.word	0x200003b0

000077ac <_malloc_r>:
    77ac:	2303      	movs	r3, #3
    77ae:	b570      	push	{r4, r5, r6, lr}
    77b0:	1ccd      	adds	r5, r1, #3
    77b2:	439d      	bics	r5, r3
    77b4:	3508      	adds	r5, #8
    77b6:	0006      	movs	r6, r0
    77b8:	2d0c      	cmp	r5, #12
    77ba:	d21e      	bcs.n	77fa <_malloc_r+0x4e>
    77bc:	250c      	movs	r5, #12
    77be:	42a9      	cmp	r1, r5
    77c0:	d81d      	bhi.n	77fe <_malloc_r+0x52>
    77c2:	0030      	movs	r0, r6
    77c4:	f000 fcaf 	bl	8126 <__malloc_lock>
    77c8:	4a25      	ldr	r2, [pc, #148]	; (7860 <_malloc_r+0xb4>)
    77ca:	6814      	ldr	r4, [r2, #0]
    77cc:	0021      	movs	r1, r4
    77ce:	2900      	cmp	r1, #0
    77d0:	d119      	bne.n	7806 <_malloc_r+0x5a>
    77d2:	4c24      	ldr	r4, [pc, #144]	; (7864 <_malloc_r+0xb8>)
    77d4:	6823      	ldr	r3, [r4, #0]
    77d6:	2b00      	cmp	r3, #0
    77d8:	d103      	bne.n	77e2 <_malloc_r+0x36>
    77da:	0030      	movs	r0, r6
    77dc:	f000 fb10 	bl	7e00 <_sbrk_r>
    77e0:	6020      	str	r0, [r4, #0]
    77e2:	0029      	movs	r1, r5
    77e4:	0030      	movs	r0, r6
    77e6:	f000 fb0b 	bl	7e00 <_sbrk_r>
    77ea:	1c43      	adds	r3, r0, #1
    77ec:	d12c      	bne.n	7848 <_malloc_r+0x9c>
    77ee:	230c      	movs	r3, #12
    77f0:	0030      	movs	r0, r6
    77f2:	6033      	str	r3, [r6, #0]
    77f4:	f000 fc98 	bl	8128 <__malloc_unlock>
    77f8:	e003      	b.n	7802 <_malloc_r+0x56>
    77fa:	2d00      	cmp	r5, #0
    77fc:	dadf      	bge.n	77be <_malloc_r+0x12>
    77fe:	230c      	movs	r3, #12
    7800:	6033      	str	r3, [r6, #0]
    7802:	2000      	movs	r0, #0
    7804:	bd70      	pop	{r4, r5, r6, pc}
    7806:	680b      	ldr	r3, [r1, #0]
    7808:	1b5b      	subs	r3, r3, r5
    780a:	d41a      	bmi.n	7842 <_malloc_r+0x96>
    780c:	2b0b      	cmp	r3, #11
    780e:	d903      	bls.n	7818 <_malloc_r+0x6c>
    7810:	600b      	str	r3, [r1, #0]
    7812:	18cc      	adds	r4, r1, r3
    7814:	6025      	str	r5, [r4, #0]
    7816:	e003      	b.n	7820 <_malloc_r+0x74>
    7818:	428c      	cmp	r4, r1
    781a:	d10e      	bne.n	783a <_malloc_r+0x8e>
    781c:	6863      	ldr	r3, [r4, #4]
    781e:	6013      	str	r3, [r2, #0]
    7820:	0030      	movs	r0, r6
    7822:	f000 fc81 	bl	8128 <__malloc_unlock>
    7826:	0020      	movs	r0, r4
    7828:	2207      	movs	r2, #7
    782a:	300b      	adds	r0, #11
    782c:	1d23      	adds	r3, r4, #4
    782e:	4390      	bics	r0, r2
    7830:	1ac3      	subs	r3, r0, r3
    7832:	d0e7      	beq.n	7804 <_malloc_r+0x58>
    7834:	425a      	negs	r2, r3
    7836:	50e2      	str	r2, [r4, r3]
    7838:	e7e4      	b.n	7804 <_malloc_r+0x58>
    783a:	684b      	ldr	r3, [r1, #4]
    783c:	6063      	str	r3, [r4, #4]
    783e:	000c      	movs	r4, r1
    7840:	e7ee      	b.n	7820 <_malloc_r+0x74>
    7842:	000c      	movs	r4, r1
    7844:	6849      	ldr	r1, [r1, #4]
    7846:	e7c2      	b.n	77ce <_malloc_r+0x22>
    7848:	2303      	movs	r3, #3
    784a:	1cc4      	adds	r4, r0, #3
    784c:	439c      	bics	r4, r3
    784e:	42a0      	cmp	r0, r4
    7850:	d0e0      	beq.n	7814 <_malloc_r+0x68>
    7852:	1a21      	subs	r1, r4, r0
    7854:	0030      	movs	r0, r6
    7856:	f000 fad3 	bl	7e00 <_sbrk_r>
    785a:	1c43      	adds	r3, r0, #1
    785c:	d1da      	bne.n	7814 <_malloc_r+0x68>
    785e:	e7c6      	b.n	77ee <_malloc_r+0x42>
    7860:	200003b0 	.word	0x200003b0
    7864:	200003b4 	.word	0x200003b4

00007868 <__sfputc_r>:
    7868:	6893      	ldr	r3, [r2, #8]
    786a:	b510      	push	{r4, lr}
    786c:	3b01      	subs	r3, #1
    786e:	6093      	str	r3, [r2, #8]
    7870:	2b00      	cmp	r3, #0
    7872:	da05      	bge.n	7880 <__sfputc_r+0x18>
    7874:	6994      	ldr	r4, [r2, #24]
    7876:	42a3      	cmp	r3, r4
    7878:	db08      	blt.n	788c <__sfputc_r+0x24>
    787a:	b2cb      	uxtb	r3, r1
    787c:	2b0a      	cmp	r3, #10
    787e:	d005      	beq.n	788c <__sfputc_r+0x24>
    7880:	6813      	ldr	r3, [r2, #0]
    7882:	1c58      	adds	r0, r3, #1
    7884:	6010      	str	r0, [r2, #0]
    7886:	7019      	strb	r1, [r3, #0]
    7888:	b2c8      	uxtb	r0, r1
    788a:	bd10      	pop	{r4, pc}
    788c:	f000 fb16 	bl	7ebc <__swbuf_r>
    7890:	e7fb      	b.n	788a <__sfputc_r+0x22>

00007892 <__sfputs_r>:
    7892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7894:	0006      	movs	r6, r0
    7896:	000f      	movs	r7, r1
    7898:	0014      	movs	r4, r2
    789a:	18d5      	adds	r5, r2, r3
    789c:	42ac      	cmp	r4, r5
    789e:	d101      	bne.n	78a4 <__sfputs_r+0x12>
    78a0:	2000      	movs	r0, #0
    78a2:	e007      	b.n	78b4 <__sfputs_r+0x22>
    78a4:	7821      	ldrb	r1, [r4, #0]
    78a6:	003a      	movs	r2, r7
    78a8:	0030      	movs	r0, r6
    78aa:	f7ff ffdd 	bl	7868 <__sfputc_r>
    78ae:	3401      	adds	r4, #1
    78b0:	1c43      	adds	r3, r0, #1
    78b2:	d1f3      	bne.n	789c <__sfputs_r+0xa>
    78b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000078b8 <_vfiprintf_r>:
    78b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    78ba:	b09f      	sub	sp, #124	; 0x7c
    78bc:	0006      	movs	r6, r0
    78be:	000f      	movs	r7, r1
    78c0:	0014      	movs	r4, r2
    78c2:	9305      	str	r3, [sp, #20]
    78c4:	2800      	cmp	r0, #0
    78c6:	d004      	beq.n	78d2 <_vfiprintf_r+0x1a>
    78c8:	6983      	ldr	r3, [r0, #24]
    78ca:	2b00      	cmp	r3, #0
    78cc:	d101      	bne.n	78d2 <_vfiprintf_r+0x1a>
    78ce:	f7ff fe17 	bl	7500 <__sinit>
    78d2:	4b7f      	ldr	r3, [pc, #508]	; (7ad0 <_vfiprintf_r+0x218>)
    78d4:	429f      	cmp	r7, r3
    78d6:	d15c      	bne.n	7992 <_vfiprintf_r+0xda>
    78d8:	6877      	ldr	r7, [r6, #4]
    78da:	89bb      	ldrh	r3, [r7, #12]
    78dc:	071b      	lsls	r3, r3, #28
    78de:	d562      	bpl.n	79a6 <_vfiprintf_r+0xee>
    78e0:	693b      	ldr	r3, [r7, #16]
    78e2:	2b00      	cmp	r3, #0
    78e4:	d05f      	beq.n	79a6 <_vfiprintf_r+0xee>
    78e6:	2300      	movs	r3, #0
    78e8:	ad06      	add	r5, sp, #24
    78ea:	616b      	str	r3, [r5, #20]
    78ec:	3320      	adds	r3, #32
    78ee:	766b      	strb	r3, [r5, #25]
    78f0:	3310      	adds	r3, #16
    78f2:	76ab      	strb	r3, [r5, #26]
    78f4:	9402      	str	r4, [sp, #8]
    78f6:	9c02      	ldr	r4, [sp, #8]
    78f8:	7823      	ldrb	r3, [r4, #0]
    78fa:	2b00      	cmp	r3, #0
    78fc:	d15d      	bne.n	79ba <_vfiprintf_r+0x102>
    78fe:	9b02      	ldr	r3, [sp, #8]
    7900:	1ae3      	subs	r3, r4, r3
    7902:	9304      	str	r3, [sp, #16]
    7904:	d00d      	beq.n	7922 <_vfiprintf_r+0x6a>
    7906:	9b04      	ldr	r3, [sp, #16]
    7908:	9a02      	ldr	r2, [sp, #8]
    790a:	0039      	movs	r1, r7
    790c:	0030      	movs	r0, r6
    790e:	f7ff ffc0 	bl	7892 <__sfputs_r>
    7912:	1c43      	adds	r3, r0, #1
    7914:	d100      	bne.n	7918 <_vfiprintf_r+0x60>
    7916:	e0cc      	b.n	7ab2 <_vfiprintf_r+0x1fa>
    7918:	696a      	ldr	r2, [r5, #20]
    791a:	9b04      	ldr	r3, [sp, #16]
    791c:	4694      	mov	ip, r2
    791e:	4463      	add	r3, ip
    7920:	616b      	str	r3, [r5, #20]
    7922:	7823      	ldrb	r3, [r4, #0]
    7924:	2b00      	cmp	r3, #0
    7926:	d100      	bne.n	792a <_vfiprintf_r+0x72>
    7928:	e0c3      	b.n	7ab2 <_vfiprintf_r+0x1fa>
    792a:	2201      	movs	r2, #1
    792c:	2300      	movs	r3, #0
    792e:	4252      	negs	r2, r2
    7930:	606a      	str	r2, [r5, #4]
    7932:	a902      	add	r1, sp, #8
    7934:	3254      	adds	r2, #84	; 0x54
    7936:	1852      	adds	r2, r2, r1
    7938:	3401      	adds	r4, #1
    793a:	602b      	str	r3, [r5, #0]
    793c:	60eb      	str	r3, [r5, #12]
    793e:	60ab      	str	r3, [r5, #8]
    7940:	7013      	strb	r3, [r2, #0]
    7942:	65ab      	str	r3, [r5, #88]	; 0x58
    7944:	7821      	ldrb	r1, [r4, #0]
    7946:	2205      	movs	r2, #5
    7948:	4862      	ldr	r0, [pc, #392]	; (7ad4 <_vfiprintf_r+0x21c>)
    794a:	f000 fbe1 	bl	8110 <memchr>
    794e:	1c63      	adds	r3, r4, #1
    7950:	469c      	mov	ip, r3
    7952:	2800      	cmp	r0, #0
    7954:	d135      	bne.n	79c2 <_vfiprintf_r+0x10a>
    7956:	6829      	ldr	r1, [r5, #0]
    7958:	06cb      	lsls	r3, r1, #27
    795a:	d504      	bpl.n	7966 <_vfiprintf_r+0xae>
    795c:	2353      	movs	r3, #83	; 0x53
    795e:	aa02      	add	r2, sp, #8
    7960:	3020      	adds	r0, #32
    7962:	189b      	adds	r3, r3, r2
    7964:	7018      	strb	r0, [r3, #0]
    7966:	070b      	lsls	r3, r1, #28
    7968:	d504      	bpl.n	7974 <_vfiprintf_r+0xbc>
    796a:	2353      	movs	r3, #83	; 0x53
    796c:	202b      	movs	r0, #43	; 0x2b
    796e:	aa02      	add	r2, sp, #8
    7970:	189b      	adds	r3, r3, r2
    7972:	7018      	strb	r0, [r3, #0]
    7974:	7823      	ldrb	r3, [r4, #0]
    7976:	2b2a      	cmp	r3, #42	; 0x2a
    7978:	d02c      	beq.n	79d4 <_vfiprintf_r+0x11c>
    797a:	2000      	movs	r0, #0
    797c:	210a      	movs	r1, #10
    797e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7980:	7822      	ldrb	r2, [r4, #0]
    7982:	3a30      	subs	r2, #48	; 0x30
    7984:	2a09      	cmp	r2, #9
    7986:	d800      	bhi.n	798a <_vfiprintf_r+0xd2>
    7988:	e06b      	b.n	7a62 <_vfiprintf_r+0x1aa>
    798a:	2800      	cmp	r0, #0
    798c:	d02a      	beq.n	79e4 <_vfiprintf_r+0x12c>
    798e:	9309      	str	r3, [sp, #36]	; 0x24
    7990:	e028      	b.n	79e4 <_vfiprintf_r+0x12c>
    7992:	4b51      	ldr	r3, [pc, #324]	; (7ad8 <_vfiprintf_r+0x220>)
    7994:	429f      	cmp	r7, r3
    7996:	d101      	bne.n	799c <_vfiprintf_r+0xe4>
    7998:	68b7      	ldr	r7, [r6, #8]
    799a:	e79e      	b.n	78da <_vfiprintf_r+0x22>
    799c:	4b4f      	ldr	r3, [pc, #316]	; (7adc <_vfiprintf_r+0x224>)
    799e:	429f      	cmp	r7, r3
    79a0:	d19b      	bne.n	78da <_vfiprintf_r+0x22>
    79a2:	68f7      	ldr	r7, [r6, #12]
    79a4:	e799      	b.n	78da <_vfiprintf_r+0x22>
    79a6:	0039      	movs	r1, r7
    79a8:	0030      	movs	r0, r6
    79aa:	f000 faf1 	bl	7f90 <__swsetup_r>
    79ae:	2800      	cmp	r0, #0
    79b0:	d099      	beq.n	78e6 <_vfiprintf_r+0x2e>
    79b2:	2001      	movs	r0, #1
    79b4:	4240      	negs	r0, r0
    79b6:	b01f      	add	sp, #124	; 0x7c
    79b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79ba:	2b25      	cmp	r3, #37	; 0x25
    79bc:	d09f      	beq.n	78fe <_vfiprintf_r+0x46>
    79be:	3401      	adds	r4, #1
    79c0:	e79a      	b.n	78f8 <_vfiprintf_r+0x40>
    79c2:	4b44      	ldr	r3, [pc, #272]	; (7ad4 <_vfiprintf_r+0x21c>)
    79c4:	6829      	ldr	r1, [r5, #0]
    79c6:	1ac0      	subs	r0, r0, r3
    79c8:	2301      	movs	r3, #1
    79ca:	4083      	lsls	r3, r0
    79cc:	430b      	orrs	r3, r1
    79ce:	602b      	str	r3, [r5, #0]
    79d0:	4664      	mov	r4, ip
    79d2:	e7b7      	b.n	7944 <_vfiprintf_r+0x8c>
    79d4:	9b05      	ldr	r3, [sp, #20]
    79d6:	1d18      	adds	r0, r3, #4
    79d8:	681b      	ldr	r3, [r3, #0]
    79da:	9005      	str	r0, [sp, #20]
    79dc:	2b00      	cmp	r3, #0
    79de:	db3a      	blt.n	7a56 <_vfiprintf_r+0x19e>
    79e0:	9309      	str	r3, [sp, #36]	; 0x24
    79e2:	4664      	mov	r4, ip
    79e4:	7823      	ldrb	r3, [r4, #0]
    79e6:	2b2e      	cmp	r3, #46	; 0x2e
    79e8:	d10b      	bne.n	7a02 <_vfiprintf_r+0x14a>
    79ea:	7863      	ldrb	r3, [r4, #1]
    79ec:	1c62      	adds	r2, r4, #1
    79ee:	2b2a      	cmp	r3, #42	; 0x2a
    79f0:	d13f      	bne.n	7a72 <_vfiprintf_r+0x1ba>
    79f2:	9b05      	ldr	r3, [sp, #20]
    79f4:	3402      	adds	r4, #2
    79f6:	1d1a      	adds	r2, r3, #4
    79f8:	681b      	ldr	r3, [r3, #0]
    79fa:	9205      	str	r2, [sp, #20]
    79fc:	2b00      	cmp	r3, #0
    79fe:	db35      	blt.n	7a6c <_vfiprintf_r+0x1b4>
    7a00:	9307      	str	r3, [sp, #28]
    7a02:	7821      	ldrb	r1, [r4, #0]
    7a04:	2203      	movs	r2, #3
    7a06:	4836      	ldr	r0, [pc, #216]	; (7ae0 <_vfiprintf_r+0x228>)
    7a08:	f000 fb82 	bl	8110 <memchr>
    7a0c:	2800      	cmp	r0, #0
    7a0e:	d007      	beq.n	7a20 <_vfiprintf_r+0x168>
    7a10:	4b33      	ldr	r3, [pc, #204]	; (7ae0 <_vfiprintf_r+0x228>)
    7a12:	682a      	ldr	r2, [r5, #0]
    7a14:	1ac0      	subs	r0, r0, r3
    7a16:	2340      	movs	r3, #64	; 0x40
    7a18:	4083      	lsls	r3, r0
    7a1a:	4313      	orrs	r3, r2
    7a1c:	602b      	str	r3, [r5, #0]
    7a1e:	3401      	adds	r4, #1
    7a20:	7821      	ldrb	r1, [r4, #0]
    7a22:	1c63      	adds	r3, r4, #1
    7a24:	2206      	movs	r2, #6
    7a26:	482f      	ldr	r0, [pc, #188]	; (7ae4 <_vfiprintf_r+0x22c>)
    7a28:	9302      	str	r3, [sp, #8]
    7a2a:	7629      	strb	r1, [r5, #24]
    7a2c:	f000 fb70 	bl	8110 <memchr>
    7a30:	2800      	cmp	r0, #0
    7a32:	d044      	beq.n	7abe <_vfiprintf_r+0x206>
    7a34:	4b2c      	ldr	r3, [pc, #176]	; (7ae8 <_vfiprintf_r+0x230>)
    7a36:	2b00      	cmp	r3, #0
    7a38:	d12f      	bne.n	7a9a <_vfiprintf_r+0x1e2>
    7a3a:	6829      	ldr	r1, [r5, #0]
    7a3c:	9b05      	ldr	r3, [sp, #20]
    7a3e:	2207      	movs	r2, #7
    7a40:	05c9      	lsls	r1, r1, #23
    7a42:	d528      	bpl.n	7a96 <_vfiprintf_r+0x1de>
    7a44:	189b      	adds	r3, r3, r2
    7a46:	4393      	bics	r3, r2
    7a48:	3308      	adds	r3, #8
    7a4a:	9305      	str	r3, [sp, #20]
    7a4c:	696b      	ldr	r3, [r5, #20]
    7a4e:	9a03      	ldr	r2, [sp, #12]
    7a50:	189b      	adds	r3, r3, r2
    7a52:	616b      	str	r3, [r5, #20]
    7a54:	e74f      	b.n	78f6 <_vfiprintf_r+0x3e>
    7a56:	425b      	negs	r3, r3
    7a58:	60eb      	str	r3, [r5, #12]
    7a5a:	2302      	movs	r3, #2
    7a5c:	430b      	orrs	r3, r1
    7a5e:	602b      	str	r3, [r5, #0]
    7a60:	e7bf      	b.n	79e2 <_vfiprintf_r+0x12a>
    7a62:	434b      	muls	r3, r1
    7a64:	3401      	adds	r4, #1
    7a66:	189b      	adds	r3, r3, r2
    7a68:	2001      	movs	r0, #1
    7a6a:	e789      	b.n	7980 <_vfiprintf_r+0xc8>
    7a6c:	2301      	movs	r3, #1
    7a6e:	425b      	negs	r3, r3
    7a70:	e7c6      	b.n	7a00 <_vfiprintf_r+0x148>
    7a72:	2300      	movs	r3, #0
    7a74:	0014      	movs	r4, r2
    7a76:	200a      	movs	r0, #10
    7a78:	001a      	movs	r2, r3
    7a7a:	606b      	str	r3, [r5, #4]
    7a7c:	7821      	ldrb	r1, [r4, #0]
    7a7e:	3930      	subs	r1, #48	; 0x30
    7a80:	2909      	cmp	r1, #9
    7a82:	d903      	bls.n	7a8c <_vfiprintf_r+0x1d4>
    7a84:	2b00      	cmp	r3, #0
    7a86:	d0bc      	beq.n	7a02 <_vfiprintf_r+0x14a>
    7a88:	9207      	str	r2, [sp, #28]
    7a8a:	e7ba      	b.n	7a02 <_vfiprintf_r+0x14a>
    7a8c:	4342      	muls	r2, r0
    7a8e:	3401      	adds	r4, #1
    7a90:	1852      	adds	r2, r2, r1
    7a92:	2301      	movs	r3, #1
    7a94:	e7f2      	b.n	7a7c <_vfiprintf_r+0x1c4>
    7a96:	3307      	adds	r3, #7
    7a98:	e7d5      	b.n	7a46 <_vfiprintf_r+0x18e>
    7a9a:	ab05      	add	r3, sp, #20
    7a9c:	9300      	str	r3, [sp, #0]
    7a9e:	003a      	movs	r2, r7
    7aa0:	4b12      	ldr	r3, [pc, #72]	; (7aec <_vfiprintf_r+0x234>)
    7aa2:	0029      	movs	r1, r5
    7aa4:	0030      	movs	r0, r6
    7aa6:	e000      	b.n	7aaa <_vfiprintf_r+0x1f2>
    7aa8:	bf00      	nop
    7aaa:	9003      	str	r0, [sp, #12]
    7aac:	9b03      	ldr	r3, [sp, #12]
    7aae:	3301      	adds	r3, #1
    7ab0:	d1cc      	bne.n	7a4c <_vfiprintf_r+0x194>
    7ab2:	89bb      	ldrh	r3, [r7, #12]
    7ab4:	065b      	lsls	r3, r3, #25
    7ab6:	d500      	bpl.n	7aba <_vfiprintf_r+0x202>
    7ab8:	e77b      	b.n	79b2 <_vfiprintf_r+0xfa>
    7aba:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7abc:	e77b      	b.n	79b6 <_vfiprintf_r+0xfe>
    7abe:	ab05      	add	r3, sp, #20
    7ac0:	9300      	str	r3, [sp, #0]
    7ac2:	003a      	movs	r2, r7
    7ac4:	4b09      	ldr	r3, [pc, #36]	; (7aec <_vfiprintf_r+0x234>)
    7ac6:	0029      	movs	r1, r5
    7ac8:	0030      	movs	r0, r6
    7aca:	f000 f87f 	bl	7bcc <_printf_i>
    7ace:	e7ec      	b.n	7aaa <_vfiprintf_r+0x1f2>
    7ad0:	000084c8 	.word	0x000084c8
    7ad4:	00008508 	.word	0x00008508
    7ad8:	000084e8 	.word	0x000084e8
    7adc:	000084a8 	.word	0x000084a8
    7ae0:	0000850e 	.word	0x0000850e
    7ae4:	00008512 	.word	0x00008512
    7ae8:	00000000 	.word	0x00000000
    7aec:	00007893 	.word	0x00007893

00007af0 <_printf_common>:
    7af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7af2:	0015      	movs	r5, r2
    7af4:	9301      	str	r3, [sp, #4]
    7af6:	688a      	ldr	r2, [r1, #8]
    7af8:	690b      	ldr	r3, [r1, #16]
    7afa:	9000      	str	r0, [sp, #0]
    7afc:	000c      	movs	r4, r1
    7afe:	4293      	cmp	r3, r2
    7b00:	da00      	bge.n	7b04 <_printf_common+0x14>
    7b02:	0013      	movs	r3, r2
    7b04:	0022      	movs	r2, r4
    7b06:	602b      	str	r3, [r5, #0]
    7b08:	3243      	adds	r2, #67	; 0x43
    7b0a:	7812      	ldrb	r2, [r2, #0]
    7b0c:	2a00      	cmp	r2, #0
    7b0e:	d001      	beq.n	7b14 <_printf_common+0x24>
    7b10:	3301      	adds	r3, #1
    7b12:	602b      	str	r3, [r5, #0]
    7b14:	6823      	ldr	r3, [r4, #0]
    7b16:	069b      	lsls	r3, r3, #26
    7b18:	d502      	bpl.n	7b20 <_printf_common+0x30>
    7b1a:	682b      	ldr	r3, [r5, #0]
    7b1c:	3302      	adds	r3, #2
    7b1e:	602b      	str	r3, [r5, #0]
    7b20:	2706      	movs	r7, #6
    7b22:	6823      	ldr	r3, [r4, #0]
    7b24:	401f      	ands	r7, r3
    7b26:	d027      	beq.n	7b78 <_printf_common+0x88>
    7b28:	0023      	movs	r3, r4
    7b2a:	3343      	adds	r3, #67	; 0x43
    7b2c:	781b      	ldrb	r3, [r3, #0]
    7b2e:	1e5a      	subs	r2, r3, #1
    7b30:	4193      	sbcs	r3, r2
    7b32:	6822      	ldr	r2, [r4, #0]
    7b34:	0692      	lsls	r2, r2, #26
    7b36:	d430      	bmi.n	7b9a <_printf_common+0xaa>
    7b38:	0022      	movs	r2, r4
    7b3a:	9901      	ldr	r1, [sp, #4]
    7b3c:	3243      	adds	r2, #67	; 0x43
    7b3e:	9800      	ldr	r0, [sp, #0]
    7b40:	9e08      	ldr	r6, [sp, #32]
    7b42:	47b0      	blx	r6
    7b44:	1c43      	adds	r3, r0, #1
    7b46:	d025      	beq.n	7b94 <_printf_common+0xa4>
    7b48:	2306      	movs	r3, #6
    7b4a:	6820      	ldr	r0, [r4, #0]
    7b4c:	682a      	ldr	r2, [r5, #0]
    7b4e:	68e1      	ldr	r1, [r4, #12]
    7b50:	4003      	ands	r3, r0
    7b52:	2500      	movs	r5, #0
    7b54:	2b04      	cmp	r3, #4
    7b56:	d103      	bne.n	7b60 <_printf_common+0x70>
    7b58:	1a8d      	subs	r5, r1, r2
    7b5a:	43eb      	mvns	r3, r5
    7b5c:	17db      	asrs	r3, r3, #31
    7b5e:	401d      	ands	r5, r3
    7b60:	68a3      	ldr	r3, [r4, #8]
    7b62:	6922      	ldr	r2, [r4, #16]
    7b64:	4293      	cmp	r3, r2
    7b66:	dd01      	ble.n	7b6c <_printf_common+0x7c>
    7b68:	1a9b      	subs	r3, r3, r2
    7b6a:	18ed      	adds	r5, r5, r3
    7b6c:	2700      	movs	r7, #0
    7b6e:	42bd      	cmp	r5, r7
    7b70:	d120      	bne.n	7bb4 <_printf_common+0xc4>
    7b72:	2000      	movs	r0, #0
    7b74:	e010      	b.n	7b98 <_printf_common+0xa8>
    7b76:	3701      	adds	r7, #1
    7b78:	68e3      	ldr	r3, [r4, #12]
    7b7a:	682a      	ldr	r2, [r5, #0]
    7b7c:	1a9b      	subs	r3, r3, r2
    7b7e:	429f      	cmp	r7, r3
    7b80:	dad2      	bge.n	7b28 <_printf_common+0x38>
    7b82:	0022      	movs	r2, r4
    7b84:	2301      	movs	r3, #1
    7b86:	3219      	adds	r2, #25
    7b88:	9901      	ldr	r1, [sp, #4]
    7b8a:	9800      	ldr	r0, [sp, #0]
    7b8c:	9e08      	ldr	r6, [sp, #32]
    7b8e:	47b0      	blx	r6
    7b90:	1c43      	adds	r3, r0, #1
    7b92:	d1f0      	bne.n	7b76 <_printf_common+0x86>
    7b94:	2001      	movs	r0, #1
    7b96:	4240      	negs	r0, r0
    7b98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7b9a:	2030      	movs	r0, #48	; 0x30
    7b9c:	18e1      	adds	r1, r4, r3
    7b9e:	3143      	adds	r1, #67	; 0x43
    7ba0:	7008      	strb	r0, [r1, #0]
    7ba2:	0021      	movs	r1, r4
    7ba4:	1c5a      	adds	r2, r3, #1
    7ba6:	3145      	adds	r1, #69	; 0x45
    7ba8:	7809      	ldrb	r1, [r1, #0]
    7baa:	18a2      	adds	r2, r4, r2
    7bac:	3243      	adds	r2, #67	; 0x43
    7bae:	3302      	adds	r3, #2
    7bb0:	7011      	strb	r1, [r2, #0]
    7bb2:	e7c1      	b.n	7b38 <_printf_common+0x48>
    7bb4:	0022      	movs	r2, r4
    7bb6:	2301      	movs	r3, #1
    7bb8:	321a      	adds	r2, #26
    7bba:	9901      	ldr	r1, [sp, #4]
    7bbc:	9800      	ldr	r0, [sp, #0]
    7bbe:	9e08      	ldr	r6, [sp, #32]
    7bc0:	47b0      	blx	r6
    7bc2:	1c43      	adds	r3, r0, #1
    7bc4:	d0e6      	beq.n	7b94 <_printf_common+0xa4>
    7bc6:	3701      	adds	r7, #1
    7bc8:	e7d1      	b.n	7b6e <_printf_common+0x7e>
	...

00007bcc <_printf_i>:
    7bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bce:	b08b      	sub	sp, #44	; 0x2c
    7bd0:	9206      	str	r2, [sp, #24]
    7bd2:	000a      	movs	r2, r1
    7bd4:	3243      	adds	r2, #67	; 0x43
    7bd6:	9307      	str	r3, [sp, #28]
    7bd8:	9005      	str	r0, [sp, #20]
    7bda:	9204      	str	r2, [sp, #16]
    7bdc:	7e0a      	ldrb	r2, [r1, #24]
    7bde:	000c      	movs	r4, r1
    7be0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7be2:	2a6e      	cmp	r2, #110	; 0x6e
    7be4:	d100      	bne.n	7be8 <_printf_i+0x1c>
    7be6:	e08f      	b.n	7d08 <_printf_i+0x13c>
    7be8:	d817      	bhi.n	7c1a <_printf_i+0x4e>
    7bea:	2a63      	cmp	r2, #99	; 0x63
    7bec:	d02c      	beq.n	7c48 <_printf_i+0x7c>
    7bee:	d808      	bhi.n	7c02 <_printf_i+0x36>
    7bf0:	2a00      	cmp	r2, #0
    7bf2:	d100      	bne.n	7bf6 <_printf_i+0x2a>
    7bf4:	e099      	b.n	7d2a <_printf_i+0x15e>
    7bf6:	2a58      	cmp	r2, #88	; 0x58
    7bf8:	d054      	beq.n	7ca4 <_printf_i+0xd8>
    7bfa:	0026      	movs	r6, r4
    7bfc:	3642      	adds	r6, #66	; 0x42
    7bfe:	7032      	strb	r2, [r6, #0]
    7c00:	e029      	b.n	7c56 <_printf_i+0x8a>
    7c02:	2a64      	cmp	r2, #100	; 0x64
    7c04:	d001      	beq.n	7c0a <_printf_i+0x3e>
    7c06:	2a69      	cmp	r2, #105	; 0x69
    7c08:	d1f7      	bne.n	7bfa <_printf_i+0x2e>
    7c0a:	6821      	ldr	r1, [r4, #0]
    7c0c:	681a      	ldr	r2, [r3, #0]
    7c0e:	0608      	lsls	r0, r1, #24
    7c10:	d523      	bpl.n	7c5a <_printf_i+0x8e>
    7c12:	1d11      	adds	r1, r2, #4
    7c14:	6019      	str	r1, [r3, #0]
    7c16:	6815      	ldr	r5, [r2, #0]
    7c18:	e025      	b.n	7c66 <_printf_i+0x9a>
    7c1a:	2a73      	cmp	r2, #115	; 0x73
    7c1c:	d100      	bne.n	7c20 <_printf_i+0x54>
    7c1e:	e088      	b.n	7d32 <_printf_i+0x166>
    7c20:	d808      	bhi.n	7c34 <_printf_i+0x68>
    7c22:	2a6f      	cmp	r2, #111	; 0x6f
    7c24:	d029      	beq.n	7c7a <_printf_i+0xae>
    7c26:	2a70      	cmp	r2, #112	; 0x70
    7c28:	d1e7      	bne.n	7bfa <_printf_i+0x2e>
    7c2a:	2220      	movs	r2, #32
    7c2c:	6809      	ldr	r1, [r1, #0]
    7c2e:	430a      	orrs	r2, r1
    7c30:	6022      	str	r2, [r4, #0]
    7c32:	e003      	b.n	7c3c <_printf_i+0x70>
    7c34:	2a75      	cmp	r2, #117	; 0x75
    7c36:	d020      	beq.n	7c7a <_printf_i+0xae>
    7c38:	2a78      	cmp	r2, #120	; 0x78
    7c3a:	d1de      	bne.n	7bfa <_printf_i+0x2e>
    7c3c:	0022      	movs	r2, r4
    7c3e:	2178      	movs	r1, #120	; 0x78
    7c40:	3245      	adds	r2, #69	; 0x45
    7c42:	7011      	strb	r1, [r2, #0]
    7c44:	4a6c      	ldr	r2, [pc, #432]	; (7df8 <_printf_i+0x22c>)
    7c46:	e030      	b.n	7caa <_printf_i+0xde>
    7c48:	000e      	movs	r6, r1
    7c4a:	681a      	ldr	r2, [r3, #0]
    7c4c:	3642      	adds	r6, #66	; 0x42
    7c4e:	1d11      	adds	r1, r2, #4
    7c50:	6019      	str	r1, [r3, #0]
    7c52:	6813      	ldr	r3, [r2, #0]
    7c54:	7033      	strb	r3, [r6, #0]
    7c56:	2301      	movs	r3, #1
    7c58:	e079      	b.n	7d4e <_printf_i+0x182>
    7c5a:	0649      	lsls	r1, r1, #25
    7c5c:	d5d9      	bpl.n	7c12 <_printf_i+0x46>
    7c5e:	1d11      	adds	r1, r2, #4
    7c60:	6019      	str	r1, [r3, #0]
    7c62:	2300      	movs	r3, #0
    7c64:	5ed5      	ldrsh	r5, [r2, r3]
    7c66:	2d00      	cmp	r5, #0
    7c68:	da03      	bge.n	7c72 <_printf_i+0xa6>
    7c6a:	232d      	movs	r3, #45	; 0x2d
    7c6c:	9a04      	ldr	r2, [sp, #16]
    7c6e:	426d      	negs	r5, r5
    7c70:	7013      	strb	r3, [r2, #0]
    7c72:	4b62      	ldr	r3, [pc, #392]	; (7dfc <_printf_i+0x230>)
    7c74:	270a      	movs	r7, #10
    7c76:	9303      	str	r3, [sp, #12]
    7c78:	e02f      	b.n	7cda <_printf_i+0x10e>
    7c7a:	6820      	ldr	r0, [r4, #0]
    7c7c:	6819      	ldr	r1, [r3, #0]
    7c7e:	0605      	lsls	r5, r0, #24
    7c80:	d503      	bpl.n	7c8a <_printf_i+0xbe>
    7c82:	1d08      	adds	r0, r1, #4
    7c84:	6018      	str	r0, [r3, #0]
    7c86:	680d      	ldr	r5, [r1, #0]
    7c88:	e005      	b.n	7c96 <_printf_i+0xca>
    7c8a:	0640      	lsls	r0, r0, #25
    7c8c:	d5f9      	bpl.n	7c82 <_printf_i+0xb6>
    7c8e:	680d      	ldr	r5, [r1, #0]
    7c90:	1d08      	adds	r0, r1, #4
    7c92:	6018      	str	r0, [r3, #0]
    7c94:	b2ad      	uxth	r5, r5
    7c96:	4b59      	ldr	r3, [pc, #356]	; (7dfc <_printf_i+0x230>)
    7c98:	2708      	movs	r7, #8
    7c9a:	9303      	str	r3, [sp, #12]
    7c9c:	2a6f      	cmp	r2, #111	; 0x6f
    7c9e:	d018      	beq.n	7cd2 <_printf_i+0x106>
    7ca0:	270a      	movs	r7, #10
    7ca2:	e016      	b.n	7cd2 <_printf_i+0x106>
    7ca4:	3145      	adds	r1, #69	; 0x45
    7ca6:	700a      	strb	r2, [r1, #0]
    7ca8:	4a54      	ldr	r2, [pc, #336]	; (7dfc <_printf_i+0x230>)
    7caa:	9203      	str	r2, [sp, #12]
    7cac:	681a      	ldr	r2, [r3, #0]
    7cae:	6821      	ldr	r1, [r4, #0]
    7cb0:	1d10      	adds	r0, r2, #4
    7cb2:	6018      	str	r0, [r3, #0]
    7cb4:	6815      	ldr	r5, [r2, #0]
    7cb6:	0608      	lsls	r0, r1, #24
    7cb8:	d522      	bpl.n	7d00 <_printf_i+0x134>
    7cba:	07cb      	lsls	r3, r1, #31
    7cbc:	d502      	bpl.n	7cc4 <_printf_i+0xf8>
    7cbe:	2320      	movs	r3, #32
    7cc0:	4319      	orrs	r1, r3
    7cc2:	6021      	str	r1, [r4, #0]
    7cc4:	2710      	movs	r7, #16
    7cc6:	2d00      	cmp	r5, #0
    7cc8:	d103      	bne.n	7cd2 <_printf_i+0x106>
    7cca:	2320      	movs	r3, #32
    7ccc:	6822      	ldr	r2, [r4, #0]
    7cce:	439a      	bics	r2, r3
    7cd0:	6022      	str	r2, [r4, #0]
    7cd2:	0023      	movs	r3, r4
    7cd4:	2200      	movs	r2, #0
    7cd6:	3343      	adds	r3, #67	; 0x43
    7cd8:	701a      	strb	r2, [r3, #0]
    7cda:	6863      	ldr	r3, [r4, #4]
    7cdc:	60a3      	str	r3, [r4, #8]
    7cde:	2b00      	cmp	r3, #0
    7ce0:	db5c      	blt.n	7d9c <_printf_i+0x1d0>
    7ce2:	2204      	movs	r2, #4
    7ce4:	6821      	ldr	r1, [r4, #0]
    7ce6:	4391      	bics	r1, r2
    7ce8:	6021      	str	r1, [r4, #0]
    7cea:	2d00      	cmp	r5, #0
    7cec:	d158      	bne.n	7da0 <_printf_i+0x1d4>
    7cee:	9e04      	ldr	r6, [sp, #16]
    7cf0:	2b00      	cmp	r3, #0
    7cf2:	d064      	beq.n	7dbe <_printf_i+0x1f2>
    7cf4:	0026      	movs	r6, r4
    7cf6:	9b03      	ldr	r3, [sp, #12]
    7cf8:	3642      	adds	r6, #66	; 0x42
    7cfa:	781b      	ldrb	r3, [r3, #0]
    7cfc:	7033      	strb	r3, [r6, #0]
    7cfe:	e05e      	b.n	7dbe <_printf_i+0x1f2>
    7d00:	0648      	lsls	r0, r1, #25
    7d02:	d5da      	bpl.n	7cba <_printf_i+0xee>
    7d04:	b2ad      	uxth	r5, r5
    7d06:	e7d8      	b.n	7cba <_printf_i+0xee>
    7d08:	6809      	ldr	r1, [r1, #0]
    7d0a:	681a      	ldr	r2, [r3, #0]
    7d0c:	0608      	lsls	r0, r1, #24
    7d0e:	d505      	bpl.n	7d1c <_printf_i+0x150>
    7d10:	1d11      	adds	r1, r2, #4
    7d12:	6019      	str	r1, [r3, #0]
    7d14:	6813      	ldr	r3, [r2, #0]
    7d16:	6962      	ldr	r2, [r4, #20]
    7d18:	601a      	str	r2, [r3, #0]
    7d1a:	e006      	b.n	7d2a <_printf_i+0x15e>
    7d1c:	0649      	lsls	r1, r1, #25
    7d1e:	d5f7      	bpl.n	7d10 <_printf_i+0x144>
    7d20:	1d11      	adds	r1, r2, #4
    7d22:	6019      	str	r1, [r3, #0]
    7d24:	6813      	ldr	r3, [r2, #0]
    7d26:	8aa2      	ldrh	r2, [r4, #20]
    7d28:	801a      	strh	r2, [r3, #0]
    7d2a:	2300      	movs	r3, #0
    7d2c:	9e04      	ldr	r6, [sp, #16]
    7d2e:	6123      	str	r3, [r4, #16]
    7d30:	e054      	b.n	7ddc <_printf_i+0x210>
    7d32:	681a      	ldr	r2, [r3, #0]
    7d34:	1d11      	adds	r1, r2, #4
    7d36:	6019      	str	r1, [r3, #0]
    7d38:	6816      	ldr	r6, [r2, #0]
    7d3a:	2100      	movs	r1, #0
    7d3c:	6862      	ldr	r2, [r4, #4]
    7d3e:	0030      	movs	r0, r6
    7d40:	f000 f9e6 	bl	8110 <memchr>
    7d44:	2800      	cmp	r0, #0
    7d46:	d001      	beq.n	7d4c <_printf_i+0x180>
    7d48:	1b80      	subs	r0, r0, r6
    7d4a:	6060      	str	r0, [r4, #4]
    7d4c:	6863      	ldr	r3, [r4, #4]
    7d4e:	6123      	str	r3, [r4, #16]
    7d50:	2300      	movs	r3, #0
    7d52:	9a04      	ldr	r2, [sp, #16]
    7d54:	7013      	strb	r3, [r2, #0]
    7d56:	e041      	b.n	7ddc <_printf_i+0x210>
    7d58:	6923      	ldr	r3, [r4, #16]
    7d5a:	0032      	movs	r2, r6
    7d5c:	9906      	ldr	r1, [sp, #24]
    7d5e:	9805      	ldr	r0, [sp, #20]
    7d60:	9d07      	ldr	r5, [sp, #28]
    7d62:	47a8      	blx	r5
    7d64:	1c43      	adds	r3, r0, #1
    7d66:	d043      	beq.n	7df0 <_printf_i+0x224>
    7d68:	6823      	ldr	r3, [r4, #0]
    7d6a:	2500      	movs	r5, #0
    7d6c:	079b      	lsls	r3, r3, #30
    7d6e:	d40f      	bmi.n	7d90 <_printf_i+0x1c4>
    7d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7d72:	68e0      	ldr	r0, [r4, #12]
    7d74:	4298      	cmp	r0, r3
    7d76:	da3d      	bge.n	7df4 <_printf_i+0x228>
    7d78:	0018      	movs	r0, r3
    7d7a:	e03b      	b.n	7df4 <_printf_i+0x228>
    7d7c:	0022      	movs	r2, r4
    7d7e:	2301      	movs	r3, #1
    7d80:	3219      	adds	r2, #25
    7d82:	9906      	ldr	r1, [sp, #24]
    7d84:	9805      	ldr	r0, [sp, #20]
    7d86:	9e07      	ldr	r6, [sp, #28]
    7d88:	47b0      	blx	r6
    7d8a:	1c43      	adds	r3, r0, #1
    7d8c:	d030      	beq.n	7df0 <_printf_i+0x224>
    7d8e:	3501      	adds	r5, #1
    7d90:	68e3      	ldr	r3, [r4, #12]
    7d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7d94:	1a9b      	subs	r3, r3, r2
    7d96:	429d      	cmp	r5, r3
    7d98:	dbf0      	blt.n	7d7c <_printf_i+0x1b0>
    7d9a:	e7e9      	b.n	7d70 <_printf_i+0x1a4>
    7d9c:	2d00      	cmp	r5, #0
    7d9e:	d0a9      	beq.n	7cf4 <_printf_i+0x128>
    7da0:	9e04      	ldr	r6, [sp, #16]
    7da2:	0028      	movs	r0, r5
    7da4:	0039      	movs	r1, r7
    7da6:	f7fe ff69 	bl	6c7c <__aeabi_uidivmod>
    7daa:	9b03      	ldr	r3, [sp, #12]
    7dac:	3e01      	subs	r6, #1
    7dae:	5c5b      	ldrb	r3, [r3, r1]
    7db0:	0028      	movs	r0, r5
    7db2:	7033      	strb	r3, [r6, #0]
    7db4:	0039      	movs	r1, r7
    7db6:	f7fe fedb 	bl	6b70 <__udivsi3>
    7dba:	1e05      	subs	r5, r0, #0
    7dbc:	d1f1      	bne.n	7da2 <_printf_i+0x1d6>
    7dbe:	2f08      	cmp	r7, #8
    7dc0:	d109      	bne.n	7dd6 <_printf_i+0x20a>
    7dc2:	6823      	ldr	r3, [r4, #0]
    7dc4:	07db      	lsls	r3, r3, #31
    7dc6:	d506      	bpl.n	7dd6 <_printf_i+0x20a>
    7dc8:	6863      	ldr	r3, [r4, #4]
    7dca:	6922      	ldr	r2, [r4, #16]
    7dcc:	4293      	cmp	r3, r2
    7dce:	dc02      	bgt.n	7dd6 <_printf_i+0x20a>
    7dd0:	2330      	movs	r3, #48	; 0x30
    7dd2:	3e01      	subs	r6, #1
    7dd4:	7033      	strb	r3, [r6, #0]
    7dd6:	9b04      	ldr	r3, [sp, #16]
    7dd8:	1b9b      	subs	r3, r3, r6
    7dda:	6123      	str	r3, [r4, #16]
    7ddc:	9b07      	ldr	r3, [sp, #28]
    7dde:	aa09      	add	r2, sp, #36	; 0x24
    7de0:	9300      	str	r3, [sp, #0]
    7de2:	0021      	movs	r1, r4
    7de4:	9b06      	ldr	r3, [sp, #24]
    7de6:	9805      	ldr	r0, [sp, #20]
    7de8:	f7ff fe82 	bl	7af0 <_printf_common>
    7dec:	1c43      	adds	r3, r0, #1
    7dee:	d1b3      	bne.n	7d58 <_printf_i+0x18c>
    7df0:	2001      	movs	r0, #1
    7df2:	4240      	negs	r0, r0
    7df4:	b00b      	add	sp, #44	; 0x2c
    7df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7df8:	0000852a 	.word	0x0000852a
    7dfc:	00008519 	.word	0x00008519

00007e00 <_sbrk_r>:
    7e00:	2300      	movs	r3, #0
    7e02:	b570      	push	{r4, r5, r6, lr}
    7e04:	4c06      	ldr	r4, [pc, #24]	; (7e20 <_sbrk_r+0x20>)
    7e06:	0005      	movs	r5, r0
    7e08:	0008      	movs	r0, r1
    7e0a:	6023      	str	r3, [r4, #0]
    7e0c:	f7fe fe92 	bl	6b34 <_sbrk>
    7e10:	1c43      	adds	r3, r0, #1
    7e12:	d103      	bne.n	7e1c <_sbrk_r+0x1c>
    7e14:	6823      	ldr	r3, [r4, #0]
    7e16:	2b00      	cmp	r3, #0
    7e18:	d000      	beq.n	7e1c <_sbrk_r+0x1c>
    7e1a:	602b      	str	r3, [r5, #0]
    7e1c:	bd70      	pop	{r4, r5, r6, pc}
    7e1e:	46c0      	nop			; (mov r8, r8)
    7e20:	20000bfc 	.word	0x20000bfc

00007e24 <__sread>:
    7e24:	b570      	push	{r4, r5, r6, lr}
    7e26:	000c      	movs	r4, r1
    7e28:	250e      	movs	r5, #14
    7e2a:	5f49      	ldrsh	r1, [r1, r5]
    7e2c:	f000 f97e 	bl	812c <_read_r>
    7e30:	2800      	cmp	r0, #0
    7e32:	db03      	blt.n	7e3c <__sread+0x18>
    7e34:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7e36:	181b      	adds	r3, r3, r0
    7e38:	6563      	str	r3, [r4, #84]	; 0x54
    7e3a:	bd70      	pop	{r4, r5, r6, pc}
    7e3c:	89a3      	ldrh	r3, [r4, #12]
    7e3e:	4a02      	ldr	r2, [pc, #8]	; (7e48 <__sread+0x24>)
    7e40:	4013      	ands	r3, r2
    7e42:	81a3      	strh	r3, [r4, #12]
    7e44:	e7f9      	b.n	7e3a <__sread+0x16>
    7e46:	46c0      	nop			; (mov r8, r8)
    7e48:	ffffefff 	.word	0xffffefff

00007e4c <__swrite>:
    7e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e4e:	001f      	movs	r7, r3
    7e50:	898b      	ldrh	r3, [r1, #12]
    7e52:	0005      	movs	r5, r0
    7e54:	000c      	movs	r4, r1
    7e56:	0016      	movs	r6, r2
    7e58:	05db      	lsls	r3, r3, #23
    7e5a:	d505      	bpl.n	7e68 <__swrite+0x1c>
    7e5c:	230e      	movs	r3, #14
    7e5e:	5ec9      	ldrsh	r1, [r1, r3]
    7e60:	2200      	movs	r2, #0
    7e62:	2302      	movs	r3, #2
    7e64:	f000 f940 	bl	80e8 <_lseek_r>
    7e68:	89a3      	ldrh	r3, [r4, #12]
    7e6a:	4a05      	ldr	r2, [pc, #20]	; (7e80 <__swrite+0x34>)
    7e6c:	0028      	movs	r0, r5
    7e6e:	4013      	ands	r3, r2
    7e70:	81a3      	strh	r3, [r4, #12]
    7e72:	0032      	movs	r2, r6
    7e74:	230e      	movs	r3, #14
    7e76:	5ee1      	ldrsh	r1, [r4, r3]
    7e78:	003b      	movs	r3, r7
    7e7a:	f000 f875 	bl	7f68 <_write_r>
    7e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7e80:	ffffefff 	.word	0xffffefff

00007e84 <__sseek>:
    7e84:	b570      	push	{r4, r5, r6, lr}
    7e86:	000c      	movs	r4, r1
    7e88:	250e      	movs	r5, #14
    7e8a:	5f49      	ldrsh	r1, [r1, r5]
    7e8c:	f000 f92c 	bl	80e8 <_lseek_r>
    7e90:	89a3      	ldrh	r3, [r4, #12]
    7e92:	1c42      	adds	r2, r0, #1
    7e94:	d103      	bne.n	7e9e <__sseek+0x1a>
    7e96:	4a05      	ldr	r2, [pc, #20]	; (7eac <__sseek+0x28>)
    7e98:	4013      	ands	r3, r2
    7e9a:	81a3      	strh	r3, [r4, #12]
    7e9c:	bd70      	pop	{r4, r5, r6, pc}
    7e9e:	2280      	movs	r2, #128	; 0x80
    7ea0:	0152      	lsls	r2, r2, #5
    7ea2:	4313      	orrs	r3, r2
    7ea4:	81a3      	strh	r3, [r4, #12]
    7ea6:	6560      	str	r0, [r4, #84]	; 0x54
    7ea8:	e7f8      	b.n	7e9c <__sseek+0x18>
    7eaa:	46c0      	nop			; (mov r8, r8)
    7eac:	ffffefff 	.word	0xffffefff

00007eb0 <__sclose>:
    7eb0:	b510      	push	{r4, lr}
    7eb2:	230e      	movs	r3, #14
    7eb4:	5ec9      	ldrsh	r1, [r1, r3]
    7eb6:	f000 f8e1 	bl	807c <_close_r>
    7eba:	bd10      	pop	{r4, pc}

00007ebc <__swbuf_r>:
    7ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ebe:	0005      	movs	r5, r0
    7ec0:	000e      	movs	r6, r1
    7ec2:	0014      	movs	r4, r2
    7ec4:	2800      	cmp	r0, #0
    7ec6:	d004      	beq.n	7ed2 <__swbuf_r+0x16>
    7ec8:	6983      	ldr	r3, [r0, #24]
    7eca:	2b00      	cmp	r3, #0
    7ecc:	d101      	bne.n	7ed2 <__swbuf_r+0x16>
    7ece:	f7ff fb17 	bl	7500 <__sinit>
    7ed2:	4b22      	ldr	r3, [pc, #136]	; (7f5c <__swbuf_r+0xa0>)
    7ed4:	429c      	cmp	r4, r3
    7ed6:	d12d      	bne.n	7f34 <__swbuf_r+0x78>
    7ed8:	686c      	ldr	r4, [r5, #4]
    7eda:	69a3      	ldr	r3, [r4, #24]
    7edc:	60a3      	str	r3, [r4, #8]
    7ede:	89a3      	ldrh	r3, [r4, #12]
    7ee0:	071b      	lsls	r3, r3, #28
    7ee2:	d531      	bpl.n	7f48 <__swbuf_r+0x8c>
    7ee4:	6923      	ldr	r3, [r4, #16]
    7ee6:	2b00      	cmp	r3, #0
    7ee8:	d02e      	beq.n	7f48 <__swbuf_r+0x8c>
    7eea:	6823      	ldr	r3, [r4, #0]
    7eec:	6922      	ldr	r2, [r4, #16]
    7eee:	b2f7      	uxtb	r7, r6
    7ef0:	1a98      	subs	r0, r3, r2
    7ef2:	6963      	ldr	r3, [r4, #20]
    7ef4:	b2f6      	uxtb	r6, r6
    7ef6:	4298      	cmp	r0, r3
    7ef8:	db05      	blt.n	7f06 <__swbuf_r+0x4a>
    7efa:	0021      	movs	r1, r4
    7efc:	0028      	movs	r0, r5
    7efe:	f7ff fa91 	bl	7424 <_fflush_r>
    7f02:	2800      	cmp	r0, #0
    7f04:	d126      	bne.n	7f54 <__swbuf_r+0x98>
    7f06:	68a3      	ldr	r3, [r4, #8]
    7f08:	3001      	adds	r0, #1
    7f0a:	3b01      	subs	r3, #1
    7f0c:	60a3      	str	r3, [r4, #8]
    7f0e:	6823      	ldr	r3, [r4, #0]
    7f10:	1c5a      	adds	r2, r3, #1
    7f12:	6022      	str	r2, [r4, #0]
    7f14:	701f      	strb	r7, [r3, #0]
    7f16:	6963      	ldr	r3, [r4, #20]
    7f18:	4298      	cmp	r0, r3
    7f1a:	d004      	beq.n	7f26 <__swbuf_r+0x6a>
    7f1c:	89a3      	ldrh	r3, [r4, #12]
    7f1e:	07db      	lsls	r3, r3, #31
    7f20:	d51a      	bpl.n	7f58 <__swbuf_r+0x9c>
    7f22:	2e0a      	cmp	r6, #10
    7f24:	d118      	bne.n	7f58 <__swbuf_r+0x9c>
    7f26:	0021      	movs	r1, r4
    7f28:	0028      	movs	r0, r5
    7f2a:	f7ff fa7b 	bl	7424 <_fflush_r>
    7f2e:	2800      	cmp	r0, #0
    7f30:	d012      	beq.n	7f58 <__swbuf_r+0x9c>
    7f32:	e00f      	b.n	7f54 <__swbuf_r+0x98>
    7f34:	4b0a      	ldr	r3, [pc, #40]	; (7f60 <__swbuf_r+0xa4>)
    7f36:	429c      	cmp	r4, r3
    7f38:	d101      	bne.n	7f3e <__swbuf_r+0x82>
    7f3a:	68ac      	ldr	r4, [r5, #8]
    7f3c:	e7cd      	b.n	7eda <__swbuf_r+0x1e>
    7f3e:	4b09      	ldr	r3, [pc, #36]	; (7f64 <__swbuf_r+0xa8>)
    7f40:	429c      	cmp	r4, r3
    7f42:	d1ca      	bne.n	7eda <__swbuf_r+0x1e>
    7f44:	68ec      	ldr	r4, [r5, #12]
    7f46:	e7c8      	b.n	7eda <__swbuf_r+0x1e>
    7f48:	0021      	movs	r1, r4
    7f4a:	0028      	movs	r0, r5
    7f4c:	f000 f820 	bl	7f90 <__swsetup_r>
    7f50:	2800      	cmp	r0, #0
    7f52:	d0ca      	beq.n	7eea <__swbuf_r+0x2e>
    7f54:	2601      	movs	r6, #1
    7f56:	4276      	negs	r6, r6
    7f58:	0030      	movs	r0, r6
    7f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f5c:	000084c8 	.word	0x000084c8
    7f60:	000084e8 	.word	0x000084e8
    7f64:	000084a8 	.word	0x000084a8

00007f68 <_write_r>:
    7f68:	b570      	push	{r4, r5, r6, lr}
    7f6a:	0005      	movs	r5, r0
    7f6c:	0008      	movs	r0, r1
    7f6e:	0011      	movs	r1, r2
    7f70:	2200      	movs	r2, #0
    7f72:	4c06      	ldr	r4, [pc, #24]	; (7f8c <_write_r+0x24>)
    7f74:	6022      	str	r2, [r4, #0]
    7f76:	001a      	movs	r2, r3
    7f78:	f7fb fdf8 	bl	3b6c <_write>
    7f7c:	1c43      	adds	r3, r0, #1
    7f7e:	d103      	bne.n	7f88 <_write_r+0x20>
    7f80:	6823      	ldr	r3, [r4, #0]
    7f82:	2b00      	cmp	r3, #0
    7f84:	d000      	beq.n	7f88 <_write_r+0x20>
    7f86:	602b      	str	r3, [r5, #0]
    7f88:	bd70      	pop	{r4, r5, r6, pc}
    7f8a:	46c0      	nop			; (mov r8, r8)
    7f8c:	20000bfc 	.word	0x20000bfc

00007f90 <__swsetup_r>:
    7f90:	4b36      	ldr	r3, [pc, #216]	; (806c <__swsetup_r+0xdc>)
    7f92:	b570      	push	{r4, r5, r6, lr}
    7f94:	681d      	ldr	r5, [r3, #0]
    7f96:	0006      	movs	r6, r0
    7f98:	000c      	movs	r4, r1
    7f9a:	2d00      	cmp	r5, #0
    7f9c:	d005      	beq.n	7faa <__swsetup_r+0x1a>
    7f9e:	69ab      	ldr	r3, [r5, #24]
    7fa0:	2b00      	cmp	r3, #0
    7fa2:	d102      	bne.n	7faa <__swsetup_r+0x1a>
    7fa4:	0028      	movs	r0, r5
    7fa6:	f7ff faab 	bl	7500 <__sinit>
    7faa:	4b31      	ldr	r3, [pc, #196]	; (8070 <__swsetup_r+0xe0>)
    7fac:	429c      	cmp	r4, r3
    7fae:	d10f      	bne.n	7fd0 <__swsetup_r+0x40>
    7fb0:	686c      	ldr	r4, [r5, #4]
    7fb2:	230c      	movs	r3, #12
    7fb4:	5ee2      	ldrsh	r2, [r4, r3]
    7fb6:	b293      	uxth	r3, r2
    7fb8:	0719      	lsls	r1, r3, #28
    7fba:	d42d      	bmi.n	8018 <__swsetup_r+0x88>
    7fbc:	06d9      	lsls	r1, r3, #27
    7fbe:	d411      	bmi.n	7fe4 <__swsetup_r+0x54>
    7fc0:	2309      	movs	r3, #9
    7fc2:	2001      	movs	r0, #1
    7fc4:	6033      	str	r3, [r6, #0]
    7fc6:	3337      	adds	r3, #55	; 0x37
    7fc8:	4313      	orrs	r3, r2
    7fca:	81a3      	strh	r3, [r4, #12]
    7fcc:	4240      	negs	r0, r0
    7fce:	bd70      	pop	{r4, r5, r6, pc}
    7fd0:	4b28      	ldr	r3, [pc, #160]	; (8074 <__swsetup_r+0xe4>)
    7fd2:	429c      	cmp	r4, r3
    7fd4:	d101      	bne.n	7fda <__swsetup_r+0x4a>
    7fd6:	68ac      	ldr	r4, [r5, #8]
    7fd8:	e7eb      	b.n	7fb2 <__swsetup_r+0x22>
    7fda:	4b27      	ldr	r3, [pc, #156]	; (8078 <__swsetup_r+0xe8>)
    7fdc:	429c      	cmp	r4, r3
    7fde:	d1e8      	bne.n	7fb2 <__swsetup_r+0x22>
    7fe0:	68ec      	ldr	r4, [r5, #12]
    7fe2:	e7e6      	b.n	7fb2 <__swsetup_r+0x22>
    7fe4:	075b      	lsls	r3, r3, #29
    7fe6:	d513      	bpl.n	8010 <__swsetup_r+0x80>
    7fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7fea:	2900      	cmp	r1, #0
    7fec:	d008      	beq.n	8000 <__swsetup_r+0x70>
    7fee:	0023      	movs	r3, r4
    7ff0:	3344      	adds	r3, #68	; 0x44
    7ff2:	4299      	cmp	r1, r3
    7ff4:	d002      	beq.n	7ffc <__swsetup_r+0x6c>
    7ff6:	0030      	movs	r0, r6
    7ff8:	f7ff fb8e 	bl	7718 <_free_r>
    7ffc:	2300      	movs	r3, #0
    7ffe:	6363      	str	r3, [r4, #52]	; 0x34
    8000:	2224      	movs	r2, #36	; 0x24
    8002:	89a3      	ldrh	r3, [r4, #12]
    8004:	4393      	bics	r3, r2
    8006:	81a3      	strh	r3, [r4, #12]
    8008:	2300      	movs	r3, #0
    800a:	6063      	str	r3, [r4, #4]
    800c:	6923      	ldr	r3, [r4, #16]
    800e:	6023      	str	r3, [r4, #0]
    8010:	2308      	movs	r3, #8
    8012:	89a2      	ldrh	r2, [r4, #12]
    8014:	4313      	orrs	r3, r2
    8016:	81a3      	strh	r3, [r4, #12]
    8018:	6923      	ldr	r3, [r4, #16]
    801a:	2b00      	cmp	r3, #0
    801c:	d10b      	bne.n	8036 <__swsetup_r+0xa6>
    801e:	21a0      	movs	r1, #160	; 0xa0
    8020:	2280      	movs	r2, #128	; 0x80
    8022:	89a3      	ldrh	r3, [r4, #12]
    8024:	0089      	lsls	r1, r1, #2
    8026:	0092      	lsls	r2, r2, #2
    8028:	400b      	ands	r3, r1
    802a:	4293      	cmp	r3, r2
    802c:	d003      	beq.n	8036 <__swsetup_r+0xa6>
    802e:	0021      	movs	r1, r4
    8030:	0030      	movs	r0, r6
    8032:	f7ff fb23 	bl	767c <__smakebuf_r>
    8036:	2301      	movs	r3, #1
    8038:	89a2      	ldrh	r2, [r4, #12]
    803a:	4013      	ands	r3, r2
    803c:	d011      	beq.n	8062 <__swsetup_r+0xd2>
    803e:	2300      	movs	r3, #0
    8040:	60a3      	str	r3, [r4, #8]
    8042:	6963      	ldr	r3, [r4, #20]
    8044:	425b      	negs	r3, r3
    8046:	61a3      	str	r3, [r4, #24]
    8048:	2000      	movs	r0, #0
    804a:	6923      	ldr	r3, [r4, #16]
    804c:	4283      	cmp	r3, r0
    804e:	d1be      	bne.n	7fce <__swsetup_r+0x3e>
    8050:	230c      	movs	r3, #12
    8052:	5ee2      	ldrsh	r2, [r4, r3]
    8054:	0613      	lsls	r3, r2, #24
    8056:	d5ba      	bpl.n	7fce <__swsetup_r+0x3e>
    8058:	2340      	movs	r3, #64	; 0x40
    805a:	4313      	orrs	r3, r2
    805c:	81a3      	strh	r3, [r4, #12]
    805e:	3801      	subs	r0, #1
    8060:	e7b5      	b.n	7fce <__swsetup_r+0x3e>
    8062:	0792      	lsls	r2, r2, #30
    8064:	d400      	bmi.n	8068 <__swsetup_r+0xd8>
    8066:	6963      	ldr	r3, [r4, #20]
    8068:	60a3      	str	r3, [r4, #8]
    806a:	e7ed      	b.n	8048 <__swsetup_r+0xb8>
    806c:	200000fc 	.word	0x200000fc
    8070:	000084c8 	.word	0x000084c8
    8074:	000084e8 	.word	0x000084e8
    8078:	000084a8 	.word	0x000084a8

0000807c <_close_r>:
    807c:	2300      	movs	r3, #0
    807e:	b570      	push	{r4, r5, r6, lr}
    8080:	4c06      	ldr	r4, [pc, #24]	; (809c <_close_r+0x20>)
    8082:	0005      	movs	r5, r0
    8084:	0008      	movs	r0, r1
    8086:	6023      	str	r3, [r4, #0]
    8088:	f7fe fd66 	bl	6b58 <_close>
    808c:	1c43      	adds	r3, r0, #1
    808e:	d103      	bne.n	8098 <_close_r+0x1c>
    8090:	6823      	ldr	r3, [r4, #0]
    8092:	2b00      	cmp	r3, #0
    8094:	d000      	beq.n	8098 <_close_r+0x1c>
    8096:	602b      	str	r3, [r5, #0]
    8098:	bd70      	pop	{r4, r5, r6, pc}
    809a:	46c0      	nop			; (mov r8, r8)
    809c:	20000bfc 	.word	0x20000bfc

000080a0 <_fstat_r>:
    80a0:	2300      	movs	r3, #0
    80a2:	b570      	push	{r4, r5, r6, lr}
    80a4:	4c06      	ldr	r4, [pc, #24]	; (80c0 <_fstat_r+0x20>)
    80a6:	0005      	movs	r5, r0
    80a8:	0008      	movs	r0, r1
    80aa:	0011      	movs	r1, r2
    80ac:	6023      	str	r3, [r4, #0]
    80ae:	f7fe fd56 	bl	6b5e <_fstat>
    80b2:	1c43      	adds	r3, r0, #1
    80b4:	d103      	bne.n	80be <_fstat_r+0x1e>
    80b6:	6823      	ldr	r3, [r4, #0]
    80b8:	2b00      	cmp	r3, #0
    80ba:	d000      	beq.n	80be <_fstat_r+0x1e>
    80bc:	602b      	str	r3, [r5, #0]
    80be:	bd70      	pop	{r4, r5, r6, pc}
    80c0:	20000bfc 	.word	0x20000bfc

000080c4 <_isatty_r>:
    80c4:	2300      	movs	r3, #0
    80c6:	b570      	push	{r4, r5, r6, lr}
    80c8:	4c06      	ldr	r4, [pc, #24]	; (80e4 <_isatty_r+0x20>)
    80ca:	0005      	movs	r5, r0
    80cc:	0008      	movs	r0, r1
    80ce:	6023      	str	r3, [r4, #0]
    80d0:	f7fe fd4a 	bl	6b68 <_isatty>
    80d4:	1c43      	adds	r3, r0, #1
    80d6:	d103      	bne.n	80e0 <_isatty_r+0x1c>
    80d8:	6823      	ldr	r3, [r4, #0]
    80da:	2b00      	cmp	r3, #0
    80dc:	d000      	beq.n	80e0 <_isatty_r+0x1c>
    80de:	602b      	str	r3, [r5, #0]
    80e0:	bd70      	pop	{r4, r5, r6, pc}
    80e2:	46c0      	nop			; (mov r8, r8)
    80e4:	20000bfc 	.word	0x20000bfc

000080e8 <_lseek_r>:
    80e8:	b570      	push	{r4, r5, r6, lr}
    80ea:	0005      	movs	r5, r0
    80ec:	0008      	movs	r0, r1
    80ee:	0011      	movs	r1, r2
    80f0:	2200      	movs	r2, #0
    80f2:	4c06      	ldr	r4, [pc, #24]	; (810c <_lseek_r+0x24>)
    80f4:	6022      	str	r2, [r4, #0]
    80f6:	001a      	movs	r2, r3
    80f8:	f7fe fd38 	bl	6b6c <_lseek>
    80fc:	1c43      	adds	r3, r0, #1
    80fe:	d103      	bne.n	8108 <_lseek_r+0x20>
    8100:	6823      	ldr	r3, [r4, #0]
    8102:	2b00      	cmp	r3, #0
    8104:	d000      	beq.n	8108 <_lseek_r+0x20>
    8106:	602b      	str	r3, [r5, #0]
    8108:	bd70      	pop	{r4, r5, r6, pc}
    810a:	46c0      	nop			; (mov r8, r8)
    810c:	20000bfc 	.word	0x20000bfc

00008110 <memchr>:
    8110:	b2c9      	uxtb	r1, r1
    8112:	1882      	adds	r2, r0, r2
    8114:	4290      	cmp	r0, r2
    8116:	d101      	bne.n	811c <memchr+0xc>
    8118:	2000      	movs	r0, #0
    811a:	4770      	bx	lr
    811c:	7803      	ldrb	r3, [r0, #0]
    811e:	428b      	cmp	r3, r1
    8120:	d0fb      	beq.n	811a <memchr+0xa>
    8122:	3001      	adds	r0, #1
    8124:	e7f6      	b.n	8114 <memchr+0x4>

00008126 <__malloc_lock>:
    8126:	4770      	bx	lr

00008128 <__malloc_unlock>:
    8128:	4770      	bx	lr
	...

0000812c <_read_r>:
    812c:	b570      	push	{r4, r5, r6, lr}
    812e:	0005      	movs	r5, r0
    8130:	0008      	movs	r0, r1
    8132:	0011      	movs	r1, r2
    8134:	2200      	movs	r2, #0
    8136:	4c06      	ldr	r4, [pc, #24]	; (8150 <_read_r+0x24>)
    8138:	6022      	str	r2, [r4, #0]
    813a:	001a      	movs	r2, r3
    813c:	f7fb fcf4 	bl	3b28 <_read>
    8140:	1c43      	adds	r3, r0, #1
    8142:	d103      	bne.n	814c <_read_r+0x20>
    8144:	6823      	ldr	r3, [r4, #0]
    8146:	2b00      	cmp	r3, #0
    8148:	d000      	beq.n	814c <_read_r+0x20>
    814a:	602b      	str	r3, [r5, #0]
    814c:	bd70      	pop	{r4, r5, r6, pc}
    814e:	46c0      	nop			; (mov r8, r8)
    8150:	20000bfc 	.word	0x20000bfc

00008154 <_tcc_apbcmasks>:
    8154:	00000100 00000200 00000400              ............

00008160 <_tcc_cc_nums>:
    8160:	00020204                                ....

00008164 <_tcc_gclk_ids>:
    8164:	001b1a1a                                ....

00008168 <_tcc_maxs>:
    8168:	00ffffff 00ffffff 0000ffff              ............

00008174 <_tcc_ow_nums>:
    8174:	00020408                                ....

00008178 <_tcc_intflag>:
    8178:	00000001 00000002 00000004 00000008     ................
    8188:	00001000 00002000 00004000 00008000     ..... ...@......
    8198:	00010000 00020000 00040000 00080000     ................

000081a8 <tcc_interrupt_vectors.12466>:
    81a8:	0011100f                                ....

000081ac <mmc_trans_multipliers>:
    81ac:	00000000 0000000a 0000000c 0000000d     ................
    81bc:	0000000f 00000014 0000001a 0000001e     ................
    81cc:	00000023 00000028 0000002d 00000034     #...(...-...4...
    81dc:	00000037 0000003c 00000046 00000050     7...<...F...P...

000081ec <sd_mmc_trans_units>:
    81ec:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00008208 <sd_trans_multipliers>:
    8208:	00000000 0000000a 0000000c 0000000d     ................
    8218:	0000000f 00000014 00000019 0000001e     ................
    8228:	00000023 00000028 0000002d 00000032     #...(...-...2...
    8238:	00000037 0000003c 00000046 00000050     7...<...F...P...
    8248:	0000181a 000018f0 000018f0 0000175c     ............\...
    8258:	000018f0 000018f0 000018f0 000018f0     ................
    8268:	000018f0 000018f0 000018f0 000018f0     ................
    8278:	000018f0 000018f0 000018f0 000018f0     ................
    8288:	000018f0 000018f0 00001780 000018f0     ................
    8298:	000018f0 000018f0 000018f0 000018f0     ................
    82a8:	000018f0 000018f0 0000180a 0000189e     ................
    82b8:	000018f0 000018f0 000018be 000018f0     ................
    82c8:	000018f0 000018f0 000018f0 000018f0     ................
    82d8:	000018f0 00001846 000018f0 000018f0     ....F...........
    82e8:	000018e0 000018f0 000018e8 000018f0     ................
    82f8:	000018f0 000018f0 000018f0 000018d6     ................
    8308:	000018f0 000018f0 000018f0 000018f0     ................
    8318:	000018f0 000018f0 000018f0 000018f0     ................
    8328:	000018f0 000018f0 000018f0 000018f0     ................
    8338:	000018f0 000018f0 000018f0 000018f0     ................
    8348:	000018f0 000018f0 000018f0 000018f0     ................
    8358:	000018f0 000018f0 000018f0 000018f0     ................
    8368:	000018f0 000018f0 000018f0 000018f0     ................
    8378:	000018f0 000018f0 000018f0 000018f0     ................
    8388:	000018f0 000018f0 000018f0 000018f0     ................
    8398:	000018f0 000018f0 000018f0 000018f0     ................
    83a8:	000018f0 000018f0 00001812 31333231     ............1231
    83b8:	32313332 33323133 00000000 0000298a     23123123.....)..
    83c8:	00002986 00002986 000029f4 000029f4     .)...)...)...)..
    83d8:	0000299e 00002990 000029a4 000029e2     .)...)...)...)..
    83e8:	00002b78 00002b58 00002b58 00002be4     x+..X+..X+...+..
    83f8:	00002b6a 00002b86 00002b5c 00002b94     j+...+..\+...+..
    8408:	00002bd4 64726143 736e6920 6c6c6174     .+..Card install
    8418:	69616620 0d0a216c 00000000 61656c50      fail!......Plea
    8428:	75206573 756c706e 6e612067 65722064     se unplug and re
    8438:	756c702d 68742067 61632065 0a2e6472     -plug the card..
    8448:	0000000d 000043b4 000043c2 0000445c     .....C...C..\D..
    8458:	000044fc 00004560                       .D..`E..

00008460 <_usb_device_irq_bits>:
    8460:	00080004 00800070 01000001 00000200     ....p...........

00008470 <_usb_endpoint_irq_bits>:
    8470:	60100c03 42000800 42000c00 42001000     ...`...B...B...B
    8480:	42001400 42001800 42001c00 2f445322     ...B...B...B"SD/
    8490:	20434d4d 64726143 65766f20 50532072     MMC Card over SP
    84a0:	00002249                                I"..

000084a4 <_global_impure_ptr>:
    84a4:	20000100                                ... 

000084a8 <__sf_fake_stderr>:
	...

000084c8 <__sf_fake_stdin>:
	...

000084e8 <__sf_fake_stdout>:
	...
    8508:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8518:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8528:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8538:	00006665                                ef..

0000853c <_init>:
    853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    853e:	46c0      	nop			; (mov r8, r8)
    8540:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8542:	bc08      	pop	{r3}
    8544:	469e      	mov	lr, r3
    8546:	4770      	bx	lr

00008548 <__init_array_start>:
    8548:	000000dd 	.word	0x000000dd

0000854c <_fini>:
    854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    854e:	46c0      	nop			; (mov r8, r8)
    8550:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8552:	bc08      	pop	{r3}
    8554:	469e      	mov	lr, r3
    8556:	4770      	bx	lr

00008558 <__fini_array_start>:
    8558:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <sd_mmc_cards>:
	...
20000014:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

20000030 <udi_api_msc>:
20000030:	131d 0000 1991 0000 19b9 0000 12c1 0000     ................
20000040:	0000 0000                                   ....

20000044 <udi_msc_b_ack_trans>:
20000044:	0101                                             .

20000045 <udi_msc_b_reset_trans>:
20000045:	0001 5500                                        ...

20000048 <udi_msc_csw>:
20000048:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20000058 <udi_msc_inquiry_data.12580>:
20000058:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
20000078:	2e31 3030                                   1.00

2000007c <udc_string_desc>:
2000007c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000098 <udc_string_desc_languageid>:
20000098:	0304 0409                                   ....

2000009c <udc_string_manufacturer_name>:
2000009c:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

200000a8 <udc_string_product_name>:
200000a8:	534d 0043                                   MSC.

200000ac <udc_config>:
200000ac:	00e0 2000 00b8 2000 0000 0000               ... ... ....

200000b8 <udc_config_lsfs>:
200000b8:	00c0 2000 00f4 2000                         ... ... 

200000c0 <udc_desc_fs>:
200000c0:	0209 0020 0101 c000 0932 0004 0200 0608     .. .....2.......
200000d0:	0050 0507 0281 0040 0700 0205 4002 0000     P.....@......@..

200000e0 <udc_device_desc>:
200000e0:	0112 0200 0000 4000 03eb 2403 0100 0201     .......@...$....
200000f0:	0103 0000                                   ....

200000f4 <udi_apis>:
200000f4:	0030 2000                                   0.. 

200000f8 <ss_pins>:
200000f8:	0105                                             .

200000f9 <g_interrupt_enabled>:
200000f9:	0001 0000                                        ...

200000fc <_impure_ptr>:
200000fc:	0100 2000                                   ... 

20000100 <impure_data>:
20000100:	0000 0000 84c8 0000 84e8 0000 84a8 0000     ................
	...
