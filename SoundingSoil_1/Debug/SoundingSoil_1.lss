
SoundingSoil_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007878  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00007878  00007878  00017878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000160  20000000  00007880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000994  20000160  000079e0  00020160  2**2
                  ALLOC
  4 .stack        00002004  20000af4  00008374  00020160  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
  7 .debug_info   00057232  00000000  00000000  000201e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007495  00000000  00000000  00077413  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ec19  00000000  00000000  0007e8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d20  00000000  00000000  0008d4c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001450  00000000  00000000  0008e1e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00024662  00000000  00000000  0008f631  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001b183  00000000  00000000  000b3c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009c231  00000000  00000000  000cee16  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000026c8  00000000  00000000  0016b048  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 2a 00 20 49 66 00 00 45 66 00 00 45 66 00 00     .*. If..Ef..Ef..
	...
      2c:	45 66 00 00 00 00 00 00 00 00 00 00 45 66 00 00     Ef..........Ef..
      3c:	45 66 00 00 45 66 00 00 45 66 00 00 45 66 00 00     Ef..Ef..Ef..Ef..
      4c:	45 66 00 00 41 4c 00 00 45 66 00 00 45 66 00 00     Ef..AL..Ef..Ef..
      5c:	fd 43 00 00 45 66 00 00 f1 1e 00 00 01 1f 00 00     .C..Ef..........
      6c:	11 1f 00 00 21 1f 00 00 31 1f 00 00 41 1f 00 00     ....!...1...A...
      7c:	45 66 00 00 45 66 00 00 45 66 00 00 45 66 00 00     Ef..Ef..Ef..Ef..
      8c:	45 66 00 00 45 66 00 00 45 66 00 00 45 66 00 00     Ef..Ef..Ef..Ef..
      9c:	45 66 00 00 45 66 00 00 45 66 00 00 45 66 00 00     Ef..Ef..Ef..Ef..
      ac:	45 66 00 00 00 00 00 00                             Ef......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000160 	.word	0x20000160
      d4:	00000000 	.word	0x00000000
      d8:	00007880 	.word	0x00007880

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000164 	.word	0x20000164
     108:	00007880 	.word	0x00007880
     10c:	00007880 	.word	0x00007880
     110:	00000000 	.word	0x00000000

00000114 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     114:	b530      	push	{r4, r5, lr}
     116:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     118:	a901      	add	r1, sp, #4
     11a:	4b0c      	ldr	r3, [pc, #48]	; (14c <_tc_get_inst_index+0x38>)
     11c:	000a      	movs	r2, r1
     11e:	cb32      	ldmia	r3!, {r1, r4, r5}
     120:	c232      	stmia	r2!, {r1, r4, r5}
     122:	cb12      	ldmia	r3!, {r1, r4}
     124:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     126:	9b01      	ldr	r3, [sp, #4]
     128:	4298      	cmp	r0, r3
     12a:	d00b      	beq.n	144 <_tc_get_inst_index+0x30>
     12c:	2301      	movs	r3, #1
     12e:	a901      	add	r1, sp, #4
     130:	009a      	lsls	r2, r3, #2
     132:	5852      	ldr	r2, [r2, r1]
     134:	4282      	cmp	r2, r0
     136:	d006      	beq.n	146 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     138:	3301      	adds	r3, #1
     13a:	2b05      	cmp	r3, #5
     13c:	d1f8      	bne.n	130 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     13e:	2000      	movs	r0, #0
}
     140:	b007      	add	sp, #28
     142:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     144:	2300      	movs	r3, #0
			return i;
     146:	b2d8      	uxtb	r0, r3
     148:	e7fa      	b.n	140 <_tc_get_inst_index+0x2c>
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	0000751c 	.word	0x0000751c

00000150 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     150:	b5f0      	push	{r4, r5, r6, r7, lr}
     152:	b089      	sub	sp, #36	; 0x24
     154:	0006      	movs	r6, r0
     156:	000d      	movs	r5, r1
     158:	0017      	movs	r7, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     15a:	0008      	movs	r0, r1
     15c:	4b80      	ldr	r3, [pc, #512]	; (360 <tc_init+0x210>)
     15e:	4798      	blx	r3
     160:	0004      	movs	r4, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     162:	ab06      	add	r3, sp, #24
     164:	221b      	movs	r2, #27
     166:	701a      	strb	r2, [r3, #0]
     168:	3201      	adds	r2, #1
     16a:	705a      	strb	r2, [r3, #1]
     16c:	709a      	strb	r2, [r3, #2]
     16e:	3201      	adds	r2, #1
     170:	70da      	strb	r2, [r3, #3]
     172:	711a      	strb	r2, [r3, #4]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     174:	aa03      	add	r2, sp, #12
     176:	4b7b      	ldr	r3, [pc, #492]	; (364 <tc_init+0x214>)
     178:	3314      	adds	r3, #20
     17a:	cb03      	ldmia	r3!, {r0, r1}
     17c:	c203      	stmia	r2!, {r0, r1}
     17e:	881b      	ldrh	r3, [r3, #0]
     180:	8013      	strh	r3, [r2, #0]
	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     182:	6035      	str	r5, [r6, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     184:	78bb      	ldrb	r3, [r7, #2]
     186:	2b08      	cmp	r3, #8
     188:	d006      	beq.n	198 <tc_init+0x48>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     18a:	7133      	strb	r3, [r6, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     18c:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     18e:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     190:	07db      	lsls	r3, r3, #31
     192:	d505      	bpl.n	1a0 <tc_init+0x50>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     194:	b009      	add	sp, #36	; 0x24
     196:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     198:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     19a:	07e2      	lsls	r2, r4, #31
     19c:	d5fa      	bpl.n	194 <tc_init+0x44>
     19e:	e7f4      	b.n	18a <tc_init+0x3a>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     1a0:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     1a2:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     1a4:	06db      	lsls	r3, r3, #27
     1a6:	d4f5      	bmi.n	194 <tc_init+0x44>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     1a8:	882b      	ldrh	r3, [r5, #0]
     1aa:	079b      	lsls	r3, r3, #30
     1ac:	d4f2      	bmi.n	194 <tc_init+0x44>
	if (config->pwm_channel[0].enabled) {
     1ae:	7c3b      	ldrb	r3, [r7, #16]
     1b0:	2b00      	cmp	r3, #0
     1b2:	d179      	bne.n	2a8 <tc_init+0x158>
	if (config->pwm_channel[1].enabled) {
     1b4:	7f3b      	ldrb	r3, [r7, #28]
     1b6:	2b00      	cmp	r3, #0
     1b8:	d000      	beq.n	1bc <tc_init+0x6c>
     1ba:	e081      	b.n	2c0 <tc_init+0x170>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1bc:	496a      	ldr	r1, [pc, #424]	; (368 <tc_init+0x218>)
     1be:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     1c0:	0062      	lsls	r2, r4, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     1c2:	ab03      	add	r3, sp, #12
     1c4:	5ad3      	ldrh	r3, [r2, r3]
     1c6:	4303      	orrs	r3, r0
     1c8:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     1ca:	78bb      	ldrb	r3, [r7, #2]
     1cc:	2b08      	cmp	r3, #8
     1ce:	d100      	bne.n	1d2 <tc_init+0x82>
     1d0:	e086      	b.n	2e0 <tc_init+0x190>
	gclk_chan_config.source_generator = config->clock_source;
     1d2:	a901      	add	r1, sp, #4
     1d4:	783b      	ldrb	r3, [r7, #0]
     1d6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     1d8:	ab06      	add	r3, sp, #24
     1da:	5d1c      	ldrb	r4, [r3, r4]
     1dc:	0020      	movs	r0, r4
     1de:	4b63      	ldr	r3, [pc, #396]	; (36c <tc_init+0x21c>)
     1e0:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     1e2:	0020      	movs	r0, r4
     1e4:	4b62      	ldr	r3, [pc, #392]	; (370 <tc_init+0x220>)
     1e6:	4798      	blx	r3
	ctrla_tmp =
     1e8:	8939      	ldrh	r1, [r7, #8]
     1ea:	88bb      	ldrh	r3, [r7, #4]
     1ec:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     1ee:	78b9      	ldrb	r1, [r7, #2]
     1f0:	79ba      	ldrb	r2, [r7, #6]
     1f2:	4311      	orrs	r1, r2
	ctrla_tmp =
     1f4:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     1f6:	787b      	ldrb	r3, [r7, #1]
     1f8:	2b00      	cmp	r3, #0
     1fa:	d002      	beq.n	202 <tc_init+0xb2>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     1fc:	2380      	movs	r3, #128	; 0x80
     1fe:	011b      	lsls	r3, r3, #4
     200:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     202:	6832      	ldr	r2, [r6, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     204:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     206:	b25b      	sxtb	r3, r3
     208:	2b00      	cmp	r3, #0
     20a:	dbfb      	blt.n	204 <tc_init+0xb4>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     20c:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     20e:	7b79      	ldrb	r1, [r7, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     210:	1e4b      	subs	r3, r1, #1
     212:	4199      	sbcs	r1, r3
     214:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     216:	7bbb      	ldrb	r3, [r7, #14]
     218:	2b00      	cmp	r3, #0
     21a:	d001      	beq.n	220 <tc_init+0xd0>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     21c:	2301      	movs	r3, #1
     21e:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     220:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     222:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     224:	b25b      	sxtb	r3, r3
     226:	2b00      	cmp	r3, #0
     228:	dbfb      	blt.n	222 <tc_init+0xd2>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     22a:	23ff      	movs	r3, #255	; 0xff
     22c:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     22e:	2900      	cmp	r1, #0
     230:	d005      	beq.n	23e <tc_init+0xee>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     232:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     234:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     236:	b25b      	sxtb	r3, r3
     238:	2b00      	cmp	r3, #0
     23a:	dbfb      	blt.n	234 <tc_init+0xe4>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     23c:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     23e:	7ab9      	ldrb	r1, [r7, #10]
		if (config->enable_capture_on_channel[i] == true) {
     240:	7afb      	ldrb	r3, [r7, #11]
     242:	2b00      	cmp	r3, #0
     244:	d001      	beq.n	24a <tc_init+0xfa>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     246:	2310      	movs	r3, #16
     248:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     24a:	7b3b      	ldrb	r3, [r7, #12]
     24c:	2b00      	cmp	r3, #0
     24e:	d001      	beq.n	254 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     250:	2320      	movs	r3, #32
     252:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     254:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     256:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     258:	b25b      	sxtb	r3, r3
     25a:	2b00      	cmp	r3, #0
     25c:	dbfb      	blt.n	256 <tc_init+0x106>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     25e:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     260:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     262:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     264:	b25b      	sxtb	r3, r3
     266:	2b00      	cmp	r3, #0
     268:	dbfb      	blt.n	262 <tc_init+0x112>
	switch (module_inst->counter_size) {
     26a:	7933      	ldrb	r3, [r6, #4]
     26c:	2b04      	cmp	r3, #4
     26e:	d03f      	beq.n	2f0 <tc_init+0x1a0>
     270:	2b08      	cmp	r3, #8
     272:	d05e      	beq.n	332 <tc_init+0x1e2>
	return STATUS_ERR_INVALID_ARG;
     274:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     276:	2b00      	cmp	r3, #0
     278:	d000      	beq.n	27c <tc_init+0x12c>
     27a:	e78b      	b.n	194 <tc_init+0x44>
     27c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     27e:	b25b      	sxtb	r3, r3
     280:	2b00      	cmp	r3, #0
     282:	dbfb      	blt.n	27c <tc_init+0x12c>
				= config->counter_16_bit.value;
     284:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
     286:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     288:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     28a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     28c:	b25b      	sxtb	r3, r3
     28e:	2b00      	cmp	r3, #0
     290:	dbfb      	blt.n	28a <tc_init+0x13a>
					config->counter_16_bit.compare_capture_channel[0];
     292:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     294:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     296:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     298:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     29a:	b25b      	sxtb	r3, r3
     29c:	2b00      	cmp	r3, #0
     29e:	dbfb      	blt.n	298 <tc_init+0x148>
					config->counter_16_bit.compare_capture_channel[1];
     2a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     2a2:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     2a4:	2000      	movs	r0, #0
     2a6:	e775      	b.n	194 <tc_init+0x44>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2a8:	a902      	add	r1, sp, #8
     2aa:	2301      	movs	r3, #1
     2ac:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     2ae:	2200      	movs	r2, #0
     2b0:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     2b2:	7e3a      	ldrb	r2, [r7, #24]
     2b4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     2b6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     2b8:	7d38      	ldrb	r0, [r7, #20]
     2ba:	4b2e      	ldr	r3, [pc, #184]	; (374 <tc_init+0x224>)
     2bc:	4798      	blx	r3
     2be:	e779      	b.n	1b4 <tc_init+0x64>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2c0:	a902      	add	r1, sp, #8
     2c2:	2301      	movs	r3, #1
     2c4:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     2c6:	2200      	movs	r2, #0
     2c8:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     2ca:	3224      	adds	r2, #36	; 0x24
     2cc:	18ba      	adds	r2, r7, r2
     2ce:	7812      	ldrb	r2, [r2, #0]
     2d0:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     2d2:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     2d4:	331f      	adds	r3, #31
     2d6:	18fb      	adds	r3, r7, r3
     2d8:	7818      	ldrb	r0, [r3, #0]
     2da:	4b26      	ldr	r3, [pc, #152]	; (374 <tc_init+0x224>)
     2dc:	4798      	blx	r3
     2de:	e76d      	b.n	1bc <tc_init+0x6c>
     2e0:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     2e2:	1c62      	adds	r2, r4, #1
     2e4:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     2e6:	ab03      	add	r3, sp, #12
     2e8:	5ad3      	ldrh	r3, [r2, r3]
     2ea:	4303      	orrs	r3, r0
     2ec:	620b      	str	r3, [r1, #32]
     2ee:	e770      	b.n	1d2 <tc_init+0x82>
     2f0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     2f2:	b25b      	sxtb	r3, r3
     2f4:	2b00      	cmp	r3, #0
     2f6:	dbfb      	blt.n	2f0 <tc_init+0x1a0>
					config->counter_8_bit.value;
     2f8:	2328      	movs	r3, #40	; 0x28
     2fa:	5cfb      	ldrb	r3, [r7, r3]
			hw->COUNT8.COUNT.reg =
     2fc:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2fe:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     300:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     302:	b25b      	sxtb	r3, r3
     304:	2b00      	cmp	r3, #0
     306:	dbfb      	blt.n	300 <tc_init+0x1b0>
					config->counter_8_bit.period;
     308:	2329      	movs	r3, #41	; 0x29
     30a:	5cfb      	ldrb	r3, [r7, r3]
			hw->COUNT8.PER.reg =
     30c:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     30e:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     310:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     312:	b25b      	sxtb	r3, r3
     314:	2b00      	cmp	r3, #0
     316:	dbfb      	blt.n	310 <tc_init+0x1c0>
					config->counter_8_bit.compare_capture_channel[0];
     318:	232a      	movs	r3, #42	; 0x2a
     31a:	5cfb      	ldrb	r3, [r7, r3]
			hw->COUNT8.CC[0].reg =
     31c:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     31e:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     320:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     322:	b25b      	sxtb	r3, r3
     324:	2b00      	cmp	r3, #0
     326:	dbfb      	blt.n	320 <tc_init+0x1d0>
					config->counter_8_bit.compare_capture_channel[1];
     328:	232b      	movs	r3, #43	; 0x2b
     32a:	5cfb      	ldrb	r3, [r7, r3]
			hw->COUNT8.CC[1].reg =
     32c:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     32e:	2000      	movs	r0, #0
     330:	e730      	b.n	194 <tc_init+0x44>
     332:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     334:	b25b      	sxtb	r3, r3
     336:	2b00      	cmp	r3, #0
     338:	dbfb      	blt.n	332 <tc_init+0x1e2>
				= config->counter_32_bit.value;
     33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     33c:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     33e:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     340:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     342:	b25b      	sxtb	r3, r3
     344:	2b00      	cmp	r3, #0
     346:	dbfb      	blt.n	340 <tc_init+0x1f0>
			hw->COUNT32.CC[0].reg =
     348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     34a:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     34c:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     34e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     350:	b25b      	sxtb	r3, r3
     352:	2b00      	cmp	r3, #0
     354:	dbfb      	blt.n	34e <tc_init+0x1fe>
					config->counter_32_bit.compare_capture_channel[1];
     356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     358:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     35a:	2000      	movs	r0, #0
     35c:	e71a      	b.n	194 <tc_init+0x44>
     35e:	46c0      	nop			; (mov r8, r8)
     360:	00000115 	.word	0x00000115
     364:	0000751c 	.word	0x0000751c
     368:	40000400 	.word	0x40000400
     36c:	000064ed 	.word	0x000064ed
     370:	00006461 	.word	0x00006461
     374:	000065e5 	.word	0x000065e5

00000378 <audio_in_init>:
extern struct spi_module adc_spi_module;
extern struct spi_slave_inst adc_spi_slave;
extern uint8_t adc_values[2];

void audio_in_init(void)
{
     378:	b5f0      	push	{r4, r5, r6, r7, lr}
     37a:	b091      	sub	sp, #68	; 0x44
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     37c:	a90f      	add	r1, sp, #60	; 0x3c
     37e:	2501      	movs	r5, #1
     380:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
     382:	2600      	movs	r6, #0
     384:	708e      	strb	r6, [r1, #2]
	/* Initializing the CONV pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     386:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(ADC_CONV_PIN, &pin_conf);
     388:	2014      	movs	r0, #20
     38a:	4f28      	ldr	r7, [pc, #160]	; (42c <audio_in_init+0xb4>)
     38c:	47b8      	blx	r7
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     38e:	2280      	movs	r2, #128	; 0x80
     390:	0352      	lsls	r2, r2, #13
     392:	4b27      	ldr	r3, [pc, #156]	; (430 <audio_in_init+0xb8>)
     394:	619a      	str	r2, [r3, #24]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     396:	4c27      	ldr	r4, [pc, #156]	; (434 <audio_in_init+0xbc>)
     398:	232f      	movs	r3, #47	; 0x2f
     39a:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     39c:	7066      	strb	r6, [r4, #1]
	slave->address         = config->address;
     39e:	70a6      	strb	r6, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     3a0:	466b      	mov	r3, sp
     3a2:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
     3a4:	709e      	strb	r6, [r3, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     3a6:	701d      	strb	r5, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     3a8:	4669      	mov	r1, sp
     3aa:	202f      	movs	r0, #47	; 0x2f
     3ac:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
     3ae:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3b0:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     3b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     3b4:	2900      	cmp	r1, #0
     3b6:	d104      	bne.n	3c2 <audio_in_init+0x4a>
		return &(ports[port_index]->Group[group_index]);
     3b8:	0953      	lsrs	r3, r2, #5
     3ba:	01db      	lsls	r3, r3, #7
     3bc:	491c      	ldr	r1, [pc, #112]	; (430 <audio_in_init+0xb8>)
     3be:	468c      	mov	ip, r1
     3c0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3c2:	211f      	movs	r1, #31
     3c4:	4011      	ands	r1, r2
     3c6:	2201      	movs	r2, #1
     3c8:	0010      	movs	r0, r2
     3ca:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     3cc:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     3ce:	ac01      	add	r4, sp, #4
     3d0:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     3d2:	2300      	movs	r3, #0
     3d4:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     3d6:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     3d8:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     3da:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     3dc:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     3de:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     3e0:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     3e2:	3223      	adds	r2, #35	; 0x23
     3e4:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     3e6:	3a18      	subs	r2, #24
     3e8:	2100      	movs	r1, #0
     3ea:	a807      	add	r0, sp, #28
     3ec:	4b12      	ldr	r3, [pc, #72]	; (438 <audio_in_init+0xc0>)
     3ee:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
     3f0:	4b12      	ldr	r3, [pc, #72]	; (43c <audio_in_init+0xc4>)
     3f2:	61a3      	str	r3, [r4, #24]
	config_spi_slave.ss_pin = ADC_SPI_SS_PIN;
	spi_attach_slave(&adc_spi_slave, &config_spi_slave);
	
	/* Initializing the SPI master */
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.mux_setting = ADC_SPI_MUX_SETTING;
     3f4:	2380      	movs	r3, #128	; 0x80
     3f6:	039b      	lsls	r3, r3, #14
     3f8:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = ADC_SPI_PINMUX_PAD0;
     3fa:	4b11      	ldr	r3, [pc, #68]	; (440 <audio_in_init+0xc8>)
     3fc:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = ADC_SPI_PINMUX_PAD1;
     3fe:	4b11      	ldr	r3, [pc, #68]	; (444 <audio_in_init+0xcc>)
     400:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = ADC_SPI_PINMUX_PAD2;
     402:	4b11      	ldr	r3, [pc, #68]	; (448 <audio_in_init+0xd0>)
     404:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = ADC_SPI_PINMUX_PAD3;
     406:	2301      	movs	r3, #1
     408:	425b      	negs	r3, r3
     40a:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&adc_spi_module, ADC_SPI_MODULE, &config_spi_master);
     40c:	4d0f      	ldr	r5, [pc, #60]	; (44c <audio_in_init+0xd4>)
     40e:	0022      	movs	r2, r4
     410:	490f      	ldr	r1, [pc, #60]	; (450 <audio_in_init+0xd8>)
     412:	0028      	movs	r0, r5
     414:	4b0f      	ldr	r3, [pc, #60]	; (454 <audio_in_init+0xdc>)
     416:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     418:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     41a:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     41c:	2b00      	cmp	r3, #0
     41e:	d1fc      	bne.n	41a <audio_in_init+0xa2>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     420:	6813      	ldr	r3, [r2, #0]
     422:	2102      	movs	r1, #2
     424:	430b      	orrs	r3, r1
     426:	6013      	str	r3, [r2, #0]
	spi_enable(&adc_spi_module);
}
     428:	b011      	add	sp, #68	; 0x44
     42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     42c:	00006291 	.word	0x00006291
     430:	41004400 	.word	0x41004400
     434:	200005e0 	.word	0x200005e0
     438:	00006d53 	.word	0x00006d53
     43c:	000186a0 	.word	0x000186a0
     440:	00100002 	.word	0x00100002
     444:	00110002 	.word	0x00110002
     448:	00120002 	.word	0x00120002
     44c:	20000598 	.word	0x20000598
     450:	42000c00 	.word	0x42000c00
     454:	0000508d 	.word	0x0000508d

00000458 <audio_record_1samp>:


void audio_record_1samp(void) {
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	4c10      	ldr	r4, [pc, #64]	; (49c <audio_record_1samp+0x44>)
     45c:	2580      	movs	r5, #128	; 0x80
     45e:	036d      	lsls	r5, r5, #13
     460:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(ADC_CONV_PIN, true);
	delay_us(5);
     462:	2000      	movs	r0, #0
     464:	4b0e      	ldr	r3, [pc, #56]	; (4a0 <audio_record_1samp+0x48>)
     466:	4798      	blx	r3
     468:	0002      	movs	r2, r0
     46a:	2300      	movs	r3, #0
     46c:	0f91      	lsrs	r1, r2, #30
     46e:	0090      	lsls	r0, r2, #2
     470:	1880      	adds	r0, r0, r2
     472:	4159      	adcs	r1, r3
     474:	4a0b      	ldr	r2, [pc, #44]	; (4a4 <audio_record_1samp+0x4c>)
     476:	2300      	movs	r3, #0
     478:	1880      	adds	r0, r0, r2
     47a:	4159      	adcs	r1, r3
     47c:	4a0a      	ldr	r2, [pc, #40]	; (4a8 <audio_record_1samp+0x50>)
     47e:	2300      	movs	r3, #0
     480:	4e0a      	ldr	r6, [pc, #40]	; (4ac <audio_record_1samp+0x54>)
     482:	47b0      	blx	r6
     484:	4b0a      	ldr	r3, [pc, #40]	; (4b0 <audio_record_1samp+0x58>)
     486:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
     488:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(ADC_CONV_PIN, false);
	spi_read_buffer_wait(&adc_spi_module, adc_values, 2, 0xFF);
     48a:	23ff      	movs	r3, #255	; 0xff
     48c:	2202      	movs	r2, #2
     48e:	4909      	ldr	r1, [pc, #36]	; (4b4 <audio_record_1samp+0x5c>)
     490:	4809      	ldr	r0, [pc, #36]	; (4b8 <audio_record_1samp+0x60>)
     492:	4e0a      	ldr	r6, [pc, #40]	; (4bc <audio_record_1samp+0x64>)
     494:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     496:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(ADC_CONV_PIN, true);
     498:	bd70      	pop	{r4, r5, r6, pc}
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	41004400 	.word	0x41004400
     4a0:	000063d5 	.word	0x000063d5
     4a4:	006acfbf 	.word	0x006acfbf
     4a8:	006acfc0 	.word	0x006acfc0
     4ac:	00006acd 	.word	0x00006acd
     4b0:	20000001 	.word	0x20000001
     4b4:	2000028c 	.word	0x2000028c
     4b8:	20000598 	.word	0x20000598
     4bc:	000053c1 	.word	0x000053c1

000004c0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     4c0:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     4c2:	4b07      	ldr	r3, [pc, #28]	; (4e0 <sd_mmc_configure_slot+0x20>)
     4c4:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     4c6:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     4c8:	5ccb      	ldrb	r3, [r1, r3]
     4ca:	1e5a      	subs	r2, r3, #1
     4cc:	4193      	sbcs	r3, r2
     4ce:	b2db      	uxtb	r3, r3
     4d0:	7c4a      	ldrb	r2, [r1, #17]
     4d2:	6809      	ldr	r1, [r1, #0]
     4d4:	4803      	ldr	r0, [pc, #12]	; (4e4 <sd_mmc_configure_slot+0x24>)
     4d6:	7800      	ldrb	r0, [r0, #0]
     4d8:	4c03      	ldr	r4, [pc, #12]	; (4e8 <sd_mmc_configure_slot+0x28>)
     4da:	47a0      	blx	r4
}
     4dc:	bd10      	pop	{r4, pc}
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	2000017c 	.word	0x2000017c
     4e4:	20000185 	.word	0x20000185
     4e8:	00005ce5 	.word	0x00005ce5

000004ec <sd_mmc_select_slot>:
{
     4ec:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     4ee:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     4f0:	2800      	cmp	r0, #0
     4f2:	d001      	beq.n	4f8 <sd_mmc_select_slot+0xc>
}
     4f4:	0018      	movs	r0, r3
     4f6:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     4f8:	4b40      	ldr	r3, [pc, #256]	; (5fc <sd_mmc_select_slot+0x110>)
     4fa:	7a19      	ldrb	r1, [r3, #8]
	if (port_index < PORT_INST_NUM) {
     4fc:	09ca      	lsrs	r2, r1, #7
		return NULL;
     4fe:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     500:	2a00      	cmp	r2, #0
     502:	d104      	bne.n	50e <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     504:	094b      	lsrs	r3, r1, #5
     506:	01db      	lsls	r3, r3, #7
     508:	4a3d      	ldr	r2, [pc, #244]	; (600 <sd_mmc_select_slot+0x114>)
     50a:	4694      	mov	ip, r2
     50c:	4463      	add	r3, ip
	return (port_base->IN.reg & pin_mask);
     50e:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     510:	221f      	movs	r2, #31
     512:	400a      	ands	r2, r1
     514:	2301      	movs	r3, #1
     516:	4093      	lsls	r3, r2
     518:	4218      	tst	r0, r3
     51a:	d010      	beq.n	53e <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     51c:	4b37      	ldr	r3, [pc, #220]	; (5fc <sd_mmc_select_slot+0x110>)
     51e:	7b9b      	ldrb	r3, [r3, #14]
     520:	2b01      	cmp	r3, #1
     522:	d004      	beq.n	52e <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     524:	2204      	movs	r2, #4
     526:	4b35      	ldr	r3, [pc, #212]	; (5fc <sd_mmc_select_slot+0x110>)
     528:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     52a:	2302      	movs	r3, #2
     52c:	e7e2      	b.n	4f4 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     52e:	4b35      	ldr	r3, [pc, #212]	; (604 <sd_mmc_select_slot+0x118>)
     530:	781b      	ldrb	r3, [r3, #0]
     532:	2b00      	cmp	r3, #0
     534:	d0f6      	beq.n	524 <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     536:	2200      	movs	r2, #0
     538:	4b33      	ldr	r3, [pc, #204]	; (608 <sd_mmc_select_slot+0x11c>)
     53a:	601a      	str	r2, [r3, #0]
     53c:	e7f2      	b.n	524 <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     53e:	4b2f      	ldr	r3, [pc, #188]	; (5fc <sd_mmc_select_slot+0x110>)
     540:	7b9a      	ldrb	r2, [r3, #14]
     542:	2a04      	cmp	r2, #4
     544:	d005      	beq.n	552 <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     546:	2a01      	cmp	r2, #1
     548:	d033      	beq.n	5b2 <sd_mmc_select_slot+0xc6>
		return SD_MMC_ERR_UNUSABLE;
     54a:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     54c:	2a03      	cmp	r2, #3
     54e:	d0d1      	beq.n	4f4 <sd_mmc_select_slot+0x8>
     550:	e045      	b.n	5de <sd_mmc_select_slot+0xf2>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     552:	3a03      	subs	r2, #3
     554:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     556:	4b2c      	ldr	r3, [pc, #176]	; (608 <sd_mmc_select_slot+0x11c>)
     558:	681b      	ldr	r3, [r3, #0]
     55a:	2b00      	cmp	r3, #0
     55c:	d017      	beq.n	58e <sd_mmc_select_slot+0xa2>
		sd_mmc_sam_systick_used = false;
     55e:	2200      	movs	r2, #0
     560:	4b28      	ldr	r3, [pc, #160]	; (604 <sd_mmc_select_slot+0x118>)
     562:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     564:	2000      	movs	r0, #0
     566:	4b29      	ldr	r3, [pc, #164]	; (60c <sd_mmc_select_slot+0x120>)
     568:	4798      	blx	r3
     56a:	22fa      	movs	r2, #250	; 0xfa
     56c:	0092      	lsls	r2, r2, #2
     56e:	2300      	movs	r3, #0
     570:	2100      	movs	r1, #0
     572:	4c27      	ldr	r4, [pc, #156]	; (610 <sd_mmc_select_slot+0x124>)
     574:	47a0      	blx	r4
     576:	4a27      	ldr	r2, [pc, #156]	; (614 <sd_mmc_select_slot+0x128>)
     578:	2300      	movs	r3, #0
     57a:	1880      	adds	r0, r0, r2
     57c:	4159      	adcs	r1, r3
     57e:	4a26      	ldr	r2, [pc, #152]	; (618 <sd_mmc_select_slot+0x12c>)
     580:	2300      	movs	r3, #0
     582:	4c26      	ldr	r4, [pc, #152]	; (61c <sd_mmc_select_slot+0x130>)
     584:	47a0      	blx	r4
     586:	4b26      	ldr	r3, [pc, #152]	; (620 <sd_mmc_select_slot+0x134>)
     588:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     58a:	2302      	movs	r3, #2
     58c:	e7b2      	b.n	4f4 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     58e:	2401      	movs	r4, #1
     590:	4b1c      	ldr	r3, [pc, #112]	; (604 <sd_mmc_select_slot+0x118>)
     592:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     594:	2000      	movs	r0, #0
     596:	4b1d      	ldr	r3, [pc, #116]	; (60c <sd_mmc_select_slot+0x120>)
     598:	4798      	blx	r3
     59a:	21fa      	movs	r1, #250	; 0xfa
     59c:	0149      	lsls	r1, r1, #5
     59e:	4b21      	ldr	r3, [pc, #132]	; (624 <sd_mmc_select_slot+0x138>)
     5a0:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     5a2:	23fa      	movs	r3, #250	; 0xfa
     5a4:	009b      	lsls	r3, r3, #2
     5a6:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     5a8:	4b17      	ldr	r3, [pc, #92]	; (608 <sd_mmc_select_slot+0x11c>)
     5aa:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     5ac:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     5ae:	2302      	movs	r3, #2
     5b0:	e7a0      	b.n	4f4 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     5b2:	4b14      	ldr	r3, [pc, #80]	; (604 <sd_mmc_select_slot+0x118>)
     5b4:	781b      	ldrb	r3, [r3, #0]
     5b6:	2b00      	cmp	r3, #0
     5b8:	d007      	beq.n	5ca <sd_mmc_select_slot+0xde>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     5ba:	4b13      	ldr	r3, [pc, #76]	; (608 <sd_mmc_select_slot+0x11c>)
     5bc:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     5be:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     5c0:	03d2      	lsls	r2, r2, #15
     5c2:	d597      	bpl.n	4f4 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     5c4:	2200      	movs	r2, #0
     5c6:	4b10      	ldr	r3, [pc, #64]	; (608 <sd_mmc_select_slot+0x11c>)
     5c8:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     5ca:	4b0c      	ldr	r3, [pc, #48]	; (5fc <sd_mmc_select_slot+0x110>)
     5cc:	2202      	movs	r2, #2
     5ce:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     5d0:	4a15      	ldr	r2, [pc, #84]	; (628 <sd_mmc_select_slot+0x13c>)
     5d2:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     5d4:	2201      	movs	r2, #1
     5d6:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     5d8:	2100      	movs	r1, #0
     5da:	3221      	adds	r2, #33	; 0x21
     5dc:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     5de:	2200      	movs	r2, #0
     5e0:	4b12      	ldr	r3, [pc, #72]	; (62c <sd_mmc_select_slot+0x140>)
     5e2:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     5e4:	4c05      	ldr	r4, [pc, #20]	; (5fc <sd_mmc_select_slot+0x110>)
     5e6:	4b12      	ldr	r3, [pc, #72]	; (630 <sd_mmc_select_slot+0x144>)
     5e8:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     5ea:	4b12      	ldr	r3, [pc, #72]	; (634 <sd_mmc_select_slot+0x148>)
     5ec:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     5ee:	7ba3      	ldrb	r3, [r4, #14]
     5f0:	3b02      	subs	r3, #2
     5f2:	425a      	negs	r2, r3
     5f4:	4153      	adcs	r3, r2
     5f6:	b2db      	uxtb	r3, r3
     5f8:	e77c      	b.n	4f4 <sd_mmc_select_slot+0x8>
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	2000000c 	.word	0x2000000c
     600:	41004400 	.word	0x41004400
     604:	20000184 	.word	0x20000184
     608:	e000e010 	.word	0xe000e010
     60c:	000063d5 	.word	0x000063d5
     610:	00006b0d 	.word	0x00006b0d
     614:	00001b57 	.word	0x00001b57
     618:	00001b58 	.word	0x00001b58
     61c:	00006acd 	.word	0x00006acd
     620:	20000001 	.word	0x20000001
     624:	00006765 	.word	0x00006765
     628:	00061a80 	.word	0x00061a80
     62c:	20000185 	.word	0x20000185
     630:	2000017c 	.word	0x2000017c
     634:	000004c1 	.word	0x000004c1

00000638 <sd_mmc_cmd13>:
{
     638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     63a:	4d09      	ldr	r5, [pc, #36]	; (660 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     63c:	4f09      	ldr	r7, [pc, #36]	; (664 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     63e:	4e0a      	ldr	r6, [pc, #40]	; (668 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     640:	2100      	movs	r1, #0
     642:	480a      	ldr	r0, [pc, #40]	; (66c <sd_mmc_cmd13+0x34>)
     644:	47b8      	blx	r7
     646:	1e04      	subs	r4, r0, #0
     648:	d007      	beq.n	65a <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     64a:	47b0      	blx	r6
     64c:	23ff      	movs	r3, #255	; 0xff
     64e:	4203      	tst	r3, r0
     650:	d003      	beq.n	65a <sd_mmc_cmd13+0x22>
     652:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     654:	2d00      	cmp	r5, #0
     656:	d1f3      	bne.n	640 <sd_mmc_cmd13+0x8>
			return false;
     658:	2400      	movs	r4, #0
}
     65a:	0020      	movs	r0, r4
     65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     65e:	46c0      	nop			; (mov r8, r8)
     660:	00030d41 	.word	0x00030d41
     664:	00005f29 	.word	0x00005f29
     668:	00005f41 	.word	0x00005f41
     66c:	00001b0d 	.word	0x00001b0d

00000670 <sd_mmc_cmd9_spi>:
{
     670:	b510      	push	{r4, lr}
     672:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     674:	4b0c      	ldr	r3, [pc, #48]	; (6a8 <sd_mmc_cmd9_spi+0x38>)
     676:	681b      	ldr	r3, [r3, #0]
     678:	8999      	ldrh	r1, [r3, #12]
     67a:	0409      	lsls	r1, r1, #16
     67c:	2301      	movs	r3, #1
     67e:	9300      	str	r3, [sp, #0]
     680:	2210      	movs	r2, #16
     682:	480a      	ldr	r0, [pc, #40]	; (6ac <sd_mmc_cmd9_spi+0x3c>)
     684:	4c0a      	ldr	r4, [pc, #40]	; (6b0 <sd_mmc_cmd9_spi+0x40>)
     686:	47a0      	blx	r4
     688:	2800      	cmp	r0, #0
     68a:	d101      	bne.n	690 <sd_mmc_cmd9_spi+0x20>
}
     68c:	b002      	add	sp, #8
     68e:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     690:	4b05      	ldr	r3, [pc, #20]	; (6a8 <sd_mmc_cmd9_spi+0x38>)
     692:	6818      	ldr	r0, [r3, #0]
     694:	3012      	adds	r0, #18
     696:	2101      	movs	r1, #1
     698:	4b06      	ldr	r3, [pc, #24]	; (6b4 <sd_mmc_cmd9_spi+0x44>)
     69a:	4798      	blx	r3
     69c:	2800      	cmp	r0, #0
     69e:	d0f5      	beq.n	68c <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     6a0:	4b05      	ldr	r3, [pc, #20]	; (6b8 <sd_mmc_cmd9_spi+0x48>)
     6a2:	4798      	blx	r3
     6a4:	e7f2      	b.n	68c <sd_mmc_cmd9_spi+0x1c>
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	2000017c 	.word	0x2000017c
     6ac:	00081109 	.word	0x00081109
     6b0:	00005d99 	.word	0x00005d99
     6b4:	00005fc5 	.word	0x00005fc5
     6b8:	00006051 	.word	0x00006051

000006bc <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     6bc:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     6be:	4b04      	ldr	r3, [pc, #16]	; (6d0 <sd_mmc_deselect_slot+0x14>)
     6c0:	781b      	ldrb	r3, [r3, #0]
     6c2:	2b00      	cmp	r3, #0
     6c4:	d000      	beq.n	6c8 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     6c6:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     6c8:	2000      	movs	r0, #0
     6ca:	4b02      	ldr	r3, [pc, #8]	; (6d4 <sd_mmc_deselect_slot+0x18>)
     6cc:	4798      	blx	r3
}
     6ce:	e7fa      	b.n	6c6 <sd_mmc_deselect_slot+0xa>
     6d0:	20000185 	.word	0x20000185
     6d4:	00005d39 	.word	0x00005d39

000006d8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     6d8:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     6da:	2204      	movs	r2, #4
     6dc:	4b03      	ldr	r3, [pc, #12]	; (6ec <sd_mmc_init+0x14>)
     6de:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     6e0:	32fb      	adds	r2, #251	; 0xfb
     6e2:	4b03      	ldr	r3, [pc, #12]	; (6f0 <sd_mmc_init+0x18>)
     6e4:	701a      	strb	r2, [r3, #0]
	driver_init();
     6e6:	4b03      	ldr	r3, [pc, #12]	; (6f4 <sd_mmc_init+0x1c>)
     6e8:	4798      	blx	r3
}
     6ea:	bd10      	pop	{r4, pc}
     6ec:	2000000c 	.word	0x2000000c
     6f0:	20000185 	.word	0x20000185
     6f4:	00005bf1 	.word	0x00005bf1

000006f8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fa:	46c6      	mov	lr, r8
     6fc:	b500      	push	{lr}
     6fe:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     700:	4bcb      	ldr	r3, [pc, #812]	; (a30 <sd_mmc_check+0x338>)
     702:	4798      	blx	r3
     704:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     706:	2801      	cmp	r0, #1
     708:	d006      	beq.n	718 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     70a:	4bca      	ldr	r3, [pc, #808]	; (a34 <sd_mmc_check+0x33c>)
     70c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     70e:	0020      	movs	r0, r4
     710:	b008      	add	sp, #32
     712:	bc04      	pop	{r2}
     714:	4690      	mov	r8, r2
     716:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     718:	4bc7      	ldr	r3, [pc, #796]	; (a38 <sd_mmc_check+0x340>)
     71a:	681b      	ldr	r3, [r3, #0]
     71c:	2201      	movs	r2, #1
     71e:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     720:	2200      	movs	r2, #0
     722:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     724:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     726:	4bc5      	ldr	r3, [pc, #788]	; (a3c <sd_mmc_check+0x344>)
     728:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     72a:	2100      	movs	r1, #0
     72c:	2088      	movs	r0, #136	; 0x88
     72e:	0140      	lsls	r0, r0, #5
     730:	4bc3      	ldr	r3, [pc, #780]	; (a40 <sd_mmc_check+0x348>)
     732:	4798      	blx	r3
     734:	2800      	cmp	r0, #0
     736:	d107      	bne.n	748 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     738:	4bbf      	ldr	r3, [pc, #764]	; (a38 <sd_mmc_check+0x340>)
     73a:	681b      	ldr	r3, [r3, #0]
     73c:	2203      	movs	r2, #3
     73e:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     740:	4bbc      	ldr	r3, [pc, #752]	; (a34 <sd_mmc_check+0x33c>)
     742:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     744:	2403      	movs	r4, #3
     746:	e7e2      	b.n	70e <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     748:	21d5      	movs	r1, #213	; 0xd5
     74a:	0049      	lsls	r1, r1, #1
     74c:	48bd      	ldr	r0, [pc, #756]	; (a44 <sd_mmc_check+0x34c>)
     74e:	4bbc      	ldr	r3, [pc, #752]	; (a40 <sd_mmc_check+0x348>)
     750:	4798      	blx	r3
	*v2 = 0;
     752:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     754:	2800      	cmp	r0, #0
     756:	d125      	bne.n	7a4 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     758:	4bb7      	ldr	r3, [pc, #732]	; (a38 <sd_mmc_check+0x340>)
     75a:	681b      	ldr	r3, [r3, #0]
     75c:	7bdb      	ldrb	r3, [r3, #15]
     75e:	07db      	lsls	r3, r3, #31
     760:	d500      	bpl.n	764 <sd_mmc_check+0x6c>
     762:	e1eb      	b.n	b3c <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     764:	4bb4      	ldr	r3, [pc, #720]	; (a38 <sd_mmc_check+0x340>)
     766:	681b      	ldr	r3, [r3, #0]
     768:	7bda      	ldrb	r2, [r3, #15]
     76a:	2309      	movs	r3, #9
     76c:	4013      	ands	r3, r2
     76e:	2b01      	cmp	r3, #1
     770:	d10f      	bne.n	792 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     772:	2180      	movs	r1, #128	; 0x80
     774:	0089      	lsls	r1, r1, #2
     776:	48b4      	ldr	r0, [pc, #720]	; (a48 <sd_mmc_check+0x350>)
     778:	4bb1      	ldr	r3, [pc, #708]	; (a40 <sd_mmc_check+0x348>)
     77a:	4798      	blx	r3
     77c:	2800      	cmp	r0, #0
     77e:	d0db      	beq.n	738 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     780:	4bad      	ldr	r3, [pc, #692]	; (a38 <sd_mmc_check+0x340>)
     782:	681b      	ldr	r3, [r3, #0]
     784:	7bdb      	ldrb	r3, [r3, #15]
     786:	07db      	lsls	r3, r3, #31
     788:	d503      	bpl.n	792 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     78a:	4bb0      	ldr	r3, [pc, #704]	; (a4c <sd_mmc_check+0x354>)
     78c:	4798      	blx	r3
     78e:	2800      	cmp	r0, #0
     790:	d0d2      	beq.n	738 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     792:	4baf      	ldr	r3, [pc, #700]	; (a50 <sd_mmc_check+0x358>)
     794:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     796:	4ba8      	ldr	r3, [pc, #672]	; (a38 <sd_mmc_check+0x340>)
     798:	681b      	ldr	r3, [r3, #0]
     79a:	2200      	movs	r2, #0
     79c:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     79e:	4ba5      	ldr	r3, [pc, #660]	; (a34 <sd_mmc_check+0x33c>)
     7a0:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     7a2:	e7b4      	b.n	70e <sd_mmc_check+0x16>
	resp = driver_get_response();
     7a4:	4bab      	ldr	r3, [pc, #684]	; (a54 <sd_mmc_check+0x35c>)
     7a6:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     7a8:	1c43      	adds	r3, r0, #1
     7aa:	d100      	bne.n	7ae <sd_mmc_check+0xb6>
     7ac:	e1c4      	b.n	b38 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     7ae:	0500      	lsls	r0, r0, #20
     7b0:	0d00      	lsrs	r0, r0, #20
     7b2:	23d5      	movs	r3, #213	; 0xd5
     7b4:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     7b6:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     7b8:	4298      	cmp	r0, r3
     7ba:	d1bd      	bne.n	738 <sd_mmc_check+0x40>
     7bc:	e7cc      	b.n	758 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     7be:	2100      	movs	r1, #0
     7c0:	48a5      	ldr	r0, [pc, #660]	; (a58 <sd_mmc_check+0x360>)
     7c2:	4b9f      	ldr	r3, [pc, #636]	; (a40 <sd_mmc_check+0x348>)
     7c4:	4798      	blx	r3
     7c6:	2800      	cmp	r0, #0
     7c8:	d119      	bne.n	7fe <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     7ca:	4b9b      	ldr	r3, [pc, #620]	; (a38 <sd_mmc_check+0x340>)
     7cc:	681b      	ldr	r3, [r3, #0]
     7ce:	2202      	movs	r2, #2
     7d0:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     7d2:	2100      	movs	r1, #0
     7d4:	2088      	movs	r0, #136	; 0x88
     7d6:	0140      	lsls	r0, r0, #5
     7d8:	4b99      	ldr	r3, [pc, #612]	; (a40 <sd_mmc_check+0x348>)
     7da:	4798      	blx	r3
     7dc:	2800      	cmp	r0, #0
     7de:	d0ab      	beq.n	738 <sd_mmc_check+0x40>
     7e0:	4d9e      	ldr	r5, [pc, #632]	; (a5c <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     7e2:	4f97      	ldr	r7, [pc, #604]	; (a40 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     7e4:	4e9b      	ldr	r6, [pc, #620]	; (a54 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     7e6:	2100      	movs	r1, #0
     7e8:	489d      	ldr	r0, [pc, #628]	; (a60 <sd_mmc_check+0x368>)
     7ea:	47b8      	blx	r7
     7ec:	2800      	cmp	r0, #0
     7ee:	d0a3      	beq.n	738 <sd_mmc_check+0x40>
		resp = driver_get_response();
     7f0:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     7f2:	07c3      	lsls	r3, r0, #31
     7f4:	d57d      	bpl.n	8f2 <sd_mmc_check+0x1fa>
     7f6:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     7f8:	2d00      	cmp	r5, #0
     7fa:	d1f4      	bne.n	7e6 <sd_mmc_check+0xee>
     7fc:	e79c      	b.n	738 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     7fe:	4b95      	ldr	r3, [pc, #596]	; (a54 <sd_mmc_check+0x35c>)
     800:	4798      	blx	r3
     802:	0043      	lsls	r3, r0, #1
     804:	d505      	bpl.n	812 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     806:	4b8c      	ldr	r3, [pc, #560]	; (a38 <sd_mmc_check+0x340>)
     808:	681a      	ldr	r2, [r3, #0]
     80a:	7bd3      	ldrb	r3, [r2, #15]
     80c:	2108      	movs	r1, #8
     80e:	430b      	orrs	r3, r1
     810:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     812:	2100      	movs	r1, #0
     814:	4893      	ldr	r0, [pc, #588]	; (a64 <sd_mmc_check+0x36c>)
     816:	4b8a      	ldr	r3, [pc, #552]	; (a40 <sd_mmc_check+0x348>)
     818:	4798      	blx	r3
     81a:	2800      	cmp	r0, #0
     81c:	d08c      	beq.n	738 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     81e:	4b86      	ldr	r3, [pc, #536]	; (a38 <sd_mmc_check+0x340>)
     820:	681b      	ldr	r3, [r3, #0]
     822:	7bdb      	ldrb	r3, [r3, #15]
     824:	07da      	lsls	r2, r3, #31
     826:	d400      	bmi.n	82a <sd_mmc_check+0x132>
     828:	e1a4      	b.n	b74 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     82a:	4b8f      	ldr	r3, [pc, #572]	; (a68 <sd_mmc_check+0x370>)
     82c:	4798      	blx	r3
     82e:	2800      	cmp	r0, #0
     830:	d082      	beq.n	738 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     832:	4b81      	ldr	r3, [pc, #516]	; (a38 <sd_mmc_check+0x340>)
     834:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     836:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     838:	2107      	movs	r1, #7
     83a:	4019      	ands	r1, r3
     83c:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     83e:	488b      	ldr	r0, [pc, #556]	; (a6c <sd_mmc_check+0x374>)
     840:	5808      	ldr	r0, [r1, r0]
     842:	21fa      	movs	r1, #250	; 0xfa
     844:	0089      	lsls	r1, r1, #2
     846:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     848:	065b      	lsls	r3, r3, #25
     84a:	0f1b      	lsrs	r3, r3, #28
     84c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     84e:	4888      	ldr	r0, [pc, #544]	; (a70 <sd_mmc_check+0x378>)
     850:	581b      	ldr	r3, [r3, r0]
     852:	434b      	muls	r3, r1
     854:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     856:	7c93      	ldrb	r3, [r2, #18]
     858:	099b      	lsrs	r3, r3, #6
     85a:	d000      	beq.n	85e <sd_mmc_check+0x166>
     85c:	e13c      	b.n	ad8 <sd_mmc_check+0x3e0>
     85e:	7e91      	ldrb	r1, [r2, #26]
     860:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     862:	7e53      	ldrb	r3, [r2, #25]
     864:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     866:	7e10      	ldrb	r0, [r2, #24]
     868:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     86a:	4303      	orrs	r3, r0
     86c:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     86e:	7f10      	ldrb	r0, [r2, #28]
     870:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     872:	7ed1      	ldrb	r1, [r2, #27]
     874:	0049      	lsls	r1, r1, #1
     876:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     878:	051b      	lsls	r3, r3, #20
     87a:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     87c:	3301      	adds	r3, #1
     87e:	2107      	movs	r1, #7
     880:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     882:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     884:	408b      	lsls	r3, r1
     886:	7dd0      	ldrb	r0, [r2, #23]
     888:	210f      	movs	r1, #15
     88a:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     88c:	408b      	lsls	r3, r1
				/ 1024;
     88e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     890:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     892:	8991      	ldrh	r1, [r2, #12]
     894:	0409      	lsls	r1, r1, #16
     896:	4877      	ldr	r0, [pc, #476]	; (a74 <sd_mmc_check+0x37c>)
     898:	4b69      	ldr	r3, [pc, #420]	; (a40 <sd_mmc_check+0x348>)
     89a:	4798      	blx	r3
     89c:	2800      	cmp	r0, #0
     89e:	d100      	bne.n	8a2 <sd_mmc_check+0x1aa>
     8a0:	e74a      	b.n	738 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     8a2:	2301      	movs	r3, #1
     8a4:	9300      	str	r3, [sp, #0]
     8a6:	2208      	movs	r2, #8
     8a8:	2100      	movs	r1, #0
     8aa:	4873      	ldr	r0, [pc, #460]	; (a78 <sd_mmc_check+0x380>)
     8ac:	4d73      	ldr	r5, [pc, #460]	; (a7c <sd_mmc_check+0x384>)
     8ae:	47a8      	blx	r5
     8b0:	2800      	cmp	r0, #0
     8b2:	d100      	bne.n	8b6 <sd_mmc_check+0x1be>
     8b4:	e740      	b.n	738 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     8b6:	2101      	movs	r1, #1
     8b8:	a806      	add	r0, sp, #24
     8ba:	4b71      	ldr	r3, [pc, #452]	; (a80 <sd_mmc_check+0x388>)
     8bc:	4798      	blx	r3
     8be:	2800      	cmp	r0, #0
     8c0:	d100      	bne.n	8c4 <sd_mmc_check+0x1cc>
     8c2:	e739      	b.n	738 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     8c4:	4b6f      	ldr	r3, [pc, #444]	; (a84 <sd_mmc_check+0x38c>)
     8c6:	4798      	blx	r3
     8c8:	2800      	cmp	r0, #0
     8ca:	d100      	bne.n	8ce <sd_mmc_check+0x1d6>
     8cc:	e734      	b.n	738 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     8ce:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     8d0:	781b      	ldrb	r3, [r3, #0]
     8d2:	220f      	movs	r2, #15
     8d4:	4013      	ands	r3, r2
     8d6:	2b01      	cmp	r3, #1
     8d8:	d100      	bne.n	8dc <sd_mmc_check+0x1e4>
     8da:	e119      	b.n	b10 <sd_mmc_check+0x418>
     8dc:	2b00      	cmp	r3, #0
     8de:	d100      	bne.n	8e2 <sd_mmc_check+0x1ea>
     8e0:	e109      	b.n	af6 <sd_mmc_check+0x3fe>
     8e2:	2b02      	cmp	r3, #2
     8e4:	d100      	bne.n	8e8 <sd_mmc_check+0x1f0>
     8e6:	e118      	b.n	b1a <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     8e8:	4b53      	ldr	r3, [pc, #332]	; (a38 <sd_mmc_check+0x340>)
     8ea:	681b      	ldr	r3, [r3, #0]
     8ec:	2210      	movs	r2, #16
     8ee:	741a      	strb	r2, [r3, #16]
     8f0:	e105      	b.n	afe <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     8f2:	2100      	movs	r1, #0
     8f4:	4858      	ldr	r0, [pc, #352]	; (a58 <sd_mmc_check+0x360>)
     8f6:	4b52      	ldr	r3, [pc, #328]	; (a40 <sd_mmc_check+0x348>)
     8f8:	4798      	blx	r3
     8fa:	2800      	cmp	r0, #0
     8fc:	d100      	bne.n	900 <sd_mmc_check+0x208>
     8fe:	e71b      	b.n	738 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     900:	4b54      	ldr	r3, [pc, #336]	; (a54 <sd_mmc_check+0x35c>)
     902:	4798      	blx	r3
     904:	23c0      	movs	r3, #192	; 0xc0
     906:	05db      	lsls	r3, r3, #23
     908:	4018      	ands	r0, r3
     90a:	2380      	movs	r3, #128	; 0x80
     90c:	05db      	lsls	r3, r3, #23
     90e:	4298      	cmp	r0, r3
     910:	d105      	bne.n	91e <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     912:	4b49      	ldr	r3, [pc, #292]	; (a38 <sd_mmc_check+0x340>)
     914:	681a      	ldr	r2, [r3, #0]
     916:	7bd1      	ldrb	r1, [r2, #15]
     918:	2308      	movs	r3, #8
     91a:	430b      	orrs	r3, r1
     91c:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     91e:	2100      	movs	r1, #0
     920:	4850      	ldr	r0, [pc, #320]	; (a64 <sd_mmc_check+0x36c>)
     922:	4b47      	ldr	r3, [pc, #284]	; (a40 <sd_mmc_check+0x348>)
     924:	4798      	blx	r3
     926:	2800      	cmp	r0, #0
     928:	d100      	bne.n	92c <sd_mmc_check+0x234>
     92a:	e705      	b.n	738 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     92c:	4b4e      	ldr	r3, [pc, #312]	; (a68 <sd_mmc_check+0x370>)
     92e:	4798      	blx	r3
     930:	2800      	cmp	r0, #0
     932:	d100      	bne.n	936 <sd_mmc_check+0x23e>
     934:	e700      	b.n	738 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     936:	4b40      	ldr	r3, [pc, #256]	; (a38 <sd_mmc_check+0x340>)
     938:	681a      	ldr	r2, [r3, #0]
     93a:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     93c:	069b      	lsls	r3, r3, #26
     93e:	0f1b      	lsrs	r3, r3, #28
     940:	2b02      	cmp	r3, #2
     942:	d100      	bne.n	946 <sd_mmc_check+0x24e>
     944:	e0a8      	b.n	a98 <sd_mmc_check+0x3a0>
     946:	d907      	bls.n	958 <sd_mmc_check+0x260>
     948:	2b03      	cmp	r3, #3
     94a:	d100      	bne.n	94e <sd_mmc_check+0x256>
     94c:	e0a7      	b.n	a9e <sd_mmc_check+0x3a6>
     94e:	2b04      	cmp	r3, #4
     950:	d104      	bne.n	95c <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     952:	2340      	movs	r3, #64	; 0x40
     954:	7413      	strb	r3, [r2, #16]
     956:	e003      	b.n	960 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     958:	2b01      	cmp	r3, #1
     95a:	d066      	beq.n	a2a <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     95c:	2312      	movs	r3, #18
     95e:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     960:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     962:	0659      	lsls	r1, r3, #25
     964:	0f09      	lsrs	r1, r1, #28
     966:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     968:	2007      	movs	r0, #7
     96a:	4003      	ands	r3, r0
     96c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     96e:	483f      	ldr	r0, [pc, #252]	; (a6c <sd_mmc_check+0x374>)
     970:	5818      	ldr	r0, [r3, r0]
     972:	23fa      	movs	r3, #250	; 0xfa
     974:	009b      	lsls	r3, r3, #2
     976:	4343      	muls	r3, r0
     978:	4843      	ldr	r0, [pc, #268]	; (a88 <sd_mmc_check+0x390>)
     97a:	5809      	ldr	r1, [r1, r0]
     97c:	434b      	muls	r3, r1
     97e:	6013      	str	r3, [r2, #0]
     980:	7e91      	ldrb	r1, [r2, #26]
     982:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     984:	7e53      	ldrb	r3, [r2, #25]
     986:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     988:	7e10      	ldrb	r0, [r2, #24]
     98a:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     98c:	4303      	orrs	r3, r0
     98e:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     990:	051b      	lsls	r3, r3, #20
     992:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     994:	493d      	ldr	r1, [pc, #244]	; (a8c <sd_mmc_check+0x394>)
     996:	428b      	cmp	r3, r1
     998:	d00f      	beq.n	9ba <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     99a:	7f10      	ldrb	r0, [r2, #28]
     99c:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     99e:	7ed1      	ldrb	r1, [r2, #27]
     9a0:	0049      	lsls	r1, r1, #1
     9a2:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     9a4:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     9a6:	2007      	movs	r0, #7
     9a8:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     9aa:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     9ac:	408b      	lsls	r3, r1
     9ae:	7dd1      	ldrb	r1, [r2, #23]
     9b0:	3008      	adds	r0, #8
     9b2:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     9b4:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     9b6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     9b8:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     9ba:	7c13      	ldrb	r3, [r2, #16]
     9bc:	2b3f      	cmp	r3, #63	; 0x3f
     9be:	d97b      	bls.n	ab8 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     9c0:	2100      	movs	r1, #0
     9c2:	9100      	str	r1, [sp, #0]
     9c4:	2301      	movs	r3, #1
     9c6:	2280      	movs	r2, #128	; 0x80
     9c8:	0092      	lsls	r2, r2, #2
     9ca:	4831      	ldr	r0, [pc, #196]	; (a90 <sd_mmc_check+0x398>)
     9cc:	4d2b      	ldr	r5, [pc, #172]	; (a7c <sd_mmc_check+0x384>)
     9ce:	47a8      	blx	r5
     9d0:	2800      	cmp	r0, #0
     9d2:	d100      	bne.n	9d6 <sd_mmc_check+0x2de>
     9d4:	e6b0      	b.n	738 <sd_mmc_check+0x40>
     9d6:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     9d8:	4e2e      	ldr	r6, [pc, #184]	; (a94 <sd_mmc_check+0x39c>)
     9da:	a805      	add	r0, sp, #20
     9dc:	47b0      	blx	r6
     9de:	2800      	cmp	r0, #0
     9e0:	d100      	bne.n	9e4 <sd_mmc_check+0x2ec>
     9e2:	e6a9      	b.n	738 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     9e4:	3501      	adds	r5, #1
     9e6:	b2ad      	uxth	r5, r5
     9e8:	2d32      	cmp	r5, #50	; 0x32
     9ea:	d1f6      	bne.n	9da <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     9ec:	4b12      	ldr	r3, [pc, #72]	; (a38 <sd_mmc_check+0x340>)
     9ee:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     9f0:	7e8a      	ldrb	r2, [r1, #26]
     9f2:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     9f4:	7e4b      	ldrb	r3, [r1, #25]
     9f6:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     9f8:	7e09      	ldrb	r1, [r1, #24]
     9fa:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     9fc:	430b      	orrs	r3, r1
     9fe:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     a00:	051b      	lsls	r3, r3, #20
     a02:	0d1b      	lsrs	r3, r3, #20
     a04:	4a21      	ldr	r2, [pc, #132]	; (a8c <sd_mmc_check+0x394>)
     a06:	4293      	cmp	r3, r2
     a08:	d154      	bne.n	ab4 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     a0a:	4e22      	ldr	r6, [pc, #136]	; (a94 <sd_mmc_check+0x39c>)
     a0c:	a806      	add	r0, sp, #24
     a0e:	47b0      	blx	r6
     a10:	2800      	cmp	r0, #0
     a12:	d100      	bne.n	a16 <sd_mmc_check+0x31e>
     a14:	e690      	b.n	738 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     a16:	3501      	adds	r5, #1
     a18:	b2ad      	uxth	r5, r5
     a1a:	2d35      	cmp	r5, #53	; 0x35
     a1c:	d9f6      	bls.n	a0c <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     a1e:	4b06      	ldr	r3, [pc, #24]	; (a38 <sd_mmc_check+0x340>)
     a20:	681a      	ldr	r2, [r3, #0]
     a22:	9b06      	ldr	r3, [sp, #24]
     a24:	085b      	lsrs	r3, r3, #1
     a26:	6053      	str	r3, [r2, #4]
     a28:	e044      	b.n	ab4 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     a2a:	2314      	movs	r3, #20
     a2c:	7413      	strb	r3, [r2, #16]
     a2e:	e797      	b.n	960 <sd_mmc_check+0x268>
     a30:	000004ed 	.word	0x000004ed
     a34:	000006bd 	.word	0x000006bd
     a38:	2000017c 	.word	0x2000017c
     a3c:	00005d61 	.word	0x00005d61
     a40:	00005f29 	.word	0x00005f29
     a44:	00005508 	.word	0x00005508
     a48:	00001110 	.word	0x00001110
     a4c:	00000639 	.word	0x00000639
     a50:	000004c1 	.word	0x000004c1
     a54:	00005f41 	.word	0x00005f41
     a58:	0000053a 	.word	0x0000053a
     a5c:	00001bef 	.word	0x00001bef
     a60:	00001101 	.word	0x00001101
     a64:	0000113b 	.word	0x0000113b
     a68:	00000671 	.word	0x00000671
     a6c:	0000757c 	.word	0x0000757c
     a70:	00007598 	.word	0x00007598
     a74:	00001137 	.word	0x00001137
     a78:	00081133 	.word	0x00081133
     a7c:	00005d99 	.word	0x00005d99
     a80:	00005fc5 	.word	0x00005fc5
     a84:	00006051 	.word	0x00006051
     a88:	0000753c 	.word	0x0000753c
     a8c:	00000fff 	.word	0x00000fff
     a90:	00081108 	.word	0x00081108
     a94:	00005f4d 	.word	0x00005f4d
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     a98:	2322      	movs	r3, #34	; 0x22
     a9a:	7413      	strb	r3, [r2, #16]
     a9c:	e760      	b.n	960 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     a9e:	2330      	movs	r3, #48	; 0x30
     aa0:	7413      	strb	r3, [r2, #16]
     aa2:	e75d      	b.n	960 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     aa4:	a806      	add	r0, sp, #24
     aa6:	4b36      	ldr	r3, [pc, #216]	; (b80 <sd_mmc_check+0x488>)
     aa8:	4798      	blx	r3
     aaa:	2800      	cmp	r0, #0
     aac:	d100      	bne.n	ab0 <sd_mmc_check+0x3b8>
     aae:	e643      	b.n	738 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     ab0:	3501      	adds	r5, #1
     ab2:	b2ad      	uxth	r5, r5
     ab4:	2d7f      	cmp	r5, #127	; 0x7f
     ab6:	d9f5      	bls.n	aa4 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     ab8:	2180      	movs	r1, #128	; 0x80
     aba:	0089      	lsls	r1, r1, #2
     abc:	4831      	ldr	r0, [pc, #196]	; (b84 <sd_mmc_check+0x48c>)
     abe:	4b32      	ldr	r3, [pc, #200]	; (b88 <sd_mmc_check+0x490>)
     ac0:	4798      	blx	r3
     ac2:	2800      	cmp	r0, #0
     ac4:	d100      	bne.n	ac8 <sd_mmc_check+0x3d0>
     ac6:	e637      	b.n	738 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     ac8:	4b30      	ldr	r3, [pc, #192]	; (b8c <sd_mmc_check+0x494>)
     aca:	4798      	blx	r3
     acc:	2800      	cmp	r0, #0
     ace:	d100      	bne.n	ad2 <sd_mmc_check+0x3da>
     ad0:	e632      	b.n	738 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     ad2:	4b2f      	ldr	r3, [pc, #188]	; (b90 <sd_mmc_check+0x498>)
     ad4:	4798      	blx	r3
     ad6:	e65e      	b.n	796 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     ad8:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     ada:	7e93      	ldrb	r3, [r2, #26]
     adc:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     ade:	7e51      	ldrb	r1, [r2, #25]
     ae0:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     ae2:	430b      	orrs	r3, r1
     ae4:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     ae6:	029b      	lsls	r3, r3, #10
				* 512;
     ae8:	085b      	lsrs	r3, r3, #1
     aea:	2180      	movs	r1, #128	; 0x80
     aec:	0089      	lsls	r1, r1, #2
     aee:	468c      	mov	ip, r1
     af0:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     af2:	6053      	str	r3, [r2, #4]
     af4:	e6cd      	b.n	892 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     af6:	4b27      	ldr	r3, [pc, #156]	; (b94 <sd_mmc_check+0x49c>)
     af8:	681b      	ldr	r3, [r3, #0]
     afa:	2210      	movs	r2, #16
     afc:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     afe:	4b25      	ldr	r3, [pc, #148]	; (b94 <sd_mmc_check+0x49c>)
     b00:	681b      	ldr	r3, [r3, #0]
     b02:	7bdb      	ldrb	r3, [r3, #15]
     b04:	2209      	movs	r2, #9
     b06:	4013      	ands	r3, r2
     b08:	2b01      	cmp	r3, #1
     b0a:	d000      	beq.n	b0e <sd_mmc_check+0x416>
     b0c:	e638      	b.n	780 <sd_mmc_check+0x88>
     b0e:	e630      	b.n	772 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     b10:	4b20      	ldr	r3, [pc, #128]	; (b94 <sd_mmc_check+0x49c>)
     b12:	681b      	ldr	r3, [r3, #0]
     b14:	221a      	movs	r2, #26
     b16:	741a      	strb	r2, [r3, #16]
     b18:	e7f1      	b.n	afe <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b1a:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     b1c:	789b      	ldrb	r3, [r3, #2]
     b1e:	09db      	lsrs	r3, r3, #7
     b20:	2b01      	cmp	r3, #1
     b22:	d104      	bne.n	b2e <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     b24:	4b1b      	ldr	r3, [pc, #108]	; (b94 <sd_mmc_check+0x49c>)
     b26:	681b      	ldr	r3, [r3, #0]
     b28:	2230      	movs	r2, #48	; 0x30
     b2a:	741a      	strb	r2, [r3, #16]
     b2c:	e7e7      	b.n	afe <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     b2e:	4b19      	ldr	r3, [pc, #100]	; (b94 <sd_mmc_check+0x49c>)
     b30:	681b      	ldr	r3, [r3, #0]
     b32:	2220      	movs	r2, #32
     b34:	741a      	strb	r2, [r3, #16]
     b36:	e7e2      	b.n	afe <sd_mmc_check+0x406>
	*v2 = 0;
     b38:	2600      	movs	r6, #0
     b3a:	e60d      	b.n	758 <sd_mmc_check+0x60>
     b3c:	1e73      	subs	r3, r6, #1
     b3e:	419e      	sbcs	r6, r3
     b40:	07b3      	lsls	r3, r6, #30
     b42:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     b44:	4d14      	ldr	r5, [pc, #80]	; (b98 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     b46:	4f10      	ldr	r7, [pc, #64]	; (b88 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     b48:	46b8      	mov	r8, r7
		resp = driver_get_response();
     b4a:	4e14      	ldr	r6, [pc, #80]	; (b9c <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     b4c:	2100      	movs	r1, #0
     b4e:	4814      	ldr	r0, [pc, #80]	; (ba0 <sd_mmc_check+0x4a8>)
     b50:	47b8      	blx	r7
     b52:	2800      	cmp	r0, #0
     b54:	d100      	bne.n	b58 <sd_mmc_check+0x460>
     b56:	e638      	b.n	7ca <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     b58:	9903      	ldr	r1, [sp, #12]
     b5a:	4812      	ldr	r0, [pc, #72]	; (ba4 <sd_mmc_check+0x4ac>)
     b5c:	47c0      	blx	r8
     b5e:	2800      	cmp	r0, #0
     b60:	d100      	bne.n	b64 <sd_mmc_check+0x46c>
     b62:	e632      	b.n	7ca <sd_mmc_check+0xd2>
		resp = driver_get_response();
     b64:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     b66:	07c3      	lsls	r3, r0, #31
     b68:	d400      	bmi.n	b6c <sd_mmc_check+0x474>
     b6a:	e628      	b.n	7be <sd_mmc_check+0xc6>
     b6c:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     b6e:	2d00      	cmp	r5, #0
     b70:	d1ec      	bne.n	b4c <sd_mmc_check+0x454>
     b72:	e62a      	b.n	7ca <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     b74:	2209      	movs	r2, #9
     b76:	4013      	ands	r3, r2
     b78:	2b01      	cmp	r3, #1
     b7a:	d000      	beq.n	b7e <sd_mmc_check+0x486>
     b7c:	e609      	b.n	792 <sd_mmc_check+0x9a>
     b7e:	e5f8      	b.n	772 <sd_mmc_check+0x7a>
     b80:	00005f4d 	.word	0x00005f4d
     b84:	00001110 	.word	0x00001110
     b88:	00005f29 	.word	0x00005f29
     b8c:	00000639 	.word	0x00000639
     b90:	000004c1 	.word	0x000004c1
     b94:	2000017c 	.word	0x2000017c
     b98:	00001bef 	.word	0x00001bef
     b9c:	00005f41 	.word	0x00005f41
     ba0:	00001137 	.word	0x00001137
     ba4:	00001129 	.word	0x00001129

00000ba8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     ba8:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     baa:	4b06      	ldr	r3, [pc, #24]	; (bc4 <sd_mmc_get_type+0x1c>)
     bac:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     bae:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     bb0:	2800      	cmp	r0, #0
     bb2:	d001      	beq.n	bb8 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     bb4:	0018      	movs	r0, r3
     bb6:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     bb8:	4b03      	ldr	r3, [pc, #12]	; (bc8 <sd_mmc_get_type+0x20>)
     bba:	4798      	blx	r3
	return sd_mmc_card->type;
     bbc:	4b03      	ldr	r3, [pc, #12]	; (bcc <sd_mmc_get_type+0x24>)
     bbe:	681b      	ldr	r3, [r3, #0]
     bc0:	7bdb      	ldrb	r3, [r3, #15]
     bc2:	e7f7      	b.n	bb4 <sd_mmc_get_type+0xc>
     bc4:	000004ed 	.word	0x000004ed
     bc8:	000006bd 	.word	0x000006bd
     bcc:	2000017c 	.word	0x2000017c

00000bd0 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     bd0:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     bd2:	4b06      	ldr	r3, [pc, #24]	; (bec <sd_mmc_get_capacity+0x1c>)
     bd4:	4798      	blx	r3
		return 0;
     bd6:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     bd8:	2800      	cmp	r0, #0
     bda:	d001      	beq.n	be0 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     bdc:	0018      	movs	r0, r3
     bde:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     be0:	4b03      	ldr	r3, [pc, #12]	; (bf0 <sd_mmc_get_capacity+0x20>)
     be2:	4798      	blx	r3
	return sd_mmc_card->capacity;
     be4:	4b03      	ldr	r3, [pc, #12]	; (bf4 <sd_mmc_get_capacity+0x24>)
     be6:	681b      	ldr	r3, [r3, #0]
     be8:	685b      	ldr	r3, [r3, #4]
     bea:	e7f7      	b.n	bdc <sd_mmc_get_capacity+0xc>
     bec:	000004ed 	.word	0x000004ed
     bf0:	000006bd 	.word	0x000006bd
     bf4:	2000017c 	.word	0x2000017c

00000bf8 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     bf8:	2000      	movs	r0, #0
     bfa:	4770      	bx	lr

00000bfc <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     bfc:	b570      	push	{r4, r5, r6, lr}
     bfe:	b082      	sub	sp, #8
     c00:	000e      	movs	r6, r1
     c02:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     c04:	4b16      	ldr	r3, [pc, #88]	; (c60 <sd_mmc_init_read_blocks+0x64>)
     c06:	4798      	blx	r3
     c08:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     c0a:	d002      	beq.n	c12 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     c0c:	0020      	movs	r0, r4
     c0e:	b002      	add	sp, #8
     c10:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     c12:	4b14      	ldr	r3, [pc, #80]	; (c64 <sd_mmc_init_read_blocks+0x68>)
     c14:	4798      	blx	r3
     c16:	2800      	cmp	r0, #0
     c18:	d017      	beq.n	c4a <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     c1a:	2d01      	cmp	r5, #1
     c1c:	d919      	bls.n	c52 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     c1e:	4812      	ldr	r0, [pc, #72]	; (c68 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     c20:	4b12      	ldr	r3, [pc, #72]	; (c6c <sd_mmc_init_read_blocks+0x70>)
     c22:	681b      	ldr	r3, [r3, #0]
     c24:	7bdb      	ldrb	r3, [r3, #15]
     c26:	071b      	lsls	r3, r3, #28
     c28:	d400      	bmi.n	c2c <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     c2a:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     c2c:	2301      	movs	r3, #1
     c2e:	9300      	str	r3, [sp, #0]
     c30:	002b      	movs	r3, r5
     c32:	2280      	movs	r2, #128	; 0x80
     c34:	0092      	lsls	r2, r2, #2
     c36:	0031      	movs	r1, r6
     c38:	4e0d      	ldr	r6, [pc, #52]	; (c70 <sd_mmc_init_read_blocks+0x74>)
     c3a:	47b0      	blx	r6
     c3c:	2800      	cmp	r0, #0
     c3e:	d00a      	beq.n	c56 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     c40:	4b0c      	ldr	r3, [pc, #48]	; (c74 <sd_mmc_init_read_blocks+0x78>)
     c42:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     c44:	4b0c      	ldr	r3, [pc, #48]	; (c78 <sd_mmc_init_read_blocks+0x7c>)
     c46:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     c48:	e7e0      	b.n	c0c <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     c4a:	4b0c      	ldr	r3, [pc, #48]	; (c7c <sd_mmc_init_read_blocks+0x80>)
     c4c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     c4e:	3405      	adds	r4, #5
     c50:	e7dc      	b.n	c0c <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     c52:	480b      	ldr	r0, [pc, #44]	; (c80 <sd_mmc_init_read_blocks+0x84>)
     c54:	e7e4      	b.n	c20 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     c56:	4b09      	ldr	r3, [pc, #36]	; (c7c <sd_mmc_init_read_blocks+0x80>)
     c58:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     c5a:	2405      	movs	r4, #5
     c5c:	e7d6      	b.n	c0c <sd_mmc_init_read_blocks+0x10>
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	000004ed 	.word	0x000004ed
     c64:	00000639 	.word	0x00000639
     c68:	00101112 	.word	0x00101112
     c6c:	2000017c 	.word	0x2000017c
     c70:	00005d99 	.word	0x00005d99
     c74:	20000180 	.word	0x20000180
     c78:	20000182 	.word	0x20000182
     c7c:	000006bd 	.word	0x000006bd
     c80:	00081111 	.word	0x00081111

00000c84 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     c84:	b510      	push	{r4, lr}
     c86:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     c88:	4b07      	ldr	r3, [pc, #28]	; (ca8 <sd_mmc_start_read_blocks+0x24>)
     c8a:	4798      	blx	r3
     c8c:	2800      	cmp	r0, #0
     c8e:	d104      	bne.n	c9a <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     c90:	2200      	movs	r2, #0
     c92:	4b06      	ldr	r3, [pc, #24]	; (cac <sd_mmc_start_read_blocks+0x28>)
     c94:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     c96:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     c98:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     c9a:	4a04      	ldr	r2, [pc, #16]	; (cac <sd_mmc_start_read_blocks+0x28>)
     c9c:	8813      	ldrh	r3, [r2, #0]
     c9e:	1b1c      	subs	r4, r3, r4
     ca0:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     ca2:	2000      	movs	r0, #0
     ca4:	e7f8      	b.n	c98 <sd_mmc_start_read_blocks+0x14>
     ca6:	46c0      	nop			; (mov r8, r8)
     ca8:	00005fc5 	.word	0x00005fc5
     cac:	20000180 	.word	0x20000180

00000cb0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     cb0:	b510      	push	{r4, lr}
     cb2:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     cb4:	4b14      	ldr	r3, [pc, #80]	; (d08 <sd_mmc_wait_end_of_read_blocks+0x58>)
     cb6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     cb8:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     cba:	2800      	cmp	r0, #0
     cbc:	d101      	bne.n	cc2 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     cbe:	0018      	movs	r0, r3
     cc0:	bd10      	pop	{r4, pc}
	if (abort) {
     cc2:	2c00      	cmp	r4, #0
     cc4:	d010      	beq.n	ce8 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     cc6:	2200      	movs	r2, #0
     cc8:	4b10      	ldr	r3, [pc, #64]	; (d0c <sd_mmc_wait_end_of_read_blocks+0x5c>)
     cca:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     ccc:	4b10      	ldr	r3, [pc, #64]	; (d10 <sd_mmc_wait_end_of_read_blocks+0x60>)
     cce:	881b      	ldrh	r3, [r3, #0]
     cd0:	2b01      	cmp	r3, #1
     cd2:	d00f      	beq.n	cf4 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     cd4:	2100      	movs	r1, #0
     cd6:	480f      	ldr	r0, [pc, #60]	; (d14 <sd_mmc_wait_end_of_read_blocks+0x64>)
     cd8:	4b0f      	ldr	r3, [pc, #60]	; (d18 <sd_mmc_wait_end_of_read_blocks+0x68>)
     cda:	4798      	blx	r3
     cdc:	2800      	cmp	r0, #0
     cde:	d00d      	beq.n	cfc <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     ce0:	4b0e      	ldr	r3, [pc, #56]	; (d1c <sd_mmc_wait_end_of_read_blocks+0x6c>)
     ce2:	4798      	blx	r3
	return SD_MMC_OK;
     ce4:	2300      	movs	r3, #0
     ce6:	e7ea      	b.n	cbe <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     ce8:	4b08      	ldr	r3, [pc, #32]	; (d0c <sd_mmc_wait_end_of_read_blocks+0x5c>)
     cea:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     cec:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     cee:	2a00      	cmp	r2, #0
     cf0:	d0ec      	beq.n	ccc <sd_mmc_wait_end_of_read_blocks+0x1c>
     cf2:	e7e4      	b.n	cbe <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     cf4:	4b09      	ldr	r3, [pc, #36]	; (d1c <sd_mmc_wait_end_of_read_blocks+0x6c>)
     cf6:	4798      	blx	r3
		return SD_MMC_OK;
     cf8:	2300      	movs	r3, #0
     cfa:	e7e0      	b.n	cbe <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     cfc:	2100      	movs	r1, #0
     cfe:	4805      	ldr	r0, [pc, #20]	; (d14 <sd_mmc_wait_end_of_read_blocks+0x64>)
     d00:	4b05      	ldr	r3, [pc, #20]	; (d18 <sd_mmc_wait_end_of_read_blocks+0x68>)
     d02:	4798      	blx	r3
     d04:	e7ec      	b.n	ce0 <sd_mmc_wait_end_of_read_blocks+0x30>
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	00006051 	.word	0x00006051
     d0c:	20000180 	.word	0x20000180
     d10:	20000182 	.word	0x20000182
     d14:	0000310c 	.word	0x0000310c
     d18:	00005f29 	.word	0x00005f29
     d1c:	000006bd 	.word	0x000006bd

00000d20 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     d20:	b570      	push	{r4, r5, r6, lr}
     d22:	b082      	sub	sp, #8
     d24:	000e      	movs	r6, r1
     d26:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     d28:	4b11      	ldr	r3, [pc, #68]	; (d70 <sd_mmc_init_write_blocks+0x50>)
     d2a:	4798      	blx	r3
     d2c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     d2e:	d116      	bne.n	d5e <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     d30:	2d01      	cmp	r5, #1
     d32:	d917      	bls.n	d64 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     d34:	480f      	ldr	r0, [pc, #60]	; (d74 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     d36:	4b10      	ldr	r3, [pc, #64]	; (d78 <sd_mmc_init_write_blocks+0x58>)
     d38:	681b      	ldr	r3, [r3, #0]
     d3a:	7bdb      	ldrb	r3, [r3, #15]
     d3c:	071b      	lsls	r3, r3, #28
     d3e:	d400      	bmi.n	d42 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     d40:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     d42:	2301      	movs	r3, #1
     d44:	9300      	str	r3, [sp, #0]
     d46:	002b      	movs	r3, r5
     d48:	2280      	movs	r2, #128	; 0x80
     d4a:	0092      	lsls	r2, r2, #2
     d4c:	0031      	movs	r1, r6
     d4e:	4e0b      	ldr	r6, [pc, #44]	; (d7c <sd_mmc_init_write_blocks+0x5c>)
     d50:	47b0      	blx	r6
     d52:	2800      	cmp	r0, #0
     d54:	d008      	beq.n	d68 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     d56:	4b0a      	ldr	r3, [pc, #40]	; (d80 <sd_mmc_init_write_blocks+0x60>)
     d58:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     d5a:	4b0a      	ldr	r3, [pc, #40]	; (d84 <sd_mmc_init_write_blocks+0x64>)
     d5c:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     d5e:	0020      	movs	r0, r4
     d60:	b002      	add	sp, #8
     d62:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     d64:	4808      	ldr	r0, [pc, #32]	; (d88 <sd_mmc_init_write_blocks+0x68>)
     d66:	e7e6      	b.n	d36 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     d68:	4b08      	ldr	r3, [pc, #32]	; (d8c <sd_mmc_init_write_blocks+0x6c>)
     d6a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     d6c:	2405      	movs	r4, #5
     d6e:	e7f6      	b.n	d5e <sd_mmc_init_write_blocks+0x3e>
     d70:	000004ed 	.word	0x000004ed
     d74:	00109119 	.word	0x00109119
     d78:	2000017c 	.word	0x2000017c
     d7c:	00005d99 	.word	0x00005d99
     d80:	20000180 	.word	0x20000180
     d84:	20000182 	.word	0x20000182
     d88:	00089118 	.word	0x00089118
     d8c:	000006bd 	.word	0x000006bd

00000d90 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     d90:	b510      	push	{r4, lr}
     d92:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     d94:	4b07      	ldr	r3, [pc, #28]	; (db4 <sd_mmc_start_write_blocks+0x24>)
     d96:	4798      	blx	r3
     d98:	2800      	cmp	r0, #0
     d9a:	d104      	bne.n	da6 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     d9c:	2200      	movs	r2, #0
     d9e:	4b06      	ldr	r3, [pc, #24]	; (db8 <sd_mmc_start_write_blocks+0x28>)
     da0:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     da2:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     da4:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     da6:	4a04      	ldr	r2, [pc, #16]	; (db8 <sd_mmc_start_write_blocks+0x28>)
     da8:	8813      	ldrh	r3, [r2, #0]
     daa:	1b1c      	subs	r4, r3, r4
     dac:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     dae:	2000      	movs	r0, #0
     db0:	e7f8      	b.n	da4 <sd_mmc_start_write_blocks+0x14>
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	00006055 	.word	0x00006055
     db8:	20000180 	.word	0x20000180

00000dbc <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     dbc:	b510      	push	{r4, lr}
     dbe:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     dc0:	4b0e      	ldr	r3, [pc, #56]	; (dfc <sd_mmc_wait_end_of_write_blocks+0x40>)
     dc2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     dc4:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     dc6:	2800      	cmp	r0, #0
     dc8:	d101      	bne.n	dce <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     dca:	0018      	movs	r0, r3
     dcc:	bd10      	pop	{r4, pc}
	if (abort) {
     dce:	2c00      	cmp	r4, #0
     dd0:	d00a      	beq.n	de8 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     dd2:	2200      	movs	r2, #0
     dd4:	4b0a      	ldr	r3, [pc, #40]	; (e00 <sd_mmc_wait_end_of_write_blocks+0x44>)
     dd6:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     dd8:	4b0a      	ldr	r3, [pc, #40]	; (e04 <sd_mmc_wait_end_of_write_blocks+0x48>)
     dda:	881b      	ldrh	r3, [r3, #0]
     ddc:	2b01      	cmp	r3, #1
     dde:	d009      	beq.n	df4 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     de0:	4b09      	ldr	r3, [pc, #36]	; (e08 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     de2:	4798      	blx	r3
	return SD_MMC_OK;
     de4:	2300      	movs	r3, #0
     de6:	e7f0      	b.n	dca <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     de8:	4b05      	ldr	r3, [pc, #20]	; (e00 <sd_mmc_wait_end_of_write_blocks+0x44>)
     dea:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     dec:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     dee:	2a00      	cmp	r2, #0
     df0:	d0f2      	beq.n	dd8 <sd_mmc_wait_end_of_write_blocks+0x1c>
     df2:	e7ea      	b.n	dca <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     df4:	4b04      	ldr	r3, [pc, #16]	; (e08 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     df6:	4798      	blx	r3
		return SD_MMC_OK;
     df8:	2300      	movs	r3, #0
     dfa:	e7e6      	b.n	dca <sd_mmc_wait_end_of_write_blocks+0xe>
     dfc:	000060d5 	.word	0x000060d5
     e00:	20000180 	.word	0x20000180
     e04:	20000182 	.word	0x20000182
     e08:	000006bd 	.word	0x000006bd

00000e0c <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
     e0c:	2000      	movs	r0, #0
     e0e:	4770      	bx	lr

00000e10 <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
     e10:	1e43      	subs	r3, r0, #1
     e12:	4198      	sbcs	r0, r3
     e14:	b2c0      	uxtb	r0, r0
     e16:	4b03      	ldr	r3, [pc, #12]	; (e24 <udi_msc_trans_ack+0x14>)
     e18:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
     e1a:	2201      	movs	r2, #1
     e1c:	4b02      	ldr	r3, [pc, #8]	; (e28 <udi_msc_trans_ack+0x18>)
     e1e:	701a      	strb	r2, [r3, #0]
}
     e20:	4770      	bx	lr
     e22:	46c0      	nop			; (mov r8, r8)
     e24:	200002f0 	.word	0x200002f0
     e28:	20000044 	.word	0x20000044

00000e2c <udi_msc_cbw_wait>:
{
     e2c:	b510      	push	{r4, lr}
     e2e:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     e30:	4b08      	ldr	r3, [pc, #32]	; (e54 <udi_msc_cbw_wait+0x28>)
     e32:	9300      	str	r3, [sp, #0]
     e34:	231f      	movs	r3, #31
     e36:	4a08      	ldr	r2, [pc, #32]	; (e58 <udi_msc_cbw_wait+0x2c>)
     e38:	2101      	movs	r1, #1
     e3a:	2002      	movs	r0, #2
     e3c:	4c07      	ldr	r4, [pc, #28]	; (e5c <udi_msc_cbw_wait+0x30>)
     e3e:	47a0      	blx	r4
     e40:	2800      	cmp	r0, #0
     e42:	d001      	beq.n	e48 <udi_msc_cbw_wait+0x1c>
}
     e44:	b002      	add	sp, #8
     e46:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
     e48:	4905      	ldr	r1, [pc, #20]	; (e60 <udi_msc_cbw_wait+0x34>)
     e4a:	3002      	adds	r0, #2
     e4c:	4b05      	ldr	r3, [pc, #20]	; (e64 <udi_msc_cbw_wait+0x38>)
     e4e:	4798      	blx	r3
}
     e50:	e7f8      	b.n	e44 <udi_msc_cbw_wait+0x18>
     e52:	46c0      	nop			; (mov r8, r8)
     e54:	00001251 	.word	0x00001251
     e58:	200001ac 	.word	0x200001ac
     e5c:	00003299 	.word	0x00003299
     e60:	00000e2d 	.word	0x00000e2d
     e64:	00003241 	.word	0x00003241

00000e68 <udi_msc_enable>:
{
     e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_msc_b_trans_req = false;
     e6a:	2300      	movs	r3, #0
     e6c:	4a13      	ldr	r2, [pc, #76]	; (ebc <udi_msc_enable+0x54>)
     e6e:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
     e70:	4a13      	ldr	r2, [pc, #76]	; (ec0 <udi_msc_enable+0x58>)
     e72:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
     e74:	3301      	adds	r3, #1
     e76:	4a13      	ldr	r2, [pc, #76]	; (ec4 <udi_msc_enable+0x5c>)
     e78:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
     e7a:	4a13      	ldr	r2, [pc, #76]	; (ec8 <udi_msc_enable+0x60>)
     e7c:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
     e7e:	4b13      	ldr	r3, [pc, #76]	; (ecc <udi_msc_enable+0x64>)
     e80:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
     e82:	2800      	cmp	r0, #0
     e84:	d105      	bne.n	e92 <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
     e86:	2200      	movs	r2, #0
     e88:	4b11      	ldr	r3, [pc, #68]	; (ed0 <udi_msc_enable+0x68>)
     e8a:	701a      	strb	r2, [r3, #0]
		return false; // No lun available, then not authorize to enable interface
     e8c:	2500      	movs	r5, #0
}
     e8e:	0028      	movs	r0, r5
     e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_nb_lun--;
     e92:	3801      	subs	r0, #1
     e94:	4b0e      	ldr	r3, [pc, #56]	; (ed0 <udi_msc_enable+0x68>)
     e96:	7018      	strb	r0, [r3, #0]
	if (!UDI_MSC_ENABLE_EXT())
     e98:	4b0e      	ldr	r3, [pc, #56]	; (ed4 <udi_msc_enable+0x6c>)
     e9a:	4798      	blx	r3
     e9c:	1e05      	subs	r5, r0, #0
     e9e:	d0f6      	beq.n	e8e <udi_msc_enable+0x26>
     ea0:	2400      	movs	r4, #0
		mem_unload(lun, false);
     ea2:	4f0d      	ldr	r7, [pc, #52]	; (ed8 <udi_msc_enable+0x70>)
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
     ea4:	4e0a      	ldr	r6, [pc, #40]	; (ed0 <udi_msc_enable+0x68>)
		mem_unload(lun, false);
     ea6:	2100      	movs	r1, #0
     ea8:	0020      	movs	r0, r4
     eaa:	47b8      	blx	r7
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
     eac:	3401      	adds	r4, #1
     eae:	b2e4      	uxtb	r4, r4
     eb0:	7833      	ldrb	r3, [r6, #0]
     eb2:	42a3      	cmp	r3, r4
     eb4:	d2f7      	bcs.n	ea6 <udi_msc_enable+0x3e>
	udi_msc_cbw_wait();
     eb6:	4b09      	ldr	r3, [pc, #36]	; (edc <udi_msc_enable+0x74>)
     eb8:	4798      	blx	r3
	return true;
     eba:	e7e8      	b.n	e8e <udi_msc_enable+0x26>
     ebc:	200001a2 	.word	0x200001a2
     ec0:	200001a0 	.word	0x200001a0
     ec4:	20000044 	.word	0x20000044
     ec8:	20000045 	.word	0x20000045
     ecc:	000060f9 	.word	0x000060f9
     ed0:	200001d0 	.word	0x200001d0
     ed4:	00003945 	.word	0x00003945
     ed8:	00006131 	.word	0x00006131
     edc:	00000e2d 	.word	0x00000e2d

00000ee0 <udi_msc_csw_sent>:
{
     ee0:	b510      	push	{r4, lr}
	udi_msc_cbw_wait();
     ee2:	4b01      	ldr	r3, [pc, #4]	; (ee8 <udi_msc_csw_sent+0x8>)
     ee4:	4798      	blx	r3
}
     ee6:	bd10      	pop	{r4, pc}
     ee8:	00000e2d 	.word	0x00000e2d

00000eec <udi_msc_csw_send>:
{
     eec:	b510      	push	{r4, lr}
     eee:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     ef0:	4b08      	ldr	r3, [pc, #32]	; (f14 <udi_msc_csw_send+0x28>)
     ef2:	9300      	str	r3, [sp, #0]
     ef4:	230d      	movs	r3, #13
     ef6:	4a08      	ldr	r2, [pc, #32]	; (f18 <udi_msc_csw_send+0x2c>)
     ef8:	2100      	movs	r1, #0
     efa:	2081      	movs	r0, #129	; 0x81
     efc:	4c07      	ldr	r4, [pc, #28]	; (f1c <udi_msc_csw_send+0x30>)
     efe:	47a0      	blx	r4
     f00:	2800      	cmp	r0, #0
     f02:	d001      	beq.n	f08 <udi_msc_csw_send+0x1c>
}
     f04:	b002      	add	sp, #8
     f06:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     f08:	4905      	ldr	r1, [pc, #20]	; (f20 <udi_msc_csw_send+0x34>)
     f0a:	3081      	adds	r0, #129	; 0x81
     f0c:	4b05      	ldr	r3, [pc, #20]	; (f24 <udi_msc_csw_send+0x38>)
     f0e:	4798      	blx	r3
}
     f10:	e7f8      	b.n	f04 <udi_msc_csw_send+0x18>
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	00000ee1 	.word	0x00000ee1
     f18:	20000048 	.word	0x20000048
     f1c:	00003299 	.word	0x00003299
     f20:	00000eed 	.word	0x00000eed
     f24:	00003241 	.word	0x00003241

00000f28 <udi_msc_cbw_invalid>:
{
     f28:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
     f2a:	4b06      	ldr	r3, [pc, #24]	; (f44 <udi_msc_cbw_invalid+0x1c>)
     f2c:	781b      	ldrb	r3, [r3, #0]
     f2e:	2b00      	cmp	r3, #0
     f30:	d100      	bne.n	f34 <udi_msc_cbw_invalid+0xc>
}
     f32:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_OUT);
     f34:	2002      	movs	r0, #2
     f36:	4b04      	ldr	r3, [pc, #16]	; (f48 <udi_msc_cbw_invalid+0x20>)
     f38:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
     f3a:	4904      	ldr	r1, [pc, #16]	; (f4c <udi_msc_cbw_invalid+0x24>)
     f3c:	2002      	movs	r0, #2
     f3e:	4b04      	ldr	r3, [pc, #16]	; (f50 <udi_msc_cbw_invalid+0x28>)
     f40:	4798      	blx	r3
     f42:	e7f6      	b.n	f32 <udi_msc_cbw_invalid+0xa>
     f44:	200001a0 	.word	0x200001a0
     f48:	000030cd 	.word	0x000030cd
     f4c:	00000f29 	.word	0x00000f29
     f50:	00003241 	.word	0x00003241

00000f54 <udi_msc_csw_invalid>:
{
     f54:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
     f56:	4b06      	ldr	r3, [pc, #24]	; (f70 <udi_msc_csw_invalid+0x1c>)
     f58:	781b      	ldrb	r3, [r3, #0]
     f5a:	2b00      	cmp	r3, #0
     f5c:	d100      	bne.n	f60 <udi_msc_csw_invalid+0xc>
}
     f5e:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_IN);
     f60:	2081      	movs	r0, #129	; 0x81
     f62:	4b04      	ldr	r3, [pc, #16]	; (f74 <udi_msc_csw_invalid+0x20>)
     f64:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
     f66:	4904      	ldr	r1, [pc, #16]	; (f78 <udi_msc_csw_invalid+0x24>)
     f68:	2081      	movs	r0, #129	; 0x81
     f6a:	4b04      	ldr	r3, [pc, #16]	; (f7c <udi_msc_csw_invalid+0x28>)
     f6c:	4798      	blx	r3
     f6e:	e7f6      	b.n	f5e <udi_msc_csw_invalid+0xa>
     f70:	200001a0 	.word	0x200001a0
     f74:	000030cd 	.word	0x000030cd
     f78:	00000f55 	.word	0x00000f55
     f7c:	00003241 	.word	0x00003241

00000f80 <udi_msc_csw_process>:
{
     f80:	b510      	push	{r4, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
     f82:	4b0b      	ldr	r3, [pc, #44]	; (fb0 <udi_msc_csw_process+0x30>)
     f84:	689b      	ldr	r3, [r3, #8]
     f86:	2b00      	cmp	r3, #0
     f88:	d006      	beq.n	f98 <udi_msc_csw_process+0x18>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     f8a:	4b0a      	ldr	r3, [pc, #40]	; (fb4 <udi_msc_csw_process+0x34>)
     f8c:	7b1b      	ldrb	r3, [r3, #12]
     f8e:	2b7f      	cmp	r3, #127	; 0x7f
     f90:	d809      	bhi.n	fa6 <udi_msc_csw_process+0x26>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     f92:	2002      	movs	r0, #2
     f94:	4b08      	ldr	r3, [pc, #32]	; (fb8 <udi_msc_csw_process+0x38>)
     f96:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     f98:	4b06      	ldr	r3, [pc, #24]	; (fb4 <udi_msc_csw_process+0x34>)
     f9a:	685a      	ldr	r2, [r3, #4]
     f9c:	4b04      	ldr	r3, [pc, #16]	; (fb0 <udi_msc_csw_process+0x30>)
     f9e:	605a      	str	r2, [r3, #4]
	udi_msc_csw_send();
     fa0:	4b06      	ldr	r3, [pc, #24]	; (fbc <udi_msc_csw_process+0x3c>)
     fa2:	4798      	blx	r3
}
     fa4:	bd10      	pop	{r4, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
     fa6:	2081      	movs	r0, #129	; 0x81
     fa8:	4b03      	ldr	r3, [pc, #12]	; (fb8 <udi_msc_csw_process+0x38>)
     faa:	4798      	blx	r3
     fac:	e7f4      	b.n	f98 <udi_msc_csw_process+0x18>
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	20000048 	.word	0x20000048
     fb4:	200001ac 	.word	0x200001ac
     fb8:	000030cd 	.word	0x000030cd
     fbc:	00000eed 	.word	0x00000eed

00000fc0 <udi_msc_clear_sense>:
{
     fc0:	b510      	push	{r4, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     fc2:	4c05      	ldr	r4, [pc, #20]	; (fd8 <udi_msc_clear_sense+0x18>)
     fc4:	2212      	movs	r2, #18
     fc6:	2100      	movs	r1, #0
     fc8:	0020      	movs	r0, r4
     fca:	4b04      	ldr	r3, [pc, #16]	; (fdc <udi_msc_clear_sense+0x1c>)
     fcc:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     fce:	23f0      	movs	r3, #240	; 0xf0
     fd0:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     fd2:	3be6      	subs	r3, #230	; 0xe6
     fd4:	71e3      	strb	r3, [r4, #7]
}
     fd6:	bd10      	pop	{r4, pc}
     fd8:	200001d4 	.word	0x200001d4
     fdc:	00006d53 	.word	0x00006d53

00000fe0 <udi_msc_sense_fail>:
{
     fe0:	b570      	push	{r4, r5, r6, lr}
     fe2:	0006      	movs	r6, r0
     fe4:	000d      	movs	r5, r1
     fe6:	0014      	movs	r4, r2
	udi_msc_clear_sense();
     fe8:	4b08      	ldr	r3, [pc, #32]	; (100c <udi_msc_sense_fail+0x2c>)
     fea:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     fec:	2201      	movs	r2, #1
     fee:	4b08      	ldr	r3, [pc, #32]	; (1010 <udi_msc_sense_fail+0x30>)
     ff0:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     ff2:	4b08      	ldr	r3, [pc, #32]	; (1014 <udi_msc_sense_fail+0x34>)
     ff4:	709e      	strb	r6, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
     ff6:	0e22      	lsrs	r2, r4, #24
     ff8:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
     ffa:	0c22      	lsrs	r2, r4, #16
     ffc:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
     ffe:	0a22      	lsrs	r2, r4, #8
    1000:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
    1002:	719c      	strb	r4, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    1004:	0a2a      	lsrs	r2, r5, #8
    1006:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
    1008:	735d      	strb	r5, [r3, #13]
}
    100a:	bd70      	pop	{r4, r5, r6, pc}
    100c:	00000fc1 	.word	0x00000fc1
    1010:	20000048 	.word	0x20000048
    1014:	200001d4 	.word	0x200001d4

00001018 <udi_msc_sense_fail_cdb_invalid>:
{
    1018:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    101a:	2200      	movs	r2, #0
    101c:	2190      	movs	r1, #144	; 0x90
    101e:	0189      	lsls	r1, r1, #6
    1020:	2005      	movs	r0, #5
    1022:	4b01      	ldr	r3, [pc, #4]	; (1028 <udi_msc_sense_fail_cdb_invalid+0x10>)
    1024:	4798      	blx	r3
}
    1026:	bd10      	pop	{r4, pc}
    1028:	00000fe1 	.word	0x00000fe1

0000102c <udi_msc_cbw_validate>:
{
    102c:	b510      	push	{r4, lr}
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    102e:	4b09      	ldr	r3, [pc, #36]	; (1054 <udi_msc_cbw_validate+0x28>)
    1030:	7b1b      	ldrb	r3, [r3, #12]
    1032:	4059      	eors	r1, r3
    1034:	b249      	sxtb	r1, r1
    1036:	2900      	cmp	r1, #0
    1038:	db04      	blt.n	1044 <udi_msc_cbw_validate+0x18>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    103a:	4b07      	ldr	r3, [pc, #28]	; (1058 <udi_msc_cbw_validate+0x2c>)
    103c:	689a      	ldr	r2, [r3, #8]
	return true;
    103e:	2301      	movs	r3, #1
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    1040:	4282      	cmp	r2, r0
    1042:	d204      	bcs.n	104e <udi_msc_cbw_validate+0x22>
		udi_msc_sense_fail_cdb_invalid();
    1044:	4b05      	ldr	r3, [pc, #20]	; (105c <udi_msc_cbw_validate+0x30>)
    1046:	4798      	blx	r3
		udi_msc_csw_process();
    1048:	4b05      	ldr	r3, [pc, #20]	; (1060 <udi_msc_cbw_validate+0x34>)
    104a:	4798      	blx	r3
		return false;
    104c:	2300      	movs	r3, #0
}
    104e:	0018      	movs	r0, r3
    1050:	bd10      	pop	{r4, pc}
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	200001ac 	.word	0x200001ac
    1058:	20000048 	.word	0x20000048
    105c:	00001019 	.word	0x00001019
    1060:	00000f81 	.word	0x00000f81

00001064 <udi_msc_sense_fail_hardware>:
{
    1064:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    1066:	2200      	movs	r2, #0
    1068:	2100      	movs	r1, #0
    106a:	2004      	movs	r0, #4
    106c:	4b01      	ldr	r3, [pc, #4]	; (1074 <udi_msc_sense_fail_hardware+0x10>)
    106e:	4798      	blx	r3
}
    1070:	bd10      	pop	{r4, pc}
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	00000fe1 	.word	0x00000fe1

00001078 <udi_msc_data_send>:
{
    1078:	b510      	push	{r4, lr}
    107a:	b082      	sub	sp, #8
    107c:	0002      	movs	r2, r0
    107e:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    1080:	4907      	ldr	r1, [pc, #28]	; (10a0 <udi_msc_data_send+0x28>)
    1082:	9100      	str	r1, [sp, #0]
    1084:	2101      	movs	r1, #1
    1086:	2081      	movs	r0, #129	; 0x81
    1088:	4c06      	ldr	r4, [pc, #24]	; (10a4 <udi_msc_data_send+0x2c>)
    108a:	47a0      	blx	r4
    108c:	2800      	cmp	r0, #0
    108e:	d001      	beq.n	1094 <udi_msc_data_send+0x1c>
}
    1090:	b002      	add	sp, #8
    1092:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_hardware();
    1094:	4b04      	ldr	r3, [pc, #16]	; (10a8 <udi_msc_data_send+0x30>)
    1096:	4798      	blx	r3
		udi_msc_csw_process();
    1098:	4b04      	ldr	r3, [pc, #16]	; (10ac <udi_msc_data_send+0x34>)
    109a:	4798      	blx	r3
}
    109c:	e7f8      	b.n	1090 <udi_msc_data_send+0x18>
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	000010f1 	.word	0x000010f1
    10a4:	00003299 	.word	0x00003299
    10a8:	00001065 	.word	0x00001065
    10ac:	00000f81 	.word	0x00000f81

000010b0 <udi_msc_sense_fail_busy_or_change>:
{
    10b0:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    10b2:	2200      	movs	r2, #0
    10b4:	21a0      	movs	r1, #160	; 0xa0
    10b6:	0189      	lsls	r1, r1, #6
    10b8:	2006      	movs	r0, #6
    10ba:	4b01      	ldr	r3, [pc, #4]	; (10c0 <udi_msc_sense_fail_busy_or_change+0x10>)
    10bc:	4798      	blx	r3
}
    10be:	bd10      	pop	{r4, pc}
    10c0:	00000fe1 	.word	0x00000fe1

000010c4 <udi_msc_sense_fail_not_present>:
{
    10c4:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    10c6:	2200      	movs	r2, #0
    10c8:	21e8      	movs	r1, #232	; 0xe8
    10ca:	0189      	lsls	r1, r1, #6
    10cc:	2002      	movs	r0, #2
    10ce:	4b01      	ldr	r3, [pc, #4]	; (10d4 <udi_msc_sense_fail_not_present+0x10>)
    10d0:	4798      	blx	r3
}
    10d2:	bd10      	pop	{r4, pc}
    10d4:	00000fe1 	.word	0x00000fe1

000010d8 <udi_msc_sense_pass>:
{
    10d8:	b510      	push	{r4, lr}
	udi_msc_clear_sense();
    10da:	4b03      	ldr	r3, [pc, #12]	; (10e8 <udi_msc_sense_pass+0x10>)
    10dc:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    10de:	2200      	movs	r2, #0
    10e0:	4b02      	ldr	r3, [pc, #8]	; (10ec <udi_msc_sense_pass+0x14>)
    10e2:	731a      	strb	r2, [r3, #12]
}
    10e4:	bd10      	pop	{r4, pc}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	00000fc1 	.word	0x00000fc1
    10ec:	20000048 	.word	0x20000048

000010f0 <udi_msc_data_sent>:
{
    10f0:	b510      	push	{r4, lr}
    10f2:	000c      	movs	r4, r1
	if (UDD_EP_TRANSFER_OK != status) {
    10f4:	2800      	cmp	r0, #0
    10f6:	d000      	beq.n	10fa <udi_msc_data_sent+0xa>
}
    10f8:	bd10      	pop	{r4, pc}
	udi_msc_sense_pass();
    10fa:	4b04      	ldr	r3, [pc, #16]	; (110c <udi_msc_data_sent+0x1c>)
    10fc:	4798      	blx	r3
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    10fe:	4b04      	ldr	r3, [pc, #16]	; (1110 <udi_msc_data_sent+0x20>)
    1100:	689a      	ldr	r2, [r3, #8]
    1102:	1b14      	subs	r4, r2, r4
    1104:	609c      	str	r4, [r3, #8]
	udi_msc_csw_process();
    1106:	4b03      	ldr	r3, [pc, #12]	; (1114 <udi_msc_data_sent+0x24>)
    1108:	4798      	blx	r3
    110a:	e7f5      	b.n	10f8 <udi_msc_data_sent+0x8>
    110c:	000010d9 	.word	0x000010d9
    1110:	20000048 	.word	0x20000048
    1114:	00000f81 	.word	0x00000f81

00001118 <udi_msc_spc_mode_sense>:
{
    1118:	b570      	push	{r4, r5, r6, lr}
    111a:	0005      	movs	r5, r0
	memset(&sense, 0, sizeof(sense));
    111c:	2214      	movs	r2, #20
    111e:	2100      	movs	r1, #0
    1120:	4823      	ldr	r0, [pc, #140]	; (11b0 <udi_msc_spc_mode_sense+0x98>)
    1122:	4b24      	ldr	r3, [pc, #144]	; (11b4 <udi_msc_spc_mode_sense+0x9c>)
    1124:	4798      	blx	r3
	if (b_sense10) {
    1126:	2d00      	cmp	r5, #0
    1128:	d018      	beq.n	115c <udi_msc_spc_mode_sense+0x44>
		request_lgt = udi_msc_cbw.CDB[8];
    112a:	4b23      	ldr	r3, [pc, #140]	; (11b8 <udi_msc_spc_mode_sense+0xa0>)
    112c:	7dd9      	ldrb	r1, [r3, #23]
		ptr_mode = &sense.s10.sense_data;
    112e:	4a20      	ldr	r2, [pc, #128]	; (11b0 <udi_msc_spc_mode_sense+0x98>)
    1130:	3208      	adds	r2, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    1132:	2408      	movs	r4, #8
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    1134:	4b20      	ldr	r3, [pc, #128]	; (11b8 <udi_msc_spc_mode_sense+0xa0>)
    1136:	7c58      	ldrb	r0, [r3, #17]
    1138:	233f      	movs	r3, #63	; 0x3f
    113a:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
    113c:	2b1c      	cmp	r3, #28
    113e:	d013      	beq.n	1168 <udi_msc_spc_mode_sense+0x50>
			|| (SCSI_MS_MODE_ALL == mode)) {
    1140:	2b3f      	cmp	r3, #63	; 0x3f
    1142:	d011      	beq.n	1168 <udi_msc_spc_mode_sense+0x50>
    1144:	1c20      	adds	r0, r4, #0
    1146:	428c      	cmp	r4, r1
    1148:	d900      	bls.n	114c <udi_msc_spc_mode_sense+0x34>
    114a:	1c08      	adds	r0, r1, #0
    114c:	b2c6      	uxtb	r6, r0
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    114e:	2180      	movs	r1, #128	; 0x80
    1150:	0030      	movs	r0, r6
    1152:	4b1a      	ldr	r3, [pc, #104]	; (11bc <udi_msc_spc_mode_sense+0xa4>)
    1154:	4798      	blx	r3
    1156:	2800      	cmp	r0, #0
    1158:	d10f      	bne.n	117a <udi_msc_spc_mode_sense+0x62>
}
    115a:	bd70      	pop	{r4, r5, r6, pc}
		request_lgt = udi_msc_cbw.CDB[4];
    115c:	4b16      	ldr	r3, [pc, #88]	; (11b8 <udi_msc_spc_mode_sense+0xa0>)
    115e:	7cd9      	ldrb	r1, [r3, #19]
		ptr_mode = &sense.s6.sense_data;
    1160:	4a13      	ldr	r2, [pc, #76]	; (11b0 <udi_msc_spc_mode_sense+0x98>)
    1162:	3204      	adds	r2, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    1164:	2404      	movs	r4, #4
    1166:	e7e5      	b.n	1134 <udi_msc_spc_mode_sense+0x1c>
		ptr_mode->page_code =
    1168:	231c      	movs	r3, #28
    116a:	7013      	strb	r3, [r2, #0]
		ptr_mode->page_length =
    116c:	3b12      	subs	r3, #18
    116e:	7053      	strb	r3, [r2, #1]
		ptr_mode->mrie =
    1170:	3b05      	subs	r3, #5
    1172:	70d3      	strb	r3, [r2, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    1174:	340c      	adds	r4, #12
    1176:	b2e4      	uxtb	r4, r4
    1178:	e7e4      	b.n	1144 <udi_msc_spc_mode_sense+0x2c>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    117a:	4b0f      	ldr	r3, [pc, #60]	; (11b8 <udi_msc_spc_mode_sense+0xa0>)
    117c:	7b58      	ldrb	r0, [r3, #13]
    117e:	4b10      	ldr	r3, [pc, #64]	; (11c0 <udi_msc_spc_mode_sense+0xa8>)
    1180:	4798      	blx	r3
    1182:	1e43      	subs	r3, r0, #1
    1184:	4198      	sbcs	r0, r3
    1186:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
    1188:	2d00      	cmp	r5, #0
    118a:	d00c      	beq.n	11a6 <udi_msc_spc_mode_sense+0x8e>
				cpu_to_be16((data_sense_lgt - 2));
    118c:	3c02      	subs	r4, #2
    118e:	b2a4      	uxth	r4, r4
		sense.s10.header.mode_data_length =
    1190:	4a07      	ldr	r2, [pc, #28]	; (11b0 <udi_msc_spc_mode_sense+0x98>)
				cpu_to_be16((data_sense_lgt - 2));
    1192:	0a23      	lsrs	r3, r4, #8
    1194:	0224      	lsls	r4, r4, #8
    1196:	431c      	orrs	r4, r3
		sense.s10.header.mode_data_length =
    1198:	8014      	strh	r4, [r2, #0]
		sense.s10.header.device_specific_parameter = wp;
    119a:	70d0      	strb	r0, [r2, #3]
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
    119c:	0031      	movs	r1, r6
    119e:	4804      	ldr	r0, [pc, #16]	; (11b0 <udi_msc_spc_mode_sense+0x98>)
    11a0:	4b08      	ldr	r3, [pc, #32]	; (11c4 <udi_msc_spc_mode_sense+0xac>)
    11a2:	4798      	blx	r3
    11a4:	e7d9      	b.n	115a <udi_msc_spc_mode_sense+0x42>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    11a6:	4b02      	ldr	r3, [pc, #8]	; (11b0 <udi_msc_spc_mode_sense+0x98>)
    11a8:	3c01      	subs	r4, #1
    11aa:	701c      	strb	r4, [r3, #0]
		sense.s6.header.device_specific_parameter = wp;
    11ac:	7098      	strb	r0, [r3, #2]
    11ae:	e7f5      	b.n	119c <udi_msc_spc_mode_sense+0x84>
    11b0:	20000188 	.word	0x20000188
    11b4:	00006d53 	.word	0x00006d53
    11b8:	200001ac 	.word	0x200001ac
    11bc:	0000102d 	.word	0x0000102d
    11c0:	00006141 	.word	0x00006141
    11c4:	00001079 	.word	0x00001079

000011c8 <udi_msc_sbc_trans>:
{
    11c8:	b510      	push	{r4, lr}
    11ca:	1e04      	subs	r4, r0, #0
	if (!b_read) {
    11cc:	d01e      	beq.n	120c <udi_msc_sbc_trans+0x44>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    11ce:	4a17      	ldr	r2, [pc, #92]	; (122c <udi_msc_sbc_trans+0x64>)
    11d0:	4b17      	ldr	r3, [pc, #92]	; (1230 <udi_msc_sbc_trans+0x68>)
    11d2:	7c59      	ldrb	r1, [r3, #17]
    11d4:	70d1      	strb	r1, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    11d6:	7c99      	ldrb	r1, [r3, #18]
    11d8:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    11da:	7cd9      	ldrb	r1, [r3, #19]
    11dc:	7051      	strb	r1, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    11de:	7d19      	ldrb	r1, [r3, #20]
    11e0:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    11e2:	4a14      	ldr	r2, [pc, #80]	; (1234 <udi_msc_sbc_trans+0x6c>)
    11e4:	7d99      	ldrb	r1, [r3, #22]
    11e6:	7051      	strb	r1, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    11e8:	7ddb      	ldrb	r3, [r3, #23]
    11ea:	7013      	strb	r3, [r2, #0]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    11ec:	8810      	ldrh	r0, [r2, #0]
    11ee:	0240      	lsls	r0, r0, #9
	if (!udi_msc_cbw_validate(trans_size,
    11f0:	0021      	movs	r1, r4
    11f2:	1e4b      	subs	r3, r1, #1
    11f4:	4199      	sbcs	r1, r3
    11f6:	01c9      	lsls	r1, r1, #7
    11f8:	4b0f      	ldr	r3, [pc, #60]	; (1238 <udi_msc_sbc_trans+0x70>)
    11fa:	4798      	blx	r3
    11fc:	2800      	cmp	r0, #0
    11fe:	d004      	beq.n	120a <udi_msc_sbc_trans+0x42>
	udi_msc_b_read = b_read;
    1200:	4b0e      	ldr	r3, [pc, #56]	; (123c <udi_msc_sbc_trans+0x74>)
    1202:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
    1204:	2201      	movs	r2, #1
    1206:	4b0e      	ldr	r3, [pc, #56]	; (1240 <udi_msc_sbc_trans+0x78>)
    1208:	701a      	strb	r2, [r3, #0]
}
    120a:	bd10      	pop	{r4, pc}
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    120c:	4b08      	ldr	r3, [pc, #32]	; (1230 <udi_msc_sbc_trans+0x68>)
    120e:	7b58      	ldrb	r0, [r3, #13]
    1210:	4b0c      	ldr	r3, [pc, #48]	; (1244 <udi_msc_sbc_trans+0x7c>)
    1212:	4798      	blx	r3
    1214:	2800      	cmp	r0, #0
    1216:	d0da      	beq.n	11ce <udi_msc_sbc_trans+0x6>
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
    1218:	2200      	movs	r2, #0
    121a:	219c      	movs	r1, #156	; 0x9c
    121c:	0189      	lsls	r1, r1, #6
    121e:	2007      	movs	r0, #7
    1220:	4b09      	ldr	r3, [pc, #36]	; (1248 <udi_msc_sbc_trans+0x80>)
    1222:	4798      	blx	r3
			udi_msc_csw_process();
    1224:	4b09      	ldr	r3, [pc, #36]	; (124c <udi_msc_sbc_trans+0x84>)
    1226:	4798      	blx	r3
			return;
    1228:	e7ef      	b.n	120a <udi_msc_sbc_trans+0x42>
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	2000019c 	.word	0x2000019c
    1230:	200001ac 	.word	0x200001ac
    1234:	200001cc 	.word	0x200001cc
    1238:	0000102d 	.word	0x0000102d
    123c:	200001a1 	.word	0x200001a1
    1240:	200001a2 	.word	0x200001a2
    1244:	00006141 	.word	0x00006141
    1248:	00000fe1 	.word	0x00000fe1
    124c:	00000f81 	.word	0x00000f81

00001250 <udi_msc_cbw_received>:
{
    1250:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    1252:	2800      	cmp	r0, #0
    1254:	d10d      	bne.n	1272 <udi_msc_cbw_received+0x22>
	if ((sizeof(udi_msc_cbw) != nb_received)
    1256:	291f      	cmp	r1, #31
    1258:	d104      	bne.n	1264 <udi_msc_cbw_received+0x14>
			|| (udi_msc_cbw.dCBWSignature !=
    125a:	4b84      	ldr	r3, [pc, #528]	; (146c <udi_msc_cbw_received+0x21c>)
    125c:	4a84      	ldr	r2, [pc, #528]	; (1470 <udi_msc_cbw_received+0x220>)
    125e:	6812      	ldr	r2, [r2, #0]
    1260:	429a      	cmp	r2, r3
    1262:	d007      	beq.n	1274 <udi_msc_cbw_received+0x24>
		udi_msc_b_cbw_invalid = true;
    1264:	2201      	movs	r2, #1
    1266:	4b83      	ldr	r3, [pc, #524]	; (1474 <udi_msc_cbw_received+0x224>)
    1268:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
    126a:	4b83      	ldr	r3, [pc, #524]	; (1478 <udi_msc_cbw_received+0x228>)
    126c:	4798      	blx	r3
		udi_msc_csw_invalid();
    126e:	4b83      	ldr	r3, [pc, #524]	; (147c <udi_msc_cbw_received+0x22c>)
    1270:	4798      	blx	r3
}
    1272:	bd70      	pop	{r4, r5, r6, pc}
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    1274:	4b7e      	ldr	r3, [pc, #504]	; (1470 <udi_msc_cbw_received+0x220>)
    1276:	7b58      	ldrb	r0, [r3, #13]
    1278:	220f      	movs	r2, #15
    127a:	4010      	ands	r0, r2
    127c:	7358      	strb	r0, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    127e:	4b80      	ldr	r3, [pc, #512]	; (1480 <udi_msc_cbw_received+0x230>)
    1280:	781b      	ldrb	r3, [r3, #0]
    1282:	4283      	cmp	r3, r0
    1284:	d30b      	bcc.n	129e <udi_msc_cbw_received+0x4e>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    1286:	4b7a      	ldr	r3, [pc, #488]	; (1470 <udi_msc_cbw_received+0x220>)
	udi_msc_csw.dCSWDataResidue =
    1288:	4a7e      	ldr	r2, [pc, #504]	; (1484 <udi_msc_cbw_received+0x234>)
    128a:	6899      	ldr	r1, [r3, #8]
    128c:	6091      	str	r1, [r2, #8]
	switch (udi_msc_cbw.CDB[0]) {
    128e:	7bda      	ldrb	r2, [r3, #15]
    1290:	2a5a      	cmp	r2, #90	; 0x5a
    1292:	d900      	bls.n	1296 <udi_msc_cbw_received+0x46>
    1294:	e0d2      	b.n	143c <udi_msc_cbw_received+0x1ec>
    1296:	0093      	lsls	r3, r2, #2
    1298:	4a7b      	ldr	r2, [pc, #492]	; (1488 <udi_msc_cbw_received+0x238>)
    129a:	58d3      	ldr	r3, [r2, r3]
    129c:	469f      	mov	pc, r3
		udi_msc_sense_fail_cdb_invalid();
    129e:	4b7b      	ldr	r3, [pc, #492]	; (148c <udi_msc_cbw_received+0x23c>)
    12a0:	4798      	blx	r3
		udi_msc_csw_process();
    12a2:	4b7b      	ldr	r3, [pc, #492]	; (1490 <udi_msc_cbw_received+0x240>)
    12a4:	4798      	blx	r3
		return;
    12a6:	e7e4      	b.n	1272 <udi_msc_cbw_received+0x22>
	uint8_t length = udi_msc_cbw.CDB[4];
    12a8:	4b71      	ldr	r3, [pc, #452]	; (1470 <udi_msc_cbw_received+0x220>)
    12aa:	7cda      	ldrb	r2, [r3, #19]
    12ac:	1c13      	adds	r3, r2, #0
    12ae:	2a12      	cmp	r2, #18
    12b0:	d900      	bls.n	12b4 <udi_msc_cbw_received+0x64>
    12b2:	2312      	movs	r3, #18
    12b4:	b2dc      	uxtb	r4, r3
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    12b6:	2180      	movs	r1, #128	; 0x80
    12b8:	0020      	movs	r0, r4
    12ba:	4b76      	ldr	r3, [pc, #472]	; (1494 <udi_msc_cbw_received+0x244>)
    12bc:	4798      	blx	r3
    12be:	2800      	cmp	r0, #0
    12c0:	d0d7      	beq.n	1272 <udi_msc_cbw_received+0x22>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    12c2:	0021      	movs	r1, r4
    12c4:	4874      	ldr	r0, [pc, #464]	; (1498 <udi_msc_cbw_received+0x248>)
    12c6:	4b75      	ldr	r3, [pc, #468]	; (149c <udi_msc_cbw_received+0x24c>)
    12c8:	4798      	blx	r3
    12ca:	e7d2      	b.n	1272 <udi_msc_cbw_received+0x22>
	length = udi_msc_cbw.CDB[4];
    12cc:	4b68      	ldr	r3, [pc, #416]	; (1470 <udi_msc_cbw_received+0x220>)
    12ce:	7cdb      	ldrb	r3, [r3, #19]
    12d0:	1c1a      	adds	r2, r3, #0
    12d2:	2b24      	cmp	r3, #36	; 0x24
    12d4:	d900      	bls.n	12d8 <udi_msc_cbw_received+0x88>
    12d6:	2224      	movs	r2, #36	; 0x24
    12d8:	b2d4      	uxtb	r4, r2
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    12da:	2180      	movs	r1, #128	; 0x80
    12dc:	0020      	movs	r0, r4
    12de:	4b6d      	ldr	r3, [pc, #436]	; (1494 <udi_msc_cbw_received+0x244>)
    12e0:	4798      	blx	r3
    12e2:	2800      	cmp	r0, #0
    12e4:	d0c5      	beq.n	1272 <udi_msc_cbw_received+0x22>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    12e6:	4b62      	ldr	r3, [pc, #392]	; (1470 <udi_msc_cbw_received+0x220>)
    12e8:	7c1b      	ldrb	r3, [r3, #16]
    12ea:	079b      	lsls	r3, r3, #30
    12ec:	d103      	bne.n	12f6 <udi_msc_cbw_received+0xa6>
			|| (0 != udi_msc_cbw.CDB[2])) {
    12ee:	4b60      	ldr	r3, [pc, #384]	; (1470 <udi_msc_cbw_received+0x220>)
    12f0:	7c5d      	ldrb	r5, [r3, #17]
    12f2:	2d00      	cmp	r5, #0
    12f4:	d004      	beq.n	1300 <udi_msc_cbw_received+0xb0>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    12f6:	4b65      	ldr	r3, [pc, #404]	; (148c <udi_msc_cbw_received+0x23c>)
    12f8:	4798      	blx	r3
		udi_msc_csw_process();
    12fa:	4b65      	ldr	r3, [pc, #404]	; (1490 <udi_msc_cbw_received+0x240>)
    12fc:	4798      	blx	r3
    12fe:	e7b8      	b.n	1272 <udi_msc_cbw_received+0x22>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    1300:	4b5b      	ldr	r3, [pc, #364]	; (1470 <udi_msc_cbw_received+0x220>)
    1302:	7b58      	ldrb	r0, [r3, #13]
    1304:	4b66      	ldr	r3, [pc, #408]	; (14a0 <udi_msc_cbw_received+0x250>)
    1306:	4798      	blx	r3
    1308:	2380      	movs	r3, #128	; 0x80
    130a:	2800      	cmp	r0, #0
    130c:	d100      	bne.n	1310 <udi_msc_cbw_received+0xc0>
    130e:	002b      	movs	r3, r5
    1310:	4e64      	ldr	r6, [pc, #400]	; (14a4 <udi_msc_cbw_received+0x254>)
    1312:	7073      	strb	r3, [r6, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    1314:	4b56      	ldr	r3, [pc, #344]	; (1470 <udi_msc_cbw_received+0x220>)
    1316:	7b58      	ldrb	r0, [r3, #13]
    1318:	4b63      	ldr	r3, [pc, #396]	; (14a8 <udi_msc_cbw_received+0x258>)
    131a:	4798      	blx	r3
    131c:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
    131e:	0030      	movs	r0, r6
    1320:	3010      	adds	r0, #16
    1322:	3101      	adds	r1, #1
    1324:	2210      	movs	r2, #16
    1326:	4b61      	ldr	r3, [pc, #388]	; (14ac <udi_msc_cbw_received+0x25c>)
    1328:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
    132a:	7c33      	ldrb	r3, [r6, #16]
    132c:	2b00      	cmp	r3, #0
    132e:	d100      	bne.n	1332 <udi_msc_cbw_received+0xe2>
    1330:	e08e      	b.n	1450 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    1332:	2b22      	cmp	r3, #34	; 0x22
    1334:	d100      	bne.n	1338 <udi_msc_cbw_received+0xe8>
    1336:	e08a      	b.n	144e <udi_msc_cbw_received+0x1fe>
    1338:	495a      	ldr	r1, [pc, #360]	; (14a4 <udi_msc_cbw_received+0x254>)
		i++;
    133a:	2301      	movs	r3, #1
		if ((0 == udi_msc_inquiry_data.product_id[i])
    133c:	7c4a      	ldrb	r2, [r1, #17]
    133e:	2a00      	cmp	r2, #0
    1340:	d100      	bne.n	1344 <udi_msc_cbw_received+0xf4>
    1342:	e085      	b.n	1450 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    1344:	2a22      	cmp	r2, #34	; 0x22
    1346:	d100      	bne.n	134a <udi_msc_cbw_received+0xfa>
    1348:	e082      	b.n	1450 <udi_msc_cbw_received+0x200>
		i++;
    134a:	3301      	adds	r3, #1
    134c:	b2db      	uxtb	r3, r3
    134e:	3101      	adds	r1, #1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    1350:	2b10      	cmp	r3, #16
    1352:	d1f3      	bne.n	133c <udi_msc_cbw_received+0xec>
    1354:	e084      	b.n	1460 <udi_msc_cbw_received+0x210>
		udi_msc_spc_mode_sense(false);
    1356:	2000      	movs	r0, #0
    1358:	4b55      	ldr	r3, [pc, #340]	; (14b0 <udi_msc_cbw_received+0x260>)
    135a:	4798      	blx	r3
		break;
    135c:	e789      	b.n	1272 <udi_msc_cbw_received+0x22>
		udi_msc_spc_mode_sense(true);
    135e:	2001      	movs	r0, #1
    1360:	4b53      	ldr	r3, [pc, #332]	; (14b0 <udi_msc_cbw_received+0x260>)
    1362:	4798      	blx	r3
		break;
    1364:	e785      	b.n	1272 <udi_msc_cbw_received+0x22>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    1366:	4b53      	ldr	r3, [pc, #332]	; (14b4 <udi_msc_cbw_received+0x264>)
    1368:	4798      	blx	r3
    136a:	2802      	cmp	r0, #2
    136c:	d009      	beq.n	1382 <udi_msc_cbw_received+0x132>
    136e:	2803      	cmp	r0, #3
    1370:	d004      	beq.n	137c <udi_msc_cbw_received+0x12c>
    1372:	2800      	cmp	r0, #0
    1374:	d008      	beq.n	1388 <udi_msc_cbw_received+0x138>
		udi_msc_sense_fail_hardware();
    1376:	4b50      	ldr	r3, [pc, #320]	; (14b8 <udi_msc_cbw_received+0x268>)
    1378:	4798      	blx	r3
    137a:	e007      	b.n	138c <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_busy_or_change();
    137c:	4b4f      	ldr	r3, [pc, #316]	; (14bc <udi_msc_cbw_received+0x26c>)
    137e:	4798      	blx	r3
    1380:	e004      	b.n	138c <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_not_present();
    1382:	4b4f      	ldr	r3, [pc, #316]	; (14c0 <udi_msc_cbw_received+0x270>)
    1384:	4798      	blx	r3
    1386:	e001      	b.n	138c <udi_msc_cbw_received+0x13c>
		udi_msc_sense_pass();
    1388:	4b4e      	ldr	r3, [pc, #312]	; (14c4 <udi_msc_cbw_received+0x274>)
    138a:	4798      	blx	r3
	udi_msc_csw_process();
    138c:	4b40      	ldr	r3, [pc, #256]	; (1490 <udi_msc_cbw_received+0x240>)
    138e:	4798      	blx	r3
    1390:	e76f      	b.n	1272 <udi_msc_cbw_received+0x22>
	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
    1392:	2180      	movs	r1, #128	; 0x80
    1394:	2008      	movs	r0, #8
    1396:	4b3f      	ldr	r3, [pc, #252]	; (1494 <udi_msc_cbw_received+0x244>)
    1398:	4798      	blx	r3
    139a:	2800      	cmp	r0, #0
    139c:	d100      	bne.n	13a0 <udi_msc_cbw_received+0x150>
    139e:	e768      	b.n	1272 <udi_msc_cbw_received+0x22>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    13a0:	4b33      	ldr	r3, [pc, #204]	; (1470 <udi_msc_cbw_received+0x220>)
    13a2:	7b58      	ldrb	r0, [r3, #13]
    13a4:	4948      	ldr	r1, [pc, #288]	; (14c8 <udi_msc_cbw_received+0x278>)
    13a6:	4b49      	ldr	r3, [pc, #292]	; (14cc <udi_msc_cbw_received+0x27c>)
    13a8:	4798      	blx	r3
    13aa:	2802      	cmp	r0, #2
    13ac:	d00d      	beq.n	13ca <udi_msc_cbw_received+0x17a>
    13ae:	2803      	cmp	r0, #3
    13b0:	d006      	beq.n	13c0 <udi_msc_cbw_received+0x170>
    13b2:	2800      	cmp	r0, #0
    13b4:	d00e      	beq.n	13d4 <udi_msc_cbw_received+0x184>
		udi_msc_sense_fail_hardware();
    13b6:	4b40      	ldr	r3, [pc, #256]	; (14b8 <udi_msc_cbw_received+0x268>)
    13b8:	4798      	blx	r3
		udi_msc_csw_process();
    13ba:	4b35      	ldr	r3, [pc, #212]	; (1490 <udi_msc_cbw_received+0x240>)
    13bc:	4798      	blx	r3
    13be:	e758      	b.n	1272 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_busy_or_change();
    13c0:	4b3e      	ldr	r3, [pc, #248]	; (14bc <udi_msc_cbw_received+0x26c>)
    13c2:	4798      	blx	r3
		udi_msc_csw_process();
    13c4:	4b32      	ldr	r3, [pc, #200]	; (1490 <udi_msc_cbw_received+0x240>)
    13c6:	4798      	blx	r3
    13c8:	e753      	b.n	1272 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_not_present();
    13ca:	4b3d      	ldr	r3, [pc, #244]	; (14c0 <udi_msc_cbw_received+0x270>)
    13cc:	4798      	blx	r3
		udi_msc_csw_process();
    13ce:	4b30      	ldr	r3, [pc, #192]	; (1490 <udi_msc_cbw_received+0x240>)
    13d0:	4798      	blx	r3
    13d2:	e74e      	b.n	1272 <udi_msc_cbw_received+0x22>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    13d4:	483c      	ldr	r0, [pc, #240]	; (14c8 <udi_msc_cbw_received+0x278>)
    13d6:	2380      	movs	r3, #128	; 0x80
    13d8:	029b      	lsls	r3, r3, #10
    13da:	6043      	str	r3, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    13dc:	6803      	ldr	r3, [r0, #0]
    13de:	ba1b      	rev	r3, r3
    13e0:	6003      	str	r3, [r0, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    13e2:	2108      	movs	r1, #8
    13e4:	4b2d      	ldr	r3, [pc, #180]	; (149c <udi_msc_cbw_received+0x24c>)
    13e6:	4798      	blx	r3
    13e8:	e743      	b.n	1272 <udi_msc_cbw_received+0x22>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    13ea:	4b21      	ldr	r3, [pc, #132]	; (1470 <udi_msc_cbw_received+0x220>)
    13ec:	7cdb      	ldrb	r3, [r3, #19]
	if (loej) {
    13ee:	079a      	lsls	r2, r3, #30
    13f0:	d404      	bmi.n	13fc <udi_msc_cbw_received+0x1ac>
	udi_msc_sense_pass();
    13f2:	4b34      	ldr	r3, [pc, #208]	; (14c4 <udi_msc_cbw_received+0x274>)
    13f4:	4798      	blx	r3
	udi_msc_csw_process();
    13f6:	4b26      	ldr	r3, [pc, #152]	; (1490 <udi_msc_cbw_received+0x240>)
    13f8:	4798      	blx	r3
    13fa:	e73a      	b.n	1272 <udi_msc_cbw_received+0x22>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    13fc:	2101      	movs	r1, #1
    13fe:	404b      	eors	r3, r1
    1400:	2101      	movs	r1, #1
    1402:	4019      	ands	r1, r3
    1404:	4b32      	ldr	r3, [pc, #200]	; (14d0 <udi_msc_cbw_received+0x280>)
    1406:	4798      	blx	r3
    1408:	e7f3      	b.n	13f2 <udi_msc_cbw_received+0x1a2>
	uint8_t prevent = udi_msc_cbw.CDB[4];
    140a:	4b19      	ldr	r3, [pc, #100]	; (1470 <udi_msc_cbw_received+0x220>)
	if (0 == prevent) {
    140c:	7cdb      	ldrb	r3, [r3, #19]
    140e:	2b00      	cmp	r3, #0
    1410:	d004      	beq.n	141c <udi_msc_cbw_received+0x1cc>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    1412:	4b1e      	ldr	r3, [pc, #120]	; (148c <udi_msc_cbw_received+0x23c>)
    1414:	4798      	blx	r3
	udi_msc_csw_process();
    1416:	4b1e      	ldr	r3, [pc, #120]	; (1490 <udi_msc_cbw_received+0x240>)
    1418:	4798      	blx	r3
    141a:	e72a      	b.n	1272 <udi_msc_cbw_received+0x22>
		udi_msc_sense_pass();
    141c:	4b29      	ldr	r3, [pc, #164]	; (14c4 <udi_msc_cbw_received+0x274>)
    141e:	4798      	blx	r3
    1420:	e7f9      	b.n	1416 <udi_msc_cbw_received+0x1c6>
		udi_msc_sense_pass();
    1422:	4b28      	ldr	r3, [pc, #160]	; (14c4 <udi_msc_cbw_received+0x274>)
    1424:	4798      	blx	r3
		udi_msc_csw_process();
    1426:	4b1a      	ldr	r3, [pc, #104]	; (1490 <udi_msc_cbw_received+0x240>)
    1428:	4798      	blx	r3
		break;
    142a:	e722      	b.n	1272 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(true);
    142c:	2001      	movs	r0, #1
    142e:	4b29      	ldr	r3, [pc, #164]	; (14d4 <udi_msc_cbw_received+0x284>)
    1430:	4798      	blx	r3
		break;
    1432:	e71e      	b.n	1272 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(false);
    1434:	2000      	movs	r0, #0
    1436:	4b27      	ldr	r3, [pc, #156]	; (14d4 <udi_msc_cbw_received+0x284>)
    1438:	4798      	blx	r3
		break;
    143a:	e71a      	b.n	1272 <udi_msc_cbw_received+0x22>
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    143c:	2200      	movs	r2, #0
    143e:	2180      	movs	r1, #128	; 0x80
    1440:	0189      	lsls	r1, r1, #6
    1442:	2005      	movs	r0, #5
    1444:	4b24      	ldr	r3, [pc, #144]	; (14d8 <udi_msc_cbw_received+0x288>)
    1446:	4798      	blx	r3
		udi_msc_csw_process();
    1448:	4b11      	ldr	r3, [pc, #68]	; (1490 <udi_msc_cbw_received+0x240>)
    144a:	4798      	blx	r3
		break;
    144c:	e711      	b.n	1272 <udi_msc_cbw_received+0x22>
	i = 0;
    144e:	002b      	movs	r3, r5
		udi_msc_inquiry_data.product_id[i] = ' ';
    1450:	4814      	ldr	r0, [pc, #80]	; (14a4 <udi_msc_cbw_received+0x254>)
    1452:	2120      	movs	r1, #32
    1454:	18c2      	adds	r2, r0, r3
    1456:	7411      	strb	r1, [r2, #16]
		i++;
    1458:	3301      	adds	r3, #1
    145a:	b2db      	uxtb	r3, r3
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    145c:	2b10      	cmp	r3, #16
    145e:	d1f9      	bne.n	1454 <udi_msc_cbw_received+0x204>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    1460:	0021      	movs	r1, r4
    1462:	4810      	ldr	r0, [pc, #64]	; (14a4 <udi_msc_cbw_received+0x254>)
    1464:	4b0d      	ldr	r3, [pc, #52]	; (149c <udi_msc_cbw_received+0x24c>)
    1466:	4798      	blx	r3
    1468:	e703      	b.n	1272 <udi_msc_cbw_received+0x22>
    146a:	46c0      	nop			; (mov r8, r8)
    146c:	43425355 	.word	0x43425355
    1470:	200001ac 	.word	0x200001ac
    1474:	200001a0 	.word	0x200001a0
    1478:	00000f29 	.word	0x00000f29
    147c:	00000f55 	.word	0x00000f55
    1480:	200001d0 	.word	0x200001d0
    1484:	20000048 	.word	0x20000048
    1488:	000075d8 	.word	0x000075d8
    148c:	00001019 	.word	0x00001019
    1490:	00000f81 	.word	0x00000f81
    1494:	0000102d 	.word	0x0000102d
    1498:	200001d4 	.word	0x200001d4
    149c:	00001079 	.word	0x00001079
    14a0:	00006159 	.word	0x00006159
    14a4:	20000058 	.word	0x20000058
    14a8:	00006171 	.word	0x00006171
    14ac:	00006d41 	.word	0x00006d41
    14b0:	00001119 	.word	0x00001119
    14b4:	000060fd 	.word	0x000060fd
    14b8:	00001065 	.word	0x00001065
    14bc:	000010b1 	.word	0x000010b1
    14c0:	000010c5 	.word	0x000010c5
    14c4:	000010d9 	.word	0x000010d9
    14c8:	200001a4 	.word	0x200001a4
    14cc:	00006115 	.word	0x00006115
    14d0:	00006131 	.word	0x00006131
    14d4:	000011c9 	.word	0x000011c9
    14d8:	00000fe1 	.word	0x00000fe1

000014dc <udi_msc_disable>:
{
    14dc:	b510      	push	{r4, lr}
	udi_msc_b_trans_req = false;
    14de:	2200      	movs	r2, #0
    14e0:	4b04      	ldr	r3, [pc, #16]	; (14f4 <udi_msc_disable+0x18>)
    14e2:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    14e4:	2301      	movs	r3, #1
    14e6:	4a04      	ldr	r2, [pc, #16]	; (14f8 <udi_msc_disable+0x1c>)
    14e8:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    14ea:	4a04      	ldr	r2, [pc, #16]	; (14fc <udi_msc_disable+0x20>)
    14ec:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
    14ee:	4b04      	ldr	r3, [pc, #16]	; (1500 <udi_msc_disable+0x24>)
    14f0:	4798      	blx	r3
}
    14f2:	bd10      	pop	{r4, pc}
    14f4:	200001a2 	.word	0x200001a2
    14f8:	20000044 	.word	0x20000044
    14fc:	20000045 	.word	0x20000045
    1500:	00003955 	.word	0x00003955

00001504 <udi_msc_setup>:
{
    1504:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    1506:	4b20      	ldr	r3, [pc, #128]	; (1588 <udi_msc_setup+0x84>)
    1508:	781a      	ldrb	r2, [r3, #0]
    150a:	b253      	sxtb	r3, r2
    150c:	2b00      	cmp	r3, #0
    150e:	db05      	blt.n	151c <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1510:	2360      	movs	r3, #96	; 0x60
    1512:	4013      	ands	r3, r2
	return false;	// Not supported request
    1514:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1516:	2b20      	cmp	r3, #32
    1518:	d018      	beq.n	154c <udi_msc_setup+0x48>
}
    151a:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    151c:	2360      	movs	r3, #96	; 0x60
    151e:	4013      	ands	r3, r2
	return false;	// Not supported request
    1520:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1522:	2b20      	cmp	r3, #32
    1524:	d1f9      	bne.n	151a <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    1526:	4b18      	ldr	r3, [pc, #96]	; (1588 <udi_msc_setup+0x84>)
    1528:	785b      	ldrb	r3, [r3, #1]
    152a:	2bfe      	cmp	r3, #254	; 0xfe
    152c:	d127      	bne.n	157e <udi_msc_setup+0x7a>
				if (1 != udd_g_ctrlreq.req.wLength)
    152e:	4b16      	ldr	r3, [pc, #88]	; (1588 <udi_msc_setup+0x84>)
    1530:	88db      	ldrh	r3, [r3, #6]
    1532:	2b01      	cmp	r3, #1
    1534:	d1f1      	bne.n	151a <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    1536:	4b14      	ldr	r3, [pc, #80]	; (1588 <udi_msc_setup+0x84>)
    1538:	885b      	ldrh	r3, [r3, #2]
    153a:	2b00      	cmp	r3, #0
    153c:	d1ed      	bne.n	151a <udi_msc_setup+0x16>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    153e:	4b12      	ldr	r3, [pc, #72]	; (1588 <udi_msc_setup+0x84>)
    1540:	4a12      	ldr	r2, [pc, #72]	; (158c <udi_msc_setup+0x88>)
    1542:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    1544:	2201      	movs	r2, #1
    1546:	819a      	strh	r2, [r3, #12]
				return true;
    1548:	3001      	adds	r0, #1
    154a:	e7e6      	b.n	151a <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    154c:	4b0e      	ldr	r3, [pc, #56]	; (1588 <udi_msc_setup+0x84>)
    154e:	785b      	ldrb	r3, [r3, #1]
    1550:	2bff      	cmp	r3, #255	; 0xff
    1552:	d116      	bne.n	1582 <udi_msc_setup+0x7e>
				if (0 != udd_g_ctrlreq.req.wLength)
    1554:	4b0c      	ldr	r3, [pc, #48]	; (1588 <udi_msc_setup+0x84>)
    1556:	88db      	ldrh	r3, [r3, #6]
    1558:	2b00      	cmp	r3, #0
    155a:	d1de      	bne.n	151a <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    155c:	4b0a      	ldr	r3, [pc, #40]	; (1588 <udi_msc_setup+0x84>)
    155e:	885b      	ldrh	r3, [r3, #2]
    1560:	2b00      	cmp	r3, #0
    1562:	d1da      	bne.n	151a <udi_msc_setup+0x16>
				udi_msc_b_cbw_invalid = false;
    1564:	4a0a      	ldr	r2, [pc, #40]	; (1590 <udi_msc_setup+0x8c>)
    1566:	7013      	strb	r3, [r2, #0]
				udi_msc_b_trans_req = false;
    1568:	4a0a      	ldr	r2, [pc, #40]	; (1594 <udi_msc_setup+0x90>)
    156a:	7013      	strb	r3, [r2, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
    156c:	3002      	adds	r0, #2
    156e:	4c0a      	ldr	r4, [pc, #40]	; (1598 <udi_msc_setup+0x94>)
    1570:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
    1572:	2081      	movs	r0, #129	; 0x81
    1574:	47a0      	blx	r4
				udi_msc_cbw_wait();
    1576:	4b09      	ldr	r3, [pc, #36]	; (159c <udi_msc_setup+0x98>)
    1578:	4798      	blx	r3
				return true;
    157a:	2001      	movs	r0, #1
    157c:	e7cd      	b.n	151a <udi_msc_setup+0x16>
	return false;	// Not supported request
    157e:	2000      	movs	r0, #0
    1580:	e7cb      	b.n	151a <udi_msc_setup+0x16>
    1582:	2000      	movs	r0, #0
    1584:	e7c9      	b.n	151a <udi_msc_setup+0x16>
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	20000534 	.word	0x20000534
    158c:	200001d0 	.word	0x200001d0
    1590:	200001a0 	.word	0x200001a0
    1594:	200001a2 	.word	0x200001a2
    1598:	00002f0d 	.word	0x00002f0d
    159c:	00000e2d 	.word	0x00000e2d

000015a0 <udi_msc_process_trans>:
{
    15a0:	b510      	push	{r4, lr}
	if (!udi_msc_b_trans_req)
    15a2:	4b1e      	ldr	r3, [pc, #120]	; (161c <udi_msc_process_trans+0x7c>)
    15a4:	781c      	ldrb	r4, [r3, #0]
    15a6:	2c00      	cmp	r4, #0
    15a8:	d030      	beq.n	160c <udi_msc_process_trans+0x6c>
	udi_msc_b_trans_req = false;
    15aa:	2300      	movs	r3, #0
    15ac:	4a1b      	ldr	r2, [pc, #108]	; (161c <udi_msc_process_trans+0x7c>)
    15ae:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = false;
    15b0:	4a1b      	ldr	r2, [pc, #108]	; (1620 <udi_msc_process_trans+0x80>)
    15b2:	7013      	strb	r3, [r2, #0]
	if (udi_msc_b_read) {
    15b4:	4b1b      	ldr	r3, [pc, #108]	; (1624 <udi_msc_process_trans+0x84>)
    15b6:	781b      	ldrb	r3, [r3, #0]
    15b8:	2b00      	cmp	r3, #0
    15ba:	d015      	beq.n	15e8 <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    15bc:	4b1a      	ldr	r3, [pc, #104]	; (1628 <udi_msc_process_trans+0x88>)
    15be:	881a      	ldrh	r2, [r3, #0]
    15c0:	4b1a      	ldr	r3, [pc, #104]	; (162c <udi_msc_process_trans+0x8c>)
    15c2:	6819      	ldr	r1, [r3, #0]
    15c4:	4b1a      	ldr	r3, [pc, #104]	; (1630 <udi_msc_process_trans+0x90>)
    15c6:	7b58      	ldrb	r0, [r3, #13]
    15c8:	4b1a      	ldr	r3, [pc, #104]	; (1634 <udi_msc_process_trans+0x94>)
    15ca:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
    15cc:	4b14      	ldr	r3, [pc, #80]	; (1620 <udi_msc_process_trans+0x80>)
    15ce:	781b      	ldrb	r3, [r3, #0]
    15d0:	b2db      	uxtb	r3, r3
    15d2:	2b00      	cmp	r3, #0
    15d4:	d111      	bne.n	15fa <udi_msc_process_trans+0x5a>
	switch (status) {
    15d6:	2802      	cmp	r0, #2
    15d8:	d01d      	beq.n	1616 <udi_msc_process_trans+0x76>
    15da:	2803      	cmp	r0, #3
    15dc:	d018      	beq.n	1610 <udi_msc_process_trans+0x70>
    15de:	2800      	cmp	r0, #0
    15e0:	d010      	beq.n	1604 <udi_msc_process_trans+0x64>
		udi_msc_sense_fail_hardware();
    15e2:	4b15      	ldr	r3, [pc, #84]	; (1638 <udi_msc_process_trans+0x98>)
    15e4:	4798      	blx	r3
		break;
    15e6:	e00f      	b.n	1608 <udi_msc_process_trans+0x68>
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    15e8:	4b0f      	ldr	r3, [pc, #60]	; (1628 <udi_msc_process_trans+0x88>)
    15ea:	881a      	ldrh	r2, [r3, #0]
    15ec:	4b0f      	ldr	r3, [pc, #60]	; (162c <udi_msc_process_trans+0x8c>)
    15ee:	6819      	ldr	r1, [r3, #0]
    15f0:	4b0f      	ldr	r3, [pc, #60]	; (1630 <udi_msc_process_trans+0x90>)
    15f2:	7b58      	ldrb	r0, [r3, #13]
    15f4:	4b11      	ldr	r3, [pc, #68]	; (163c <udi_msc_process_trans+0x9c>)
    15f6:	4798      	blx	r3
    15f8:	e7e8      	b.n	15cc <udi_msc_process_trans+0x2c>
		udi_msc_b_reset_trans = false;
    15fa:	2100      	movs	r1, #0
    15fc:	4a08      	ldr	r2, [pc, #32]	; (1620 <udi_msc_process_trans+0x80>)
    15fe:	7011      	strb	r1, [r2, #0]
		return true;
    1600:	001c      	movs	r4, r3
    1602:	e003      	b.n	160c <udi_msc_process_trans+0x6c>
		udi_msc_sense_pass();
    1604:	4b0e      	ldr	r3, [pc, #56]	; (1640 <udi_msc_process_trans+0xa0>)
    1606:	4798      	blx	r3
	udi_msc_csw_process();
    1608:	4b0e      	ldr	r3, [pc, #56]	; (1644 <udi_msc_process_trans+0xa4>)
    160a:	4798      	blx	r3
}
    160c:	0020      	movs	r0, r4
    160e:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_busy_or_change();
    1610:	4b0d      	ldr	r3, [pc, #52]	; (1648 <udi_msc_process_trans+0xa8>)
    1612:	4798      	blx	r3
		break;
    1614:	e7f8      	b.n	1608 <udi_msc_process_trans+0x68>
		udi_msc_sense_fail_not_present();
    1616:	4b0d      	ldr	r3, [pc, #52]	; (164c <udi_msc_process_trans+0xac>)
    1618:	4798      	blx	r3
		break;
    161a:	e7f5      	b.n	1608 <udi_msc_process_trans+0x68>
    161c:	200001a2 	.word	0x200001a2
    1620:	20000045 	.word	0x20000045
    1624:	200001a1 	.word	0x200001a1
    1628:	200001cc 	.word	0x200001cc
    162c:	2000019c 	.word	0x2000019c
    1630:	200001ac 	.word	0x200001ac
    1634:	00006181 	.word	0x00006181
    1638:	00001065 	.word	0x00001065
    163c:	000061b5 	.word	0x000061b5
    1640:	000010d9 	.word	0x000010d9
    1644:	00000f81 	.word	0x00000f81
    1648:	000010b1 	.word	0x000010b1
    164c:	000010c5 	.word	0x000010c5

00001650 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
    1650:	b530      	push	{r4, r5, lr}
    1652:	b083      	sub	sp, #12
    1654:	0005      	movs	r5, r0
    1656:	0014      	movs	r4, r2
	if (!udi_msc_b_ack_trans)
    1658:	4a1d      	ldr	r2, [pc, #116]	; (16d0 <udi_msc_trans_block+0x80>)
    165a:	7810      	ldrb	r0, [r2, #0]
    165c:	b2c0      	uxtb	r0, r0
    165e:	2800      	cmp	r0, #0
    1660:	d013      	beq.n	168a <udi_msc_trans_block+0x3a>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
    1662:	2000      	movs	r0, #0
    1664:	7010      	strb	r0, [r2, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    1666:	3081      	adds	r0, #129	; 0x81
    1668:	2d00      	cmp	r5, #0
    166a:	d100      	bne.n	166e <udi_msc_trans_block+0x1e>
    166c:	387f      	subs	r0, #127	; 0x7f
    166e:	2b00      	cmp	r3, #0
    1670:	d00d      	beq.n	168e <udi_msc_trans_block+0x3e>
    1672:	9300      	str	r3, [sp, #0]
    1674:	0023      	movs	r3, r4
    1676:	000a      	movs	r2, r1
    1678:	2100      	movs	r1, #0
    167a:	4d16      	ldr	r5, [pc, #88]	; (16d4 <udi_msc_trans_block+0x84>)
    167c:	47a8      	blx	r5
    167e:	2800      	cmp	r0, #0
    1680:	d020      	beq.n	16c4 <udi_msc_trans_block+0x74>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
    1682:	4b15      	ldr	r3, [pc, #84]	; (16d8 <udi_msc_trans_block+0x88>)
    1684:	689a      	ldr	r2, [r3, #8]
    1686:	1b14      	subs	r4, r2, r4
    1688:	609c      	str	r4, [r3, #8]
	return true;
}
    168a:	b003      	add	sp, #12
    168c:	bd30      	pop	{r4, r5, pc}
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    168e:	4b13      	ldr	r3, [pc, #76]	; (16dc <udi_msc_trans_block+0x8c>)
    1690:	9300      	str	r3, [sp, #0]
    1692:	0023      	movs	r3, r4
    1694:	000a      	movs	r2, r1
    1696:	2100      	movs	r1, #0
    1698:	4d0e      	ldr	r5, [pc, #56]	; (16d4 <udi_msc_trans_block+0x84>)
    169a:	47a8      	blx	r5
    169c:	2800      	cmp	r0, #0
    169e:	d011      	beq.n	16c4 <udi_msc_trans_block+0x74>
		while (!udi_msc_b_ack_trans);
    16a0:	4a0b      	ldr	r2, [pc, #44]	; (16d0 <udi_msc_trans_block+0x80>)
    16a2:	7813      	ldrb	r3, [r2, #0]
    16a4:	2b00      	cmp	r3, #0
    16a6:	d0fc      	beq.n	16a2 <udi_msc_trans_block+0x52>
		if (udi_msc_b_abort_trans) {
    16a8:	4b0d      	ldr	r3, [pc, #52]	; (16e0 <udi_msc_trans_block+0x90>)
    16aa:	781b      	ldrb	r3, [r3, #0]
			return false;
    16ac:	2000      	movs	r0, #0
		if (udi_msc_b_abort_trans) {
    16ae:	2b00      	cmp	r3, #0
    16b0:	d1eb      	bne.n	168a <udi_msc_trans_block+0x3a>
		udi_msc_csw.dCSWDataResidue -= block_size;
    16b2:	4b09      	ldr	r3, [pc, #36]	; (16d8 <udi_msc_trans_block+0x88>)
    16b4:	689a      	ldr	r2, [r3, #8]
    16b6:	1b14      	subs	r4, r2, r4
    16b8:	609c      	str	r4, [r3, #8]
		return (!udi_msc_b_abort_trans);
    16ba:	4b09      	ldr	r3, [pc, #36]	; (16e0 <udi_msc_trans_block+0x90>)
    16bc:	7818      	ldrb	r0, [r3, #0]
    16be:	2301      	movs	r3, #1
    16c0:	4058      	eors	r0, r3
    16c2:	e7e2      	b.n	168a <udi_msc_trans_block+0x3a>
		udi_msc_b_ack_trans = true;
    16c4:	2201      	movs	r2, #1
    16c6:	4b02      	ldr	r3, [pc, #8]	; (16d0 <udi_msc_trans_block+0x80>)
    16c8:	701a      	strb	r2, [r3, #0]
		return false;
    16ca:	2000      	movs	r0, #0
    16cc:	e7dd      	b.n	168a <udi_msc_trans_block+0x3a>
    16ce:	46c0      	nop			; (mov r8, r8)
    16d0:	20000044 	.word	0x20000044
    16d4:	00003299 	.word	0x00003299
    16d8:	20000048 	.word	0x20000048
    16dc:	00000e11 	.word	0x00000e11
    16e0:	200002f0 	.word	0x200002f0

000016e4 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    16e4:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    16e6:	4b11      	ldr	r3, [pc, #68]	; (172c <udc_next_desc_in_iface+0x48>)
    16e8:	681b      	ldr	r3, [r3, #0]
    16ea:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    16ec:	7894      	ldrb	r4, [r2, #2]
    16ee:	78d3      	ldrb	r3, [r2, #3]
    16f0:	021b      	lsls	r3, r3, #8
    16f2:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    16f4:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    16f6:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    16f8:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    16fa:	4290      	cmp	r0, r2
    16fc:	d210      	bcs.n	1720 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    16fe:	7843      	ldrb	r3, [r0, #1]
    1700:	2b04      	cmp	r3, #4
    1702:	d00f      	beq.n	1724 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1704:	428b      	cmp	r3, r1
    1706:	d00a      	beq.n	171e <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    1708:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    170a:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    170c:	4290      	cmp	r0, r2
    170e:	d205      	bcs.n	171c <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1710:	7843      	ldrb	r3, [r0, #1]
    1712:	2b04      	cmp	r3, #4
    1714:	d008      	beq.n	1728 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    1716:	428b      	cmp	r3, r1
    1718:	d1f6      	bne.n	1708 <udc_next_desc_in_iface+0x24>
    171a:	e000      	b.n	171e <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    171c:	2000      	movs	r0, #0
}
    171e:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    1720:	2000      	movs	r0, #0
    1722:	e7fc      	b.n	171e <udc_next_desc_in_iface+0x3a>
    1724:	2000      	movs	r0, #0
    1726:	e7fa      	b.n	171e <udc_next_desc_in_iface+0x3a>
    1728:	2000      	movs	r0, #0
    172a:	e7f8      	b.n	171e <udc_next_desc_in_iface+0x3a>
    172c:	200001f4 	.word	0x200001f4

00001730 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    1730:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1732:	4b03      	ldr	r3, [pc, #12]	; (1740 <udc_valid_address+0x10>)
    1734:	885b      	ldrh	r3, [r3, #2]
    1736:	207f      	movs	r0, #127	; 0x7f
    1738:	4018      	ands	r0, r3
    173a:	4b02      	ldr	r3, [pc, #8]	; (1744 <udc_valid_address+0x14>)
    173c:	4798      	blx	r3
}
    173e:	bd10      	pop	{r4, pc}
    1740:	20000534 	.word	0x20000534
    1744:	00003471 	.word	0x00003471

00001748 <udc_update_iface_desc>:
{
    1748:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    174a:	4b19      	ldr	r3, [pc, #100]	; (17b0 <udc_update_iface_desc+0x68>)
    174c:	781b      	ldrb	r3, [r3, #0]
		return false;
    174e:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    1750:	2b00      	cmp	r3, #0
    1752:	d029      	beq.n	17a8 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1754:	4b17      	ldr	r3, [pc, #92]	; (17b4 <udc_update_iface_desc+0x6c>)
    1756:	681b      	ldr	r3, [r3, #0]
    1758:	681b      	ldr	r3, [r3, #0]
    175a:	791c      	ldrb	r4, [r3, #4]
    175c:	4284      	cmp	r4, r0
    175e:	d923      	bls.n	17a8 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1760:	4a15      	ldr	r2, [pc, #84]	; (17b8 <udc_update_iface_desc+0x70>)
    1762:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1764:	789a      	ldrb	r2, [r3, #2]
    1766:	78dc      	ldrb	r4, [r3, #3]
    1768:	0224      	lsls	r4, r4, #8
    176a:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    176c:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    176e:	42a3      	cmp	r3, r4
    1770:	d21c      	bcs.n	17ac <udc_update_iface_desc+0x64>
    1772:	2500      	movs	r5, #0
    1774:	2601      	movs	r6, #1
    1776:	e007      	b.n	1788 <udc_update_iface_desc+0x40>
    1778:	4a0f      	ldr	r2, [pc, #60]	; (17b8 <udc_update_iface_desc+0x70>)
    177a:	6013      	str	r3, [r2, #0]
    177c:	e00f      	b.n	179e <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    177e:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1780:	189b      	adds	r3, r3, r2
    1782:	0035      	movs	r5, r6
	while (ptr_end_desc >
    1784:	42a3      	cmp	r3, r4
    1786:	d20c      	bcs.n	17a2 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    1788:	785a      	ldrb	r2, [r3, #1]
    178a:	2a04      	cmp	r2, #4
    178c:	d1f7      	bne.n	177e <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    178e:	789a      	ldrb	r2, [r3, #2]
    1790:	4282      	cmp	r2, r0
    1792:	d1f4      	bne.n	177e <udc_update_iface_desc+0x36>
    1794:	78da      	ldrb	r2, [r3, #3]
    1796:	428a      	cmp	r2, r1
    1798:	d1f1      	bne.n	177e <udc_update_iface_desc+0x36>
    179a:	2d00      	cmp	r5, #0
    179c:	d1ec      	bne.n	1778 <udc_update_iface_desc+0x30>
				return true; // Interface found
    179e:	2201      	movs	r2, #1
    17a0:	e002      	b.n	17a8 <udc_update_iface_desc+0x60>
    17a2:	4a05      	ldr	r2, [pc, #20]	; (17b8 <udc_update_iface_desc+0x70>)
    17a4:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    17a6:	2200      	movs	r2, #0
}
    17a8:	0010      	movs	r0, r2
    17aa:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    17ac:	2200      	movs	r2, #0
    17ae:	e7fb      	b.n	17a8 <udc_update_iface_desc+0x60>
    17b0:	200001f0 	.word	0x200001f0
    17b4:	200001f4 	.word	0x200001f4
    17b8:	200001f8 	.word	0x200001f8

000017bc <udc_iface_disable>:
{
    17bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    17be:	46c6      	mov	lr, r8
    17c0:	b500      	push	{lr}
    17c2:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    17c4:	2100      	movs	r1, #0
    17c6:	4b13      	ldr	r3, [pc, #76]	; (1814 <udc_iface_disable+0x58>)
    17c8:	4798      	blx	r3
    17ca:	1e05      	subs	r5, r0, #0
    17cc:	d103      	bne.n	17d6 <udc_iface_disable+0x1a>
}
    17ce:	0028      	movs	r0, r5
    17d0:	bc04      	pop	{r2}
    17d2:	4690      	mov	r8, r2
    17d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    17d6:	4b10      	ldr	r3, [pc, #64]	; (1818 <udc_iface_disable+0x5c>)
    17d8:	681b      	ldr	r3, [r3, #0]
    17da:	685b      	ldr	r3, [r3, #4]
    17dc:	00a2      	lsls	r2, r4, #2
    17de:	58d3      	ldr	r3, [r2, r3]
    17e0:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    17e2:	68db      	ldr	r3, [r3, #12]
    17e4:	4798      	blx	r3
    17e6:	0001      	movs	r1, r0
    17e8:	0020      	movs	r0, r4
    17ea:	4b0a      	ldr	r3, [pc, #40]	; (1814 <udc_iface_disable+0x58>)
    17ec:	4798      	blx	r3
    17ee:	1e05      	subs	r5, r0, #0
    17f0:	d0ed      	beq.n	17ce <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    17f2:	4b0a      	ldr	r3, [pc, #40]	; (181c <udc_iface_disable+0x60>)
    17f4:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    17f6:	4e0a      	ldr	r6, [pc, #40]	; (1820 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    17f8:	4f0a      	ldr	r7, [pc, #40]	; (1824 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    17fa:	2105      	movs	r1, #5
    17fc:	0020      	movs	r0, r4
    17fe:	47b0      	blx	r6
    1800:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    1802:	d002      	beq.n	180a <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    1804:	7880      	ldrb	r0, [r0, #2]
    1806:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1808:	e7f7      	b.n	17fa <udc_iface_disable+0x3e>
	udi_api->disable();
    180a:	4643      	mov	r3, r8
    180c:	685b      	ldr	r3, [r3, #4]
    180e:	4798      	blx	r3
	return true;
    1810:	e7dd      	b.n	17ce <udc_iface_disable+0x12>
    1812:	46c0      	nop			; (mov r8, r8)
    1814:	00001749 	.word	0x00001749
    1818:	200001f4 	.word	0x200001f4
    181c:	200001f8 	.word	0x200001f8
    1820:	000016e5 	.word	0x000016e5
    1824:	00002f59 	.word	0x00002f59

00001828 <udc_iface_enable>:
{
    1828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    182a:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    182c:	4b0f      	ldr	r3, [pc, #60]	; (186c <udc_iface_enable+0x44>)
    182e:	4798      	blx	r3
    1830:	2800      	cmp	r0, #0
    1832:	d019      	beq.n	1868 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1834:	4b0e      	ldr	r3, [pc, #56]	; (1870 <udc_iface_enable+0x48>)
    1836:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1838:	4e0e      	ldr	r6, [pc, #56]	; (1874 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    183a:	4f0f      	ldr	r7, [pc, #60]	; (1878 <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    183c:	2105      	movs	r1, #5
    183e:	0020      	movs	r0, r4
    1840:	47b0      	blx	r6
    1842:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    1844:	d009      	beq.n	185a <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1846:	7903      	ldrb	r3, [r0, #4]
    1848:	7942      	ldrb	r2, [r0, #5]
    184a:	0212      	lsls	r2, r2, #8
    184c:	431a      	orrs	r2, r3
    184e:	78c1      	ldrb	r1, [r0, #3]
    1850:	7880      	ldrb	r0, [r0, #2]
    1852:	47b8      	blx	r7
    1854:	2800      	cmp	r0, #0
    1856:	d1f1      	bne.n	183c <udc_iface_enable+0x14>
    1858:	e006      	b.n	1868 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    185a:	4b08      	ldr	r3, [pc, #32]	; (187c <udc_iface_enable+0x54>)
    185c:	681b      	ldr	r3, [r3, #0]
    185e:	685b      	ldr	r3, [r3, #4]
    1860:	00ad      	lsls	r5, r5, #2
    1862:	58eb      	ldr	r3, [r5, r3]
    1864:	681b      	ldr	r3, [r3, #0]
    1866:	4798      	blx	r3
}
    1868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	00001749 	.word	0x00001749
    1870:	200001f8 	.word	0x200001f8
    1874:	000016e5 	.word	0x000016e5
    1878:	00002fb1 	.word	0x00002fb1
    187c:	200001f4 	.word	0x200001f4

00001880 <udc_start>:
{
    1880:	b510      	push	{r4, lr}
	udd_enable();
    1882:	4b01      	ldr	r3, [pc, #4]	; (1888 <udc_start+0x8>)
    1884:	4798      	blx	r3
}
    1886:	bd10      	pop	{r4, pc}
    1888:	0000357d 	.word	0x0000357d

0000188c <udc_reset>:
{
    188c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    188e:	4b0e      	ldr	r3, [pc, #56]	; (18c8 <udc_reset+0x3c>)
    1890:	781b      	ldrb	r3, [r3, #0]
    1892:	2b00      	cmp	r3, #0
    1894:	d011      	beq.n	18ba <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1896:	4b0d      	ldr	r3, [pc, #52]	; (18cc <udc_reset+0x40>)
    1898:	681b      	ldr	r3, [r3, #0]
    189a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    189c:	791b      	ldrb	r3, [r3, #4]
    189e:	2b00      	cmp	r3, #0
    18a0:	d00b      	beq.n	18ba <udc_reset+0x2e>
    18a2:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    18a4:	4e0a      	ldr	r6, [pc, #40]	; (18d0 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18a6:	4d09      	ldr	r5, [pc, #36]	; (18cc <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    18a8:	0020      	movs	r0, r4
    18aa:	47b0      	blx	r6
				iface_num++) {
    18ac:	3401      	adds	r4, #1
    18ae:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18b0:	682b      	ldr	r3, [r5, #0]
    18b2:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    18b4:	791b      	ldrb	r3, [r3, #4]
    18b6:	42a3      	cmp	r3, r4
    18b8:	d8f6      	bhi.n	18a8 <udc_reset+0x1c>
	udc_num_configuration = 0;
    18ba:	2200      	movs	r2, #0
    18bc:	4b02      	ldr	r3, [pc, #8]	; (18c8 <udc_reset+0x3c>)
    18be:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    18c0:	3201      	adds	r2, #1
    18c2:	4b04      	ldr	r3, [pc, #16]	; (18d4 <udc_reset+0x48>)
    18c4:	801a      	strh	r2, [r3, #0]
}
    18c6:	bd70      	pop	{r4, r5, r6, pc}
    18c8:	200001f0 	.word	0x200001f0
    18cc:	200001f4 	.word	0x200001f4
    18d0:	000017bd 	.word	0x000017bd
    18d4:	200001e6 	.word	0x200001e6

000018d8 <udc_sof_notify>:
{
    18d8:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    18da:	4b0e      	ldr	r3, [pc, #56]	; (1914 <udc_sof_notify+0x3c>)
    18dc:	781b      	ldrb	r3, [r3, #0]
    18de:	2b00      	cmp	r3, #0
    18e0:	d017      	beq.n	1912 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18e2:	4b0d      	ldr	r3, [pc, #52]	; (1918 <udc_sof_notify+0x40>)
    18e4:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    18e6:	681a      	ldr	r2, [r3, #0]
    18e8:	7912      	ldrb	r2, [r2, #4]
    18ea:	2a00      	cmp	r2, #0
    18ec:	d011      	beq.n	1912 <udc_sof_notify+0x3a>
    18ee:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18f0:	4d09      	ldr	r5, [pc, #36]	; (1918 <udc_sof_notify+0x40>)
    18f2:	e006      	b.n	1902 <udc_sof_notify+0x2a>
				iface_num++) {
    18f4:	3401      	adds	r4, #1
    18f6:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18f8:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    18fa:	681a      	ldr	r2, [r3, #0]
    18fc:	7912      	ldrb	r2, [r2, #4]
    18fe:	42a2      	cmp	r2, r4
    1900:	d907      	bls.n	1912 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1902:	685b      	ldr	r3, [r3, #4]
    1904:	00a2      	lsls	r2, r4, #2
    1906:	58d3      	ldr	r3, [r2, r3]
    1908:	691b      	ldr	r3, [r3, #16]
    190a:	2b00      	cmp	r3, #0
    190c:	d0f2      	beq.n	18f4 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    190e:	4798      	blx	r3
    1910:	e7f0      	b.n	18f4 <udc_sof_notify+0x1c>
}
    1912:	bd70      	pop	{r4, r5, r6, pc}
    1914:	200001f0 	.word	0x200001f0
    1918:	200001f4 	.word	0x200001f4

0000191c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    191e:	4bac      	ldr	r3, [pc, #688]	; (1bd0 <udc_process_setup+0x2b4>)
    1920:	2200      	movs	r2, #0
    1922:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1924:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1926:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    1928:	781b      	ldrb	r3, [r3, #0]
    192a:	b25a      	sxtb	r2, r3
    192c:	2a00      	cmp	r2, #0
    192e:	db13      	blt.n	1958 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1930:	2260      	movs	r2, #96	; 0x60
    1932:	421a      	tst	r2, r3
    1934:	d100      	bne.n	1938 <udc_process_setup+0x1c>
    1936:	e0da      	b.n	1aee <udc_process_setup+0x1d2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1938:	4ba5      	ldr	r3, [pc, #660]	; (1bd0 <udc_process_setup+0x2b4>)
    193a:	781a      	ldrb	r2, [r3, #0]
    193c:	231f      	movs	r3, #31
    193e:	4013      	ands	r3, r2
    1940:	2b01      	cmp	r3, #1
    1942:	d100      	bne.n	1946 <udc_process_setup+0x2a>
    1944:	e176      	b.n	1c34 <udc_process_setup+0x318>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1946:	4ba2      	ldr	r3, [pc, #648]	; (1bd0 <udc_process_setup+0x2b4>)
    1948:	781a      	ldrb	r2, [r3, #0]
    194a:	231f      	movs	r3, #31
    194c:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    194e:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1950:	2b02      	cmp	r3, #2
    1952:	d100      	bne.n	1956 <udc_process_setup+0x3a>
    1954:	e1cc      	b.n	1cf0 <udc_process_setup+0x3d4>
#endif
}
    1956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    1958:	4a9d      	ldr	r2, [pc, #628]	; (1bd0 <udc_process_setup+0x2b4>)
    195a:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    195c:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    195e:	2a00      	cmp	r2, #0
    1960:	d0f9      	beq.n	1956 <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1962:	2160      	movs	r1, #96	; 0x60
    1964:	4219      	tst	r1, r3
    1966:	d1e7      	bne.n	1938 <udc_process_setup+0x1c>
    1968:	211f      	movs	r1, #31
    196a:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    196c:	d108      	bne.n	1980 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    196e:	4998      	ldr	r1, [pc, #608]	; (1bd0 <udc_process_setup+0x2b4>)
    1970:	7849      	ldrb	r1, [r1, #1]
    1972:	2906      	cmp	r1, #6
    1974:	d023      	beq.n	19be <udc_process_setup+0xa2>
    1976:	2908      	cmp	r1, #8
    1978:	d100      	bne.n	197c <udc_process_setup+0x60>
    197a:	e087      	b.n	1a8c <udc_process_setup+0x170>
    197c:	2900      	cmp	r1, #0
    197e:	d017      	beq.n	19b0 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1980:	2b01      	cmp	r3, #1
    1982:	d100      	bne.n	1986 <udc_process_setup+0x6a>
    1984:	e08a      	b.n	1a9c <udc_process_setup+0x180>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1986:	2b02      	cmp	r3, #2
    1988:	d1d6      	bne.n	1938 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    198a:	4b91      	ldr	r3, [pc, #580]	; (1bd0 <udc_process_setup+0x2b4>)
    198c:	785b      	ldrb	r3, [r3, #1]
	return false;
    198e:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    1990:	2b00      	cmp	r3, #0
    1992:	d000      	beq.n	1996 <udc_process_setup+0x7a>
    1994:	e1a8      	b.n	1ce8 <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1996:	2a02      	cmp	r2, #2
    1998:	d1d5      	bne.n	1946 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    199a:	4b8d      	ldr	r3, [pc, #564]	; (1bd0 <udc_process_setup+0x2b4>)
    199c:	7918      	ldrb	r0, [r3, #4]
    199e:	4b8d      	ldr	r3, [pc, #564]	; (1bd4 <udc_process_setup+0x2b8>)
    19a0:	4798      	blx	r3
    19a2:	4b8d      	ldr	r3, [pc, #564]	; (1bd8 <udc_process_setup+0x2bc>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    19a4:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    19a6:	2102      	movs	r1, #2
    19a8:	0018      	movs	r0, r3
    19aa:	4b8c      	ldr	r3, [pc, #560]	; (1bdc <udc_process_setup+0x2c0>)
    19ac:	4798      	blx	r3
    19ae:	e0ff      	b.n	1bb0 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    19b0:	2a02      	cmp	r2, #2
    19b2:	d1c8      	bne.n	1946 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    19b4:	3102      	adds	r1, #2
    19b6:	488a      	ldr	r0, [pc, #552]	; (1be0 <udc_process_setup+0x2c4>)
    19b8:	4b88      	ldr	r3, [pc, #544]	; (1bdc <udc_process_setup+0x2c0>)
    19ba:	4798      	blx	r3
    19bc:	e0f8      	b.n	1bb0 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    19be:	4b84      	ldr	r3, [pc, #528]	; (1bd0 <udc_process_setup+0x2b4>)
    19c0:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    19c2:	0a13      	lsrs	r3, r2, #8
    19c4:	2b02      	cmp	r3, #2
    19c6:	d023      	beq.n	1a10 <udc_process_setup+0xf4>
    19c8:	b2d9      	uxtb	r1, r3
    19ca:	2902      	cmp	r1, #2
    19cc:	d90f      	bls.n	19ee <udc_process_setup+0xd2>
    19ce:	2b03      	cmp	r3, #3
    19d0:	d034      	beq.n	1a3c <udc_process_setup+0x120>
    19d2:	2b0f      	cmp	r3, #15
    19d4:	d000      	beq.n	19d8 <udc_process_setup+0xbc>
    19d6:	e184      	b.n	1ce2 <udc_process_setup+0x3c6>
		if (udc_config.conf_bos == NULL) {
    19d8:	4b82      	ldr	r3, [pc, #520]	; (1be4 <udc_process_setup+0x2c8>)
    19da:	6898      	ldr	r0, [r3, #8]
    19dc:	2800      	cmp	r0, #0
    19de:	d0b2      	beq.n	1946 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    19e0:	7883      	ldrb	r3, [r0, #2]
    19e2:	78c1      	ldrb	r1, [r0, #3]
    19e4:	0209      	lsls	r1, r1, #8
    19e6:	4319      	orrs	r1, r3
    19e8:	4b7c      	ldr	r3, [pc, #496]	; (1bdc <udc_process_setup+0x2c0>)
    19ea:	4798      	blx	r3
    19ec:	e007      	b.n	19fe <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    19ee:	2b01      	cmp	r3, #1
    19f0:	d000      	beq.n	19f4 <udc_process_setup+0xd8>
    19f2:	e176      	b.n	1ce2 <udc_process_setup+0x3c6>
				(uint8_t *) udc_config.confdev_lsfs,
    19f4:	4b7b      	ldr	r3, [pc, #492]	; (1be4 <udc_process_setup+0x2c8>)
    19f6:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    19f8:	7801      	ldrb	r1, [r0, #0]
    19fa:	4b78      	ldr	r3, [pc, #480]	; (1bdc <udc_process_setup+0x2c0>)
    19fc:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    19fe:	4b74      	ldr	r3, [pc, #464]	; (1bd0 <udc_process_setup+0x2b4>)
    1a00:	88da      	ldrh	r2, [r3, #6]
    1a02:	899b      	ldrh	r3, [r3, #12]
    1a04:	4293      	cmp	r3, r2
    1a06:	d800      	bhi.n	1a0a <udc_process_setup+0xee>
    1a08:	e0d2      	b.n	1bb0 <udc_process_setup+0x294>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1a0a:	4b71      	ldr	r3, [pc, #452]	; (1bd0 <udc_process_setup+0x2b4>)
    1a0c:	819a      	strh	r2, [r3, #12]
    1a0e:	e0cf      	b.n	1bb0 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1a10:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    1a12:	4b74      	ldr	r3, [pc, #464]	; (1be4 <udc_process_setup+0x2c8>)
    1a14:	681b      	ldr	r3, [r3, #0]
    1a16:	7c5b      	ldrb	r3, [r3, #17]
    1a18:	4293      	cmp	r3, r2
    1a1a:	d800      	bhi.n	1a1e <udc_process_setup+0x102>
    1a1c:	e793      	b.n	1946 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1a1e:	4b71      	ldr	r3, [pc, #452]	; (1be4 <udc_process_setup+0x2c8>)
    1a20:	685b      	ldr	r3, [r3, #4]
    1a22:	00d2      	lsls	r2, r2, #3
    1a24:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    1a26:	7883      	ldrb	r3, [r0, #2]
    1a28:	78c1      	ldrb	r1, [r0, #3]
    1a2a:	0209      	lsls	r1, r1, #8
    1a2c:	4319      	orrs	r1, r3
    1a2e:	4b6b      	ldr	r3, [pc, #428]	; (1bdc <udc_process_setup+0x2c0>)
    1a30:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1a32:	4b67      	ldr	r3, [pc, #412]	; (1bd0 <udc_process_setup+0x2b4>)
    1a34:	689b      	ldr	r3, [r3, #8]
    1a36:	2202      	movs	r2, #2
    1a38:	705a      	strb	r2, [r3, #1]
    1a3a:	e7e0      	b.n	19fe <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1a3c:	23ff      	movs	r3, #255	; 0xff
    1a3e:	401a      	ands	r2, r3
    1a40:	2a01      	cmp	r2, #1
    1a42:	d020      	beq.n	1a86 <udc_process_setup+0x16a>
    1a44:	2a00      	cmp	r2, #0
    1a46:	d019      	beq.n	1a7c <udc_process_setup+0x160>
    1a48:	2a02      	cmp	r2, #2
    1a4a:	d100      	bne.n	1a4e <udc_process_setup+0x132>
    1a4c:	e178      	b.n	1d40 <udc_process_setup+0x424>
    1a4e:	2a03      	cmp	r2, #3
    1a50:	d000      	beq.n	1a54 <udc_process_setup+0x138>
    1a52:	e771      	b.n	1938 <udc_process_setup+0x1c>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1a54:	210c      	movs	r1, #12
		str = udc_get_string_serial_name();
    1a56:	4c64      	ldr	r4, [pc, #400]	; (1be8 <udc_process_setup+0x2cc>)
    1a58:	4a64      	ldr	r2, [pc, #400]	; (1bec <udc_process_setup+0x2d0>)
    1a5a:	3202      	adds	r2, #2
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1a5c:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1a5e:	5ce0      	ldrb	r0, [r4, r3]
    1a60:	8010      	strh	r0, [r2, #0]
    1a62:	3301      	adds	r3, #1
    1a64:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    1a66:	b2d8      	uxtb	r0, r3
    1a68:	4281      	cmp	r1, r0
    1a6a:	d8f8      	bhi.n	1a5e <udc_process_setup+0x142>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1a6c:	0049      	lsls	r1, r1, #1
    1a6e:	3102      	adds	r1, #2
    1a70:	485e      	ldr	r0, [pc, #376]	; (1bec <udc_process_setup+0x2d0>)
    1a72:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    1a74:	b289      	uxth	r1, r1
    1a76:	4b59      	ldr	r3, [pc, #356]	; (1bdc <udc_process_setup+0x2c0>)
    1a78:	4798      	blx	r3
    1a7a:	e7c0      	b.n	19fe <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1a7c:	2104      	movs	r1, #4
    1a7e:	485c      	ldr	r0, [pc, #368]	; (1bf0 <udc_process_setup+0x2d4>)
    1a80:	4b56      	ldr	r3, [pc, #344]	; (1bdc <udc_process_setup+0x2c0>)
    1a82:	4798      	blx	r3
    1a84:	e7bb      	b.n	19fe <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    1a86:	4c5b      	ldr	r4, [pc, #364]	; (1bf4 <udc_process_setup+0x2d8>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1a88:	2109      	movs	r1, #9
    1a8a:	e7e5      	b.n	1a58 <udc_process_setup+0x13c>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1a8c:	2a01      	cmp	r2, #1
    1a8e:	d000      	beq.n	1a92 <udc_process_setup+0x176>
    1a90:	e759      	b.n	1946 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    1a92:	2101      	movs	r1, #1
    1a94:	4858      	ldr	r0, [pc, #352]	; (1bf8 <udc_process_setup+0x2dc>)
    1a96:	4b51      	ldr	r3, [pc, #324]	; (1bdc <udc_process_setup+0x2c0>)
    1a98:	4798      	blx	r3
    1a9a:	e089      	b.n	1bb0 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1a9c:	494c      	ldr	r1, [pc, #304]	; (1bd0 <udc_process_setup+0x2b4>)
    1a9e:	7849      	ldrb	r1, [r1, #1]
    1aa0:	290a      	cmp	r1, #10
    1aa2:	d000      	beq.n	1aa6 <udc_process_setup+0x18a>
    1aa4:	e76f      	b.n	1986 <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1aa6:	2a01      	cmp	r2, #1
    1aa8:	d000      	beq.n	1aac <udc_process_setup+0x190>
    1aaa:	e0c3      	b.n	1c34 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    1aac:	4b52      	ldr	r3, [pc, #328]	; (1bf8 <udc_process_setup+0x2dc>)
    1aae:	781b      	ldrb	r3, [r3, #0]
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d100      	bne.n	1ab6 <udc_process_setup+0x19a>
    1ab4:	e0be      	b.n	1c34 <udc_process_setup+0x318>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1ab6:	4b46      	ldr	r3, [pc, #280]	; (1bd0 <udc_process_setup+0x2b4>)
    1ab8:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1aba:	4b50      	ldr	r3, [pc, #320]	; (1bfc <udc_process_setup+0x2e0>)
    1abc:	681d      	ldr	r5, [r3, #0]
    1abe:	682b      	ldr	r3, [r5, #0]
    1ac0:	791b      	ldrb	r3, [r3, #4]
    1ac2:	42a3      	cmp	r3, r4
    1ac4:	d800      	bhi.n	1ac8 <udc_process_setup+0x1ac>
    1ac6:	e0b5      	b.n	1c34 <udc_process_setup+0x318>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1ac8:	2100      	movs	r1, #0
    1aca:	0020      	movs	r0, r4
    1acc:	4b4c      	ldr	r3, [pc, #304]	; (1c00 <udc_process_setup+0x2e4>)
    1ace:	4798      	blx	r3
    1ad0:	2800      	cmp	r0, #0
    1ad2:	d100      	bne.n	1ad6 <udc_process_setup+0x1ba>
    1ad4:	e730      	b.n	1938 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1ad6:	686b      	ldr	r3, [r5, #4]
    1ad8:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    1ada:	58e3      	ldr	r3, [r4, r3]
    1adc:	68db      	ldr	r3, [r3, #12]
    1ade:	4798      	blx	r3
    1ae0:	4b48      	ldr	r3, [pc, #288]	; (1c04 <udc_process_setup+0x2e8>)
    1ae2:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    1ae4:	2101      	movs	r1, #1
    1ae6:	0018      	movs	r0, r3
    1ae8:	4b3c      	ldr	r3, [pc, #240]	; (1bdc <udc_process_setup+0x2c0>)
    1aea:	4798      	blx	r3
    1aec:	e060      	b.n	1bb0 <udc_process_setup+0x294>
    1aee:	221f      	movs	r2, #31
    1af0:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1af2:	d15f      	bne.n	1bb4 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
    1af4:	4a36      	ldr	r2, [pc, #216]	; (1bd0 <udc_process_setup+0x2b4>)
    1af6:	7852      	ldrb	r2, [r2, #1]
    1af8:	2a03      	cmp	r2, #3
    1afa:	d100      	bne.n	1afe <udc_process_setup+0x1e2>
    1afc:	e0f3      	b.n	1ce6 <udc_process_setup+0x3ca>
    1afe:	b2d1      	uxtb	r1, r2
    1b00:	2903      	cmp	r1, #3
    1b02:	d93b      	bls.n	1b7c <udc_process_setup+0x260>
    1b04:	2a05      	cmp	r2, #5
    1b06:	d04b      	beq.n	1ba0 <udc_process_setup+0x284>
    1b08:	2a09      	cmp	r2, #9
    1b0a:	d153      	bne.n	1bb4 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1b0c:	4b30      	ldr	r3, [pc, #192]	; (1bd0 <udc_process_setup+0x2b4>)
    1b0e:	88db      	ldrh	r3, [r3, #6]
    1b10:	2b00      	cmp	r3, #0
    1b12:	d000      	beq.n	1b16 <udc_process_setup+0x1fa>
    1b14:	e717      	b.n	1946 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    1b16:	4b3c      	ldr	r3, [pc, #240]	; (1c08 <udc_process_setup+0x2ec>)
    1b18:	4798      	blx	r3
    1b1a:	2800      	cmp	r0, #0
    1b1c:	d100      	bne.n	1b20 <udc_process_setup+0x204>
    1b1e:	e70b      	b.n	1938 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1b20:	4b2b      	ldr	r3, [pc, #172]	; (1bd0 <udc_process_setup+0x2b4>)
    1b22:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1b24:	4b2f      	ldr	r3, [pc, #188]	; (1be4 <udc_process_setup+0x2c8>)
    1b26:	681b      	ldr	r3, [r3, #0]
    1b28:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1b2a:	429a      	cmp	r2, r3
    1b2c:	dd00      	ble.n	1b30 <udc_process_setup+0x214>
    1b2e:	e703      	b.n	1938 <udc_process_setup+0x1c>
	udc_reset();
    1b30:	4b36      	ldr	r3, [pc, #216]	; (1c0c <udc_process_setup+0x2f0>)
    1b32:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1b34:	4b26      	ldr	r3, [pc, #152]	; (1bd0 <udc_process_setup+0x2b4>)
    1b36:	789b      	ldrb	r3, [r3, #2]
    1b38:	4a2f      	ldr	r2, [pc, #188]	; (1bf8 <udc_process_setup+0x2dc>)
    1b3a:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    1b3c:	2b00      	cmp	r3, #0
    1b3e:	d037      	beq.n	1bb0 <udc_process_setup+0x294>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1b40:	4a33      	ldr	r2, [pc, #204]	; (1c10 <udc_process_setup+0x2f4>)
    1b42:	4694      	mov	ip, r2
    1b44:	4463      	add	r3, ip
    1b46:	00db      	lsls	r3, r3, #3
    1b48:	4a26      	ldr	r2, [pc, #152]	; (1be4 <udc_process_setup+0x2c8>)
    1b4a:	6852      	ldr	r2, [r2, #4]
    1b4c:	18d3      	adds	r3, r2, r3
    1b4e:	4a2b      	ldr	r2, [pc, #172]	; (1bfc <udc_process_setup+0x2e0>)
    1b50:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b52:	681b      	ldr	r3, [r3, #0]
    1b54:	791b      	ldrb	r3, [r3, #4]
    1b56:	2b00      	cmp	r3, #0
    1b58:	d02a      	beq.n	1bb0 <udc_process_setup+0x294>
    1b5a:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    1b5c:	4d2d      	ldr	r5, [pc, #180]	; (1c14 <udc_process_setup+0x2f8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b5e:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    1b60:	2100      	movs	r1, #0
    1b62:	0020      	movs	r0, r4
    1b64:	47a8      	blx	r5
    1b66:	2800      	cmp	r0, #0
    1b68:	d100      	bne.n	1b6c <udc_process_setup+0x250>
    1b6a:	e6e5      	b.n	1938 <udc_process_setup+0x1c>
			iface_num++) {
    1b6c:	3401      	adds	r4, #1
    1b6e:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b70:	6833      	ldr	r3, [r6, #0]
    1b72:	681b      	ldr	r3, [r3, #0]
    1b74:	791b      	ldrb	r3, [r3, #4]
    1b76:	42a3      	cmp	r3, r4
    1b78:	d8f2      	bhi.n	1b60 <udc_process_setup+0x244>
    1b7a:	e019      	b.n	1bb0 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1b7c:	2a01      	cmp	r2, #1
    1b7e:	d119      	bne.n	1bb4 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1b80:	4b13      	ldr	r3, [pc, #76]	; (1bd0 <udc_process_setup+0x2b4>)
    1b82:	88db      	ldrh	r3, [r3, #6]
    1b84:	2b00      	cmp	r3, #0
    1b86:	d000      	beq.n	1b8a <udc_process_setup+0x26e>
    1b88:	e6dd      	b.n	1946 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1b8a:	4b11      	ldr	r3, [pc, #68]	; (1bd0 <udc_process_setup+0x2b4>)
    1b8c:	885b      	ldrh	r3, [r3, #2]
    1b8e:	2b01      	cmp	r3, #1
    1b90:	d000      	beq.n	1b94 <udc_process_setup+0x278>
    1b92:	e6d8      	b.n	1946 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1b94:	4a12      	ldr	r2, [pc, #72]	; (1be0 <udc_process_setup+0x2c4>)
    1b96:	8813      	ldrh	r3, [r2, #0]
    1b98:	2102      	movs	r1, #2
    1b9a:	438b      	bics	r3, r1
    1b9c:	8013      	strh	r3, [r2, #0]
    1b9e:	e007      	b.n	1bb0 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength) {
    1ba0:	4b0b      	ldr	r3, [pc, #44]	; (1bd0 <udc_process_setup+0x2b4>)
    1ba2:	88db      	ldrh	r3, [r3, #6]
    1ba4:	2b00      	cmp	r3, #0
    1ba6:	d000      	beq.n	1baa <udc_process_setup+0x28e>
    1ba8:	e6cd      	b.n	1946 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    1baa:	4a1b      	ldr	r2, [pc, #108]	; (1c18 <udc_process_setup+0x2fc>)
    1bac:	4b08      	ldr	r3, [pc, #32]	; (1bd0 <udc_process_setup+0x2b4>)
    1bae:	611a      	str	r2, [r3, #16]
			return true;
    1bb0:	2001      	movs	r0, #1
    1bb2:	e6d0      	b.n	1956 <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1bb4:	2b01      	cmp	r3, #1
    1bb6:	d031      	beq.n	1c1c <udc_process_setup+0x300>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1bb8:	2b02      	cmp	r3, #2
    1bba:	d000      	beq.n	1bbe <udc_process_setup+0x2a2>
    1bbc:	e6bc      	b.n	1938 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1bbe:	4b04      	ldr	r3, [pc, #16]	; (1bd0 <udc_process_setup+0x2b4>)
    1bc0:	785b      	ldrb	r3, [r3, #1]
    1bc2:	2b01      	cmp	r3, #1
    1bc4:	d06c      	beq.n	1ca0 <udc_process_setup+0x384>
    1bc6:	2b03      	cmp	r3, #3
    1bc8:	d100      	bne.n	1bcc <udc_process_setup+0x2b0>
    1bca:	e078      	b.n	1cbe <udc_process_setup+0x3a2>
	return false;
    1bcc:	2000      	movs	r0, #0
    1bce:	e08b      	b.n	1ce8 <udc_process_setup+0x3cc>
    1bd0:	20000534 	.word	0x20000534
    1bd4:	000030b9 	.word	0x000030b9
    1bd8:	200001e8 	.word	0x200001e8
    1bdc:	00003491 	.word	0x00003491
    1be0:	200001e6 	.word	0x200001e6
    1be4:	200000ac 	.word	0x200000ac
    1be8:	00007744 	.word	0x00007744
    1bec:	2000007c 	.word	0x2000007c
    1bf0:	20000098 	.word	0x20000098
    1bf4:	2000009c 	.word	0x2000009c
    1bf8:	200001f0 	.word	0x200001f0
    1bfc:	200001f4 	.word	0x200001f4
    1c00:	00001749 	.word	0x00001749
    1c04:	200001ec 	.word	0x200001ec
    1c08:	00003481 	.word	0x00003481
    1c0c:	0000188d 	.word	0x0000188d
    1c10:	1fffffff 	.word	0x1fffffff
    1c14:	00001829 	.word	0x00001829
    1c18:	00001731 	.word	0x00001731
			switch (udd_g_ctrlreq.req.bRequest) {
    1c1c:	4a4a      	ldr	r2, [pc, #296]	; (1d48 <udc_process_setup+0x42c>)
    1c1e:	7852      	ldrb	r2, [r2, #1]
    1c20:	2a0b      	cmp	r2, #11
    1c22:	d1c9      	bne.n	1bb8 <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
    1c24:	4b48      	ldr	r3, [pc, #288]	; (1d48 <udc_process_setup+0x42c>)
    1c26:	88db      	ldrh	r3, [r3, #6]
    1c28:	2b00      	cmp	r3, #0
    1c2a:	d103      	bne.n	1c34 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    1c2c:	4b47      	ldr	r3, [pc, #284]	; (1d4c <udc_process_setup+0x430>)
    1c2e:	781b      	ldrb	r3, [r3, #0]
    1c30:	2b00      	cmp	r3, #0
    1c32:	d127      	bne.n	1c84 <udc_process_setup+0x368>
	if (0 == udc_num_configuration) {
    1c34:	4b45      	ldr	r3, [pc, #276]	; (1d4c <udc_process_setup+0x430>)
    1c36:	781b      	ldrb	r3, [r3, #0]
	return false;
    1c38:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    1c3a:	2b00      	cmp	r3, #0
    1c3c:	d100      	bne.n	1c40 <udc_process_setup+0x324>
    1c3e:	e68a      	b.n	1956 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c40:	4b41      	ldr	r3, [pc, #260]	; (1d48 <udc_process_setup+0x42c>)
    1c42:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1c44:	4b42      	ldr	r3, [pc, #264]	; (1d50 <udc_process_setup+0x434>)
    1c46:	681d      	ldr	r5, [r3, #0]
    1c48:	682b      	ldr	r3, [r5, #0]
    1c4a:	791b      	ldrb	r3, [r3, #4]
    1c4c:	42a3      	cmp	r3, r4
    1c4e:	d800      	bhi.n	1c52 <udc_process_setup+0x336>
    1c50:	e681      	b.n	1956 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1c52:	2100      	movs	r1, #0
    1c54:	0020      	movs	r0, r4
    1c56:	4b3f      	ldr	r3, [pc, #252]	; (1d54 <udc_process_setup+0x438>)
    1c58:	4798      	blx	r3
    1c5a:	2800      	cmp	r0, #0
    1c5c:	d100      	bne.n	1c60 <udc_process_setup+0x344>
    1c5e:	e672      	b.n	1946 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c60:	686b      	ldr	r3, [r5, #4]
    1c62:	00a2      	lsls	r2, r4, #2
    1c64:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c66:	68eb      	ldr	r3, [r5, #12]
    1c68:	4798      	blx	r3
    1c6a:	0001      	movs	r1, r0
    1c6c:	0020      	movs	r0, r4
    1c6e:	4b39      	ldr	r3, [pc, #228]	; (1d54 <udc_process_setup+0x438>)
    1c70:	4798      	blx	r3
    1c72:	2800      	cmp	r0, #0
    1c74:	d100      	bne.n	1c78 <udc_process_setup+0x35c>
    1c76:	e666      	b.n	1946 <udc_process_setup+0x2a>
	return udi_api->setup();
    1c78:	68ab      	ldr	r3, [r5, #8]
    1c7a:	4798      	blx	r3
		if (udc_req_iface()) {
    1c7c:	2800      	cmp	r0, #0
    1c7e:	d000      	beq.n	1c82 <udc_process_setup+0x366>
    1c80:	e669      	b.n	1956 <udc_process_setup+0x3a>
    1c82:	e660      	b.n	1946 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c84:	4b30      	ldr	r3, [pc, #192]	; (1d48 <udc_process_setup+0x42c>)
    1c86:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1c88:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    1c8a:	0028      	movs	r0, r5
    1c8c:	4b32      	ldr	r3, [pc, #200]	; (1d58 <udc_process_setup+0x43c>)
    1c8e:	4798      	blx	r3
    1c90:	2800      	cmp	r0, #0
    1c92:	d100      	bne.n	1c96 <udc_process_setup+0x37a>
    1c94:	e650      	b.n	1938 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    1c96:	b2e1      	uxtb	r1, r4
    1c98:	0028      	movs	r0, r5
    1c9a:	4b30      	ldr	r3, [pc, #192]	; (1d5c <udc_process_setup+0x440>)
    1c9c:	4798      	blx	r3
    1c9e:	e023      	b.n	1ce8 <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
    1ca0:	4b29      	ldr	r3, [pc, #164]	; (1d48 <udc_process_setup+0x42c>)
    1ca2:	88db      	ldrh	r3, [r3, #6]
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	d000      	beq.n	1caa <udc_process_setup+0x38e>
    1ca8:	e64d      	b.n	1946 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1caa:	4b27      	ldr	r3, [pc, #156]	; (1d48 <udc_process_setup+0x42c>)
    1cac:	885b      	ldrh	r3, [r3, #2]
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d000      	beq.n	1cb4 <udc_process_setup+0x398>
    1cb2:	e648      	b.n	1946 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1cb4:	4b24      	ldr	r3, [pc, #144]	; (1d48 <udc_process_setup+0x42c>)
    1cb6:	7918      	ldrb	r0, [r3, #4]
    1cb8:	4b29      	ldr	r3, [pc, #164]	; (1d60 <udc_process_setup+0x444>)
    1cba:	4798      	blx	r3
    1cbc:	e014      	b.n	1ce8 <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
    1cbe:	4b22      	ldr	r3, [pc, #136]	; (1d48 <udc_process_setup+0x42c>)
    1cc0:	88db      	ldrh	r3, [r3, #6]
    1cc2:	2b00      	cmp	r3, #0
    1cc4:	d000      	beq.n	1cc8 <udc_process_setup+0x3ac>
    1cc6:	e63e      	b.n	1946 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1cc8:	4b1f      	ldr	r3, [pc, #124]	; (1d48 <udc_process_setup+0x42c>)
    1cca:	885b      	ldrh	r3, [r3, #2]
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d000      	beq.n	1cd2 <udc_process_setup+0x3b6>
    1cd0:	e639      	b.n	1946 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1cd2:	4c1d      	ldr	r4, [pc, #116]	; (1d48 <udc_process_setup+0x42c>)
    1cd4:	7920      	ldrb	r0, [r4, #4]
    1cd6:	4b23      	ldr	r3, [pc, #140]	; (1d64 <udc_process_setup+0x448>)
    1cd8:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1cda:	7920      	ldrb	r0, [r4, #4]
    1cdc:	4b22      	ldr	r3, [pc, #136]	; (1d68 <udc_process_setup+0x44c>)
    1cde:	4798      	blx	r3
    1ce0:	e002      	b.n	1ce8 <udc_process_setup+0x3cc>
		return false;
    1ce2:	2000      	movs	r0, #0
    1ce4:	e000      	b.n	1ce8 <udc_process_setup+0x3cc>
				return udc_req_std_dev_set_feature();
    1ce6:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    1ce8:	2800      	cmp	r0, #0
    1cea:	d000      	beq.n	1cee <udc_process_setup+0x3d2>
    1cec:	e633      	b.n	1956 <udc_process_setup+0x3a>
    1cee:	e623      	b.n	1938 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    1cf0:	4b16      	ldr	r3, [pc, #88]	; (1d4c <udc_process_setup+0x430>)
    1cf2:	781b      	ldrb	r3, [r3, #0]
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d100      	bne.n	1cfa <udc_process_setup+0x3de>
    1cf8:	e62d      	b.n	1956 <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cfa:	4b15      	ldr	r3, [pc, #84]	; (1d50 <udc_process_setup+0x434>)
    1cfc:	681b      	ldr	r3, [r3, #0]
    1cfe:	681a      	ldr	r2, [r3, #0]
    1d00:	7912      	ldrb	r2, [r2, #4]
    1d02:	2a00      	cmp	r2, #0
    1d04:	d01a      	beq.n	1d3c <udc_process_setup+0x420>
    1d06:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1d08:	4e12      	ldr	r6, [pc, #72]	; (1d54 <udc_process_setup+0x438>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d0a:	4f11      	ldr	r7, [pc, #68]	; (1d50 <udc_process_setup+0x434>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d0c:	685b      	ldr	r3, [r3, #4]
    1d0e:	00aa      	lsls	r2, r5, #2
    1d10:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1d12:	68e3      	ldr	r3, [r4, #12]
    1d14:	4798      	blx	r3
    1d16:	0001      	movs	r1, r0
    1d18:	0028      	movs	r0, r5
    1d1a:	47b0      	blx	r6
    1d1c:	2800      	cmp	r0, #0
    1d1e:	d100      	bne.n	1d22 <udc_process_setup+0x406>
    1d20:	e619      	b.n	1956 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    1d22:	68a3      	ldr	r3, [r4, #8]
    1d24:	4798      	blx	r3
    1d26:	2800      	cmp	r0, #0
    1d28:	d000      	beq.n	1d2c <udc_process_setup+0x410>
    1d2a:	e614      	b.n	1956 <udc_process_setup+0x3a>
			iface_num++) {
    1d2c:	3501      	adds	r5, #1
    1d2e:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d30:	683b      	ldr	r3, [r7, #0]
    1d32:	681a      	ldr	r2, [r3, #0]
    1d34:	7912      	ldrb	r2, [r2, #4]
    1d36:	42aa      	cmp	r2, r5
    1d38:	d8e8      	bhi.n	1d0c <udc_process_setup+0x3f0>
    1d3a:	e60c      	b.n	1956 <udc_process_setup+0x3a>
	return false;
    1d3c:	2000      	movs	r0, #0
    1d3e:	e60a      	b.n	1956 <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1d40:	2103      	movs	r1, #3
		str = udc_string_product_name;
    1d42:	4c0a      	ldr	r4, [pc, #40]	; (1d6c <udc_process_setup+0x450>)
    1d44:	e688      	b.n	1a58 <udc_process_setup+0x13c>
    1d46:	46c0      	nop			; (mov r8, r8)
    1d48:	20000534 	.word	0x20000534
    1d4c:	200001f0 	.word	0x200001f0
    1d50:	200001f4 	.word	0x200001f4
    1d54:	00001749 	.word	0x00001749
    1d58:	000017bd 	.word	0x000017bd
    1d5c:	00001829 	.word	0x00001829
    1d60:	000031fd 	.word	0x000031fd
    1d64:	00002f0d 	.word	0x00002f0d
    1d68:	000030cd 	.word	0x000030cd
    1d6c:	200000a8 	.word	0x200000a8

00001d70 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1d70:	4a04      	ldr	r2, [pc, #16]	; (1d84 <_extint_enable+0x14>)
    1d72:	7813      	ldrb	r3, [r2, #0]
    1d74:	2102      	movs	r1, #2
    1d76:	430b      	orrs	r3, r1
    1d78:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1d7a:	7853      	ldrb	r3, [r2, #1]
    1d7c:	b25b      	sxtb	r3, r3
    1d7e:	2b00      	cmp	r3, #0
    1d80:	dbfb      	blt.n	1d7a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1d82:	4770      	bx	lr
    1d84:	40001800 	.word	0x40001800

00001d88 <_system_extint_init>:
{
    1d88:	b500      	push	{lr}
    1d8a:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    1d8c:	4a12      	ldr	r2, [pc, #72]	; (1dd8 <_system_extint_init+0x50>)
    1d8e:	6993      	ldr	r3, [r2, #24]
    1d90:	2140      	movs	r1, #64	; 0x40
    1d92:	430b      	orrs	r3, r1
    1d94:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1d96:	a901      	add	r1, sp, #4
    1d98:	2300      	movs	r3, #0
    1d9a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1d9c:	2005      	movs	r0, #5
    1d9e:	4b0f      	ldr	r3, [pc, #60]	; (1ddc <_system_extint_init+0x54>)
    1da0:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1da2:	2005      	movs	r0, #5
    1da4:	4b0e      	ldr	r3, [pc, #56]	; (1de0 <_system_extint_init+0x58>)
    1da6:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1da8:	4a0e      	ldr	r2, [pc, #56]	; (1de4 <_system_extint_init+0x5c>)
    1daa:	7813      	ldrb	r3, [r2, #0]
    1dac:	2101      	movs	r1, #1
    1dae:	430b      	orrs	r3, r1
    1db0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1db2:	7853      	ldrb	r3, [r2, #1]
    1db4:	b25b      	sxtb	r3, r3
    1db6:	2b00      	cmp	r3, #0
    1db8:	dbfb      	blt.n	1db2 <_system_extint_init+0x2a>
    1dba:	4b0b      	ldr	r3, [pc, #44]	; (1de8 <_system_extint_init+0x60>)
    1dbc:	0019      	movs	r1, r3
    1dbe:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1dc0:	2200      	movs	r2, #0
    1dc2:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1dc4:	4299      	cmp	r1, r3
    1dc6:	d1fc      	bne.n	1dc2 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1dc8:	2210      	movs	r2, #16
    1dca:	4b08      	ldr	r3, [pc, #32]	; (1dec <_system_extint_init+0x64>)
    1dcc:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1dce:	4b08      	ldr	r3, [pc, #32]	; (1df0 <_system_extint_init+0x68>)
    1dd0:	4798      	blx	r3
}
    1dd2:	b003      	add	sp, #12
    1dd4:	bd00      	pop	{pc}
    1dd6:	46c0      	nop			; (mov r8, r8)
    1dd8:	40000400 	.word	0x40000400
    1ddc:	000064ed 	.word	0x000064ed
    1de0:	00006461 	.word	0x00006461
    1de4:	40001800 	.word	0x40001800
    1de8:	200002f4 	.word	0x200002f4
    1dec:	e000e100 	.word	0xe000e100
    1df0:	00001d71 	.word	0x00001d71

00001df4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    1df4:	2300      	movs	r3, #0
    1df6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    1df8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1dfa:	2201      	movs	r2, #1
    1dfc:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    1dfe:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    1e00:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1e02:	3302      	adds	r3, #2
    1e04:	72c3      	strb	r3, [r0, #11]
}
    1e06:	4770      	bx	lr

00001e08 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1e08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e0a:	b083      	sub	sp, #12
    1e0c:	0005      	movs	r5, r0
    1e0e:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1e10:	a901      	add	r1, sp, #4
    1e12:	2300      	movs	r3, #0
    1e14:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1e16:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    1e18:	7923      	ldrb	r3, [r4, #4]
    1e1a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1e1c:	7a23      	ldrb	r3, [r4, #8]
    1e1e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1e20:	7820      	ldrb	r0, [r4, #0]
    1e22:	4b15      	ldr	r3, [pc, #84]	; (1e78 <extint_chan_set_config+0x70>)
    1e24:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1e26:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    1e28:	2d1f      	cmp	r5, #31
    1e2a:	d800      	bhi.n	1e2e <extint_chan_set_config+0x26>
		return eics[eic_index];
    1e2c:	4813      	ldr	r0, [pc, #76]	; (1e7c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    1e2e:	2207      	movs	r2, #7
    1e30:	402a      	ands	r2, r5
    1e32:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    1e34:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    1e36:	7aa3      	ldrb	r3, [r4, #10]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d001      	beq.n	1e40 <extint_chan_set_config+0x38>
    1e3c:	2308      	movs	r3, #8
    1e3e:	431f      	orrs	r7, r3
    1e40:	08eb      	lsrs	r3, r5, #3
    1e42:	009b      	lsls	r3, r3, #2
    1e44:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    1e46:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1e48:	260f      	movs	r6, #15
    1e4a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    1e4c:	43b1      	bics	r1, r6
			(new_config << config_pos);
    1e4e:	4097      	lsls	r7, r2
    1e50:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1e52:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    1e54:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    1e56:	7a63      	ldrb	r3, [r4, #9]
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d106      	bne.n	1e6a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    1e5c:	6943      	ldr	r3, [r0, #20]
    1e5e:	2201      	movs	r2, #1
    1e60:	40aa      	lsls	r2, r5
    1e62:	4393      	bics	r3, r2
    1e64:	6143      	str	r3, [r0, #20]
	}
}
    1e66:	b003      	add	sp, #12
    1e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    1e6a:	6942      	ldr	r2, [r0, #20]
    1e6c:	2301      	movs	r3, #1
    1e6e:	40ab      	lsls	r3, r5
    1e70:	4313      	orrs	r3, r2
    1e72:	6143      	str	r3, [r0, #20]
    1e74:	e7f7      	b.n	1e66 <extint_chan_set_config+0x5e>
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	000065e5 	.word	0x000065e5
    1e7c:	40001800 	.word	0x40001800

00001e80 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1e80:	4770      	bx	lr
	...

00001e84 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1e84:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1e86:	4b0a      	ldr	r3, [pc, #40]	; (1eb0 <_sercom_set_handler+0x2c>)
    1e88:	781b      	ldrb	r3, [r3, #0]
    1e8a:	2b00      	cmp	r3, #0
    1e8c:	d10c      	bne.n	1ea8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1e8e:	4f09      	ldr	r7, [pc, #36]	; (1eb4 <_sercom_set_handler+0x30>)
    1e90:	4e09      	ldr	r6, [pc, #36]	; (1eb8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1e92:	4d0a      	ldr	r5, [pc, #40]	; (1ebc <_sercom_set_handler+0x38>)
    1e94:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1e96:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1e98:	195a      	adds	r2, r3, r5
    1e9a:	6014      	str	r4, [r2, #0]
    1e9c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e9e:	2b18      	cmp	r3, #24
    1ea0:	d1f9      	bne.n	1e96 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1ea2:	2201      	movs	r2, #1
    1ea4:	4b02      	ldr	r3, [pc, #8]	; (1eb0 <_sercom_set_handler+0x2c>)
    1ea6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1ea8:	0080      	lsls	r0, r0, #2
    1eaa:	4b02      	ldr	r3, [pc, #8]	; (1eb4 <_sercom_set_handler+0x30>)
    1eac:	50c1      	str	r1, [r0, r3]
}
    1eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1eb0:	200001fc 	.word	0x200001fc
    1eb4:	20000200 	.word	0x20000200
    1eb8:	00001e81 	.word	0x00001e81
    1ebc:	20000334 	.word	0x20000334

00001ec0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1ec0:	b500      	push	{lr}
    1ec2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1ec4:	2309      	movs	r3, #9
    1ec6:	466a      	mov	r2, sp
    1ec8:	7013      	strb	r3, [r2, #0]
    1eca:	3301      	adds	r3, #1
    1ecc:	7053      	strb	r3, [r2, #1]
    1ece:	3301      	adds	r3, #1
    1ed0:	7093      	strb	r3, [r2, #2]
    1ed2:	3301      	adds	r3, #1
    1ed4:	70d3      	strb	r3, [r2, #3]
    1ed6:	3301      	adds	r3, #1
    1ed8:	7113      	strb	r3, [r2, #4]
    1eda:	3301      	adds	r3, #1
    1edc:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1ede:	4b03      	ldr	r3, [pc, #12]	; (1eec <_sercom_get_interrupt_vector+0x2c>)
    1ee0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1ee2:	466b      	mov	r3, sp
    1ee4:	5618      	ldrsb	r0, [r3, r0]
}
    1ee6:	b003      	add	sp, #12
    1ee8:	bd00      	pop	{pc}
    1eea:	46c0      	nop			; (mov r8, r8)
    1eec:	00004fd1 	.word	0x00004fd1

00001ef0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1ef0:	b510      	push	{r4, lr}
    1ef2:	4b02      	ldr	r3, [pc, #8]	; (1efc <SERCOM0_Handler+0xc>)
    1ef4:	681b      	ldr	r3, [r3, #0]
    1ef6:	2000      	movs	r0, #0
    1ef8:	4798      	blx	r3
    1efa:	bd10      	pop	{r4, pc}
    1efc:	20000200 	.word	0x20000200

00001f00 <SERCOM1_Handler>:
    1f00:	b510      	push	{r4, lr}
    1f02:	4b02      	ldr	r3, [pc, #8]	; (1f0c <SERCOM1_Handler+0xc>)
    1f04:	685b      	ldr	r3, [r3, #4]
    1f06:	2001      	movs	r0, #1
    1f08:	4798      	blx	r3
    1f0a:	bd10      	pop	{r4, pc}
    1f0c:	20000200 	.word	0x20000200

00001f10 <SERCOM2_Handler>:
    1f10:	b510      	push	{r4, lr}
    1f12:	4b02      	ldr	r3, [pc, #8]	; (1f1c <SERCOM2_Handler+0xc>)
    1f14:	689b      	ldr	r3, [r3, #8]
    1f16:	2002      	movs	r0, #2
    1f18:	4798      	blx	r3
    1f1a:	bd10      	pop	{r4, pc}
    1f1c:	20000200 	.word	0x20000200

00001f20 <SERCOM3_Handler>:
    1f20:	b510      	push	{r4, lr}
    1f22:	4b02      	ldr	r3, [pc, #8]	; (1f2c <SERCOM3_Handler+0xc>)
    1f24:	68db      	ldr	r3, [r3, #12]
    1f26:	2003      	movs	r0, #3
    1f28:	4798      	blx	r3
    1f2a:	bd10      	pop	{r4, pc}
    1f2c:	20000200 	.word	0x20000200

00001f30 <SERCOM4_Handler>:
    1f30:	b510      	push	{r4, lr}
    1f32:	4b02      	ldr	r3, [pc, #8]	; (1f3c <SERCOM4_Handler+0xc>)
    1f34:	691b      	ldr	r3, [r3, #16]
    1f36:	2004      	movs	r0, #4
    1f38:	4798      	blx	r3
    1f3a:	bd10      	pop	{r4, pc}
    1f3c:	20000200 	.word	0x20000200

00001f40 <SERCOM5_Handler>:
    1f40:	b510      	push	{r4, lr}
    1f42:	4b02      	ldr	r3, [pc, #8]	; (1f4c <SERCOM5_Handler+0xc>)
    1f44:	695b      	ldr	r3, [r3, #20]
    1f46:	2005      	movs	r0, #5
    1f48:	4798      	blx	r3
    1f4a:	bd10      	pop	{r4, pc}
    1f4c:	20000200 	.word	0x20000200

00001f50 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f52:	46de      	mov	lr, fp
    1f54:	4657      	mov	r7, sl
    1f56:	464e      	mov	r6, r9
    1f58:	4645      	mov	r5, r8
    1f5a:	b5e0      	push	{r5, r6, r7, lr}
    1f5c:	b091      	sub	sp, #68	; 0x44
    1f5e:	0005      	movs	r5, r0
    1f60:	000c      	movs	r4, r1
    1f62:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1f64:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1f66:	0008      	movs	r0, r1
    1f68:	4bbc      	ldr	r3, [pc, #752]	; (225c <STACK_SIZE+0x25c>)
    1f6a:	4798      	blx	r3
    1f6c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1f6e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1f70:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1f72:	07db      	lsls	r3, r3, #31
    1f74:	d506      	bpl.n	1f84 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1f76:	b011      	add	sp, #68	; 0x44
    1f78:	bc3c      	pop	{r2, r3, r4, r5}
    1f7a:	4690      	mov	r8, r2
    1f7c:	4699      	mov	r9, r3
    1f7e:	46a2      	mov	sl, r4
    1f80:	46ab      	mov	fp, r5
    1f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1f84:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1f86:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1f88:	079b      	lsls	r3, r3, #30
    1f8a:	d4f4      	bmi.n	1f76 <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    1f8c:	49b4      	ldr	r1, [pc, #720]	; (2260 <STACK_SIZE+0x260>)
    1f8e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1f90:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1f92:	2301      	movs	r3, #1
    1f94:	40bb      	lsls	r3, r7
    1f96:	4303      	orrs	r3, r0
    1f98:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1f9a:	a90f      	add	r1, sp, #60	; 0x3c
    1f9c:	272d      	movs	r7, #45	; 0x2d
    1f9e:	5df3      	ldrb	r3, [r6, r7]
    1fa0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1fa2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1fa4:	b2d3      	uxtb	r3, r2
    1fa6:	9302      	str	r3, [sp, #8]
    1fa8:	0018      	movs	r0, r3
    1faa:	4bae      	ldr	r3, [pc, #696]	; (2264 <STACK_SIZE+0x264>)
    1fac:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1fae:	9802      	ldr	r0, [sp, #8]
    1fb0:	4bad      	ldr	r3, [pc, #692]	; (2268 <STACK_SIZE+0x268>)
    1fb2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1fb4:	5df0      	ldrb	r0, [r6, r7]
    1fb6:	2100      	movs	r1, #0
    1fb8:	4bac      	ldr	r3, [pc, #688]	; (226c <STACK_SIZE+0x26c>)
    1fba:	4798      	blx	r3
	module->character_size = config->character_size;
    1fbc:	7af3      	ldrb	r3, [r6, #11]
    1fbe:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1fc0:	2324      	movs	r3, #36	; 0x24
    1fc2:	5cf3      	ldrb	r3, [r6, r3]
    1fc4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1fc6:	2325      	movs	r3, #37	; 0x25
    1fc8:	5cf3      	ldrb	r3, [r6, r3]
    1fca:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1fcc:	7ef3      	ldrb	r3, [r6, #27]
    1fce:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1fd0:	7f33      	ldrb	r3, [r6, #28]
    1fd2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1fd4:	682b      	ldr	r3, [r5, #0]
    1fd6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1fd8:	0018      	movs	r0, r3
    1fda:	4ba0      	ldr	r3, [pc, #640]	; (225c <STACK_SIZE+0x25c>)
    1fdc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1fde:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1fe0:	2200      	movs	r2, #0
    1fe2:	230e      	movs	r3, #14
    1fe4:	a906      	add	r1, sp, #24
    1fe6:	468c      	mov	ip, r1
    1fe8:	4463      	add	r3, ip
    1fea:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1fec:	8a32      	ldrh	r2, [r6, #16]
    1fee:	9202      	str	r2, [sp, #8]
    1ff0:	2380      	movs	r3, #128	; 0x80
    1ff2:	01db      	lsls	r3, r3, #7
    1ff4:	429a      	cmp	r2, r3
    1ff6:	d100      	bne.n	1ffa <usart_init+0xaa>
    1ff8:	e09e      	b.n	2138 <STACK_SIZE+0x138>
    1ffa:	d90f      	bls.n	201c <STACK_SIZE+0x1c>
    1ffc:	23c0      	movs	r3, #192	; 0xc0
    1ffe:	01db      	lsls	r3, r3, #7
    2000:	9a02      	ldr	r2, [sp, #8]
    2002:	429a      	cmp	r2, r3
    2004:	d100      	bne.n	2008 <STACK_SIZE+0x8>
    2006:	e092      	b.n	212e <STACK_SIZE+0x12e>
    2008:	2380      	movs	r3, #128	; 0x80
    200a:	021b      	lsls	r3, r3, #8
    200c:	429a      	cmp	r2, r3
    200e:	d000      	beq.n	2012 <STACK_SIZE+0x12>
    2010:	e11f      	b.n	2252 <STACK_SIZE+0x252>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2012:	2303      	movs	r3, #3
    2014:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2016:	2300      	movs	r3, #0
    2018:	9307      	str	r3, [sp, #28]
    201a:	e008      	b.n	202e <STACK_SIZE+0x2e>
	switch (config->sample_rate) {
    201c:	2380      	movs	r3, #128	; 0x80
    201e:	019b      	lsls	r3, r3, #6
    2020:	429a      	cmp	r2, r3
    2022:	d000      	beq.n	2026 <STACK_SIZE+0x26>
    2024:	e115      	b.n	2252 <STACK_SIZE+0x252>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2026:	2310      	movs	r3, #16
    2028:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    202a:	3b0f      	subs	r3, #15
    202c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    202e:	6833      	ldr	r3, [r6, #0]
    2030:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2032:	68f3      	ldr	r3, [r6, #12]
    2034:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2036:	6973      	ldr	r3, [r6, #20]
    2038:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    203a:	7e33      	ldrb	r3, [r6, #24]
    203c:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    203e:	2326      	movs	r3, #38	; 0x26
    2040:	5cf3      	ldrb	r3, [r6, r3]
    2042:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2044:	6873      	ldr	r3, [r6, #4]
    2046:	4699      	mov	r9, r3
	switch (transfer_mode)
    2048:	2b00      	cmp	r3, #0
    204a:	d100      	bne.n	204e <STACK_SIZE+0x4e>
    204c:	e0a0      	b.n	2190 <STACK_SIZE+0x190>
    204e:	2380      	movs	r3, #128	; 0x80
    2050:	055b      	lsls	r3, r3, #21
    2052:	4599      	cmp	r9, r3
    2054:	d100      	bne.n	2058 <STACK_SIZE+0x58>
    2056:	e084      	b.n	2162 <STACK_SIZE+0x162>
	if(config->encoding_format_enable) {
    2058:	7e73      	ldrb	r3, [r6, #25]
    205a:	2b00      	cmp	r3, #0
    205c:	d002      	beq.n	2064 <STACK_SIZE+0x64>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    205e:	7eb3      	ldrb	r3, [r6, #26]
    2060:	4642      	mov	r2, r8
    2062:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2064:	682a      	ldr	r2, [r5, #0]
    2066:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2068:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    206a:	2b00      	cmp	r3, #0
    206c:	d1fc      	bne.n	2068 <STACK_SIZE+0x68>
	usart_hw->BAUD.reg = baud;
    206e:	330e      	adds	r3, #14
    2070:	aa06      	add	r2, sp, #24
    2072:	4694      	mov	ip, r2
    2074:	4463      	add	r3, ip
    2076:	881b      	ldrh	r3, [r3, #0]
    2078:	4642      	mov	r2, r8
    207a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    207c:	9b05      	ldr	r3, [sp, #20]
    207e:	9a03      	ldr	r2, [sp, #12]
    2080:	4313      	orrs	r3, r2
    2082:	9a04      	ldr	r2, [sp, #16]
    2084:	4313      	orrs	r3, r2
    2086:	464a      	mov	r2, r9
    2088:	4313      	orrs	r3, r2
    208a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    208c:	465b      	mov	r3, fp
    208e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2090:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2092:	4653      	mov	r3, sl
    2094:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2096:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2098:	2327      	movs	r3, #39	; 0x27
    209a:	5cf3      	ldrb	r3, [r6, r3]
    209c:	2b00      	cmp	r3, #0
    209e:	d101      	bne.n	20a4 <STACK_SIZE+0xa4>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    20a0:	3304      	adds	r3, #4
    20a2:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    20a4:	7e73      	ldrb	r3, [r6, #25]
    20a6:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    20a8:	7f32      	ldrb	r2, [r6, #28]
    20aa:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    20ac:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    20ae:	7f72      	ldrb	r2, [r6, #29]
    20b0:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    20b2:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    20b4:	2224      	movs	r2, #36	; 0x24
    20b6:	5cb2      	ldrb	r2, [r6, r2]
    20b8:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    20ba:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    20bc:	2225      	movs	r2, #37	; 0x25
    20be:	5cb2      	ldrb	r2, [r6, r2]
    20c0:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    20c2:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    20c4:	7ab1      	ldrb	r1, [r6, #10]
    20c6:	7af2      	ldrb	r2, [r6, #11]
    20c8:	4311      	orrs	r1, r2
    20ca:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    20cc:	8933      	ldrh	r3, [r6, #8]
    20ce:	2bff      	cmp	r3, #255	; 0xff
    20d0:	d100      	bne.n	20d4 <STACK_SIZE+0xd4>
    20d2:	e081      	b.n	21d8 <STACK_SIZE+0x1d8>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    20d4:	2280      	movs	r2, #128	; 0x80
    20d6:	0452      	lsls	r2, r2, #17
    20d8:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    20da:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    20dc:	232c      	movs	r3, #44	; 0x2c
    20de:	5cf3      	ldrb	r3, [r6, r3]
    20e0:	2b00      	cmp	r3, #0
    20e2:	d103      	bne.n	20ec <STACK_SIZE+0xec>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    20e4:	4b62      	ldr	r3, [pc, #392]	; (2270 <STACK_SIZE+0x270>)
    20e6:	789b      	ldrb	r3, [r3, #2]
    20e8:	079b      	lsls	r3, r3, #30
    20ea:	d501      	bpl.n	20f0 <STACK_SIZE+0xf0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    20ec:	2380      	movs	r3, #128	; 0x80
    20ee:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    20f0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    20f2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    20f4:	2b00      	cmp	r3, #0
    20f6:	d1fc      	bne.n	20f2 <STACK_SIZE+0xf2>
	usart_hw->CTRLB.reg = ctrlb;
    20f8:	4643      	mov	r3, r8
    20fa:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    20fc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    20fe:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2100:	2b00      	cmp	r3, #0
    2102:	d1fc      	bne.n	20fe <STACK_SIZE+0xfe>
	usart_hw->CTRLA.reg = ctrla;
    2104:	4643      	mov	r3, r8
    2106:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2108:	ab0e      	add	r3, sp, #56	; 0x38
    210a:	2280      	movs	r2, #128	; 0x80
    210c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    210e:	2200      	movs	r2, #0
    2110:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2112:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2114:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2116:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2118:	930a      	str	r3, [sp, #40]	; 0x28
    211a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    211c:	930b      	str	r3, [sp, #44]	; 0x2c
    211e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2120:	930c      	str	r3, [sp, #48]	; 0x30
    2122:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2124:	9302      	str	r3, [sp, #8]
    2126:	930d      	str	r3, [sp, #52]	; 0x34
    2128:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    212a:	ae0a      	add	r6, sp, #40	; 0x28
    212c:	e063      	b.n	21f6 <STACK_SIZE+0x1f6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    212e:	2308      	movs	r3, #8
    2130:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2132:	3b07      	subs	r3, #7
    2134:	9307      	str	r3, [sp, #28]
    2136:	e77a      	b.n	202e <STACK_SIZE+0x2e>
	ctrla = (uint32_t)config->data_order |
    2138:	6833      	ldr	r3, [r6, #0]
    213a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    213c:	68f3      	ldr	r3, [r6, #12]
    213e:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2140:	6973      	ldr	r3, [r6, #20]
    2142:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2144:	7e33      	ldrb	r3, [r6, #24]
    2146:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2148:	2326      	movs	r3, #38	; 0x26
    214a:	5cf3      	ldrb	r3, [r6, r3]
    214c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    214e:	6873      	ldr	r3, [r6, #4]
    2150:	4699      	mov	r9, r3
	switch (transfer_mode)
    2152:	2b00      	cmp	r3, #0
    2154:	d018      	beq.n	2188 <STACK_SIZE+0x188>
    2156:	2380      	movs	r3, #128	; 0x80
    2158:	055b      	lsls	r3, r3, #21
    215a:	4599      	cmp	r9, r3
    215c:	d001      	beq.n	2162 <STACK_SIZE+0x162>
	enum status_code status_code = STATUS_OK;
    215e:	2000      	movs	r0, #0
    2160:	e025      	b.n	21ae <STACK_SIZE+0x1ae>
			if (!config->use_external_clock) {
    2162:	2327      	movs	r3, #39	; 0x27
    2164:	5cf3      	ldrb	r3, [r6, r3]
    2166:	2b00      	cmp	r3, #0
    2168:	d000      	beq.n	216c <STACK_SIZE+0x16c>
    216a:	e775      	b.n	2058 <STACK_SIZE+0x58>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    216c:	6a33      	ldr	r3, [r6, #32]
    216e:	001f      	movs	r7, r3
    2170:	b2c0      	uxtb	r0, r0
    2172:	4b40      	ldr	r3, [pc, #256]	; (2274 <STACK_SIZE+0x274>)
    2174:	4798      	blx	r3
    2176:	0001      	movs	r1, r0
    2178:	220e      	movs	r2, #14
    217a:	ab06      	add	r3, sp, #24
    217c:	469c      	mov	ip, r3
    217e:	4462      	add	r2, ip
    2180:	0038      	movs	r0, r7
    2182:	4b3d      	ldr	r3, [pc, #244]	; (2278 <STACK_SIZE+0x278>)
    2184:	4798      	blx	r3
    2186:	e012      	b.n	21ae <STACK_SIZE+0x1ae>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2188:	2308      	movs	r3, #8
    218a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    218c:	2300      	movs	r3, #0
    218e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2190:	2327      	movs	r3, #39	; 0x27
    2192:	5cf3      	ldrb	r3, [r6, r3]
    2194:	2b00      	cmp	r3, #0
    2196:	d00e      	beq.n	21b6 <STACK_SIZE+0x1b6>
				status_code =
    2198:	9b06      	ldr	r3, [sp, #24]
    219a:	9300      	str	r3, [sp, #0]
    219c:	9b07      	ldr	r3, [sp, #28]
    219e:	220e      	movs	r2, #14
    21a0:	a906      	add	r1, sp, #24
    21a2:	468c      	mov	ip, r1
    21a4:	4462      	add	r2, ip
    21a6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    21a8:	6a30      	ldr	r0, [r6, #32]
    21aa:	4f34      	ldr	r7, [pc, #208]	; (227c <STACK_SIZE+0x27c>)
    21ac:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    21ae:	2800      	cmp	r0, #0
    21b0:	d000      	beq.n	21b4 <STACK_SIZE+0x1b4>
    21b2:	e6e0      	b.n	1f76 <usart_init+0x26>
    21b4:	e750      	b.n	2058 <STACK_SIZE+0x58>
						_sercom_get_async_baud_val(config->baudrate,
    21b6:	6a33      	ldr	r3, [r6, #32]
    21b8:	001f      	movs	r7, r3
    21ba:	b2c0      	uxtb	r0, r0
    21bc:	4b2d      	ldr	r3, [pc, #180]	; (2274 <STACK_SIZE+0x274>)
    21be:	4798      	blx	r3
    21c0:	0001      	movs	r1, r0
				status_code =
    21c2:	9b06      	ldr	r3, [sp, #24]
    21c4:	9300      	str	r3, [sp, #0]
    21c6:	9b07      	ldr	r3, [sp, #28]
    21c8:	220e      	movs	r2, #14
    21ca:	a806      	add	r0, sp, #24
    21cc:	4684      	mov	ip, r0
    21ce:	4462      	add	r2, ip
    21d0:	0038      	movs	r0, r7
    21d2:	4f2a      	ldr	r7, [pc, #168]	; (227c <STACK_SIZE+0x27c>)
    21d4:	47b8      	blx	r7
    21d6:	e7ea      	b.n	21ae <STACK_SIZE+0x1ae>
		if(config->lin_slave_enable) {
    21d8:	7ef3      	ldrb	r3, [r6, #27]
    21da:	2b00      	cmp	r3, #0
    21dc:	d100      	bne.n	21e0 <STACK_SIZE+0x1e0>
    21de:	e77d      	b.n	20dc <STACK_SIZE+0xdc>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    21e0:	2380      	movs	r3, #128	; 0x80
    21e2:	04db      	lsls	r3, r3, #19
    21e4:	431f      	orrs	r7, r3
    21e6:	e779      	b.n	20dc <STACK_SIZE+0xdc>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    21e8:	0020      	movs	r0, r4
    21ea:	4b25      	ldr	r3, [pc, #148]	; (2280 <STACK_SIZE+0x280>)
    21ec:	4798      	blx	r3
    21ee:	e007      	b.n	2200 <STACK_SIZE+0x200>
    21f0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    21f2:	2f04      	cmp	r7, #4
    21f4:	d00d      	beq.n	2212 <STACK_SIZE+0x212>
    21f6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    21f8:	00bb      	lsls	r3, r7, #2
    21fa:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    21fc:	2800      	cmp	r0, #0
    21fe:	d0f3      	beq.n	21e8 <STACK_SIZE+0x1e8>
		if (current_pinmux != PINMUX_UNUSED) {
    2200:	1c43      	adds	r3, r0, #1
    2202:	d0f5      	beq.n	21f0 <STACK_SIZE+0x1f0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2204:	a90e      	add	r1, sp, #56	; 0x38
    2206:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2208:	0c00      	lsrs	r0, r0, #16
    220a:	b2c0      	uxtb	r0, r0
    220c:	4b1d      	ldr	r3, [pc, #116]	; (2284 <STACK_SIZE+0x284>)
    220e:	4798      	blx	r3
    2210:	e7ee      	b.n	21f0 <STACK_SIZE+0x1f0>
		module->callback[i]            = NULL;
    2212:	2300      	movs	r3, #0
    2214:	60eb      	str	r3, [r5, #12]
    2216:	612b      	str	r3, [r5, #16]
    2218:	616b      	str	r3, [r5, #20]
    221a:	61ab      	str	r3, [r5, #24]
    221c:	61eb      	str	r3, [r5, #28]
    221e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2220:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2222:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2224:	2200      	movs	r2, #0
    2226:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2228:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    222a:	3330      	adds	r3, #48	; 0x30
    222c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    222e:	3301      	adds	r3, #1
    2230:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2232:	3301      	adds	r3, #1
    2234:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2236:	3301      	adds	r3, #1
    2238:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    223a:	6828      	ldr	r0, [r5, #0]
    223c:	4b07      	ldr	r3, [pc, #28]	; (225c <STACK_SIZE+0x25c>)
    223e:	4798      	blx	r3
    2240:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2242:	4911      	ldr	r1, [pc, #68]	; (2288 <STACK_SIZE+0x288>)
    2244:	4b11      	ldr	r3, [pc, #68]	; (228c <STACK_SIZE+0x28c>)
    2246:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2248:	00a4      	lsls	r4, r4, #2
    224a:	4b11      	ldr	r3, [pc, #68]	; (2290 <STACK_SIZE+0x290>)
    224c:	50e5      	str	r5, [r4, r3]
	return status_code;
    224e:	2000      	movs	r0, #0
    2250:	e691      	b.n	1f76 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2252:	2310      	movs	r3, #16
    2254:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2256:	2300      	movs	r3, #0
    2258:	9307      	str	r3, [sp, #28]
    225a:	e6e8      	b.n	202e <STACK_SIZE+0x2e>
    225c:	00004fd1 	.word	0x00004fd1
    2260:	40000400 	.word	0x40000400
    2264:	000064ed 	.word	0x000064ed
    2268:	00006461 	.word	0x00006461
    226c:	00004e0d 	.word	0x00004e0d
    2270:	41002000 	.word	0x41002000
    2274:	00006509 	.word	0x00006509
    2278:	00004d4f 	.word	0x00004d4f
    227c:	00004d79 	.word	0x00004d79
    2280:	00004e59 	.word	0x00004e59
    2284:	000065e5 	.word	0x000065e5
    2288:	00002331 	.word	0x00002331
    228c:	00001e85 	.word	0x00001e85
    2290:	20000334 	.word	0x20000334

00002294 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2294:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2296:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2298:	2a00      	cmp	r2, #0
    229a:	d101      	bne.n	22a0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    229c:	0018      	movs	r0, r3
    229e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    22a0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    22a2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    22a4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    22a6:	2a00      	cmp	r2, #0
    22a8:	d1f8      	bne.n	229c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    22aa:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    22ac:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    22ae:	2a00      	cmp	r2, #0
    22b0:	d1fc      	bne.n	22ac <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    22b2:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    22b4:	2102      	movs	r1, #2
    22b6:	7e1a      	ldrb	r2, [r3, #24]
    22b8:	420a      	tst	r2, r1
    22ba:	d0fc      	beq.n	22b6 <usart_write_wait+0x22>
	return STATUS_OK;
    22bc:	2300      	movs	r3, #0
    22be:	e7ed      	b.n	229c <usart_write_wait+0x8>

000022c0 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    22c0:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    22c2:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    22c4:	2a00      	cmp	r2, #0
    22c6:	d101      	bne.n	22cc <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    22c8:	0018      	movs	r0, r3
    22ca:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    22cc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    22ce:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    22d0:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    22d2:	2a00      	cmp	r2, #0
    22d4:	d1f8      	bne.n	22c8 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    22d6:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    22d8:	7e10      	ldrb	r0, [r2, #24]
    22da:	0740      	lsls	r0, r0, #29
    22dc:	d5f4      	bpl.n	22c8 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    22de:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    22e0:	2b00      	cmp	r3, #0
    22e2:	d1fc      	bne.n	22de <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    22e4:	8b53      	ldrh	r3, [r2, #26]
    22e6:	b2db      	uxtb	r3, r3
	if (error_code) {
    22e8:	0698      	lsls	r0, r3, #26
    22ea:	d01d      	beq.n	2328 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    22ec:	0798      	lsls	r0, r3, #30
    22ee:	d503      	bpl.n	22f8 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    22f0:	2302      	movs	r3, #2
    22f2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    22f4:	3318      	adds	r3, #24
    22f6:	e7e7      	b.n	22c8 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    22f8:	0758      	lsls	r0, r3, #29
    22fa:	d503      	bpl.n	2304 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    22fc:	2304      	movs	r3, #4
    22fe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2300:	331a      	adds	r3, #26
    2302:	e7e1      	b.n	22c8 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2304:	07d8      	lsls	r0, r3, #31
    2306:	d503      	bpl.n	2310 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2308:	2301      	movs	r3, #1
    230a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    230c:	3312      	adds	r3, #18
    230e:	e7db      	b.n	22c8 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2310:	06d8      	lsls	r0, r3, #27
    2312:	d503      	bpl.n	231c <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2314:	2310      	movs	r3, #16
    2316:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2318:	3332      	adds	r3, #50	; 0x32
    231a:	e7d5      	b.n	22c8 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    231c:	069b      	lsls	r3, r3, #26
    231e:	d503      	bpl.n	2328 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2320:	2320      	movs	r3, #32
    2322:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2324:	3321      	adds	r3, #33	; 0x21
    2326:	e7cf      	b.n	22c8 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2328:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    232a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    232c:	2300      	movs	r3, #0
    232e:	e7cb      	b.n	22c8 <usart_read_wait+0x8>

00002330 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2332:	0080      	lsls	r0, r0, #2
    2334:	4b62      	ldr	r3, [pc, #392]	; (24c0 <_usart_interrupt_handler+0x190>)
    2336:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2338:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    233a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    233c:	2b00      	cmp	r3, #0
    233e:	d1fc      	bne.n	233a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2340:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2342:	7da6      	ldrb	r6, [r4, #22]
    2344:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2346:	2330      	movs	r3, #48	; 0x30
    2348:	5ceb      	ldrb	r3, [r5, r3]
    234a:	2231      	movs	r2, #49	; 0x31
    234c:	5caf      	ldrb	r7, [r5, r2]
    234e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2350:	07f3      	lsls	r3, r6, #31
    2352:	d522      	bpl.n	239a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2354:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2356:	b29b      	uxth	r3, r3
    2358:	2b00      	cmp	r3, #0
    235a:	d01c      	beq.n	2396 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    235c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    235e:	7813      	ldrb	r3, [r2, #0]
    2360:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2362:	1c51      	adds	r1, r2, #1
    2364:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2366:	7969      	ldrb	r1, [r5, #5]
    2368:	2901      	cmp	r1, #1
    236a:	d00e      	beq.n	238a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    236c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    236e:	05db      	lsls	r3, r3, #23
    2370:	0ddb      	lsrs	r3, r3, #23
    2372:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2374:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2376:	3b01      	subs	r3, #1
    2378:	b29b      	uxth	r3, r3
    237a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    237c:	2b00      	cmp	r3, #0
    237e:	d10c      	bne.n	239a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2380:	3301      	adds	r3, #1
    2382:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2384:	3301      	adds	r3, #1
    2386:	75a3      	strb	r3, [r4, #22]
    2388:	e007      	b.n	239a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    238a:	7851      	ldrb	r1, [r2, #1]
    238c:	0209      	lsls	r1, r1, #8
    238e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2390:	3202      	adds	r2, #2
    2392:	62aa      	str	r2, [r5, #40]	; 0x28
    2394:	e7eb      	b.n	236e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2396:	2301      	movs	r3, #1
    2398:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    239a:	07b3      	lsls	r3, r6, #30
    239c:	d506      	bpl.n	23ac <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    239e:	2302      	movs	r3, #2
    23a0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    23a2:	2200      	movs	r2, #0
    23a4:	3331      	adds	r3, #49	; 0x31
    23a6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    23a8:	07fb      	lsls	r3, r7, #31
    23aa:	d41a      	bmi.n	23e2 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    23ac:	0773      	lsls	r3, r6, #29
    23ae:	d565      	bpl.n	247c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    23b0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    23b2:	b29b      	uxth	r3, r3
    23b4:	2b00      	cmp	r3, #0
    23b6:	d05f      	beq.n	2478 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    23b8:	8b63      	ldrh	r3, [r4, #26]
    23ba:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    23bc:	071a      	lsls	r2, r3, #28
    23be:	d414      	bmi.n	23ea <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    23c0:	223f      	movs	r2, #63	; 0x3f
    23c2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    23c4:	2b00      	cmp	r3, #0
    23c6:	d034      	beq.n	2432 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    23c8:	079a      	lsls	r2, r3, #30
    23ca:	d511      	bpl.n	23f0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    23cc:	221a      	movs	r2, #26
    23ce:	2332      	movs	r3, #50	; 0x32
    23d0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    23d2:	3b30      	subs	r3, #48	; 0x30
    23d4:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    23d6:	077b      	lsls	r3, r7, #29
    23d8:	d550      	bpl.n	247c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    23da:	0028      	movs	r0, r5
    23dc:	696b      	ldr	r3, [r5, #20]
    23de:	4798      	blx	r3
    23e0:	e04c      	b.n	247c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    23e2:	0028      	movs	r0, r5
    23e4:	68eb      	ldr	r3, [r5, #12]
    23e6:	4798      	blx	r3
    23e8:	e7e0      	b.n	23ac <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    23ea:	2237      	movs	r2, #55	; 0x37
    23ec:	4013      	ands	r3, r2
    23ee:	e7e9      	b.n	23c4 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    23f0:	075a      	lsls	r2, r3, #29
    23f2:	d505      	bpl.n	2400 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    23f4:	221e      	movs	r2, #30
    23f6:	2332      	movs	r3, #50	; 0x32
    23f8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    23fa:	3b2e      	subs	r3, #46	; 0x2e
    23fc:	8363      	strh	r3, [r4, #26]
    23fe:	e7ea      	b.n	23d6 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2400:	07da      	lsls	r2, r3, #31
    2402:	d505      	bpl.n	2410 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2404:	2213      	movs	r2, #19
    2406:	2332      	movs	r3, #50	; 0x32
    2408:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    240a:	3b31      	subs	r3, #49	; 0x31
    240c:	8363      	strh	r3, [r4, #26]
    240e:	e7e2      	b.n	23d6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2410:	06da      	lsls	r2, r3, #27
    2412:	d505      	bpl.n	2420 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2414:	2242      	movs	r2, #66	; 0x42
    2416:	2332      	movs	r3, #50	; 0x32
    2418:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    241a:	3b22      	subs	r3, #34	; 0x22
    241c:	8363      	strh	r3, [r4, #26]
    241e:	e7da      	b.n	23d6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2420:	2220      	movs	r2, #32
    2422:	421a      	tst	r2, r3
    2424:	d0d7      	beq.n	23d6 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2426:	3221      	adds	r2, #33	; 0x21
    2428:	2332      	movs	r3, #50	; 0x32
    242a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    242c:	3b12      	subs	r3, #18
    242e:	8363      	strh	r3, [r4, #26]
    2430:	e7d1      	b.n	23d6 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2432:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2434:	05db      	lsls	r3, r3, #23
    2436:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2438:	b2da      	uxtb	r2, r3
    243a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    243c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    243e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2440:	1c51      	adds	r1, r2, #1
    2442:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2444:	7969      	ldrb	r1, [r5, #5]
    2446:	2901      	cmp	r1, #1
    2448:	d010      	beq.n	246c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    244a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    244c:	3b01      	subs	r3, #1
    244e:	b29b      	uxth	r3, r3
    2450:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2452:	2b00      	cmp	r3, #0
    2454:	d112      	bne.n	247c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2456:	3304      	adds	r3, #4
    2458:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    245a:	2200      	movs	r2, #0
    245c:	332e      	adds	r3, #46	; 0x2e
    245e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2460:	07bb      	lsls	r3, r7, #30
    2462:	d50b      	bpl.n	247c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2464:	0028      	movs	r0, r5
    2466:	692b      	ldr	r3, [r5, #16]
    2468:	4798      	blx	r3
    246a:	e007      	b.n	247c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    246c:	0a1b      	lsrs	r3, r3, #8
    246e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2470:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2472:	3301      	adds	r3, #1
    2474:	626b      	str	r3, [r5, #36]	; 0x24
    2476:	e7e8      	b.n	244a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2478:	2304      	movs	r3, #4
    247a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    247c:	06f3      	lsls	r3, r6, #27
    247e:	d504      	bpl.n	248a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2480:	2310      	movs	r3, #16
    2482:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2484:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2486:	06fb      	lsls	r3, r7, #27
    2488:	d40e      	bmi.n	24a8 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    248a:	06b3      	lsls	r3, r6, #26
    248c:	d504      	bpl.n	2498 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    248e:	2320      	movs	r3, #32
    2490:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2492:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2494:	073b      	lsls	r3, r7, #28
    2496:	d40b      	bmi.n	24b0 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2498:	0733      	lsls	r3, r6, #28
    249a:	d504      	bpl.n	24a6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    249c:	2308      	movs	r3, #8
    249e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    24a0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    24a2:	06bb      	lsls	r3, r7, #26
    24a4:	d408      	bmi.n	24b8 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    24a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    24a8:	0028      	movs	r0, r5
    24aa:	69eb      	ldr	r3, [r5, #28]
    24ac:	4798      	blx	r3
    24ae:	e7ec      	b.n	248a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    24b0:	0028      	movs	r0, r5
    24b2:	69ab      	ldr	r3, [r5, #24]
    24b4:	4798      	blx	r3
    24b6:	e7ef      	b.n	2498 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    24b8:	6a2b      	ldr	r3, [r5, #32]
    24ba:	0028      	movs	r0, r5
    24bc:	4798      	blx	r3
}
    24be:	e7f2      	b.n	24a6 <_usart_interrupt_handler+0x176>
    24c0:	20000334 	.word	0x20000334

000024c4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    24c4:	b510      	push	{r4, lr}
	switch (clock_source) {
    24c6:	2808      	cmp	r0, #8
    24c8:	d803      	bhi.n	24d2 <system_clock_source_get_hz+0xe>
    24ca:	0080      	lsls	r0, r0, #2
    24cc:	4b1e      	ldr	r3, [pc, #120]	; (2548 <system_clock_source_get_hz+0x84>)
    24ce:	581b      	ldr	r3, [r3, r0]
    24d0:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    24d2:	2000      	movs	r0, #0
    24d4:	e036      	b.n	2544 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
    24d6:	4b1d      	ldr	r3, [pc, #116]	; (254c <system_clock_source_get_hz+0x88>)
    24d8:	6918      	ldr	r0, [r3, #16]
    24da:	e033      	b.n	2544 <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    24dc:	4b1c      	ldr	r3, [pc, #112]	; (2550 <system_clock_source_get_hz+0x8c>)
    24de:	6a1b      	ldr	r3, [r3, #32]
    24e0:	059b      	lsls	r3, r3, #22
    24e2:	0f9b      	lsrs	r3, r3, #30
    24e4:	481b      	ldr	r0, [pc, #108]	; (2554 <system_clock_source_get_hz+0x90>)
    24e6:	40d8      	lsrs	r0, r3
    24e8:	e02c      	b.n	2544 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
    24ea:	4b18      	ldr	r3, [pc, #96]	; (254c <system_clock_source_get_hz+0x88>)
    24ec:	6958      	ldr	r0, [r3, #20]
    24ee:	e029      	b.n	2544 <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    24f0:	4b16      	ldr	r3, [pc, #88]	; (254c <system_clock_source_get_hz+0x88>)
    24f2:	681b      	ldr	r3, [r3, #0]
			return 0;
    24f4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    24f6:	079b      	lsls	r3, r3, #30
    24f8:	d524      	bpl.n	2544 <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    24fa:	4915      	ldr	r1, [pc, #84]	; (2550 <system_clock_source_get_hz+0x8c>)
    24fc:	2210      	movs	r2, #16
    24fe:	68cb      	ldr	r3, [r1, #12]
    2500:	421a      	tst	r2, r3
    2502:	d0fc      	beq.n	24fe <system_clock_source_get_hz+0x3a>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2504:	4b11      	ldr	r3, [pc, #68]	; (254c <system_clock_source_get_hz+0x88>)
    2506:	681b      	ldr	r3, [r3, #0]
    2508:	075b      	lsls	r3, r3, #29
    250a:	d401      	bmi.n	2510 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    250c:	4812      	ldr	r0, [pc, #72]	; (2558 <system_clock_source_get_hz+0x94>)
    250e:	e019      	b.n	2544 <system_clock_source_get_hz+0x80>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2510:	4b0e      	ldr	r3, [pc, #56]	; (254c <system_clock_source_get_hz+0x88>)
    2512:	681b      	ldr	r3, [r3, #0]
    2514:	069b      	lsls	r3, r3, #26
    2516:	d501      	bpl.n	251c <system_clock_source_get_hz+0x58>
		return 48000000UL;
    2518:	480f      	ldr	r0, [pc, #60]	; (2558 <system_clock_source_get_hz+0x94>)
    251a:	e013      	b.n	2544 <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    251c:	2000      	movs	r0, #0
    251e:	4b0f      	ldr	r3, [pc, #60]	; (255c <system_clock_source_get_hz+0x98>)
    2520:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2522:	4b0a      	ldr	r3, [pc, #40]	; (254c <system_clock_source_get_hz+0x88>)
    2524:	689b      	ldr	r3, [r3, #8]
    2526:	041b      	lsls	r3, r3, #16
    2528:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    252a:	4358      	muls	r0, r3
    252c:	e00a      	b.n	2544 <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    252e:	2350      	movs	r3, #80	; 0x50
    2530:	4a07      	ldr	r2, [pc, #28]	; (2550 <system_clock_source_get_hz+0x8c>)
    2532:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2534:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2536:	075b      	lsls	r3, r3, #29
    2538:	d504      	bpl.n	2544 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
    253a:	4b04      	ldr	r3, [pc, #16]	; (254c <system_clock_source_get_hz+0x88>)
    253c:	68d8      	ldr	r0, [r3, #12]
    253e:	e001      	b.n	2544 <system_clock_source_get_hz+0x80>
		return 32768UL;
    2540:	2080      	movs	r0, #128	; 0x80
    2542:	0200      	lsls	r0, r0, #8
	}
}
    2544:	bd10      	pop	{r4, pc}
    2546:	46c0      	nop			; (mov r8, r8)
    2548:	00007754 	.word	0x00007754
    254c:	20000218 	.word	0x20000218
    2550:	40000800 	.word	0x40000800
    2554:	007a1200 	.word	0x007a1200
    2558:	02dc6c00 	.word	0x02dc6c00
    255c:	00006509 	.word	0x00006509

00002560 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2560:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2562:	490c      	ldr	r1, [pc, #48]	; (2594 <system_clock_source_osc8m_set_config+0x34>)
    2564:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2566:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2568:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    256a:	7840      	ldrb	r0, [r0, #1]
    256c:	2201      	movs	r2, #1
    256e:	4010      	ands	r0, r2
    2570:	0180      	lsls	r0, r0, #6
    2572:	2640      	movs	r6, #64	; 0x40
    2574:	43b3      	bics	r3, r6
    2576:	4303      	orrs	r3, r0
    2578:	402a      	ands	r2, r5
    257a:	01d2      	lsls	r2, r2, #7
    257c:	2080      	movs	r0, #128	; 0x80
    257e:	4383      	bics	r3, r0
    2580:	4313      	orrs	r3, r2
    2582:	2203      	movs	r2, #3
    2584:	4022      	ands	r2, r4
    2586:	0212      	lsls	r2, r2, #8
    2588:	4803      	ldr	r0, [pc, #12]	; (2598 <system_clock_source_osc8m_set_config+0x38>)
    258a:	4003      	ands	r3, r0
    258c:	4313      	orrs	r3, r2
    258e:	620b      	str	r3, [r1, #32]
}
    2590:	bd70      	pop	{r4, r5, r6, pc}
    2592:	46c0      	nop			; (mov r8, r8)
    2594:	40000800 	.word	0x40000800
    2598:	fffffcff 	.word	0xfffffcff

0000259c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    259c:	b5f0      	push	{r4, r5, r6, r7, lr}
    259e:	46ce      	mov	lr, r9
    25a0:	4647      	mov	r7, r8
    25a2:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    25a4:	4b19      	ldr	r3, [pc, #100]	; (260c <system_clock_source_osc32k_set_config+0x70>)
    25a6:	4699      	mov	r9, r3
    25a8:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    25aa:	7841      	ldrb	r1, [r0, #1]
    25ac:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    25ae:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    25b0:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    25b2:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    25b4:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    25b6:	7880      	ldrb	r0, [r0, #2]
    25b8:	2101      	movs	r1, #1
    25ba:	4008      	ands	r0, r1
    25bc:	0080      	lsls	r0, r0, #2
    25be:	2204      	movs	r2, #4
    25c0:	4393      	bics	r3, r2
    25c2:	4303      	orrs	r3, r0
    25c4:	4660      	mov	r0, ip
    25c6:	4008      	ands	r0, r1
    25c8:	00c0      	lsls	r0, r0, #3
    25ca:	3204      	adds	r2, #4
    25cc:	4393      	bics	r3, r2
    25ce:	4303      	orrs	r3, r0
    25d0:	0038      	movs	r0, r7
    25d2:	4008      	ands	r0, r1
    25d4:	0180      	lsls	r0, r0, #6
    25d6:	2740      	movs	r7, #64	; 0x40
    25d8:	43bb      	bics	r3, r7
    25da:	4303      	orrs	r3, r0
    25dc:	0030      	movs	r0, r6
    25de:	4008      	ands	r0, r1
    25e0:	01c0      	lsls	r0, r0, #7
    25e2:	2680      	movs	r6, #128	; 0x80
    25e4:	43b3      	bics	r3, r6
    25e6:	4303      	orrs	r3, r0
    25e8:	2007      	movs	r0, #7
    25ea:	4005      	ands	r5, r0
    25ec:	022d      	lsls	r5, r5, #8
    25ee:	4808      	ldr	r0, [pc, #32]	; (2610 <system_clock_source_osc32k_set_config+0x74>)
    25f0:	4003      	ands	r3, r0
    25f2:	432b      	orrs	r3, r5
    25f4:	4021      	ands	r1, r4
    25f6:	0309      	lsls	r1, r1, #12
    25f8:	4806      	ldr	r0, [pc, #24]	; (2614 <system_clock_source_osc32k_set_config+0x78>)
    25fa:	4003      	ands	r3, r0
    25fc:	430b      	orrs	r3, r1
    25fe:	464a      	mov	r2, r9
    2600:	6193      	str	r3, [r2, #24]
}
    2602:	bc0c      	pop	{r2, r3}
    2604:	4690      	mov	r8, r2
    2606:	4699      	mov	r9, r3
    2608:	bdf0      	pop	{r4, r5, r6, r7, pc}
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	40000800 	.word	0x40000800
    2610:	fffff8ff 	.word	0xfffff8ff
    2614:	ffffefff 	.word	0xffffefff

00002618 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2618:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    261a:	7a03      	ldrb	r3, [r0, #8]
    261c:	069b      	lsls	r3, r3, #26
    261e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2620:	8942      	ldrh	r2, [r0, #10]
    2622:	0592      	lsls	r2, r2, #22
    2624:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2626:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2628:	4918      	ldr	r1, [pc, #96]	; (268c <system_clock_source_dfll_set_config+0x74>)
    262a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    262c:	7983      	ldrb	r3, [r0, #6]
    262e:	79c2      	ldrb	r2, [r0, #7]
    2630:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2632:	8842      	ldrh	r2, [r0, #2]
    2634:	8884      	ldrh	r4, [r0, #4]
    2636:	4322      	orrs	r2, r4
    2638:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    263a:	7842      	ldrb	r2, [r0, #1]
    263c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    263e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2640:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2642:	7803      	ldrb	r3, [r0, #0]
    2644:	2b04      	cmp	r3, #4
    2646:	d011      	beq.n	266c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2648:	2b20      	cmp	r3, #32
    264a:	d10e      	bne.n	266a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    264c:	7b03      	ldrb	r3, [r0, #12]
    264e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2650:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2652:	4313      	orrs	r3, r2
    2654:	89c2      	ldrh	r2, [r0, #14]
    2656:	0412      	lsls	r2, r2, #16
    2658:	490d      	ldr	r1, [pc, #52]	; (2690 <system_clock_source_dfll_set_config+0x78>)
    265a:	400a      	ands	r2, r1
    265c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    265e:	4a0b      	ldr	r2, [pc, #44]	; (268c <system_clock_source_dfll_set_config+0x74>)
    2660:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2662:	6811      	ldr	r1, [r2, #0]
    2664:	4b0b      	ldr	r3, [pc, #44]	; (2694 <system_clock_source_dfll_set_config+0x7c>)
    2666:	430b      	orrs	r3, r1
    2668:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    266a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    266c:	7b03      	ldrb	r3, [r0, #12]
    266e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2670:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2672:	4313      	orrs	r3, r2
    2674:	89c2      	ldrh	r2, [r0, #14]
    2676:	0412      	lsls	r2, r2, #16
    2678:	4905      	ldr	r1, [pc, #20]	; (2690 <system_clock_source_dfll_set_config+0x78>)
    267a:	400a      	ands	r2, r1
    267c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    267e:	4a03      	ldr	r2, [pc, #12]	; (268c <system_clock_source_dfll_set_config+0x74>)
    2680:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2682:	6813      	ldr	r3, [r2, #0]
    2684:	2104      	movs	r1, #4
    2686:	430b      	orrs	r3, r1
    2688:	6013      	str	r3, [r2, #0]
    268a:	e7ee      	b.n	266a <system_clock_source_dfll_set_config+0x52>
    268c:	20000218 	.word	0x20000218
    2690:	03ff0000 	.word	0x03ff0000
    2694:	00000424 	.word	0x00000424

00002698 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2698:	2808      	cmp	r0, #8
    269a:	d803      	bhi.n	26a4 <system_clock_source_enable+0xc>
    269c:	0080      	lsls	r0, r0, #2
    269e:	4b25      	ldr	r3, [pc, #148]	; (2734 <system_clock_source_enable+0x9c>)
    26a0:	581b      	ldr	r3, [r3, r0]
    26a2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    26a4:	2017      	movs	r0, #23
    26a6:	e044      	b.n	2732 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    26a8:	4a23      	ldr	r2, [pc, #140]	; (2738 <system_clock_source_enable+0xa0>)
    26aa:	6a13      	ldr	r3, [r2, #32]
    26ac:	2102      	movs	r1, #2
    26ae:	430b      	orrs	r3, r1
    26b0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    26b2:	2000      	movs	r0, #0
    26b4:	e03d      	b.n	2732 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    26b6:	4a20      	ldr	r2, [pc, #128]	; (2738 <system_clock_source_enable+0xa0>)
    26b8:	6993      	ldr	r3, [r2, #24]
    26ba:	2102      	movs	r1, #2
    26bc:	430b      	orrs	r3, r1
    26be:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    26c0:	2000      	movs	r0, #0
		break;
    26c2:	e036      	b.n	2732 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    26c4:	4a1c      	ldr	r2, [pc, #112]	; (2738 <system_clock_source_enable+0xa0>)
    26c6:	8a13      	ldrh	r3, [r2, #16]
    26c8:	2102      	movs	r1, #2
    26ca:	430b      	orrs	r3, r1
    26cc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    26ce:	2000      	movs	r0, #0
		break;
    26d0:	e02f      	b.n	2732 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    26d2:	4a19      	ldr	r2, [pc, #100]	; (2738 <system_clock_source_enable+0xa0>)
    26d4:	8a93      	ldrh	r3, [r2, #20]
    26d6:	2102      	movs	r1, #2
    26d8:	430b      	orrs	r3, r1
    26da:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    26dc:	2000      	movs	r0, #0
		break;
    26de:	e028      	b.n	2732 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    26e0:	4916      	ldr	r1, [pc, #88]	; (273c <system_clock_source_enable+0xa4>)
    26e2:	680b      	ldr	r3, [r1, #0]
    26e4:	2202      	movs	r2, #2
    26e6:	4313      	orrs	r3, r2
    26e8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    26ea:	4b13      	ldr	r3, [pc, #76]	; (2738 <system_clock_source_enable+0xa0>)
    26ec:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    26ee:	0019      	movs	r1, r3
    26f0:	320e      	adds	r2, #14
    26f2:	68cb      	ldr	r3, [r1, #12]
    26f4:	421a      	tst	r2, r3
    26f6:	d0fc      	beq.n	26f2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    26f8:	4a10      	ldr	r2, [pc, #64]	; (273c <system_clock_source_enable+0xa4>)
    26fa:	6891      	ldr	r1, [r2, #8]
    26fc:	4b0e      	ldr	r3, [pc, #56]	; (2738 <system_clock_source_enable+0xa0>)
    26fe:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2700:	6852      	ldr	r2, [r2, #4]
    2702:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2704:	2200      	movs	r2, #0
    2706:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2708:	0019      	movs	r1, r3
    270a:	3210      	adds	r2, #16
    270c:	68cb      	ldr	r3, [r1, #12]
    270e:	421a      	tst	r2, r3
    2710:	d0fc      	beq.n	270c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2712:	4b0a      	ldr	r3, [pc, #40]	; (273c <system_clock_source_enable+0xa4>)
    2714:	681b      	ldr	r3, [r3, #0]
    2716:	b29b      	uxth	r3, r3
    2718:	4a07      	ldr	r2, [pc, #28]	; (2738 <system_clock_source_enable+0xa0>)
    271a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    271c:	2000      	movs	r0, #0
    271e:	e008      	b.n	2732 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2720:	4905      	ldr	r1, [pc, #20]	; (2738 <system_clock_source_enable+0xa0>)
    2722:	2244      	movs	r2, #68	; 0x44
    2724:	5c8b      	ldrb	r3, [r1, r2]
    2726:	2002      	movs	r0, #2
    2728:	4303      	orrs	r3, r0
    272a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    272c:	2000      	movs	r0, #0
		break;
    272e:	e000      	b.n	2732 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2730:	2000      	movs	r0, #0
}
    2732:	4770      	bx	lr
    2734:	00007778 	.word	0x00007778
    2738:	40000800 	.word	0x40000800
    273c:	20000218 	.word	0x20000218

00002740 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2740:	b570      	push	{r4, r5, r6, lr}
    2742:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2744:	22c2      	movs	r2, #194	; 0xc2
    2746:	00d2      	lsls	r2, r2, #3
    2748:	4b42      	ldr	r3, [pc, #264]	; (2854 <system_clock_init+0x114>)
    274a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    274c:	4a42      	ldr	r2, [pc, #264]	; (2858 <system_clock_init+0x118>)
    274e:	6853      	ldr	r3, [r2, #4]
    2750:	211e      	movs	r1, #30
    2752:	438b      	bics	r3, r1
    2754:	391a      	subs	r1, #26
    2756:	430b      	orrs	r3, r1
    2758:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    275a:	2201      	movs	r2, #1
    275c:	ab01      	add	r3, sp, #4
    275e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2760:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2762:	4d3e      	ldr	r5, [pc, #248]	; (285c <system_clock_init+0x11c>)
    2764:	b2e0      	uxtb	r0, r4
    2766:	a901      	add	r1, sp, #4
    2768:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    276a:	3401      	adds	r4, #1
    276c:	2c25      	cmp	r4, #37	; 0x25
    276e:	d1f9      	bne.n	2764 <system_clock_init+0x24>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    2770:	4c3b      	ldr	r4, [pc, #236]	; (2860 <system_clock_init+0x120>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    2772:	6823      	ldr	r3, [r4, #0]
    2774:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    2776:	4937      	ldr	r1, [pc, #220]	; (2854 <system_clock_init+0x114>)
    2778:	698a      	ldr	r2, [r1, #24]
    277a:	0e5b      	lsrs	r3, r3, #25
    277c:	041b      	lsls	r3, r3, #16
    277e:	4839      	ldr	r0, [pc, #228]	; (2864 <system_clock_init+0x124>)
    2780:	4002      	ands	r2, r0
    2782:	4313      	orrs	r3, r2
    2784:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    2786:	a80a      	add	r0, sp, #40	; 0x28
    2788:	2301      	movs	r3, #1
    278a:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    278c:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    278e:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2790:	2207      	movs	r2, #7
    2792:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    2794:	2500      	movs	r5, #0
    2796:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    2798:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    279a:	4b33      	ldr	r3, [pc, #204]	; (2868 <system_clock_init+0x128>)
    279c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    279e:	2004      	movs	r0, #4
    27a0:	4b32      	ldr	r3, [pc, #200]	; (286c <system_clock_init+0x12c>)
    27a2:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    27a4:	ab05      	add	r3, sp, #20
    27a6:	2200      	movs	r2, #0
    27a8:	805d      	strh	r5, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    27aa:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    27ac:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    27ae:	2120      	movs	r1, #32
    27b0:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    27b2:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    27b4:	6823      	ldr	r3, [r4, #0]
    27b6:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    27b8:	2b3f      	cmp	r3, #63	; 0x3f
    27ba:	d049      	beq.n	2850 <system_clock_init+0x110>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    27bc:	a805      	add	r0, sp, #20
    27be:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    27c0:	2307      	movs	r3, #7
    27c2:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    27c4:	3303      	adds	r3, #3
    27c6:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    27c8:	4b29      	ldr	r3, [pc, #164]	; (2870 <system_clock_init+0x130>)
    27ca:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    27cc:	3bff      	subs	r3, #255	; 0xff
    27ce:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    27d0:	4b28      	ldr	r3, [pc, #160]	; (2874 <system_clock_init+0x134>)
    27d2:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    27d4:	4b28      	ldr	r3, [pc, #160]	; (2878 <system_clock_init+0x138>)
    27d6:	4798      	blx	r3
	config->run_in_standby  = false;
    27d8:	a804      	add	r0, sp, #16
    27da:	2400      	movs	r4, #0
    27dc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    27de:	2501      	movs	r5, #1
    27e0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    27e2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    27e4:	4b25      	ldr	r3, [pc, #148]	; (287c <system_clock_init+0x13c>)
    27e6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    27e8:	2006      	movs	r0, #6
    27ea:	4e20      	ldr	r6, [pc, #128]	; (286c <system_clock_init+0x12c>)
    27ec:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    27ee:	4b24      	ldr	r3, [pc, #144]	; (2880 <system_clock_init+0x140>)
    27f0:	4798      	blx	r3
	config->division_factor    = 1;
    27f2:	a901      	add	r1, sp, #4
    27f4:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    27f6:	704c      	strb	r4, [r1, #1]
	config->output_enable      = false;
    27f8:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    27fa:	2304      	movs	r3, #4
    27fc:	700b      	strb	r3, [r1, #0]
    27fe:	720d      	strb	r5, [r1, #8]
    2800:	2007      	movs	r0, #7
    2802:	4b20      	ldr	r3, [pc, #128]	; (2884 <system_clock_init+0x144>)
    2804:	4798      	blx	r3
    2806:	2007      	movs	r0, #7
    2808:	4b1f      	ldr	r3, [pc, #124]	; (2888 <system_clock_init+0x148>)
    280a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    280c:	2007      	movs	r0, #7
    280e:	47b0      	blx	r6
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2810:	4910      	ldr	r1, [pc, #64]	; (2854 <system_clock_init+0x114>)
    2812:	2210      	movs	r2, #16
    2814:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2816:	421a      	tst	r2, r3
    2818:	d0fc      	beq.n	2814 <system_clock_init+0xd4>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    281a:	4a0e      	ldr	r2, [pc, #56]	; (2854 <system_clock_init+0x114>)
    281c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    281e:	2180      	movs	r1, #128	; 0x80
    2820:	430b      	orrs	r3, r1
    2822:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    2824:	4a19      	ldr	r2, [pc, #100]	; (288c <system_clock_init+0x14c>)
    2826:	2300      	movs	r3, #0
    2828:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    282a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    282c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    282e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2830:	a901      	add	r1, sp, #4
    2832:	2201      	movs	r2, #1
    2834:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2836:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    2838:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    283a:	3307      	adds	r3, #7
    283c:	700b      	strb	r3, [r1, #0]
    283e:	720a      	strb	r2, [r1, #8]
    2840:	2000      	movs	r0, #0
    2842:	4b10      	ldr	r3, [pc, #64]	; (2884 <system_clock_init+0x144>)
    2844:	4798      	blx	r3
    2846:	2000      	movs	r0, #0
    2848:	4b0f      	ldr	r3, [pc, #60]	; (2888 <system_clock_init+0x148>)
    284a:	4798      	blx	r3
#endif
}
    284c:	b00c      	add	sp, #48	; 0x30
    284e:	bd70      	pop	{r4, r5, r6, pc}
		coarse = 0x1f;
    2850:	3b20      	subs	r3, #32
    2852:	e7b3      	b.n	27bc <system_clock_init+0x7c>
    2854:	40000800 	.word	0x40000800
    2858:	41004000 	.word	0x41004000
    285c:	000064ed 	.word	0x000064ed
    2860:	00806024 	.word	0x00806024
    2864:	ff80ffff 	.word	0xff80ffff
    2868:	0000259d 	.word	0x0000259d
    286c:	00002699 	.word	0x00002699
    2870:	000001ff 	.word	0x000001ff
    2874:	ffffbb80 	.word	0xffffbb80
    2878:	00002619 	.word	0x00002619
    287c:	00002561 	.word	0x00002561
    2880:	000062b5 	.word	0x000062b5
    2884:	000062d9 	.word	0x000062d9
    2888:	00006391 	.word	0x00006391
    288c:	40000400 	.word	0x40000400

00002890 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    2890:	b510      	push	{r4, lr}
    2892:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    2894:	ab03      	add	r3, sp, #12
    2896:	2200      	movs	r2, #0
    2898:	701a      	strb	r2, [r3, #0]
    289a:	3203      	adds	r2, #3
    289c:	705a      	strb	r2, [r3, #1]
    289e:	3a01      	subs	r2, #1
    28a0:	709a      	strb	r2, [r3, #2]
    28a2:	3a01      	subs	r2, #1
    28a4:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    28a6:	4b27      	ldr	r3, [pc, #156]	; (2944 <udd_sleep_mode+0xb4>)
    28a8:	781b      	ldrb	r3, [r3, #0]
    28aa:	4283      	cmp	r3, r0
    28ac:	d007      	beq.n	28be <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    28ae:	2800      	cmp	r0, #0
    28b0:	d107      	bne.n	28c2 <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    28b2:	4b24      	ldr	r3, [pc, #144]	; (2944 <udd_sleep_mode+0xb4>)
    28b4:	781b      	ldrb	r3, [r3, #0]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d123      	bne.n	2902 <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    28ba:	4b22      	ldr	r3, [pc, #136]	; (2944 <udd_sleep_mode+0xb4>)
    28bc:	7018      	strb	r0, [r3, #0]
}
    28be:	b004      	add	sp, #16
    28c0:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    28c2:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    28c4:	5c1b      	ldrb	r3, [r3, r0]
    28c6:	4a20      	ldr	r2, [pc, #128]	; (2948 <udd_sleep_mode+0xb8>)
    28c8:	5cd2      	ldrb	r2, [r2, r3]
    28ca:	2aff      	cmp	r2, #255	; 0xff
    28cc:	d100      	bne.n	28d0 <udd_sleep_mode+0x40>
    28ce:	e7fe      	b.n	28ce <udd_sleep_mode+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    28d0:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    28d4:	4251      	negs	r1, r2
    28d6:	414a      	adcs	r2, r1
    28d8:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    28da:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    28dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    28e0:	2100      	movs	r1, #0
    28e2:	4a1a      	ldr	r2, [pc, #104]	; (294c <udd_sleep_mode+0xbc>)
    28e4:	7011      	strb	r1, [r2, #0]
	return flags;
    28e6:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    28e8:	4917      	ldr	r1, [pc, #92]	; (2948 <udd_sleep_mode+0xb8>)
    28ea:	5cca      	ldrb	r2, [r1, r3]
    28ec:	3201      	adds	r2, #1
    28ee:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    28f0:	2c00      	cmp	r4, #0
    28f2:	d0de      	beq.n	28b2 <udd_sleep_mode+0x22>
		cpu_irq_enable();
    28f4:	2201      	movs	r2, #1
    28f6:	4b15      	ldr	r3, [pc, #84]	; (294c <udd_sleep_mode+0xbc>)
    28f8:	701a      	strb	r2, [r3, #0]
    28fa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    28fe:	b662      	cpsie	i
    2900:	e7d7      	b.n	28b2 <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    2902:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    2904:	5cd3      	ldrb	r3, [r2, r3]
    2906:	4a10      	ldr	r2, [pc, #64]	; (2948 <udd_sleep_mode+0xb8>)
    2908:	5cd2      	ldrb	r2, [r2, r3]
    290a:	2a00      	cmp	r2, #0
    290c:	d100      	bne.n	2910 <udd_sleep_mode+0x80>
    290e:	e7fe      	b.n	290e <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2910:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2914:	4251      	negs	r1, r2
    2916:	414a      	adcs	r2, r1
    2918:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    291a:	b672      	cpsid	i
    291c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2920:	2100      	movs	r1, #0
    2922:	4a0a      	ldr	r2, [pc, #40]	; (294c <udd_sleep_mode+0xbc>)
    2924:	7011      	strb	r1, [r2, #0]
	return flags;
    2926:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    2928:	4907      	ldr	r1, [pc, #28]	; (2948 <udd_sleep_mode+0xb8>)
    292a:	5cca      	ldrb	r2, [r1, r3]
    292c:	3a01      	subs	r2, #1
    292e:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    2930:	2c00      	cmp	r4, #0
    2932:	d0c2      	beq.n	28ba <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    2934:	2201      	movs	r2, #1
    2936:	4b05      	ldr	r3, [pc, #20]	; (294c <udd_sleep_mode+0xbc>)
    2938:	701a      	strb	r2, [r3, #0]
    293a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    293e:	b662      	cpsie	i
    2940:	e7bb      	b.n	28ba <udd_sleep_mode+0x2a>
    2942:	46c0      	nop			; (mov r8, r8)
    2944:	20000288 	.word	0x20000288
    2948:	20000ae8 	.word	0x20000ae8
    294c:	200000f9 	.word	0x200000f9

00002950 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    2950:	0643      	lsls	r3, r0, #25
    2952:	d00b      	beq.n	296c <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2954:	230f      	movs	r3, #15
    2956:	4003      	ands	r3, r0
    2958:	005b      	lsls	r3, r3, #1
    295a:	09c0      	lsrs	r0, r0, #7
    295c:	1818      	adds	r0, r3, r0
    295e:	3802      	subs	r0, #2
    2960:	0083      	lsls	r3, r0, #2
    2962:	1818      	adds	r0, r3, r0
    2964:	0080      	lsls	r0, r0, #2
    2966:	4b02      	ldr	r3, [pc, #8]	; (2970 <udd_ep_get_job+0x20>)
    2968:	1818      	adds	r0, r3, r0
	}
}
    296a:	4770      	bx	lr
		return NULL;
    296c:	2000      	movs	r0, #0
    296e:	e7fc      	b.n	296a <udd_ep_get_job+0x1a>
    2970:	20000238 	.word	0x20000238

00002974 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    2974:	b5f0      	push	{r4, r5, r6, r7, lr}
    2976:	46d6      	mov	lr, sl
    2978:	464f      	mov	r7, r9
    297a:	4646      	mov	r6, r8
    297c:	b5c0      	push	{r6, r7, lr}
    297e:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    2980:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    2982:	b26b      	sxtb	r3, r5
    2984:	2b00      	cmp	r3, #0
    2986:	db26      	blt.n	29d6 <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    2988:	0028      	movs	r0, r5
    298a:	4b5e      	ldr	r3, [pc, #376]	; (2b04 <udd_ep_transfer_process+0x190>)
    298c:	4798      	blx	r3
    298e:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2990:	270f      	movs	r7, #15
    2992:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2994:	8a03      	ldrh	r3, [r0, #16]
    2996:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    2998:	464b      	mov	r3, r9
    299a:	881b      	ldrh	r3, [r3, #0]
    299c:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    299e:	7c83      	ldrb	r3, [r0, #18]
    29a0:	075b      	lsls	r3, r3, #29
    29a2:	d46a      	bmi.n	2a7a <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    29a4:	68e3      	ldr	r3, [r4, #12]
    29a6:	4453      	add	r3, sl
    29a8:	001e      	movs	r6, r3
    29aa:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    29ac:	68a3      	ldr	r3, [r4, #8]
    29ae:	429e      	cmp	r6, r3
    29b0:	d800      	bhi.n	29b4 <udd_ep_transfer_process+0x40>
    29b2:	e074      	b.n	2a9e <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    29b4:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    29b6:	7ca3      	ldrb	r3, [r4, #18]
    29b8:	2201      	movs	r2, #1
    29ba:	4393      	bics	r3, r2
    29bc:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    29be:	6823      	ldr	r3, [r4, #0]
    29c0:	2b00      	cmp	r3, #0
    29c2:	d003      	beq.n	29cc <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    29c4:	68e1      	ldr	r1, [r4, #12]
    29c6:	002a      	movs	r2, r5
    29c8:	2000      	movs	r0, #0
    29ca:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    29cc:	bc1c      	pop	{r2, r3, r4}
    29ce:	4690      	mov	r8, r2
    29d0:	4699      	mov	r9, r3
    29d2:	46a2      	mov	sl, r4
    29d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    29d6:	0028      	movs	r0, r5
    29d8:	4b4a      	ldr	r3, [pc, #296]	; (2b04 <udd_ep_transfer_process+0x190>)
    29da:	4798      	blx	r3
    29dc:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    29de:	270f      	movs	r7, #15
    29e0:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    29e2:	8a03      	ldrh	r3, [r0, #16]
    29e4:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    29e6:	464b      	mov	r3, r9
    29e8:	885e      	ldrh	r6, [r3, #2]
    29ea:	68c3      	ldr	r3, [r0, #12]
    29ec:	469c      	mov	ip, r3
    29ee:	4466      	add	r6, ip
    29f0:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    29f2:	6881      	ldr	r1, [r0, #8]
    29f4:	428e      	cmp	r6, r1
    29f6:	d025      	beq.n	2a44 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    29f8:	1b8d      	subs	r5, r1, r6
    29fa:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    29fc:	4b42      	ldr	r3, [pc, #264]	; (2b08 <udd_ep_transfer_process+0x194>)
    29fe:	429d      	cmp	r5, r3
    2a00:	d906      	bls.n	2a10 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    2a02:	001d      	movs	r5, r3
    2a04:	4641      	mov	r1, r8
    2a06:	0018      	movs	r0, r3
    2a08:	4b40      	ldr	r3, [pc, #256]	; (2b0c <udd_ep_transfer_process+0x198>)
    2a0a:	4798      	blx	r3
    2a0c:	1a6d      	subs	r5, r5, r1
    2a0e:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    2a10:	7ca2      	ldrb	r2, [r4, #18]
    2a12:	2300      	movs	r3, #0
    2a14:	0792      	lsls	r2, r2, #30
    2a16:	d507      	bpl.n	2a28 <udd_ep_transfer_process+0xb4>
    2a18:	4641      	mov	r1, r8
    2a1a:	0028      	movs	r0, r5
    2a1c:	4b3c      	ldr	r3, [pc, #240]	; (2b10 <udd_ep_transfer_process+0x19c>)
    2a1e:	4798      	blx	r3
    2a20:	b289      	uxth	r1, r1
    2a22:	424b      	negs	r3, r1
    2a24:	414b      	adcs	r3, r1
    2a26:	b2db      	uxtb	r3, r3
    2a28:	005b      	lsls	r3, r3, #1
    2a2a:	7ca2      	ldrb	r2, [r4, #18]
    2a2c:	2102      	movs	r1, #2
    2a2e:	438a      	bics	r2, r1
    2a30:	4313      	orrs	r3, r2
    2a32:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2a34:	6862      	ldr	r2, [r4, #4]
    2a36:	1992      	adds	r2, r2, r6
    2a38:	002b      	movs	r3, r5
    2a3a:	0039      	movs	r1, r7
    2a3c:	4835      	ldr	r0, [pc, #212]	; (2b14 <udd_ep_transfer_process+0x1a0>)
    2a3e:	4c36      	ldr	r4, [pc, #216]	; (2b18 <udd_ep_transfer_process+0x1a4>)
    2a40:	47a0      	blx	r4
    2a42:	e7c3      	b.n	29cc <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    2a44:	7c83      	ldrb	r3, [r0, #18]
    2a46:	079b      	lsls	r3, r3, #30
    2a48:	d40b      	bmi.n	2a62 <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    2a4a:	7c83      	ldrb	r3, [r0, #18]
    2a4c:	2201      	movs	r2, #1
    2a4e:	4393      	bics	r3, r2
    2a50:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2a52:	6803      	ldr	r3, [r0, #0]
    2a54:	2b00      	cmp	r3, #0
    2a56:	d0b9      	beq.n	29cc <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2a58:	002a      	movs	r2, r5
    2a5a:	0031      	movs	r1, r6
    2a5c:	2000      	movs	r0, #0
    2a5e:	4798      	blx	r3
    2a60:	e7b4      	b.n	29cc <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    2a62:	7c83      	ldrb	r3, [r0, #18]
    2a64:	2202      	movs	r2, #2
    2a66:	4393      	bics	r3, r2
    2a68:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    2a6a:	6842      	ldr	r2, [r0, #4]
    2a6c:	1992      	adds	r2, r2, r6
    2a6e:	2300      	movs	r3, #0
    2a70:	0039      	movs	r1, r7
    2a72:	4828      	ldr	r0, [pc, #160]	; (2b14 <udd_ep_transfer_process+0x1a0>)
    2a74:	4c28      	ldr	r4, [pc, #160]	; (2b18 <udd_ep_transfer_process+0x1a4>)
    2a76:	47a0      	blx	r4
    2a78:	e7a8      	b.n	29cc <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    2a7a:	6843      	ldr	r3, [r0, #4]
    2a7c:	68c2      	ldr	r2, [r0, #12]
    2a7e:	4694      	mov	ip, r2
    2a80:	4463      	add	r3, ip
    2a82:	001e      	movs	r6, r3
    2a84:	4641      	mov	r1, r8
    2a86:	6880      	ldr	r0, [r0, #8]
    2a88:	4b21      	ldr	r3, [pc, #132]	; (2b10 <udd_ep_transfer_process+0x19c>)
    2a8a:	4798      	blx	r3
    2a8c:	000a      	movs	r2, r1
    2a8e:	1e7b      	subs	r3, r7, #1
    2a90:	019b      	lsls	r3, r3, #6
    2a92:	4922      	ldr	r1, [pc, #136]	; (2b1c <udd_ep_transfer_process+0x1a8>)
    2a94:	1859      	adds	r1, r3, r1
    2a96:	0030      	movs	r0, r6
    2a98:	4b21      	ldr	r3, [pc, #132]	; (2b20 <udd_ep_transfer_process+0x1ac>)
    2a9a:	4798      	blx	r3
    2a9c:	e782      	b.n	29a4 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    2a9e:	464a      	mov	r2, r9
    2aa0:	8892      	ldrh	r2, [r2, #4]
    2aa2:	4552      	cmp	r2, sl
    2aa4:	d000      	beq.n	2aa8 <udd_ep_transfer_process+0x134>
    2aa6:	e786      	b.n	29b6 <udd_ep_transfer_process+0x42>
    2aa8:	429e      	cmp	r6, r3
    2aaa:	d100      	bne.n	2aae <udd_ep_transfer_process+0x13a>
    2aac:	e783      	b.n	29b6 <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2aae:	1b9b      	subs	r3, r3, r6
    2ab0:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2ab2:	4b15      	ldr	r3, [pc, #84]	; (2b08 <udd_ep_transfer_process+0x194>)
    2ab4:	429d      	cmp	r5, r3
    2ab6:	d916      	bls.n	2ae6 <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    2ab8:	001d      	movs	r5, r3
    2aba:	4641      	mov	r1, r8
    2abc:	0018      	movs	r0, r3
    2abe:	4b13      	ldr	r3, [pc, #76]	; (2b0c <udd_ep_transfer_process+0x198>)
    2ac0:	4798      	blx	r3
    2ac2:	1a6b      	subs	r3, r5, r1
    2ac4:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    2ac6:	4598      	cmp	r8, r3
    2ac8:	d914      	bls.n	2af4 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    2aca:	7ca3      	ldrb	r3, [r4, #18]
    2acc:	2204      	movs	r2, #4
    2ace:	4313      	orrs	r3, r2
    2ad0:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    2ad2:	1e7a      	subs	r2, r7, #1
    2ad4:	0192      	lsls	r2, r2, #6
    2ad6:	4b11      	ldr	r3, [pc, #68]	; (2b1c <udd_ep_transfer_process+0x1a8>)
    2ad8:	18d2      	adds	r2, r2, r3
    2ada:	4643      	mov	r3, r8
    2adc:	0039      	movs	r1, r7
    2ade:	480d      	ldr	r0, [pc, #52]	; (2b14 <udd_ep_transfer_process+0x1a0>)
    2ae0:	4c10      	ldr	r4, [pc, #64]	; (2b24 <udd_ep_transfer_process+0x1b0>)
    2ae2:	47a0      	blx	r4
    2ae4:	e772      	b.n	29cc <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    2ae6:	4641      	mov	r1, r8
    2ae8:	0028      	movs	r0, r5
    2aea:	4b09      	ldr	r3, [pc, #36]	; (2b10 <udd_ep_transfer_process+0x19c>)
    2aec:	4798      	blx	r3
    2aee:	1a6b      	subs	r3, r5, r1
    2af0:	b29b      	uxth	r3, r3
    2af2:	e7e8      	b.n	2ac6 <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2af4:	6862      	ldr	r2, [r4, #4]
    2af6:	1992      	adds	r2, r2, r6
    2af8:	0039      	movs	r1, r7
    2afa:	4806      	ldr	r0, [pc, #24]	; (2b14 <udd_ep_transfer_process+0x1a0>)
    2afc:	4c09      	ldr	r4, [pc, #36]	; (2b24 <udd_ep_transfer_process+0x1b0>)
    2afe:	47a0      	blx	r4
    2b00:	e764      	b.n	29cc <udd_ep_transfer_process+0x58>
    2b02:	46c0      	nop			; (mov r8, r8)
    2b04:	00002951 	.word	0x00002951
    2b08:	00001fff 	.word	0x00001fff
    2b0c:	00006a45 	.word	0x00006a45
    2b10:	00006871 	.word	0x00006871
    2b14:	200003cc 	.word	0x200003cc
    2b18:	00004315 	.word	0x00004315
    2b1c:	2000034c 	.word	0x2000034c
    2b20:	00006d41 	.word	0x00006d41
    2b24:	00004369 	.word	0x00004369

00002b28 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    2b28:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2b2a:	2205      	movs	r2, #5
    2b2c:	4b05      	ldr	r3, [pc, #20]	; (2b44 <udd_ctrl_stall_data+0x1c>)
    2b2e:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    2b30:	4c05      	ldr	r4, [pc, #20]	; (2b48 <udd_ctrl_stall_data+0x20>)
    2b32:	2180      	movs	r1, #128	; 0x80
    2b34:	0020      	movs	r0, r4
    2b36:	4b05      	ldr	r3, [pc, #20]	; (2b4c <udd_ctrl_stall_data+0x24>)
    2b38:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    2b3a:	2100      	movs	r1, #0
    2b3c:	0020      	movs	r0, r4
    2b3e:	4b04      	ldr	r3, [pc, #16]	; (2b50 <udd_ctrl_stall_data+0x28>)
    2b40:	4798      	blx	r3
}
    2b42:	bd10      	pop	{r4, pc}
    2b44:	20000236 	.word	0x20000236
    2b48:	200003cc 	.word	0x200003cc
    2b4c:	00004269 	.word	0x00004269
    2b50:	0000428f 	.word	0x0000428f

00002b54 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    2b54:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2b56:	4c08      	ldr	r4, [pc, #32]	; (2b78 <_usb_device_lpm_suspend+0x24>)
    2b58:	2106      	movs	r1, #6
    2b5a:	0020      	movs	r0, r4
    2b5c:	4d07      	ldr	r5, [pc, #28]	; (2b7c <_usb_device_lpm_suspend+0x28>)
    2b5e:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2b60:	2104      	movs	r1, #4
    2b62:	0020      	movs	r0, r4
    2b64:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2b66:	2102      	movs	r1, #2
    2b68:	0020      	movs	r0, r4
    2b6a:	4b05      	ldr	r3, [pc, #20]	; (2b80 <_usb_device_lpm_suspend+0x2c>)
    2b6c:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    2b6e:	2002      	movs	r0, #2
    2b70:	4b04      	ldr	r3, [pc, #16]	; (2b84 <_usb_device_lpm_suspend+0x30>)
    2b72:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    2b74:	bd70      	pop	{r4, r5, r6, pc}
    2b76:	46c0      	nop			; (mov r8, r8)
    2b78:	200003cc 	.word	0x200003cc
    2b7c:	00003d7d 	.word	0x00003d7d
    2b80:	00003d5d 	.word	0x00003d5d
    2b84:	00002891 	.word	0x00002891

00002b88 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    2b88:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2b8a:	4b13      	ldr	r3, [pc, #76]	; (2bd8 <_usb_on_wakeup+0x50>)
    2b8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2b8e:	069b      	lsls	r3, r3, #26
    2b90:	d41c      	bmi.n	2bcc <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    2b92:	4911      	ldr	r1, [pc, #68]	; (2bd8 <_usb_on_wakeup+0x50>)
    2b94:	22d0      	movs	r2, #208	; 0xd0
    2b96:	68cb      	ldr	r3, [r1, #12]
    2b98:	4013      	ands	r3, r2
    2b9a:	2bd0      	cmp	r3, #208	; 0xd0
    2b9c:	d1fb      	bne.n	2b96 <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2b9e:	4c0f      	ldr	r4, [pc, #60]	; (2bdc <_usb_on_wakeup+0x54>)
    2ba0:	2102      	movs	r1, #2
    2ba2:	0020      	movs	r0, r4
    2ba4:	4b0e      	ldr	r3, [pc, #56]	; (2be0 <_usb_on_wakeup+0x58>)
    2ba6:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2ba8:	2104      	movs	r1, #4
    2baa:	0020      	movs	r0, r4
    2bac:	4d0d      	ldr	r5, [pc, #52]	; (2be4 <_usb_on_wakeup+0x5c>)
    2bae:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    2bb0:	4a0d      	ldr	r2, [pc, #52]	; (2be8 <_usb_on_wakeup+0x60>)
    2bb2:	2106      	movs	r1, #6
    2bb4:	0020      	movs	r0, r4
    2bb6:	4b0d      	ldr	r3, [pc, #52]	; (2bec <_usb_on_wakeup+0x64>)
    2bb8:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2bba:	2106      	movs	r1, #6
    2bbc:	0020      	movs	r0, r4
    2bbe:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    2bc0:	2003      	movs	r0, #3
    2bc2:	4b0b      	ldr	r3, [pc, #44]	; (2bf0 <_usb_on_wakeup+0x68>)
    2bc4:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    2bc6:	4b0b      	ldr	r3, [pc, #44]	; (2bf4 <_usb_on_wakeup+0x6c>)
    2bc8:	4798      	blx	r3
#endif
}
    2bca:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    2bcc:	4902      	ldr	r1, [pc, #8]	; (2bd8 <_usb_on_wakeup+0x50>)
    2bce:	2210      	movs	r2, #16
    2bd0:	68cb      	ldr	r3, [r1, #12]
    2bd2:	421a      	tst	r2, r3
    2bd4:	d0fc      	beq.n	2bd0 <_usb_on_wakeup+0x48>
    2bd6:	e7e2      	b.n	2b9e <_usb_on_wakeup+0x16>
    2bd8:	40000800 	.word	0x40000800
    2bdc:	200003cc 	.word	0x200003cc
    2be0:	00003d7d 	.word	0x00003d7d
    2be4:	00003d5d 	.word	0x00003d5d
    2be8:	00002b55 	.word	0x00002b55
    2bec:	00003d39 	.word	0x00003d39
    2bf0:	00002891 	.word	0x00002891
    2bf4:	00003915 	.word	0x00003915

00002bf8 <_usb_on_bus_reset>:
{
    2bf8:	b530      	push	{r4, r5, lr}
    2bfa:	b083      	sub	sp, #12
    2bfc:	0004      	movs	r4, r0
	udc_reset();
    2bfe:	4b1e      	ldr	r3, [pc, #120]	; (2c78 <_usb_on_bus_reset+0x80>)
    2c00:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    2c02:	2380      	movs	r3, #128	; 0x80
    2c04:	6822      	ldr	r2, [r4, #0]
    2c06:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    2c08:	ad01      	add	r5, sp, #4
    2c0a:	0028      	movs	r0, r5
    2c0c:	4b1b      	ldr	r3, [pc, #108]	; (2c7c <_usb_on_bus_reset+0x84>)
    2c0e:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    2c10:	2303      	movs	r3, #3
    2c12:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    2c14:	0029      	movs	r1, r5
    2c16:	0020      	movs	r0, r4
    2c18:	4b19      	ldr	r3, [pc, #100]	; (2c80 <_usb_on_bus_reset+0x88>)
    2c1a:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    2c1c:	4919      	ldr	r1, [pc, #100]	; (2c84 <_usb_on_bus_reset+0x8c>)
    2c1e:	0020      	movs	r0, r4
    2c20:	4b19      	ldr	r3, [pc, #100]	; (2c88 <_usb_on_bus_reset+0x90>)
    2c22:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    2c24:	4b19      	ldr	r3, [pc, #100]	; (2c8c <_usb_on_bus_reset+0x94>)
    2c26:	2202      	movs	r2, #2
    2c28:	2100      	movs	r1, #0
    2c2a:	0020      	movs	r0, r4
    2c2c:	4d18      	ldr	r5, [pc, #96]	; (2c90 <_usb_on_bus_reset+0x98>)
    2c2e:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    2c30:	4b18      	ldr	r3, [pc, #96]	; (2c94 <_usb_on_bus_reset+0x9c>)
    2c32:	2200      	movs	r2, #0
    2c34:	2100      	movs	r1, #0
    2c36:	0020      	movs	r0, r4
    2c38:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    2c3a:	4b17      	ldr	r3, [pc, #92]	; (2c98 <_usb_on_bus_reset+0xa0>)
    2c3c:	2201      	movs	r2, #1
    2c3e:	2100      	movs	r1, #0
    2c40:	0020      	movs	r0, r4
    2c42:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    2c44:	2202      	movs	r2, #2
    2c46:	2100      	movs	r1, #0
    2c48:	0020      	movs	r0, r4
    2c4a:	4d14      	ldr	r5, [pc, #80]	; (2c9c <_usb_on_bus_reset+0xa4>)
    2c4c:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2c4e:	2200      	movs	r2, #0
    2c50:	2100      	movs	r1, #0
    2c52:	0020      	movs	r0, r4
    2c54:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2c56:	2201      	movs	r2, #1
    2c58:	2100      	movs	r1, #0
    2c5a:	0020      	movs	r0, r4
    2c5c:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    2c5e:	6821      	ldr	r1, [r4, #0]
    2c60:	890b      	ldrh	r3, [r1, #8]
    2c62:	4a0f      	ldr	r2, [pc, #60]	; (2ca0 <_usb_on_bus_reset+0xa8>)
    2c64:	401a      	ands	r2, r3
    2c66:	2380      	movs	r3, #128	; 0x80
    2c68:	00db      	lsls	r3, r3, #3
    2c6a:	4313      	orrs	r3, r2
    2c6c:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    2c6e:	2200      	movs	r2, #0
    2c70:	4b0c      	ldr	r3, [pc, #48]	; (2ca4 <_usb_on_bus_reset+0xac>)
    2c72:	701a      	strb	r2, [r3, #0]
}
    2c74:	b003      	add	sp, #12
    2c76:	bd30      	pop	{r4, r5, pc}
    2c78:	0000188d 	.word	0x0000188d
    2c7c:	00003f89 	.word	0x00003f89
    2c80:	00003f99 	.word	0x00003f99
    2c84:	2000054c 	.word	0x2000054c
    2c88:	000043b9 	.word	0x000043b9
    2c8c:	00002de1 	.word	0x00002de1
    2c90:	00003d99 	.word	0x00003d99
    2c94:	000030fd 	.word	0x000030fd
    2c98:	00002ce5 	.word	0x00002ce5
    2c9c:	00003de9 	.word	0x00003de9
    2ca0:	fffff3ff 	.word	0xfffff3ff
    2ca4:	20000236 	.word	0x20000236

00002ca8 <udd_ctrl_send_zlp_in>:
{
    2ca8:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    2caa:	2203      	movs	r2, #3
    2cac:	4b07      	ldr	r3, [pc, #28]	; (2ccc <udd_ctrl_send_zlp_in+0x24>)
    2cae:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2cb0:	4c07      	ldr	r4, [pc, #28]	; (2cd0 <udd_ctrl_send_zlp_in+0x28>)
    2cb2:	4908      	ldr	r1, [pc, #32]	; (2cd4 <udd_ctrl_send_zlp_in+0x2c>)
    2cb4:	0020      	movs	r0, r4
    2cb6:	4b08      	ldr	r3, [pc, #32]	; (2cd8 <udd_ctrl_send_zlp_in+0x30>)
    2cb8:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    2cba:	4b08      	ldr	r3, [pc, #32]	; (2cdc <udd_ctrl_send_zlp_in+0x34>)
    2cbc:	689a      	ldr	r2, [r3, #8]
    2cbe:	2300      	movs	r3, #0
    2cc0:	2100      	movs	r1, #0
    2cc2:	0020      	movs	r0, r4
    2cc4:	4c06      	ldr	r4, [pc, #24]	; (2ce0 <udd_ctrl_send_zlp_in+0x38>)
    2cc6:	47a0      	blx	r4
}
    2cc8:	bd10      	pop	{r4, pc}
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	20000236 	.word	0x20000236
    2cd0:	200003cc 	.word	0x200003cc
    2cd4:	2000054c 	.word	0x2000054c
    2cd8:	000043b9 	.word	0x000043b9
    2cdc:	20000534 	.word	0x20000534
    2ce0:	00004315 	.word	0x00004315

00002ce4 <_usb_ep0_on_tansfer_fail>:
{
    2ce4:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    2ce6:	7989      	ldrb	r1, [r1, #6]
    2ce8:	b24b      	sxtb	r3, r1
    2cea:	2b00      	cmp	r3, #0
    2cec:	db06      	blt.n	2cfc <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2cee:	4b0e      	ldr	r3, [pc, #56]	; (2d28 <_usb_ep0_on_tansfer_fail+0x44>)
    2cf0:	781b      	ldrb	r3, [r3, #0]
    2cf2:	2b02      	cmp	r3, #2
    2cf4:	d00f      	beq.n	2d16 <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2cf6:	2b03      	cmp	r3, #3
    2cf8:	d011      	beq.n	2d1e <_usb_ep0_on_tansfer_fail+0x3a>
}
    2cfa:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2cfc:	4b0a      	ldr	r3, [pc, #40]	; (2d28 <_usb_ep0_on_tansfer_fail+0x44>)
    2cfe:	781b      	ldrb	r3, [r3, #0]
    2d00:	2b01      	cmp	r3, #1
    2d02:	d005      	beq.n	2d10 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2d04:	2b04      	cmp	r3, #4
    2d06:	d1f8      	bne.n	2cfa <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2d08:	4808      	ldr	r0, [pc, #32]	; (2d2c <_usb_ep0_on_tansfer_fail+0x48>)
    2d0a:	4b09      	ldr	r3, [pc, #36]	; (2d30 <_usb_ep0_on_tansfer_fail+0x4c>)
    2d0c:	4798      	blx	r3
    2d0e:	e7f4      	b.n	2cfa <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    2d10:	4b08      	ldr	r3, [pc, #32]	; (2d34 <_usb_ep0_on_tansfer_fail+0x50>)
    2d12:	4798      	blx	r3
    2d14:	e7f1      	b.n	2cfa <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2d16:	2204      	movs	r2, #4
    2d18:	4b03      	ldr	r3, [pc, #12]	; (2d28 <_usb_ep0_on_tansfer_fail+0x44>)
    2d1a:	701a      	strb	r2, [r3, #0]
    2d1c:	e7ed      	b.n	2cfa <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2d1e:	4803      	ldr	r0, [pc, #12]	; (2d2c <_usb_ep0_on_tansfer_fail+0x48>)
    2d20:	4b03      	ldr	r3, [pc, #12]	; (2d30 <_usb_ep0_on_tansfer_fail+0x4c>)
    2d22:	4798      	blx	r3
}
    2d24:	e7e9      	b.n	2cfa <_usb_ep0_on_tansfer_fail+0x16>
    2d26:	46c0      	nop			; (mov r8, r8)
    2d28:	20000236 	.word	0x20000236
    2d2c:	200003cc 	.word	0x200003cc
    2d30:	00004269 	.word	0x00004269
    2d34:	00002ca9 	.word	0x00002ca9

00002d38 <udd_ctrl_in_sent>:
{
    2d38:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2d3a:	4b20      	ldr	r3, [pc, #128]	; (2dbc <udd_ctrl_in_sent+0x84>)
    2d3c:	881b      	ldrh	r3, [r3, #0]
    2d3e:	4a20      	ldr	r2, [pc, #128]	; (2dc0 <udd_ctrl_in_sent+0x88>)
    2d40:	8994      	ldrh	r4, [r2, #12]
    2d42:	1ae4      	subs	r4, r4, r3
    2d44:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    2d46:	2c00      	cmp	r4, #0
    2d48:	d118      	bne.n	2d7c <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2d4a:	4a1e      	ldr	r2, [pc, #120]	; (2dc4 <udd_ctrl_in_sent+0x8c>)
    2d4c:	8811      	ldrh	r1, [r2, #0]
    2d4e:	185b      	adds	r3, r3, r1
    2d50:	b29b      	uxth	r3, r3
    2d52:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    2d54:	4a1a      	ldr	r2, [pc, #104]	; (2dc0 <udd_ctrl_in_sent+0x88>)
    2d56:	88d2      	ldrh	r2, [r2, #6]
    2d58:	429a      	cmp	r2, r3
    2d5a:	d023      	beq.n	2da4 <udd_ctrl_in_sent+0x6c>
    2d5c:	4b1a      	ldr	r3, [pc, #104]	; (2dc8 <udd_ctrl_in_sent+0x90>)
    2d5e:	781b      	ldrb	r3, [r3, #0]
    2d60:	2b00      	cmp	r3, #0
    2d62:	d11f      	bne.n	2da4 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    2d64:	4b16      	ldr	r3, [pc, #88]	; (2dc0 <udd_ctrl_in_sent+0x88>)
    2d66:	695b      	ldr	r3, [r3, #20]
    2d68:	2b00      	cmp	r3, #0
    2d6a:	d023      	beq.n	2db4 <udd_ctrl_in_sent+0x7c>
    2d6c:	4798      	blx	r3
    2d6e:	2800      	cmp	r0, #0
    2d70:	d020      	beq.n	2db4 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    2d72:	2200      	movs	r2, #0
    2d74:	4b11      	ldr	r3, [pc, #68]	; (2dbc <udd_ctrl_in_sent+0x84>)
    2d76:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    2d78:	4b11      	ldr	r3, [pc, #68]	; (2dc0 <udd_ctrl_in_sent+0x88>)
    2d7a:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    2d7c:	2c3f      	cmp	r4, #63	; 0x3f
    2d7e:	d919      	bls.n	2db4 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    2d80:	2200      	movs	r2, #0
    2d82:	4b11      	ldr	r3, [pc, #68]	; (2dc8 <udd_ctrl_in_sent+0x90>)
    2d84:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    2d86:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    2d88:	4d0c      	ldr	r5, [pc, #48]	; (2dbc <udd_ctrl_in_sent+0x84>)
    2d8a:	882b      	ldrh	r3, [r5, #0]
    2d8c:	4a0c      	ldr	r2, [pc, #48]	; (2dc0 <udd_ctrl_in_sent+0x88>)
    2d8e:	6892      	ldr	r2, [r2, #8]
    2d90:	18d2      	adds	r2, r2, r3
    2d92:	0023      	movs	r3, r4
    2d94:	2100      	movs	r1, #0
    2d96:	480d      	ldr	r0, [pc, #52]	; (2dcc <udd_ctrl_in_sent+0x94>)
    2d98:	4e0d      	ldr	r6, [pc, #52]	; (2dd0 <udd_ctrl_in_sent+0x98>)
    2d9a:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    2d9c:	882b      	ldrh	r3, [r5, #0]
    2d9e:	18e4      	adds	r4, r4, r3
    2da0:	802c      	strh	r4, [r5, #0]
}
    2da2:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2da4:	2204      	movs	r2, #4
    2da6:	4b0b      	ldr	r3, [pc, #44]	; (2dd4 <udd_ctrl_in_sent+0x9c>)
    2da8:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2daa:	490b      	ldr	r1, [pc, #44]	; (2dd8 <udd_ctrl_in_sent+0xa0>)
    2dac:	4807      	ldr	r0, [pc, #28]	; (2dcc <udd_ctrl_in_sent+0x94>)
    2dae:	4b0b      	ldr	r3, [pc, #44]	; (2ddc <udd_ctrl_in_sent+0xa4>)
    2db0:	4798      	blx	r3
			return;
    2db2:	e7f6      	b.n	2da2 <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    2db4:	2201      	movs	r2, #1
    2db6:	4b04      	ldr	r3, [pc, #16]	; (2dc8 <udd_ctrl_in_sent+0x90>)
    2db8:	701a      	strb	r2, [r3, #0]
    2dba:	e7e5      	b.n	2d88 <udd_ctrl_in_sent+0x50>
    2dbc:	20000232 	.word	0x20000232
    2dc0:	20000534 	.word	0x20000534
    2dc4:	20000234 	.word	0x20000234
    2dc8:	20000230 	.word	0x20000230
    2dcc:	200003cc 	.word	0x200003cc
    2dd0:	00004315 	.word	0x00004315
    2dd4:	20000236 	.word	0x20000236
    2dd8:	2000054c 	.word	0x2000054c
    2ddc:	000043b9 	.word	0x000043b9

00002de0 <_usb_ep0_on_setup>:
{
    2de0:	b510      	push	{r4, lr}
    2de2:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2de4:	4b2c      	ldr	r3, [pc, #176]	; (2e98 <_usb_ep0_on_setup+0xb8>)
    2de6:	781b      	ldrb	r3, [r3, #0]
    2de8:	2b00      	cmp	r3, #0
    2dea:	d007      	beq.n	2dfc <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    2dec:	4b2b      	ldr	r3, [pc, #172]	; (2e9c <_usb_ep0_on_setup+0xbc>)
    2dee:	691b      	ldr	r3, [r3, #16]
    2df0:	2b00      	cmp	r3, #0
    2df2:	d000      	beq.n	2df6 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    2df4:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    2df6:	2200      	movs	r2, #0
    2df8:	4b27      	ldr	r3, [pc, #156]	; (2e98 <_usb_ep0_on_setup+0xb8>)
    2dfa:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    2dfc:	8823      	ldrh	r3, [r4, #0]
    2dfe:	2b08      	cmp	r3, #8
    2e00:	d002      	beq.n	2e08 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    2e02:	4b27      	ldr	r3, [pc, #156]	; (2ea0 <_usb_ep0_on_setup+0xc0>)
    2e04:	4798      	blx	r3
}
    2e06:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    2e08:	4a24      	ldr	r2, [pc, #144]	; (2e9c <_usb_ep0_on_setup+0xbc>)
    2e0a:	4b26      	ldr	r3, [pc, #152]	; (2ea4 <_usb_ep0_on_setup+0xc4>)
    2e0c:	7819      	ldrb	r1, [r3, #0]
    2e0e:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    2e10:	7859      	ldrb	r1, [r3, #1]
    2e12:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    2e14:	78d8      	ldrb	r0, [r3, #3]
    2e16:	0200      	lsls	r0, r0, #8
    2e18:	7899      	ldrb	r1, [r3, #2]
    2e1a:	1809      	adds	r1, r1, r0
    2e1c:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    2e1e:	7958      	ldrb	r0, [r3, #5]
    2e20:	0200      	lsls	r0, r0, #8
    2e22:	7919      	ldrb	r1, [r3, #4]
    2e24:	1809      	adds	r1, r1, r0
    2e26:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    2e28:	79d9      	ldrb	r1, [r3, #7]
    2e2a:	0209      	lsls	r1, r1, #8
    2e2c:	799b      	ldrb	r3, [r3, #6]
    2e2e:	185b      	adds	r3, r3, r1
    2e30:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    2e32:	4b1d      	ldr	r3, [pc, #116]	; (2ea8 <_usb_ep0_on_setup+0xc8>)
    2e34:	4798      	blx	r3
    2e36:	2800      	cmp	r0, #0
    2e38:	d016      	beq.n	2e68 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    2e3a:	4b18      	ldr	r3, [pc, #96]	; (2e9c <_usb_ep0_on_setup+0xbc>)
    2e3c:	781b      	ldrb	r3, [r3, #0]
    2e3e:	2b7f      	cmp	r3, #127	; 0x7f
    2e40:	d815      	bhi.n	2e6e <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    2e42:	4b16      	ldr	r3, [pc, #88]	; (2e9c <_usb_ep0_on_setup+0xbc>)
    2e44:	88db      	ldrh	r3, [r3, #6]
    2e46:	2b00      	cmp	r3, #0
    2e48:	d022      	beq.n	2e90 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    2e4a:	2300      	movs	r3, #0
    2e4c:	4a17      	ldr	r2, [pc, #92]	; (2eac <_usb_ep0_on_setup+0xcc>)
    2e4e:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    2e50:	4a17      	ldr	r2, [pc, #92]	; (2eb0 <_usb_ep0_on_setup+0xd0>)
    2e52:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    2e54:	2201      	movs	r2, #1
    2e56:	4b10      	ldr	r3, [pc, #64]	; (2e98 <_usb_ep0_on_setup+0xb8>)
    2e58:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2e5a:	2340      	movs	r3, #64	; 0x40
    2e5c:	4a11      	ldr	r2, [pc, #68]	; (2ea4 <_usb_ep0_on_setup+0xc4>)
    2e5e:	2100      	movs	r1, #0
    2e60:	4814      	ldr	r0, [pc, #80]	; (2eb4 <_usb_ep0_on_setup+0xd4>)
    2e62:	4c15      	ldr	r4, [pc, #84]	; (2eb8 <_usb_ep0_on_setup+0xd8>)
    2e64:	47a0      	blx	r4
    2e66:	e7ce      	b.n	2e06 <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    2e68:	4b0d      	ldr	r3, [pc, #52]	; (2ea0 <_usb_ep0_on_setup+0xc0>)
    2e6a:	4798      	blx	r3
			return;
    2e6c:	e7cb      	b.n	2e06 <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    2e6e:	2300      	movs	r3, #0
    2e70:	4a0e      	ldr	r2, [pc, #56]	; (2eac <_usb_ep0_on_setup+0xcc>)
    2e72:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    2e74:	4a0e      	ldr	r2, [pc, #56]	; (2eb0 <_usb_ep0_on_setup+0xd0>)
    2e76:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    2e78:	2202      	movs	r2, #2
    2e7a:	4b07      	ldr	r3, [pc, #28]	; (2e98 <_usb_ep0_on_setup+0xb8>)
    2e7c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2e7e:	2340      	movs	r3, #64	; 0x40
    2e80:	4a08      	ldr	r2, [pc, #32]	; (2ea4 <_usb_ep0_on_setup+0xc4>)
    2e82:	2100      	movs	r1, #0
    2e84:	480b      	ldr	r0, [pc, #44]	; (2eb4 <_usb_ep0_on_setup+0xd4>)
    2e86:	4c0c      	ldr	r4, [pc, #48]	; (2eb8 <_usb_ep0_on_setup+0xd8>)
    2e88:	47a0      	blx	r4
			udd_ctrl_in_sent();
    2e8a:	4b0c      	ldr	r3, [pc, #48]	; (2ebc <_usb_ep0_on_setup+0xdc>)
    2e8c:	4798      	blx	r3
    2e8e:	e7ba      	b.n	2e06 <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    2e90:	4b0b      	ldr	r3, [pc, #44]	; (2ec0 <_usb_ep0_on_setup+0xe0>)
    2e92:	4798      	blx	r3
				return;
    2e94:	e7b7      	b.n	2e06 <_usb_ep0_on_setup+0x26>
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	20000236 	.word	0x20000236
    2e9c:	20000534 	.word	0x20000534
    2ea0:	00002b29 	.word	0x00002b29
    2ea4:	2000054c 	.word	0x2000054c
    2ea8:	0000191d 	.word	0x0000191d
    2eac:	20000234 	.word	0x20000234
    2eb0:	20000232 	.word	0x20000232
    2eb4:	200003cc 	.word	0x200003cc
    2eb8:	00004369 	.word	0x00004369
    2ebc:	00002d39 	.word	0x00002d39
    2ec0:	00002ca9 	.word	0x00002ca9

00002ec4 <_usb_on_sof_notify>:
{
    2ec4:	b510      	push	{r4, lr}
	udc_sof_notify();
    2ec6:	4b02      	ldr	r3, [pc, #8]	; (2ed0 <_usb_on_sof_notify+0xc>)
    2ec8:	4798      	blx	r3
	UDC_SOF_EVENT();
    2eca:	4b02      	ldr	r3, [pc, #8]	; (2ed4 <_usb_on_sof_notify+0x10>)
    2ecc:	4798      	blx	r3
}
    2ece:	bd10      	pop	{r4, pc}
    2ed0:	000018d9 	.word	0x000018d9
    2ed4:	00003921 	.word	0x00003921

00002ed8 <_usb_on_suspend>:
{
    2ed8:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2eda:	4c07      	ldr	r4, [pc, #28]	; (2ef8 <_usb_on_suspend+0x20>)
    2edc:	2104      	movs	r1, #4
    2ede:	0020      	movs	r0, r4
    2ee0:	4b06      	ldr	r3, [pc, #24]	; (2efc <_usb_on_suspend+0x24>)
    2ee2:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2ee4:	2102      	movs	r1, #2
    2ee6:	0020      	movs	r0, r4
    2ee8:	4b05      	ldr	r3, [pc, #20]	; (2f00 <_usb_on_suspend+0x28>)
    2eea:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    2eec:	2001      	movs	r0, #1
    2eee:	4b05      	ldr	r3, [pc, #20]	; (2f04 <_usb_on_suspend+0x2c>)
    2ef0:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    2ef2:	4b05      	ldr	r3, [pc, #20]	; (2f08 <_usb_on_suspend+0x30>)
    2ef4:	4798      	blx	r3
}
    2ef6:	bd10      	pop	{r4, pc}
    2ef8:	200003cc 	.word	0x200003cc
    2efc:	00003d7d 	.word	0x00003d7d
    2f00:	00003d5d 	.word	0x00003d5d
    2f04:	00002891 	.word	0x00002891
    2f08:	00003909 	.word	0x00003909

00002f0c <udd_ep_abort>:
{
    2f0c:	b510      	push	{r4, lr}
    2f0e:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    2f10:	0001      	movs	r1, r0
    2f12:	480a      	ldr	r0, [pc, #40]	; (2f3c <udd_ep_abort+0x30>)
    2f14:	4b0a      	ldr	r3, [pc, #40]	; (2f40 <udd_ep_abort+0x34>)
    2f16:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    2f18:	0020      	movs	r0, r4
    2f1a:	4b0a      	ldr	r3, [pc, #40]	; (2f44 <udd_ep_abort+0x38>)
    2f1c:	4798      	blx	r3
	if (!ptr_job->busy) {
    2f1e:	7c83      	ldrb	r3, [r0, #18]
    2f20:	07db      	lsls	r3, r3, #31
    2f22:	d50a      	bpl.n	2f3a <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    2f24:	7c83      	ldrb	r3, [r0, #18]
    2f26:	2201      	movs	r2, #1
    2f28:	4393      	bics	r3, r2
    2f2a:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2f2c:	6803      	ldr	r3, [r0, #0]
    2f2e:	2b00      	cmp	r3, #0
    2f30:	d003      	beq.n	2f3a <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    2f32:	68c1      	ldr	r1, [r0, #12]
    2f34:	0022      	movs	r2, r4
    2f36:	2001      	movs	r0, #1
    2f38:	4798      	blx	r3
}
    2f3a:	bd10      	pop	{r4, pc}
    2f3c:	200003cc 	.word	0x200003cc
    2f40:	00004209 	.word	0x00004209
    2f44:	00002951 	.word	0x00002951

00002f48 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    2f48:	4b02      	ldr	r3, [pc, #8]	; (2f54 <udd_get_frame_number+0xc>)
    2f4a:	681b      	ldr	r3, [r3, #0]
    2f4c:	8a18      	ldrh	r0, [r3, #16]
    2f4e:	0480      	lsls	r0, r0, #18
    2f50:	0d40      	lsrs	r0, r0, #21
}
    2f52:	4770      	bx	lr
    2f54:	200003cc 	.word	0x200003cc

00002f58 <udd_ep_free>:
{
    2f58:	b570      	push	{r4, r5, r6, lr}
    2f5a:	b082      	sub	sp, #8
    2f5c:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    2f5e:	ad01      	add	r5, sp, #4
    2f60:	0028      	movs	r0, r5
    2f62:	4b0d      	ldr	r3, [pc, #52]	; (2f98 <udd_ep_free+0x40>)
    2f64:	4798      	blx	r3
	udd_ep_abort(ep);
    2f66:	0020      	movs	r0, r4
    2f68:	4b0c      	ldr	r3, [pc, #48]	; (2f9c <udd_ep_free+0x44>)
    2f6a:	4798      	blx	r3
	config_ep.ep_address = ep;
    2f6c:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    2f6e:	2300      	movs	r3, #0
    2f70:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    2f72:	4e0b      	ldr	r6, [pc, #44]	; (2fa0 <udd_ep_free+0x48>)
    2f74:	0029      	movs	r1, r5
    2f76:	0030      	movs	r0, r6
    2f78:	4b0a      	ldr	r3, [pc, #40]	; (2fa4 <udd_ep_free+0x4c>)
    2f7a:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2f7c:	210f      	movs	r1, #15
    2f7e:	4021      	ands	r1, r4
    2f80:	2200      	movs	r2, #0
    2f82:	0030      	movs	r0, r6
    2f84:	4b08      	ldr	r3, [pc, #32]	; (2fa8 <udd_ep_free+0x50>)
    2f86:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2f88:	2200      	movs	r2, #0
    2f8a:	0021      	movs	r1, r4
    2f8c:	0030      	movs	r0, r6
    2f8e:	4b07      	ldr	r3, [pc, #28]	; (2fac <udd_ep_free+0x54>)
    2f90:	4798      	blx	r3
}
    2f92:	b002      	add	sp, #8
    2f94:	bd70      	pop	{r4, r5, r6, pc}
    2f96:	46c0      	nop			; (mov r8, r8)
    2f98:	00003f89 	.word	0x00003f89
    2f9c:	00002f0d 	.word	0x00002f0d
    2fa0:	200003cc 	.word	0x200003cc
    2fa4:	00003f99 	.word	0x00003f99
    2fa8:	00003dc1 	.word	0x00003dc1
    2fac:	00003eb9 	.word	0x00003eb9

00002fb0 <udd_ep_alloc>:
{
    2fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fb2:	b083      	sub	sp, #12
    2fb4:	0005      	movs	r5, r0
    2fb6:	000f      	movs	r7, r1
    2fb8:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    2fba:	ae01      	add	r6, sp, #4
    2fbc:	0030      	movs	r0, r6
    2fbe:	4b36      	ldr	r3, [pc, #216]	; (3098 <udd_ep_alloc+0xe8>)
    2fc0:	4798      	blx	r3
	config_ep.ep_address = ep;
    2fc2:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    2fc4:	2c08      	cmp	r4, #8
    2fc6:	d813      	bhi.n	2ff0 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    2fc8:	2200      	movs	r2, #0
    2fca:	ab01      	add	r3, sp, #4
    2fcc:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    2fce:	0028      	movs	r0, r5
    2fd0:	4b32      	ldr	r3, [pc, #200]	; (309c <udd_ep_alloc+0xec>)
    2fd2:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    2fd4:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    2fd6:	2103      	movs	r1, #3
    2fd8:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    2fda:	2901      	cmp	r1, #1
    2fdc:	d038      	beq.n	3050 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    2fde:	2902      	cmp	r1, #2
    2fe0:	d043      	beq.n	306a <udd_ep_alloc+0xba>
		return false;
    2fe2:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    2fe4:	2903      	cmp	r1, #3
    2fe6:	d13d      	bne.n	3064 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    2fe8:	2204      	movs	r2, #4
    2fea:	ab01      	add	r3, sp, #4
    2fec:	70da      	strb	r2, [r3, #3]
    2fee:	e032      	b.n	3056 <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    2ff0:	2c10      	cmp	r4, #16
    2ff2:	d803      	bhi.n	2ffc <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    2ff4:	2201      	movs	r2, #1
    2ff6:	ab01      	add	r3, sp, #4
    2ff8:	705a      	strb	r2, [r3, #1]
    2ffa:	e7e8      	b.n	2fce <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    2ffc:	2c20      	cmp	r4, #32
    2ffe:	d803      	bhi.n	3008 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    3000:	2202      	movs	r2, #2
    3002:	ab01      	add	r3, sp, #4
    3004:	705a      	strb	r2, [r3, #1]
    3006:	e7e2      	b.n	2fce <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    3008:	2c40      	cmp	r4, #64	; 0x40
    300a:	d803      	bhi.n	3014 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    300c:	2203      	movs	r2, #3
    300e:	ab01      	add	r3, sp, #4
    3010:	705a      	strb	r2, [r3, #1]
    3012:	e7dc      	b.n	2fce <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    3014:	2c80      	cmp	r4, #128	; 0x80
    3016:	d803      	bhi.n	3020 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    3018:	2204      	movs	r2, #4
    301a:	ab01      	add	r3, sp, #4
    301c:	705a      	strb	r2, [r3, #1]
    301e:	e7d6      	b.n	2fce <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    3020:	2380      	movs	r3, #128	; 0x80
    3022:	005b      	lsls	r3, r3, #1
    3024:	429c      	cmp	r4, r3
    3026:	d803      	bhi.n	3030 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    3028:	2205      	movs	r2, #5
    302a:	ab01      	add	r3, sp, #4
    302c:	705a      	strb	r2, [r3, #1]
    302e:	e7ce      	b.n	2fce <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    3030:	2380      	movs	r3, #128	; 0x80
    3032:	009b      	lsls	r3, r3, #2
    3034:	429c      	cmp	r4, r3
    3036:	d803      	bhi.n	3040 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    3038:	2206      	movs	r2, #6
    303a:	ab01      	add	r3, sp, #4
    303c:	705a      	strb	r2, [r3, #1]
    303e:	e7c6      	b.n	2fce <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    3040:	4a17      	ldr	r2, [pc, #92]	; (30a0 <udd_ep_alloc+0xf0>)
		return false;
    3042:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    3044:	4294      	cmp	r4, r2
    3046:	d80d      	bhi.n	3064 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    3048:	2207      	movs	r2, #7
    304a:	ab01      	add	r3, sp, #4
    304c:	705a      	strb	r2, [r3, #1]
    304e:	e7be      	b.n	2fce <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    3050:	2202      	movs	r2, #2
    3052:	ab01      	add	r3, sp, #4
    3054:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3056:	a901      	add	r1, sp, #4
    3058:	4812      	ldr	r0, [pc, #72]	; (30a4 <udd_ep_alloc+0xf4>)
    305a:	4b13      	ldr	r3, [pc, #76]	; (30a8 <udd_ep_alloc+0xf8>)
    305c:	4798      	blx	r3
		return false;
    305e:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3060:	2800      	cmp	r0, #0
    3062:	d006      	beq.n	3072 <udd_ep_alloc+0xc2>
}
    3064:	0018      	movs	r0, r3
    3066:	b003      	add	sp, #12
    3068:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    306a:	2203      	movs	r2, #3
    306c:	ab01      	add	r3, sp, #4
    306e:	70da      	strb	r2, [r3, #3]
    3070:	e7f1      	b.n	3056 <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    3072:	210f      	movs	r1, #15
    3074:	4029      	ands	r1, r5
    3076:	4c0b      	ldr	r4, [pc, #44]	; (30a4 <udd_ep_alloc+0xf4>)
    3078:	4b0c      	ldr	r3, [pc, #48]	; (30ac <udd_ep_alloc+0xfc>)
    307a:	2200      	movs	r2, #0
    307c:	0020      	movs	r0, r4
    307e:	4e0c      	ldr	r6, [pc, #48]	; (30b0 <udd_ep_alloc+0x100>)
    3080:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3082:	2200      	movs	r2, #0
    3084:	0029      	movs	r1, r5
    3086:	0020      	movs	r0, r4
    3088:	4e0a      	ldr	r6, [pc, #40]	; (30b4 <udd_ep_alloc+0x104>)
    308a:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    308c:	2201      	movs	r2, #1
    308e:	0029      	movs	r1, r5
    3090:	0020      	movs	r0, r4
    3092:	47b0      	blx	r6
	return true;
    3094:	2301      	movs	r3, #1
    3096:	e7e5      	b.n	3064 <udd_ep_alloc+0xb4>
    3098:	00003f89 	.word	0x00003f89
    309c:	00002951 	.word	0x00002951
    30a0:	000003ff 	.word	0x000003ff
    30a4:	200003cc 	.word	0x200003cc
    30a8:	00003f99 	.word	0x00003f99
    30ac:	00002975 	.word	0x00002975
    30b0:	00003d99 	.word	0x00003d99
    30b4:	00003de9 	.word	0x00003de9

000030b8 <udd_ep_is_halted>:
{
    30b8:	b510      	push	{r4, lr}
    30ba:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    30bc:	4801      	ldr	r0, [pc, #4]	; (30c4 <udd_ep_is_halted+0xc>)
    30be:	4b02      	ldr	r3, [pc, #8]	; (30c8 <udd_ep_is_halted+0x10>)
    30c0:	4798      	blx	r3
}
    30c2:	bd10      	pop	{r4, pc}
    30c4:	200003cc 	.word	0x200003cc
    30c8:	0000423f 	.word	0x0000423f

000030cc <udd_ep_set_halt>:
{
    30cc:	b510      	push	{r4, lr}
    30ce:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    30d0:	230f      	movs	r3, #15
    30d2:	4003      	ands	r3, r0
		return false;
    30d4:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    30d6:	2b02      	cmp	r3, #2
    30d8:	d900      	bls.n	30dc <udd_ep_set_halt+0x10>
}
    30da:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    30dc:	0021      	movs	r1, r4
    30de:	4804      	ldr	r0, [pc, #16]	; (30f0 <udd_ep_set_halt+0x24>)
    30e0:	4b04      	ldr	r3, [pc, #16]	; (30f4 <udd_ep_set_halt+0x28>)
    30e2:	4798      	blx	r3
	udd_ep_abort(ep);
    30e4:	0020      	movs	r0, r4
    30e6:	4b04      	ldr	r3, [pc, #16]	; (30f8 <udd_ep_set_halt+0x2c>)
    30e8:	4798      	blx	r3
	return true;
    30ea:	2001      	movs	r0, #1
    30ec:	e7f5      	b.n	30da <udd_ep_set_halt+0xe>
    30ee:	46c0      	nop			; (mov r8, r8)
    30f0:	200003cc 	.word	0x200003cc
    30f4:	00004269 	.word	0x00004269
    30f8:	00002f0d 	.word	0x00002f0d

000030fc <_usb_ep0_on_tansfer_ok>:
{
    30fc:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    30fe:	4b34      	ldr	r3, [pc, #208]	; (31d0 <_usb_ep0_on_tansfer_ok+0xd4>)
    3100:	781b      	ldrb	r3, [r3, #0]
    3102:	2b01      	cmp	r3, #1
    3104:	d00a      	beq.n	311c <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    3106:	2b02      	cmp	r3, #2
    3108:	d05f      	beq.n	31ca <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    310a:	4b32      	ldr	r3, [pc, #200]	; (31d4 <_usb_ep0_on_tansfer_ok+0xd8>)
    310c:	691b      	ldr	r3, [r3, #16]
    310e:	2b00      	cmp	r3, #0
    3110:	d000      	beq.n	3114 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    3112:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    3114:	2200      	movs	r2, #0
    3116:	4b2e      	ldr	r3, [pc, #184]	; (31d0 <_usb_ep0_on_tansfer_ok+0xd4>)
    3118:	701a      	strb	r2, [r3, #0]
}
    311a:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    311c:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    311e:	4b2d      	ldr	r3, [pc, #180]	; (31d4 <_usb_ep0_on_tansfer_ok+0xd8>)
    3120:	899b      	ldrh	r3, [r3, #12]
    3122:	4a2d      	ldr	r2, [pc, #180]	; (31d8 <_usb_ep0_on_tansfer_ok+0xdc>)
    3124:	8814      	ldrh	r4, [r2, #0]
    3126:	1962      	adds	r2, r4, r5
    3128:	4293      	cmp	r3, r2
    312a:	da01      	bge.n	3130 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    312c:	1b1d      	subs	r5, r3, r4
    312e:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    3130:	4b28      	ldr	r3, [pc, #160]	; (31d4 <_usb_ep0_on_tansfer_ok+0xd8>)
    3132:	6898      	ldr	r0, [r3, #8]
    3134:	1900      	adds	r0, r0, r4
    3136:	002a      	movs	r2, r5
    3138:	4928      	ldr	r1, [pc, #160]	; (31dc <_usb_ep0_on_tansfer_ok+0xe0>)
    313a:	4b29      	ldr	r3, [pc, #164]	; (31e0 <_usb_ep0_on_tansfer_ok+0xe4>)
    313c:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    313e:	1964      	adds	r4, r4, r5
    3140:	b2a4      	uxth	r4, r4
    3142:	4b25      	ldr	r3, [pc, #148]	; (31d8 <_usb_ep0_on_tansfer_ok+0xdc>)
    3144:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    3146:	2d40      	cmp	r5, #64	; 0x40
    3148:	d00a      	beq.n	3160 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    314a:	4b22      	ldr	r3, [pc, #136]	; (31d4 <_usb_ep0_on_tansfer_ok+0xd8>)
    314c:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    314e:	695b      	ldr	r3, [r3, #20]
    3150:	2b00      	cmp	r3, #0
    3152:	d002      	beq.n	315a <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    3154:	4798      	blx	r3
    3156:	2800      	cmp	r0, #0
    3158:	d014      	beq.n	3184 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    315a:	4b22      	ldr	r3, [pc, #136]	; (31e4 <_usb_ep0_on_tansfer_ok+0xe8>)
    315c:	4798      	blx	r3
    315e:	e7dc      	b.n	311a <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    3160:	4b1c      	ldr	r3, [pc, #112]	; (31d4 <_usb_ep0_on_tansfer_ok+0xd8>)
    3162:	88da      	ldrh	r2, [r3, #6]
    3164:	4b20      	ldr	r3, [pc, #128]	; (31e8 <_usb_ep0_on_tansfer_ok+0xec>)
    3166:	881b      	ldrh	r3, [r3, #0]
    3168:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    316a:	429a      	cmp	r2, r3
    316c:	dded      	ble.n	314a <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    316e:	4b19      	ldr	r3, [pc, #100]	; (31d4 <_usb_ep0_on_tansfer_ok+0xd8>)
    3170:	899b      	ldrh	r3, [r3, #12]
    3172:	42a3      	cmp	r3, r4
    3174:	d00c      	beq.n	3190 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3176:	2340      	movs	r3, #64	; 0x40
    3178:	4a18      	ldr	r2, [pc, #96]	; (31dc <_usb_ep0_on_tansfer_ok+0xe0>)
    317a:	2100      	movs	r1, #0
    317c:	481b      	ldr	r0, [pc, #108]	; (31ec <_usb_ep0_on_tansfer_ok+0xf0>)
    317e:	4c1c      	ldr	r4, [pc, #112]	; (31f0 <_usb_ep0_on_tansfer_ok+0xf4>)
    3180:	47a0      	blx	r4
    3182:	e7ca      	b.n	311a <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3184:	2205      	movs	r2, #5
    3186:	4b12      	ldr	r3, [pc, #72]	; (31d0 <_usb_ep0_on_tansfer_ok+0xd4>)
    3188:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    318a:	4b1a      	ldr	r3, [pc, #104]	; (31f4 <_usb_ep0_on_tansfer_ok+0xf8>)
    318c:	4798      	blx	r3
    318e:	e7c4      	b.n	311a <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    3190:	4b10      	ldr	r3, [pc, #64]	; (31d4 <_usb_ep0_on_tansfer_ok+0xd8>)
    3192:	695b      	ldr	r3, [r3, #20]
    3194:	2b00      	cmp	r3, #0
    3196:	d00b      	beq.n	31b0 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    3198:	4798      	blx	r3
    319a:	2800      	cmp	r0, #0
    319c:	d00f      	beq.n	31be <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    319e:	4912      	ldr	r1, [pc, #72]	; (31e8 <_usb_ep0_on_tansfer_ok+0xec>)
    31a0:	4a0d      	ldr	r2, [pc, #52]	; (31d8 <_usb_ep0_on_tansfer_ok+0xdc>)
    31a2:	880b      	ldrh	r3, [r1, #0]
    31a4:	8810      	ldrh	r0, [r2, #0]
    31a6:	181b      	adds	r3, r3, r0
    31a8:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    31aa:	2300      	movs	r3, #0
    31ac:	8013      	strh	r3, [r2, #0]
    31ae:	e7e2      	b.n	3176 <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    31b0:	2205      	movs	r2, #5
    31b2:	4b07      	ldr	r3, [pc, #28]	; (31d0 <_usb_ep0_on_tansfer_ok+0xd4>)
    31b4:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    31b6:	2000      	movs	r0, #0
    31b8:	4b0e      	ldr	r3, [pc, #56]	; (31f4 <_usb_ep0_on_tansfer_ok+0xf8>)
    31ba:	4798      	blx	r3
    31bc:	e7ad      	b.n	311a <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    31be:	2205      	movs	r2, #5
    31c0:	4b03      	ldr	r3, [pc, #12]	; (31d0 <_usb_ep0_on_tansfer_ok+0xd4>)
    31c2:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    31c4:	4b0b      	ldr	r3, [pc, #44]	; (31f4 <_usb_ep0_on_tansfer_ok+0xf8>)
    31c6:	4798      	blx	r3
    31c8:	e7a7      	b.n	311a <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    31ca:	4b0b      	ldr	r3, [pc, #44]	; (31f8 <_usb_ep0_on_tansfer_ok+0xfc>)
    31cc:	4798      	blx	r3
    31ce:	e7a4      	b.n	311a <_usb_ep0_on_tansfer_ok+0x1e>
    31d0:	20000236 	.word	0x20000236
    31d4:	20000534 	.word	0x20000534
    31d8:	20000232 	.word	0x20000232
    31dc:	2000054c 	.word	0x2000054c
    31e0:	00006d41 	.word	0x00006d41
    31e4:	00002ca9 	.word	0x00002ca9
    31e8:	20000234 	.word	0x20000234
    31ec:	200003cc 	.word	0x200003cc
    31f0:	00004369 	.word	0x00004369
    31f4:	000030cd 	.word	0x000030cd
    31f8:	00002d39 	.word	0x00002d39

000031fc <udd_ep_clear_halt>:
{
    31fc:	b570      	push	{r4, r5, r6, lr}
    31fe:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3200:	230f      	movs	r3, #15
    3202:	4003      	ands	r3, r0
		return false;
    3204:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3206:	2b02      	cmp	r3, #2
    3208:	d900      	bls.n	320c <udd_ep_clear_halt+0x10>
}
    320a:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    320c:	0020      	movs	r0, r4
    320e:	4b09      	ldr	r3, [pc, #36]	; (3234 <udd_ep_clear_halt+0x38>)
    3210:	4798      	blx	r3
    3212:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    3214:	0021      	movs	r1, r4
    3216:	4808      	ldr	r0, [pc, #32]	; (3238 <udd_ep_clear_halt+0x3c>)
    3218:	4b08      	ldr	r3, [pc, #32]	; (323c <udd_ep_clear_halt+0x40>)
    321a:	4798      	blx	r3
	if (ptr_job->busy == true) {
    321c:	7cab      	ldrb	r3, [r5, #18]
	return true;
    321e:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    3220:	07db      	lsls	r3, r3, #31
    3222:	d5f2      	bpl.n	320a <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    3224:	7cab      	ldrb	r3, [r5, #18]
    3226:	2201      	movs	r2, #1
    3228:	4393      	bics	r3, r2
    322a:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    322c:	682b      	ldr	r3, [r5, #0]
    322e:	4798      	blx	r3
	return true;
    3230:	2001      	movs	r0, #1
    3232:	e7ea      	b.n	320a <udd_ep_clear_halt+0xe>
    3234:	00002951 	.word	0x00002951
    3238:	200003cc 	.word	0x200003cc
    323c:	0000428f 	.word	0x0000428f

00003240 <udd_ep_wait_stall_clear>:
{
    3240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3242:	0004      	movs	r4, r0
    3244:	000d      	movs	r5, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    3246:	230f      	movs	r3, #15
    3248:	4003      	ands	r3, r0
		return false;
    324a:	2600      	movs	r6, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    324c:	2b02      	cmp	r3, #2
    324e:	d805      	bhi.n	325c <udd_ep_wait_stall_clear+0x1c>
	ptr_job = udd_ep_get_job(ep);
    3250:	4b0d      	ldr	r3, [pc, #52]	; (3288 <udd_ep_wait_stall_clear+0x48>)
    3252:	4798      	blx	r3
    3254:	0007      	movs	r7, r0
	if (ptr_job->busy == true) {
    3256:	7c83      	ldrb	r3, [r0, #18]
    3258:	07db      	lsls	r3, r3, #31
    325a:	d501      	bpl.n	3260 <udd_ep_wait_stall_clear+0x20>
}
    325c:	0030      	movs	r0, r6
    325e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    3260:	0021      	movs	r1, r4
    3262:	480a      	ldr	r0, [pc, #40]	; (328c <udd_ep_wait_stall_clear+0x4c>)
    3264:	4b0a      	ldr	r3, [pc, #40]	; (3290 <udd_ep_wait_stall_clear+0x50>)
    3266:	4798      	blx	r3
    3268:	1e06      	subs	r6, r0, #0
    326a:	d005      	beq.n	3278 <udd_ep_wait_stall_clear+0x38>
		ptr_job->busy = true;
    326c:	7cbb      	ldrb	r3, [r7, #18]
    326e:	2201      	movs	r2, #1
    3270:	4313      	orrs	r3, r2
    3272:	74bb      	strb	r3, [r7, #18]
		ptr_job->call_nohalt = callback;
    3274:	603d      	str	r5, [r7, #0]
		return true;
    3276:	e7f1      	b.n	325c <udd_ep_wait_stall_clear+0x1c>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    3278:	0021      	movs	r1, r4
    327a:	4804      	ldr	r0, [pc, #16]	; (328c <udd_ep_wait_stall_clear+0x4c>)
    327c:	4b05      	ldr	r3, [pc, #20]	; (3294 <udd_ep_wait_stall_clear+0x54>)
    327e:	4798      	blx	r3
    3280:	1e06      	subs	r6, r0, #0
    3282:	d0eb      	beq.n	325c <udd_ep_wait_stall_clear+0x1c>
		callback(); /* Endpoint not halted then call directly callback */
    3284:	47a8      	blx	r5
		return true;
    3286:	e7e9      	b.n	325c <udd_ep_wait_stall_clear+0x1c>
    3288:	00002951 	.word	0x00002951
    328c:	200003cc 	.word	0x200003cc
    3290:	0000423f 	.word	0x0000423f
    3294:	000041dd 	.word	0x000041dd

00003298 <udd_ep_run>:
{
    3298:	b5f0      	push	{r4, r5, r6, r7, lr}
    329a:	b087      	sub	sp, #28
    329c:	0005      	movs	r5, r0
    329e:	9103      	str	r1, [sp, #12]
    32a0:	9202      	str	r2, [sp, #8]
    32a2:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    32a4:	260f      	movs	r6, #15
    32a6:	4006      	ands	r6, r0
		return false;
    32a8:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    32aa:	2e02      	cmp	r6, #2
    32ac:	d902      	bls.n	32b4 <udd_ep_run+0x1c>
}
    32ae:	0020      	movs	r0, r4
    32b0:	b007      	add	sp, #28
    32b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    32b4:	4b64      	ldr	r3, [pc, #400]	; (3448 <udd_ep_run+0x1b0>)
    32b6:	4798      	blx	r3
    32b8:	1e04      	subs	r4, r0, #0
    32ba:	d000      	beq.n	32be <udd_ep_run+0x26>
    32bc:	e0bd      	b.n	343a <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    32be:	0028      	movs	r0, r5
    32c0:	4b62      	ldr	r3, [pc, #392]	; (344c <udd_ep_run+0x1b4>)
    32c2:	4798      	blx	r3
    32c4:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    32c6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    32ca:	425a      	negs	r2, r3
    32cc:	4153      	adcs	r3, r2
    32ce:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    32d0:	b672      	cpsid	i
    32d2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    32d6:	2200      	movs	r2, #0
    32d8:	4b5d      	ldr	r3, [pc, #372]	; (3450 <udd_ep_run+0x1b8>)
    32da:	701a      	strb	r2, [r3, #0]
	return flags;
    32dc:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    32de:	7c83      	ldrb	r3, [r0, #18]
    32e0:	07db      	lsls	r3, r3, #31
    32e2:	d508      	bpl.n	32f6 <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    32e4:	2a00      	cmp	r2, #0
    32e6:	d0e2      	beq.n	32ae <udd_ep_run+0x16>
		cpu_irq_enable();
    32e8:	2201      	movs	r2, #1
    32ea:	4b59      	ldr	r3, [pc, #356]	; (3450 <udd_ep_run+0x1b8>)
    32ec:	701a      	strb	r2, [r3, #0]
    32ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    32f2:	b662      	cpsie	i
    32f4:	e7db      	b.n	32ae <udd_ep_run+0x16>
	ptr_job->busy = true;
    32f6:	7c83      	ldrb	r3, [r0, #18]
    32f8:	2101      	movs	r1, #1
    32fa:	430b      	orrs	r3, r1
    32fc:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    32fe:	2a00      	cmp	r2, #0
    3300:	d005      	beq.n	330e <udd_ep_run+0x76>
		cpu_irq_enable();
    3302:	2201      	movs	r2, #1
    3304:	4b52      	ldr	r3, [pc, #328]	; (3450 <udd_ep_run+0x1b8>)
    3306:	701a      	strb	r2, [r3, #0]
    3308:	f3bf 8f5f 	dmb	sy
    330c:	b662      	cpsie	i
	ptr_job->buf = buf;
    330e:	9b02      	ldr	r3, [sp, #8]
    3310:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    3312:	9b01      	ldr	r3, [sp, #4]
    3314:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    3316:	2300      	movs	r3, #0
    3318:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    331a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    331c:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    331e:	2301      	movs	r3, #1
    3320:	9a03      	ldr	r2, [sp, #12]
    3322:	4013      	ands	r3, r2
    3324:	005a      	lsls	r2, r3, #1
    3326:	7cbb      	ldrb	r3, [r7, #18]
    3328:	2102      	movs	r1, #2
    332a:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    332c:	4313      	orrs	r3, r2
    332e:	2204      	movs	r2, #4
    3330:	4393      	bics	r3, r2
    3332:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    3334:	b26b      	sxtb	r3, r5
    3336:	2b00      	cmp	r3, #0
    3338:	db20      	blt.n	337c <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    333a:	9b01      	ldr	r3, [sp, #4]
    333c:	2b00      	cmp	r3, #0
    333e:	d06f      	beq.n	3420 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    3340:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3342:	4b44      	ldr	r3, [pc, #272]	; (3454 <udd_ep_run+0x1bc>)
    3344:	429c      	cmp	r4, r3
    3346:	d95a      	bls.n	33fe <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3348:	8a39      	ldrh	r1, [r7, #16]
    334a:	001c      	movs	r4, r3
    334c:	0018      	movs	r0, r3
    334e:	4b42      	ldr	r3, [pc, #264]	; (3458 <udd_ep_run+0x1c0>)
    3350:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3352:	1a63      	subs	r3, r4, r1
    3354:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    3356:	8a3b      	ldrh	r3, [r7, #16]
    3358:	429a      	cmp	r2, r3
    335a:	d257      	bcs.n	340c <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    335c:	7cba      	ldrb	r2, [r7, #18]
    335e:	2104      	movs	r1, #4
    3360:	430a      	orrs	r2, r1
    3362:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    3364:	1e72      	subs	r2, r6, #1
    3366:	0192      	lsls	r2, r2, #6
    3368:	493c      	ldr	r1, [pc, #240]	; (345c <udd_ep_run+0x1c4>)
    336a:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    336c:	0031      	movs	r1, r6
    336e:	483c      	ldr	r0, [pc, #240]	; (3460 <udd_ep_run+0x1c8>)
    3370:	4c3c      	ldr	r4, [pc, #240]	; (3464 <udd_ep_run+0x1cc>)
    3372:	47a0      	blx	r4
				return (STATUS_OK ==
    3374:	4244      	negs	r4, r0
    3376:	4144      	adcs	r4, r0
    3378:	b2e4      	uxtb	r4, r4
    337a:	e798      	b.n	32ae <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    337c:	9b01      	ldr	r3, [sp, #4]
    337e:	2b00      	cmp	r3, #0
    3380:	d027      	beq.n	33d2 <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    3382:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3384:	4b33      	ldr	r3, [pc, #204]	; (3454 <udd_ep_run+0x1bc>)
    3386:	429d      	cmp	r5, r3
    3388:	d906      	bls.n	3398 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    338a:	8a39      	ldrh	r1, [r7, #16]
    338c:	001d      	movs	r5, r3
    338e:	0018      	movs	r0, r3
    3390:	4b31      	ldr	r3, [pc, #196]	; (3458 <udd_ep_run+0x1c0>)
    3392:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3394:	1a6b      	subs	r3, r5, r1
    3396:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3398:	7cbb      	ldrb	r3, [r7, #18]
    339a:	079b      	lsls	r3, r3, #30
    339c:	d507      	bpl.n	33ae <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    339e:	8a39      	ldrh	r1, [r7, #16]
    33a0:	0028      	movs	r0, r5
    33a2:	4b31      	ldr	r3, [pc, #196]	; (3468 <udd_ep_run+0x1d0>)
    33a4:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    33a6:	b289      	uxth	r1, r1
    33a8:	424c      	negs	r4, r1
    33aa:	414c      	adcs	r4, r1
    33ac:	b2e4      	uxtb	r4, r4
    33ae:	2001      	movs	r0, #1
    33b0:	4020      	ands	r0, r4
    33b2:	0040      	lsls	r0, r0, #1
    33b4:	7cbc      	ldrb	r4, [r7, #18]
    33b6:	2302      	movs	r3, #2
    33b8:	439c      	bics	r4, r3
    33ba:	4304      	orrs	r4, r0
    33bc:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    33be:	002b      	movs	r3, r5
    33c0:	9a02      	ldr	r2, [sp, #8]
    33c2:	0031      	movs	r1, r6
    33c4:	4826      	ldr	r0, [pc, #152]	; (3460 <udd_ep_run+0x1c8>)
    33c6:	4c29      	ldr	r4, [pc, #164]	; (346c <udd_ep_run+0x1d4>)
    33c8:	47a0      	blx	r4
		return (STATUS_OK ==
    33ca:	4244      	negs	r4, r0
    33cc:	4144      	adcs	r4, r0
    33ce:	b2e4      	uxtb	r4, r4
    33d0:	e76d      	b.n	32ae <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    33d2:	7cbb      	ldrb	r3, [r7, #18]
    33d4:	079b      	lsls	r3, r3, #30
    33d6:	d505      	bpl.n	33e4 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    33d8:	7cbb      	ldrb	r3, [r7, #18]
    33da:	2202      	movs	r2, #2
    33dc:	4393      	bics	r3, r2
    33de:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    33e0:	2500      	movs	r5, #0
    33e2:	e7ec      	b.n	33be <udd_ep_run+0x126>
			ptr_job->busy = false;
    33e4:	7cbb      	ldrb	r3, [r7, #18]
    33e6:	2201      	movs	r2, #1
    33e8:	4393      	bics	r3, r2
    33ea:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    33ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    33ee:	2b00      	cmp	r3, #0
    33f0:	d025      	beq.n	343e <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    33f2:	002a      	movs	r2, r5
    33f4:	2100      	movs	r1, #0
    33f6:	2000      	movs	r0, #0
    33f8:	4798      	blx	r3
			return true;
    33fa:	2401      	movs	r4, #1
    33fc:	e757      	b.n	32ae <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    33fe:	8a39      	ldrh	r1, [r7, #16]
    3400:	0020      	movs	r0, r4
    3402:	4b19      	ldr	r3, [pc, #100]	; (3468 <udd_ep_run+0x1d0>)
    3404:	4798      	blx	r3
    3406:	1a63      	subs	r3, r4, r1
    3408:	b29a      	uxth	r2, r3
    340a:	e7a4      	b.n	3356 <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    340c:	0013      	movs	r3, r2
    340e:	9a02      	ldr	r2, [sp, #8]
    3410:	0031      	movs	r1, r6
    3412:	4813      	ldr	r0, [pc, #76]	; (3460 <udd_ep_run+0x1c8>)
    3414:	4c13      	ldr	r4, [pc, #76]	; (3464 <udd_ep_run+0x1cc>)
    3416:	47a0      	blx	r4
				return (STATUS_OK ==
    3418:	4244      	negs	r4, r0
    341a:	4144      	adcs	r4, r0
    341c:	b2e4      	uxtb	r4, r4
    341e:	e746      	b.n	32ae <udd_ep_run+0x16>
			ptr_job->busy = false;
    3420:	7cbb      	ldrb	r3, [r7, #18]
    3422:	2201      	movs	r2, #1
    3424:	4393      	bics	r3, r2
    3426:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    342a:	2b00      	cmp	r3, #0
    342c:	d009      	beq.n	3442 <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    342e:	002a      	movs	r2, r5
    3430:	2100      	movs	r1, #0
    3432:	2000      	movs	r0, #0
    3434:	4798      	blx	r3
			return true;
    3436:	2401      	movs	r4, #1
    3438:	e739      	b.n	32ae <udd_ep_run+0x16>
		return false;
    343a:	2400      	movs	r4, #0
    343c:	e737      	b.n	32ae <udd_ep_run+0x16>
			return true;
    343e:	2401      	movs	r4, #1
    3440:	e735      	b.n	32ae <udd_ep_run+0x16>
			return true;
    3442:	2401      	movs	r4, #1
    3444:	e733      	b.n	32ae <udd_ep_run+0x16>
    3446:	46c0      	nop			; (mov r8, r8)
    3448:	000030b9 	.word	0x000030b9
    344c:	00002951 	.word	0x00002951
    3450:	200000f9 	.word	0x200000f9
    3454:	00001fff 	.word	0x00001fff
    3458:	00006a45 	.word	0x00006a45
    345c:	2000034c 	.word	0x2000034c
    3460:	200003cc 	.word	0x200003cc
    3464:	00004369 	.word	0x00004369
    3468:	00006871 	.word	0x00006871
    346c:	00004315 	.word	0x00004315

00003470 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    3470:	4b02      	ldr	r3, [pc, #8]	; (347c <udd_set_address+0xc>)
    3472:	681b      	ldr	r3, [r3, #0]
    3474:	2280      	movs	r2, #128	; 0x80
    3476:	4310      	orrs	r0, r2
    3478:	7298      	strb	r0, [r3, #10]
}
    347a:	4770      	bx	lr
    347c:	200003cc 	.word	0x200003cc

00003480 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    3480:	4b02      	ldr	r3, [pc, #8]	; (348c <udd_getaddress+0xc>)
    3482:	681b      	ldr	r3, [r3, #0]
    3484:	7a98      	ldrb	r0, [r3, #10]
    3486:	0640      	lsls	r0, r0, #25
    3488:	0e40      	lsrs	r0, r0, #25
}
    348a:	4770      	bx	lr
    348c:	200003cc 	.word	0x200003cc

00003490 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    3490:	4b01      	ldr	r3, [pc, #4]	; (3498 <udd_set_setup_payload+0x8>)
    3492:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    3494:	8199      	strh	r1, [r3, #12]
}
    3496:	4770      	bx	lr
    3498:	20000534 	.word	0x20000534

0000349c <udd_detach>:

void udd_detach(void)
{
    349c:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    349e:	4b05      	ldr	r3, [pc, #20]	; (34b4 <udd_detach+0x18>)
    34a0:	681a      	ldr	r2, [r3, #0]
    34a2:	8913      	ldrh	r3, [r2, #8]
    34a4:	2101      	movs	r1, #1
    34a6:	430b      	orrs	r3, r1
    34a8:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    34aa:	2001      	movs	r0, #1
    34ac:	4b02      	ldr	r3, [pc, #8]	; (34b8 <udd_detach+0x1c>)
    34ae:	4798      	blx	r3
}
    34b0:	bd10      	pop	{r4, pc}
    34b2:	46c0      	nop			; (mov r8, r8)
    34b4:	200003cc 	.word	0x200003cc
    34b8:	00002891 	.word	0x00002891

000034bc <udd_attach>:

void udd_attach(void)
{
    34bc:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    34be:	2003      	movs	r0, #3
    34c0:	4b16      	ldr	r3, [pc, #88]	; (351c <udd_attach+0x60>)
    34c2:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    34c4:	4c16      	ldr	r4, [pc, #88]	; (3520 <udd_attach+0x64>)
    34c6:	6822      	ldr	r2, [r4, #0]
    34c8:	8913      	ldrh	r3, [r2, #8]
    34ca:	2101      	movs	r1, #1
    34cc:	438b      	bics	r3, r1
    34ce:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    34d0:	4a14      	ldr	r2, [pc, #80]	; (3524 <udd_attach+0x68>)
    34d2:	3103      	adds	r1, #3
    34d4:	0020      	movs	r0, r4
    34d6:	4e14      	ldr	r6, [pc, #80]	; (3528 <udd_attach+0x6c>)
    34d8:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    34da:	4a14      	ldr	r2, [pc, #80]	; (352c <udd_attach+0x70>)
    34dc:	2100      	movs	r1, #0
    34de:	0020      	movs	r0, r4
    34e0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    34e2:	4a13      	ldr	r2, [pc, #76]	; (3530 <udd_attach+0x74>)
    34e4:	2101      	movs	r1, #1
    34e6:	0020      	movs	r0, r4
    34e8:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    34ea:	4a12      	ldr	r2, [pc, #72]	; (3534 <udd_attach+0x78>)
    34ec:	2102      	movs	r1, #2
    34ee:	0020      	movs	r0, r4
    34f0:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    34f2:	2104      	movs	r1, #4
    34f4:	0020      	movs	r0, r4
    34f6:	4d10      	ldr	r5, [pc, #64]	; (3538 <udd_attach+0x7c>)
    34f8:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    34fa:	2100      	movs	r1, #0
    34fc:	0020      	movs	r0, r4
    34fe:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    3500:	2101      	movs	r1, #1
    3502:	0020      	movs	r0, r4
    3504:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3506:	2102      	movs	r1, #2
    3508:	0020      	movs	r0, r4
    350a:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    350c:	4a0b      	ldr	r2, [pc, #44]	; (353c <udd_attach+0x80>)
    350e:	2106      	movs	r1, #6
    3510:	0020      	movs	r0, r4
    3512:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3514:	2106      	movs	r1, #6
    3516:	0020      	movs	r0, r4
    3518:	47a8      	blx	r5
#endif
}
    351a:	bd70      	pop	{r4, r5, r6, pc}
    351c:	00002891 	.word	0x00002891
    3520:	200003cc 	.word	0x200003cc
    3524:	00002ed9 	.word	0x00002ed9
    3528:	00003d39 	.word	0x00003d39
    352c:	00002ec5 	.word	0x00002ec5
    3530:	00002bf9 	.word	0x00002bf9
    3534:	00002b89 	.word	0x00002b89
    3538:	00003d5d 	.word	0x00003d5d
    353c:	00002b55 	.word	0x00002b55

00003540 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    3540:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3542:	2100      	movs	r1, #0
    3544:	200e      	movs	r0, #14
    3546:	4b08      	ldr	r3, [pc, #32]	; (3568 <_uhd_vbus_handler+0x28>)
    3548:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    354a:	4b08      	ldr	r3, [pc, #32]	; (356c <_uhd_vbus_handler+0x2c>)
    354c:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    354e:	045b      	lsls	r3, r3, #17
    3550:	d406      	bmi.n	3560 <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    3552:	4b07      	ldr	r3, [pc, #28]	; (3570 <_uhd_vbus_handler+0x30>)
    3554:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3556:	2100      	movs	r1, #0
    3558:	200e      	movs	r0, #14
    355a:	4b06      	ldr	r3, [pc, #24]	; (3574 <_uhd_vbus_handler+0x34>)
    355c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    355e:	bd10      	pop	{r4, pc}
		udd_attach();
    3560:	4b05      	ldr	r3, [pc, #20]	; (3578 <_uhd_vbus_handler+0x38>)
    3562:	4798      	blx	r3
    3564:	e7f7      	b.n	3556 <_uhd_vbus_handler+0x16>
    3566:	46c0      	nop			; (mov r8, r8)
    3568:	00004c21 	.word	0x00004c21
    356c:	41004400 	.word	0x41004400
    3570:	0000349d 	.word	0x0000349d
    3574:	00004c01 	.word	0x00004c01
    3578:	000034bd 	.word	0x000034bd

0000357c <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    357c:	b570      	push	{r4, r5, r6, lr}
    357e:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3580:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3584:	425a      	negs	r2, r3
    3586:	4153      	adcs	r3, r2
    3588:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    358a:	b672      	cpsid	i
    358c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3590:	2600      	movs	r6, #0
    3592:	4b29      	ldr	r3, [pc, #164]	; (3638 <udd_enable+0xbc>)
    3594:	701e      	strb	r6, [r3, #0]
	return flags;
    3596:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    3598:	ac05      	add	r4, sp, #20
    359a:	0020      	movs	r0, r4
    359c:	4b27      	ldr	r3, [pc, #156]	; (363c <udd_enable+0xc0>)
    359e:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    35a0:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    35a2:	4e27      	ldr	r6, [pc, #156]	; (3640 <udd_enable+0xc4>)
    35a4:	0022      	movs	r2, r4
    35a6:	4927      	ldr	r1, [pc, #156]	; (3644 <udd_enable+0xc8>)
    35a8:	0030      	movs	r0, r6
    35aa:	4b27      	ldr	r3, [pc, #156]	; (3648 <udd_enable+0xcc>)
    35ac:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    35ae:	0030      	movs	r0, r6
    35b0:	4b26      	ldr	r3, [pc, #152]	; (364c <udd_enable+0xd0>)
    35b2:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    35b4:	4b26      	ldr	r3, [pc, #152]	; (3650 <udd_enable+0xd4>)
    35b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    35b8:	069b      	lsls	r3, r3, #26
    35ba:	d434      	bmi.n	3626 <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    35bc:	4924      	ldr	r1, [pc, #144]	; (3650 <udd_enable+0xd4>)
    35be:	22d0      	movs	r2, #208	; 0xd0
    35c0:	68cb      	ldr	r3, [r1, #12]
    35c2:	4013      	ands	r3, r2
    35c4:	2bd0      	cmp	r3, #208	; 0xd0
    35c6:	d1fb      	bne.n	35c0 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    35c8:	2001      	movs	r0, #1
    35ca:	4b22      	ldr	r3, [pc, #136]	; (3654 <udd_enable+0xd8>)
    35cc:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    35ce:	ac02      	add	r4, sp, #8
    35d0:	0020      	movs	r0, r4
    35d2:	4b21      	ldr	r3, [pc, #132]	; (3658 <udd_enable+0xdc>)
    35d4:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    35d6:	230e      	movs	r3, #14
    35d8:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    35da:	2300      	movs	r3, #0
    35dc:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    35de:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    35e0:	3303      	adds	r3, #3
    35e2:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    35e4:	3b02      	subs	r3, #2
    35e6:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    35e8:	2100      	movs	r1, #0
    35ea:	200e      	movs	r0, #14
    35ec:	4b1b      	ldr	r3, [pc, #108]	; (365c <udd_enable+0xe0>)
    35ee:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    35f0:	0021      	movs	r1, r4
    35f2:	200e      	movs	r0, #14
    35f4:	4b1a      	ldr	r3, [pc, #104]	; (3660 <udd_enable+0xe4>)
    35f6:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    35f8:	2200      	movs	r2, #0
    35fa:	210e      	movs	r1, #14
    35fc:	4819      	ldr	r0, [pc, #100]	; (3664 <udd_enable+0xe8>)
    35fe:	4b1a      	ldr	r3, [pc, #104]	; (3668 <udd_enable+0xec>)
    3600:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3602:	2100      	movs	r1, #0
    3604:	200e      	movs	r0, #14
    3606:	4b19      	ldr	r3, [pc, #100]	; (366c <udd_enable+0xf0>)
    3608:	4798      	blx	r3
    360a:	4b19      	ldr	r3, [pc, #100]	; (3670 <udd_enable+0xf4>)
    360c:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    360e:	045b      	lsls	r3, r3, #17
    3610:	d40f      	bmi.n	3632 <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    3612:	2d00      	cmp	r5, #0
    3614:	d005      	beq.n	3622 <udd_enable+0xa6>
		cpu_irq_enable();
    3616:	2201      	movs	r2, #1
    3618:	4b07      	ldr	r3, [pc, #28]	; (3638 <udd_enable+0xbc>)
    361a:	701a      	strb	r2, [r3, #0]
    361c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3620:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    3622:	b006      	add	sp, #24
    3624:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3626:	490a      	ldr	r1, [pc, #40]	; (3650 <udd_enable+0xd4>)
    3628:	2210      	movs	r2, #16
    362a:	68cb      	ldr	r3, [r1, #12]
    362c:	421a      	tst	r2, r3
    362e:	d0fc      	beq.n	362a <udd_enable+0xae>
    3630:	e7ca      	b.n	35c8 <udd_enable+0x4c>
		_uhd_vbus_handler();
    3632:	4b0c      	ldr	r3, [pc, #48]	; (3664 <udd_enable+0xe8>)
    3634:	4798      	blx	r3
    3636:	e7ec      	b.n	3612 <udd_enable+0x96>
    3638:	200000f9 	.word	0x200000f9
    363c:	000049c5 	.word	0x000049c5
    3640:	200003cc 	.word	0x200003cc
    3644:	41005000 	.word	0x41005000
    3648:	000049d5 	.word	0x000049d5
    364c:	000043e9 	.word	0x000043e9
    3650:	40000800 	.word	0x40000800
    3654:	00002891 	.word	0x00002891
    3658:	00001df5 	.word	0x00001df5
    365c:	00004c21 	.word	0x00004c21
    3660:	00001e09 	.word	0x00001e09
    3664:	00003541 	.word	0x00003541
    3668:	00004bd5 	.word	0x00004bd5
    366c:	00004c01 	.word	0x00004c01
    3670:	41004400 	.word	0x41004400

00003674 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3674:	b5f0      	push	{r4, r5, r6, r7, lr}
    3676:	46c6      	mov	lr, r8
    3678:	b500      	push	{lr}
    367a:	000c      	movs	r4, r1
    367c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    367e:	2800      	cmp	r0, #0
    3680:	d10f      	bne.n	36a2 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3682:	2a00      	cmp	r2, #0
    3684:	dd11      	ble.n	36aa <_read+0x36>
    3686:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3688:	4e09      	ldr	r6, [pc, #36]	; (36b0 <_read+0x3c>)
    368a:	4d0a      	ldr	r5, [pc, #40]	; (36b4 <_read+0x40>)
    368c:	6830      	ldr	r0, [r6, #0]
    368e:	0021      	movs	r1, r4
    3690:	682b      	ldr	r3, [r5, #0]
    3692:	4798      	blx	r3
		ptr++;
    3694:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3696:	42bc      	cmp	r4, r7
    3698:	d1f8      	bne.n	368c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    369a:	4640      	mov	r0, r8
    369c:	bc04      	pop	{r2}
    369e:	4690      	mov	r8, r2
    36a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    36a2:	2301      	movs	r3, #1
    36a4:	425b      	negs	r3, r3
    36a6:	4698      	mov	r8, r3
    36a8:	e7f7      	b.n	369a <_read+0x26>
	for (; len > 0; --len) {
    36aa:	4680      	mov	r8, r0
    36ac:	e7f5      	b.n	369a <_read+0x26>
    36ae:	46c0      	nop			; (mov r8, r8)
    36b0:	20000594 	.word	0x20000594
    36b4:	2000058c 	.word	0x2000058c

000036b8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    36b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    36ba:	46c6      	mov	lr, r8
    36bc:	b500      	push	{lr}
    36be:	000e      	movs	r6, r1
    36c0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    36c2:	3801      	subs	r0, #1
    36c4:	2802      	cmp	r0, #2
    36c6:	d810      	bhi.n	36ea <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    36c8:	2a00      	cmp	r2, #0
    36ca:	d011      	beq.n	36f0 <_write+0x38>
    36cc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    36ce:	4b0c      	ldr	r3, [pc, #48]	; (3700 <_write+0x48>)
    36d0:	4698      	mov	r8, r3
    36d2:	4f0c      	ldr	r7, [pc, #48]	; (3704 <_write+0x4c>)
    36d4:	4643      	mov	r3, r8
    36d6:	6818      	ldr	r0, [r3, #0]
    36d8:	5d31      	ldrb	r1, [r6, r4]
    36da:	683b      	ldr	r3, [r7, #0]
    36dc:	4798      	blx	r3
    36de:	2800      	cmp	r0, #0
    36e0:	db08      	blt.n	36f4 <_write+0x3c>
			return -1;
		}
		++nChars;
    36e2:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    36e4:	42a5      	cmp	r5, r4
    36e6:	d1f5      	bne.n	36d4 <_write+0x1c>
    36e8:	e006      	b.n	36f8 <_write+0x40>
		return -1;
    36ea:	2401      	movs	r4, #1
    36ec:	4264      	negs	r4, r4
    36ee:	e003      	b.n	36f8 <_write+0x40>
	for (; len != 0; --len) {
    36f0:	0014      	movs	r4, r2
    36f2:	e001      	b.n	36f8 <_write+0x40>
			return -1;
    36f4:	2401      	movs	r4, #1
    36f6:	4264      	negs	r4, r4
	}
	return nChars;
}
    36f8:	0020      	movs	r0, r4
    36fa:	bc04      	pop	{r2}
    36fc:	4690      	mov	r8, r2
    36fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3700:	20000594 	.word	0x20000594
    3704:	20000590 	.word	0x20000590

00003708 <main>:


/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    3708:	b570      	push	{r4, r5, r6, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
    370a:	2101      	movs	r1, #1
    370c:	4b69      	ldr	r3, [pc, #420]	; (38b4 <main+0x1ac>)
    370e:	7019      	strb	r1, [r3, #0]
    3710:	f3bf 8f5f 	dmb	sy
    3714:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    3716:	4b68      	ldr	r3, [pc, #416]	; (38b8 <main+0x1b0>)
    3718:	2200      	movs	r2, #0
    371a:	701a      	strb	r2, [r3, #0]
    371c:	705a      	strb	r2, [r3, #1]
    371e:	709a      	strb	r2, [r3, #2]
    3720:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    3722:	7119      	strb	r1, [r3, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	system_init();
    3724:	4b65      	ldr	r3, [pc, #404]	; (38bc <main+0x1b4>)
    3726:	4798      	blx	r3
	ui_lb_init();
    3728:	4b65      	ldr	r3, [pc, #404]	; (38c0 <main+0x1b8>)
    372a:	4798      	blx	r3
	ui_debouncer_init();
    372c:	4b65      	ldr	r3, [pc, #404]	; (38c4 <main+0x1bc>)
    372e:	4798      	blx	r3
	ui_powerdown();
    3730:	4b65      	ldr	r3, [pc, #404]	; (38c8 <main+0x1c0>)
    3732:	4798      	blx	r3
	ui_cdc_init();
    3734:	4b65      	ldr	r3, [pc, #404]	; (38cc <main+0x1c4>)
    3736:	4798      	blx	r3
	
	audio_in_init();
    3738:	4b65      	ldr	r3, [pc, #404]	; (38d0 <main+0x1c8>)
    373a:	4798      	blx	r3
	
	sd_mmc_init();
    373c:	4b65      	ldr	r3, [pc, #404]	; (38d4 <main+0x1cc>)
    373e:	4798      	blx	r3

	memories_initialization();
    3740:	4b65      	ldr	r3, [pc, #404]	; (38d8 <main+0x1d0>)
    3742:	4798      	blx	r3

	ui_configure_callback();
    3744:	4b65      	ldr	r3, [pc, #404]	; (38dc <main+0x1d4>)
    3746:	4798      	blx	r3
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    3748:	4b65      	ldr	r3, [pc, #404]	; (38e0 <main+0x1d8>)
    374a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    374c:	4b65      	ldr	r3, [pc, #404]	; (38e4 <main+0x1dc>)
    374e:	681b      	ldr	r3, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3750:	7bda      	ldrb	r2, [r3, #15]

	while (tc_is_syncing(module_inst)) {
    3752:	b252      	sxtb	r2, r2
    3754:	2a00      	cmp	r2, #0
    3756:	dbfb      	blt.n	3750 <main+0x48>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    3758:	2200      	movs	r2, #0
    375a:	711a      	strb	r2, [r3, #4]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    375c:	7bda      	ldrb	r2, [r3, #15]

	while (tc_is_syncing(module_inst)) {
    375e:	b252      	sxtb	r2, r2
    3760:	2a00      	cmp	r2, #0
    3762:	dbfb      	blt.n	375c <main+0x54>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    3764:	2240      	movs	r2, #64	; 0x40
    3766:	715a      	strb	r2, [r3, #5]

	/* The main loop manages only the power mode
	 * because the USB management & button detection
	 * are done by interrupt */
	while (true) {
		if(recording_on) {
    3768:	4c5f      	ldr	r4, [pc, #380]	; (38e8 <main+0x1e0>)
			audio_record_1samp();
		}
		else if (main_b_msc_enable) {
    376a:	4d60      	ldr	r5, [pc, #384]	; (38ec <main+0x1e4>)
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    376c:	4e51      	ldr	r6, [pc, #324]	; (38b4 <main+0x1ac>)
    376e:	e001      	b.n	3774 <main+0x6c>
			audio_record_1samp();
    3770:	4b5f      	ldr	r3, [pc, #380]	; (38f0 <main+0x1e8>)
    3772:	4798      	blx	r3
		if(recording_on) {
    3774:	7823      	ldrb	r3, [r4, #0]
    3776:	2b00      	cmp	r3, #0
    3778:	d1fa      	bne.n	3770 <main+0x68>
		else if (main_b_msc_enable) {
    377a:	782b      	ldrb	r3, [r5, #0]
    377c:	2b00      	cmp	r3, #0
    377e:	d04e      	beq.n	381e <main+0x116>
			if (!udi_msc_process_trans()) {
    3780:	4b5c      	ldr	r3, [pc, #368]	; (38f4 <main+0x1ec>)
    3782:	4798      	blx	r3
    3784:	2800      	cmp	r0, #0
    3786:	d1f5      	bne.n	3774 <main+0x6c>
  __ASM volatile ("cpsid i" : : : "memory");
    3788:	b672      	cpsid	i
    378a:	f3bf 8f5f 	dmb	sy
    378e:	2200      	movs	r2, #0
    3790:	4b48      	ldr	r3, [pc, #288]	; (38b4 <main+0x1ac>)
    3792:	701a      	strb	r2, [r3, #0]
	while (!(*lock_ptr)) {
    3794:	4b48      	ldr	r3, [pc, #288]	; (38b8 <main+0x1b0>)
    3796:	781b      	ldrb	r3, [r3, #0]
    3798:	2b00      	cmp	r3, #0
    379a:	d10b      	bne.n	37b4 <main+0xac>
    379c:	2100      	movs	r1, #0
    379e:	4a46      	ldr	r2, [pc, #280]	; (38b8 <main+0x1b0>)
    37a0:	e000      	b.n	37a4 <main+0x9c>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    37a2:	0019      	movs	r1, r3
		lock_ptr++;
    37a4:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    37a6:	1c4b      	adds	r3, r1, #1
    37a8:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    37aa:	7810      	ldrb	r0, [r2, #0]
    37ac:	2800      	cmp	r0, #0
    37ae:	d0f8      	beq.n	37a2 <main+0x9a>

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    37b0:	2b00      	cmp	r3, #0
    37b2:	d106      	bne.n	37c2 <main+0xba>
		cpu_irq_enable();
    37b4:	2201      	movs	r2, #1
    37b6:	4b3f      	ldr	r3, [pc, #252]	; (38b4 <main+0x1ac>)
    37b8:	701a      	strb	r2, [r3, #0]
    37ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    37be:	b662      	cpsie	i
    37c0:	e7d8      	b.n	3774 <main+0x6c>
  __ASM volatile ("cpsid i" : : : "memory");
    37c2:	b672      	cpsid	i
    37c4:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    37c8:	2200      	movs	r2, #0
    37ca:	4b3a      	ldr	r3, [pc, #232]	; (38b4 <main+0x1ac>)
    37cc:	701a      	strb	r2, [r3, #0]
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    37ce:	4b4a      	ldr	r3, [pc, #296]	; (38f8 <main+0x1f0>)
    37d0:	699b      	ldr	r3, [r3, #24]

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    37d2:	051b      	lsls	r3, r3, #20
    37d4:	0f1b      	lsrs	r3, r3, #28
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    37d6:	2b02      	cmp	r3, #2
    37d8:	d805      	bhi.n	37e6 <main+0xde>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    37da:	4a48      	ldr	r2, [pc, #288]	; (38fc <main+0x1f4>)
    37dc:	6850      	ldr	r0, [r2, #4]
    37de:	23c0      	movs	r3, #192	; 0xc0
    37e0:	009b      	lsls	r3, r3, #2
    37e2:	4303      	orrs	r3, r0
    37e4:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    37e6:	2902      	cmp	r1, #2
    37e8:	d90b      	bls.n	3802 <main+0xfa>
    37ea:	2903      	cmp	r1, #3
    37ec:	d011      	beq.n	3812 <main+0x10a>

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    37ee:	2201      	movs	r2, #1
    37f0:	4b30      	ldr	r3, [pc, #192]	; (38b4 <main+0x1ac>)
    37f2:	701a      	strb	r2, [r3, #0]
    37f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    37f8:	b662      	cpsie	i
  __ASM volatile ("dsb");
    37fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    37fe:	bf30      	wfi
    3800:	e7b8      	b.n	3774 <main+0x6c>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3802:	4a3f      	ldr	r2, [pc, #252]	; (3900 <main+0x1f8>)
    3804:	6913      	ldr	r3, [r2, #16]
    3806:	2004      	movs	r0, #4
    3808:	4383      	bics	r3, r0
    380a:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    380c:	4b3d      	ldr	r3, [pc, #244]	; (3904 <main+0x1fc>)
    380e:	7059      	strb	r1, [r3, #1]
    3810:	e7ed      	b.n	37ee <main+0xe6>
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    3812:	4a3b      	ldr	r2, [pc, #236]	; (3900 <main+0x1f8>)
    3814:	6913      	ldr	r3, [r2, #16]
    3816:	2104      	movs	r1, #4
    3818:	430b      	orrs	r3, r1
    381a:	6113      	str	r3, [r2, #16]
    381c:	e7e7      	b.n	37ee <main+0xe6>
  __ASM volatile ("cpsid i" : : : "memory");
    381e:	b672      	cpsid	i
  __ASM volatile ("dmb");
    3820:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3824:	2300      	movs	r3, #0
    3826:	7033      	strb	r3, [r6, #0]
	while (!(*lock_ptr)) {
    3828:	4b23      	ldr	r3, [pc, #140]	; (38b8 <main+0x1b0>)
    382a:	781b      	ldrb	r3, [r3, #0]
    382c:	2b00      	cmp	r3, #0
    382e:	d10b      	bne.n	3848 <main+0x140>
    3830:	2100      	movs	r1, #0
    3832:	4a21      	ldr	r2, [pc, #132]	; (38b8 <main+0x1b0>)
    3834:	e000      	b.n	3838 <main+0x130>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3836:	0019      	movs	r1, r3
		lock_ptr++;
    3838:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    383a:	1c4b      	adds	r3, r1, #1
    383c:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    383e:	7810      	ldrb	r0, [r2, #0]
    3840:	2800      	cmp	r0, #0
    3842:	d0f8      	beq.n	3836 <main+0x12e>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3844:	2b00      	cmp	r3, #0
    3846:	d106      	bne.n	3856 <main+0x14e>
		cpu_irq_enable();
    3848:	2201      	movs	r2, #1
    384a:	4b1a      	ldr	r3, [pc, #104]	; (38b4 <main+0x1ac>)
    384c:	701a      	strb	r2, [r3, #0]
    384e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3852:	b662      	cpsie	i
    3854:	e78e      	b.n	3774 <main+0x6c>
  __ASM volatile ("cpsid i" : : : "memory");
    3856:	b672      	cpsid	i
    3858:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    385c:	2200      	movs	r2, #0
    385e:	4b15      	ldr	r3, [pc, #84]	; (38b4 <main+0x1ac>)
    3860:	701a      	strb	r2, [r3, #0]
	uint32_t rev = DSU->DID.reg;
    3862:	4b25      	ldr	r3, [pc, #148]	; (38f8 <main+0x1f0>)
    3864:	699b      	ldr	r3, [r3, #24]
	rev = rev >> DSU_DID_REVISION_Pos;
    3866:	051b      	lsls	r3, r3, #20
    3868:	0f1b      	lsrs	r3, r3, #28
	if (rev < _SYSTEM_MCU_REVISION_D) {
    386a:	2b02      	cmp	r3, #2
    386c:	d805      	bhi.n	387a <main+0x172>
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    386e:	4a23      	ldr	r2, [pc, #140]	; (38fc <main+0x1f4>)
    3870:	6850      	ldr	r0, [r2, #4]
    3872:	23c0      	movs	r3, #192	; 0xc0
    3874:	009b      	lsls	r3, r3, #2
    3876:	4303      	orrs	r3, r0
    3878:	6053      	str	r3, [r2, #4]
	switch (sleep_mode) {
    387a:	2902      	cmp	r1, #2
    387c:	d90b      	bls.n	3896 <main+0x18e>
    387e:	2903      	cmp	r1, #3
    3880:	d011      	beq.n	38a6 <main+0x19e>
	cpu_irq_enable();
    3882:	2201      	movs	r2, #1
    3884:	4b0b      	ldr	r3, [pc, #44]	; (38b4 <main+0x1ac>)
    3886:	701a      	strb	r2, [r3, #0]
    3888:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    388c:	b662      	cpsie	i
  __ASM volatile ("dsb");
    388e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    3892:	bf30      	wfi
    3894:	e76e      	b.n	3774 <main+0x6c>
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3896:	4a1a      	ldr	r2, [pc, #104]	; (3900 <main+0x1f8>)
    3898:	6913      	ldr	r3, [r2, #16]
    389a:	2004      	movs	r0, #4
    389c:	4383      	bics	r3, r0
    389e:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    38a0:	4b18      	ldr	r3, [pc, #96]	; (3904 <main+0x1fc>)
    38a2:	7059      	strb	r1, [r3, #1]
    38a4:	e7ed      	b.n	3882 <main+0x17a>
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    38a6:	4a16      	ldr	r2, [pc, #88]	; (3900 <main+0x1f8>)
    38a8:	6913      	ldr	r3, [r2, #16]
    38aa:	2104      	movs	r1, #4
    38ac:	430b      	orrs	r3, r1
    38ae:	6113      	str	r3, [r2, #16]
    38b0:	e7e7      	b.n	3882 <main+0x17a>
    38b2:	46c0      	nop			; (mov r8, r8)
    38b4:	200000f9 	.word	0x200000f9
    38b8:	20000ae8 	.word	0x20000ae8
    38bc:	00006619 	.word	0x00006619
    38c0:	00003b9d 	.word	0x00003b9d
    38c4:	00003c3d 	.word	0x00003c3d
    38c8:	00003ced 	.word	0x00003ced
    38cc:	00003aa9 	.word	0x00003aa9
    38d0:	00000379 	.word	0x00000379
    38d4:	000006d9 	.word	0x000006d9
    38d8:	00003961 	.word	0x00003961
    38dc:	00003ca5 	.word	0x00003ca5
    38e0:	00001881 	.word	0x00001881
    38e4:	200005d8 	.word	0x200005d8
    38e8:	20000290 	.word	0x20000290
    38ec:	2000028e 	.word	0x2000028e
    38f0:	00000459 	.word	0x00000459
    38f4:	000015a1 	.word	0x000015a1
    38f8:	41002000 	.word	0x41002000
    38fc:	41004000 	.word	0x41004000
    3900:	e000ed00 	.word	0xe000ed00
    3904:	40000400 	.word	0x40000400

00003908 <main_suspend_action>:
		}
	}
}

void main_suspend_action(void)
{
    3908:	b510      	push	{r4, lr}
	ui_powerdown();
    390a:	4b01      	ldr	r3, [pc, #4]	; (3910 <main_suspend_action+0x8>)
    390c:	4798      	blx	r3
}
    390e:	bd10      	pop	{r4, pc}
    3910:	00003ced 	.word	0x00003ced

00003914 <main_resume_action>:

void main_resume_action(void)
{
    3914:	b510      	push	{r4, lr}
	ui_wakeup();
    3916:	4b01      	ldr	r3, [pc, #4]	; (391c <main_resume_action+0x8>)
    3918:	4798      	blx	r3
}
    391a:	bd10      	pop	{r4, pc}
    391c:	00003cfd 	.word	0x00003cfd

00003920 <main_sof_action>:

void main_sof_action(void)
{
    3920:	b510      	push	{r4, lr}
	if (!main_b_msc_enable)
    3922:	4b05      	ldr	r3, [pc, #20]	; (3938 <main_sof_action+0x18>)
    3924:	781b      	ldrb	r3, [r3, #0]
    3926:	2b00      	cmp	r3, #0
    3928:	d100      	bne.n	392c <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    392a:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    392c:	4b03      	ldr	r3, [pc, #12]	; (393c <main_sof_action+0x1c>)
    392e:	4798      	blx	r3
    3930:	4b03      	ldr	r3, [pc, #12]	; (3940 <main_sof_action+0x20>)
    3932:	4798      	blx	r3
    3934:	e7f9      	b.n	392a <main_sof_action+0xa>
    3936:	46c0      	nop			; (mov r8, r8)
    3938:	2000028e 	.word	0x2000028e
    393c:	00002f49 	.word	0x00002f49
    3940:	00003d15 	.word	0x00003d15

00003944 <main_msc_enable>:

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
    3944:	2201      	movs	r2, #1
    3946:	4b02      	ldr	r3, [pc, #8]	; (3950 <main_msc_enable+0xc>)
    3948:	701a      	strb	r2, [r3, #0]
	return true;
}
    394a:	2001      	movs	r0, #1
    394c:	4770      	bx	lr
    394e:	46c0      	nop			; (mov r8, r8)
    3950:	2000028e 	.word	0x2000028e

00003954 <main_msc_disable>:

void main_msc_disable(void)
{
	main_b_msc_enable = false;
    3954:	2200      	movs	r2, #0
    3956:	4b01      	ldr	r3, [pc, #4]	; (395c <main_msc_disable+0x8>)
    3958:	701a      	strb	r2, [r3, #0]
}
    395a:	4770      	bx	lr
    395c:	2000028e 	.word	0x2000028e

00003960 <memories_initialization>:
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    3960:	4770      	bx	lr

00003962 <ui_button2_callback>:
	//}
}

void ui_button2_callback(void)
{
}
    3962:	4770      	bx	lr

00003964 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3964:	b570      	push	{r4, r5, r6, lr}
    3966:	b082      	sub	sp, #8
    3968:	0005      	movs	r5, r0
    396a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    396c:	2200      	movs	r2, #0
    396e:	466b      	mov	r3, sp
    3970:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3972:	4c06      	ldr	r4, [pc, #24]	; (398c <usart_serial_getchar+0x28>)
    3974:	466b      	mov	r3, sp
    3976:	1d99      	adds	r1, r3, #6
    3978:	0028      	movs	r0, r5
    397a:	47a0      	blx	r4
    397c:	2800      	cmp	r0, #0
    397e:	d1f9      	bne.n	3974 <usart_serial_getchar+0x10>

	*c = temp;
    3980:	466b      	mov	r3, sp
    3982:	3306      	adds	r3, #6
    3984:	881b      	ldrh	r3, [r3, #0]
    3986:	7033      	strb	r3, [r6, #0]
}
    3988:	b002      	add	sp, #8
    398a:	bd70      	pop	{r4, r5, r6, pc}
    398c:	000022c1 	.word	0x000022c1

00003990 <usart_serial_putchar>:
{
    3990:	b570      	push	{r4, r5, r6, lr}
    3992:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3994:	b28c      	uxth	r4, r1
    3996:	4e03      	ldr	r6, [pc, #12]	; (39a4 <usart_serial_putchar+0x14>)
    3998:	0021      	movs	r1, r4
    399a:	0028      	movs	r0, r5
    399c:	47b0      	blx	r6
    399e:	2800      	cmp	r0, #0
    39a0:	d1fa      	bne.n	3998 <usart_serial_putchar+0x8>
}
    39a2:	bd70      	pop	{r4, r5, r6, pc}
    39a4:	00002295 	.word	0x00002295

000039a8 <ui_button1_callback>:
{
    39a8:	b510      	push	{r4, lr}
    39aa:	4b17      	ldr	r3, [pc, #92]	; (3a08 <ui_button1_callback+0x60>)
    39ac:	6a1b      	ldr	r3, [r3, #32]
	if(press_state) {
    39ae:	00db      	lsls	r3, r3, #3
    39b0:	d500      	bpl.n	39b4 <ui_button1_callback+0xc>
}
    39b2:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    39b4:	2000      	movs	r0, #0
    39b6:	4b15      	ldr	r3, [pc, #84]	; (3a0c <ui_button1_callback+0x64>)
    39b8:	4798      	blx	r3
    39ba:	2264      	movs	r2, #100	; 0x64
    39bc:	2300      	movs	r3, #0
    39be:	2100      	movs	r1, #0
    39c0:	4c13      	ldr	r4, [pc, #76]	; (3a10 <ui_button1_callback+0x68>)
    39c2:	47a0      	blx	r4
    39c4:	4a13      	ldr	r2, [pc, #76]	; (3a14 <ui_button1_callback+0x6c>)
    39c6:	2300      	movs	r3, #0
    39c8:	1880      	adds	r0, r0, r2
    39ca:	4159      	adcs	r1, r3
    39cc:	4a12      	ldr	r2, [pc, #72]	; (3a18 <ui_button1_callback+0x70>)
    39ce:	2300      	movs	r3, #0
    39d0:	4c12      	ldr	r4, [pc, #72]	; (3a1c <ui_button1_callback+0x74>)
    39d2:	47a0      	blx	r4
    39d4:	4b12      	ldr	r3, [pc, #72]	; (3a20 <ui_button1_callback+0x78>)
    39d6:	4798      	blx	r3
    39d8:	4b0b      	ldr	r3, [pc, #44]	; (3a08 <ui_button1_callback+0x60>)
    39da:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    39dc:	00db      	lsls	r3, r3, #3
    39de:	d4e8      	bmi.n	39b2 <ui_button1_callback+0xa>
		if(recording_on) {
    39e0:	4b10      	ldr	r3, [pc, #64]	; (3a24 <ui_button1_callback+0x7c>)
    39e2:	781b      	ldrb	r3, [r3, #0]
    39e4:	2b00      	cmp	r3, #0
    39e6:	d107      	bne.n	39f8 <ui_button1_callback+0x50>
		port_base->OUTCLR.reg = pin_mask;
    39e8:	2280      	movs	r2, #128	; 0x80
    39ea:	0152      	lsls	r2, r2, #5
    39ec:	4b06      	ldr	r3, [pc, #24]	; (3a08 <ui_button1_callback+0x60>)
    39ee:	615a      	str	r2, [r3, #20]
			recording_on = true;
    39f0:	2201      	movs	r2, #1
    39f2:	4b0c      	ldr	r3, [pc, #48]	; (3a24 <ui_button1_callback+0x7c>)
    39f4:	701a      	strb	r2, [r3, #0]
}
    39f6:	e7dc      	b.n	39b2 <ui_button1_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    39f8:	2280      	movs	r2, #128	; 0x80
    39fa:	0152      	lsls	r2, r2, #5
    39fc:	4b02      	ldr	r3, [pc, #8]	; (3a08 <ui_button1_callback+0x60>)
    39fe:	619a      	str	r2, [r3, #24]
			recording_on = false;
    3a00:	2200      	movs	r2, #0
    3a02:	4b08      	ldr	r3, [pc, #32]	; (3a24 <ui_button1_callback+0x7c>)
    3a04:	701a      	strb	r2, [r3, #0]
    3a06:	e7d4      	b.n	39b2 <ui_button1_callback+0xa>
    3a08:	41004400 	.word	0x41004400
    3a0c:	000063d5 	.word	0x000063d5
    3a10:	00006b0d 	.word	0x00006b0d
    3a14:	00001b57 	.word	0x00001b57
    3a18:	00001b58 	.word	0x00001b58
    3a1c:	00006acd 	.word	0x00006acd
    3a20:	20000001 	.word	0x20000001
    3a24:	20000290 	.word	0x20000290

00003a28 <ui_button3_callback>:

void ui_button3_callback(void)
{
    3a28:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    3a2a:	4b17      	ldr	r3, [pc, #92]	; (3a88 <ui_button3_callback+0x60>)
    3a2c:	6a1b      	ldr	r3, [r3, #32]
	//static uint32_t debounce_old3 = 0;
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_3_PIN);
	
	if(press_state) {
    3a2e:	071b      	lsls	r3, r3, #28
    3a30:	d500      	bpl.n	3a34 <ui_button3_callback+0xc>
				//port_pin_set_output_level(UI_LED_3_PIN, UI_LED_ACTIVE);
				//monitoring_on = true;
			//}
		//}
	//}
}
    3a32:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    3a34:	2000      	movs	r0, #0
    3a36:	4b15      	ldr	r3, [pc, #84]	; (3a8c <ui_button3_callback+0x64>)
    3a38:	4798      	blx	r3
    3a3a:	2264      	movs	r2, #100	; 0x64
    3a3c:	2300      	movs	r3, #0
    3a3e:	2100      	movs	r1, #0
    3a40:	4c13      	ldr	r4, [pc, #76]	; (3a90 <ui_button3_callback+0x68>)
    3a42:	47a0      	blx	r4
    3a44:	4a13      	ldr	r2, [pc, #76]	; (3a94 <ui_button3_callback+0x6c>)
    3a46:	2300      	movs	r3, #0
    3a48:	1880      	adds	r0, r0, r2
    3a4a:	4159      	adcs	r1, r3
    3a4c:	4a12      	ldr	r2, [pc, #72]	; (3a98 <ui_button3_callback+0x70>)
    3a4e:	2300      	movs	r3, #0
    3a50:	4c12      	ldr	r4, [pc, #72]	; (3a9c <ui_button3_callback+0x74>)
    3a52:	47a0      	blx	r4
    3a54:	4b12      	ldr	r3, [pc, #72]	; (3aa0 <ui_button3_callback+0x78>)
    3a56:	4798      	blx	r3
    3a58:	4b0b      	ldr	r3, [pc, #44]	; (3a88 <ui_button3_callback+0x60>)
    3a5a:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    3a5c:	071b      	lsls	r3, r3, #28
    3a5e:	d4e8      	bmi.n	3a32 <ui_button3_callback+0xa>
		if(monitoring_on) {
    3a60:	4b10      	ldr	r3, [pc, #64]	; (3aa4 <ui_button3_callback+0x7c>)
    3a62:	781b      	ldrb	r3, [r3, #0]
    3a64:	2b00      	cmp	r3, #0
    3a66:	d107      	bne.n	3a78 <ui_button3_callback+0x50>
		port_base->OUTCLR.reg = pin_mask;
    3a68:	2280      	movs	r2, #128	; 0x80
    3a6a:	0212      	lsls	r2, r2, #8
    3a6c:	4b06      	ldr	r3, [pc, #24]	; (3a88 <ui_button3_callback+0x60>)
    3a6e:	615a      	str	r2, [r3, #20]
			monitoring_on = true;
    3a70:	2201      	movs	r2, #1
    3a72:	4b0c      	ldr	r3, [pc, #48]	; (3aa4 <ui_button3_callback+0x7c>)
    3a74:	701a      	strb	r2, [r3, #0]
}
    3a76:	e7dc      	b.n	3a32 <ui_button3_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    3a78:	2280      	movs	r2, #128	; 0x80
    3a7a:	0212      	lsls	r2, r2, #8
    3a7c:	4b02      	ldr	r3, [pc, #8]	; (3a88 <ui_button3_callback+0x60>)
    3a7e:	619a      	str	r2, [r3, #24]
			monitoring_on = false;
    3a80:	2200      	movs	r2, #0
    3a82:	4b08      	ldr	r3, [pc, #32]	; (3aa4 <ui_button3_callback+0x7c>)
    3a84:	701a      	strb	r2, [r3, #0]
    3a86:	e7d4      	b.n	3a32 <ui_button3_callback+0xa>
    3a88:	41004400 	.word	0x41004400
    3a8c:	000063d5 	.word	0x000063d5
    3a90:	00006b0d 	.word	0x00006b0d
    3a94:	00001b57 	.word	0x00001b57
    3a98:	00001b58 	.word	0x00001b58
    3a9c:	00006acd 	.word	0x00006acd
    3aa0:	20000001 	.word	0x20000001
    3aa4:	2000028f 	.word	0x2000028f

00003aa8 <ui_cdc_init>:
{
    3aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aaa:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3aac:	2380      	movs	r3, #128	; 0x80
    3aae:	05db      	lsls	r3, r3, #23
    3ab0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3ab2:	2300      	movs	r3, #0
    3ab4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3ab6:	22ff      	movs	r2, #255	; 0xff
    3ab8:	4669      	mov	r1, sp
    3aba:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3abc:	2200      	movs	r2, #0
    3abe:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3ac0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3ac2:	2401      	movs	r4, #1
    3ac4:	2124      	movs	r1, #36	; 0x24
    3ac6:	4668      	mov	r0, sp
    3ac8:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    3aca:	3101      	adds	r1, #1
    3acc:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    3ace:	3101      	adds	r1, #1
    3ad0:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    3ad2:	3101      	adds	r1, #1
    3ad4:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    3ad6:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3ad8:	3105      	adds	r1, #5
    3ada:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3adc:	3101      	adds	r1, #1
    3ade:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3ae0:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3ae2:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3ae4:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3ae6:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3ae8:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3aea:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    3aec:	2313      	movs	r3, #19
    3aee:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3af0:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = UI_CDC_MUX_SETTING;
    3af2:	2380      	movs	r3, #128	; 0x80
    3af4:	035b      	lsls	r3, r3, #13
    3af6:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = UI_CDC_PINMUX_PAD0;
    3af8:	4b1a      	ldr	r3, [pc, #104]	; (3b64 <ui_cdc_init+0xbc>)
    3afa:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = UI_CDC_PINMUX_PAD1;
    3afc:	4b1a      	ldr	r3, [pc, #104]	; (3b68 <ui_cdc_init+0xc0>)
    3afe:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = UI_CDC_PINMUX_PAD2;
    3b00:	2301      	movs	r3, #1
    3b02:	425b      	negs	r3, r3
    3b04:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = UI_CDC_PINMUX_PAD3;
    3b06:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_CDC_BAUDRATE;
    3b08:	23e1      	movs	r3, #225	; 0xe1
    3b0a:	025b      	lsls	r3, r3, #9
    3b0c:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3b0e:	4d17      	ldr	r5, [pc, #92]	; (3b6c <ui_cdc_init+0xc4>)
    3b10:	4b17      	ldr	r3, [pc, #92]	; (3b70 <ui_cdc_init+0xc8>)
    3b12:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3b14:	4a17      	ldr	r2, [pc, #92]	; (3b74 <ui_cdc_init+0xcc>)
    3b16:	4b18      	ldr	r3, [pc, #96]	; (3b78 <ui_cdc_init+0xd0>)
    3b18:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3b1a:	4a18      	ldr	r2, [pc, #96]	; (3b7c <ui_cdc_init+0xd4>)
    3b1c:	4b18      	ldr	r3, [pc, #96]	; (3b80 <ui_cdc_init+0xd8>)
    3b1e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3b20:	466a      	mov	r2, sp
    3b22:	4918      	ldr	r1, [pc, #96]	; (3b84 <ui_cdc_init+0xdc>)
    3b24:	0028      	movs	r0, r5
    3b26:	4b18      	ldr	r3, [pc, #96]	; (3b88 <ui_cdc_init+0xe0>)
    3b28:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3b2a:	4f18      	ldr	r7, [pc, #96]	; (3b8c <ui_cdc_init+0xe4>)
    3b2c:	683b      	ldr	r3, [r7, #0]
    3b2e:	6898      	ldr	r0, [r3, #8]
    3b30:	2100      	movs	r1, #0
    3b32:	4e17      	ldr	r6, [pc, #92]	; (3b90 <ui_cdc_init+0xe8>)
    3b34:	47b0      	blx	r6
	setbuf(stdin, NULL);
    3b36:	683b      	ldr	r3, [r7, #0]
    3b38:	6858      	ldr	r0, [r3, #4]
    3b3a:	2100      	movs	r1, #0
    3b3c:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b3e:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3b40:	0030      	movs	r0, r6
    3b42:	4b14      	ldr	r3, [pc, #80]	; (3b94 <ui_cdc_init+0xec>)
    3b44:	4798      	blx	r3
    3b46:	231f      	movs	r3, #31
    3b48:	4018      	ands	r0, r3
    3b4a:	4084      	lsls	r4, r0
    3b4c:	4b12      	ldr	r3, [pc, #72]	; (3b98 <ui_cdc_init+0xf0>)
    3b4e:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b50:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3b52:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3b54:	2b00      	cmp	r3, #0
    3b56:	d1fc      	bne.n	3b52 <ui_cdc_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3b58:	6833      	ldr	r3, [r6, #0]
    3b5a:	2202      	movs	r2, #2
    3b5c:	4313      	orrs	r3, r2
    3b5e:	6033      	str	r3, [r6, #0]
}
    3b60:	b011      	add	sp, #68	; 0x44
    3b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b64:	00160002 	.word	0x00160002
    3b68:	00170002 	.word	0x00170002
    3b6c:	200005a4 	.word	0x200005a4
    3b70:	20000594 	.word	0x20000594
    3b74:	00003991 	.word	0x00003991
    3b78:	20000590 	.word	0x20000590
    3b7c:	00003965 	.word	0x00003965
    3b80:	2000058c 	.word	0x2000058c
    3b84:	42001400 	.word	0x42001400
    3b88:	00001f51 	.word	0x00001f51
    3b8c:	200000fc 	.word	0x200000fc
    3b90:	00006d63 	.word	0x00006d63
    3b94:	00001ec1 	.word	0x00001ec1
    3b98:	e000e100 	.word	0xe000e100

00003b9c <ui_lb_init>:
{
    3b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b9e:	46c6      	mov	lr, r8
    3ba0:	b500      	push	{lr}
    3ba2:	b084      	sub	sp, #16
	config->input_pull = PORT_PIN_PULL_UP;
    3ba4:	ac03      	add	r4, sp, #12
    3ba6:	2501      	movs	r5, #1
    3ba8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3baa:	2600      	movs	r6, #0
    3bac:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3bae:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(UI_LED_1_PIN, &pin_conf);
    3bb0:	0021      	movs	r1, r4
    3bb2:	200c      	movs	r0, #12
    3bb4:	4b1c      	ldr	r3, [pc, #112]	; (3c28 <ui_lb_init+0x8c>)
    3bb6:	4698      	mov	r8, r3
    3bb8:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    3bba:	4f1c      	ldr	r7, [pc, #112]	; (3c2c <ui_lb_init+0x90>)
    3bbc:	2380      	movs	r3, #128	; 0x80
    3bbe:	015b      	lsls	r3, r3, #5
    3bc0:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_2_PIN, &pin_conf);
    3bc2:	0021      	movs	r1, r4
    3bc4:	200d      	movs	r0, #13
    3bc6:	47c0      	blx	r8
    3bc8:	2380      	movs	r3, #128	; 0x80
    3bca:	019b      	lsls	r3, r3, #6
    3bcc:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_3_PIN, &pin_conf);
    3bce:	0021      	movs	r1, r4
    3bd0:	200f      	movs	r0, #15
    3bd2:	47c0      	blx	r8
    3bd4:	2380      	movs	r3, #128	; 0x80
    3bd6:	021b      	lsls	r3, r3, #8
    3bd8:	61bb      	str	r3, [r7, #24]
	extint_chan_get_config_defaults(&config_extint_chan);
    3bda:	4668      	mov	r0, sp
    3bdc:	4b14      	ldr	r3, [pc, #80]	; (3c30 <ui_lb_init+0x94>)
    3bde:	4798      	blx	r3
	config_extint_chan.gpio_pin = UI_BUT_1_EIC_PIN;
    3be0:	231c      	movs	r3, #28
    3be2:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_1_EIC_MUX;
    3be4:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    3be6:	466b      	mov	r3, sp
    3be8:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    3bea:	2403      	movs	r4, #3
    3bec:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_1_EIC_LINE, &config_extint_chan);
    3bee:	4669      	mov	r1, sp
    3bf0:	2008      	movs	r0, #8
    3bf2:	4f10      	ldr	r7, [pc, #64]	; (3c34 <ui_lb_init+0x98>)
    3bf4:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_2_EIC_PIN;
    3bf6:	2302      	movs	r3, #2
    3bf8:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_2_EIC_MUX;
    3bfa:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    3bfc:	466b      	mov	r3, sp
    3bfe:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    3c00:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_2_EIC_LINE, &config_extint_chan);
    3c02:	4669      	mov	r1, sp
    3c04:	2002      	movs	r0, #2
    3c06:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_3_EIC_PIN;
    3c08:	9400      	str	r4, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_3_EIC_MUX;
    3c0a:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    3c0c:	466b      	mov	r3, sp
    3c0e:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    3c10:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_3_EIC_LINE, &config_extint_chan);
    3c12:	4669      	mov	r1, sp
    3c14:	2003      	movs	r0, #3
    3c16:	47b8      	blx	r7
		port_base->OUTCLR.reg = pin_mask;
    3c18:	2280      	movs	r2, #128	; 0x80
    3c1a:	05d2      	lsls	r2, r2, #23
    3c1c:	4b06      	ldr	r3, [pc, #24]	; (3c38 <ui_lb_init+0x9c>)
    3c1e:	615a      	str	r2, [r3, #20]
}
    3c20:	b004      	add	sp, #16
    3c22:	bc04      	pop	{r2}
    3c24:	4690      	mov	r8, r2
    3c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c28:	00006291 	.word	0x00006291
    3c2c:	41004400 	.word	0x41004400
    3c30:	00001df5 	.word	0x00001df5
    3c34:	00001e09 	.word	0x00001e09
    3c38:	41004480 	.word	0x41004480

00003c3c <ui_debouncer_init>:
{
    3c3c:	b510      	push	{r4, lr}
    3c3e:	b08e      	sub	sp, #56	; 0x38
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    3c40:	aa01      	add	r2, sp, #4
    3c42:	2300      	movs	r3, #0
    3c44:	2100      	movs	r1, #0
    3c46:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    3c48:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    3c4a:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    3c4c:	2000      	movs	r0, #0
    3c4e:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3c50:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3c52:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    3c54:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    3c56:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    3c58:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    3c5a:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3c5c:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    3c5e:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    3c60:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    3c62:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    3c64:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    3c66:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    3c68:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    3c6a:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.clock_source = GCLK_GENERATOR_7; // GCKL7 driven by the internal 32 kHz oscillator
    3c6c:	3307      	adds	r3, #7
    3c6e:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV256; // Counter running @ 128 Hz (7.8 ms accuracy)
    3c70:	23c0      	movs	r3, #192	; 0xc0
    3c72:	00db      	lsls	r3, r3, #3
    3c74:	8093      	strh	r3, [r2, #4]
	tc_init(&debounce_timer_module, TC3, &config_tc);
    3c76:	4c08      	ldr	r4, [pc, #32]	; (3c98 <ui_debouncer_init+0x5c>)
    3c78:	4908      	ldr	r1, [pc, #32]	; (3c9c <ui_debouncer_init+0x60>)
    3c7a:	0020      	movs	r0, r4
    3c7c:	4b08      	ldr	r3, [pc, #32]	; (3ca0 <ui_debouncer_init+0x64>)
    3c7e:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3c80:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3c82:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    3c84:	b25b      	sxtb	r3, r3
    3c86:	2b00      	cmp	r3, #0
    3c88:	dbfb      	blt.n	3c82 <ui_debouncer_init+0x46>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3c8a:	8813      	ldrh	r3, [r2, #0]
    3c8c:	2102      	movs	r1, #2
    3c8e:	430b      	orrs	r3, r1
    3c90:	8013      	strh	r3, [r2, #0]
}
    3c92:	b00e      	add	sp, #56	; 0x38
    3c94:	bd10      	pop	{r4, pc}
    3c96:	46c0      	nop			; (mov r8, r8)
    3c98:	200005d8 	.word	0x200005d8
    3c9c:	42002c00 	.word	0x42002c00
    3ca0:	00000151 	.word	0x00000151

00003ca4 <ui_configure_callback>:
{
    3ca4:	b510      	push	{r4, lr}
	extint_register_callback(ui_button1_callback, UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3ca6:	2200      	movs	r2, #0
    3ca8:	2108      	movs	r1, #8
    3caa:	480b      	ldr	r0, [pc, #44]	; (3cd8 <ui_configure_callback+0x34>)
    3cac:	4c0b      	ldr	r4, [pc, #44]	; (3cdc <ui_configure_callback+0x38>)
    3cae:	47a0      	blx	r4
	extint_register_callback(ui_button2_callback, UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3cb0:	2200      	movs	r2, #0
    3cb2:	2102      	movs	r1, #2
    3cb4:	480a      	ldr	r0, [pc, #40]	; (3ce0 <ui_configure_callback+0x3c>)
    3cb6:	47a0      	blx	r4
	extint_register_callback(ui_button3_callback, UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3cb8:	2200      	movs	r2, #0
    3cba:	2103      	movs	r1, #3
    3cbc:	4809      	ldr	r0, [pc, #36]	; (3ce4 <ui_configure_callback+0x40>)
    3cbe:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3cc0:	2100      	movs	r1, #0
    3cc2:	2008      	movs	r0, #8
    3cc4:	4c08      	ldr	r4, [pc, #32]	; (3ce8 <ui_configure_callback+0x44>)
    3cc6:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3cc8:	2100      	movs	r1, #0
    3cca:	2002      	movs	r0, #2
    3ccc:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3cce:	2100      	movs	r1, #0
    3cd0:	2003      	movs	r0, #3
    3cd2:	47a0      	blx	r4
}
    3cd4:	bd10      	pop	{r4, pc}
    3cd6:	46c0      	nop			; (mov r8, r8)
    3cd8:	000039a9 	.word	0x000039a9
    3cdc:	00004bd5 	.word	0x00004bd5
    3ce0:	00003963 	.word	0x00003963
    3ce4:	00003a29 	.word	0x00003a29
    3ce8:	00004c01 	.word	0x00004c01

00003cec <ui_powerdown>:
		port_base->OUTSET.reg = pin_mask;
    3cec:	2280      	movs	r2, #128	; 0x80
    3cee:	05d2      	lsls	r2, r2, #23
    3cf0:	4b01      	ldr	r3, [pc, #4]	; (3cf8 <ui_powerdown+0xc>)
    3cf2:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    3cf4:	4770      	bx	lr
    3cf6:	46c0      	nop			; (mov r8, r8)
    3cf8:	41004480 	.word	0x41004480

00003cfc <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
    3cfc:	2280      	movs	r2, #128	; 0x80
    3cfe:	05d2      	lsls	r2, r2, #23
    3d00:	4b01      	ldr	r3, [pc, #4]	; (3d08 <ui_wakeup+0xc>)
    3d02:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    3d04:	4770      	bx	lr
    3d06:	46c0      	nop			; (mov r8, r8)
    3d08:	41004480 	.word	0x41004480

00003d0c <ui_start_read>:

void ui_start_read(void)
{
}
    3d0c:	4770      	bx	lr

00003d0e <ui_stop_read>:

void ui_stop_read(void)
{
}
    3d0e:	4770      	bx	lr

00003d10 <ui_start_write>:

void ui_start_write(void)
{
}
    3d10:	4770      	bx	lr

00003d12 <ui_stop_write>:

void ui_stop_write(void)
{
}
    3d12:	4770      	bx	lr

00003d14 <ui_process>:

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
    3d14:	2800      	cmp	r0, #0
    3d16:	d104      	bne.n	3d22 <ui_process+0xe>
    3d18:	2280      	movs	r2, #128	; 0x80
    3d1a:	05d2      	lsls	r2, r2, #23
    3d1c:	4b05      	ldr	r3, [pc, #20]	; (3d34 <ui_process+0x20>)
    3d1e:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if (1000 == framenumber) {
		LED_Off(LED_0_PIN);
	}
}
    3d20:	4770      	bx	lr
	if (1000 == framenumber) {
    3d22:	23fa      	movs	r3, #250	; 0xfa
    3d24:	009b      	lsls	r3, r3, #2
    3d26:	4298      	cmp	r0, r3
    3d28:	d1fa      	bne.n	3d20 <ui_process+0xc>
		port_base->OUTSET.reg = pin_mask;
    3d2a:	2280      	movs	r2, #128	; 0x80
    3d2c:	05d2      	lsls	r2, r2, #23
    3d2e:	4b01      	ldr	r3, [pc, #4]	; (3d34 <ui_process+0x20>)
    3d30:	619a      	str	r2, [r3, #24]
}
    3d32:	e7f5      	b.n	3d20 <ui_process+0xc>
    3d34:	41004480 	.word	0x41004480

00003d38 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    3d38:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    3d3a:	000b      	movs	r3, r1
    3d3c:	332e      	adds	r3, #46	; 0x2e
    3d3e:	009b      	lsls	r3, r3, #2
    3d40:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    3d42:	22aa      	movs	r2, #170	; 0xaa
    3d44:	0052      	lsls	r2, r2, #1
    3d46:	0049      	lsls	r1, r1, #1
    3d48:	5a83      	ldrh	r3, [r0, r2]
    3d4a:	4c03      	ldr	r4, [pc, #12]	; (3d58 <usb_device_register_callback+0x20>)
    3d4c:	5b09      	ldrh	r1, [r1, r4]
    3d4e:	430b      	orrs	r3, r1
    3d50:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    3d52:	2000      	movs	r0, #0
    3d54:	bd10      	pop	{r4, pc}
    3d56:	46c0      	nop			; (mov r8, r8)
    3d58:	000077b0 	.word	0x000077b0

00003d5c <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    3d5c:	0049      	lsls	r1, r1, #1
    3d5e:	4b06      	ldr	r3, [pc, #24]	; (3d78 <usb_device_enable_callback+0x1c>)
    3d60:	5acb      	ldrh	r3, [r1, r3]
    3d62:	6802      	ldr	r2, [r0, #0]
    3d64:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    3d66:	21ab      	movs	r1, #171	; 0xab
    3d68:	0049      	lsls	r1, r1, #1
    3d6a:	5a42      	ldrh	r2, [r0, r1]
    3d6c:	431a      	orrs	r2, r3
    3d6e:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    3d70:	6802      	ldr	r2, [r0, #0]
    3d72:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    3d74:	2000      	movs	r0, #0
    3d76:	4770      	bx	lr
    3d78:	000077b0 	.word	0x000077b0

00003d7c <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    3d7c:	0049      	lsls	r1, r1, #1
    3d7e:	4b05      	ldr	r3, [pc, #20]	; (3d94 <usb_device_disable_callback+0x18>)
    3d80:	5aca      	ldrh	r2, [r1, r3]
    3d82:	21ab      	movs	r1, #171	; 0xab
    3d84:	0049      	lsls	r1, r1, #1
    3d86:	5a43      	ldrh	r3, [r0, r1]
    3d88:	4393      	bics	r3, r2
    3d8a:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    3d8c:	6803      	ldr	r3, [r0, #0]
    3d8e:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    3d90:	2000      	movs	r0, #0
    3d92:	4770      	bx	lr
    3d94:	000077b0 	.word	0x000077b0

00003d98 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    3d98:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    3d9a:	008c      	lsls	r4, r1, #2
    3d9c:	18a4      	adds	r4, r4, r2
    3d9e:	3434      	adds	r4, #52	; 0x34
    3da0:	00a4      	lsls	r4, r4, #2
    3da2:	1904      	adds	r4, r0, r4
    3da4:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3da6:	1840      	adds	r0, r0, r1
    3da8:	3059      	adds	r0, #89	; 0x59
    3daa:	30ff      	adds	r0, #255	; 0xff
    3dac:	7803      	ldrb	r3, [r0, #0]
    3dae:	4903      	ldr	r1, [pc, #12]	; (3dbc <usb_device_endpoint_register_callback+0x24>)
    3db0:	5c8a      	ldrb	r2, [r1, r2]
    3db2:	4313      	orrs	r3, r2
    3db4:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    3db6:	2000      	movs	r0, #0
    3db8:	bd10      	pop	{r4, pc}
    3dba:	46c0      	nop			; (mov r8, r8)
    3dbc:	000077c0 	.word	0x000077c0

00003dc0 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    3dc0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    3dc2:	008b      	lsls	r3, r1, #2
    3dc4:	189b      	adds	r3, r3, r2
    3dc6:	3334      	adds	r3, #52	; 0x34
    3dc8:	009b      	lsls	r3, r3, #2
    3dca:	18c3      	adds	r3, r0, r3
    3dcc:	2400      	movs	r4, #0
    3dce:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3dd0:	1840      	adds	r0, r0, r1
    3dd2:	3059      	adds	r0, #89	; 0x59
    3dd4:	30ff      	adds	r0, #255	; 0xff
    3dd6:	4b03      	ldr	r3, [pc, #12]	; (3de4 <usb_device_endpoint_unregister_callback+0x24>)
    3dd8:	5c9a      	ldrb	r2, [r3, r2]
    3dda:	7803      	ldrb	r3, [r0, #0]
    3ddc:	4393      	bics	r3, r2
    3dde:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    3de0:	2000      	movs	r0, #0
    3de2:	bd10      	pop	{r4, pc}
    3de4:	000077c0 	.word	0x000077c0

00003de8 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3de8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3dea:	230f      	movs	r3, #15
    3dec:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3dee:	18c4      	adds	r4, r0, r3
    3df0:	3461      	adds	r4, #97	; 0x61
    3df2:	34ff      	adds	r4, #255	; 0xff
    3df4:	7825      	ldrb	r5, [r4, #0]
    3df6:	4e2f      	ldr	r6, [pc, #188]	; (3eb4 <usb_device_endpoint_enable_callback+0xcc>)
    3df8:	5cb6      	ldrb	r6, [r6, r2]
    3dfa:	4335      	orrs	r5, r6
    3dfc:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3dfe:	2a00      	cmp	r2, #0
    3e00:	d129      	bne.n	3e56 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    3e02:	2b00      	cmp	r3, #0
    3e04:	d112      	bne.n	3e2c <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    3e06:	2503      	movs	r5, #3
    3e08:	240a      	movs	r4, #10
    3e0a:	34ff      	adds	r4, #255	; 0xff
    3e0c:	6806      	ldr	r6, [r0, #0]
    3e0e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3e10:	2a03      	cmp	r2, #3
    3e12:	d109      	bne.n	3e28 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3e14:	b249      	sxtb	r1, r1
    3e16:	2900      	cmp	r1, #0
    3e18:	db44      	blt.n	3ea4 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    3e1a:	6802      	ldr	r2, [r0, #0]
    3e1c:	015b      	lsls	r3, r3, #5
    3e1e:	18d3      	adds	r3, r2, r3
    3e20:	330a      	adds	r3, #10
    3e22:	33ff      	adds	r3, #255	; 0xff
    3e24:	2220      	movs	r2, #32
    3e26:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3e28:	2000      	movs	r0, #0
    3e2a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3e2c:	b24c      	sxtb	r4, r1
    3e2e:	2c00      	cmp	r4, #0
    3e30:	db08      	blt.n	3e44 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    3e32:	015c      	lsls	r4, r3, #5
    3e34:	6805      	ldr	r5, [r0, #0]
    3e36:	46ac      	mov	ip, r5
    3e38:	4464      	add	r4, ip
    3e3a:	340a      	adds	r4, #10
    3e3c:	34ff      	adds	r4, #255	; 0xff
    3e3e:	2501      	movs	r5, #1
    3e40:	7025      	strb	r5, [r4, #0]
    3e42:	e7e5      	b.n	3e10 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    3e44:	015c      	lsls	r4, r3, #5
    3e46:	6805      	ldr	r5, [r0, #0]
    3e48:	46ac      	mov	ip, r5
    3e4a:	4464      	add	r4, ip
    3e4c:	340a      	adds	r4, #10
    3e4e:	34ff      	adds	r4, #255	; 0xff
    3e50:	2502      	movs	r5, #2
    3e52:	7025      	strb	r5, [r4, #0]
    3e54:	e7dc      	b.n	3e10 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3e56:	2a01      	cmp	r2, #1
    3e58:	d11a      	bne.n	3e90 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    3e5a:	2b00      	cmp	r3, #0
    3e5c:	d105      	bne.n	3e6a <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    3e5e:	6802      	ldr	r2, [r0, #0]
    3e60:	210c      	movs	r1, #12
    3e62:	230a      	movs	r3, #10
    3e64:	33ff      	adds	r3, #255	; 0xff
    3e66:	54d1      	strb	r1, [r2, r3]
    3e68:	e7de      	b.n	3e28 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    3e6a:	b249      	sxtb	r1, r1
    3e6c:	2900      	cmp	r1, #0
    3e6e:	db07      	blt.n	3e80 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    3e70:	6802      	ldr	r2, [r0, #0]
    3e72:	015b      	lsls	r3, r3, #5
    3e74:	18d3      	adds	r3, r2, r3
    3e76:	330a      	adds	r3, #10
    3e78:	33ff      	adds	r3, #255	; 0xff
    3e7a:	2204      	movs	r2, #4
    3e7c:	701a      	strb	r2, [r3, #0]
    3e7e:	e7d3      	b.n	3e28 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    3e80:	6802      	ldr	r2, [r0, #0]
    3e82:	015b      	lsls	r3, r3, #5
    3e84:	18d3      	adds	r3, r2, r3
    3e86:	330a      	adds	r3, #10
    3e88:	33ff      	adds	r3, #255	; 0xff
    3e8a:	2208      	movs	r2, #8
    3e8c:	701a      	strb	r2, [r3, #0]
    3e8e:	e7cb      	b.n	3e28 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3e90:	2a02      	cmp	r2, #2
    3e92:	d1bd      	bne.n	3e10 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3e94:	6802      	ldr	r2, [r0, #0]
    3e96:	015b      	lsls	r3, r3, #5
    3e98:	18d3      	adds	r3, r2, r3
    3e9a:	330a      	adds	r3, #10
    3e9c:	33ff      	adds	r3, #255	; 0xff
    3e9e:	2210      	movs	r2, #16
    3ea0:	701a      	strb	r2, [r3, #0]
    3ea2:	e7c1      	b.n	3e28 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    3ea4:	6802      	ldr	r2, [r0, #0]
    3ea6:	015b      	lsls	r3, r3, #5
    3ea8:	18d3      	adds	r3, r2, r3
    3eaa:	330a      	adds	r3, #10
    3eac:	33ff      	adds	r3, #255	; 0xff
    3eae:	2240      	movs	r2, #64	; 0x40
    3eb0:	701a      	strb	r2, [r3, #0]
    3eb2:	e7b9      	b.n	3e28 <usb_device_endpoint_enable_callback+0x40>
    3eb4:	000077c0 	.word	0x000077c0

00003eb8 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3eb8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3eba:	230f      	movs	r3, #15
    3ebc:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3ebe:	18c4      	adds	r4, r0, r3
    3ec0:	3461      	adds	r4, #97	; 0x61
    3ec2:	34ff      	adds	r4, #255	; 0xff
    3ec4:	4d2f      	ldr	r5, [pc, #188]	; (3f84 <usb_device_endpoint_disable_callback+0xcc>)
    3ec6:	5cae      	ldrb	r6, [r5, r2]
    3ec8:	7825      	ldrb	r5, [r4, #0]
    3eca:	43b5      	bics	r5, r6
    3ecc:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3ece:	2a00      	cmp	r2, #0
    3ed0:	d129      	bne.n	3f26 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    3ed2:	2b00      	cmp	r3, #0
    3ed4:	d112      	bne.n	3efc <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    3ed6:	2503      	movs	r5, #3
    3ed8:	2484      	movs	r4, #132	; 0x84
    3eda:	0064      	lsls	r4, r4, #1
    3edc:	6806      	ldr	r6, [r0, #0]
    3ede:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3ee0:	2a03      	cmp	r2, #3
    3ee2:	d109      	bne.n	3ef8 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3ee4:	b249      	sxtb	r1, r1
    3ee6:	2900      	cmp	r1, #0
    3ee8:	db44      	blt.n	3f74 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    3eea:	6802      	ldr	r2, [r0, #0]
    3eec:	015b      	lsls	r3, r3, #5
    3eee:	18d3      	adds	r3, r2, r3
    3ef0:	3309      	adds	r3, #9
    3ef2:	33ff      	adds	r3, #255	; 0xff
    3ef4:	2220      	movs	r2, #32
    3ef6:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3ef8:	2000      	movs	r0, #0
    3efa:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3efc:	b24c      	sxtb	r4, r1
    3efe:	2c00      	cmp	r4, #0
    3f00:	db08      	blt.n	3f14 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    3f02:	015c      	lsls	r4, r3, #5
    3f04:	6805      	ldr	r5, [r0, #0]
    3f06:	46ac      	mov	ip, r5
    3f08:	4464      	add	r4, ip
    3f0a:	3409      	adds	r4, #9
    3f0c:	34ff      	adds	r4, #255	; 0xff
    3f0e:	2501      	movs	r5, #1
    3f10:	7025      	strb	r5, [r4, #0]
    3f12:	e7e5      	b.n	3ee0 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    3f14:	015c      	lsls	r4, r3, #5
    3f16:	6805      	ldr	r5, [r0, #0]
    3f18:	46ac      	mov	ip, r5
    3f1a:	4464      	add	r4, ip
    3f1c:	3409      	adds	r4, #9
    3f1e:	34ff      	adds	r4, #255	; 0xff
    3f20:	2502      	movs	r5, #2
    3f22:	7025      	strb	r5, [r4, #0]
    3f24:	e7dc      	b.n	3ee0 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3f26:	2a01      	cmp	r2, #1
    3f28:	d11a      	bne.n	3f60 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	d105      	bne.n	3f3a <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    3f2e:	6802      	ldr	r2, [r0, #0]
    3f30:	210c      	movs	r1, #12
    3f32:	3309      	adds	r3, #9
    3f34:	33ff      	adds	r3, #255	; 0xff
    3f36:	54d1      	strb	r1, [r2, r3]
    3f38:	e7de      	b.n	3ef8 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    3f3a:	b249      	sxtb	r1, r1
    3f3c:	2900      	cmp	r1, #0
    3f3e:	db07      	blt.n	3f50 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    3f40:	6802      	ldr	r2, [r0, #0]
    3f42:	015b      	lsls	r3, r3, #5
    3f44:	18d3      	adds	r3, r2, r3
    3f46:	3309      	adds	r3, #9
    3f48:	33ff      	adds	r3, #255	; 0xff
    3f4a:	2204      	movs	r2, #4
    3f4c:	701a      	strb	r2, [r3, #0]
    3f4e:	e7d3      	b.n	3ef8 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    3f50:	6802      	ldr	r2, [r0, #0]
    3f52:	015b      	lsls	r3, r3, #5
    3f54:	18d3      	adds	r3, r2, r3
    3f56:	3309      	adds	r3, #9
    3f58:	33ff      	adds	r3, #255	; 0xff
    3f5a:	2208      	movs	r2, #8
    3f5c:	701a      	strb	r2, [r3, #0]
    3f5e:	e7cb      	b.n	3ef8 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3f60:	2a02      	cmp	r2, #2
    3f62:	d1bd      	bne.n	3ee0 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    3f64:	6802      	ldr	r2, [r0, #0]
    3f66:	015b      	lsls	r3, r3, #5
    3f68:	18d3      	adds	r3, r2, r3
    3f6a:	3309      	adds	r3, #9
    3f6c:	33ff      	adds	r3, #255	; 0xff
    3f6e:	2210      	movs	r2, #16
    3f70:	701a      	strb	r2, [r3, #0]
    3f72:	e7c1      	b.n	3ef8 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    3f74:	6802      	ldr	r2, [r0, #0]
    3f76:	015b      	lsls	r3, r3, #5
    3f78:	18d3      	adds	r3, r2, r3
    3f7a:	3309      	adds	r3, #9
    3f7c:	33ff      	adds	r3, #255	; 0xff
    3f7e:	2240      	movs	r2, #64	; 0x40
    3f80:	701a      	strb	r2, [r3, #0]
    3f82:	e7b9      	b.n	3ef8 <usb_device_endpoint_disable_callback+0x40>
    3f84:	000077c0 	.word	0x000077c0

00003f88 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    3f88:	2300      	movs	r3, #0
    3f8a:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    3f8c:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    3f8e:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    3f90:	3301      	adds	r3, #1
    3f92:	70c3      	strb	r3, [r0, #3]
}
    3f94:	4770      	bx	lr
	...

00003f98 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    3f98:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    3f9a:	780c      	ldrb	r4, [r1, #0]
    3f9c:	230f      	movs	r3, #15
    3f9e:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3fa0:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    3fa2:	78ca      	ldrb	r2, [r1, #3]
    3fa4:	2a04      	cmp	r2, #4
    3fa6:	d870      	bhi.n	408a <usb_device_endpoint_set_config+0xf2>
    3fa8:	0092      	lsls	r2, r2, #2
    3faa:	4d89      	ldr	r5, [pc, #548]	; (41d0 <usb_device_endpoint_set_config+0x238>)
    3fac:	58aa      	ldr	r2, [r5, r2]
    3fae:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    3fb0:	6802      	ldr	r2, [r0, #0]
    3fb2:	3308      	adds	r3, #8
    3fb4:	015b      	lsls	r3, r3, #5
    3fb6:	2100      	movs	r1, #0
    3fb8:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    3fba:	2200      	movs	r2, #0
    3fbc:	e082      	b.n	40c4 <usb_device_endpoint_set_config+0x12c>
    3fbe:	015c      	lsls	r4, r3, #5
    3fc0:	6802      	ldr	r2, [r0, #0]
    3fc2:	4694      	mov	ip, r2
    3fc4:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3fc6:	2280      	movs	r2, #128	; 0x80
    3fc8:	0052      	lsls	r2, r2, #1
    3fca:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    3fcc:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3fce:	076d      	lsls	r5, r5, #29
    3fd0:	d178      	bne.n	40c4 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    3fd2:	32e4      	adds	r2, #228	; 0xe4
    3fd4:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3fd6:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    3fd8:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3fda:	422e      	tst	r6, r5
    3fdc:	d172      	bne.n	40c4 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    3fde:	3d5f      	subs	r5, #95	; 0x5f
    3fe0:	32e4      	adds	r2, #228	; 0xe4
    3fe2:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3fe4:	001a      	movs	r2, r3
    3fe6:	3208      	adds	r2, #8
    3fe8:	0152      	lsls	r2, r2, #5
    3fea:	6804      	ldr	r4, [r0, #0]
    3fec:	18a4      	adds	r4, r4, r2
    3fee:	352f      	adds	r5, #47	; 0x2f
    3ff0:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3ff2:	6800      	ldr	r0, [r0, #0]
    3ff4:	1882      	adds	r2, r0, r2
    3ff6:	2080      	movs	r0, #128	; 0x80
    3ff8:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    3ffa:	788a      	ldrb	r2, [r1, #2]
    3ffc:	2a00      	cmp	r2, #0
    3ffe:	d01f      	beq.n	4040 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4000:	0158      	lsls	r0, r3, #5
    4002:	4a74      	ldr	r2, [pc, #464]	; (41d4 <usb_device_endpoint_set_config+0x23c>)
    4004:	1812      	adds	r2, r2, r0
    4006:	6854      	ldr	r4, [r2, #4]
    4008:	2080      	movs	r0, #128	; 0x80
    400a:	0600      	lsls	r0, r0, #24
    400c:	4304      	orrs	r4, r0
    400e:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4010:	6954      	ldr	r4, [r2, #20]
    4012:	4320      	orrs	r0, r4
    4014:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4016:	2507      	movs	r5, #7
    4018:	784c      	ldrb	r4, [r1, #1]
    401a:	015a      	lsls	r2, r3, #5
    401c:	4b6d      	ldr	r3, [pc, #436]	; (41d4 <usb_device_endpoint_set_config+0x23c>)
    401e:	189b      	adds	r3, r3, r2
    4020:	6858      	ldr	r0, [r3, #4]
    4022:	402c      	ands	r4, r5
    4024:	0724      	lsls	r4, r4, #28
    4026:	4e6c      	ldr	r6, [pc, #432]	; (41d8 <usb_device_endpoint_set_config+0x240>)
    4028:	4030      	ands	r0, r6
    402a:	4320      	orrs	r0, r4
    402c:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    402e:	7849      	ldrb	r1, [r1, #1]
    4030:	695a      	ldr	r2, [r3, #20]
    4032:	4029      	ands	r1, r5
    4034:	0709      	lsls	r1, r1, #28
    4036:	4032      	ands	r2, r6
    4038:	430a      	orrs	r2, r1
    403a:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    403c:	2200      	movs	r2, #0
    403e:	e041      	b.n	40c4 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4040:	0158      	lsls	r0, r3, #5
    4042:	4a64      	ldr	r2, [pc, #400]	; (41d4 <usb_device_endpoint_set_config+0x23c>)
    4044:	1812      	adds	r2, r2, r0
    4046:	6850      	ldr	r0, [r2, #4]
    4048:	0040      	lsls	r0, r0, #1
    404a:	0840      	lsrs	r0, r0, #1
    404c:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    404e:	6950      	ldr	r0, [r2, #20]
    4050:	0040      	lsls	r0, r0, #1
    4052:	0840      	lsrs	r0, r0, #1
    4054:	6150      	str	r0, [r2, #20]
    4056:	e7de      	b.n	4016 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    4058:	2c00      	cmp	r4, #0
    405a:	db35      	blt.n	40c8 <usb_device_endpoint_set_config+0x130>
    405c:	015d      	lsls	r5, r3, #5
    405e:	6802      	ldr	r2, [r0, #0]
    4060:	4694      	mov	ip, r2
    4062:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4064:	2280      	movs	r2, #128	; 0x80
    4066:	0052      	lsls	r2, r2, #1
    4068:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    406a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    406c:	0776      	lsls	r6, r6, #29
    406e:	d129      	bne.n	40c4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    4070:	2680      	movs	r6, #128	; 0x80
    4072:	0076      	lsls	r6, r6, #1
    4074:	5daa      	ldrb	r2, [r5, r6]
    4076:	2702      	movs	r7, #2
    4078:	433a      	orrs	r2, r7
    407a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    407c:	6802      	ldr	r2, [r0, #0]
    407e:	0018      	movs	r0, r3
    4080:	3008      	adds	r0, #8
    4082:	0140      	lsls	r0, r0, #5
    4084:	1812      	adds	r2, r2, r0
    4086:	2040      	movs	r0, #64	; 0x40
    4088:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    408a:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    408c:	784f      	ldrb	r7, [r1, #1]
    408e:	005d      	lsls	r5, r3, #1
    4090:	18ad      	adds	r5, r5, r2
    4092:	012d      	lsls	r5, r5, #4
    4094:	4e4f      	ldr	r6, [pc, #316]	; (41d4 <usb_device_endpoint_set_config+0x23c>)
    4096:	1975      	adds	r5, r6, r5
    4098:	6868      	ldr	r0, [r5, #4]
    409a:	2407      	movs	r4, #7
    409c:	403c      	ands	r4, r7
    409e:	0724      	lsls	r4, r4, #28
    40a0:	4e4d      	ldr	r6, [pc, #308]	; (41d8 <usb_device_endpoint_set_config+0x240>)
    40a2:	4030      	ands	r0, r6
    40a4:	4320      	orrs	r0, r4
    40a6:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    40a8:	7889      	ldrb	r1, [r1, #2]
    40aa:	2900      	cmp	r1, #0
    40ac:	d000      	beq.n	40b0 <usb_device_endpoint_set_config+0x118>
    40ae:	e088      	b.n	41c2 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    40b0:	005b      	lsls	r3, r3, #1
    40b2:	189b      	adds	r3, r3, r2
    40b4:	011b      	lsls	r3, r3, #4
    40b6:	4a47      	ldr	r2, [pc, #284]	; (41d4 <usb_device_endpoint_set_config+0x23c>)
    40b8:	18d3      	adds	r3, r2, r3
    40ba:	685a      	ldr	r2, [r3, #4]
    40bc:	0052      	lsls	r2, r2, #1
    40be:	0852      	lsrs	r2, r2, #1
    40c0:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    40c2:	2200      	movs	r2, #0
}
    40c4:	0010      	movs	r0, r2
    40c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40c8:	015d      	lsls	r5, r3, #5
    40ca:	6802      	ldr	r2, [r0, #0]
    40cc:	4694      	mov	ip, r2
    40ce:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    40d0:	2280      	movs	r2, #128	; 0x80
    40d2:	0052      	lsls	r2, r2, #1
    40d4:	5caf      	ldrb	r7, [r5, r2]
    40d6:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    40d8:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    40da:	4237      	tst	r7, r6
    40dc:	d1f2      	bne.n	40c4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    40de:	3690      	adds	r6, #144	; 0x90
    40e0:	5daa      	ldrb	r2, [r5, r6]
    40e2:	2720      	movs	r7, #32
    40e4:	433a      	orrs	r2, r7
    40e6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    40e8:	6802      	ldr	r2, [r0, #0]
    40ea:	0018      	movs	r0, r3
    40ec:	3008      	adds	r0, #8
    40ee:	0140      	lsls	r0, r0, #5
    40f0:	1812      	adds	r2, r2, r0
    40f2:	2080      	movs	r0, #128	; 0x80
    40f4:	7110      	strb	r0, [r2, #4]
    40f6:	e7c8      	b.n	408a <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    40f8:	2c00      	cmp	r4, #0
    40fa:	db17      	blt.n	412c <usb_device_endpoint_set_config+0x194>
    40fc:	015d      	lsls	r5, r3, #5
    40fe:	6802      	ldr	r2, [r0, #0]
    4100:	4694      	mov	ip, r2
    4102:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4104:	2280      	movs	r2, #128	; 0x80
    4106:	0052      	lsls	r2, r2, #1
    4108:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    410a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    410c:	0776      	lsls	r6, r6, #29
    410e:	d1d9      	bne.n	40c4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    4110:	2680      	movs	r6, #128	; 0x80
    4112:	0076      	lsls	r6, r6, #1
    4114:	5daa      	ldrb	r2, [r5, r6]
    4116:	2703      	movs	r7, #3
    4118:	433a      	orrs	r2, r7
    411a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    411c:	6802      	ldr	r2, [r0, #0]
    411e:	0018      	movs	r0, r3
    4120:	3008      	adds	r0, #8
    4122:	0140      	lsls	r0, r0, #5
    4124:	1812      	adds	r2, r2, r0
    4126:	2040      	movs	r0, #64	; 0x40
    4128:	7150      	strb	r0, [r2, #5]
    412a:	e7ae      	b.n	408a <usb_device_endpoint_set_config+0xf2>
    412c:	015d      	lsls	r5, r3, #5
    412e:	6802      	ldr	r2, [r0, #0]
    4130:	4694      	mov	ip, r2
    4132:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4134:	2280      	movs	r2, #128	; 0x80
    4136:	0052      	lsls	r2, r2, #1
    4138:	5caf      	ldrb	r7, [r5, r2]
    413a:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    413c:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    413e:	4237      	tst	r7, r6
    4140:	d1c0      	bne.n	40c4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    4142:	3690      	adds	r6, #144	; 0x90
    4144:	5daa      	ldrb	r2, [r5, r6]
    4146:	2730      	movs	r7, #48	; 0x30
    4148:	433a      	orrs	r2, r7
    414a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    414c:	6802      	ldr	r2, [r0, #0]
    414e:	0018      	movs	r0, r3
    4150:	3008      	adds	r0, #8
    4152:	0140      	lsls	r0, r0, #5
    4154:	1812      	adds	r2, r2, r0
    4156:	2080      	movs	r0, #128	; 0x80
    4158:	7110      	strb	r0, [r2, #4]
    415a:	e796      	b.n	408a <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    415c:	2c00      	cmp	r4, #0
    415e:	db17      	blt.n	4190 <usb_device_endpoint_set_config+0x1f8>
    4160:	015d      	lsls	r5, r3, #5
    4162:	6802      	ldr	r2, [r0, #0]
    4164:	4694      	mov	ip, r2
    4166:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4168:	2280      	movs	r2, #128	; 0x80
    416a:	0052      	lsls	r2, r2, #1
    416c:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    416e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4170:	0776      	lsls	r6, r6, #29
    4172:	d1a7      	bne.n	40c4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    4174:	2680      	movs	r6, #128	; 0x80
    4176:	0076      	lsls	r6, r6, #1
    4178:	5daa      	ldrb	r2, [r5, r6]
    417a:	2704      	movs	r7, #4
    417c:	433a      	orrs	r2, r7
    417e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4180:	6802      	ldr	r2, [r0, #0]
    4182:	0018      	movs	r0, r3
    4184:	3008      	adds	r0, #8
    4186:	0140      	lsls	r0, r0, #5
    4188:	1812      	adds	r2, r2, r0
    418a:	2040      	movs	r0, #64	; 0x40
    418c:	7150      	strb	r0, [r2, #5]
    418e:	e77c      	b.n	408a <usb_device_endpoint_set_config+0xf2>
    4190:	015d      	lsls	r5, r3, #5
    4192:	6802      	ldr	r2, [r0, #0]
    4194:	4694      	mov	ip, r2
    4196:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4198:	2280      	movs	r2, #128	; 0x80
    419a:	0052      	lsls	r2, r2, #1
    419c:	5caf      	ldrb	r7, [r5, r2]
    419e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    41a0:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    41a2:	4237      	tst	r7, r6
    41a4:	d000      	beq.n	41a8 <usb_device_endpoint_set_config+0x210>
    41a6:	e78d      	b.n	40c4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    41a8:	3690      	adds	r6, #144	; 0x90
    41aa:	5daa      	ldrb	r2, [r5, r6]
    41ac:	2740      	movs	r7, #64	; 0x40
    41ae:	433a      	orrs	r2, r7
    41b0:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    41b2:	6802      	ldr	r2, [r0, #0]
    41b4:	0018      	movs	r0, r3
    41b6:	3008      	adds	r0, #8
    41b8:	0140      	lsls	r0, r0, #5
    41ba:	1812      	adds	r2, r2, r0
    41bc:	2080      	movs	r0, #128	; 0x80
    41be:	7110      	strb	r0, [r2, #4]
    41c0:	e763      	b.n	408a <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    41c2:	6869      	ldr	r1, [r5, #4]
    41c4:	2380      	movs	r3, #128	; 0x80
    41c6:	061b      	lsls	r3, r3, #24
    41c8:	430b      	orrs	r3, r1
    41ca:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    41cc:	2200      	movs	r2, #0
    41ce:	e779      	b.n	40c4 <usb_device_endpoint_set_config+0x12c>
    41d0:	0000779c 	.word	0x0000779c
    41d4:	200005e4 	.word	0x200005e4
    41d8:	8fffffff 	.word	0x8fffffff

000041dc <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    41dc:	230f      	movs	r3, #15
    41de:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    41e0:	b249      	sxtb	r1, r1
    41e2:	2900      	cmp	r1, #0
    41e4:	db09      	blt.n	41fa <usb_device_endpoint_is_configured+0x1e>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    41e6:	6802      	ldr	r2, [r0, #0]
    41e8:	3308      	adds	r3, #8
    41ea:	015b      	lsls	r3, r3, #5
    41ec:	5c98      	ldrb	r0, [r3, r2]
    41ee:	0740      	lsls	r0, r0, #29
    41f0:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    41f2:	1e43      	subs	r3, r0, #1
    41f4:	4198      	sbcs	r0, r3
    41f6:	b2c0      	uxtb	r0, r0
}
    41f8:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    41fa:	6802      	ldr	r2, [r0, #0]
    41fc:	3308      	adds	r3, #8
    41fe:	015b      	lsls	r3, r3, #5
    4200:	5c98      	ldrb	r0, [r3, r2]
    4202:	0640      	lsls	r0, r0, #25
    4204:	0f40      	lsrs	r0, r0, #29
    4206:	e7f4      	b.n	41f2 <usb_device_endpoint_is_configured+0x16>

00004208 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    4208:	230f      	movs	r3, #15
    420a:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    420c:	b249      	sxtb	r1, r1
    420e:	2900      	cmp	r1, #0
    4210:	db0a      	blt.n	4228 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4212:	3308      	adds	r3, #8
    4214:	015b      	lsls	r3, r3, #5
    4216:	6802      	ldr	r2, [r0, #0]
    4218:	18d2      	adds	r2, r2, r3
    421a:	2140      	movs	r1, #64	; 0x40
    421c:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    421e:	6802      	ldr	r2, [r0, #0]
    4220:	18d3      	adds	r3, r2, r3
    4222:	2201      	movs	r2, #1
    4224:	71da      	strb	r2, [r3, #7]
	}
}
    4226:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4228:	3308      	adds	r3, #8
    422a:	015b      	lsls	r3, r3, #5
    422c:	6802      	ldr	r2, [r0, #0]
    422e:	18d2      	adds	r2, r2, r3
    4230:	2180      	movs	r1, #128	; 0x80
    4232:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4234:	6802      	ldr	r2, [r0, #0]
    4236:	18d3      	adds	r3, r2, r3
    4238:	2202      	movs	r2, #2
    423a:	71da      	strb	r2, [r3, #7]
    423c:	e7f3      	b.n	4226 <usb_device_endpoint_abort_job+0x1e>

0000423e <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    423e:	230f      	movs	r3, #15
    4240:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    4242:	b249      	sxtb	r1, r1
    4244:	2900      	cmp	r1, #0
    4246:	db07      	blt.n	4258 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    4248:	6802      	ldr	r2, [r0, #0]
    424a:	3308      	adds	r3, #8
    424c:	015b      	lsls	r3, r3, #5
    424e:	18d3      	adds	r3, r2, r3
    4250:	7998      	ldrb	r0, [r3, #6]
    4252:	06c0      	lsls	r0, r0, #27
    4254:	0fc0      	lsrs	r0, r0, #31
	}
}
    4256:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    4258:	6802      	ldr	r2, [r0, #0]
    425a:	3308      	adds	r3, #8
    425c:	015b      	lsls	r3, r3, #5
    425e:	18d3      	adds	r3, r2, r3
    4260:	7998      	ldrb	r0, [r3, #6]
    4262:	0680      	lsls	r0, r0, #26
    4264:	0fc0      	lsrs	r0, r0, #31
    4266:	e7f6      	b.n	4256 <usb_device_endpoint_is_halted+0x18>

00004268 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4268:	230f      	movs	r3, #15
    426a:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    426c:	b249      	sxtb	r1, r1
    426e:	2900      	cmp	r1, #0
    4270:	db06      	blt.n	4280 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    4272:	6802      	ldr	r2, [r0, #0]
    4274:	3308      	adds	r3, #8
    4276:	015b      	lsls	r3, r3, #5
    4278:	18d3      	adds	r3, r2, r3
    427a:	2210      	movs	r2, #16
    427c:	715a      	strb	r2, [r3, #5]
	}
}
    427e:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    4280:	6802      	ldr	r2, [r0, #0]
    4282:	3308      	adds	r3, #8
    4284:	015b      	lsls	r3, r3, #5
    4286:	18d3      	adds	r3, r2, r3
    4288:	2220      	movs	r2, #32
    428a:	715a      	strb	r2, [r3, #5]
    428c:	e7f7      	b.n	427e <usb_device_endpoint_set_halt+0x16>

0000428e <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    428e:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4290:	230f      	movs	r3, #15
    4292:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    4294:	b249      	sxtb	r1, r1
    4296:	2900      	cmp	r1, #0
    4298:	db1d      	blt.n	42d6 <usb_device_endpoint_clear_halt+0x48>
    429a:	0159      	lsls	r1, r3, #5
    429c:	6802      	ldr	r2, [r0, #0]
    429e:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    42a0:	2483      	movs	r4, #131	; 0x83
    42a2:	0064      	lsls	r4, r4, #1
    42a4:	5d14      	ldrb	r4, [r2, r4]
    42a6:	06e4      	lsls	r4, r4, #27
    42a8:	d514      	bpl.n	42d4 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    42aa:	2510      	movs	r5, #16
    42ac:	2482      	movs	r4, #130	; 0x82
    42ae:	0064      	lsls	r4, r4, #1
    42b0:	5515      	strb	r5, [r2, r4]
    42b2:	6802      	ldr	r2, [r0, #0]
    42b4:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    42b6:	2108      	movs	r1, #8
    42b8:	31ff      	adds	r1, #255	; 0xff
    42ba:	5c51      	ldrb	r1, [r2, r1]
    42bc:	0689      	lsls	r1, r1, #26
    42be:	d509      	bpl.n	42d4 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    42c0:	3ce4      	subs	r4, #228	; 0xe4
    42c2:	2108      	movs	r1, #8
    42c4:	31ff      	adds	r1, #255	; 0xff
    42c6:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    42c8:	6802      	ldr	r2, [r0, #0]
    42ca:	3308      	adds	r3, #8
    42cc:	015b      	lsls	r3, r3, #5
    42ce:	18d3      	adds	r3, r2, r3
    42d0:	2201      	movs	r2, #1
    42d2:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    42d4:	bd30      	pop	{r4, r5, pc}
    42d6:	0159      	lsls	r1, r3, #5
    42d8:	6802      	ldr	r2, [r0, #0]
    42da:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    42dc:	2483      	movs	r4, #131	; 0x83
    42de:	0064      	lsls	r4, r4, #1
    42e0:	5d14      	ldrb	r4, [r2, r4]
    42e2:	06a4      	lsls	r4, r4, #26
    42e4:	d5f6      	bpl.n	42d4 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    42e6:	2520      	movs	r5, #32
    42e8:	2482      	movs	r4, #130	; 0x82
    42ea:	0064      	lsls	r4, r4, #1
    42ec:	5515      	strb	r5, [r2, r4]
    42ee:	6802      	ldr	r2, [r0, #0]
    42f0:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    42f2:	2108      	movs	r1, #8
    42f4:	31ff      	adds	r1, #255	; 0xff
    42f6:	5c51      	ldrb	r1, [r2, r1]
    42f8:	0649      	lsls	r1, r1, #25
    42fa:	d5eb      	bpl.n	42d4 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    42fc:	3cc4      	subs	r4, #196	; 0xc4
    42fe:	2108      	movs	r1, #8
    4300:	31ff      	adds	r1, #255	; 0xff
    4302:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    4304:	6802      	ldr	r2, [r0, #0]
    4306:	3308      	adds	r3, #8
    4308:	015b      	lsls	r3, r3, #5
    430a:	18d3      	adds	r3, r2, r3
    430c:	2202      	movs	r2, #2
    430e:	711a      	strb	r2, [r3, #4]
    4310:	e7e0      	b.n	42d4 <usb_device_endpoint_clear_halt+0x46>
	...

00004314 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4314:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    4316:	000c      	movs	r4, r1
    4318:	3408      	adds	r4, #8
    431a:	0164      	lsls	r4, r4, #5
    431c:	6805      	ldr	r5, [r0, #0]
    431e:	5d64      	ldrb	r4, [r4, r5]
    4320:	0664      	lsls	r4, r4, #25
    4322:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    4324:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    4326:	2c00      	cmp	r4, #0
    4328:	d101      	bne.n	432e <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    432a:	0028      	movs	r0, r5
    432c:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    432e:	014c      	lsls	r4, r1, #5
    4330:	4d0b      	ldr	r5, [pc, #44]	; (4360 <usb_device_endpoint_write_buffer_job+0x4c>)
    4332:	192d      	adds	r5, r5, r4
    4334:	002c      	movs	r4, r5
    4336:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    4338:	696a      	ldr	r2, [r5, #20]
    433a:	4d0a      	ldr	r5, [pc, #40]	; (4364 <usb_device_endpoint_write_buffer_job+0x50>)
    433c:	402a      	ands	r2, r5
    433e:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    4340:	6962      	ldr	r2, [r4, #20]
    4342:	049b      	lsls	r3, r3, #18
    4344:	0c9b      	lsrs	r3, r3, #18
    4346:	0b92      	lsrs	r2, r2, #14
    4348:	0392      	lsls	r2, r2, #14
    434a:	4313      	orrs	r3, r2
    434c:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    434e:	6803      	ldr	r3, [r0, #0]
    4350:	3108      	adds	r1, #8
    4352:	0149      	lsls	r1, r1, #5
    4354:	1859      	adds	r1, r3, r1
    4356:	2380      	movs	r3, #128	; 0x80
    4358:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    435a:	2500      	movs	r5, #0
    435c:	e7e5      	b.n	432a <usb_device_endpoint_write_buffer_job+0x16>
    435e:	46c0      	nop			; (mov r8, r8)
    4360:	200005e4 	.word	0x200005e4
    4364:	f0003fff 	.word	0xf0003fff

00004368 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4368:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    436a:	000c      	movs	r4, r1
    436c:	3408      	adds	r4, #8
    436e:	0164      	lsls	r4, r4, #5
    4370:	6805      	ldr	r5, [r0, #0]
    4372:	5d64      	ldrb	r4, [r4, r5]
    4374:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    4376:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    4378:	2c00      	cmp	r4, #0
    437a:	d101      	bne.n	4380 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    437c:	0028      	movs	r0, r5
    437e:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    4380:	4c0b      	ldr	r4, [pc, #44]	; (43b0 <usb_device_endpoint_read_buffer_job+0x48>)
    4382:	014d      	lsls	r5, r1, #5
    4384:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    4386:	1962      	adds	r2, r4, r5
    4388:	6854      	ldr	r4, [r2, #4]
    438a:	049b      	lsls	r3, r3, #18
    438c:	091b      	lsrs	r3, r3, #4
    438e:	4d09      	ldr	r5, [pc, #36]	; (43b4 <usb_device_endpoint_read_buffer_job+0x4c>)
    4390:	402c      	ands	r4, r5
    4392:	4323      	orrs	r3, r4
    4394:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4396:	6853      	ldr	r3, [r2, #4]
    4398:	0b9b      	lsrs	r3, r3, #14
    439a:	039b      	lsls	r3, r3, #14
    439c:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    439e:	6803      	ldr	r3, [r0, #0]
    43a0:	3108      	adds	r1, #8
    43a2:	0149      	lsls	r1, r1, #5
    43a4:	1859      	adds	r1, r3, r1
    43a6:	2340      	movs	r3, #64	; 0x40
    43a8:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    43aa:	2500      	movs	r5, #0
    43ac:	e7e6      	b.n	437c <usb_device_endpoint_read_buffer_job+0x14>
    43ae:	46c0      	nop			; (mov r8, r8)
    43b0:	200005e4 	.word	0x200005e4
    43b4:	f0003fff 	.word	0xf0003fff

000043b8 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    43b8:	4b09      	ldr	r3, [pc, #36]	; (43e0 <usb_device_endpoint_setup_buffer_job+0x28>)
    43ba:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    43bc:	685a      	ldr	r2, [r3, #4]
    43be:	4909      	ldr	r1, [pc, #36]	; (43e4 <usb_device_endpoint_setup_buffer_job+0x2c>)
    43c0:	4011      	ands	r1, r2
    43c2:	2280      	movs	r2, #128	; 0x80
    43c4:	0292      	lsls	r2, r2, #10
    43c6:	430a      	orrs	r2, r1
    43c8:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    43ca:	685a      	ldr	r2, [r3, #4]
    43cc:	0b92      	lsrs	r2, r2, #14
    43ce:	0392      	lsls	r2, r2, #14
    43d0:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    43d2:	6802      	ldr	r2, [r0, #0]
    43d4:	2140      	movs	r1, #64	; 0x40
    43d6:	2382      	movs	r3, #130	; 0x82
    43d8:	005b      	lsls	r3, r3, #1
    43da:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    43dc:	2000      	movs	r0, #0
    43de:	4770      	bx	lr
    43e0:	200005e4 	.word	0x200005e4
    43e4:	f0003fff 	.word	0xf0003fff

000043e8 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    43e8:	6802      	ldr	r2, [r0, #0]
    43ea:	7813      	ldrb	r3, [r2, #0]
    43ec:	2102      	movs	r1, #2
    43ee:	430b      	orrs	r3, r1
    43f0:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    43f2:	6802      	ldr	r2, [r0, #0]
    43f4:	7893      	ldrb	r3, [r2, #2]
    43f6:	2b02      	cmp	r3, #2
    43f8:	d0fc      	beq.n	43f4 <usb_enable+0xc>
}
    43fa:	4770      	bx	lr

000043fc <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    43fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    43fe:	46de      	mov	lr, fp
    4400:	4657      	mov	r7, sl
    4402:	464e      	mov	r6, r9
    4404:	4645      	mov	r5, r8
    4406:	b5e0      	push	{r5, r6, r7, lr}
    4408:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    440a:	4bc2      	ldr	r3, [pc, #776]	; (4714 <USB_Handler+0x318>)
    440c:	681f      	ldr	r7, [r3, #0]
    440e:	683d      	ldr	r5, [r7, #0]
    4410:	782b      	ldrb	r3, [r5, #0]
    4412:	09db      	lsrs	r3, r3, #7
    4414:	d114      	bne.n	4440 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    4416:	8c2e      	ldrh	r6, [r5, #32]
    4418:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    441a:	2e00      	cmp	r6, #0
    441c:	d000      	beq.n	4420 <USB_Handler+0x24>
    441e:	e1a9      	b.n	4774 <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    4420:	8bae      	ldrh	r6, [r5, #28]
    4422:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    4424:	23ab      	movs	r3, #171	; 0xab
    4426:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    4428:	5afb      	ldrh	r3, [r7, r3]
    442a:	22aa      	movs	r2, #170	; 0xaa
    442c:	0052      	lsls	r2, r2, #1
    442e:	5abd      	ldrh	r5, [r7, r2]
    4430:	401d      	ands	r5, r3
    4432:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4434:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    4436:	4fb8      	ldr	r7, [pc, #736]	; (4718 <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    4438:	4bb6      	ldr	r3, [pc, #728]	; (4714 <USB_Handler+0x318>)
    443a:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    443c:	4698      	mov	r8, r3
    443e:	e184      	b.n	474a <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    4440:	8c2b      	ldrh	r3, [r5, #32]
    4442:	b29b      	uxth	r3, r3
    4444:	2b00      	cmp	r3, #0
    4446:	d100      	bne.n	444a <USB_Handler+0x4e>
    4448:	e0de      	b.n	4608 <USB_Handler+0x20c>
    444a:	8c28      	ldrh	r0, [r5, #32]
    444c:	b280      	uxth	r0, r0
    444e:	4bb3      	ldr	r3, [pc, #716]	; (471c <USB_Handler+0x320>)
    4450:	4798      	blx	r3
    4452:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    4454:	281f      	cmp	r0, #31
    4456:	d900      	bls.n	445a <USB_Handler+0x5e>
    4458:	e0d6      	b.n	4608 <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    445a:	0003      	movs	r3, r0
    445c:	3308      	adds	r3, #8
    445e:	015b      	lsls	r3, r3, #5
    4460:	18ed      	adds	r5, r5, r3
    4462:	79ed      	ldrb	r5, [r5, #7]
    4464:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    4466:	07ab      	lsls	r3, r5, #30
    4468:	d041      	beq.n	44ee <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    446a:	4aad      	ldr	r2, [pc, #692]	; (4720 <USB_Handler+0x324>)
    446c:	2301      	movs	r3, #1
    446e:	4083      	lsls	r3, r0
    4470:	6811      	ldr	r1, [r2, #0]
    4472:	4399      	bics	r1, r3
    4474:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4476:	0003      	movs	r3, r0
    4478:	3308      	adds	r3, #8
    447a:	015b      	lsls	r3, r3, #5
    447c:	683a      	ldr	r2, [r7, #0]
    447e:	4694      	mov	ip, r2
    4480:	4463      	add	r3, ip
    4482:	2203      	movs	r2, #3
    4484:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4486:	183b      	adds	r3, r7, r0
    4488:	33ae      	adds	r3, #174	; 0xae
    448a:	781b      	ldrb	r3, [r3, #0]
    448c:	07db      	lsls	r3, r3, #31
    448e:	d52e      	bpl.n	44ee <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    4490:	4ba4      	ldr	r3, [pc, #656]	; (4724 <USB_Handler+0x328>)
    4492:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    4494:	683a      	ldr	r2, [r7, #0]
    4496:	0003      	movs	r3, r0
    4498:	3308      	adds	r3, #8
    449a:	015b      	lsls	r3, r3, #5
    449c:	5c9b      	ldrb	r3, [r3, r2]
    449e:	079b      	lsls	r3, r3, #30
    44a0:	0f9b      	lsrs	r3, r3, #30
    44a2:	2b01      	cmp	r3, #1
    44a4:	d100      	bne.n	44a8 <USB_Handler+0xac>
    44a6:	e081      	b.n	45ac <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    44a8:	0142      	lsls	r2, r0, #5
    44aa:	4b9f      	ldr	r3, [pc, #636]	; (4728 <USB_Handler+0x32c>)
    44ac:	189b      	adds	r3, r3, r2
    44ae:	685a      	ldr	r2, [r3, #4]
    44b0:	0112      	lsls	r2, r2, #4
    44b2:	0c92      	lsrs	r2, r2, #18
    44b4:	b290      	uxth	r0, r2
    44b6:	499b      	ldr	r1, [pc, #620]	; (4724 <USB_Handler+0x328>)
    44b8:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    44ba:	685a      	ldr	r2, [r3, #4]
    44bc:	0492      	lsls	r2, r2, #18
    44be:	0c92      	lsrs	r2, r2, #18
    44c0:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    44c2:	685a      	ldr	r2, [r3, #4]
    44c4:	4999      	ldr	r1, [pc, #612]	; (472c <USB_Handler+0x330>)
    44c6:	400a      	ands	r2, r1
    44c8:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    44ca:	2800      	cmp	r0, #0
    44cc:	d107      	bne.n	44de <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    44ce:	0162      	lsls	r2, r4, #5
    44d0:	4b95      	ldr	r3, [pc, #596]	; (4728 <USB_Handler+0x32c>)
    44d2:	189b      	adds	r3, r3, r2
    44d4:	685b      	ldr	r3, [r3, #4]
    44d6:	049b      	lsls	r3, r3, #18
    44d8:	0c9b      	lsrs	r3, r3, #18
    44da:	4a92      	ldr	r2, [pc, #584]	; (4724 <USB_Handler+0x328>)
    44dc:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    44de:	4b8d      	ldr	r3, [pc, #564]	; (4714 <USB_Handler+0x318>)
    44e0:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    44e2:	1ca3      	adds	r3, r4, #2
    44e4:	011b      	lsls	r3, r3, #4
    44e6:	18c3      	adds	r3, r0, r3
    44e8:	685b      	ldr	r3, [r3, #4]
    44ea:	498e      	ldr	r1, [pc, #568]	; (4724 <USB_Handler+0x328>)
    44ec:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    44ee:	076b      	lsls	r3, r5, #29
    44f0:	d50e      	bpl.n	4510 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    44f2:	4a8b      	ldr	r2, [pc, #556]	; (4720 <USB_Handler+0x324>)
    44f4:	2301      	movs	r3, #1
    44f6:	40a3      	lsls	r3, r4
    44f8:	6811      	ldr	r1, [r2, #0]
    44fa:	4399      	bics	r1, r3
    44fc:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    44fe:	4b85      	ldr	r3, [pc, #532]	; (4714 <USB_Handler+0x318>)
    4500:	681b      	ldr	r3, [r3, #0]
    4502:	681b      	ldr	r3, [r3, #0]
    4504:	0022      	movs	r2, r4
    4506:	3208      	adds	r2, #8
    4508:	0152      	lsls	r2, r2, #5
    450a:	189b      	adds	r3, r3, r2
    450c:	2204      	movs	r2, #4
    450e:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    4510:	072b      	lsls	r3, r5, #28
    4512:	d514      	bpl.n	453e <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4514:	4a82      	ldr	r2, [pc, #520]	; (4720 <USB_Handler+0x324>)
    4516:	2301      	movs	r3, #1
    4518:	40a3      	lsls	r3, r4
    451a:	6811      	ldr	r1, [r2, #0]
    451c:	4399      	bics	r1, r3
    451e:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4520:	4b7c      	ldr	r3, [pc, #496]	; (4714 <USB_Handler+0x318>)
    4522:	6818      	ldr	r0, [r3, #0]
    4524:	0023      	movs	r3, r4
    4526:	3308      	adds	r3, #8
    4528:	015b      	lsls	r3, r3, #5
    452a:	6802      	ldr	r2, [r0, #0]
    452c:	4694      	mov	ip, r2
    452e:	4463      	add	r3, ip
    4530:	2208      	movs	r2, #8
    4532:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4534:	1903      	adds	r3, r0, r4
    4536:	33ae      	adds	r3, #174	; 0xae
    4538:	781b      	ldrb	r3, [r3, #0]
    453a:	079b      	lsls	r3, r3, #30
    453c:	d447      	bmi.n	45ce <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    453e:	06eb      	lsls	r3, r5, #27
    4540:	d514      	bpl.n	456c <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4542:	4a77      	ldr	r2, [pc, #476]	; (4720 <USB_Handler+0x324>)
    4544:	2301      	movs	r3, #1
    4546:	40a3      	lsls	r3, r4
    4548:	6811      	ldr	r1, [r2, #0]
    454a:	4399      	bics	r1, r3
    454c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    454e:	4b71      	ldr	r3, [pc, #452]	; (4714 <USB_Handler+0x318>)
    4550:	6818      	ldr	r0, [r3, #0]
    4552:	0023      	movs	r3, r4
    4554:	3308      	adds	r3, #8
    4556:	015b      	lsls	r3, r3, #5
    4558:	6802      	ldr	r2, [r0, #0]
    455a:	4694      	mov	ip, r2
    455c:	4463      	add	r3, ip
    455e:	2210      	movs	r2, #16
    4560:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4562:	1903      	adds	r3, r0, r4
    4564:	33ae      	adds	r3, #174	; 0xae
    4566:	781b      	ldrb	r3, [r3, #0]
    4568:	075b      	lsls	r3, r3, #29
    456a:	d43e      	bmi.n	45ea <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    456c:	06ab      	lsls	r3, r5, #26
    456e:	d400      	bmi.n	4572 <USB_Handler+0x176>
    4570:	e0b0      	b.n	46d4 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4572:	4a6b      	ldr	r2, [pc, #428]	; (4720 <USB_Handler+0x324>)
    4574:	2301      	movs	r3, #1
    4576:	40a3      	lsls	r3, r4
    4578:	6811      	ldr	r1, [r2, #0]
    457a:	4399      	bics	r1, r3
    457c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    457e:	4b65      	ldr	r3, [pc, #404]	; (4714 <USB_Handler+0x318>)
    4580:	6818      	ldr	r0, [r3, #0]
    4582:	0023      	movs	r3, r4
    4584:	3308      	adds	r3, #8
    4586:	015b      	lsls	r3, r3, #5
    4588:	6802      	ldr	r2, [r0, #0]
    458a:	4694      	mov	ip, r2
    458c:	4463      	add	r3, ip
    458e:	2220      	movs	r2, #32
    4590:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4592:	1903      	adds	r3, r0, r4
    4594:	33ae      	adds	r3, #174	; 0xae
    4596:	781b      	ldrb	r3, [r3, #0]
    4598:	071b      	lsls	r3, r3, #28
    459a:	d400      	bmi.n	459e <USB_Handler+0x1a2>
    459c:	e09a      	b.n	46d4 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    459e:	4961      	ldr	r1, [pc, #388]	; (4724 <USB_Handler+0x328>)
    45a0:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    45a2:	0124      	lsls	r4, r4, #4
    45a4:	1904      	adds	r4, r0, r4
    45a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    45a8:	4798      	blx	r3
    45aa:	e093      	b.n	46d4 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    45ac:	0142      	lsls	r2, r0, #5
    45ae:	4b5e      	ldr	r3, [pc, #376]	; (4728 <USB_Handler+0x32c>)
    45b0:	189b      	adds	r3, r3, r2
    45b2:	685a      	ldr	r2, [r3, #4]
    45b4:	0492      	lsls	r2, r2, #18
    45b6:	0c92      	lsrs	r2, r2, #18
    45b8:	495a      	ldr	r1, [pc, #360]	; (4724 <USB_Handler+0x328>)
    45ba:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    45bc:	685a      	ldr	r2, [r3, #4]
    45be:	0112      	lsls	r2, r2, #4
    45c0:	0c92      	lsrs	r2, r2, #18
    45c2:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    45c4:	685a      	ldr	r2, [r3, #4]
    45c6:	0b92      	lsrs	r2, r2, #14
    45c8:	0392      	lsls	r2, r2, #14
    45ca:	605a      	str	r2, [r3, #4]
    45cc:	e787      	b.n	44de <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    45ce:	4955      	ldr	r1, [pc, #340]	; (4724 <USB_Handler+0x328>)
    45d0:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    45d2:	0162      	lsls	r2, r4, #5
    45d4:	4b54      	ldr	r3, [pc, #336]	; (4728 <USB_Handler+0x32c>)
    45d6:	189b      	adds	r3, r3, r2
    45d8:	89db      	ldrh	r3, [r3, #14]
    45da:	221f      	movs	r2, #31
    45dc:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    45de:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    45e0:	0123      	lsls	r3, r4, #4
    45e2:	18c3      	adds	r3, r0, r3
    45e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45e6:	4798      	blx	r3
    45e8:	e7a9      	b.n	453e <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    45ea:	494e      	ldr	r1, [pc, #312]	; (4724 <USB_Handler+0x328>)
    45ec:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    45ee:	0162      	lsls	r2, r4, #5
    45f0:	4b4d      	ldr	r3, [pc, #308]	; (4728 <USB_Handler+0x32c>)
    45f2:	189b      	adds	r3, r3, r2
    45f4:	685b      	ldr	r3, [r3, #4]
    45f6:	011b      	lsls	r3, r3, #4
    45f8:	0c9b      	lsrs	r3, r3, #18
    45fa:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    45fc:	0123      	lsls	r3, r4, #4
    45fe:	18c3      	adds	r3, r0, r3
    4600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4602:	2100      	movs	r1, #0
    4604:	4798      	blx	r3
    4606:	e7b1      	b.n	456c <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    4608:	8bac      	ldrh	r4, [r5, #28]
    460a:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    460c:	0763      	lsls	r3, r4, #29
    460e:	d505      	bpl.n	461c <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    4610:	2304      	movs	r3, #4
    4612:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    4614:	33a1      	adds	r3, #161	; 0xa1
    4616:	5cfb      	ldrb	r3, [r7, r3]
    4618:	07db      	lsls	r3, r3, #31
    461a:	d462      	bmi.n	46e2 <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    461c:	0723      	lsls	r3, r4, #28
    461e:	d50b      	bpl.n	4638 <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    4620:	2200      	movs	r2, #0
    4622:	4b3f      	ldr	r3, [pc, #252]	; (4720 <USB_Handler+0x324>)
    4624:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    4626:	4b3b      	ldr	r3, [pc, #236]	; (4714 <USB_Handler+0x318>)
    4628:	6818      	ldr	r0, [r3, #0]
    462a:	2308      	movs	r3, #8
    462c:	6802      	ldr	r2, [r0, #0]
    462e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    4630:	339d      	adds	r3, #157	; 0x9d
    4632:	5cc3      	ldrb	r3, [r0, r3]
    4634:	079b      	lsls	r3, r3, #30
    4636:	d458      	bmi.n	46ea <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    4638:	0663      	lsls	r3, r4, #25
    463a:	d508      	bpl.n	464e <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    463c:	4b35      	ldr	r3, [pc, #212]	; (4714 <USB_Handler+0x318>)
    463e:	6818      	ldr	r0, [r3, #0]
    4640:	2340      	movs	r3, #64	; 0x40
    4642:	6802      	ldr	r2, [r0, #0]
    4644:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    4646:	3365      	adds	r3, #101	; 0x65
    4648:	5cc3      	ldrb	r3, [r0, r3]
    464a:	06db      	lsls	r3, r3, #27
    464c:	d450      	bmi.n	46f0 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    464e:	06a3      	lsls	r3, r4, #26
    4650:	d508      	bpl.n	4664 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    4652:	4b30      	ldr	r3, [pc, #192]	; (4714 <USB_Handler+0x318>)
    4654:	6818      	ldr	r0, [r3, #0]
    4656:	2320      	movs	r3, #32
    4658:	6802      	ldr	r2, [r0, #0]
    465a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    465c:	3385      	adds	r3, #133	; 0x85
    465e:	5cc3      	ldrb	r3, [r0, r3]
    4660:	071b      	lsls	r3, r3, #28
    4662:	d448      	bmi.n	46f6 <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    4664:	06e3      	lsls	r3, r4, #27
    4666:	d508      	bpl.n	467a <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    4668:	4b2a      	ldr	r3, [pc, #168]	; (4714 <USB_Handler+0x318>)
    466a:	6818      	ldr	r0, [r3, #0]
    466c:	2310      	movs	r3, #16
    466e:	6802      	ldr	r2, [r0, #0]
    4670:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    4672:	3395      	adds	r3, #149	; 0x95
    4674:	5cc3      	ldrb	r3, [r0, r3]
    4676:	075b      	lsls	r3, r3, #29
    4678:	d440      	bmi.n	46fc <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    467a:	0623      	lsls	r3, r4, #24
    467c:	d50b      	bpl.n	4696 <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    467e:	2200      	movs	r2, #0
    4680:	4b27      	ldr	r3, [pc, #156]	; (4720 <USB_Handler+0x324>)
    4682:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    4684:	4b23      	ldr	r3, [pc, #140]	; (4714 <USB_Handler+0x318>)
    4686:	6818      	ldr	r0, [r3, #0]
    4688:	2380      	movs	r3, #128	; 0x80
    468a:	6802      	ldr	r2, [r0, #0]
    468c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    468e:	3325      	adds	r3, #37	; 0x25
    4690:	5cc3      	ldrb	r3, [r0, r3]
    4692:	069b      	lsls	r3, r3, #26
    4694:	d435      	bmi.n	4702 <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    4696:	05e3      	lsls	r3, r4, #23
    4698:	d50c      	bpl.n	46b4 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    469a:	2200      	movs	r2, #0
    469c:	4b20      	ldr	r3, [pc, #128]	; (4720 <USB_Handler+0x324>)
    469e:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    46a0:	4b1c      	ldr	r3, [pc, #112]	; (4714 <USB_Handler+0x318>)
    46a2:	6818      	ldr	r0, [r3, #0]
    46a4:	2380      	movs	r3, #128	; 0x80
    46a6:	005b      	lsls	r3, r3, #1
    46a8:	6802      	ldr	r2, [r0, #0]
    46aa:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    46ac:	3b5b      	subs	r3, #91	; 0x5b
    46ae:	5cc3      	ldrb	r3, [r0, r3]
    46b0:	065b      	lsls	r3, r3, #25
    46b2:	d429      	bmi.n	4708 <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    46b4:	05a3      	lsls	r3, r4, #22
    46b6:	d50d      	bpl.n	46d4 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    46b8:	2200      	movs	r2, #0
    46ba:	4b19      	ldr	r3, [pc, #100]	; (4720 <USB_Handler+0x324>)
    46bc:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    46be:	4b15      	ldr	r3, [pc, #84]	; (4714 <USB_Handler+0x318>)
    46c0:	6818      	ldr	r0, [r3, #0]
    46c2:	2380      	movs	r3, #128	; 0x80
    46c4:	009b      	lsls	r3, r3, #2
    46c6:	6802      	ldr	r2, [r0, #0]
    46c8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    46ca:	3b5c      	subs	r3, #92	; 0x5c
    46cc:	3bff      	subs	r3, #255	; 0xff
    46ce:	5cc3      	ldrb	r3, [r0, r3]
    46d0:	2b7f      	cmp	r3, #127	; 0x7f
    46d2:	d81c      	bhi.n	470e <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    46d4:	b003      	add	sp, #12
    46d6:	bc3c      	pop	{r2, r3, r4, r5}
    46d8:	4690      	mov	r8, r2
    46da:	4699      	mov	r9, r3
    46dc:	46a2      	mov	sl, r4
    46de:	46ab      	mov	fp, r5
    46e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    46e2:	687b      	ldr	r3, [r7, #4]
    46e4:	0038      	movs	r0, r7
    46e6:	4798      	blx	r3
    46e8:	e798      	b.n	461c <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    46ea:	6883      	ldr	r3, [r0, #8]
    46ec:	4798      	blx	r3
    46ee:	e7a3      	b.n	4638 <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    46f0:	6943      	ldr	r3, [r0, #20]
    46f2:	4798      	blx	r3
    46f4:	e7ab      	b.n	464e <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    46f6:	6903      	ldr	r3, [r0, #16]
    46f8:	4798      	blx	r3
    46fa:	e7b3      	b.n	4664 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    46fc:	68c3      	ldr	r3, [r0, #12]
    46fe:	4798      	blx	r3
    4700:	e7bb      	b.n	467a <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    4702:	6983      	ldr	r3, [r0, #24]
    4704:	4798      	blx	r3
    4706:	e7c6      	b.n	4696 <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    4708:	69c3      	ldr	r3, [r0, #28]
    470a:	4798      	blx	r3
    470c:	e7d2      	b.n	46b4 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    470e:	6a03      	ldr	r3, [r0, #32]
    4710:	4798      	blx	r3
    4712:	e7df      	b.n	46d4 <USB_Handler+0x2d8>
    4714:	20000294 	.word	0x20000294
    4718:	000077b0 	.word	0x000077b0
    471c:	00006a8d 	.word	0x00006a8d
    4720:	200002a4 	.word	0x200002a4
    4724:	200002a8 	.word	0x200002a8
    4728:	200005e4 	.word	0x200005e4
    472c:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4730:	0023      	movs	r3, r4
    4732:	332e      	adds	r3, #46	; 0x2e
    4734:	009b      	lsls	r3, r3, #2
    4736:	4642      	mov	r2, r8
    4738:	6812      	ldr	r2, [r2, #0]
    473a:	589b      	ldr	r3, [r3, r2]
    473c:	499e      	ldr	r1, [pc, #632]	; (49b8 <USB_Handler+0x5bc>)
    473e:	4642      	mov	r2, r8
    4740:	6810      	ldr	r0, [r2, #0]
    4742:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4744:	3401      	adds	r4, #1
    4746:	2c07      	cmp	r4, #7
    4748:	d0c4      	beq.n	46d4 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    474a:	0063      	lsls	r3, r4, #1
    474c:	5bdb      	ldrh	r3, [r3, r7]
    474e:	4233      	tst	r3, r6
    4750:	d003      	beq.n	475a <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    4752:	464a      	mov	r2, r9
    4754:	6812      	ldr	r2, [r2, #0]
    4756:	6812      	ldr	r2, [r2, #0]
    4758:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    475a:	422b      	tst	r3, r5
    475c:	d0f2      	beq.n	4744 <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    475e:	2c06      	cmp	r4, #6
    4760:	d1e6      	bne.n	4730 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    4762:	4b96      	ldr	r3, [pc, #600]	; (49bc <USB_Handler+0x5c0>)
    4764:	891b      	ldrh	r3, [r3, #8]
    4766:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    4768:	2280      	movs	r2, #128	; 0x80
    476a:	0052      	lsls	r2, r2, #1
    476c:	4013      	ands	r3, r2
    476e:	4a92      	ldr	r2, [pc, #584]	; (49b8 <USB_Handler+0x5bc>)
    4770:	6013      	str	r3, [r2, #0]
    4772:	e7dd      	b.n	4730 <USB_Handler+0x334>
    4774:	003c      	movs	r4, r7
    4776:	3459      	adds	r4, #89	; 0x59
    4778:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    477a:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    477c:	2201      	movs	r2, #1
    477e:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4780:	325f      	adds	r2, #95	; 0x5f
    4782:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4784:	3a50      	subs	r2, #80	; 0x50
    4786:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4788:	3a0d      	subs	r2, #13
    478a:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    478c:	46b8      	mov	r8, r7
    478e:	002f      	movs	r7, r5
    4790:	e0b9      	b.n	4906 <USB_Handler+0x50a>
    4792:	002a      	movs	r2, r5
    4794:	003d      	movs	r5, r7
    4796:	4647      	mov	r7, r8
    4798:	4690      	mov	r8, r2
    479a:	015b      	lsls	r3, r3, #5
    479c:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    479e:	2308      	movs	r3, #8
    47a0:	33ff      	adds	r3, #255	; 0xff
    47a2:	5ceb      	ldrb	r3, [r5, r3]
    47a4:	065b      	lsls	r3, r3, #25
    47a6:	d516      	bpl.n	47d6 <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    47a8:	2240      	movs	r2, #64	; 0x40
    47aa:	2308      	movs	r3, #8
    47ac:	33ff      	adds	r3, #255	; 0xff
    47ae:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    47b0:	3b88      	subs	r3, #136	; 0x88
    47b2:	3bff      	subs	r3, #255	; 0xff
    47b4:	4642      	mov	r2, r8
    47b6:	4313      	orrs	r3, r2
    47b8:	4a81      	ldr	r2, [pc, #516]	; (49c0 <USB_Handler+0x5c4>)
    47ba:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    47bc:	2360      	movs	r3, #96	; 0x60
    47be:	420b      	tst	r3, r1
    47c0:	d100      	bne.n	47c4 <USB_Handler+0x3c8>
    47c2:	e787      	b.n	46d4 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    47c4:	9b01      	ldr	r3, [sp, #4]
    47c6:	011b      	lsls	r3, r3, #4
    47c8:	18fb      	adds	r3, r7, r3
    47ca:	33e0      	adds	r3, #224	; 0xe0
    47cc:	681b      	ldr	r3, [r3, #0]
    47ce:	497c      	ldr	r1, [pc, #496]	; (49c0 <USB_Handler+0x5c4>)
    47d0:	0038      	movs	r0, r7
    47d2:	4798      	blx	r3
    47d4:	e77e      	b.n	46d4 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    47d6:	2308      	movs	r3, #8
    47d8:	33ff      	adds	r3, #255	; 0xff
    47da:	5ceb      	ldrb	r3, [r5, r3]
    47dc:	069b      	lsls	r3, r3, #26
    47de:	d5ed      	bpl.n	47bc <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    47e0:	2220      	movs	r2, #32
    47e2:	2308      	movs	r3, #8
    47e4:	33ff      	adds	r3, #255	; 0xff
    47e6:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    47e8:	4b75      	ldr	r3, [pc, #468]	; (49c0 <USB_Handler+0x5c4>)
    47ea:	4642      	mov	r2, r8
    47ec:	719a      	strb	r2, [r3, #6]
    47ee:	e7e5      	b.n	47bc <USB_Handler+0x3c0>
    47f0:	003d      	movs	r5, r7
    47f2:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    47f4:	9a01      	ldr	r2, [sp, #4]
    47f6:	0013      	movs	r3, r2
    47f8:	3308      	adds	r3, #8
    47fa:	015b      	lsls	r3, r3, #5
    47fc:	18ed      	adds	r5, r5, r3
    47fe:	2310      	movs	r3, #16
    4800:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    4802:	18bb      	adds	r3, r7, r2
    4804:	3361      	adds	r3, #97	; 0x61
    4806:	33ff      	adds	r3, #255	; 0xff
    4808:	781b      	ldrb	r3, [r3, #0]
    480a:	06db      	lsls	r3, r3, #27
    480c:	d400      	bmi.n	4810 <USB_Handler+0x414>
    480e:	e761      	b.n	46d4 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4810:	0010      	movs	r0, r2
    4812:	0152      	lsls	r2, r2, #5
    4814:	4b69      	ldr	r3, [pc, #420]	; (49bc <USB_Handler+0x5c0>)
    4816:	189b      	adds	r3, r3, r2
    4818:	685b      	ldr	r3, [r3, #4]
    481a:	049b      	lsls	r3, r3, #18
    481c:	0c9b      	lsrs	r3, r3, #18
    481e:	4968      	ldr	r1, [pc, #416]	; (49c0 <USB_Handler+0x5c4>)
    4820:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    4822:	0103      	lsls	r3, r0, #4
    4824:	18fb      	adds	r3, r7, r3
    4826:	33dc      	adds	r3, #220	; 0xdc
    4828:	681b      	ldr	r3, [r3, #0]
    482a:	4640      	mov	r0, r8
    482c:	4798      	blx	r3
    482e:	e751      	b.n	46d4 <USB_Handler+0x2d8>
    4830:	002a      	movs	r2, r5
    4832:	003d      	movs	r5, r7
    4834:	4647      	mov	r7, r8
    4836:	4690      	mov	r8, r2
    4838:	015b      	lsls	r3, r3, #5
    483a:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    483c:	2308      	movs	r3, #8
    483e:	33ff      	adds	r3, #255	; 0xff
    4840:	5ceb      	ldrb	r3, [r5, r3]
    4842:	079b      	lsls	r3, r3, #30
    4844:	d51e      	bpl.n	4884 <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4846:	2202      	movs	r2, #2
    4848:	2308      	movs	r3, #8
    484a:	33ff      	adds	r3, #255	; 0xff
    484c:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    484e:	485c      	ldr	r0, [pc, #368]	; (49c0 <USB_Handler+0x5c4>)
    4850:	3b88      	subs	r3, #136	; 0x88
    4852:	3bff      	subs	r3, #255	; 0xff
    4854:	4642      	mov	r2, r8
    4856:	4313      	orrs	r3, r2
    4858:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    485a:	9b01      	ldr	r3, [sp, #4]
    485c:	015a      	lsls	r2, r3, #5
    485e:	4b57      	ldr	r3, [pc, #348]	; (49bc <USB_Handler+0x5c0>)
    4860:	189b      	adds	r3, r3, r2
    4862:	3310      	adds	r3, #16
    4864:	685b      	ldr	r3, [r3, #4]
    4866:	049b      	lsls	r3, r3, #18
    4868:	0c9b      	lsrs	r3, r3, #18
    486a:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    486c:	078b      	lsls	r3, r1, #30
    486e:	d100      	bne.n	4872 <USB_Handler+0x476>
    4870:	e730      	b.n	46d4 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    4872:	9b01      	ldr	r3, [sp, #4]
    4874:	330d      	adds	r3, #13
    4876:	011b      	lsls	r3, r3, #4
    4878:	18fb      	adds	r3, r7, r3
    487a:	685b      	ldr	r3, [r3, #4]
    487c:	4950      	ldr	r1, [pc, #320]	; (49c0 <USB_Handler+0x5c4>)
    487e:	0038      	movs	r0, r7
    4880:	4798      	blx	r3
    4882:	e727      	b.n	46d4 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4884:	2308      	movs	r3, #8
    4886:	33ff      	adds	r3, #255	; 0xff
    4888:	5ceb      	ldrb	r3, [r5, r3]
    488a:	07db      	lsls	r3, r3, #31
    488c:	d5ee      	bpl.n	486c <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    488e:	2201      	movs	r2, #1
    4890:	2308      	movs	r3, #8
    4892:	33ff      	adds	r3, #255	; 0xff
    4894:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4896:	484a      	ldr	r0, [pc, #296]	; (49c0 <USB_Handler+0x5c4>)
    4898:	4643      	mov	r3, r8
    489a:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    489c:	9b01      	ldr	r3, [sp, #4]
    489e:	015b      	lsls	r3, r3, #5
    48a0:	4a46      	ldr	r2, [pc, #280]	; (49bc <USB_Handler+0x5c0>)
    48a2:	18d2      	adds	r2, r2, r3
    48a4:	6853      	ldr	r3, [r2, #4]
    48a6:	049b      	lsls	r3, r3, #18
    48a8:	0c9b      	lsrs	r3, r3, #18
    48aa:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    48ac:	6853      	ldr	r3, [r2, #4]
    48ae:	011b      	lsls	r3, r3, #4
    48b0:	0c9b      	lsrs	r3, r3, #18
    48b2:	8083      	strh	r3, [r0, #4]
    48b4:	e7da      	b.n	486c <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    48b6:	2208      	movs	r2, #8
    48b8:	32ff      	adds	r2, #255	; 0xff
    48ba:	5c9a      	ldrb	r2, [r3, r2]
    48bc:	0752      	lsls	r2, r2, #29
    48be:	d56e      	bpl.n	499e <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    48c0:	2004      	movs	r0, #4
    48c2:	2208      	movs	r2, #8
    48c4:	32ff      	adds	r2, #255	; 0xff
    48c6:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    48c8:	9801      	ldr	r0, [sp, #4]
    48ca:	0142      	lsls	r2, r0, #5
    48cc:	4b3b      	ldr	r3, [pc, #236]	; (49bc <USB_Handler+0x5c0>)
    48ce:	189b      	adds	r3, r3, r2
    48d0:	7a9b      	ldrb	r3, [r3, #10]
    48d2:	079b      	lsls	r3, r3, #30
    48d4:	d505      	bpl.n	48e2 <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    48d6:	4b39      	ldr	r3, [pc, #228]	; (49bc <USB_Handler+0x5c0>)
    48d8:	189b      	adds	r3, r3, r2
    48da:	7a9a      	ldrb	r2, [r3, #10]
    48dc:	2002      	movs	r0, #2
    48de:	4382      	bics	r2, r0
    48e0:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    48e2:	4b37      	ldr	r3, [pc, #220]	; (49c0 <USB_Handler+0x5c4>)
    48e4:	4642      	mov	r2, r8
    48e6:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    48e8:	9b01      	ldr	r3, [sp, #4]
    48ea:	3308      	adds	r3, #8
    48ec:	015b      	lsls	r3, r3, #5
    48ee:	683a      	ldr	r2, [r7, #0]
    48f0:	4694      	mov	ip, r2
    48f2:	4463      	add	r3, ip
    48f4:	79db      	ldrb	r3, [r3, #7]
    48f6:	07db      	lsls	r3, r3, #31
    48f8:	d551      	bpl.n	499e <USB_Handler+0x5a2>
    48fa:	e6eb      	b.n	46d4 <USB_Handler+0x2d8>
    48fc:	3301      	adds	r3, #1
    48fe:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4900:	2b08      	cmp	r3, #8
    4902:	d100      	bne.n	4906 <USB_Handler+0x50a>
    4904:	e6e6      	b.n	46d4 <USB_Handler+0x2d8>
    4906:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    4908:	9301      	str	r3, [sp, #4]
    490a:	0032      	movs	r2, r6
    490c:	411a      	asrs	r2, r3
    490e:	4661      	mov	r1, ip
    4910:	4211      	tst	r1, r2
    4912:	d0f3      	beq.n	48fc <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    4914:	001a      	movs	r2, r3
    4916:	3208      	adds	r2, #8
    4918:	0152      	lsls	r2, r2, #5
    491a:	18ba      	adds	r2, r7, r2
    491c:	79d2      	ldrb	r2, [r2, #7]
    491e:	b2d2      	uxtb	r2, r2
    4920:	7a21      	ldrb	r1, [r4, #8]
    4922:	4011      	ands	r1, r2
    4924:	7820      	ldrb	r0, [r4, #0]
    4926:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4928:	4648      	mov	r0, r9
    492a:	4210      	tst	r0, r2
    492c:	d000      	beq.n	4930 <USB_Handler+0x534>
    492e:	e730      	b.n	4792 <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4930:	4650      	mov	r0, sl
    4932:	4210      	tst	r0, r2
    4934:	d000      	beq.n	4938 <USB_Handler+0x53c>
    4936:	e75b      	b.n	47f0 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4938:	4658      	mov	r0, fp
    493a:	4210      	tst	r0, r2
    493c:	d000      	beq.n	4940 <USB_Handler+0x544>
    493e:	e777      	b.n	4830 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4940:	200c      	movs	r0, #12
    4942:	4210      	tst	r0, r2
    4944:	d0da      	beq.n	48fc <USB_Handler+0x500>
    4946:	002a      	movs	r2, r5
    4948:	003d      	movs	r5, r7
    494a:	4647      	mov	r7, r8
    494c:	4690      	mov	r8, r2
    494e:	015b      	lsls	r3, r3, #5
    4950:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4952:	2208      	movs	r2, #8
    4954:	32ff      	adds	r2, #255	; 0xff
    4956:	5c9a      	ldrb	r2, [r3, r2]
    4958:	0712      	lsls	r2, r2, #28
    495a:	d5ac      	bpl.n	48b6 <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    495c:	3804      	subs	r0, #4
    495e:	2208      	movs	r2, #8
    4960:	32ff      	adds	r2, #255	; 0xff
    4962:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4964:	9801      	ldr	r0, [sp, #4]
    4966:	0142      	lsls	r2, r0, #5
    4968:	4b14      	ldr	r3, [pc, #80]	; (49bc <USB_Handler+0x5c0>)
    496a:	189b      	adds	r3, r3, r2
    496c:	7e9b      	ldrb	r3, [r3, #26]
    496e:	079b      	lsls	r3, r3, #30
    4970:	d505      	bpl.n	497e <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4972:	4b12      	ldr	r3, [pc, #72]	; (49bc <USB_Handler+0x5c0>)
    4974:	189b      	adds	r3, r3, r2
    4976:	7e9a      	ldrb	r2, [r3, #26]
    4978:	2002      	movs	r0, #2
    497a:	4382      	bics	r2, r0
    497c:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    497e:	2380      	movs	r3, #128	; 0x80
    4980:	425b      	negs	r3, r3
    4982:	4642      	mov	r2, r8
    4984:	4313      	orrs	r3, r2
    4986:	4a0e      	ldr	r2, [pc, #56]	; (49c0 <USB_Handler+0x5c4>)
    4988:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    498a:	9b01      	ldr	r3, [sp, #4]
    498c:	3308      	adds	r3, #8
    498e:	015b      	lsls	r3, r3, #5
    4990:	683a      	ldr	r2, [r7, #0]
    4992:	4694      	mov	ip, r2
    4994:	4463      	add	r3, ip
    4996:	79db      	ldrb	r3, [r3, #7]
    4998:	079b      	lsls	r3, r3, #30
    499a:	d500      	bpl.n	499e <USB_Handler+0x5a2>
    499c:	e69a      	b.n	46d4 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    499e:	230c      	movs	r3, #12
    49a0:	420b      	tst	r3, r1
    49a2:	d100      	bne.n	49a6 <USB_Handler+0x5aa>
    49a4:	e696      	b.n	46d4 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    49a6:	9b01      	ldr	r3, [sp, #4]
    49a8:	011b      	lsls	r3, r3, #4
    49aa:	18fb      	adds	r3, r7, r3
    49ac:	33d8      	adds	r3, #216	; 0xd8
    49ae:	681b      	ldr	r3, [r3, #0]
    49b0:	4903      	ldr	r1, [pc, #12]	; (49c0 <USB_Handler+0x5c4>)
    49b2:	0038      	movs	r0, r7
    49b4:	4798      	blx	r3
    49b6:	e68d      	b.n	46d4 <USB_Handler+0x2d8>
    49b8:	20000298 	.word	0x20000298
    49bc:	200005e4 	.word	0x200005e4
    49c0:	2000029c 	.word	0x2000029c

000049c4 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    49c4:	2200      	movs	r2, #0
    49c6:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    49c8:	2301      	movs	r3, #1
    49ca:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    49cc:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    49ce:	70c3      	strb	r3, [r0, #3]
}
    49d0:	4770      	bx	lr
	...

000049d4 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    49d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49d6:	46ce      	mov	lr, r9
    49d8:	4647      	mov	r7, r8
    49da:	b580      	push	{r7, lr}
    49dc:	b083      	sub	sp, #12
    49de:	0004      	movs	r4, r0
    49e0:	000d      	movs	r5, r1
    49e2:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    49e4:	2300      	movs	r3, #0
    49e6:	4a6e      	ldr	r2, [pc, #440]	; (4ba0 <usb_init+0x1cc>)
    49e8:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    49ea:	4a6e      	ldr	r2, [pc, #440]	; (4ba4 <usb_init+0x1d0>)
    49ec:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    49ee:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    49f0:	496d      	ldr	r1, [pc, #436]	; (4ba8 <usb_init+0x1d4>)
    49f2:	69ca      	ldr	r2, [r1, #28]
    49f4:	2020      	movs	r0, #32
    49f6:	4302      	orrs	r2, r0
    49f8:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    49fa:	af01      	add	r7, sp, #4
    49fc:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    49fe:	2201      	movs	r2, #1
    4a00:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    4a02:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    4a04:	3306      	adds	r3, #6
    4a06:	4699      	mov	r9, r3
    4a08:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    4a0a:	0039      	movs	r1, r7
    4a0c:	3808      	subs	r0, #8
    4a0e:	4b67      	ldr	r3, [pc, #412]	; (4bac <usb_init+0x1d8>)
    4a10:	4698      	mov	r8, r3
    4a12:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    4a14:	464b      	mov	r3, r9
    4a16:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    4a18:	0039      	movs	r1, r7
    4a1a:	2019      	movs	r0, #25
    4a1c:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    4a1e:	78b3      	ldrb	r3, [r6, #2]
    4a20:	466a      	mov	r2, sp
    4a22:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    4a24:	4669      	mov	r1, sp
    4a26:	2006      	movs	r0, #6
    4a28:	4b61      	ldr	r3, [pc, #388]	; (4bb0 <usb_init+0x1dc>)
    4a2a:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    4a2c:	2006      	movs	r0, #6
    4a2e:	4b61      	ldr	r3, [pc, #388]	; (4bb4 <usb_init+0x1e0>)
    4a30:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    4a32:	782b      	ldrb	r3, [r5, #0]
    4a34:	2201      	movs	r2, #1
    4a36:	4313      	orrs	r3, r2
    4a38:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    4a3a:	78ab      	ldrb	r3, [r5, #2]
    4a3c:	07db      	lsls	r3, r3, #31
    4a3e:	d4fc      	bmi.n	4a3a <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4a40:	4a5d      	ldr	r2, [pc, #372]	; (4bb8 <usb_init+0x1e4>)
    4a42:	78d3      	ldrb	r3, [r2, #3]
    4a44:	2103      	movs	r1, #3
    4a46:	438b      	bics	r3, r1
    4a48:	2102      	movs	r1, #2
    4a4a:	430b      	orrs	r3, r1
    4a4c:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4a4e:	78d3      	ldrb	r3, [r2, #3]
    4a50:	210c      	movs	r1, #12
    4a52:	438b      	bics	r3, r1
    4a54:	2108      	movs	r1, #8
    4a56:	430b      	orrs	r3, r1
    4a58:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    4a5a:	4b58      	ldr	r3, [pc, #352]	; (4bbc <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    4a5c:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    4a5e:	039b      	lsls	r3, r3, #14
    4a60:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    4a62:	2b1f      	cmp	r3, #31
    4a64:	d100      	bne.n	4a68 <usb_init+0x94>
    4a66:	e08f      	b.n	4b88 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    4a68:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4a6a:	019b      	lsls	r3, r3, #6
    4a6c:	4954      	ldr	r1, [pc, #336]	; (4bc0 <usb_init+0x1ec>)
    4a6e:	400a      	ands	r2, r1
    4a70:	4313      	orrs	r3, r2
    4a72:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4a74:	4b51      	ldr	r3, [pc, #324]	; (4bbc <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    4a76:	681b      	ldr	r3, [r3, #0]
    4a78:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4a7a:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    4a7c:	2b1f      	cmp	r3, #31
    4a7e:	d100      	bne.n	4a82 <usb_init+0xae>
    4a80:	e084      	b.n	4b8c <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    4a82:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4a84:	211f      	movs	r1, #31
    4a86:	438a      	bics	r2, r1
    4a88:	4313      	orrs	r3, r2
    4a8a:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4a8c:	4b4b      	ldr	r3, [pc, #300]	; (4bbc <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    4a8e:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4a90:	019b      	lsls	r3, r3, #6
    4a92:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    4a94:	2b07      	cmp	r3, #7
    4a96:	d100      	bne.n	4a9a <usb_init+0xc6>
    4a98:	e07a      	b.n	4b90 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    4a9a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4a9c:	031b      	lsls	r3, r3, #12
    4a9e:	4949      	ldr	r1, [pc, #292]	; (4bc4 <usb_init+0x1f0>)
    4aa0:	400a      	ands	r2, r1
    4aa2:	4313      	orrs	r3, r2
    4aa4:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    4aa6:	7832      	ldrb	r2, [r6, #0]
    4aa8:	7829      	ldrb	r1, [r5, #0]
    4aaa:	01d2      	lsls	r2, r2, #7
    4aac:	237f      	movs	r3, #127	; 0x7f
    4aae:	400b      	ands	r3, r1
    4ab0:	4313      	orrs	r3, r2
    4ab2:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    4ab4:	7871      	ldrb	r1, [r6, #1]
    4ab6:	782b      	ldrb	r3, [r5, #0]
    4ab8:	2201      	movs	r2, #1
    4aba:	400a      	ands	r2, r1
    4abc:	0092      	lsls	r2, r2, #2
    4abe:	2104      	movs	r1, #4
    4ac0:	438b      	bics	r3, r1
    4ac2:	4313      	orrs	r3, r2
    4ac4:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    4ac6:	4b40      	ldr	r3, [pc, #256]	; (4bc8 <usb_init+0x1f4>)
    4ac8:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    4aca:	78f3      	ldrb	r3, [r6, #3]
    4acc:	2b01      	cmp	r3, #1
    4ace:	d061      	beq.n	4b94 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    4ad0:	2b00      	cmp	r3, #0
    4ad2:	d106      	bne.n	4ae2 <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    4ad4:	6822      	ldr	r2, [r4, #0]
    4ad6:	8913      	ldrh	r3, [r2, #8]
    4ad8:	210c      	movs	r1, #12
    4ada:	438b      	bics	r3, r1
    4adc:	2104      	movs	r1, #4
    4ade:	430b      	orrs	r3, r1
    4ae0:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    4ae2:	2280      	movs	r2, #128	; 0x80
    4ae4:	0052      	lsls	r2, r2, #1
    4ae6:	2100      	movs	r1, #0
    4ae8:	4837      	ldr	r0, [pc, #220]	; (4bc8 <usb_init+0x1f4>)
    4aea:	4b38      	ldr	r3, [pc, #224]	; (4bcc <usb_init+0x1f8>)
    4aec:	4798      	blx	r3
    4aee:	1d23      	adds	r3, r4, #4
    4af0:	0021      	movs	r1, r4
    4af2:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    4af4:	2200      	movs	r2, #0
    4af6:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    4af8:	428b      	cmp	r3, r1
    4afa:	d1fc      	bne.n	4af6 <usb_init+0x122>
    4afc:	0021      	movs	r1, r4
    4afe:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    4b00:	2200      	movs	r2, #0
    4b02:	601a      	str	r2, [r3, #0]
    4b04:	605a      	str	r2, [r3, #4]
    4b06:	609a      	str	r2, [r3, #8]
    4b08:	60da      	str	r2, [r3, #12]
    4b0a:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4b0c:	428b      	cmp	r3, r1
    4b0e:	d1f8      	bne.n	4b02 <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    4b10:	2300      	movs	r3, #0
    4b12:	22a4      	movs	r2, #164	; 0xa4
    4b14:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    4b16:	3201      	adds	r2, #1
    4b18:	54a3      	strb	r3, [r4, r2]
    4b1a:	0023      	movs	r3, r4
    4b1c:	33a6      	adds	r3, #166	; 0xa6
    4b1e:	0021      	movs	r1, r4
    4b20:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    4b22:	2200      	movs	r2, #0
    4b24:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    4b26:	721a      	strb	r2, [r3, #8]
    4b28:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4b2a:	4299      	cmp	r1, r3
    4b2c:	d1fa      	bne.n	4b24 <usb_init+0x150>
    4b2e:	0023      	movs	r3, r4
    4b30:	33b8      	adds	r3, #184	; 0xb8
    4b32:	0021      	movs	r1, r4
    4b34:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    4b36:	2200      	movs	r2, #0
    4b38:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    4b3a:	428b      	cmp	r3, r1
    4b3c:	d1fc      	bne.n	4b38 <usb_init+0x164>
    4b3e:	0021      	movs	r1, r4
    4b40:	3155      	adds	r1, #85	; 0x55
    4b42:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    4b44:	2200      	movs	r2, #0
    4b46:	601a      	str	r2, [r3, #0]
    4b48:	605a      	str	r2, [r3, #4]
    4b4a:	609a      	str	r2, [r3, #8]
    4b4c:	60da      	str	r2, [r3, #12]
    4b4e:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    4b50:	428b      	cmp	r3, r1
    4b52:	d1f8      	bne.n	4b46 <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    4b54:	2300      	movs	r3, #0
    4b56:	22aa      	movs	r2, #170	; 0xaa
    4b58:	0052      	lsls	r2, r2, #1
    4b5a:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    4b5c:	3202      	adds	r2, #2
    4b5e:	52a3      	strh	r3, [r4, r2]
    4b60:	0023      	movs	r3, r4
    4b62:	3359      	adds	r3, #89	; 0x59
    4b64:	33ff      	adds	r3, #255	; 0xff
    4b66:	3461      	adds	r4, #97	; 0x61
    4b68:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    4b6a:	2200      	movs	r2, #0
    4b6c:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    4b6e:	721a      	strb	r2, [r3, #8]
    4b70:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    4b72:	42a3      	cmp	r3, r4
    4b74:	d1fa      	bne.n	4b6c <usb_init+0x198>
    4b76:	2280      	movs	r2, #128	; 0x80
    4b78:	4b15      	ldr	r3, [pc, #84]	; (4bd0 <usb_init+0x1fc>)
    4b7a:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    4b7c:	2000      	movs	r0, #0
    4b7e:	b003      	add	sp, #12
    4b80:	bc0c      	pop	{r2, r3}
    4b82:	4690      	mov	r8, r2
    4b84:	4699      	mov	r9, r3
    4b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    4b88:	3b1a      	subs	r3, #26
    4b8a:	e76d      	b.n	4a68 <usb_init+0x94>
		pad_transp = 29;
    4b8c:	3b02      	subs	r3, #2
    4b8e:	e778      	b.n	4a82 <usb_init+0xae>
		pad_trim = 3;
    4b90:	3b04      	subs	r3, #4
    4b92:	e782      	b.n	4a9a <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    4b94:	6822      	ldr	r2, [r4, #0]
    4b96:	8913      	ldrh	r3, [r2, #8]
    4b98:	3108      	adds	r1, #8
    4b9a:	438b      	bics	r3, r1
    4b9c:	8113      	strh	r3, [r2, #8]
    4b9e:	e7a0      	b.n	4ae2 <usb_init+0x10e>
    4ba0:	200002a4 	.word	0x200002a4
    4ba4:	20000294 	.word	0x20000294
    4ba8:	40000400 	.word	0x40000400
    4bac:	000065e5 	.word	0x000065e5
    4bb0:	000064ed 	.word	0x000064ed
    4bb4:	00006461 	.word	0x00006461
    4bb8:	41005000 	.word	0x41005000
    4bbc:	00806024 	.word	0x00806024
    4bc0:	fffff83f 	.word	0xfffff83f
    4bc4:	ffff8fff 	.word	0xffff8fff
    4bc8:	200005e4 	.word	0x200005e4
    4bcc:	00006d53 	.word	0x00006d53
    4bd0:	e000e100 	.word	0xe000e100

00004bd4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4bd4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4bd6:	2a00      	cmp	r2, #0
    4bd8:	d001      	beq.n	4bde <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4bda:	0018      	movs	r0, r3
    4bdc:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4bde:	008b      	lsls	r3, r1, #2
    4be0:	4a06      	ldr	r2, [pc, #24]	; (4bfc <extint_register_callback+0x28>)
    4be2:	589b      	ldr	r3, [r3, r2]
    4be4:	2b00      	cmp	r3, #0
    4be6:	d003      	beq.n	4bf0 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4be8:	4283      	cmp	r3, r0
    4bea:	d005      	beq.n	4bf8 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4bec:	231d      	movs	r3, #29
    4bee:	e7f4      	b.n	4bda <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4bf0:	0089      	lsls	r1, r1, #2
    4bf2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4bf4:	2300      	movs	r3, #0
    4bf6:	e7f0      	b.n	4bda <extint_register_callback+0x6>
		return STATUS_OK;
    4bf8:	2300      	movs	r3, #0
    4bfa:	e7ee      	b.n	4bda <extint_register_callback+0x6>
    4bfc:	200002f4 	.word	0x200002f4

00004c00 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4c00:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4c02:	2900      	cmp	r1, #0
    4c04:	d001      	beq.n	4c0a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4c06:	0018      	movs	r0, r3
    4c08:	4770      	bx	lr
		return NULL;
    4c0a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4c0c:	281f      	cmp	r0, #31
    4c0e:	d800      	bhi.n	4c12 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4c10:	4a02      	ldr	r2, [pc, #8]	; (4c1c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    4c12:	2301      	movs	r3, #1
    4c14:	4083      	lsls	r3, r0
    4c16:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    4c18:	2300      	movs	r3, #0
    4c1a:	e7f4      	b.n	4c06 <extint_chan_enable_callback+0x6>
    4c1c:	40001800 	.word	0x40001800

00004c20 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4c20:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4c22:	2900      	cmp	r1, #0
    4c24:	d001      	beq.n	4c2a <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    4c26:	0018      	movs	r0, r3
    4c28:	4770      	bx	lr
		return NULL;
    4c2a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4c2c:	281f      	cmp	r0, #31
    4c2e:	d800      	bhi.n	4c32 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    4c30:	4a02      	ldr	r2, [pc, #8]	; (4c3c <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    4c32:	2301      	movs	r3, #1
    4c34:	4083      	lsls	r3, r0
    4c36:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    4c38:	2300      	movs	r3, #0
    4c3a:	e7f4      	b.n	4c26 <extint_chan_disable_callback+0x6>
    4c3c:	40001800 	.word	0x40001800

00004c40 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4c40:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4c42:	2200      	movs	r2, #0
    4c44:	4b10      	ldr	r3, [pc, #64]	; (4c88 <EIC_Handler+0x48>)
    4c46:	701a      	strb	r2, [r3, #0]
    4c48:	2300      	movs	r3, #0
    4c4a:	4910      	ldr	r1, [pc, #64]	; (4c8c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4c4c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4c4e:	4e10      	ldr	r6, [pc, #64]	; (4c90 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4c50:	4c0d      	ldr	r4, [pc, #52]	; (4c88 <EIC_Handler+0x48>)
    4c52:	e00a      	b.n	4c6a <EIC_Handler+0x2a>
		return eics[eic_index];
    4c54:	490d      	ldr	r1, [pc, #52]	; (4c8c <EIC_Handler+0x4c>)
    4c56:	e008      	b.n	4c6a <EIC_Handler+0x2a>
    4c58:	7823      	ldrb	r3, [r4, #0]
    4c5a:	3301      	adds	r3, #1
    4c5c:	b2db      	uxtb	r3, r3
    4c5e:	7023      	strb	r3, [r4, #0]
    4c60:	2b0f      	cmp	r3, #15
    4c62:	d810      	bhi.n	4c86 <EIC_Handler+0x46>
		return NULL;
    4c64:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4c66:	2b1f      	cmp	r3, #31
    4c68:	d9f4      	bls.n	4c54 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    4c6a:	0028      	movs	r0, r5
    4c6c:	4018      	ands	r0, r3
    4c6e:	2201      	movs	r2, #1
    4c70:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4c72:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    4c74:	4210      	tst	r0, r2
    4c76:	d0ef      	beq.n	4c58 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4c78:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4c7a:	009b      	lsls	r3, r3, #2
    4c7c:	599b      	ldr	r3, [r3, r6]
    4c7e:	2b00      	cmp	r3, #0
    4c80:	d0ea      	beq.n	4c58 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4c82:	4798      	blx	r3
    4c84:	e7e8      	b.n	4c58 <EIC_Handler+0x18>
			}
		}
	}
}
    4c86:	bd70      	pop	{r4, r5, r6, pc}
    4c88:	200006e4 	.word	0x200006e4
    4c8c:	40001800 	.word	0x40001800
    4c90:	200002f4 	.word	0x200002f4

00004c94 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    4c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c96:	46de      	mov	lr, fp
    4c98:	4657      	mov	r7, sl
    4c9a:	464e      	mov	r6, r9
    4c9c:	4645      	mov	r5, r8
    4c9e:	b5e0      	push	{r5, r6, r7, lr}
    4ca0:	b087      	sub	sp, #28
    4ca2:	4680      	mov	r8, r0
    4ca4:	9104      	str	r1, [sp, #16]
    4ca6:	0016      	movs	r6, r2
    4ca8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4caa:	2200      	movs	r2, #0
    4cac:	2300      	movs	r3, #0
    4cae:	2100      	movs	r1, #0
    4cb0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    4cb2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    4cb4:	2001      	movs	r0, #1
    4cb6:	0021      	movs	r1, r4
    4cb8:	9600      	str	r6, [sp, #0]
    4cba:	9701      	str	r7, [sp, #4]
    4cbc:	465c      	mov	r4, fp
    4cbe:	9403      	str	r4, [sp, #12]
    4cc0:	4644      	mov	r4, r8
    4cc2:	9405      	str	r4, [sp, #20]
    4cc4:	e013      	b.n	4cee <long_division+0x5a>
    4cc6:	2420      	movs	r4, #32
    4cc8:	1a64      	subs	r4, r4, r1
    4cca:	0005      	movs	r5, r0
    4ccc:	40e5      	lsrs	r5, r4
    4cce:	46a8      	mov	r8, r5
    4cd0:	e014      	b.n	4cfc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    4cd2:	9c00      	ldr	r4, [sp, #0]
    4cd4:	9d01      	ldr	r5, [sp, #4]
    4cd6:	1b12      	subs	r2, r2, r4
    4cd8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    4cda:	465c      	mov	r4, fp
    4cdc:	464d      	mov	r5, r9
    4cde:	432c      	orrs	r4, r5
    4ce0:	46a3      	mov	fp, r4
    4ce2:	9c03      	ldr	r4, [sp, #12]
    4ce4:	4645      	mov	r5, r8
    4ce6:	432c      	orrs	r4, r5
    4ce8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    4cea:	3901      	subs	r1, #1
    4cec:	d325      	bcc.n	4d3a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    4cee:	2420      	movs	r4, #32
    4cf0:	4264      	negs	r4, r4
    4cf2:	190c      	adds	r4, r1, r4
    4cf4:	d4e7      	bmi.n	4cc6 <long_division+0x32>
    4cf6:	0005      	movs	r5, r0
    4cf8:	40a5      	lsls	r5, r4
    4cfa:	46a8      	mov	r8, r5
    4cfc:	0004      	movs	r4, r0
    4cfe:	408c      	lsls	r4, r1
    4d00:	46a1      	mov	r9, r4
		r = r << 1;
    4d02:	1892      	adds	r2, r2, r2
    4d04:	415b      	adcs	r3, r3
    4d06:	0014      	movs	r4, r2
    4d08:	001d      	movs	r5, r3
		if (n & bit_shift) {
    4d0a:	9e05      	ldr	r6, [sp, #20]
    4d0c:	464f      	mov	r7, r9
    4d0e:	403e      	ands	r6, r7
    4d10:	46b4      	mov	ip, r6
    4d12:	9e04      	ldr	r6, [sp, #16]
    4d14:	4647      	mov	r7, r8
    4d16:	403e      	ands	r6, r7
    4d18:	46b2      	mov	sl, r6
    4d1a:	4666      	mov	r6, ip
    4d1c:	4657      	mov	r7, sl
    4d1e:	433e      	orrs	r6, r7
    4d20:	d003      	beq.n	4d2a <long_division+0x96>
			r |= 0x01;
    4d22:	0006      	movs	r6, r0
    4d24:	4326      	orrs	r6, r4
    4d26:	0032      	movs	r2, r6
    4d28:	002b      	movs	r3, r5
		if (r >= d) {
    4d2a:	9c00      	ldr	r4, [sp, #0]
    4d2c:	9d01      	ldr	r5, [sp, #4]
    4d2e:	429d      	cmp	r5, r3
    4d30:	d8db      	bhi.n	4cea <long_division+0x56>
    4d32:	d1ce      	bne.n	4cd2 <long_division+0x3e>
    4d34:	4294      	cmp	r4, r2
    4d36:	d8d8      	bhi.n	4cea <long_division+0x56>
    4d38:	e7cb      	b.n	4cd2 <long_division+0x3e>
    4d3a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    4d3c:	4658      	mov	r0, fp
    4d3e:	0019      	movs	r1, r3
    4d40:	b007      	add	sp, #28
    4d42:	bc3c      	pop	{r2, r3, r4, r5}
    4d44:	4690      	mov	r8, r2
    4d46:	4699      	mov	r9, r3
    4d48:	46a2      	mov	sl, r4
    4d4a:	46ab      	mov	fp, r5
    4d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004d4e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4d4e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4d50:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4d52:	2340      	movs	r3, #64	; 0x40
    4d54:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    4d56:	4281      	cmp	r1, r0
    4d58:	d202      	bcs.n	4d60 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    4d5a:	0018      	movs	r0, r3
    4d5c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    4d5e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4d60:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    4d62:	1c63      	adds	r3, r4, #1
    4d64:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    4d66:	4288      	cmp	r0, r1
    4d68:	d9f9      	bls.n	4d5e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4d6a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    4d6c:	2cff      	cmp	r4, #255	; 0xff
    4d6e:	d8f4      	bhi.n	4d5a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    4d70:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    4d72:	2300      	movs	r3, #0
    4d74:	e7f1      	b.n	4d5a <_sercom_get_sync_baud_val+0xc>
	...

00004d78 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4d78:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d7a:	b083      	sub	sp, #12
    4d7c:	000f      	movs	r7, r1
    4d7e:	0016      	movs	r6, r2
    4d80:	aa08      	add	r2, sp, #32
    4d82:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4d84:	0004      	movs	r4, r0
    4d86:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4d88:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    4d8a:	42bc      	cmp	r4, r7
    4d8c:	d902      	bls.n	4d94 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    4d8e:	0010      	movs	r0, r2
    4d90:	b003      	add	sp, #12
    4d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4d94:	2b00      	cmp	r3, #0
    4d96:	d114      	bne.n	4dc2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4d98:	0002      	movs	r2, r0
    4d9a:	0008      	movs	r0, r1
    4d9c:	2100      	movs	r1, #0
    4d9e:	4c19      	ldr	r4, [pc, #100]	; (4e04 <_sercom_get_async_baud_val+0x8c>)
    4da0:	47a0      	blx	r4
    4da2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    4da4:	003a      	movs	r2, r7
    4da6:	2300      	movs	r3, #0
    4da8:	2000      	movs	r0, #0
    4daa:	4c17      	ldr	r4, [pc, #92]	; (4e08 <_sercom_get_async_baud_val+0x90>)
    4dac:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4dae:	2200      	movs	r2, #0
    4db0:	2301      	movs	r3, #1
    4db2:	1a12      	subs	r2, r2, r0
    4db4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    4db6:	0c12      	lsrs	r2, r2, #16
    4db8:	041b      	lsls	r3, r3, #16
    4dba:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4dbc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    4dbe:	2200      	movs	r2, #0
    4dc0:	e7e5      	b.n	4d8e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    4dc2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4dc4:	2b01      	cmp	r3, #1
    4dc6:	d1f9      	bne.n	4dbc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    4dc8:	000a      	movs	r2, r1
    4dca:	2300      	movs	r3, #0
    4dcc:	2100      	movs	r1, #0
    4dce:	4c0d      	ldr	r4, [pc, #52]	; (4e04 <_sercom_get_async_baud_val+0x8c>)
    4dd0:	47a0      	blx	r4
    4dd2:	0002      	movs	r2, r0
    4dd4:	000b      	movs	r3, r1
    4dd6:	9200      	str	r2, [sp, #0]
    4dd8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    4dda:	0038      	movs	r0, r7
    4ddc:	2100      	movs	r1, #0
    4dde:	4c0a      	ldr	r4, [pc, #40]	; (4e08 <_sercom_get_async_baud_val+0x90>)
    4de0:	47a0      	blx	r4
    4de2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    4de4:	2380      	movs	r3, #128	; 0x80
    4de6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4de8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    4dea:	4298      	cmp	r0, r3
    4dec:	d8cf      	bhi.n	4d8e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    4dee:	0f79      	lsrs	r1, r7, #29
    4df0:	00f8      	lsls	r0, r7, #3
    4df2:	9a00      	ldr	r2, [sp, #0]
    4df4:	9b01      	ldr	r3, [sp, #4]
    4df6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    4df8:	00ea      	lsls	r2, r5, #3
    4dfa:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    4dfc:	b2d2      	uxtb	r2, r2
    4dfe:	0352      	lsls	r2, r2, #13
    4e00:	432a      	orrs	r2, r5
    4e02:	e7db      	b.n	4dbc <_sercom_get_async_baud_val+0x44>
    4e04:	00006b0d 	.word	0x00006b0d
    4e08:	00004c95 	.word	0x00004c95

00004e0c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4e0c:	b510      	push	{r4, lr}
    4e0e:	b082      	sub	sp, #8
    4e10:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4e12:	4b0e      	ldr	r3, [pc, #56]	; (4e4c <sercom_set_gclk_generator+0x40>)
    4e14:	781b      	ldrb	r3, [r3, #0]
    4e16:	2b00      	cmp	r3, #0
    4e18:	d007      	beq.n	4e2a <sercom_set_gclk_generator+0x1e>
    4e1a:	2900      	cmp	r1, #0
    4e1c:	d105      	bne.n	4e2a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4e1e:	4b0b      	ldr	r3, [pc, #44]	; (4e4c <sercom_set_gclk_generator+0x40>)
    4e20:	785b      	ldrb	r3, [r3, #1]
    4e22:	4283      	cmp	r3, r0
    4e24:	d010      	beq.n	4e48 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4e26:	201d      	movs	r0, #29
    4e28:	e00c      	b.n	4e44 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    4e2a:	a901      	add	r1, sp, #4
    4e2c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4e2e:	2013      	movs	r0, #19
    4e30:	4b07      	ldr	r3, [pc, #28]	; (4e50 <sercom_set_gclk_generator+0x44>)
    4e32:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4e34:	2013      	movs	r0, #19
    4e36:	4b07      	ldr	r3, [pc, #28]	; (4e54 <sercom_set_gclk_generator+0x48>)
    4e38:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    4e3a:	4b04      	ldr	r3, [pc, #16]	; (4e4c <sercom_set_gclk_generator+0x40>)
    4e3c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4e3e:	2201      	movs	r2, #1
    4e40:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4e42:	2000      	movs	r0, #0
}
    4e44:	b002      	add	sp, #8
    4e46:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    4e48:	2000      	movs	r0, #0
    4e4a:	e7fb      	b.n	4e44 <sercom_set_gclk_generator+0x38>
    4e4c:	200002b0 	.word	0x200002b0
    4e50:	000064ed 	.word	0x000064ed
    4e54:	00006461 	.word	0x00006461

00004e58 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4e58:	4b40      	ldr	r3, [pc, #256]	; (4f5c <_sercom_get_default_pad+0x104>)
    4e5a:	4298      	cmp	r0, r3
    4e5c:	d031      	beq.n	4ec2 <_sercom_get_default_pad+0x6a>
    4e5e:	d90a      	bls.n	4e76 <_sercom_get_default_pad+0x1e>
    4e60:	4b3f      	ldr	r3, [pc, #252]	; (4f60 <_sercom_get_default_pad+0x108>)
    4e62:	4298      	cmp	r0, r3
    4e64:	d04d      	beq.n	4f02 <_sercom_get_default_pad+0xaa>
    4e66:	4b3f      	ldr	r3, [pc, #252]	; (4f64 <_sercom_get_default_pad+0x10c>)
    4e68:	4298      	cmp	r0, r3
    4e6a:	d05a      	beq.n	4f22 <_sercom_get_default_pad+0xca>
    4e6c:	4b3e      	ldr	r3, [pc, #248]	; (4f68 <_sercom_get_default_pad+0x110>)
    4e6e:	4298      	cmp	r0, r3
    4e70:	d037      	beq.n	4ee2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    4e72:	2000      	movs	r0, #0
}
    4e74:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    4e76:	4b3d      	ldr	r3, [pc, #244]	; (4f6c <_sercom_get_default_pad+0x114>)
    4e78:	4298      	cmp	r0, r3
    4e7a:	d00c      	beq.n	4e96 <_sercom_get_default_pad+0x3e>
    4e7c:	4b3c      	ldr	r3, [pc, #240]	; (4f70 <_sercom_get_default_pad+0x118>)
    4e7e:	4298      	cmp	r0, r3
    4e80:	d1f7      	bne.n	4e72 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4e82:	2901      	cmp	r1, #1
    4e84:	d017      	beq.n	4eb6 <_sercom_get_default_pad+0x5e>
    4e86:	2900      	cmp	r1, #0
    4e88:	d05d      	beq.n	4f46 <_sercom_get_default_pad+0xee>
    4e8a:	2902      	cmp	r1, #2
    4e8c:	d015      	beq.n	4eba <_sercom_get_default_pad+0x62>
    4e8e:	2903      	cmp	r1, #3
    4e90:	d015      	beq.n	4ebe <_sercom_get_default_pad+0x66>
	return 0;
    4e92:	2000      	movs	r0, #0
    4e94:	e7ee      	b.n	4e74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4e96:	2901      	cmp	r1, #1
    4e98:	d007      	beq.n	4eaa <_sercom_get_default_pad+0x52>
    4e9a:	2900      	cmp	r1, #0
    4e9c:	d051      	beq.n	4f42 <_sercom_get_default_pad+0xea>
    4e9e:	2902      	cmp	r1, #2
    4ea0:	d005      	beq.n	4eae <_sercom_get_default_pad+0x56>
    4ea2:	2903      	cmp	r1, #3
    4ea4:	d005      	beq.n	4eb2 <_sercom_get_default_pad+0x5a>
	return 0;
    4ea6:	2000      	movs	r0, #0
    4ea8:	e7e4      	b.n	4e74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4eaa:	4832      	ldr	r0, [pc, #200]	; (4f74 <_sercom_get_default_pad+0x11c>)
    4eac:	e7e2      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4eae:	4832      	ldr	r0, [pc, #200]	; (4f78 <_sercom_get_default_pad+0x120>)
    4eb0:	e7e0      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4eb2:	4832      	ldr	r0, [pc, #200]	; (4f7c <_sercom_get_default_pad+0x124>)
    4eb4:	e7de      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4eb6:	4832      	ldr	r0, [pc, #200]	; (4f80 <_sercom_get_default_pad+0x128>)
    4eb8:	e7dc      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4eba:	4832      	ldr	r0, [pc, #200]	; (4f84 <_sercom_get_default_pad+0x12c>)
    4ebc:	e7da      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4ebe:	4832      	ldr	r0, [pc, #200]	; (4f88 <_sercom_get_default_pad+0x130>)
    4ec0:	e7d8      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4ec2:	2901      	cmp	r1, #1
    4ec4:	d007      	beq.n	4ed6 <_sercom_get_default_pad+0x7e>
    4ec6:	2900      	cmp	r1, #0
    4ec8:	d03f      	beq.n	4f4a <_sercom_get_default_pad+0xf2>
    4eca:	2902      	cmp	r1, #2
    4ecc:	d005      	beq.n	4eda <_sercom_get_default_pad+0x82>
    4ece:	2903      	cmp	r1, #3
    4ed0:	d005      	beq.n	4ede <_sercom_get_default_pad+0x86>
	return 0;
    4ed2:	2000      	movs	r0, #0
    4ed4:	e7ce      	b.n	4e74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4ed6:	482d      	ldr	r0, [pc, #180]	; (4f8c <_sercom_get_default_pad+0x134>)
    4ed8:	e7cc      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4eda:	482d      	ldr	r0, [pc, #180]	; (4f90 <_sercom_get_default_pad+0x138>)
    4edc:	e7ca      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4ede:	482d      	ldr	r0, [pc, #180]	; (4f94 <_sercom_get_default_pad+0x13c>)
    4ee0:	e7c8      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4ee2:	2901      	cmp	r1, #1
    4ee4:	d007      	beq.n	4ef6 <_sercom_get_default_pad+0x9e>
    4ee6:	2900      	cmp	r1, #0
    4ee8:	d031      	beq.n	4f4e <_sercom_get_default_pad+0xf6>
    4eea:	2902      	cmp	r1, #2
    4eec:	d005      	beq.n	4efa <_sercom_get_default_pad+0xa2>
    4eee:	2903      	cmp	r1, #3
    4ef0:	d005      	beq.n	4efe <_sercom_get_default_pad+0xa6>
	return 0;
    4ef2:	2000      	movs	r0, #0
    4ef4:	e7be      	b.n	4e74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4ef6:	4828      	ldr	r0, [pc, #160]	; (4f98 <_sercom_get_default_pad+0x140>)
    4ef8:	e7bc      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4efa:	4828      	ldr	r0, [pc, #160]	; (4f9c <_sercom_get_default_pad+0x144>)
    4efc:	e7ba      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4efe:	4828      	ldr	r0, [pc, #160]	; (4fa0 <_sercom_get_default_pad+0x148>)
    4f00:	e7b8      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4f02:	2901      	cmp	r1, #1
    4f04:	d007      	beq.n	4f16 <_sercom_get_default_pad+0xbe>
    4f06:	2900      	cmp	r1, #0
    4f08:	d023      	beq.n	4f52 <_sercom_get_default_pad+0xfa>
    4f0a:	2902      	cmp	r1, #2
    4f0c:	d005      	beq.n	4f1a <_sercom_get_default_pad+0xc2>
    4f0e:	2903      	cmp	r1, #3
    4f10:	d005      	beq.n	4f1e <_sercom_get_default_pad+0xc6>
	return 0;
    4f12:	2000      	movs	r0, #0
    4f14:	e7ae      	b.n	4e74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4f16:	4823      	ldr	r0, [pc, #140]	; (4fa4 <_sercom_get_default_pad+0x14c>)
    4f18:	e7ac      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4f1a:	4823      	ldr	r0, [pc, #140]	; (4fa8 <_sercom_get_default_pad+0x150>)
    4f1c:	e7aa      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4f1e:	4823      	ldr	r0, [pc, #140]	; (4fac <_sercom_get_default_pad+0x154>)
    4f20:	e7a8      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4f22:	2901      	cmp	r1, #1
    4f24:	d007      	beq.n	4f36 <_sercom_get_default_pad+0xde>
    4f26:	2900      	cmp	r1, #0
    4f28:	d015      	beq.n	4f56 <_sercom_get_default_pad+0xfe>
    4f2a:	2902      	cmp	r1, #2
    4f2c:	d005      	beq.n	4f3a <_sercom_get_default_pad+0xe2>
    4f2e:	2903      	cmp	r1, #3
    4f30:	d005      	beq.n	4f3e <_sercom_get_default_pad+0xe6>
	return 0;
    4f32:	2000      	movs	r0, #0
    4f34:	e79e      	b.n	4e74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4f36:	481e      	ldr	r0, [pc, #120]	; (4fb0 <_sercom_get_default_pad+0x158>)
    4f38:	e79c      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4f3a:	481e      	ldr	r0, [pc, #120]	; (4fb4 <_sercom_get_default_pad+0x15c>)
    4f3c:	e79a      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4f3e:	481e      	ldr	r0, [pc, #120]	; (4fb8 <_sercom_get_default_pad+0x160>)
    4f40:	e798      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4f42:	481e      	ldr	r0, [pc, #120]	; (4fbc <_sercom_get_default_pad+0x164>)
    4f44:	e796      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4f46:	2003      	movs	r0, #3
    4f48:	e794      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4f4a:	481d      	ldr	r0, [pc, #116]	; (4fc0 <_sercom_get_default_pad+0x168>)
    4f4c:	e792      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4f4e:	481d      	ldr	r0, [pc, #116]	; (4fc4 <_sercom_get_default_pad+0x16c>)
    4f50:	e790      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4f52:	481d      	ldr	r0, [pc, #116]	; (4fc8 <_sercom_get_default_pad+0x170>)
    4f54:	e78e      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4f56:	481d      	ldr	r0, [pc, #116]	; (4fcc <_sercom_get_default_pad+0x174>)
    4f58:	e78c      	b.n	4e74 <_sercom_get_default_pad+0x1c>
    4f5a:	46c0      	nop			; (mov r8, r8)
    4f5c:	42001000 	.word	0x42001000
    4f60:	42001800 	.word	0x42001800
    4f64:	42001c00 	.word	0x42001c00
    4f68:	42001400 	.word	0x42001400
    4f6c:	42000800 	.word	0x42000800
    4f70:	42000c00 	.word	0x42000c00
    4f74:	00050003 	.word	0x00050003
    4f78:	00060003 	.word	0x00060003
    4f7c:	00070003 	.word	0x00070003
    4f80:	00010003 	.word	0x00010003
    4f84:	001e0003 	.word	0x001e0003
    4f88:	001f0003 	.word	0x001f0003
    4f8c:	00090003 	.word	0x00090003
    4f90:	000a0003 	.word	0x000a0003
    4f94:	000b0003 	.word	0x000b0003
    4f98:	00110003 	.word	0x00110003
    4f9c:	00120003 	.word	0x00120003
    4fa0:	00130003 	.word	0x00130003
    4fa4:	000d0003 	.word	0x000d0003
    4fa8:	000e0003 	.word	0x000e0003
    4fac:	000f0003 	.word	0x000f0003
    4fb0:	00170003 	.word	0x00170003
    4fb4:	00180003 	.word	0x00180003
    4fb8:	00190003 	.word	0x00190003
    4fbc:	00040003 	.word	0x00040003
    4fc0:	00080003 	.word	0x00080003
    4fc4:	00100003 	.word	0x00100003
    4fc8:	000c0003 	.word	0x000c0003
    4fcc:	00160003 	.word	0x00160003

00004fd0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4fd0:	b530      	push	{r4, r5, lr}
    4fd2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4fd4:	4b0b      	ldr	r3, [pc, #44]	; (5004 <_sercom_get_sercom_inst_index+0x34>)
    4fd6:	466a      	mov	r2, sp
    4fd8:	cb32      	ldmia	r3!, {r1, r4, r5}
    4fda:	c232      	stmia	r2!, {r1, r4, r5}
    4fdc:	cb32      	ldmia	r3!, {r1, r4, r5}
    4fde:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4fe0:	9b00      	ldr	r3, [sp, #0]
    4fe2:	4283      	cmp	r3, r0
    4fe4:	d00b      	beq.n	4ffe <_sercom_get_sercom_inst_index+0x2e>
    4fe6:	2301      	movs	r3, #1
    4fe8:	009a      	lsls	r2, r3, #2
    4fea:	4669      	mov	r1, sp
    4fec:	5852      	ldr	r2, [r2, r1]
    4fee:	4282      	cmp	r2, r0
    4ff0:	d006      	beq.n	5000 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4ff2:	3301      	adds	r3, #1
    4ff4:	2b06      	cmp	r3, #6
    4ff6:	d1f7      	bne.n	4fe8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4ff8:	2000      	movs	r0, #0
}
    4ffa:	b007      	add	sp, #28
    4ffc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4ffe:	2300      	movs	r3, #0
			return i;
    5000:	b2d8      	uxtb	r0, r3
    5002:	e7fa      	b.n	4ffa <_sercom_get_sercom_inst_index+0x2a>
    5004:	000077c4 	.word	0x000077c4

00005008 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    5008:	b570      	push	{r4, r5, r6, lr}
    500a:	b082      	sub	sp, #8
    500c:	0006      	movs	r6, r0
    500e:	000d      	movs	r5, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    5010:	2200      	movs	r2, #0
    5012:	466b      	mov	r3, sp
    5014:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    5016:	6804      	ldr	r4, [r0, #0]
	return (spi_module->SYNCBUSY.reg);
    5018:	69e3      	ldr	r3, [r4, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    501a:	2b00      	cmp	r3, #0
    501c:	d1fc      	bne.n	5018 <spi_set_baudrate+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    501e:	338f      	adds	r3, #143	; 0x8f
    5020:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    5022:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5024:	6823      	ldr	r3, [r4, #0]
    5026:	2202      	movs	r2, #2
    5028:	4393      	bics	r3, r2
    502a:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    502c:	6830      	ldr	r0, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    502e:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    5030:	2b00      	cmp	r3, #0
    5032:	d1fc      	bne.n	502e <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5034:	4b12      	ldr	r3, [pc, #72]	; (5080 <spi_set_baudrate+0x78>)
    5036:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5038:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    503a:	b2c0      	uxtb	r0, r0
    503c:	4b11      	ldr	r3, [pc, #68]	; (5084 <spi_set_baudrate+0x7c>)
    503e:	4798      	blx	r3
    5040:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    5042:	466b      	mov	r3, sp
    5044:	1d9a      	adds	r2, r3, #6
    5046:	0028      	movs	r0, r5
    5048:	4b0f      	ldr	r3, [pc, #60]	; (5088 <spi_set_baudrate+0x80>)
    504a:	4798      	blx	r3
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    504c:	2800      	cmp	r0, #0
    504e:	d002      	beq.n	5056 <spi_set_baudrate+0x4e>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    5050:	2017      	movs	r0, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    5052:	b002      	add	sp, #8
    5054:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    5056:	466b      	mov	r3, sp
    5058:	3306      	adds	r3, #6
    505a:	781b      	ldrb	r3, [r3, #0]
    505c:	7323      	strb	r3, [r4, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    505e:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    5060:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    5062:	2a00      	cmp	r2, #0
    5064:	d1fc      	bne.n	5060 <spi_set_baudrate+0x58>
    5066:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    5068:	2a00      	cmp	r2, #0
    506a:	d1fc      	bne.n	5066 <spi_set_baudrate+0x5e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    506c:	681a      	ldr	r2, [r3, #0]
    506e:	2102      	movs	r1, #2
    5070:	430a      	orrs	r2, r1
    5072:	601a      	str	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5074:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    5076:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    5078:	2b00      	cmp	r3, #0
    507a:	d1fc      	bne.n	5076 <spi_set_baudrate+0x6e>
    507c:	e7e9      	b.n	5052 <spi_set_baudrate+0x4a>
    507e:	46c0      	nop			; (mov r8, r8)
    5080:	00004fd1 	.word	0x00004fd1
    5084:	00006509 	.word	0x00006509
    5088:	00004d4f 	.word	0x00004d4f

0000508c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    508c:	b5f0      	push	{r4, r5, r6, r7, lr}
    508e:	46d6      	mov	lr, sl
    5090:	464f      	mov	r7, r9
    5092:	b580      	push	{r7, lr}
    5094:	b08b      	sub	sp, #44	; 0x2c
    5096:	4681      	mov	r9, r0
    5098:	000f      	movs	r7, r1
    509a:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    509c:	0003      	movs	r3, r0
    509e:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    50a0:	680b      	ldr	r3, [r1, #0]
    50a2:	079b      	lsls	r3, r3, #30
    50a4:	d409      	bmi.n	50ba <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    50a6:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    50a8:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    50aa:	07db      	lsls	r3, r3, #31
    50ac:	d400      	bmi.n	50b0 <spi_init+0x24>
    50ae:	e0b1      	b.n	5214 <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    50b0:	b00b      	add	sp, #44	; 0x2c
    50b2:	bc0c      	pop	{r2, r3}
    50b4:	4691      	mov	r9, r2
    50b6:	469a      	mov	sl, r3
    50b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    50ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
    50bc:	9305      	str	r3, [sp, #20]
    50be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    50c0:	9306      	str	r3, [sp, #24]
    50c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    50c4:	9307      	str	r3, [sp, #28]
    50c6:	6b53      	ldr	r3, [r2, #52]	; 0x34
    50c8:	9308      	str	r3, [sp, #32]
    50ca:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    50cc:	ab05      	add	r3, sp, #20
    50ce:	9301      	str	r3, [sp, #4]
    50d0:	e00a      	b.n	50e8 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    50d2:	0038      	movs	r0, r7
    50d4:	4baf      	ldr	r3, [pc, #700]	; (5394 <spi_init+0x308>)
    50d6:	4798      	blx	r3
    50d8:	e00c      	b.n	50f4 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    50da:	230f      	movs	r3, #15
    50dc:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    50de:	4281      	cmp	r1, r0
    50e0:	d12d      	bne.n	513e <spi_init+0xb2>
    50e2:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    50e4:	2e04      	cmp	r6, #4
    50e6:	d02f      	beq.n	5148 <spi_init+0xbc>
    50e8:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    50ea:	00b3      	lsls	r3, r6, #2
    50ec:	9a01      	ldr	r2, [sp, #4]
    50ee:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    50f0:	2800      	cmp	r0, #0
    50f2:	d0ee      	beq.n	50d2 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    50f4:	1c43      	adds	r3, r0, #1
    50f6:	d0f4      	beq.n	50e2 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    50f8:	0401      	lsls	r1, r0, #16
    50fa:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    50fc:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    50fe:	b2c3      	uxtb	r3, r0
    5100:	469c      	mov	ip, r3
		return NULL;
    5102:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5104:	0602      	lsls	r2, r0, #24
    5106:	d405      	bmi.n	5114 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    5108:	4663      	mov	r3, ip
    510a:	095b      	lsrs	r3, r3, #5
    510c:	01db      	lsls	r3, r3, #7
    510e:	4aa2      	ldr	r2, [pc, #648]	; (5398 <spi_init+0x30c>)
    5110:	4692      	mov	sl, r2
    5112:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    5114:	221f      	movs	r2, #31
    5116:	4660      	mov	r0, ip
    5118:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    511a:	1898      	adds	r0, r3, r2
    511c:	3040      	adds	r0, #64	; 0x40
    511e:	7800      	ldrb	r0, [r0, #0]
    5120:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    5122:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5124:	4655      	mov	r5, sl
    5126:	07ed      	lsls	r5, r5, #31
    5128:	d5d9      	bpl.n	50de <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    512a:	0852      	lsrs	r2, r2, #1
    512c:	189b      	adds	r3, r3, r2
    512e:	3330      	adds	r3, #48	; 0x30
    5130:	7818      	ldrb	r0, [r3, #0]
    5132:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    5134:	4663      	mov	r3, ip
    5136:	07db      	lsls	r3, r3, #31
    5138:	d5cf      	bpl.n	50da <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    513a:	0900      	lsrs	r0, r0, #4
    513c:	e7cf      	b.n	50de <spi_init+0x52>
			module->hw = NULL;
    513e:	2300      	movs	r3, #0
    5140:	464a      	mov	r2, r9
    5142:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    5144:	201c      	movs	r0, #28
    5146:	e7b3      	b.n	50b0 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    5148:	2013      	movs	r0, #19
    514a:	4b94      	ldr	r3, [pc, #592]	; (539c <spi_init+0x310>)
    514c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    514e:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    5150:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    5152:	2a01      	cmp	r2, #1
    5154:	d016      	beq.n	5184 <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
    5156:	7821      	ldrb	r1, [r4, #0]
    5158:	2900      	cmp	r1, #0
    515a:	d127      	bne.n	51ac <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
    515c:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    515e:	7fe2      	ldrb	r2, [r4, #31]
    5160:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5162:	7fa0      	ldrb	r0, [r4, #30]
    5164:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    5166:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    5168:	429a      	cmp	r2, r3
    516a:	d1a1      	bne.n	50b0 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    516c:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    516e:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    5170:	3004      	adds	r0, #4
    5172:	5c20      	ldrb	r0, [r4, r0]
    5174:	2800      	cmp	r0, #0
    5176:	d001      	beq.n	517c <spi_init+0xf0>
    5178:	2040      	movs	r0, #64	; 0x40
    517a:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    517c:	2008      	movs	r0, #8
    517e:	4303      	orrs	r3, r0
    5180:	431d      	orrs	r5, r3
    5182:	e014      	b.n	51ae <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
    5184:	aa04      	add	r2, sp, #16
    5186:	0001      	movs	r1, r0
    5188:	69a0      	ldr	r0, [r4, #24]
    518a:	4b85      	ldr	r3, [pc, #532]	; (53a0 <spi_init+0x314>)
    518c:	4798      	blx	r3
    518e:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5190:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5192:	2b00      	cmp	r3, #0
    5194:	d000      	beq.n	5198 <spi_init+0x10c>
    5196:	e78b      	b.n	50b0 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5198:	7b3b      	ldrb	r3, [r7, #12]
    519a:	b2db      	uxtb	r3, r3
    519c:	aa04      	add	r2, sp, #16
    519e:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    51a0:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    51a2:	429a      	cmp	r2, r3
    51a4:	d000      	beq.n	51a8 <spi_init+0x11c>
    51a6:	e783      	b.n	50b0 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    51a8:	350c      	adds	r5, #12
    51aa:	e7d4      	b.n	5156 <spi_init+0xca>
	uint32_t ctrlb = 0;
    51ac:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    51ae:	6863      	ldr	r3, [r4, #4]
    51b0:	68a0      	ldr	r0, [r4, #8]
    51b2:	4303      	orrs	r3, r0
    51b4:	68e0      	ldr	r0, [r4, #12]
    51b6:	4303      	orrs	r3, r0
    51b8:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    51ba:	7c20      	ldrb	r0, [r4, #16]
    51bc:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    51be:	7c60      	ldrb	r0, [r4, #17]
    51c0:	2800      	cmp	r0, #0
    51c2:	d001      	beq.n	51c8 <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    51c4:	2080      	movs	r0, #128	; 0x80
    51c6:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    51c8:	7ca0      	ldrb	r0, [r4, #18]
    51ca:	2800      	cmp	r0, #0
    51cc:	d002      	beq.n	51d4 <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    51ce:	2080      	movs	r0, #128	; 0x80
    51d0:	0280      	lsls	r0, r0, #10
    51d2:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    51d4:	7ce0      	ldrb	r0, [r4, #19]
    51d6:	2800      	cmp	r0, #0
    51d8:	d002      	beq.n	51e0 <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    51da:	2080      	movs	r0, #128	; 0x80
    51dc:	0080      	lsls	r0, r0, #2
    51de:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    51e0:	7d20      	ldrb	r0, [r4, #20]
    51e2:	2800      	cmp	r0, #0
    51e4:	d002      	beq.n	51ec <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    51e6:	2080      	movs	r0, #128	; 0x80
    51e8:	0180      	lsls	r0, r0, #6
    51ea:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    51ec:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    51ee:	2502      	movs	r5, #2
    51f0:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    51f2:	4283      	cmp	r3, r0
    51f4:	d004      	beq.n	5200 <spi_init+0x174>
	module->hw = NULL;
    51f6:	2300      	movs	r3, #0
    51f8:	464a      	mov	r2, r9
    51fa:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    51fc:	201c      	movs	r0, #28
    51fe:	e757      	b.n	50b0 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    5200:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    5202:	4293      	cmp	r3, r2
    5204:	d1f7      	bne.n	51f6 <spi_init+0x16a>
		module->mode           = config->mode;
    5206:	464b      	mov	r3, r9
    5208:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
    520a:	7c23      	ldrb	r3, [r4, #16]
    520c:	464a      	mov	r2, r9
    520e:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    5210:	2000      	movs	r0, #0
    5212:	e74d      	b.n	50b0 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5214:	0008      	movs	r0, r1
    5216:	4b63      	ldr	r3, [pc, #396]	; (53a4 <spi_init+0x318>)
    5218:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    521a:	4a63      	ldr	r2, [pc, #396]	; (53a8 <spi_init+0x31c>)
    521c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    521e:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5220:	2301      	movs	r3, #1
    5222:	40ab      	lsls	r3, r5
    5224:	430b      	orrs	r3, r1
    5226:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    5228:	a909      	add	r1, sp, #36	; 0x24
    522a:	2624      	movs	r6, #36	; 0x24
    522c:	5da3      	ldrb	r3, [r4, r6]
    522e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5230:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5232:	b2c5      	uxtb	r5, r0
    5234:	0028      	movs	r0, r5
    5236:	4b5d      	ldr	r3, [pc, #372]	; (53ac <spi_init+0x320>)
    5238:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    523a:	0028      	movs	r0, r5
    523c:	4b5c      	ldr	r3, [pc, #368]	; (53b0 <spi_init+0x324>)
    523e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5240:	5da0      	ldrb	r0, [r4, r6]
    5242:	2100      	movs	r1, #0
    5244:	4b5b      	ldr	r3, [pc, #364]	; (53b4 <spi_init+0x328>)
    5246:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5248:	7823      	ldrb	r3, [r4, #0]
    524a:	2b01      	cmp	r3, #1
    524c:	d020      	beq.n	5290 <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
    524e:	7823      	ldrb	r3, [r4, #0]
    5250:	2b00      	cmp	r3, #0
    5252:	d103      	bne.n	525c <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    5254:	683b      	ldr	r3, [r7, #0]
    5256:	2208      	movs	r2, #8
    5258:	4313      	orrs	r3, r2
    525a:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    525c:	464b      	mov	r3, r9
    525e:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5260:	ab04      	add	r3, sp, #16
    5262:	2280      	movs	r2, #128	; 0x80
    5264:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5266:	2200      	movs	r2, #0
    5268:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    526a:	2101      	movs	r1, #1
    526c:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    526e:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    5270:	7823      	ldrb	r3, [r4, #0]
    5272:	2b00      	cmp	r3, #0
    5274:	d101      	bne.n	527a <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5276:	ab04      	add	r3, sp, #16
    5278:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    527a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    527c:	9305      	str	r3, [sp, #20]
    527e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5280:	9306      	str	r3, [sp, #24]
    5282:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5284:	9307      	str	r3, [sp, #28]
    5286:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5288:	9308      	str	r3, [sp, #32]
    528a:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    528c:	ad05      	add	r5, sp, #20
    528e:	e011      	b.n	52b4 <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5290:	683b      	ldr	r3, [r7, #0]
    5292:	220c      	movs	r2, #12
    5294:	4313      	orrs	r3, r2
    5296:	603b      	str	r3, [r7, #0]
    5298:	e7d9      	b.n	524e <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    529a:	0030      	movs	r0, r6
    529c:	4b3d      	ldr	r3, [pc, #244]	; (5394 <spi_init+0x308>)
    529e:	4798      	blx	r3
    52a0:	e00d      	b.n	52be <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    52a2:	a904      	add	r1, sp, #16
    52a4:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    52a6:	0c00      	lsrs	r0, r0, #16
    52a8:	b2c0      	uxtb	r0, r0
    52aa:	4b43      	ldr	r3, [pc, #268]	; (53b8 <spi_init+0x32c>)
    52ac:	4798      	blx	r3
    52ae:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    52b0:	2f04      	cmp	r7, #4
    52b2:	d007      	beq.n	52c4 <spi_init+0x238>
    52b4:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    52b6:	00bb      	lsls	r3, r7, #2
    52b8:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    52ba:	2800      	cmp	r0, #0
    52bc:	d0ed      	beq.n	529a <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
    52be:	1c43      	adds	r3, r0, #1
    52c0:	d1ef      	bne.n	52a2 <spi_init+0x216>
    52c2:	e7f4      	b.n	52ae <spi_init+0x222>
	module->mode             = config->mode;
    52c4:	7823      	ldrb	r3, [r4, #0]
    52c6:	464a      	mov	r2, r9
    52c8:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    52ca:	7c23      	ldrb	r3, [r4, #16]
    52cc:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    52ce:	7ca3      	ldrb	r3, [r4, #18]
    52d0:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    52d2:	7d23      	ldrb	r3, [r4, #20]
    52d4:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    52d6:	2200      	movs	r2, #0
    52d8:	ab02      	add	r3, sp, #8
    52da:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    52dc:	7823      	ldrb	r3, [r4, #0]
    52de:	2b01      	cmp	r3, #1
    52e0:	d012      	beq.n	5308 <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
    52e2:	7823      	ldrb	r3, [r4, #0]
    52e4:	2b00      	cmp	r3, #0
    52e6:	d127      	bne.n	5338 <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
    52e8:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    52ea:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    52ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    52ee:	7fe1      	ldrb	r1, [r4, #31]
    52f0:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    52f2:	7fa5      	ldrb	r5, [r4, #30]
    52f4:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    52f6:	4319      	orrs	r1, r3
    52f8:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    52fa:	2320      	movs	r3, #32
    52fc:	5ce3      	ldrb	r3, [r4, r3]
    52fe:	2b00      	cmp	r3, #0
    5300:	d01c      	beq.n	533c <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    5302:	2340      	movs	r3, #64	; 0x40
    5304:	431a      	orrs	r2, r3
    5306:	e019      	b.n	533c <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5308:	464b      	mov	r3, r9
    530a:	6818      	ldr	r0, [r3, #0]
    530c:	4b25      	ldr	r3, [pc, #148]	; (53a4 <spi_init+0x318>)
    530e:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5310:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5312:	b2c0      	uxtb	r0, r0
    5314:	4b21      	ldr	r3, [pc, #132]	; (539c <spi_init+0x310>)
    5316:	4798      	blx	r3
    5318:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    531a:	ab02      	add	r3, sp, #8
    531c:	1d9a      	adds	r2, r3, #6
    531e:	69a0      	ldr	r0, [r4, #24]
    5320:	4b1f      	ldr	r3, [pc, #124]	; (53a0 <spi_init+0x314>)
    5322:	4798      	blx	r3
    5324:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5326:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5328:	2b00      	cmp	r3, #0
    532a:	d000      	beq.n	532e <spi_init+0x2a2>
    532c:	e6c0      	b.n	50b0 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    532e:	ab02      	add	r3, sp, #8
    5330:	3306      	adds	r3, #6
    5332:	781b      	ldrb	r3, [r3, #0]
    5334:	7333      	strb	r3, [r6, #12]
    5336:	e7d4      	b.n	52e2 <spi_init+0x256>
	uint32_t ctrlb = 0;
    5338:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    533a:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    533c:	6863      	ldr	r3, [r4, #4]
    533e:	68a1      	ldr	r1, [r4, #8]
    5340:	430b      	orrs	r3, r1
    5342:	68e1      	ldr	r1, [r4, #12]
    5344:	430b      	orrs	r3, r1
    5346:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    5348:	7c21      	ldrb	r1, [r4, #16]
    534a:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    534c:	7c61      	ldrb	r1, [r4, #17]
    534e:	2900      	cmp	r1, #0
    5350:	d103      	bne.n	535a <spi_init+0x2ce>
    5352:	491a      	ldr	r1, [pc, #104]	; (53bc <spi_init+0x330>)
    5354:	7889      	ldrb	r1, [r1, #2]
    5356:	0789      	lsls	r1, r1, #30
    5358:	d501      	bpl.n	535e <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    535a:	2180      	movs	r1, #128	; 0x80
    535c:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    535e:	7ca1      	ldrb	r1, [r4, #18]
    5360:	2900      	cmp	r1, #0
    5362:	d002      	beq.n	536a <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5364:	2180      	movs	r1, #128	; 0x80
    5366:	0289      	lsls	r1, r1, #10
    5368:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    536a:	7ce1      	ldrb	r1, [r4, #19]
    536c:	2900      	cmp	r1, #0
    536e:	d002      	beq.n	5376 <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5370:	2180      	movs	r1, #128	; 0x80
    5372:	0089      	lsls	r1, r1, #2
    5374:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    5376:	7d21      	ldrb	r1, [r4, #20]
    5378:	2900      	cmp	r1, #0
    537a:	d002      	beq.n	5382 <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    537c:	2180      	movs	r1, #128	; 0x80
    537e:	0189      	lsls	r1, r1, #6
    5380:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    5382:	6831      	ldr	r1, [r6, #0]
    5384:	430b      	orrs	r3, r1
    5386:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    5388:	6873      	ldr	r3, [r6, #4]
    538a:	431a      	orrs	r2, r3
    538c:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    538e:	2000      	movs	r0, #0
    5390:	e68e      	b.n	50b0 <spi_init+0x24>
    5392:	46c0      	nop			; (mov r8, r8)
    5394:	00004e59 	.word	0x00004e59
    5398:	41004400 	.word	0x41004400
    539c:	00006509 	.word	0x00006509
    53a0:	00004d4f 	.word	0x00004d4f
    53a4:	00004fd1 	.word	0x00004fd1
    53a8:	40000400 	.word	0x40000400
    53ac:	000064ed 	.word	0x000064ed
    53b0:	00006461 	.word	0x00006461
    53b4:	00004e0d 	.word	0x00004e0d
    53b8:	000065e5 	.word	0x000065e5
    53bc:	41002000 	.word	0x41002000

000053c0 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    53c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    53c2:	46d6      	mov	lr, sl
    53c4:	464f      	mov	r7, r9
    53c6:	4646      	mov	r6, r8
    53c8:	b5c0      	push	{r6, r7, lr}
    53ca:	b082      	sub	sp, #8
    53cc:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    53ce:	2717      	movs	r7, #23
	if (length == 0) {
    53d0:	2a00      	cmp	r2, #0
    53d2:	d073      	beq.n	54bc <spi_read_buffer_wait+0xfc>
	}

	if (!(module->receiver_enabled)) {
    53d4:	79c1      	ldrb	r1, [r0, #7]
		return STATUS_ERR_DENIED;
    53d6:	3705      	adds	r7, #5
	if (!(module->receiver_enabled)) {
    53d8:	2900      	cmp	r1, #0
    53da:	d06f      	beq.n	54bc <spi_read_buffer_wait+0xfc>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    53dc:	7941      	ldrb	r1, [r0, #5]
    53de:	2900      	cmp	r1, #0
    53e0:	d103      	bne.n	53ea <spi_read_buffer_wait+0x2a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    53e2:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    53e4:	7e0c      	ldrb	r4, [r1, #24]
    53e6:	07a4      	lsls	r4, r4, #30
    53e8:	d40b      	bmi.n	5402 <spi_read_buffer_wait+0x42>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    53ea:	3a01      	subs	r2, #1
    53ec:	b294      	uxth	r4, r2
    53ee:	2500      	movs	r5, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    53f0:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    53f2:	2102      	movs	r1, #2
    53f4:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    53f6:	2601      	movs	r6, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    53f8:	05db      	lsls	r3, r3, #23
    53fa:	0ddb      	lsrs	r3, r3, #23
    53fc:	469a      	mov	sl, r3
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    53fe:	46c4      	mov	ip, r8
    5400:	e037      	b.n	5472 <spi_read_buffer_wait+0xb2>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5402:	2402      	movs	r4, #2
    5404:	760c      	strb	r4, [r1, #24]
    5406:	e7f0      	b.n	53ea <spi_read_buffer_wait+0x2a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5408:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    540a:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    540c:	4233      	tst	r3, r6
    540e:	d0fc      	beq.n	540a <spi_read_buffer_wait+0x4a>
    5410:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    5412:	4233      	tst	r3, r6
    5414:	d009      	beq.n	542a <spi_read_buffer_wait+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5416:	4653      	mov	r3, sl
    5418:	628b      	str	r3, [r1, #40]	; 0x28
    541a:	e02d      	b.n	5478 <spi_read_buffer_wait+0xb8>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    541c:	7e3b      	ldrb	r3, [r7, #24]
			if (spi_is_write_complete(module)) {
    541e:	4649      	mov	r1, r9
    5420:	420b      	tst	r3, r1
    5422:	d138      	bne.n	5496 <spi_read_buffer_wait+0xd6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5424:	7e3b      	ldrb	r3, [r7, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    5426:	4213      	tst	r3, r2
    5428:	d045      	beq.n	54b6 <spi_read_buffer_wait+0xf6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    542a:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    542c:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    542e:	4213      	tst	r3, r2
    5430:	d0fc      	beq.n	542c <spi_read_buffer_wait+0x6c>
    5432:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    5434:	4213      	tst	r3, r2
    5436:	d040      	beq.n	54ba <spi_read_buffer_wait+0xfa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5438:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    543a:	2700      	movs	r7, #0
    543c:	9701      	str	r7, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    543e:	4213      	tst	r3, r2
    5440:	d002      	beq.n	5448 <spi_read_buffer_wait+0x88>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5442:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    5444:	231e      	movs	r3, #30
    5446:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5448:	7983      	ldrb	r3, [r0, #6]
    544a:	2b01      	cmp	r3, #1
    544c:	d027      	beq.n	549e <spi_read_buffer_wait+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    544e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    5450:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    5452:	9901      	ldr	r1, [sp, #4]
    5454:	2900      	cmp	r1, #0
    5456:	d138      	bne.n	54ca <spi_read_buffer_wait+0x10a>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    5458:	1c6f      	adds	r7, r5, #1
    545a:	b2bf      	uxth	r7, r7
    545c:	4661      	mov	r1, ip
    545e:	554b      	strb	r3, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5460:	7981      	ldrb	r1, [r0, #6]
    5462:	2901      	cmp	r1, #1
    5464:	d01f      	beq.n	54a6 <spi_read_buffer_wait+0xe6>
		rx_data[rx_pos++] = received_data;
    5466:	003d      	movs	r5, r7
	while (length--) {
    5468:	3c01      	subs	r4, #1
    546a:	b2a4      	uxth	r4, r4
    546c:	4918      	ldr	r1, [pc, #96]	; (54d0 <spi_read_buffer_wait+0x110>)
    546e:	428c      	cmp	r4, r1
    5470:	d01f      	beq.n	54b2 <spi_read_buffer_wait+0xf2>
		if (module->mode == SPI_MODE_MASTER) {
    5472:	7943      	ldrb	r3, [r0, #5]
    5474:	2b01      	cmp	r3, #1
    5476:	d0c7      	beq.n	5408 <spi_read_buffer_wait+0x48>
		if (module->mode == SPI_MODE_SLAVE) {
    5478:	7943      	ldrb	r3, [r0, #5]
    547a:	2b00      	cmp	r3, #0
    547c:	d1d5      	bne.n	542a <spi_read_buffer_wait+0x6a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    547e:	6807      	ldr	r7, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5480:	7e3b      	ldrb	r3, [r7, #24]
				if (spi_is_ready_to_read(module)) {
    5482:	4213      	tst	r3, r2
    5484:	d1ca      	bne.n	541c <spi_read_buffer_wait+0x5c>
    5486:	4b13      	ldr	r3, [pc, #76]	; (54d4 <spi_read_buffer_wait+0x114>)
    5488:	7e39      	ldrb	r1, [r7, #24]
    548a:	4211      	tst	r1, r2
    548c:	d1c6      	bne.n	541c <spi_read_buffer_wait+0x5c>
    548e:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5490:	2b00      	cmp	r3, #0
    5492:	d1f9      	bne.n	5488 <spi_read_buffer_wait+0xc8>
    5494:	e7c2      	b.n	541c <spi_read_buffer_wait+0x5c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5496:	2302      	movs	r3, #2
    5498:	763b      	strb	r3, [r7, #24]
				return STATUS_ABORTED;
    549a:	2704      	movs	r7, #4
    549c:	e00e      	b.n	54bc <spi_read_buffer_wait+0xfc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    549e:	6a89      	ldr	r1, [r1, #40]	; 0x28
    54a0:	05c9      	lsls	r1, r1, #23
    54a2:	0dcb      	lsrs	r3, r1, #23
    54a4:	e7d5      	b.n	5452 <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
    54a6:	3502      	adds	r5, #2
    54a8:	b2ad      	uxth	r5, r5
    54aa:	0a19      	lsrs	r1, r3, #8
    54ac:	4663      	mov	r3, ip
    54ae:	55d9      	strb	r1, [r3, r7]
    54b0:	e7da      	b.n	5468 <spi_read_buffer_wait+0xa8>
    54b2:	9f01      	ldr	r7, [sp, #4]
    54b4:	e002      	b.n	54bc <spi_read_buffer_wait+0xfc>
				return STATUS_ERR_TIMEOUT;
    54b6:	2712      	movs	r7, #18
    54b8:	e000      	b.n	54bc <spi_read_buffer_wait+0xfc>
		return STATUS_ERR_IO;
    54ba:	2710      	movs	r7, #16
		}
	}

	return STATUS_OK;
}
    54bc:	0038      	movs	r0, r7
    54be:	b002      	add	sp, #8
    54c0:	bc1c      	pop	{r2, r3, r4}
    54c2:	4690      	mov	r8, r2
    54c4:	4699      	mov	r9, r3
    54c6:	46a2      	mov	sl, r4
    54c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54ca:	9f01      	ldr	r7, [sp, #4]
    54cc:	e7f6      	b.n	54bc <spi_read_buffer_wait+0xfc>
    54ce:	46c0      	nop			; (mov r8, r8)
    54d0:	0000ffff 	.word	0x0000ffff
    54d4:	00002710 	.word	0x00002710

000054d8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    54d8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    54da:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    54dc:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    54de:	2c01      	cmp	r4, #1
    54e0:	d001      	beq.n	54e6 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    54e2:	0018      	movs	r0, r3
    54e4:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    54e6:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    54e8:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    54ea:	2c00      	cmp	r4, #0
    54ec:	d1f9      	bne.n	54e2 <spi_select_slave+0xa>
		if (select) {
    54ee:	2a00      	cmp	r2, #0
    54f0:	d058      	beq.n	55a4 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    54f2:	784b      	ldrb	r3, [r1, #1]
    54f4:	2b00      	cmp	r3, #0
    54f6:	d044      	beq.n	5582 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    54f8:	6803      	ldr	r3, [r0, #0]
    54fa:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    54fc:	07db      	lsls	r3, r3, #31
    54fe:	d410      	bmi.n	5522 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    5500:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5502:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5504:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5506:	2900      	cmp	r1, #0
    5508:	d104      	bne.n	5514 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    550a:	0953      	lsrs	r3, r2, #5
    550c:	01db      	lsls	r3, r3, #7
    550e:	492e      	ldr	r1, [pc, #184]	; (55c8 <spi_select_slave+0xf0>)
    5510:	468c      	mov	ip, r1
    5512:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5514:	211f      	movs	r1, #31
    5516:	4011      	ands	r1, r2
    5518:	2201      	movs	r2, #1
    551a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    551c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    551e:	2305      	movs	r3, #5
    5520:	e7df      	b.n	54e2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5522:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5524:	09d4      	lsrs	r4, r2, #7
		return NULL;
    5526:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5528:	2c00      	cmp	r4, #0
    552a:	d104      	bne.n	5536 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    552c:	0953      	lsrs	r3, r2, #5
    552e:	01db      	lsls	r3, r3, #7
    5530:	4c25      	ldr	r4, [pc, #148]	; (55c8 <spi_select_slave+0xf0>)
    5532:	46a4      	mov	ip, r4
    5534:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5536:	241f      	movs	r4, #31
    5538:	4014      	ands	r4, r2
    553a:	2201      	movs	r2, #1
    553c:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    553e:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5540:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5542:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5544:	07d2      	lsls	r2, r2, #31
    5546:	d501      	bpl.n	554c <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5548:	788a      	ldrb	r2, [r1, #2]
    554a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    554c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    554e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    5550:	2a00      	cmp	r2, #0
    5552:	d1c6      	bne.n	54e2 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5554:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    5556:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5558:	7e13      	ldrb	r3, [r2, #24]
    555a:	420b      	tst	r3, r1
    555c:	d0fc      	beq.n	5558 <spi_select_slave+0x80>
    555e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    5560:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    5562:	0749      	lsls	r1, r1, #29
    5564:	d5bd      	bpl.n	54e2 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5566:	8b53      	ldrh	r3, [r2, #26]
    5568:	075b      	lsls	r3, r3, #29
    556a:	d501      	bpl.n	5570 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    556c:	2304      	movs	r3, #4
    556e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5570:	7983      	ldrb	r3, [r0, #6]
    5572:	2b01      	cmp	r3, #1
    5574:	d002      	beq.n	557c <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5576:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5578:	2300      	movs	r3, #0
    557a:	e7b2      	b.n	54e2 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    557c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    557e:	2300      	movs	r3, #0
    5580:	e7af      	b.n	54e2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5582:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5584:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5586:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5588:	2900      	cmp	r1, #0
    558a:	d104      	bne.n	5596 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    558c:	0953      	lsrs	r3, r2, #5
    558e:	01db      	lsls	r3, r3, #7
    5590:	490d      	ldr	r1, [pc, #52]	; (55c8 <spi_select_slave+0xf0>)
    5592:	468c      	mov	ip, r1
    5594:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5596:	211f      	movs	r1, #31
    5598:	4011      	ands	r1, r2
    559a:	2201      	movs	r2, #1
    559c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    559e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    55a0:	2300      	movs	r3, #0
    55a2:	e79e      	b.n	54e2 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    55a4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    55a6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    55a8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    55aa:	2900      	cmp	r1, #0
    55ac:	d104      	bne.n	55b8 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    55ae:	0953      	lsrs	r3, r2, #5
    55b0:	01db      	lsls	r3, r3, #7
    55b2:	4905      	ldr	r1, [pc, #20]	; (55c8 <spi_select_slave+0xf0>)
    55b4:	468c      	mov	ip, r1
    55b6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    55b8:	211f      	movs	r1, #31
    55ba:	4011      	ands	r1, r2
    55bc:	2201      	movs	r2, #1
    55be:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    55c0:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    55c2:	2300      	movs	r3, #0
    55c4:	e78d      	b.n	54e2 <spi_select_slave+0xa>
    55c6:	46c0      	nop			; (mov r8, r8)
    55c8:	41004400 	.word	0x41004400

000055cc <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    55cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    55ce:	46de      	mov	lr, fp
    55d0:	4657      	mov	r7, sl
    55d2:	464e      	mov	r6, r9
    55d4:	4645      	mov	r5, r8
    55d6:	b5e0      	push	{r5, r6, r7, lr}
    55d8:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    55da:	2317      	movs	r3, #23
	if (length == 0) {
    55dc:	2a00      	cmp	r2, #0
    55de:	d107      	bne.n	55f0 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    55e0:	0018      	movs	r0, r3
    55e2:	b003      	add	sp, #12
    55e4:	bc3c      	pop	{r2, r3, r4, r5}
    55e6:	4690      	mov	r8, r2
    55e8:	4699      	mov	r9, r3
    55ea:	46a2      	mov	sl, r4
    55ec:	46ab      	mov	fp, r5
    55ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    55f0:	7943      	ldrb	r3, [r0, #5]
    55f2:	2b00      	cmp	r3, #0
    55f4:	d103      	bne.n	55fe <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    55f6:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    55f8:	7e1c      	ldrb	r4, [r3, #24]
    55fa:	07a4      	lsls	r4, r4, #30
    55fc:	d40a      	bmi.n	5614 <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
    55fe:	4693      	mov	fp, r2
    5600:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    5602:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    5604:	2502      	movs	r5, #2
    5606:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    5608:	3502      	adds	r5, #2
    560a:	46a8      	mov	r8, r5
    560c:	3a01      	subs	r2, #1
    560e:	b292      	uxth	r2, r2
    5610:	468a      	mov	sl, r1
    5612:	e023      	b.n	565c <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5614:	2402      	movs	r4, #2
    5616:	761c      	strb	r4, [r3, #24]
    5618:	e7f1      	b.n	55fe <spi_write_buffer_wait+0x32>
    561a:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    561c:	4661      	mov	r1, ip
    561e:	420d      	tst	r5, r1
    5620:	d12e      	bne.n	5680 <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5622:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    5624:	421d      	tst	r5, r3
    5626:	d100      	bne.n	562a <spi_write_buffer_wait+0x5e>
    5628:	e0c2      	b.n	57b0 <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    562a:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    562c:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    562e:	421d      	tst	r5, r3
    5630:	d0fc      	beq.n	562c <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
    5632:	1c67      	adds	r7, r4, #1
    5634:	b2bf      	uxth	r7, r7
    5636:	4651      	mov	r1, sl
    5638:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    563a:	7981      	ldrb	r1, [r0, #6]
    563c:	2901      	cmp	r1, #1
    563e:	d023      	beq.n	5688 <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    5640:	b2ad      	uxth	r5, r5
    5642:	003c      	movs	r4, r7
    5644:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    5646:	421f      	tst	r7, r3
    5648:	d002      	beq.n	5650 <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    564a:	05ed      	lsls	r5, r5, #23
    564c:	0ded      	lsrs	r5, r5, #23
    564e:	62b5      	str	r5, [r6, #40]	; 0x28
    5650:	1e55      	subs	r5, r2, #1
    5652:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    5654:	79c6      	ldrb	r6, [r0, #7]
    5656:	2e00      	cmp	r6, #0
    5658:	d11d      	bne.n	5696 <spi_write_buffer_wait+0xca>
    565a:	002a      	movs	r2, r5
	while (length--) {
    565c:	4d59      	ldr	r5, [pc, #356]	; (57c4 <spi_write_buffer_wait+0x1f8>)
    565e:	42aa      	cmp	r2, r5
    5660:	d070      	beq.n	5744 <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
    5662:	7945      	ldrb	r5, [r0, #5]
    5664:	2d00      	cmp	r5, #0
    5666:	d1e0      	bne.n	562a <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5668:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    566a:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    566c:	421d      	tst	r5, r3
    566e:	d1d4      	bne.n	561a <spi_write_buffer_wait+0x4e>
    5670:	4d55      	ldr	r5, [pc, #340]	; (57c8 <spi_write_buffer_wait+0x1fc>)
    5672:	7e37      	ldrb	r7, [r6, #24]
    5674:	421f      	tst	r7, r3
    5676:	d1d0      	bne.n	561a <spi_write_buffer_wait+0x4e>
    5678:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    567a:	2d00      	cmp	r5, #0
    567c:	d1f9      	bne.n	5672 <spi_write_buffer_wait+0xa6>
    567e:	e7cc      	b.n	561a <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5680:	2302      	movs	r3, #2
    5682:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    5684:	3302      	adds	r3, #2
    5686:	e7ab      	b.n	55e0 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    5688:	3402      	adds	r4, #2
    568a:	b2a4      	uxth	r4, r4
    568c:	4651      	mov	r1, sl
    568e:	5dcf      	ldrb	r7, [r1, r7]
    5690:	023f      	lsls	r7, r7, #8
    5692:	433d      	orrs	r5, r7
    5694:	e7d6      	b.n	5644 <spi_write_buffer_wait+0x78>
    5696:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    5698:	7945      	ldrb	r5, [r0, #5]
    569a:	2d00      	cmp	r5, #0
    569c:	d137      	bne.n	570e <spi_write_buffer_wait+0x142>
    569e:	4d4b      	ldr	r5, [pc, #300]	; (57cc <spi_write_buffer_wait+0x200>)
    56a0:	9101      	str	r1, [sp, #4]
    56a2:	e012      	b.n	56ca <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
    56a4:	3402      	adds	r4, #2
    56a6:	b2a4      	uxth	r4, r4
    56a8:	4649      	mov	r1, r9
    56aa:	9f01      	ldr	r7, [sp, #4]
    56ac:	5c79      	ldrb	r1, [r7, r1]
    56ae:	0209      	lsls	r1, r1, #8
    56b0:	9f00      	ldr	r7, [sp, #0]
    56b2:	430f      	orrs	r7, r1
    56b4:	e01b      	b.n	56ee <spi_write_buffer_wait+0x122>
						length--;
    56b6:	3a01      	subs	r2, #1
    56b8:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    56ba:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    56bc:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    56be:	4641      	mov	r1, r8
    56c0:	420f      	tst	r7, r1
    56c2:	d11b      	bne.n	56fc <spi_write_buffer_wait+0x130>
    56c4:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    56c6:	2d00      	cmp	r5, #0
    56c8:	d018      	beq.n	56fc <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
    56ca:	2a00      	cmp	r2, #0
    56cc:	d0f5      	beq.n	56ba <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    56ce:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    56d0:	7e37      	ldrb	r7, [r6, #24]
    56d2:	421f      	tst	r7, r3
    56d4:	d0f1      	beq.n	56ba <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    56d6:	1c67      	adds	r7, r4, #1
    56d8:	b2b9      	uxth	r1, r7
    56da:	4689      	mov	r9, r1
    56dc:	9901      	ldr	r1, [sp, #4]
    56de:	5d09      	ldrb	r1, [r1, r4]
    56e0:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    56e2:	7981      	ldrb	r1, [r0, #6]
    56e4:	2901      	cmp	r1, #1
    56e6:	d0dd      	beq.n	56a4 <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
    56e8:	4669      	mov	r1, sp
    56ea:	880f      	ldrh	r7, [r1, #0]
    56ec:	464c      	mov	r4, r9
    56ee:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    56f0:	4219      	tst	r1, r3
    56f2:	d0e0      	beq.n	56b6 <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    56f4:	05ff      	lsls	r7, r7, #23
    56f6:	0dff      	lsrs	r7, r7, #23
    56f8:	62b7      	str	r7, [r6, #40]	; 0x28
    56fa:	e7dc      	b.n	56b6 <spi_write_buffer_wait+0xea>
    56fc:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    56fe:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    5700:	4667      	mov	r7, ip
    5702:	423d      	tst	r5, r7
    5704:	d118      	bne.n	5738 <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5706:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    5708:	4646      	mov	r6, r8
    570a:	4235      	tst	r5, r6
    570c:	d052      	beq.n	57b4 <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    570e:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5710:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    5712:	4647      	mov	r7, r8
    5714:	423d      	tst	r5, r7
    5716:	d0fb      	beq.n	5710 <spi_write_buffer_wait+0x144>
    5718:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    571a:	423d      	tst	r5, r7
    571c:	d007      	beq.n	572e <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    571e:	8b75      	ldrh	r5, [r6, #26]
    5720:	423d      	tst	r5, r7
    5722:	d000      	beq.n	5726 <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5724:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5726:	7985      	ldrb	r5, [r0, #6]
    5728:	2d01      	cmp	r5, #1
    572a:	d009      	beq.n	5740 <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    572c:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    572e:	465d      	mov	r5, fp
    5730:	3d01      	subs	r5, #1
    5732:	b2ad      	uxth	r5, r5
    5734:	46ab      	mov	fp, r5
    5736:	e769      	b.n	560c <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5738:	2302      	movs	r3, #2
    573a:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    573c:	3302      	adds	r3, #2
    573e:	e74f      	b.n	55e0 <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5740:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    5742:	e7f4      	b.n	572e <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
    5744:	7943      	ldrb	r3, [r0, #5]
    5746:	2b01      	cmp	r3, #1
    5748:	d00b      	beq.n	5762 <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
    574a:	2b00      	cmp	r3, #0
    574c:	d134      	bne.n	57b8 <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
    574e:	79c2      	ldrb	r2, [r0, #7]
    5750:	2a00      	cmp	r2, #0
    5752:	d100      	bne.n	5756 <spi_write_buffer_wait+0x18a>
    5754:	e744      	b.n	55e0 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    5756:	2404      	movs	r4, #4
			while (flush_length) {
    5758:	465b      	mov	r3, fp
    575a:	465d      	mov	r5, fp
    575c:	2b00      	cmp	r3, #0
    575e:	d119      	bne.n	5794 <spi_write_buffer_wait+0x1c8>
    5760:	e73e      	b.n	55e0 <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5762:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    5764:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5766:	7e0b      	ldrb	r3, [r1, #24]
    5768:	4213      	tst	r3, r2
    576a:	d0fc      	beq.n	5766 <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    576c:	2300      	movs	r3, #0
    576e:	e737      	b.n	55e0 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5770:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    5772:	4223      	tst	r3, r4
    5774:	d022      	beq.n	57bc <spi_write_buffer_wait+0x1f0>
    5776:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    5778:	4223      	tst	r3, r4
    577a:	d007      	beq.n	578c <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    577c:	8b4b      	ldrh	r3, [r1, #26]
    577e:	4223      	tst	r3, r4
    5780:	d000      	beq.n	5784 <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5782:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5784:	7983      	ldrb	r3, [r0, #6]
    5786:	2b01      	cmp	r3, #1
    5788:	d010      	beq.n	57ac <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    578a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    578c:	3d01      	subs	r5, #1
    578e:	b2ad      	uxth	r5, r5
			while (flush_length) {
    5790:	2d00      	cmp	r5, #0
    5792:	d015      	beq.n	57c0 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5794:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5796:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    5798:	4223      	tst	r3, r4
    579a:	d1e9      	bne.n	5770 <spi_write_buffer_wait+0x1a4>
    579c:	4b0a      	ldr	r3, [pc, #40]	; (57c8 <spi_write_buffer_wait+0x1fc>)
    579e:	7e0a      	ldrb	r2, [r1, #24]
    57a0:	4222      	tst	r2, r4
    57a2:	d1e5      	bne.n	5770 <spi_write_buffer_wait+0x1a4>
    57a4:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    57a6:	2b00      	cmp	r3, #0
    57a8:	d1f9      	bne.n	579e <spi_write_buffer_wait+0x1d2>
    57aa:	e7e1      	b.n	5770 <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    57ac:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    57ae:	e7ed      	b.n	578c <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    57b0:	2312      	movs	r3, #18
    57b2:	e715      	b.n	55e0 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    57b4:	2312      	movs	r3, #18
    57b6:	e713      	b.n	55e0 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    57b8:	2300      	movs	r3, #0
    57ba:	e711      	b.n	55e0 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    57bc:	2312      	movs	r3, #18
    57be:	e70f      	b.n	55e0 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    57c0:	2300      	movs	r3, #0
    57c2:	e70d      	b.n	55e0 <spi_write_buffer_wait+0x14>
    57c4:	0000ffff 	.word	0x0000ffff
    57c8:	00002710 	.word	0x00002710
    57cc:	00002711 	.word	0x00002711

000057d0 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    57d0:	b510      	push	{r4, lr}
    57d2:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    57d4:	4b0f      	ldr	r3, [pc, #60]	; (5814 <sd_mmc_test_unit_ready+0x44>)
    57d6:	4798      	blx	r3
    57d8:	2801      	cmp	r0, #1
    57da:	d019      	beq.n	5810 <sd_mmc_test_unit_ready+0x40>
    57dc:	2800      	cmp	r0, #0
    57de:	d003      	beq.n	57e8 <sd_mmc_test_unit_ready+0x18>
    57e0:	2802      	cmp	r0, #2
    57e2:	d010      	beq.n	5806 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    57e4:	2001      	movs	r0, #1
	}
}
    57e6:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    57e8:	4b0b      	ldr	r3, [pc, #44]	; (5818 <sd_mmc_test_unit_ready+0x48>)
    57ea:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    57ec:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    57ee:	2b00      	cmp	r3, #0
    57f0:	d1f9      	bne.n	57e6 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    57f2:	0020      	movs	r0, r4
    57f4:	4b09      	ldr	r3, [pc, #36]	; (581c <sd_mmc_test_unit_ready+0x4c>)
    57f6:	4798      	blx	r3
    57f8:	0003      	movs	r3, r0
    57fa:	2003      	movs	r0, #3
    57fc:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    57fe:	4243      	negs	r3, r0
    5800:	4158      	adcs	r0, r3
    5802:	0040      	lsls	r0, r0, #1
    5804:	e7ef      	b.n	57e6 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    5806:	2200      	movs	r2, #0
    5808:	4b03      	ldr	r3, [pc, #12]	; (5818 <sd_mmc_test_unit_ready+0x48>)
    580a:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    580c:	2002      	movs	r0, #2
    580e:	e7ea      	b.n	57e6 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    5810:	2003      	movs	r0, #3
    5812:	e7e8      	b.n	57e6 <sd_mmc_test_unit_ready+0x16>
    5814:	000006f9 	.word	0x000006f9
    5818:	200002b4 	.word	0x200002b4
    581c:	00000ba9 	.word	0x00000ba9

00005820 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    5820:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    5822:	2000      	movs	r0, #0
    5824:	4b01      	ldr	r3, [pc, #4]	; (582c <sd_mmc_test_unit_ready_0+0xc>)
    5826:	4798      	blx	r3
}
    5828:	bd10      	pop	{r4, pc}
    582a:	46c0      	nop			; (mov r8, r8)
    582c:	000057d1 	.word	0x000057d1

00005830 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    5830:	b570      	push	{r4, r5, r6, lr}
    5832:	0004      	movs	r4, r0
    5834:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    5836:	4b04      	ldr	r3, [pc, #16]	; (5848 <sd_mmc_read_capacity+0x18>)
    5838:	4798      	blx	r3
    583a:	0040      	lsls	r0, r0, #1
    583c:	3801      	subs	r0, #1
    583e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    5840:	0020      	movs	r0, r4
    5842:	4b02      	ldr	r3, [pc, #8]	; (584c <sd_mmc_read_capacity+0x1c>)
    5844:	4798      	blx	r3
}
    5846:	bd70      	pop	{r4, r5, r6, pc}
    5848:	00000bd1 	.word	0x00000bd1
    584c:	000057d1 	.word	0x000057d1

00005850 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    5850:	b510      	push	{r4, lr}
    5852:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    5854:	2000      	movs	r0, #0
    5856:	4b01      	ldr	r3, [pc, #4]	; (585c <sd_mmc_read_capacity_0+0xc>)
    5858:	4798      	blx	r3
}
    585a:	bd10      	pop	{r4, pc}
    585c:	00005831 	.word	0x00005831

00005860 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    5860:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    5862:	2000      	movs	r0, #0
    5864:	4b01      	ldr	r3, [pc, #4]	; (586c <sd_mmc_wr_protect_0+0xc>)
    5866:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    5868:	bd10      	pop	{r4, pc}
    586a:	46c0      	nop			; (mov r8, r8)
    586c:	00000bf9 	.word	0x00000bf9

00005870 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
    5870:	2001      	movs	r0, #1
    5872:	4770      	bx	lr

00005874 <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    5874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5876:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
    5878:	4b24      	ldr	r3, [pc, #144]	; (590c <sd_mmc_usb_read_10+0x98>)
    587a:	4798      	blx	r3
    587c:	2800      	cmp	r0, #0
    587e:	d004      	beq.n	588a <sd_mmc_usb_read_10+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    5880:	3802      	subs	r0, #2
    5882:	4243      	negs	r3, r0
    5884:	4158      	adcs	r0, r3
    5886:	3001      	adds	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
    5888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nb_step = nb_sector + 1;
    588a:	3401      	adds	r4, #1
    588c:	b2a2      	uxth	r2, r4
	bool b_first_step = true;
    588e:	2701      	movs	r7, #1
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    5890:	4e1f      	ldr	r6, [pc, #124]	; (5910 <sd_mmc_usb_read_10+0x9c>)
	while (nb_step--) {
    5892:	e008      	b.n	58a6 <sd_mmc_usb_read_10+0x32>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    5894:	481f      	ldr	r0, [pc, #124]	; (5914 <sd_mmc_usb_read_10+0xa0>)
    5896:	e010      	b.n	58ba <sd_mmc_usb_read_10+0x46>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    5898:	2000      	movs	r0, #0
    589a:	4b1f      	ldr	r3, [pc, #124]	; (5918 <sd_mmc_usb_read_10+0xa4>)
    589c:	4798      	blx	r3
    589e:	2800      	cmp	r0, #0
    58a0:	d126      	bne.n	58f0 <sd_mmc_usb_read_10+0x7c>
    58a2:	2700      	movs	r7, #0
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    58a4:	0022      	movs	r2, r4
	while (nb_step--) {
    58a6:	1e54      	subs	r4, r2, #1
    58a8:	b2a4      	uxth	r4, r4
    58aa:	2a00      	cmp	r2, #0
    58ac:	d01c      	beq.n	58e8 <sd_mmc_usb_read_10+0x74>
		if (nb_step) { // Skip last step
    58ae:	2c00      	cmp	r4, #0
    58b0:	d020      	beq.n	58f4 <sd_mmc_usb_read_10+0x80>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    58b2:	2501      	movs	r5, #1
    58b4:	4025      	ands	r5, r4
    58b6:	d0ed      	beq.n	5894 <sd_mmc_usb_read_10+0x20>
    58b8:	4818      	ldr	r0, [pc, #96]	; (591c <sd_mmc_usb_read_10+0xa8>)
    58ba:	2101      	movs	r1, #1
    58bc:	47b0      	blx	r6
    58be:	2800      	cmp	r0, #0
    58c0:	d114      	bne.n	58ec <sd_mmc_usb_read_10+0x78>
		if (!b_first_step) { // Skip first step
    58c2:	2f00      	cmp	r7, #0
    58c4:	d1e8      	bne.n	5898 <sd_mmc_usb_read_10+0x24>
			if (!udi_msc_trans_block(true,
    58c6:	4915      	ldr	r1, [pc, #84]	; (591c <sd_mmc_usb_read_10+0xa8>)
    58c8:	2d00      	cmp	r5, #0
    58ca:	d000      	beq.n	58ce <sd_mmc_usb_read_10+0x5a>
    58cc:	4911      	ldr	r1, [pc, #68]	; (5914 <sd_mmc_usb_read_10+0xa0>)
    58ce:	2300      	movs	r3, #0
    58d0:	2280      	movs	r2, #128	; 0x80
    58d2:	0092      	lsls	r2, r2, #2
    58d4:	2001      	movs	r0, #1
    58d6:	4d12      	ldr	r5, [pc, #72]	; (5920 <sd_mmc_usb_read_10+0xac>)
    58d8:	47a8      	blx	r5
    58da:	2800      	cmp	r0, #0
    58dc:	d1dc      	bne.n	5898 <sd_mmc_usb_read_10+0x24>
					sd_mmc_wait_end_of_read_blocks(true);
    58de:	2001      	movs	r0, #1
    58e0:	4b0d      	ldr	r3, [pc, #52]	; (5918 <sd_mmc_usb_read_10+0xa4>)
    58e2:	4798      	blx	r3
				return CTRL_FAIL;
    58e4:	2001      	movs	r0, #1
    58e6:	e7cf      	b.n	5888 <sd_mmc_usb_read_10+0x14>
	return CTRL_GOOD;
    58e8:	2000      	movs	r0, #0
    58ea:	e7cd      	b.n	5888 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    58ec:	2001      	movs	r0, #1
    58ee:	e7cb      	b.n	5888 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    58f0:	2001      	movs	r0, #1
    58f2:	e7c9      	b.n	5888 <sd_mmc_usb_read_10+0x14>
		if (!b_first_step) { // Skip first step
    58f4:	2f00      	cmp	r7, #0
    58f6:	d1d4      	bne.n	58a2 <sd_mmc_usb_read_10+0x2e>
			if (!udi_msc_trans_block(true,
    58f8:	2300      	movs	r3, #0
    58fa:	2280      	movs	r2, #128	; 0x80
    58fc:	0092      	lsls	r2, r2, #2
    58fe:	4907      	ldr	r1, [pc, #28]	; (591c <sd_mmc_usb_read_10+0xa8>)
    5900:	2001      	movs	r0, #1
    5902:	4d07      	ldr	r5, [pc, #28]	; (5920 <sd_mmc_usb_read_10+0xac>)
    5904:	47a8      	blx	r5
    5906:	2800      	cmp	r0, #0
    5908:	d1cb      	bne.n	58a2 <sd_mmc_usb_read_10+0x2e>
    590a:	e7e8      	b.n	58de <sd_mmc_usb_read_10+0x6a>
    590c:	00000bfd 	.word	0x00000bfd
    5910:	00000c85 	.word	0x00000c85
    5914:	200008e8 	.word	0x200008e8
    5918:	00000cb1 	.word	0x00000cb1
    591c:	200006e8 	.word	0x200006e8
    5920:	00001651 	.word	0x00001651

00005924 <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
    5924:	b510      	push	{r4, lr}
    5926:	000a      	movs	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
    5928:	0001      	movs	r1, r0
    592a:	2000      	movs	r0, #0
    592c:	4b01      	ldr	r3, [pc, #4]	; (5934 <sd_mmc_usb_read_10_0+0x10>)
    592e:	4798      	blx	r3
}
    5930:	bd10      	pop	{r4, pc}
    5932:	46c0      	nop			; (mov r8, r8)
    5934:	00005875 	.word	0x00005875

00005938 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    5938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    593a:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
    593c:	4b20      	ldr	r3, [pc, #128]	; (59c0 <sd_mmc_usb_write_10+0x88>)
    593e:	4798      	blx	r3
    5940:	2800      	cmp	r0, #0
    5942:	d00d      	beq.n	5960 <sd_mmc_usb_write_10+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    5944:	3802      	subs	r0, #2
    5946:	4243      	negs	r3, r0
    5948:	4158      	adcs	r0, r3
    594a:	3001      	adds	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
    594c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    594e:	481d      	ldr	r0, [pc, #116]	; (59c4 <sd_mmc_usb_write_10+0x8c>)
    5950:	e01b      	b.n	598a <sd_mmc_usb_write_10+0x52>
				return CTRL_FAIL;
    5952:	3001      	adds	r0, #1
				if (!b_first_step) {
    5954:	2d00      	cmp	r5, #0
    5956:	d1f9      	bne.n	594c <sd_mmc_usb_write_10+0x14>
					sd_mmc_wait_end_of_write_blocks(true);
    5958:	4b1b      	ldr	r3, [pc, #108]	; (59c8 <sd_mmc_usb_write_10+0x90>)
    595a:	4798      	blx	r3
				return CTRL_FAIL;
    595c:	2001      	movs	r0, #1
    595e:	e7f5      	b.n	594c <sd_mmc_usb_write_10+0x14>
	bool b_first_step = true;
    5960:	2501      	movs	r5, #1
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    5962:	4f19      	ldr	r7, [pc, #100]	; (59c8 <sd_mmc_usb_write_10+0x90>)
			if (!udi_msc_trans_block(false,
    5964:	4e19      	ldr	r6, [pc, #100]	; (59cc <sd_mmc_usb_write_10+0x94>)
    5966:	e008      	b.n	597a <sd_mmc_usb_write_10+0x42>
	return CTRL_GOOD;
    5968:	2000      	movs	r0, #0
    596a:	e7ef      	b.n	594c <sd_mmc_usb_write_10+0x14>
				return CTRL_FAIL;
    596c:	2001      	movs	r0, #1
    596e:	e7ed      	b.n	594c <sd_mmc_usb_write_10+0x14>
		if (nb_step) { // Skip last step
    5970:	2c00      	cmp	r4, #0
    5972:	d111      	bne.n	5998 <sd_mmc_usb_write_10+0x60>
    5974:	3c01      	subs	r4, #1
    5976:	b2a4      	uxth	r4, r4
    5978:	2500      	movs	r5, #0
	while (nb_step--) {
    597a:	4b15      	ldr	r3, [pc, #84]	; (59d0 <sd_mmc_usb_write_10+0x98>)
    597c:	429c      	cmp	r4, r3
    597e:	d0f3      	beq.n	5968 <sd_mmc_usb_write_10+0x30>
		if (!b_first_step) { // Skip first step
    5980:	2d00      	cmp	r5, #0
    5982:	d1f5      	bne.n	5970 <sd_mmc_usb_write_10+0x38>
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    5984:	07e3      	lsls	r3, r4, #31
    5986:	d5e2      	bpl.n	594e <sd_mmc_usb_write_10+0x16>
    5988:	4812      	ldr	r0, [pc, #72]	; (59d4 <sd_mmc_usb_write_10+0x9c>)
    598a:	2101      	movs	r1, #1
    598c:	4b12      	ldr	r3, [pc, #72]	; (59d8 <sd_mmc_usb_write_10+0xa0>)
    598e:	4798      	blx	r3
    5990:	2800      	cmp	r0, #0
    5992:	d1eb      	bne.n	596c <sd_mmc_usb_write_10+0x34>
		if (nb_step) { // Skip last step
    5994:	2c00      	cmp	r4, #0
    5996:	d00c      	beq.n	59b2 <sd_mmc_usb_write_10+0x7a>
			if (!udi_msc_trans_block(false,
    5998:	490e      	ldr	r1, [pc, #56]	; (59d4 <sd_mmc_usb_write_10+0x9c>)
    599a:	07e3      	lsls	r3, r4, #31
    599c:	d500      	bpl.n	59a0 <sd_mmc_usb_write_10+0x68>
    599e:	4909      	ldr	r1, [pc, #36]	; (59c4 <sd_mmc_usb_write_10+0x8c>)
    59a0:	2300      	movs	r3, #0
    59a2:	2280      	movs	r2, #128	; 0x80
    59a4:	0092      	lsls	r2, r2, #2
    59a6:	2000      	movs	r0, #0
    59a8:	47b0      	blx	r6
    59aa:	2800      	cmp	r0, #0
    59ac:	d0d1      	beq.n	5952 <sd_mmc_usb_write_10+0x1a>
		if (!b_first_step) { // Skip first step
    59ae:	2d00      	cmp	r5, #0
    59b0:	d1e0      	bne.n	5974 <sd_mmc_usb_write_10+0x3c>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    59b2:	2000      	movs	r0, #0
    59b4:	47b8      	blx	r7
    59b6:	2800      	cmp	r0, #0
    59b8:	d0dc      	beq.n	5974 <sd_mmc_usb_write_10+0x3c>
				return CTRL_FAIL;
    59ba:	2001      	movs	r0, #1
    59bc:	e7c6      	b.n	594c <sd_mmc_usb_write_10+0x14>
    59be:	46c0      	nop			; (mov r8, r8)
    59c0:	00000d21 	.word	0x00000d21
    59c4:	200008e8 	.word	0x200008e8
    59c8:	00000dbd 	.word	0x00000dbd
    59cc:	00001651 	.word	0x00001651
    59d0:	0000ffff 	.word	0x0000ffff
    59d4:	200006e8 	.word	0x200006e8
    59d8:	00000d91 	.word	0x00000d91

000059dc <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
    59dc:	b510      	push	{r4, lr}
    59de:	000a      	movs	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
    59e0:	0001      	movs	r1, r0
    59e2:	2000      	movs	r0, #0
    59e4:	4b01      	ldr	r3, [pc, #4]	; (59ec <sd_mmc_usb_write_10_0+0x10>)
    59e6:	4798      	blx	r3
}
    59e8:	bd10      	pop	{r4, pc}
    59ea:	46c0      	nop			; (mov r8, r8)
    59ec:	00005939 	.word	0x00005939

000059f0 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    59f0:	b500      	push	{lr}
    59f2:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    59f4:	466b      	mov	r3, sp
    59f6:	1dd9      	adds	r1, r3, #7
    59f8:	23ff      	movs	r3, #255	; 0xff
    59fa:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    59fc:	2201      	movs	r2, #1
    59fe:	480b      	ldr	r0, [pc, #44]	; (5a2c <sd_mmc_spi_start_write_block+0x3c>)
    5a00:	4b0b      	ldr	r3, [pc, #44]	; (5a30 <sd_mmc_spi_start_write_block+0x40>)
    5a02:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    5a04:	4b0b      	ldr	r3, [pc, #44]	; (5a34 <sd_mmc_spi_start_write_block+0x44>)
    5a06:	881b      	ldrh	r3, [r3, #0]
    5a08:	2b01      	cmp	r3, #1
    5a0a:	d00a      	beq.n	5a22 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    5a0c:	22fc      	movs	r2, #252	; 0xfc
    5a0e:	466b      	mov	r3, sp
    5a10:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    5a12:	2201      	movs	r2, #1
    5a14:	466b      	mov	r3, sp
    5a16:	1d99      	adds	r1, r3, #6
    5a18:	4804      	ldr	r0, [pc, #16]	; (5a2c <sd_mmc_spi_start_write_block+0x3c>)
    5a1a:	4b05      	ldr	r3, [pc, #20]	; (5a30 <sd_mmc_spi_start_write_block+0x40>)
    5a1c:	4798      	blx	r3
}
    5a1e:	b003      	add	sp, #12
    5a20:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    5a22:	22fe      	movs	r2, #254	; 0xfe
    5a24:	466b      	mov	r3, sp
    5a26:	719a      	strb	r2, [r3, #6]
    5a28:	e7f3      	b.n	5a12 <sd_mmc_spi_start_write_block+0x22>
    5a2a:	46c0      	nop			; (mov r8, r8)
    5a2c:	200002b8 	.word	0x200002b8
    5a30:	000055cd 	.word	0x000055cd
    5a34:	200002cc 	.word	0x200002cc

00005a38 <sd_mmc_spi_wait_busy>:
{
    5a38:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a3a:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    5a3c:	466b      	mov	r3, sp
    5a3e:	1ddc      	adds	r4, r3, #7
    5a40:	23ff      	movs	r3, #255	; 0xff
    5a42:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    5a44:	4e12      	ldr	r6, [pc, #72]	; (5a90 <sd_mmc_spi_wait_busy+0x58>)
    5a46:	2201      	movs	r2, #1
    5a48:	0021      	movs	r1, r4
    5a4a:	0030      	movs	r0, r6
    5a4c:	4d11      	ldr	r5, [pc, #68]	; (5a94 <sd_mmc_spi_wait_busy+0x5c>)
    5a4e:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    5a50:	23ff      	movs	r3, #255	; 0xff
    5a52:	2201      	movs	r2, #1
    5a54:	0021      	movs	r1, r4
    5a56:	0030      	movs	r0, r6
    5a58:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    5a5a:	23ff      	movs	r3, #255	; 0xff
    5a5c:	2201      	movs	r2, #1
    5a5e:	0021      	movs	r1, r4
    5a60:	0030      	movs	r0, r6
    5a62:	47a8      	blx	r5
    5a64:	4c0c      	ldr	r4, [pc, #48]	; (5a98 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    5a66:	466b      	mov	r3, sp
    5a68:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    5a6a:	4e09      	ldr	r6, [pc, #36]	; (5a90 <sd_mmc_spi_wait_busy+0x58>)
    5a6c:	4f09      	ldr	r7, [pc, #36]	; (5a94 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    5a6e:	782b      	ldrb	r3, [r5, #0]
    5a70:	2bff      	cmp	r3, #255	; 0xff
    5a72:	d009      	beq.n	5a88 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    5a74:	23ff      	movs	r3, #255	; 0xff
    5a76:	2201      	movs	r2, #1
    5a78:	0029      	movs	r1, r5
    5a7a:	0030      	movs	r0, r6
    5a7c:	47b8      	blx	r7
    5a7e:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    5a80:	2c00      	cmp	r4, #0
    5a82:	d1f4      	bne.n	5a6e <sd_mmc_spi_wait_busy+0x36>
			return false;
    5a84:	2000      	movs	r0, #0
    5a86:	e000      	b.n	5a8a <sd_mmc_spi_wait_busy+0x52>
	return true;
    5a88:	2001      	movs	r0, #1
}
    5a8a:	b003      	add	sp, #12
    5a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a8e:	46c0      	nop			; (mov r8, r8)
    5a90:	200002b8 	.word	0x200002b8
    5a94:	000053c1 	.word	0x000053c1
    5a98:	00030d40 	.word	0x00030d40

00005a9c <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    5a9c:	b570      	push	{r4, r5, r6, lr}
    5a9e:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    5aa0:	4b14      	ldr	r3, [pc, #80]	; (5af4 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    5aa2:	881c      	ldrh	r4, [r3, #0]
    5aa4:	2c01      	cmp	r4, #1
    5aa6:	d023      	beq.n	5af0 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    5aa8:	4b13      	ldr	r3, [pc, #76]	; (5af8 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    5aaa:	8819      	ldrh	r1, [r3, #0]
    5aac:	4b13      	ldr	r3, [pc, #76]	; (5afc <sd_mmc_spi_stop_multiwrite_block+0x60>)
    5aae:	6818      	ldr	r0, [r3, #0]
    5ab0:	4b13      	ldr	r3, [pc, #76]	; (5b00 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    5ab2:	4798      	blx	r3
		return true; // It is not the End of multi write
    5ab4:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    5ab6:	4284      	cmp	r4, r0
    5ab8:	d902      	bls.n	5ac0 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    5aba:	0018      	movs	r0, r3
    5abc:	b002      	add	sp, #8
    5abe:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    5ac0:	466b      	mov	r3, sp
    5ac2:	1ddc      	adds	r4, r3, #7
    5ac4:	23ff      	movs	r3, #255	; 0xff
    5ac6:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    5ac8:	4e0e      	ldr	r6, [pc, #56]	; (5b04 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    5aca:	2201      	movs	r2, #1
    5acc:	0021      	movs	r1, r4
    5ace:	0030      	movs	r0, r6
    5ad0:	4d0d      	ldr	r5, [pc, #52]	; (5b08 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    5ad2:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    5ad4:	23fd      	movs	r3, #253	; 0xfd
    5ad6:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    5ad8:	2201      	movs	r2, #1
    5ada:	0021      	movs	r1, r4
    5adc:	0030      	movs	r0, r6
    5ade:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    5ae0:	4b0a      	ldr	r3, [pc, #40]	; (5b0c <sd_mmc_spi_stop_multiwrite_block+0x70>)
    5ae2:	4798      	blx	r3
    5ae4:	1e03      	subs	r3, r0, #0
    5ae6:	d1e8      	bne.n	5aba <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    5ae8:	2105      	movs	r1, #5
    5aea:	4a09      	ldr	r2, [pc, #36]	; (5b10 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    5aec:	7011      	strb	r1, [r2, #0]
		return false;
    5aee:	e7e4      	b.n	5aba <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    5af0:	2301      	movs	r3, #1
    5af2:	e7e2      	b.n	5aba <sd_mmc_spi_stop_multiwrite_block+0x1e>
    5af4:	200002cc 	.word	0x200002cc
    5af8:	200002c4 	.word	0x200002c4
    5afc:	200002d4 	.word	0x200002d4
    5b00:	00006765 	.word	0x00006765
    5b04:	200002b8 	.word	0x200002b8
    5b08:	000055cd 	.word	0x000055cd
    5b0c:	00005a39 	.word	0x00005a39
    5b10:	200002cb 	.word	0x200002cb

00005b14 <sd_mmc_spi_start_read_block>:
{
    5b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b16:	b083      	sub	sp, #12
	token = 0;
    5b18:	2200      	movs	r2, #0
    5b1a:	466b      	mov	r3, sp
    5b1c:	71da      	strb	r2, [r3, #7]
    5b1e:	4c14      	ldr	r4, [pc, #80]	; (5b70 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    5b20:	466b      	mov	r3, sp
    5b22:	1ddd      	adds	r5, r3, #7
    5b24:	4e13      	ldr	r6, [pc, #76]	; (5b74 <sd_mmc_spi_start_read_block+0x60>)
    5b26:	4f14      	ldr	r7, [pc, #80]	; (5b78 <sd_mmc_spi_start_read_block+0x64>)
    5b28:	23ff      	movs	r3, #255	; 0xff
    5b2a:	2201      	movs	r2, #1
    5b2c:	0029      	movs	r1, r5
    5b2e:	0030      	movs	r0, r6
    5b30:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    5b32:	782b      	ldrb	r3, [r5, #0]
    5b34:	220f      	movs	r2, #15
    5b36:	0019      	movs	r1, r3
    5b38:	4391      	bics	r1, r2
    5b3a:	1e0a      	subs	r2, r1, #0
    5b3c:	d009      	beq.n	5b52 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    5b3e:	2bfe      	cmp	r3, #254	; 0xfe
    5b40:	d013      	beq.n	5b6a <sd_mmc_spi_start_read_block+0x56>
    5b42:	3c01      	subs	r4, #1
		if (i-- == 0) {
    5b44:	2c00      	cmp	r4, #0
    5b46:	d1ef      	bne.n	5b28 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    5b48:	2204      	movs	r2, #4
    5b4a:	4b0c      	ldr	r3, [pc, #48]	; (5b7c <sd_mmc_spi_start_read_block+0x68>)
    5b4c:	701a      	strb	r2, [r3, #0]
			return false;
    5b4e:	2000      	movs	r0, #0
    5b50:	e00c      	b.n	5b6c <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    5b52:	075b      	lsls	r3, r3, #29
    5b54:	d004      	beq.n	5b60 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    5b56:	3207      	adds	r2, #7
    5b58:	4b08      	ldr	r3, [pc, #32]	; (5b7c <sd_mmc_spi_start_read_block+0x68>)
    5b5a:	701a      	strb	r2, [r3, #0]
			return false;
    5b5c:	2000      	movs	r0, #0
    5b5e:	e005      	b.n	5b6c <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    5b60:	220b      	movs	r2, #11
    5b62:	4b06      	ldr	r3, [pc, #24]	; (5b7c <sd_mmc_spi_start_read_block+0x68>)
    5b64:	701a      	strb	r2, [r3, #0]
			return false;
    5b66:	2000      	movs	r0, #0
    5b68:	e000      	b.n	5b6c <sd_mmc_spi_start_read_block+0x58>
	return true;
    5b6a:	2001      	movs	r0, #1
}
    5b6c:	b003      	add	sp, #12
    5b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b70:	0007a120 	.word	0x0007a120
    5b74:	200002b8 	.word	0x200002b8
    5b78:	000053c1 	.word	0x000053c1
    5b7c:	200002cb 	.word	0x200002cb

00005b80 <sd_mmc_spi_stop_write_block>:
{
    5b80:	b530      	push	{r4, r5, lr}
    5b82:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    5b84:	a901      	add	r1, sp, #4
    5b86:	2301      	movs	r3, #1
    5b88:	425b      	negs	r3, r3
    5b8a:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    5b8c:	4d14      	ldr	r5, [pc, #80]	; (5be0 <sd_mmc_spi_stop_write_block+0x60>)
    5b8e:	2202      	movs	r2, #2
    5b90:	0028      	movs	r0, r5
    5b92:	4b14      	ldr	r3, [pc, #80]	; (5be4 <sd_mmc_spi_stop_write_block+0x64>)
    5b94:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    5b96:	466b      	mov	r3, sp
    5b98:	1ddc      	adds	r4, r3, #7
    5b9a:	23ff      	movs	r3, #255	; 0xff
    5b9c:	2201      	movs	r2, #1
    5b9e:	0021      	movs	r1, r4
    5ba0:	0028      	movs	r0, r5
    5ba2:	4d11      	ldr	r5, [pc, #68]	; (5be8 <sd_mmc_spi_stop_write_block+0x68>)
    5ba4:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    5ba6:	7822      	ldrb	r2, [r4, #0]
    5ba8:	2311      	movs	r3, #17
    5baa:	4013      	ands	r3, r2
    5bac:	2b01      	cmp	r3, #1
    5bae:	d005      	beq.n	5bbc <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    5bb0:	2201      	movs	r2, #1
    5bb2:	4b0e      	ldr	r3, [pc, #56]	; (5bec <sd_mmc_spi_stop_write_block+0x6c>)
    5bb4:	701a      	strb	r2, [r3, #0]
		return false;
    5bb6:	2000      	movs	r0, #0
}
    5bb8:	b003      	add	sp, #12
    5bba:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    5bbc:	231e      	movs	r3, #30
    5bbe:	401a      	ands	r2, r3
    5bc0:	2a04      	cmp	r2, #4
    5bc2:	d00b      	beq.n	5bdc <sd_mmc_spi_stop_write_block+0x5c>
    5bc4:	2a0a      	cmp	r2, #10
    5bc6:	d104      	bne.n	5bd2 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    5bc8:	3a02      	subs	r2, #2
    5bca:	4b08      	ldr	r3, [pc, #32]	; (5bec <sd_mmc_spi_stop_write_block+0x6c>)
    5bcc:	701a      	strb	r2, [r3, #0]
		return false;
    5bce:	2000      	movs	r0, #0
    5bd0:	e7f2      	b.n	5bb8 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    5bd2:	220a      	movs	r2, #10
    5bd4:	4b05      	ldr	r3, [pc, #20]	; (5bec <sd_mmc_spi_stop_write_block+0x6c>)
    5bd6:	701a      	strb	r2, [r3, #0]
		return false;
    5bd8:	2000      	movs	r0, #0
    5bda:	e7ed      	b.n	5bb8 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    5bdc:	2001      	movs	r0, #1
    5bde:	e7eb      	b.n	5bb8 <sd_mmc_spi_stop_write_block+0x38>
    5be0:	200002b8 	.word	0x200002b8
    5be4:	000055cd 	.word	0x000055cd
    5be8:	000053c1 	.word	0x000053c1
    5bec:	200002cb 	.word	0x200002cb

00005bf0 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    5bf0:	b570      	push	{r4, r5, r6, lr}
    5bf2:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5bf4:	2500      	movs	r5, #0
    5bf6:	4b2c      	ldr	r3, [pc, #176]	; (5ca8 <sd_mmc_spi_init+0xb8>)
    5bf8:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    5bfa:	a90f      	add	r1, sp, #60	; 0x3c
    5bfc:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5bfe:	2601      	movs	r6, #1
    5c00:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    5c02:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
    5c04:	2025      	movs	r0, #37	; 0x25
    5c06:	4b29      	ldr	r3, [pc, #164]	; (5cac <sd_mmc_spi_init+0xbc>)
    5c08:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    5c0a:	ac01      	add	r4, sp, #4
    5c0c:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5c0e:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5c10:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    5c12:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    5c14:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    5c16:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    5c18:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    5c1a:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    5c1c:	2324      	movs	r3, #36	; 0x24
    5c1e:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5c20:	220c      	movs	r2, #12
    5c22:	2100      	movs	r1, #0
    5c24:	a807      	add	r0, sp, #28
    5c26:	4b22      	ldr	r3, [pc, #136]	; (5cb0 <sd_mmc_spi_init+0xc0>)
    5c28:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    5c2a:	2380      	movs	r3, #128	; 0x80
    5c2c:	025b      	lsls	r3, r3, #9
    5c2e:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    5c30:	4b20      	ldr	r3, [pc, #128]	; (5cb4 <sd_mmc_spi_init+0xc4>)
    5c32:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    5c34:	4b20      	ldr	r3, [pc, #128]	; (5cb8 <sd_mmc_spi_init+0xc8>)
    5c36:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    5c38:	4b20      	ldr	r3, [pc, #128]	; (5cbc <sd_mmc_spi_init+0xcc>)
    5c3a:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    5c3c:	4b20      	ldr	r3, [pc, #128]	; (5cc0 <sd_mmc_spi_init+0xd0>)
    5c3e:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    5c40:	4b20      	ldr	r3, [pc, #128]	; (5cc4 <sd_mmc_spi_init+0xd4>)
    5c42:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    5c44:	4d20      	ldr	r5, [pc, #128]	; (5cc8 <sd_mmc_spi_init+0xd8>)
    5c46:	0022      	movs	r2, r4
    5c48:	4920      	ldr	r1, [pc, #128]	; (5ccc <sd_mmc_spi_init+0xdc>)
    5c4a:	0028      	movs	r0, r5
    5c4c:	4b20      	ldr	r3, [pc, #128]	; (5cd0 <sd_mmc_spi_init+0xe0>)
    5c4e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    5c50:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    5c52:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    5c54:	2b00      	cmp	r3, #0
    5c56:	d1fc      	bne.n	5c52 <sd_mmc_spi_init+0x62>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5c58:	6813      	ldr	r3, [r2, #0]
    5c5a:	2102      	movs	r1, #2
    5c5c:	430b      	orrs	r3, r1
    5c5e:	6013      	str	r3, [r2, #0]
	config->address_enabled = false;
    5c60:	4a1c      	ldr	r2, [pc, #112]	; (5cd4 <sd_mmc_spi_init+0xe4>)
    5c62:	2300      	movs	r3, #0
    5c64:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    5c66:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    5c68:	491b      	ldr	r1, [pc, #108]	; (5cd8 <sd_mmc_spi_init+0xe8>)
    5c6a:	7808      	ldrb	r0, [r1, #0]
    5c6c:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    5c6e:	4c1b      	ldr	r4, [pc, #108]	; (5cdc <sd_mmc_spi_init+0xec>)
    5c70:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    5c72:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    5c74:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    5c76:	2201      	movs	r2, #1
    5c78:	4669      	mov	r1, sp
    5c7a:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    5c7c:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5c7e:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5c80:	4b0a      	ldr	r3, [pc, #40]	; (5cac <sd_mmc_spi_init+0xbc>)
    5c82:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    5c84:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    5c86:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5c88:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5c8a:	2900      	cmp	r1, #0
    5c8c:	d104      	bne.n	5c98 <sd_mmc_spi_init+0xa8>
		return &(ports[port_index]->Group[group_index]);
    5c8e:	0953      	lsrs	r3, r2, #5
    5c90:	01db      	lsls	r3, r3, #7
    5c92:	4913      	ldr	r1, [pc, #76]	; (5ce0 <sd_mmc_spi_init+0xf0>)
    5c94:	468c      	mov	ip, r1
    5c96:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c98:	211f      	movs	r1, #31
    5c9a:	4011      	ands	r1, r2
    5c9c:	2201      	movs	r2, #1
    5c9e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5ca0:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    5ca2:	b010      	add	sp, #64	; 0x40
    5ca4:	bd70      	pop	{r4, r5, r6, pc}
    5ca6:	46c0      	nop			; (mov r8, r8)
    5ca8:	200002cb 	.word	0x200002cb
    5cac:	00006291 	.word	0x00006291
    5cb0:	00006d53 	.word	0x00006d53
    5cb4:	00040003 	.word	0x00040003
    5cb8:	00050003 	.word	0x00050003
    5cbc:	00060003 	.word	0x00060003
    5cc0:	00070003 	.word	0x00070003
    5cc4:	00061a80 	.word	0x00061a80
    5cc8:	200002b8 	.word	0x200002b8
    5ccc:	42000800 	.word	0x42000800
    5cd0:	0000508d 	.word	0x0000508d
    5cd4:	200002d8 	.word	0x200002d8
    5cd8:	200000f8 	.word	0x200000f8
    5cdc:	200002c8 	.word	0x200002c8
    5ce0:	41004400 	.word	0x41004400

00005ce4 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    5ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ce6:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5ce8:	2200      	movs	r2, #0
    5cea:	4b0d      	ldr	r3, [pc, #52]	; (5d20 <sd_mmc_spi_select_device+0x3c>)
    5cec:	701a      	strb	r2, [r3, #0]
    5cee:	000c      	movs	r4, r1
    5cf0:	4b0c      	ldr	r3, [pc, #48]	; (5d24 <sd_mmc_spi_select_device+0x40>)
    5cf2:	4299      	cmp	r1, r3
    5cf4:	d900      	bls.n	5cf8 <sd_mmc_spi_select_device+0x14>
    5cf6:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    5cf8:	4d0b      	ldr	r5, [pc, #44]	; (5d28 <sd_mmc_spi_select_device+0x44>)
    5cfa:	4e0c      	ldr	r6, [pc, #48]	; (5d2c <sd_mmc_spi_select_device+0x48>)
    5cfc:	e001      	b.n	5d02 <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    5cfe:	08e3      	lsrs	r3, r4, #3
    5d00:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    5d02:	0021      	movs	r1, r4
    5d04:	0028      	movs	r0, r5
    5d06:	47b0      	blx	r6
    5d08:	2817      	cmp	r0, #23
    5d0a:	d0f8      	beq.n	5cfe <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    5d0c:	0079      	lsls	r1, r7, #1
    5d0e:	19cf      	adds	r7, r1, r7
    5d10:	4907      	ldr	r1, [pc, #28]	; (5d30 <sd_mmc_spi_select_device+0x4c>)
    5d12:	19c9      	adds	r1, r1, r7
    5d14:	2201      	movs	r2, #1
    5d16:	4804      	ldr	r0, [pc, #16]	; (5d28 <sd_mmc_spi_select_device+0x44>)
    5d18:	4b06      	ldr	r3, [pc, #24]	; (5d34 <sd_mmc_spi_select_device+0x50>)
    5d1a:	4798      	blx	r3
}
    5d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d1e:	46c0      	nop			; (mov r8, r8)
    5d20:	200002cb 	.word	0x200002cb
    5d24:	003d0900 	.word	0x003d0900
    5d28:	200002b8 	.word	0x200002b8
    5d2c:	00005009 	.word	0x00005009
    5d30:	200002c8 	.word	0x200002c8
    5d34:	000054d9 	.word	0x000054d9

00005d38 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    5d38:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5d3a:	2200      	movs	r2, #0
    5d3c:	4b04      	ldr	r3, [pc, #16]	; (5d50 <sd_mmc_spi_deselect_device+0x18>)
    5d3e:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    5d40:	0041      	lsls	r1, r0, #1
    5d42:	1808      	adds	r0, r1, r0
    5d44:	4903      	ldr	r1, [pc, #12]	; (5d54 <sd_mmc_spi_deselect_device+0x1c>)
    5d46:	1809      	adds	r1, r1, r0
    5d48:	4803      	ldr	r0, [pc, #12]	; (5d58 <sd_mmc_spi_deselect_device+0x20>)
    5d4a:	4b04      	ldr	r3, [pc, #16]	; (5d5c <sd_mmc_spi_deselect_device+0x24>)
    5d4c:	4798      	blx	r3
}
    5d4e:	bd10      	pop	{r4, pc}
    5d50:	200002cb 	.word	0x200002cb
    5d54:	200002c8 	.word	0x200002c8
    5d58:	200002b8 	.word	0x200002b8
    5d5c:	000054d9 	.word	0x000054d9

00005d60 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    5d60:	b570      	push	{r4, r5, r6, lr}
    5d62:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    5d64:	22ff      	movs	r2, #255	; 0xff
    5d66:	466b      	mov	r3, sp
    5d68:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5d6a:	2200      	movs	r2, #0
    5d6c:	4b07      	ldr	r3, [pc, #28]	; (5d8c <sd_mmc_spi_send_clock+0x2c>)
    5d6e:	701a      	strb	r2, [r3, #0]
    5d70:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    5d72:	4e07      	ldr	r6, [pc, #28]	; (5d90 <sd_mmc_spi_send_clock+0x30>)
    5d74:	4d07      	ldr	r5, [pc, #28]	; (5d94 <sd_mmc_spi_send_clock+0x34>)
    5d76:	2201      	movs	r2, #1
    5d78:	466b      	mov	r3, sp
    5d7a:	1dd9      	adds	r1, r3, #7
    5d7c:	0030      	movs	r0, r6
    5d7e:	47a8      	blx	r5
    5d80:	3c01      	subs	r4, #1
    5d82:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    5d84:	2c00      	cmp	r4, #0
    5d86:	d1f6      	bne.n	5d76 <sd_mmc_spi_send_clock+0x16>
	}
}
    5d88:	b002      	add	sp, #8
    5d8a:	bd70      	pop	{r4, r5, r6, pc}
    5d8c:	200002cb 	.word	0x200002cb
    5d90:	200002b8 	.word	0x200002b8
    5d94:	000055cd 	.word	0x000055cd

00005d98 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    5d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d9a:	46c6      	mov	lr, r8
    5d9c:	b500      	push	{lr}
    5d9e:	b086      	sub	sp, #24
    5da0:	4680      	mov	r8, r0
    5da2:	9200      	str	r2, [sp, #0]
    5da4:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    5da6:	22ff      	movs	r2, #255	; 0xff
    5da8:	230f      	movs	r3, #15
    5daa:	a802      	add	r0, sp, #8
    5dac:	4684      	mov	ip, r0
    5dae:	4463      	add	r3, ip
    5db0:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5db2:	2200      	movs	r2, #0
    5db4:	4b53      	ldr	r3, [pc, #332]	; (5f04 <sd_mmc_spi_adtc_start+0x16c>)
    5db6:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    5db8:	ab04      	add	r3, sp, #16
    5dba:	323f      	adds	r2, #63	; 0x3f
    5dbc:	4640      	mov	r0, r8
    5dbe:	4002      	ands	r2, r0
    5dc0:	2040      	movs	r0, #64	; 0x40
    5dc2:	4302      	orrs	r2, r0
    5dc4:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    5dc6:	0e0a      	lsrs	r2, r1, #24
    5dc8:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    5dca:	0c0a      	lsrs	r2, r1, #16
    5dcc:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    5dce:	0a0a      	lsrs	r2, r1, #8
    5dd0:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    5dd2:	7119      	strb	r1, [r3, #4]
    5dd4:	2700      	movs	r7, #0
	crc = 0;
    5dd6:	2300      	movs	r3, #0
		value = *buf++;
    5dd8:	a904      	add	r1, sp, #16
    5dda:	2208      	movs	r2, #8
				crc ^= 0x09;
    5ddc:	2409      	movs	r4, #9
    5dde:	e011      	b.n	5e04 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    5de0:	0076      	lsls	r6, r6, #1
    5de2:	b2f6      	uxtb	r6, r6
    5de4:	3801      	subs	r0, #1
    5de6:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    5de8:	2800      	cmp	r0, #0
    5dea:	d008      	beq.n	5dfe <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    5dec:	005b      	lsls	r3, r3, #1
    5dee:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    5df0:	001d      	movs	r5, r3
    5df2:	4075      	eors	r5, r6
    5df4:	062d      	lsls	r5, r5, #24
    5df6:	d5f3      	bpl.n	5de0 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    5df8:	4063      	eors	r3, r4
    5dfa:	b2db      	uxtb	r3, r3
    5dfc:	e7f0      	b.n	5de0 <sd_mmc_spi_adtc_start+0x48>
    5dfe:	3701      	adds	r7, #1
	while (size--) {
    5e00:	2f05      	cmp	r7, #5
    5e02:	d002      	beq.n	5e0a <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    5e04:	5c7e      	ldrb	r6, [r7, r1]
    5e06:	0010      	movs	r0, r2
    5e08:	e7f0      	b.n	5dec <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    5e0a:	005b      	lsls	r3, r3, #1
    5e0c:	2201      	movs	r2, #1
    5e0e:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    5e10:	ac04      	add	r4, sp, #16
    5e12:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    5e14:	4e3c      	ldr	r6, [pc, #240]	; (5f08 <sd_mmc_spi_adtc_start+0x170>)
    5e16:	2201      	movs	r2, #1
    5e18:	210f      	movs	r1, #15
    5e1a:	ab02      	add	r3, sp, #8
    5e1c:	469c      	mov	ip, r3
    5e1e:	4461      	add	r1, ip
    5e20:	0030      	movs	r0, r6
    5e22:	4f3a      	ldr	r7, [pc, #232]	; (5f0c <sd_mmc_spi_adtc_start+0x174>)
    5e24:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    5e26:	2206      	movs	r2, #6
    5e28:	0021      	movs	r1, r4
    5e2a:	0030      	movs	r0, r6
    5e2c:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    5e2e:	ab02      	add	r3, sp, #8
    5e30:	1dd9      	adds	r1, r3, #7
    5e32:	23ff      	movs	r3, #255	; 0xff
    5e34:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    5e36:	2201      	movs	r2, #1
    5e38:	0030      	movs	r0, r6
    5e3a:	4e35      	ldr	r6, [pc, #212]	; (5f10 <sd_mmc_spi_adtc_start+0x178>)
    5e3c:	47b0      	blx	r6
    5e3e:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    5e40:	ab02      	add	r3, sp, #8
    5e42:	1dde      	adds	r6, r3, #7
    5e44:	4f30      	ldr	r7, [pc, #192]	; (5f08 <sd_mmc_spi_adtc_start+0x170>)
    5e46:	4d32      	ldr	r5, [pc, #200]	; (5f10 <sd_mmc_spi_adtc_start+0x178>)
    5e48:	23ff      	movs	r3, #255	; 0xff
    5e4a:	2201      	movs	r2, #1
    5e4c:	0031      	movs	r1, r6
    5e4e:	0038      	movs	r0, r7
    5e50:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    5e52:	7833      	ldrb	r3, [r6, #0]
    5e54:	b25a      	sxtb	r2, r3
    5e56:	2a00      	cmp	r2, #0
    5e58:	da0b      	bge.n	5e72 <sd_mmc_spi_adtc_start+0xda>
    5e5a:	3c01      	subs	r4, #1
    5e5c:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    5e5e:	2c00      	cmp	r4, #0
    5e60:	d1f2      	bne.n	5e48 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    5e62:	2202      	movs	r2, #2
    5e64:	4b27      	ldr	r3, [pc, #156]	; (5f04 <sd_mmc_spi_adtc_start+0x16c>)
    5e66:	701a      	strb	r2, [r3, #0]
			return false;
    5e68:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    5e6a:	b006      	add	sp, #24
    5e6c:	bc04      	pop	{r2}
    5e6e:	4690      	mov	r8, r2
    5e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    5e72:	4a28      	ldr	r2, [pc, #160]	; (5f14 <sd_mmc_spi_adtc_start+0x17c>)
    5e74:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    5e76:	071a      	lsls	r2, r3, #28
    5e78:	d41a      	bmi.n	5eb0 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    5e7a:	075a      	lsls	r2, r3, #29
    5e7c:	d41d      	bmi.n	5eba <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    5e7e:	2201      	movs	r2, #1
    5e80:	4393      	bics	r3, r2
    5e82:	d11f      	bne.n	5ec4 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    5e84:	4643      	mov	r3, r8
    5e86:	049b      	lsls	r3, r3, #18
    5e88:	d420      	bmi.n	5ecc <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    5e8a:	4643      	mov	r3, r8
    5e8c:	059b      	lsls	r3, r3, #22
    5e8e:	d425      	bmi.n	5edc <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    5e90:	4643      	mov	r3, r8
    5e92:	055b      	lsls	r3, r3, #21
    5e94:	d42b      	bmi.n	5eee <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    5e96:	4b20      	ldr	r3, [pc, #128]	; (5f18 <sd_mmc_spi_adtc_start+0x180>)
    5e98:	466a      	mov	r2, sp
    5e9a:	8812      	ldrh	r2, [r2, #0]
    5e9c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    5e9e:	4b1f      	ldr	r3, [pc, #124]	; (5f1c <sd_mmc_spi_adtc_start+0x184>)
    5ea0:	466a      	mov	r2, sp
    5ea2:	8892      	ldrh	r2, [r2, #4]
    5ea4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    5ea6:	2200      	movs	r2, #0
    5ea8:	4b1d      	ldr	r3, [pc, #116]	; (5f20 <sd_mmc_spi_adtc_start+0x188>)
    5eaa:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    5eac:	2001      	movs	r0, #1
    5eae:	e7dc      	b.n	5e6a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    5eb0:	2206      	movs	r2, #6
    5eb2:	4b14      	ldr	r3, [pc, #80]	; (5f04 <sd_mmc_spi_adtc_start+0x16c>)
    5eb4:	701a      	strb	r2, [r3, #0]
		return false;
    5eb6:	2000      	movs	r0, #0
    5eb8:	e7d7      	b.n	5e6a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    5eba:	2209      	movs	r2, #9
    5ebc:	4b11      	ldr	r3, [pc, #68]	; (5f04 <sd_mmc_spi_adtc_start+0x16c>)
    5ebe:	701a      	strb	r2, [r3, #0]
		return false;
    5ec0:	2000      	movs	r0, #0
    5ec2:	e7d2      	b.n	5e6a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    5ec4:	4b0f      	ldr	r3, [pc, #60]	; (5f04 <sd_mmc_spi_adtc_start+0x16c>)
    5ec6:	701a      	strb	r2, [r3, #0]
		return false;
    5ec8:	2000      	movs	r0, #0
    5eca:	e7ce      	b.n	5e6a <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    5ecc:	4b15      	ldr	r3, [pc, #84]	; (5f24 <sd_mmc_spi_adtc_start+0x18c>)
    5ece:	4798      	blx	r3
    5ed0:	2800      	cmp	r0, #0
    5ed2:	d1da      	bne.n	5e8a <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    5ed4:	2203      	movs	r2, #3
    5ed6:	4b0b      	ldr	r3, [pc, #44]	; (5f04 <sd_mmc_spi_adtc_start+0x16c>)
    5ed8:	701a      	strb	r2, [r3, #0]
			return false;
    5eda:	e7c6      	b.n	5e6a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    5edc:	490d      	ldr	r1, [pc, #52]	; (5f14 <sd_mmc_spi_adtc_start+0x17c>)
    5ede:	2300      	movs	r3, #0
    5ee0:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    5ee2:	33ff      	adds	r3, #255	; 0xff
    5ee4:	2201      	movs	r2, #1
    5ee6:	4808      	ldr	r0, [pc, #32]	; (5f08 <sd_mmc_spi_adtc_start+0x170>)
    5ee8:	4e09      	ldr	r6, [pc, #36]	; (5f10 <sd_mmc_spi_adtc_start+0x178>)
    5eea:	47b0      	blx	r6
    5eec:	e7d0      	b.n	5e90 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    5eee:	4e09      	ldr	r6, [pc, #36]	; (5f14 <sd_mmc_spi_adtc_start+0x17c>)
    5ef0:	23ff      	movs	r3, #255	; 0xff
    5ef2:	2204      	movs	r2, #4
    5ef4:	0031      	movs	r1, r6
    5ef6:	4804      	ldr	r0, [pc, #16]	; (5f08 <sd_mmc_spi_adtc_start+0x170>)
    5ef8:	4f05      	ldr	r7, [pc, #20]	; (5f10 <sd_mmc_spi_adtc_start+0x178>)
    5efa:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    5efc:	6833      	ldr	r3, [r6, #0]
    5efe:	ba1b      	rev	r3, r3
    5f00:	6033      	str	r3, [r6, #0]
    5f02:	e7c8      	b.n	5e96 <sd_mmc_spi_adtc_start+0xfe>
    5f04:	200002cb 	.word	0x200002cb
    5f08:	200002b8 	.word	0x200002b8
    5f0c:	000055cd 	.word	0x000055cd
    5f10:	000053c1 	.word	0x000053c1
    5f14:	200002d0 	.word	0x200002d0
    5f18:	200002c4 	.word	0x200002c4
    5f1c:	200002cc 	.word	0x200002cc
    5f20:	200002d4 	.word	0x200002d4
    5f24:	00005a39 	.word	0x00005a39

00005f28 <sd_mmc_spi_send_cmd>:
{
    5f28:	b510      	push	{r4, lr}
    5f2a:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    5f2c:	2300      	movs	r3, #0
    5f2e:	9300      	str	r3, [sp, #0]
    5f30:	2200      	movs	r2, #0
    5f32:	4c02      	ldr	r4, [pc, #8]	; (5f3c <sd_mmc_spi_send_cmd+0x14>)
    5f34:	47a0      	blx	r4
}
    5f36:	b002      	add	sp, #8
    5f38:	bd10      	pop	{r4, pc}
    5f3a:	46c0      	nop			; (mov r8, r8)
    5f3c:	00005d99 	.word	0x00005d99

00005f40 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    5f40:	4b01      	ldr	r3, [pc, #4]	; (5f48 <sd_mmc_spi_get_response+0x8>)
    5f42:	6818      	ldr	r0, [r3, #0]
}
    5f44:	4770      	bx	lr
    5f46:	46c0      	nop			; (mov r8, r8)
    5f48:	200002d0 	.word	0x200002d0

00005f4c <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    5f4c:	b510      	push	{r4, lr}
    5f4e:	b084      	sub	sp, #16
    5f50:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5f52:	2200      	movs	r2, #0
    5f54:	4b14      	ldr	r3, [pc, #80]	; (5fa8 <sd_mmc_spi_read_word+0x5c>)
    5f56:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    5f58:	4b14      	ldr	r3, [pc, #80]	; (5fac <sd_mmc_spi_read_word+0x60>)
    5f5a:	8819      	ldrh	r1, [r3, #0]
    5f5c:	4b14      	ldr	r3, [pc, #80]	; (5fb0 <sd_mmc_spi_read_word+0x64>)
    5f5e:	6818      	ldr	r0, [r3, #0]
    5f60:	4b14      	ldr	r3, [pc, #80]	; (5fb4 <sd_mmc_spi_read_word+0x68>)
    5f62:	4798      	blx	r3
    5f64:	2900      	cmp	r1, #0
    5f66:	d103      	bne.n	5f70 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    5f68:	4b13      	ldr	r3, [pc, #76]	; (5fb8 <sd_mmc_spi_read_word+0x6c>)
    5f6a:	4798      	blx	r3
    5f6c:	2800      	cmp	r0, #0
    5f6e:	d010      	beq.n	5f92 <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    5f70:	23ff      	movs	r3, #255	; 0xff
    5f72:	2204      	movs	r2, #4
    5f74:	a901      	add	r1, sp, #4
    5f76:	4811      	ldr	r0, [pc, #68]	; (5fbc <sd_mmc_spi_read_word+0x70>)
    5f78:	4c11      	ldr	r4, [pc, #68]	; (5fc0 <sd_mmc_spi_read_word+0x74>)
    5f7a:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    5f7c:	4b0c      	ldr	r3, [pc, #48]	; (5fb0 <sd_mmc_spi_read_word+0x64>)
    5f7e:	681a      	ldr	r2, [r3, #0]
    5f80:	1d10      	adds	r0, r2, #4
    5f82:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    5f84:	4b09      	ldr	r3, [pc, #36]	; (5fac <sd_mmc_spi_read_word+0x60>)
    5f86:	8819      	ldrh	r1, [r3, #0]
    5f88:	4b0a      	ldr	r3, [pc, #40]	; (5fb4 <sd_mmc_spi_read_word+0x68>)
    5f8a:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    5f8c:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    5f8e:	2900      	cmp	r1, #0
    5f90:	d001      	beq.n	5f96 <sd_mmc_spi_read_word+0x4a>
}
    5f92:	b004      	add	sp, #16
    5f94:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    5f96:	23ff      	movs	r3, #255	; 0xff
    5f98:	2202      	movs	r2, #2
    5f9a:	a903      	add	r1, sp, #12
    5f9c:	4807      	ldr	r0, [pc, #28]	; (5fbc <sd_mmc_spi_read_word+0x70>)
    5f9e:	4c08      	ldr	r4, [pc, #32]	; (5fc0 <sd_mmc_spi_read_word+0x74>)
    5fa0:	47a0      	blx	r4
	return true;
    5fa2:	2001      	movs	r0, #1
    5fa4:	e7f5      	b.n	5f92 <sd_mmc_spi_read_word+0x46>
    5fa6:	46c0      	nop			; (mov r8, r8)
    5fa8:	200002cb 	.word	0x200002cb
    5fac:	200002c4 	.word	0x200002c4
    5fb0:	200002d4 	.word	0x200002d4
    5fb4:	00006871 	.word	0x00006871
    5fb8:	00005b15 	.word	0x00005b15
    5fbc:	200002b8 	.word	0x200002b8
    5fc0:	000053c1 	.word	0x000053c1

00005fc4 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    5fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fc6:	46de      	mov	lr, fp
    5fc8:	4657      	mov	r7, sl
    5fca:	4646      	mov	r6, r8
    5fcc:	b5c0      	push	{r6, r7, lr}
    5fce:	b082      	sub	sp, #8
    5fd0:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5fd2:	2200      	movs	r2, #0
    5fd4:	4b17      	ldr	r3, [pc, #92]	; (6034 <sd_mmc_spi_start_read_blocks+0x70>)
    5fd6:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    5fd8:	1e4c      	subs	r4, r1, #1
    5fda:	b2a4      	uxth	r4, r4
    5fdc:	2900      	cmp	r1, #0
    5fde:	d026      	beq.n	602e <sd_mmc_spi_start_read_blocks+0x6a>
    5fe0:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    5fe2:	4b15      	ldr	r3, [pc, #84]	; (6038 <sd_mmc_spi_start_read_blocks+0x74>)
    5fe4:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    5fe6:	4f15      	ldr	r7, [pc, #84]	; (603c <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    5fe8:	47d0      	blx	sl
    5fea:	4680      	mov	r8, r0
    5fec:	2800      	cmp	r0, #0
    5fee:	d017      	beq.n	6020 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    5ff0:	883a      	ldrh	r2, [r7, #0]
    5ff2:	465b      	mov	r3, fp
    5ff4:	1999      	adds	r1, r3, r6
    5ff6:	23ff      	movs	r3, #255	; 0xff
    5ff8:	4811      	ldr	r0, [pc, #68]	; (6040 <sd_mmc_spi_start_read_blocks+0x7c>)
    5ffa:	4d12      	ldr	r5, [pc, #72]	; (6044 <sd_mmc_spi_start_read_blocks+0x80>)
    5ffc:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    5ffe:	883b      	ldrh	r3, [r7, #0]
    6000:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    6002:	4a11      	ldr	r2, [pc, #68]	; (6048 <sd_mmc_spi_start_read_blocks+0x84>)
    6004:	6811      	ldr	r1, [r2, #0]
    6006:	468c      	mov	ip, r1
    6008:	4463      	add	r3, ip
    600a:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    600c:	23ff      	movs	r3, #255	; 0xff
    600e:	2202      	movs	r2, #2
    6010:	a901      	add	r1, sp, #4
    6012:	480b      	ldr	r0, [pc, #44]	; (6040 <sd_mmc_spi_start_read_blocks+0x7c>)
    6014:	47a8      	blx	r5
	while (nb_block--) {
    6016:	3c01      	subs	r4, #1
    6018:	b2a4      	uxth	r4, r4
    601a:	4b0c      	ldr	r3, [pc, #48]	; (604c <sd_mmc_spi_start_read_blocks+0x88>)
    601c:	429c      	cmp	r4, r3
    601e:	d1e3      	bne.n	5fe8 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    6020:	4640      	mov	r0, r8
    6022:	b002      	add	sp, #8
    6024:	bc1c      	pop	{r2, r3, r4}
    6026:	4690      	mov	r8, r2
    6028:	469a      	mov	sl, r3
    602a:	46a3      	mov	fp, r4
    602c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    602e:	2301      	movs	r3, #1
    6030:	4698      	mov	r8, r3
    6032:	e7f5      	b.n	6020 <sd_mmc_spi_start_read_blocks+0x5c>
    6034:	200002cb 	.word	0x200002cb
    6038:	00005b15 	.word	0x00005b15
    603c:	200002c4 	.word	0x200002c4
    6040:	200002b8 	.word	0x200002b8
    6044:	000053c1 	.word	0x000053c1
    6048:	200002d4 	.word	0x200002d4
    604c:	0000ffff 	.word	0x0000ffff

00006050 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    6050:	2001      	movs	r0, #1
    6052:	4770      	bx	lr

00006054 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    6054:	b5f0      	push	{r4, r5, r6, r7, lr}
    6056:	46c6      	mov	lr, r8
    6058:	b500      	push	{lr}
    605a:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    605c:	2200      	movs	r2, #0
    605e:	4b15      	ldr	r3, [pc, #84]	; (60b4 <sd_mmc_spi_start_write_blocks+0x60>)
    6060:	701a      	strb	r2, [r3, #0]
	pos = 0;
    6062:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    6064:	4f14      	ldr	r7, [pc, #80]	; (60b8 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    6066:	4e15      	ldr	r6, [pc, #84]	; (60bc <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    6068:	e000      	b.n	606c <sd_mmc_spi_start_write_blocks+0x18>
{
    606a:	0021      	movs	r1, r4
	while (nb_block--) {
    606c:	1e4c      	subs	r4, r1, #1
    606e:	b2a4      	uxth	r4, r4
    6070:	2900      	cmp	r1, #0
    6072:	d01b      	beq.n	60ac <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    6074:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    6076:	8832      	ldrh	r2, [r6, #0]
    6078:	4643      	mov	r3, r8
    607a:	1959      	adds	r1, r3, r5
    607c:	4810      	ldr	r0, [pc, #64]	; (60c0 <sd_mmc_spi_start_write_blocks+0x6c>)
    607e:	4b11      	ldr	r3, [pc, #68]	; (60c4 <sd_mmc_spi_start_write_blocks+0x70>)
    6080:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    6082:	8833      	ldrh	r3, [r6, #0]
    6084:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    6086:	4a10      	ldr	r2, [pc, #64]	; (60c8 <sd_mmc_spi_start_write_blocks+0x74>)
    6088:	6811      	ldr	r1, [r2, #0]
    608a:	468c      	mov	ip, r1
    608c:	4463      	add	r3, ip
    608e:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    6090:	4b0e      	ldr	r3, [pc, #56]	; (60cc <sd_mmc_spi_start_write_blocks+0x78>)
    6092:	4798      	blx	r3
    6094:	2800      	cmp	r0, #0
    6096:	d00a      	beq.n	60ae <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    6098:	2c00      	cmp	r4, #0
    609a:	d0e6      	beq.n	606a <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    609c:	4b0c      	ldr	r3, [pc, #48]	; (60d0 <sd_mmc_spi_start_write_blocks+0x7c>)
    609e:	4798      	blx	r3
    60a0:	2800      	cmp	r0, #0
    60a2:	d1e2      	bne.n	606a <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    60a4:	2205      	movs	r2, #5
    60a6:	4b03      	ldr	r3, [pc, #12]	; (60b4 <sd_mmc_spi_start_write_blocks+0x60>)
    60a8:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    60aa:	e000      	b.n	60ae <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    60ac:	2001      	movs	r0, #1
}
    60ae:	bc04      	pop	{r2}
    60b0:	4690      	mov	r8, r2
    60b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60b4:	200002cb 	.word	0x200002cb
    60b8:	000059f1 	.word	0x000059f1
    60bc:	200002c4 	.word	0x200002c4
    60c0:	200002b8 	.word	0x200002b8
    60c4:	000055cd 	.word	0x000055cd
    60c8:	200002d4 	.word	0x200002d4
    60cc:	00005b81 	.word	0x00005b81
    60d0:	00005a39 	.word	0x00005a39

000060d4 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    60d4:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    60d6:	4b05      	ldr	r3, [pc, #20]	; (60ec <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    60d8:	4798      	blx	r3
    60da:	2800      	cmp	r0, #0
    60dc:	d103      	bne.n	60e6 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    60de:	2205      	movs	r2, #5
    60e0:	4b03      	ldr	r3, [pc, #12]	; (60f0 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    60e2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    60e4:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    60e6:	4b03      	ldr	r3, [pc, #12]	; (60f4 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    60e8:	4798      	blx	r3
    60ea:	e7fb      	b.n	60e4 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    60ec:	00005a39 	.word	0x00005a39
    60f0:	200002cb 	.word	0x200002cb
    60f4:	00005a9d 	.word	0x00005a9d

000060f8 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
    60f8:	2001      	movs	r0, #1
    60fa:	4770      	bx	lr

000060fc <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    60fc:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    60fe:	2301      	movs	r3, #1
    6100:	2800      	cmp	r0, #0
    6102:	d001      	beq.n	6108 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    6104:	0018      	movs	r0, r3
    6106:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    6108:	4b01      	ldr	r3, [pc, #4]	; (6110 <mem_test_unit_ready+0x14>)
    610a:	4798      	blx	r3
    610c:	0003      	movs	r3, r0
    610e:	e7f9      	b.n	6104 <mem_test_unit_ready+0x8>
    6110:	00005821 	.word	0x00005821

00006114 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    6114:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    6116:	2301      	movs	r3, #1
    6118:	2800      	cmp	r0, #0
    611a:	d001      	beq.n	6120 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    611c:	0018      	movs	r0, r3
    611e:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    6120:	0008      	movs	r0, r1
    6122:	4b02      	ldr	r3, [pc, #8]	; (612c <mem_read_capacity+0x18>)
    6124:	4798      	blx	r3
    6126:	0003      	movs	r3, r0
    6128:	e7f8      	b.n	611c <mem_read_capacity+0x8>
    612a:	46c0      	nop			; (mov r8, r8)
    612c:	00005851 	.word	0x00005851

00006130 <mem_unload>:
  return sector_size;
}


bool mem_unload(U8 lun, bool unload)
{
    6130:	0003      	movs	r3, r0

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    6132:	2000      	movs	r0, #0
    6134:	2b00      	cmp	r3, #0
    6136:	d101      	bne.n	613c <mem_unload+0xc>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
    6138:	3001      	adds	r0, #1
    613a:	4048      	eors	r0, r1
#endif

  Ctrl_access_unlock();

  return unloaded;
}
    613c:	4770      	bx	lr
	...

00006140 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    6140:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    6142:	2301      	movs	r3, #1
    6144:	2800      	cmp	r0, #0
    6146:	d001      	beq.n	614c <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    6148:	0018      	movs	r0, r3
    614a:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    614c:	4b01      	ldr	r3, [pc, #4]	; (6154 <mem_wr_protect+0x14>)
    614e:	4798      	blx	r3
    6150:	0003      	movs	r3, r0
    6152:	e7f9      	b.n	6148 <mem_wr_protect+0x8>
    6154:	00005861 	.word	0x00005861

00006158 <mem_removal>:


bool mem_removal(U8 lun)
{
    6158:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    615a:	2301      	movs	r3, #1
    615c:	2800      	cmp	r0, #0
    615e:	d001      	beq.n	6164 <mem_removal+0xc>
#endif

  Ctrl_access_unlock();

  return removal;
}
    6160:	0018      	movs	r0, r3
    6162:	bd10      	pop	{r4, pc}
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    6164:	4b01      	ldr	r3, [pc, #4]	; (616c <mem_removal+0x14>)
    6166:	4798      	blx	r3
    6168:	0003      	movs	r3, r0
    616a:	e7f9      	b.n	6160 <mem_removal+0x8>
    616c:	00005871 	.word	0x00005871

00006170 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    6170:	2800      	cmp	r0, #0
    6172:	d101      	bne.n	6178 <mem_name+0x8>
    6174:	4801      	ldr	r0, [pc, #4]	; (617c <mem_name+0xc>)
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    6176:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
    6178:	2000      	movs	r0, #0
    617a:	e7fc      	b.n	6176 <mem_name+0x6>
    617c:	000077dc 	.word	0x000077dc

00006180 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
    6180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6182:	0005      	movs	r5, r0
    6184:	000e      	movs	r6, r1
    6186:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
    6188:	4b07      	ldr	r3, [pc, #28]	; (61a8 <memory_2_usb+0x28>)
    618a:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    618c:	2401      	movs	r4, #1
    618e:	2d00      	cmp	r5, #0
    6190:	d003      	beq.n	619a <memory_2_usb+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
    6192:	4b06      	ldr	r3, [pc, #24]	; (61ac <memory_2_usb+0x2c>)
    6194:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    6196:	0020      	movs	r0, r4
    6198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    619a:	0039      	movs	r1, r7
    619c:	0030      	movs	r0, r6
    619e:	4b04      	ldr	r3, [pc, #16]	; (61b0 <memory_2_usb+0x30>)
    61a0:	4798      	blx	r3
    61a2:	0004      	movs	r4, r0
    61a4:	e7f5      	b.n	6192 <memory_2_usb+0x12>
    61a6:	46c0      	nop			; (mov r8, r8)
    61a8:	00003d0d 	.word	0x00003d0d
    61ac:	00003d0f 	.word	0x00003d0f
    61b0:	00005925 	.word	0x00005925

000061b4 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
    61b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61b6:	0005      	movs	r5, r0
    61b8:	000e      	movs	r6, r1
    61ba:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
    61bc:	4b07      	ldr	r3, [pc, #28]	; (61dc <usb_2_memory+0x28>)
    61be:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    61c0:	2401      	movs	r4, #1
    61c2:	2d00      	cmp	r5, #0
    61c4:	d003      	beq.n	61ce <usb_2_memory+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
    61c6:	4b06      	ldr	r3, [pc, #24]	; (61e0 <usb_2_memory+0x2c>)
    61c8:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    61ca:	0020      	movs	r0, r4
    61cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    61ce:	0039      	movs	r1, r7
    61d0:	0030      	movs	r0, r6
    61d2:	4b04      	ldr	r3, [pc, #16]	; (61e4 <usb_2_memory+0x30>)
    61d4:	4798      	blx	r3
    61d6:	0004      	movs	r4, r0
    61d8:	e7f5      	b.n	61c6 <usb_2_memory+0x12>
    61da:	46c0      	nop			; (mov r8, r8)
    61dc:	00003d11 	.word	0x00003d11
    61e0:	00003d13 	.word	0x00003d13
    61e4:	000059dd 	.word	0x000059dd

000061e8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    61e8:	4b0c      	ldr	r3, [pc, #48]	; (621c <cpu_irq_enter_critical+0x34>)
    61ea:	681b      	ldr	r3, [r3, #0]
    61ec:	2b00      	cmp	r3, #0
    61ee:	d106      	bne.n	61fe <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    61f0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    61f4:	2b00      	cmp	r3, #0
    61f6:	d007      	beq.n	6208 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    61f8:	2200      	movs	r2, #0
    61fa:	4b09      	ldr	r3, [pc, #36]	; (6220 <cpu_irq_enter_critical+0x38>)
    61fc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    61fe:	4a07      	ldr	r2, [pc, #28]	; (621c <cpu_irq_enter_critical+0x34>)
    6200:	6813      	ldr	r3, [r2, #0]
    6202:	3301      	adds	r3, #1
    6204:	6013      	str	r3, [r2, #0]
}
    6206:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    6208:	b672      	cpsid	i
  __ASM volatile ("dmb");
    620a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    620e:	2200      	movs	r2, #0
    6210:	4b04      	ldr	r3, [pc, #16]	; (6224 <cpu_irq_enter_critical+0x3c>)
    6212:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    6214:	3201      	adds	r2, #1
    6216:	4b02      	ldr	r3, [pc, #8]	; (6220 <cpu_irq_enter_critical+0x38>)
    6218:	701a      	strb	r2, [r3, #0]
    621a:	e7f0      	b.n	61fe <cpu_irq_enter_critical+0x16>
    621c:	200002dc 	.word	0x200002dc
    6220:	200002e0 	.word	0x200002e0
    6224:	200000f9 	.word	0x200000f9

00006228 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    6228:	4b08      	ldr	r3, [pc, #32]	; (624c <cpu_irq_leave_critical+0x24>)
    622a:	681a      	ldr	r2, [r3, #0]
    622c:	3a01      	subs	r2, #1
    622e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    6230:	681b      	ldr	r3, [r3, #0]
    6232:	2b00      	cmp	r3, #0
    6234:	d109      	bne.n	624a <cpu_irq_leave_critical+0x22>
    6236:	4b06      	ldr	r3, [pc, #24]	; (6250 <cpu_irq_leave_critical+0x28>)
    6238:	781b      	ldrb	r3, [r3, #0]
    623a:	2b00      	cmp	r3, #0
    623c:	d005      	beq.n	624a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    623e:	2201      	movs	r2, #1
    6240:	4b04      	ldr	r3, [pc, #16]	; (6254 <cpu_irq_leave_critical+0x2c>)
    6242:	701a      	strb	r2, [r3, #0]
    6244:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    6248:	b662      	cpsie	i
	}
}
    624a:	4770      	bx	lr
    624c:	200002dc 	.word	0x200002dc
    6250:	200002e0 	.word	0x200002e0
    6254:	200000f9 	.word	0x200000f9

00006258 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    6258:	b5f0      	push	{r4, r5, r6, r7, lr}
    625a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    625c:	ac01      	add	r4, sp, #4
    625e:	2501      	movs	r5, #1
    6260:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    6262:	2700      	movs	r7, #0
    6264:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6266:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    6268:	0021      	movs	r1, r4
    626a:	203e      	movs	r0, #62	; 0x3e
    626c:	4e06      	ldr	r6, [pc, #24]	; (6288 <system_board_init+0x30>)
    626e:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    6270:	2280      	movs	r2, #128	; 0x80
    6272:	05d2      	lsls	r2, r2, #23
    6274:	4b05      	ldr	r3, [pc, #20]	; (628c <system_board_init+0x34>)
    6276:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    6278:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    627a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    627c:	0021      	movs	r1, r4
    627e:	200f      	movs	r0, #15
    6280:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    6282:	b003      	add	sp, #12
    6284:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6286:	46c0      	nop			; (mov r8, r8)
    6288:	00006291 	.word	0x00006291
    628c:	41004480 	.word	0x41004480

00006290 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    6290:	b500      	push	{lr}
    6292:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6294:	ab01      	add	r3, sp, #4
    6296:	2280      	movs	r2, #128	; 0x80
    6298:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    629a:	780a      	ldrb	r2, [r1, #0]
    629c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    629e:	784a      	ldrb	r2, [r1, #1]
    62a0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    62a2:	788a      	ldrb	r2, [r1, #2]
    62a4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    62a6:	0019      	movs	r1, r3
    62a8:	4b01      	ldr	r3, [pc, #4]	; (62b0 <port_pin_set_config+0x20>)
    62aa:	4798      	blx	r3
}
    62ac:	b003      	add	sp, #12
    62ae:	bd00      	pop	{pc}
    62b0:	000065e5 	.word	0x000065e5

000062b4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    62b4:	4a06      	ldr	r2, [pc, #24]	; (62d0 <system_gclk_init+0x1c>)
    62b6:	6993      	ldr	r3, [r2, #24]
    62b8:	2108      	movs	r1, #8
    62ba:	430b      	orrs	r3, r1
    62bc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    62be:	2201      	movs	r2, #1
    62c0:	4b04      	ldr	r3, [pc, #16]	; (62d4 <system_gclk_init+0x20>)
    62c2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    62c4:	0019      	movs	r1, r3
    62c6:	780b      	ldrb	r3, [r1, #0]
    62c8:	4213      	tst	r3, r2
    62ca:	d1fc      	bne.n	62c6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    62cc:	4770      	bx	lr
    62ce:	46c0      	nop			; (mov r8, r8)
    62d0:	40000400 	.word	0x40000400
    62d4:	40000c00 	.word	0x40000c00

000062d8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    62d8:	b570      	push	{r4, r5, r6, lr}
    62da:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    62dc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    62de:	780d      	ldrb	r5, [r1, #0]
    62e0:	022d      	lsls	r5, r5, #8
    62e2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    62e4:	784b      	ldrb	r3, [r1, #1]
    62e6:	2b00      	cmp	r3, #0
    62e8:	d002      	beq.n	62f0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    62ea:	2380      	movs	r3, #128	; 0x80
    62ec:	02db      	lsls	r3, r3, #11
    62ee:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    62f0:	7a4b      	ldrb	r3, [r1, #9]
    62f2:	2b00      	cmp	r3, #0
    62f4:	d002      	beq.n	62fc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    62f6:	2380      	movs	r3, #128	; 0x80
    62f8:	031b      	lsls	r3, r3, #12
    62fa:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    62fc:	6848      	ldr	r0, [r1, #4]
    62fe:	2801      	cmp	r0, #1
    6300:	d910      	bls.n	6324 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6302:	1e43      	subs	r3, r0, #1
    6304:	4218      	tst	r0, r3
    6306:	d134      	bne.n	6372 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6308:	2802      	cmp	r0, #2
    630a:	d930      	bls.n	636e <system_gclk_gen_set_config+0x96>
    630c:	2302      	movs	r3, #2
    630e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    6310:	3201      	adds	r2, #1
						mask <<= 1) {
    6312:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    6314:	4298      	cmp	r0, r3
    6316:	d8fb      	bhi.n	6310 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6318:	0212      	lsls	r2, r2, #8
    631a:	4332      	orrs	r2, r6
    631c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    631e:	2380      	movs	r3, #128	; 0x80
    6320:	035b      	lsls	r3, r3, #13
    6322:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6324:	7a0b      	ldrb	r3, [r1, #8]
    6326:	2b00      	cmp	r3, #0
    6328:	d002      	beq.n	6330 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    632a:	2380      	movs	r3, #128	; 0x80
    632c:	039b      	lsls	r3, r3, #14
    632e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6330:	4a13      	ldr	r2, [pc, #76]	; (6380 <system_gclk_gen_set_config+0xa8>)
    6332:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    6334:	b25b      	sxtb	r3, r3
    6336:	2b00      	cmp	r3, #0
    6338:	dbfb      	blt.n	6332 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    633a:	4b12      	ldr	r3, [pc, #72]	; (6384 <system_gclk_gen_set_config+0xac>)
    633c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    633e:	4b12      	ldr	r3, [pc, #72]	; (6388 <system_gclk_gen_set_config+0xb0>)
    6340:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6342:	4a0f      	ldr	r2, [pc, #60]	; (6380 <system_gclk_gen_set_config+0xa8>)
    6344:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6346:	b25b      	sxtb	r3, r3
    6348:	2b00      	cmp	r3, #0
    634a:	dbfb      	blt.n	6344 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    634c:	4b0c      	ldr	r3, [pc, #48]	; (6380 <system_gclk_gen_set_config+0xa8>)
    634e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6350:	001a      	movs	r2, r3
    6352:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    6354:	b25b      	sxtb	r3, r3
    6356:	2b00      	cmp	r3, #0
    6358:	dbfb      	blt.n	6352 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    635a:	4a09      	ldr	r2, [pc, #36]	; (6380 <system_gclk_gen_set_config+0xa8>)
    635c:	6853      	ldr	r3, [r2, #4]
    635e:	2180      	movs	r1, #128	; 0x80
    6360:	0249      	lsls	r1, r1, #9
    6362:	400b      	ands	r3, r1
    6364:	431d      	orrs	r5, r3
    6366:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    6368:	4b08      	ldr	r3, [pc, #32]	; (638c <system_gclk_gen_set_config+0xb4>)
    636a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    636c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    636e:	2200      	movs	r2, #0
    6370:	e7d2      	b.n	6318 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6372:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    6374:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6376:	2380      	movs	r3, #128	; 0x80
    6378:	029b      	lsls	r3, r3, #10
    637a:	431d      	orrs	r5, r3
    637c:	e7d2      	b.n	6324 <system_gclk_gen_set_config+0x4c>
    637e:	46c0      	nop			; (mov r8, r8)
    6380:	40000c00 	.word	0x40000c00
    6384:	000061e9 	.word	0x000061e9
    6388:	40000c08 	.word	0x40000c08
    638c:	00006229 	.word	0x00006229

00006390 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6390:	b510      	push	{r4, lr}
    6392:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6394:	4a0b      	ldr	r2, [pc, #44]	; (63c4 <system_gclk_gen_enable+0x34>)
    6396:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6398:	b25b      	sxtb	r3, r3
    639a:	2b00      	cmp	r3, #0
    639c:	dbfb      	blt.n	6396 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    639e:	4b0a      	ldr	r3, [pc, #40]	; (63c8 <system_gclk_gen_enable+0x38>)
    63a0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    63a2:	4b0a      	ldr	r3, [pc, #40]	; (63cc <system_gclk_gen_enable+0x3c>)
    63a4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    63a6:	4a07      	ldr	r2, [pc, #28]	; (63c4 <system_gclk_gen_enable+0x34>)
    63a8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    63aa:	b25b      	sxtb	r3, r3
    63ac:	2b00      	cmp	r3, #0
    63ae:	dbfb      	blt.n	63a8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    63b0:	4a04      	ldr	r2, [pc, #16]	; (63c4 <system_gclk_gen_enable+0x34>)
    63b2:	6851      	ldr	r1, [r2, #4]
    63b4:	2380      	movs	r3, #128	; 0x80
    63b6:	025b      	lsls	r3, r3, #9
    63b8:	430b      	orrs	r3, r1
    63ba:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    63bc:	4b04      	ldr	r3, [pc, #16]	; (63d0 <system_gclk_gen_enable+0x40>)
    63be:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    63c0:	bd10      	pop	{r4, pc}
    63c2:	46c0      	nop			; (mov r8, r8)
    63c4:	40000c00 	.word	0x40000c00
    63c8:	000061e9 	.word	0x000061e9
    63cc:	40000c04 	.word	0x40000c04
    63d0:	00006229 	.word	0x00006229

000063d4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    63d4:	b570      	push	{r4, r5, r6, lr}
    63d6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    63d8:	4a1a      	ldr	r2, [pc, #104]	; (6444 <system_gclk_gen_get_hz+0x70>)
    63da:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    63dc:	b25b      	sxtb	r3, r3
    63de:	2b00      	cmp	r3, #0
    63e0:	dbfb      	blt.n	63da <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    63e2:	4b19      	ldr	r3, [pc, #100]	; (6448 <system_gclk_gen_get_hz+0x74>)
    63e4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    63e6:	4b19      	ldr	r3, [pc, #100]	; (644c <system_gclk_gen_get_hz+0x78>)
    63e8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    63ea:	4a16      	ldr	r2, [pc, #88]	; (6444 <system_gclk_gen_get_hz+0x70>)
    63ec:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    63ee:	b25b      	sxtb	r3, r3
    63f0:	2b00      	cmp	r3, #0
    63f2:	dbfb      	blt.n	63ec <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    63f4:	4e13      	ldr	r6, [pc, #76]	; (6444 <system_gclk_gen_get_hz+0x70>)
    63f6:	6870      	ldr	r0, [r6, #4]
    63f8:	04c0      	lsls	r0, r0, #19
    63fa:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    63fc:	4b14      	ldr	r3, [pc, #80]	; (6450 <system_gclk_gen_get_hz+0x7c>)
    63fe:	4798      	blx	r3
    6400:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6402:	4b12      	ldr	r3, [pc, #72]	; (644c <system_gclk_gen_get_hz+0x78>)
    6404:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6406:	6876      	ldr	r6, [r6, #4]
    6408:	02f6      	lsls	r6, r6, #11
    640a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    640c:	4b11      	ldr	r3, [pc, #68]	; (6454 <system_gclk_gen_get_hz+0x80>)
    640e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6410:	4a0c      	ldr	r2, [pc, #48]	; (6444 <system_gclk_gen_get_hz+0x70>)
    6412:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6414:	b25b      	sxtb	r3, r3
    6416:	2b00      	cmp	r3, #0
    6418:	dbfb      	blt.n	6412 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    641a:	4b0a      	ldr	r3, [pc, #40]	; (6444 <system_gclk_gen_get_hz+0x70>)
    641c:	689c      	ldr	r4, [r3, #8]
    641e:	0224      	lsls	r4, r4, #8
    6420:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    6422:	4b0d      	ldr	r3, [pc, #52]	; (6458 <system_gclk_gen_get_hz+0x84>)
    6424:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6426:	2e00      	cmp	r6, #0
    6428:	d107      	bne.n	643a <system_gclk_gen_get_hz+0x66>
    642a:	2c01      	cmp	r4, #1
    642c:	d907      	bls.n	643e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    642e:	0021      	movs	r1, r4
    6430:	0028      	movs	r0, r5
    6432:	4b0a      	ldr	r3, [pc, #40]	; (645c <system_gclk_gen_get_hz+0x88>)
    6434:	4798      	blx	r3
    6436:	0005      	movs	r5, r0
    6438:	e001      	b.n	643e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    643a:	3401      	adds	r4, #1
    643c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    643e:	0028      	movs	r0, r5
    6440:	bd70      	pop	{r4, r5, r6, pc}
    6442:	46c0      	nop			; (mov r8, r8)
    6444:	40000c00 	.word	0x40000c00
    6448:	000061e9 	.word	0x000061e9
    644c:	40000c04 	.word	0x40000c04
    6450:	000024c5 	.word	0x000024c5
    6454:	40000c08 	.word	0x40000c08
    6458:	00006229 	.word	0x00006229
    645c:	00006765 	.word	0x00006765

00006460 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6460:	b510      	push	{r4, lr}
    6462:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6464:	4b06      	ldr	r3, [pc, #24]	; (6480 <system_gclk_chan_enable+0x20>)
    6466:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6468:	4b06      	ldr	r3, [pc, #24]	; (6484 <system_gclk_chan_enable+0x24>)
    646a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    646c:	4a06      	ldr	r2, [pc, #24]	; (6488 <system_gclk_chan_enable+0x28>)
    646e:	8853      	ldrh	r3, [r2, #2]
    6470:	2180      	movs	r1, #128	; 0x80
    6472:	01c9      	lsls	r1, r1, #7
    6474:	430b      	orrs	r3, r1
    6476:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    6478:	4b04      	ldr	r3, [pc, #16]	; (648c <system_gclk_chan_enable+0x2c>)
    647a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    647c:	bd10      	pop	{r4, pc}
    647e:	46c0      	nop			; (mov r8, r8)
    6480:	000061e9 	.word	0x000061e9
    6484:	40000c02 	.word	0x40000c02
    6488:	40000c00 	.word	0x40000c00
    648c:	00006229 	.word	0x00006229

00006490 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6490:	b510      	push	{r4, lr}
    6492:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6494:	4b0f      	ldr	r3, [pc, #60]	; (64d4 <system_gclk_chan_disable+0x44>)
    6496:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6498:	4b0f      	ldr	r3, [pc, #60]	; (64d8 <system_gclk_chan_disable+0x48>)
    649a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    649c:	4a0f      	ldr	r2, [pc, #60]	; (64dc <system_gclk_chan_disable+0x4c>)
    649e:	8853      	ldrh	r3, [r2, #2]
    64a0:	051b      	lsls	r3, r3, #20
    64a2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    64a4:	8853      	ldrh	r3, [r2, #2]
    64a6:	490e      	ldr	r1, [pc, #56]	; (64e0 <system_gclk_chan_disable+0x50>)
    64a8:	400b      	ands	r3, r1
    64aa:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    64ac:	8853      	ldrh	r3, [r2, #2]
    64ae:	490d      	ldr	r1, [pc, #52]	; (64e4 <system_gclk_chan_disable+0x54>)
    64b0:	400b      	ands	r3, r1
    64b2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    64b4:	0011      	movs	r1, r2
    64b6:	2280      	movs	r2, #128	; 0x80
    64b8:	01d2      	lsls	r2, r2, #7
    64ba:	884b      	ldrh	r3, [r1, #2]
    64bc:	4213      	tst	r3, r2
    64be:	d1fc      	bne.n	64ba <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    64c0:	4906      	ldr	r1, [pc, #24]	; (64dc <system_gclk_chan_disable+0x4c>)
    64c2:	884a      	ldrh	r2, [r1, #2]
    64c4:	0203      	lsls	r3, r0, #8
    64c6:	4806      	ldr	r0, [pc, #24]	; (64e0 <system_gclk_chan_disable+0x50>)
    64c8:	4002      	ands	r2, r0
    64ca:	4313      	orrs	r3, r2
    64cc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    64ce:	4b06      	ldr	r3, [pc, #24]	; (64e8 <system_gclk_chan_disable+0x58>)
    64d0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    64d2:	bd10      	pop	{r4, pc}
    64d4:	000061e9 	.word	0x000061e9
    64d8:	40000c02 	.word	0x40000c02
    64dc:	40000c00 	.word	0x40000c00
    64e0:	fffff0ff 	.word	0xfffff0ff
    64e4:	ffffbfff 	.word	0xffffbfff
    64e8:	00006229 	.word	0x00006229

000064ec <system_gclk_chan_set_config>:
{
    64ec:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    64ee:	780c      	ldrb	r4, [r1, #0]
    64f0:	0224      	lsls	r4, r4, #8
    64f2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    64f4:	4b02      	ldr	r3, [pc, #8]	; (6500 <system_gclk_chan_set_config+0x14>)
    64f6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    64f8:	b2a4      	uxth	r4, r4
    64fa:	4b02      	ldr	r3, [pc, #8]	; (6504 <system_gclk_chan_set_config+0x18>)
    64fc:	805c      	strh	r4, [r3, #2]
}
    64fe:	bd10      	pop	{r4, pc}
    6500:	00006491 	.word	0x00006491
    6504:	40000c00 	.word	0x40000c00

00006508 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6508:	b510      	push	{r4, lr}
    650a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    650c:	4b06      	ldr	r3, [pc, #24]	; (6528 <system_gclk_chan_get_hz+0x20>)
    650e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6510:	4b06      	ldr	r3, [pc, #24]	; (652c <system_gclk_chan_get_hz+0x24>)
    6512:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6514:	4b06      	ldr	r3, [pc, #24]	; (6530 <system_gclk_chan_get_hz+0x28>)
    6516:	885c      	ldrh	r4, [r3, #2]
    6518:	0524      	lsls	r4, r4, #20
    651a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    651c:	4b05      	ldr	r3, [pc, #20]	; (6534 <system_gclk_chan_get_hz+0x2c>)
    651e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6520:	0020      	movs	r0, r4
    6522:	4b05      	ldr	r3, [pc, #20]	; (6538 <system_gclk_chan_get_hz+0x30>)
    6524:	4798      	blx	r3
}
    6526:	bd10      	pop	{r4, pc}
    6528:	000061e9 	.word	0x000061e9
    652c:	40000c02 	.word	0x40000c02
    6530:	40000c00 	.word	0x40000c00
    6534:	00006229 	.word	0x00006229
    6538:	000063d5 	.word	0x000063d5

0000653c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    653c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    653e:	78d3      	ldrb	r3, [r2, #3]
    6540:	2b00      	cmp	r3, #0
    6542:	d135      	bne.n	65b0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6544:	7813      	ldrb	r3, [r2, #0]
    6546:	2b80      	cmp	r3, #128	; 0x80
    6548:	d029      	beq.n	659e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    654a:	061b      	lsls	r3, r3, #24
    654c:	2480      	movs	r4, #128	; 0x80
    654e:	0264      	lsls	r4, r4, #9
    6550:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6552:	7854      	ldrb	r4, [r2, #1]
    6554:	2502      	movs	r5, #2
    6556:	43ac      	bics	r4, r5
    6558:	d106      	bne.n	6568 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    655a:	7894      	ldrb	r4, [r2, #2]
    655c:	2c00      	cmp	r4, #0
    655e:	d120      	bne.n	65a2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6560:	2480      	movs	r4, #128	; 0x80
    6562:	02a4      	lsls	r4, r4, #10
    6564:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6566:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6568:	7854      	ldrb	r4, [r2, #1]
    656a:	3c01      	subs	r4, #1
    656c:	2c01      	cmp	r4, #1
    656e:	d91c      	bls.n	65aa <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6570:	040d      	lsls	r5, r1, #16
    6572:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6574:	24a0      	movs	r4, #160	; 0xa0
    6576:	05e4      	lsls	r4, r4, #23
    6578:	432c      	orrs	r4, r5
    657a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    657c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    657e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6580:	24d0      	movs	r4, #208	; 0xd0
    6582:	0624      	lsls	r4, r4, #24
    6584:	432c      	orrs	r4, r5
    6586:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6588:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    658a:	78d4      	ldrb	r4, [r2, #3]
    658c:	2c00      	cmp	r4, #0
    658e:	d122      	bne.n	65d6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6590:	035b      	lsls	r3, r3, #13
    6592:	d51c      	bpl.n	65ce <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6594:	7893      	ldrb	r3, [r2, #2]
    6596:	2b01      	cmp	r3, #1
    6598:	d01e      	beq.n	65d8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    659a:	6141      	str	r1, [r0, #20]
    659c:	e017      	b.n	65ce <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    659e:	2300      	movs	r3, #0
    65a0:	e7d7      	b.n	6552 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    65a2:	24c0      	movs	r4, #192	; 0xc0
    65a4:	02e4      	lsls	r4, r4, #11
    65a6:	4323      	orrs	r3, r4
    65a8:	e7dd      	b.n	6566 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    65aa:	4c0d      	ldr	r4, [pc, #52]	; (65e0 <_system_pinmux_config+0xa4>)
    65ac:	4023      	ands	r3, r4
    65ae:	e7df      	b.n	6570 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    65b0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    65b2:	040c      	lsls	r4, r1, #16
    65b4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    65b6:	23a0      	movs	r3, #160	; 0xa0
    65b8:	05db      	lsls	r3, r3, #23
    65ba:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    65bc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    65be:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    65c0:	23d0      	movs	r3, #208	; 0xd0
    65c2:	061b      	lsls	r3, r3, #24
    65c4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    65c6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    65c8:	78d3      	ldrb	r3, [r2, #3]
    65ca:	2b00      	cmp	r3, #0
    65cc:	d103      	bne.n	65d6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    65ce:	7853      	ldrb	r3, [r2, #1]
    65d0:	3b01      	subs	r3, #1
    65d2:	2b01      	cmp	r3, #1
    65d4:	d902      	bls.n	65dc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    65d6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    65d8:	6181      	str	r1, [r0, #24]
    65da:	e7f8      	b.n	65ce <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    65dc:	6081      	str	r1, [r0, #8]
}
    65de:	e7fa      	b.n	65d6 <_system_pinmux_config+0x9a>
    65e0:	fffbffff 	.word	0xfffbffff

000065e4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    65e4:	b510      	push	{r4, lr}
    65e6:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    65e8:	09c1      	lsrs	r1, r0, #7
		return NULL;
    65ea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    65ec:	2900      	cmp	r1, #0
    65ee:	d104      	bne.n	65fa <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    65f0:	0943      	lsrs	r3, r0, #5
    65f2:	01db      	lsls	r3, r3, #7
    65f4:	4905      	ldr	r1, [pc, #20]	; (660c <system_pinmux_pin_set_config+0x28>)
    65f6:	468c      	mov	ip, r1
    65f8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    65fa:	241f      	movs	r4, #31
    65fc:	4020      	ands	r0, r4
    65fe:	2101      	movs	r1, #1
    6600:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    6602:	0018      	movs	r0, r3
    6604:	4b02      	ldr	r3, [pc, #8]	; (6610 <system_pinmux_pin_set_config+0x2c>)
    6606:	4798      	blx	r3
}
    6608:	bd10      	pop	{r4, pc}
    660a:	46c0      	nop			; (mov r8, r8)
    660c:	41004400 	.word	0x41004400
    6610:	0000653d 	.word	0x0000653d

00006614 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6614:	4770      	bx	lr
	...

00006618 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6618:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    661a:	4b05      	ldr	r3, [pc, #20]	; (6630 <system_init+0x18>)
    661c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    661e:	4b05      	ldr	r3, [pc, #20]	; (6634 <system_init+0x1c>)
    6620:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6622:	4b05      	ldr	r3, [pc, #20]	; (6638 <system_init+0x20>)
    6624:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6626:	4b05      	ldr	r3, [pc, #20]	; (663c <system_init+0x24>)
    6628:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    662a:	4b05      	ldr	r3, [pc, #20]	; (6640 <system_init+0x28>)
    662c:	4798      	blx	r3
}
    662e:	bd10      	pop	{r4, pc}
    6630:	00002741 	.word	0x00002741
    6634:	00006259 	.word	0x00006259
    6638:	00006615 	.word	0x00006615
    663c:	00001d89 	.word	0x00001d89
    6640:	00006615 	.word	0x00006615

00006644 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6644:	e7fe      	b.n	6644 <Dummy_Handler>
	...

00006648 <Reset_Handler>:
{
    6648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    664a:	4a2a      	ldr	r2, [pc, #168]	; (66f4 <Reset_Handler+0xac>)
    664c:	4b2a      	ldr	r3, [pc, #168]	; (66f8 <Reset_Handler+0xb0>)
    664e:	429a      	cmp	r2, r3
    6650:	d011      	beq.n	6676 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    6652:	001a      	movs	r2, r3
    6654:	4b29      	ldr	r3, [pc, #164]	; (66fc <Reset_Handler+0xb4>)
    6656:	429a      	cmp	r2, r3
    6658:	d20d      	bcs.n	6676 <Reset_Handler+0x2e>
    665a:	4a29      	ldr	r2, [pc, #164]	; (6700 <Reset_Handler+0xb8>)
    665c:	3303      	adds	r3, #3
    665e:	1a9b      	subs	r3, r3, r2
    6660:	089b      	lsrs	r3, r3, #2
    6662:	3301      	adds	r3, #1
    6664:	009b      	lsls	r3, r3, #2
    6666:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    6668:	4823      	ldr	r0, [pc, #140]	; (66f8 <Reset_Handler+0xb0>)
    666a:	4922      	ldr	r1, [pc, #136]	; (66f4 <Reset_Handler+0xac>)
    666c:	588c      	ldr	r4, [r1, r2]
    666e:	5084      	str	r4, [r0, r2]
    6670:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    6672:	429a      	cmp	r2, r3
    6674:	d1fa      	bne.n	666c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    6676:	4a23      	ldr	r2, [pc, #140]	; (6704 <Reset_Handler+0xbc>)
    6678:	4b23      	ldr	r3, [pc, #140]	; (6708 <Reset_Handler+0xc0>)
    667a:	429a      	cmp	r2, r3
    667c:	d20a      	bcs.n	6694 <Reset_Handler+0x4c>
    667e:	43d3      	mvns	r3, r2
    6680:	4921      	ldr	r1, [pc, #132]	; (6708 <Reset_Handler+0xc0>)
    6682:	185b      	adds	r3, r3, r1
    6684:	2103      	movs	r1, #3
    6686:	438b      	bics	r3, r1
    6688:	3304      	adds	r3, #4
    668a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    668c:	2100      	movs	r1, #0
    668e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6690:	4293      	cmp	r3, r2
    6692:	d1fc      	bne.n	668e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6694:	4a1d      	ldr	r2, [pc, #116]	; (670c <Reset_Handler+0xc4>)
    6696:	21ff      	movs	r1, #255	; 0xff
    6698:	4b1d      	ldr	r3, [pc, #116]	; (6710 <Reset_Handler+0xc8>)
    669a:	438b      	bics	r3, r1
    669c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    669e:	39fd      	subs	r1, #253	; 0xfd
    66a0:	2390      	movs	r3, #144	; 0x90
    66a2:	005b      	lsls	r3, r3, #1
    66a4:	4a1b      	ldr	r2, [pc, #108]	; (6714 <Reset_Handler+0xcc>)
    66a6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    66a8:	4a1b      	ldr	r2, [pc, #108]	; (6718 <Reset_Handler+0xd0>)
    66aa:	78d3      	ldrb	r3, [r2, #3]
    66ac:	2503      	movs	r5, #3
    66ae:	43ab      	bics	r3, r5
    66b0:	2402      	movs	r4, #2
    66b2:	4323      	orrs	r3, r4
    66b4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    66b6:	78d3      	ldrb	r3, [r2, #3]
    66b8:	270c      	movs	r7, #12
    66ba:	43bb      	bics	r3, r7
    66bc:	2608      	movs	r6, #8
    66be:	4333      	orrs	r3, r6
    66c0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    66c2:	4b16      	ldr	r3, [pc, #88]	; (671c <Reset_Handler+0xd4>)
    66c4:	7b98      	ldrb	r0, [r3, #14]
    66c6:	2230      	movs	r2, #48	; 0x30
    66c8:	4390      	bics	r0, r2
    66ca:	2220      	movs	r2, #32
    66cc:	4310      	orrs	r0, r2
    66ce:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    66d0:	7b99      	ldrb	r1, [r3, #14]
    66d2:	43b9      	bics	r1, r7
    66d4:	4331      	orrs	r1, r6
    66d6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    66d8:	7b9a      	ldrb	r2, [r3, #14]
    66da:	43aa      	bics	r2, r5
    66dc:	4322      	orrs	r2, r4
    66de:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    66e0:	4a0f      	ldr	r2, [pc, #60]	; (6720 <Reset_Handler+0xd8>)
    66e2:	6853      	ldr	r3, [r2, #4]
    66e4:	2180      	movs	r1, #128	; 0x80
    66e6:	430b      	orrs	r3, r1
    66e8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    66ea:	4b0e      	ldr	r3, [pc, #56]	; (6724 <Reset_Handler+0xdc>)
    66ec:	4798      	blx	r3
        main();
    66ee:	4b0e      	ldr	r3, [pc, #56]	; (6728 <Reset_Handler+0xe0>)
    66f0:	4798      	blx	r3
    66f2:	e7fe      	b.n	66f2 <Reset_Handler+0xaa>
    66f4:	00007880 	.word	0x00007880
    66f8:	20000000 	.word	0x20000000
    66fc:	20000160 	.word	0x20000160
    6700:	20000004 	.word	0x20000004
    6704:	20000160 	.word	0x20000160
    6708:	20000af4 	.word	0x20000af4
    670c:	e000ed00 	.word	0xe000ed00
    6710:	00000000 	.word	0x00000000
    6714:	41007000 	.word	0x41007000
    6718:	41005000 	.word	0x41005000
    671c:	41004800 	.word	0x41004800
    6720:	41004000 	.word	0x41004000
    6724:	00006cf9 	.word	0x00006cf9
    6728:	00003709 	.word	0x00003709

0000672c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    672c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    672e:	4a06      	ldr	r2, [pc, #24]	; (6748 <_sbrk+0x1c>)
    6730:	6812      	ldr	r2, [r2, #0]
    6732:	2a00      	cmp	r2, #0
    6734:	d004      	beq.n	6740 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    6736:	4a04      	ldr	r2, [pc, #16]	; (6748 <_sbrk+0x1c>)
    6738:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    673a:	18c3      	adds	r3, r0, r3
    673c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    673e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6740:	4902      	ldr	r1, [pc, #8]	; (674c <_sbrk+0x20>)
    6742:	4a01      	ldr	r2, [pc, #4]	; (6748 <_sbrk+0x1c>)
    6744:	6011      	str	r1, [r2, #0]
    6746:	e7f6      	b.n	6736 <_sbrk+0xa>
    6748:	200002e4 	.word	0x200002e4
    674c:	20002af8 	.word	0x20002af8

00006750 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    6750:	2001      	movs	r0, #1
    6752:	4240      	negs	r0, r0
    6754:	4770      	bx	lr

00006756 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    6756:	2380      	movs	r3, #128	; 0x80
    6758:	019b      	lsls	r3, r3, #6
    675a:	604b      	str	r3, [r1, #4]

	return 0;
}
    675c:	2000      	movs	r0, #0
    675e:	4770      	bx	lr

00006760 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    6760:	2000      	movs	r0, #0
    6762:	4770      	bx	lr

00006764 <__udivsi3>:
    6764:	2200      	movs	r2, #0
    6766:	0843      	lsrs	r3, r0, #1
    6768:	428b      	cmp	r3, r1
    676a:	d374      	bcc.n	6856 <__udivsi3+0xf2>
    676c:	0903      	lsrs	r3, r0, #4
    676e:	428b      	cmp	r3, r1
    6770:	d35f      	bcc.n	6832 <__udivsi3+0xce>
    6772:	0a03      	lsrs	r3, r0, #8
    6774:	428b      	cmp	r3, r1
    6776:	d344      	bcc.n	6802 <__udivsi3+0x9e>
    6778:	0b03      	lsrs	r3, r0, #12
    677a:	428b      	cmp	r3, r1
    677c:	d328      	bcc.n	67d0 <__udivsi3+0x6c>
    677e:	0c03      	lsrs	r3, r0, #16
    6780:	428b      	cmp	r3, r1
    6782:	d30d      	bcc.n	67a0 <__udivsi3+0x3c>
    6784:	22ff      	movs	r2, #255	; 0xff
    6786:	0209      	lsls	r1, r1, #8
    6788:	ba12      	rev	r2, r2
    678a:	0c03      	lsrs	r3, r0, #16
    678c:	428b      	cmp	r3, r1
    678e:	d302      	bcc.n	6796 <__udivsi3+0x32>
    6790:	1212      	asrs	r2, r2, #8
    6792:	0209      	lsls	r1, r1, #8
    6794:	d065      	beq.n	6862 <__udivsi3+0xfe>
    6796:	0b03      	lsrs	r3, r0, #12
    6798:	428b      	cmp	r3, r1
    679a:	d319      	bcc.n	67d0 <__udivsi3+0x6c>
    679c:	e000      	b.n	67a0 <__udivsi3+0x3c>
    679e:	0a09      	lsrs	r1, r1, #8
    67a0:	0bc3      	lsrs	r3, r0, #15
    67a2:	428b      	cmp	r3, r1
    67a4:	d301      	bcc.n	67aa <__udivsi3+0x46>
    67a6:	03cb      	lsls	r3, r1, #15
    67a8:	1ac0      	subs	r0, r0, r3
    67aa:	4152      	adcs	r2, r2
    67ac:	0b83      	lsrs	r3, r0, #14
    67ae:	428b      	cmp	r3, r1
    67b0:	d301      	bcc.n	67b6 <__udivsi3+0x52>
    67b2:	038b      	lsls	r3, r1, #14
    67b4:	1ac0      	subs	r0, r0, r3
    67b6:	4152      	adcs	r2, r2
    67b8:	0b43      	lsrs	r3, r0, #13
    67ba:	428b      	cmp	r3, r1
    67bc:	d301      	bcc.n	67c2 <__udivsi3+0x5e>
    67be:	034b      	lsls	r3, r1, #13
    67c0:	1ac0      	subs	r0, r0, r3
    67c2:	4152      	adcs	r2, r2
    67c4:	0b03      	lsrs	r3, r0, #12
    67c6:	428b      	cmp	r3, r1
    67c8:	d301      	bcc.n	67ce <__udivsi3+0x6a>
    67ca:	030b      	lsls	r3, r1, #12
    67cc:	1ac0      	subs	r0, r0, r3
    67ce:	4152      	adcs	r2, r2
    67d0:	0ac3      	lsrs	r3, r0, #11
    67d2:	428b      	cmp	r3, r1
    67d4:	d301      	bcc.n	67da <__udivsi3+0x76>
    67d6:	02cb      	lsls	r3, r1, #11
    67d8:	1ac0      	subs	r0, r0, r3
    67da:	4152      	adcs	r2, r2
    67dc:	0a83      	lsrs	r3, r0, #10
    67de:	428b      	cmp	r3, r1
    67e0:	d301      	bcc.n	67e6 <__udivsi3+0x82>
    67e2:	028b      	lsls	r3, r1, #10
    67e4:	1ac0      	subs	r0, r0, r3
    67e6:	4152      	adcs	r2, r2
    67e8:	0a43      	lsrs	r3, r0, #9
    67ea:	428b      	cmp	r3, r1
    67ec:	d301      	bcc.n	67f2 <__udivsi3+0x8e>
    67ee:	024b      	lsls	r3, r1, #9
    67f0:	1ac0      	subs	r0, r0, r3
    67f2:	4152      	adcs	r2, r2
    67f4:	0a03      	lsrs	r3, r0, #8
    67f6:	428b      	cmp	r3, r1
    67f8:	d301      	bcc.n	67fe <__udivsi3+0x9a>
    67fa:	020b      	lsls	r3, r1, #8
    67fc:	1ac0      	subs	r0, r0, r3
    67fe:	4152      	adcs	r2, r2
    6800:	d2cd      	bcs.n	679e <__udivsi3+0x3a>
    6802:	09c3      	lsrs	r3, r0, #7
    6804:	428b      	cmp	r3, r1
    6806:	d301      	bcc.n	680c <__udivsi3+0xa8>
    6808:	01cb      	lsls	r3, r1, #7
    680a:	1ac0      	subs	r0, r0, r3
    680c:	4152      	adcs	r2, r2
    680e:	0983      	lsrs	r3, r0, #6
    6810:	428b      	cmp	r3, r1
    6812:	d301      	bcc.n	6818 <__udivsi3+0xb4>
    6814:	018b      	lsls	r3, r1, #6
    6816:	1ac0      	subs	r0, r0, r3
    6818:	4152      	adcs	r2, r2
    681a:	0943      	lsrs	r3, r0, #5
    681c:	428b      	cmp	r3, r1
    681e:	d301      	bcc.n	6824 <__udivsi3+0xc0>
    6820:	014b      	lsls	r3, r1, #5
    6822:	1ac0      	subs	r0, r0, r3
    6824:	4152      	adcs	r2, r2
    6826:	0903      	lsrs	r3, r0, #4
    6828:	428b      	cmp	r3, r1
    682a:	d301      	bcc.n	6830 <__udivsi3+0xcc>
    682c:	010b      	lsls	r3, r1, #4
    682e:	1ac0      	subs	r0, r0, r3
    6830:	4152      	adcs	r2, r2
    6832:	08c3      	lsrs	r3, r0, #3
    6834:	428b      	cmp	r3, r1
    6836:	d301      	bcc.n	683c <__udivsi3+0xd8>
    6838:	00cb      	lsls	r3, r1, #3
    683a:	1ac0      	subs	r0, r0, r3
    683c:	4152      	adcs	r2, r2
    683e:	0883      	lsrs	r3, r0, #2
    6840:	428b      	cmp	r3, r1
    6842:	d301      	bcc.n	6848 <__udivsi3+0xe4>
    6844:	008b      	lsls	r3, r1, #2
    6846:	1ac0      	subs	r0, r0, r3
    6848:	4152      	adcs	r2, r2
    684a:	0843      	lsrs	r3, r0, #1
    684c:	428b      	cmp	r3, r1
    684e:	d301      	bcc.n	6854 <__udivsi3+0xf0>
    6850:	004b      	lsls	r3, r1, #1
    6852:	1ac0      	subs	r0, r0, r3
    6854:	4152      	adcs	r2, r2
    6856:	1a41      	subs	r1, r0, r1
    6858:	d200      	bcs.n	685c <__udivsi3+0xf8>
    685a:	4601      	mov	r1, r0
    685c:	4152      	adcs	r2, r2
    685e:	4610      	mov	r0, r2
    6860:	4770      	bx	lr
    6862:	e7ff      	b.n	6864 <__udivsi3+0x100>
    6864:	b501      	push	{r0, lr}
    6866:	2000      	movs	r0, #0
    6868:	f000 f8f0 	bl	6a4c <__aeabi_idiv0>
    686c:	bd02      	pop	{r1, pc}
    686e:	46c0      	nop			; (mov r8, r8)

00006870 <__aeabi_uidivmod>:
    6870:	2900      	cmp	r1, #0
    6872:	d0f7      	beq.n	6864 <__udivsi3+0x100>
    6874:	e776      	b.n	6764 <__udivsi3>
    6876:	4770      	bx	lr

00006878 <__divsi3>:
    6878:	4603      	mov	r3, r0
    687a:	430b      	orrs	r3, r1
    687c:	d47f      	bmi.n	697e <__divsi3+0x106>
    687e:	2200      	movs	r2, #0
    6880:	0843      	lsrs	r3, r0, #1
    6882:	428b      	cmp	r3, r1
    6884:	d374      	bcc.n	6970 <__divsi3+0xf8>
    6886:	0903      	lsrs	r3, r0, #4
    6888:	428b      	cmp	r3, r1
    688a:	d35f      	bcc.n	694c <__divsi3+0xd4>
    688c:	0a03      	lsrs	r3, r0, #8
    688e:	428b      	cmp	r3, r1
    6890:	d344      	bcc.n	691c <__divsi3+0xa4>
    6892:	0b03      	lsrs	r3, r0, #12
    6894:	428b      	cmp	r3, r1
    6896:	d328      	bcc.n	68ea <__divsi3+0x72>
    6898:	0c03      	lsrs	r3, r0, #16
    689a:	428b      	cmp	r3, r1
    689c:	d30d      	bcc.n	68ba <__divsi3+0x42>
    689e:	22ff      	movs	r2, #255	; 0xff
    68a0:	0209      	lsls	r1, r1, #8
    68a2:	ba12      	rev	r2, r2
    68a4:	0c03      	lsrs	r3, r0, #16
    68a6:	428b      	cmp	r3, r1
    68a8:	d302      	bcc.n	68b0 <__divsi3+0x38>
    68aa:	1212      	asrs	r2, r2, #8
    68ac:	0209      	lsls	r1, r1, #8
    68ae:	d065      	beq.n	697c <__divsi3+0x104>
    68b0:	0b03      	lsrs	r3, r0, #12
    68b2:	428b      	cmp	r3, r1
    68b4:	d319      	bcc.n	68ea <__divsi3+0x72>
    68b6:	e000      	b.n	68ba <__divsi3+0x42>
    68b8:	0a09      	lsrs	r1, r1, #8
    68ba:	0bc3      	lsrs	r3, r0, #15
    68bc:	428b      	cmp	r3, r1
    68be:	d301      	bcc.n	68c4 <__divsi3+0x4c>
    68c0:	03cb      	lsls	r3, r1, #15
    68c2:	1ac0      	subs	r0, r0, r3
    68c4:	4152      	adcs	r2, r2
    68c6:	0b83      	lsrs	r3, r0, #14
    68c8:	428b      	cmp	r3, r1
    68ca:	d301      	bcc.n	68d0 <__divsi3+0x58>
    68cc:	038b      	lsls	r3, r1, #14
    68ce:	1ac0      	subs	r0, r0, r3
    68d0:	4152      	adcs	r2, r2
    68d2:	0b43      	lsrs	r3, r0, #13
    68d4:	428b      	cmp	r3, r1
    68d6:	d301      	bcc.n	68dc <__divsi3+0x64>
    68d8:	034b      	lsls	r3, r1, #13
    68da:	1ac0      	subs	r0, r0, r3
    68dc:	4152      	adcs	r2, r2
    68de:	0b03      	lsrs	r3, r0, #12
    68e0:	428b      	cmp	r3, r1
    68e2:	d301      	bcc.n	68e8 <__divsi3+0x70>
    68e4:	030b      	lsls	r3, r1, #12
    68e6:	1ac0      	subs	r0, r0, r3
    68e8:	4152      	adcs	r2, r2
    68ea:	0ac3      	lsrs	r3, r0, #11
    68ec:	428b      	cmp	r3, r1
    68ee:	d301      	bcc.n	68f4 <__divsi3+0x7c>
    68f0:	02cb      	lsls	r3, r1, #11
    68f2:	1ac0      	subs	r0, r0, r3
    68f4:	4152      	adcs	r2, r2
    68f6:	0a83      	lsrs	r3, r0, #10
    68f8:	428b      	cmp	r3, r1
    68fa:	d301      	bcc.n	6900 <__divsi3+0x88>
    68fc:	028b      	lsls	r3, r1, #10
    68fe:	1ac0      	subs	r0, r0, r3
    6900:	4152      	adcs	r2, r2
    6902:	0a43      	lsrs	r3, r0, #9
    6904:	428b      	cmp	r3, r1
    6906:	d301      	bcc.n	690c <__divsi3+0x94>
    6908:	024b      	lsls	r3, r1, #9
    690a:	1ac0      	subs	r0, r0, r3
    690c:	4152      	adcs	r2, r2
    690e:	0a03      	lsrs	r3, r0, #8
    6910:	428b      	cmp	r3, r1
    6912:	d301      	bcc.n	6918 <__divsi3+0xa0>
    6914:	020b      	lsls	r3, r1, #8
    6916:	1ac0      	subs	r0, r0, r3
    6918:	4152      	adcs	r2, r2
    691a:	d2cd      	bcs.n	68b8 <__divsi3+0x40>
    691c:	09c3      	lsrs	r3, r0, #7
    691e:	428b      	cmp	r3, r1
    6920:	d301      	bcc.n	6926 <__divsi3+0xae>
    6922:	01cb      	lsls	r3, r1, #7
    6924:	1ac0      	subs	r0, r0, r3
    6926:	4152      	adcs	r2, r2
    6928:	0983      	lsrs	r3, r0, #6
    692a:	428b      	cmp	r3, r1
    692c:	d301      	bcc.n	6932 <__divsi3+0xba>
    692e:	018b      	lsls	r3, r1, #6
    6930:	1ac0      	subs	r0, r0, r3
    6932:	4152      	adcs	r2, r2
    6934:	0943      	lsrs	r3, r0, #5
    6936:	428b      	cmp	r3, r1
    6938:	d301      	bcc.n	693e <__divsi3+0xc6>
    693a:	014b      	lsls	r3, r1, #5
    693c:	1ac0      	subs	r0, r0, r3
    693e:	4152      	adcs	r2, r2
    6940:	0903      	lsrs	r3, r0, #4
    6942:	428b      	cmp	r3, r1
    6944:	d301      	bcc.n	694a <__divsi3+0xd2>
    6946:	010b      	lsls	r3, r1, #4
    6948:	1ac0      	subs	r0, r0, r3
    694a:	4152      	adcs	r2, r2
    694c:	08c3      	lsrs	r3, r0, #3
    694e:	428b      	cmp	r3, r1
    6950:	d301      	bcc.n	6956 <__divsi3+0xde>
    6952:	00cb      	lsls	r3, r1, #3
    6954:	1ac0      	subs	r0, r0, r3
    6956:	4152      	adcs	r2, r2
    6958:	0883      	lsrs	r3, r0, #2
    695a:	428b      	cmp	r3, r1
    695c:	d301      	bcc.n	6962 <__divsi3+0xea>
    695e:	008b      	lsls	r3, r1, #2
    6960:	1ac0      	subs	r0, r0, r3
    6962:	4152      	adcs	r2, r2
    6964:	0843      	lsrs	r3, r0, #1
    6966:	428b      	cmp	r3, r1
    6968:	d301      	bcc.n	696e <__divsi3+0xf6>
    696a:	004b      	lsls	r3, r1, #1
    696c:	1ac0      	subs	r0, r0, r3
    696e:	4152      	adcs	r2, r2
    6970:	1a41      	subs	r1, r0, r1
    6972:	d200      	bcs.n	6976 <__divsi3+0xfe>
    6974:	4601      	mov	r1, r0
    6976:	4152      	adcs	r2, r2
    6978:	4610      	mov	r0, r2
    697a:	4770      	bx	lr
    697c:	e05d      	b.n	6a3a <__divsi3+0x1c2>
    697e:	0fca      	lsrs	r2, r1, #31
    6980:	d000      	beq.n	6984 <__divsi3+0x10c>
    6982:	4249      	negs	r1, r1
    6984:	1003      	asrs	r3, r0, #32
    6986:	d300      	bcc.n	698a <__divsi3+0x112>
    6988:	4240      	negs	r0, r0
    698a:	4053      	eors	r3, r2
    698c:	2200      	movs	r2, #0
    698e:	469c      	mov	ip, r3
    6990:	0903      	lsrs	r3, r0, #4
    6992:	428b      	cmp	r3, r1
    6994:	d32d      	bcc.n	69f2 <__divsi3+0x17a>
    6996:	0a03      	lsrs	r3, r0, #8
    6998:	428b      	cmp	r3, r1
    699a:	d312      	bcc.n	69c2 <__divsi3+0x14a>
    699c:	22fc      	movs	r2, #252	; 0xfc
    699e:	0189      	lsls	r1, r1, #6
    69a0:	ba12      	rev	r2, r2
    69a2:	0a03      	lsrs	r3, r0, #8
    69a4:	428b      	cmp	r3, r1
    69a6:	d30c      	bcc.n	69c2 <__divsi3+0x14a>
    69a8:	0189      	lsls	r1, r1, #6
    69aa:	1192      	asrs	r2, r2, #6
    69ac:	428b      	cmp	r3, r1
    69ae:	d308      	bcc.n	69c2 <__divsi3+0x14a>
    69b0:	0189      	lsls	r1, r1, #6
    69b2:	1192      	asrs	r2, r2, #6
    69b4:	428b      	cmp	r3, r1
    69b6:	d304      	bcc.n	69c2 <__divsi3+0x14a>
    69b8:	0189      	lsls	r1, r1, #6
    69ba:	d03a      	beq.n	6a32 <__divsi3+0x1ba>
    69bc:	1192      	asrs	r2, r2, #6
    69be:	e000      	b.n	69c2 <__divsi3+0x14a>
    69c0:	0989      	lsrs	r1, r1, #6
    69c2:	09c3      	lsrs	r3, r0, #7
    69c4:	428b      	cmp	r3, r1
    69c6:	d301      	bcc.n	69cc <__divsi3+0x154>
    69c8:	01cb      	lsls	r3, r1, #7
    69ca:	1ac0      	subs	r0, r0, r3
    69cc:	4152      	adcs	r2, r2
    69ce:	0983      	lsrs	r3, r0, #6
    69d0:	428b      	cmp	r3, r1
    69d2:	d301      	bcc.n	69d8 <__divsi3+0x160>
    69d4:	018b      	lsls	r3, r1, #6
    69d6:	1ac0      	subs	r0, r0, r3
    69d8:	4152      	adcs	r2, r2
    69da:	0943      	lsrs	r3, r0, #5
    69dc:	428b      	cmp	r3, r1
    69de:	d301      	bcc.n	69e4 <__divsi3+0x16c>
    69e0:	014b      	lsls	r3, r1, #5
    69e2:	1ac0      	subs	r0, r0, r3
    69e4:	4152      	adcs	r2, r2
    69e6:	0903      	lsrs	r3, r0, #4
    69e8:	428b      	cmp	r3, r1
    69ea:	d301      	bcc.n	69f0 <__divsi3+0x178>
    69ec:	010b      	lsls	r3, r1, #4
    69ee:	1ac0      	subs	r0, r0, r3
    69f0:	4152      	adcs	r2, r2
    69f2:	08c3      	lsrs	r3, r0, #3
    69f4:	428b      	cmp	r3, r1
    69f6:	d301      	bcc.n	69fc <__divsi3+0x184>
    69f8:	00cb      	lsls	r3, r1, #3
    69fa:	1ac0      	subs	r0, r0, r3
    69fc:	4152      	adcs	r2, r2
    69fe:	0883      	lsrs	r3, r0, #2
    6a00:	428b      	cmp	r3, r1
    6a02:	d301      	bcc.n	6a08 <__divsi3+0x190>
    6a04:	008b      	lsls	r3, r1, #2
    6a06:	1ac0      	subs	r0, r0, r3
    6a08:	4152      	adcs	r2, r2
    6a0a:	d2d9      	bcs.n	69c0 <__divsi3+0x148>
    6a0c:	0843      	lsrs	r3, r0, #1
    6a0e:	428b      	cmp	r3, r1
    6a10:	d301      	bcc.n	6a16 <__divsi3+0x19e>
    6a12:	004b      	lsls	r3, r1, #1
    6a14:	1ac0      	subs	r0, r0, r3
    6a16:	4152      	adcs	r2, r2
    6a18:	1a41      	subs	r1, r0, r1
    6a1a:	d200      	bcs.n	6a1e <__divsi3+0x1a6>
    6a1c:	4601      	mov	r1, r0
    6a1e:	4663      	mov	r3, ip
    6a20:	4152      	adcs	r2, r2
    6a22:	105b      	asrs	r3, r3, #1
    6a24:	4610      	mov	r0, r2
    6a26:	d301      	bcc.n	6a2c <__divsi3+0x1b4>
    6a28:	4240      	negs	r0, r0
    6a2a:	2b00      	cmp	r3, #0
    6a2c:	d500      	bpl.n	6a30 <__divsi3+0x1b8>
    6a2e:	4249      	negs	r1, r1
    6a30:	4770      	bx	lr
    6a32:	4663      	mov	r3, ip
    6a34:	105b      	asrs	r3, r3, #1
    6a36:	d300      	bcc.n	6a3a <__divsi3+0x1c2>
    6a38:	4240      	negs	r0, r0
    6a3a:	b501      	push	{r0, lr}
    6a3c:	2000      	movs	r0, #0
    6a3e:	f000 f805 	bl	6a4c <__aeabi_idiv0>
    6a42:	bd02      	pop	{r1, pc}

00006a44 <__aeabi_idivmod>:
    6a44:	2900      	cmp	r1, #0
    6a46:	d0f8      	beq.n	6a3a <__divsi3+0x1c2>
    6a48:	e716      	b.n	6878 <__divsi3>
    6a4a:	4770      	bx	lr

00006a4c <__aeabi_idiv0>:
    6a4c:	4770      	bx	lr
    6a4e:	46c0      	nop			; (mov r8, r8)

00006a50 <__clzsi2>:
    6a50:	211c      	movs	r1, #28
    6a52:	2301      	movs	r3, #1
    6a54:	041b      	lsls	r3, r3, #16
    6a56:	4298      	cmp	r0, r3
    6a58:	d301      	bcc.n	6a5e <__clzsi2+0xe>
    6a5a:	0c00      	lsrs	r0, r0, #16
    6a5c:	3910      	subs	r1, #16
    6a5e:	0a1b      	lsrs	r3, r3, #8
    6a60:	4298      	cmp	r0, r3
    6a62:	d301      	bcc.n	6a68 <__clzsi2+0x18>
    6a64:	0a00      	lsrs	r0, r0, #8
    6a66:	3908      	subs	r1, #8
    6a68:	091b      	lsrs	r3, r3, #4
    6a6a:	4298      	cmp	r0, r3
    6a6c:	d301      	bcc.n	6a72 <__clzsi2+0x22>
    6a6e:	0900      	lsrs	r0, r0, #4
    6a70:	3904      	subs	r1, #4
    6a72:	a202      	add	r2, pc, #8	; (adr r2, 6a7c <__clzsi2+0x2c>)
    6a74:	5c10      	ldrb	r0, [r2, r0]
    6a76:	1840      	adds	r0, r0, r1
    6a78:	4770      	bx	lr
    6a7a:	46c0      	nop			; (mov r8, r8)
    6a7c:	02020304 	.word	0x02020304
    6a80:	01010101 	.word	0x01010101
	...

00006a8c <__ctzsi2>:
    6a8c:	4241      	negs	r1, r0
    6a8e:	4008      	ands	r0, r1
    6a90:	211c      	movs	r1, #28
    6a92:	2301      	movs	r3, #1
    6a94:	041b      	lsls	r3, r3, #16
    6a96:	4298      	cmp	r0, r3
    6a98:	d301      	bcc.n	6a9e <__ctzsi2+0x12>
    6a9a:	0c00      	lsrs	r0, r0, #16
    6a9c:	3910      	subs	r1, #16
    6a9e:	0a1b      	lsrs	r3, r3, #8
    6aa0:	4298      	cmp	r0, r3
    6aa2:	d301      	bcc.n	6aa8 <__ctzsi2+0x1c>
    6aa4:	0a00      	lsrs	r0, r0, #8
    6aa6:	3908      	subs	r1, #8
    6aa8:	091b      	lsrs	r3, r3, #4
    6aaa:	4298      	cmp	r0, r3
    6aac:	d301      	bcc.n	6ab2 <__ctzsi2+0x26>
    6aae:	0900      	lsrs	r0, r0, #4
    6ab0:	3904      	subs	r1, #4
    6ab2:	a202      	add	r2, pc, #8	; (adr r2, 6abc <__ctzsi2+0x30>)
    6ab4:	5c10      	ldrb	r0, [r2, r0]
    6ab6:	1a40      	subs	r0, r0, r1
    6ab8:	4770      	bx	lr
    6aba:	46c0      	nop			; (mov r8, r8)
    6abc:	1d1d1c1b 	.word	0x1d1d1c1b
    6ac0:	1e1e1e1e 	.word	0x1e1e1e1e
    6ac4:	1f1f1f1f 	.word	0x1f1f1f1f
    6ac8:	1f1f1f1f 	.word	0x1f1f1f1f

00006acc <__aeabi_uldivmod>:
    6acc:	2b00      	cmp	r3, #0
    6ace:	d111      	bne.n	6af4 <__aeabi_uldivmod+0x28>
    6ad0:	2a00      	cmp	r2, #0
    6ad2:	d10f      	bne.n	6af4 <__aeabi_uldivmod+0x28>
    6ad4:	2900      	cmp	r1, #0
    6ad6:	d100      	bne.n	6ada <__aeabi_uldivmod+0xe>
    6ad8:	2800      	cmp	r0, #0
    6ada:	d002      	beq.n	6ae2 <__aeabi_uldivmod+0x16>
    6adc:	2100      	movs	r1, #0
    6ade:	43c9      	mvns	r1, r1
    6ae0:	1c08      	adds	r0, r1, #0
    6ae2:	b407      	push	{r0, r1, r2}
    6ae4:	4802      	ldr	r0, [pc, #8]	; (6af0 <__aeabi_uldivmod+0x24>)
    6ae6:	a102      	add	r1, pc, #8	; (adr r1, 6af0 <__aeabi_uldivmod+0x24>)
    6ae8:	1840      	adds	r0, r0, r1
    6aea:	9002      	str	r0, [sp, #8]
    6aec:	bd03      	pop	{r0, r1, pc}
    6aee:	46c0      	nop			; (mov r8, r8)
    6af0:	ffffff5d 	.word	0xffffff5d
    6af4:	b403      	push	{r0, r1}
    6af6:	4668      	mov	r0, sp
    6af8:	b501      	push	{r0, lr}
    6afa:	9802      	ldr	r0, [sp, #8]
    6afc:	f000 f830 	bl	6b60 <__udivmoddi4>
    6b00:	9b01      	ldr	r3, [sp, #4]
    6b02:	469e      	mov	lr, r3
    6b04:	b002      	add	sp, #8
    6b06:	bc0c      	pop	{r2, r3}
    6b08:	4770      	bx	lr
    6b0a:	46c0      	nop			; (mov r8, r8)

00006b0c <__aeabi_lmul>:
    6b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b0e:	46ce      	mov	lr, r9
    6b10:	4647      	mov	r7, r8
    6b12:	0415      	lsls	r5, r2, #16
    6b14:	0c2d      	lsrs	r5, r5, #16
    6b16:	002e      	movs	r6, r5
    6b18:	b580      	push	{r7, lr}
    6b1a:	0407      	lsls	r7, r0, #16
    6b1c:	0c14      	lsrs	r4, r2, #16
    6b1e:	0c3f      	lsrs	r7, r7, #16
    6b20:	4699      	mov	r9, r3
    6b22:	0c03      	lsrs	r3, r0, #16
    6b24:	437e      	muls	r6, r7
    6b26:	435d      	muls	r5, r3
    6b28:	4367      	muls	r7, r4
    6b2a:	4363      	muls	r3, r4
    6b2c:	197f      	adds	r7, r7, r5
    6b2e:	0c34      	lsrs	r4, r6, #16
    6b30:	19e4      	adds	r4, r4, r7
    6b32:	469c      	mov	ip, r3
    6b34:	42a5      	cmp	r5, r4
    6b36:	d903      	bls.n	6b40 <__aeabi_lmul+0x34>
    6b38:	2380      	movs	r3, #128	; 0x80
    6b3a:	025b      	lsls	r3, r3, #9
    6b3c:	4698      	mov	r8, r3
    6b3e:	44c4      	add	ip, r8
    6b40:	464b      	mov	r3, r9
    6b42:	4351      	muls	r1, r2
    6b44:	4343      	muls	r3, r0
    6b46:	0436      	lsls	r6, r6, #16
    6b48:	0c36      	lsrs	r6, r6, #16
    6b4a:	0c25      	lsrs	r5, r4, #16
    6b4c:	0424      	lsls	r4, r4, #16
    6b4e:	4465      	add	r5, ip
    6b50:	19a4      	adds	r4, r4, r6
    6b52:	1859      	adds	r1, r3, r1
    6b54:	1949      	adds	r1, r1, r5
    6b56:	0020      	movs	r0, r4
    6b58:	bc0c      	pop	{r2, r3}
    6b5a:	4690      	mov	r8, r2
    6b5c:	4699      	mov	r9, r3
    6b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006b60 <__udivmoddi4>:
    6b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b62:	4657      	mov	r7, sl
    6b64:	464e      	mov	r6, r9
    6b66:	4645      	mov	r5, r8
    6b68:	46de      	mov	lr, fp
    6b6a:	b5e0      	push	{r5, r6, r7, lr}
    6b6c:	0004      	movs	r4, r0
    6b6e:	b083      	sub	sp, #12
    6b70:	000d      	movs	r5, r1
    6b72:	4692      	mov	sl, r2
    6b74:	4699      	mov	r9, r3
    6b76:	428b      	cmp	r3, r1
    6b78:	d82f      	bhi.n	6bda <__udivmoddi4+0x7a>
    6b7a:	d02c      	beq.n	6bd6 <__udivmoddi4+0x76>
    6b7c:	4649      	mov	r1, r9
    6b7e:	4650      	mov	r0, sl
    6b80:	f000 f8ae 	bl	6ce0 <__clzdi2>
    6b84:	0029      	movs	r1, r5
    6b86:	0006      	movs	r6, r0
    6b88:	0020      	movs	r0, r4
    6b8a:	f000 f8a9 	bl	6ce0 <__clzdi2>
    6b8e:	1a33      	subs	r3, r6, r0
    6b90:	4698      	mov	r8, r3
    6b92:	3b20      	subs	r3, #32
    6b94:	469b      	mov	fp, r3
    6b96:	d500      	bpl.n	6b9a <__udivmoddi4+0x3a>
    6b98:	e074      	b.n	6c84 <__udivmoddi4+0x124>
    6b9a:	4653      	mov	r3, sl
    6b9c:	465a      	mov	r2, fp
    6b9e:	4093      	lsls	r3, r2
    6ba0:	001f      	movs	r7, r3
    6ba2:	4653      	mov	r3, sl
    6ba4:	4642      	mov	r2, r8
    6ba6:	4093      	lsls	r3, r2
    6ba8:	001e      	movs	r6, r3
    6baa:	42af      	cmp	r7, r5
    6bac:	d829      	bhi.n	6c02 <__udivmoddi4+0xa2>
    6bae:	d026      	beq.n	6bfe <__udivmoddi4+0x9e>
    6bb0:	465b      	mov	r3, fp
    6bb2:	1ba4      	subs	r4, r4, r6
    6bb4:	41bd      	sbcs	r5, r7
    6bb6:	2b00      	cmp	r3, #0
    6bb8:	da00      	bge.n	6bbc <__udivmoddi4+0x5c>
    6bba:	e079      	b.n	6cb0 <__udivmoddi4+0x150>
    6bbc:	2200      	movs	r2, #0
    6bbe:	2300      	movs	r3, #0
    6bc0:	9200      	str	r2, [sp, #0]
    6bc2:	9301      	str	r3, [sp, #4]
    6bc4:	2301      	movs	r3, #1
    6bc6:	465a      	mov	r2, fp
    6bc8:	4093      	lsls	r3, r2
    6bca:	9301      	str	r3, [sp, #4]
    6bcc:	2301      	movs	r3, #1
    6bce:	4642      	mov	r2, r8
    6bd0:	4093      	lsls	r3, r2
    6bd2:	9300      	str	r3, [sp, #0]
    6bd4:	e019      	b.n	6c0a <__udivmoddi4+0xaa>
    6bd6:	4282      	cmp	r2, r0
    6bd8:	d9d0      	bls.n	6b7c <__udivmoddi4+0x1c>
    6bda:	2200      	movs	r2, #0
    6bdc:	2300      	movs	r3, #0
    6bde:	9200      	str	r2, [sp, #0]
    6be0:	9301      	str	r3, [sp, #4]
    6be2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6be4:	2b00      	cmp	r3, #0
    6be6:	d001      	beq.n	6bec <__udivmoddi4+0x8c>
    6be8:	601c      	str	r4, [r3, #0]
    6bea:	605d      	str	r5, [r3, #4]
    6bec:	9800      	ldr	r0, [sp, #0]
    6bee:	9901      	ldr	r1, [sp, #4]
    6bf0:	b003      	add	sp, #12
    6bf2:	bc3c      	pop	{r2, r3, r4, r5}
    6bf4:	4690      	mov	r8, r2
    6bf6:	4699      	mov	r9, r3
    6bf8:	46a2      	mov	sl, r4
    6bfa:	46ab      	mov	fp, r5
    6bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bfe:	42a3      	cmp	r3, r4
    6c00:	d9d6      	bls.n	6bb0 <__udivmoddi4+0x50>
    6c02:	2200      	movs	r2, #0
    6c04:	2300      	movs	r3, #0
    6c06:	9200      	str	r2, [sp, #0]
    6c08:	9301      	str	r3, [sp, #4]
    6c0a:	4643      	mov	r3, r8
    6c0c:	2b00      	cmp	r3, #0
    6c0e:	d0e8      	beq.n	6be2 <__udivmoddi4+0x82>
    6c10:	07fb      	lsls	r3, r7, #31
    6c12:	0872      	lsrs	r2, r6, #1
    6c14:	431a      	orrs	r2, r3
    6c16:	4646      	mov	r6, r8
    6c18:	087b      	lsrs	r3, r7, #1
    6c1a:	e00e      	b.n	6c3a <__udivmoddi4+0xda>
    6c1c:	42ab      	cmp	r3, r5
    6c1e:	d101      	bne.n	6c24 <__udivmoddi4+0xc4>
    6c20:	42a2      	cmp	r2, r4
    6c22:	d80c      	bhi.n	6c3e <__udivmoddi4+0xde>
    6c24:	1aa4      	subs	r4, r4, r2
    6c26:	419d      	sbcs	r5, r3
    6c28:	2001      	movs	r0, #1
    6c2a:	1924      	adds	r4, r4, r4
    6c2c:	416d      	adcs	r5, r5
    6c2e:	2100      	movs	r1, #0
    6c30:	3e01      	subs	r6, #1
    6c32:	1824      	adds	r4, r4, r0
    6c34:	414d      	adcs	r5, r1
    6c36:	2e00      	cmp	r6, #0
    6c38:	d006      	beq.n	6c48 <__udivmoddi4+0xe8>
    6c3a:	42ab      	cmp	r3, r5
    6c3c:	d9ee      	bls.n	6c1c <__udivmoddi4+0xbc>
    6c3e:	3e01      	subs	r6, #1
    6c40:	1924      	adds	r4, r4, r4
    6c42:	416d      	adcs	r5, r5
    6c44:	2e00      	cmp	r6, #0
    6c46:	d1f8      	bne.n	6c3a <__udivmoddi4+0xda>
    6c48:	465b      	mov	r3, fp
    6c4a:	9800      	ldr	r0, [sp, #0]
    6c4c:	9901      	ldr	r1, [sp, #4]
    6c4e:	1900      	adds	r0, r0, r4
    6c50:	4169      	adcs	r1, r5
    6c52:	2b00      	cmp	r3, #0
    6c54:	db22      	blt.n	6c9c <__udivmoddi4+0x13c>
    6c56:	002b      	movs	r3, r5
    6c58:	465a      	mov	r2, fp
    6c5a:	40d3      	lsrs	r3, r2
    6c5c:	002a      	movs	r2, r5
    6c5e:	4644      	mov	r4, r8
    6c60:	40e2      	lsrs	r2, r4
    6c62:	001c      	movs	r4, r3
    6c64:	465b      	mov	r3, fp
    6c66:	0015      	movs	r5, r2
    6c68:	2b00      	cmp	r3, #0
    6c6a:	db2c      	blt.n	6cc6 <__udivmoddi4+0x166>
    6c6c:	0026      	movs	r6, r4
    6c6e:	409e      	lsls	r6, r3
    6c70:	0033      	movs	r3, r6
    6c72:	0026      	movs	r6, r4
    6c74:	4647      	mov	r7, r8
    6c76:	40be      	lsls	r6, r7
    6c78:	0032      	movs	r2, r6
    6c7a:	1a80      	subs	r0, r0, r2
    6c7c:	4199      	sbcs	r1, r3
    6c7e:	9000      	str	r0, [sp, #0]
    6c80:	9101      	str	r1, [sp, #4]
    6c82:	e7ae      	b.n	6be2 <__udivmoddi4+0x82>
    6c84:	4642      	mov	r2, r8
    6c86:	2320      	movs	r3, #32
    6c88:	1a9b      	subs	r3, r3, r2
    6c8a:	4652      	mov	r2, sl
    6c8c:	40da      	lsrs	r2, r3
    6c8e:	4641      	mov	r1, r8
    6c90:	0013      	movs	r3, r2
    6c92:	464a      	mov	r2, r9
    6c94:	408a      	lsls	r2, r1
    6c96:	0017      	movs	r7, r2
    6c98:	431f      	orrs	r7, r3
    6c9a:	e782      	b.n	6ba2 <__udivmoddi4+0x42>
    6c9c:	4642      	mov	r2, r8
    6c9e:	2320      	movs	r3, #32
    6ca0:	1a9b      	subs	r3, r3, r2
    6ca2:	002a      	movs	r2, r5
    6ca4:	4646      	mov	r6, r8
    6ca6:	409a      	lsls	r2, r3
    6ca8:	0023      	movs	r3, r4
    6caa:	40f3      	lsrs	r3, r6
    6cac:	4313      	orrs	r3, r2
    6cae:	e7d5      	b.n	6c5c <__udivmoddi4+0xfc>
    6cb0:	4642      	mov	r2, r8
    6cb2:	2320      	movs	r3, #32
    6cb4:	2100      	movs	r1, #0
    6cb6:	1a9b      	subs	r3, r3, r2
    6cb8:	2200      	movs	r2, #0
    6cba:	9100      	str	r1, [sp, #0]
    6cbc:	9201      	str	r2, [sp, #4]
    6cbe:	2201      	movs	r2, #1
    6cc0:	40da      	lsrs	r2, r3
    6cc2:	9201      	str	r2, [sp, #4]
    6cc4:	e782      	b.n	6bcc <__udivmoddi4+0x6c>
    6cc6:	4642      	mov	r2, r8
    6cc8:	2320      	movs	r3, #32
    6cca:	0026      	movs	r6, r4
    6ccc:	1a9b      	subs	r3, r3, r2
    6cce:	40de      	lsrs	r6, r3
    6cd0:	002f      	movs	r7, r5
    6cd2:	46b4      	mov	ip, r6
    6cd4:	4097      	lsls	r7, r2
    6cd6:	4666      	mov	r6, ip
    6cd8:	003b      	movs	r3, r7
    6cda:	4333      	orrs	r3, r6
    6cdc:	e7c9      	b.n	6c72 <__udivmoddi4+0x112>
    6cde:	46c0      	nop			; (mov r8, r8)

00006ce0 <__clzdi2>:
    6ce0:	b510      	push	{r4, lr}
    6ce2:	2900      	cmp	r1, #0
    6ce4:	d103      	bne.n	6cee <__clzdi2+0xe>
    6ce6:	f7ff feb3 	bl	6a50 <__clzsi2>
    6cea:	3020      	adds	r0, #32
    6cec:	e002      	b.n	6cf4 <__clzdi2+0x14>
    6cee:	1c08      	adds	r0, r1, #0
    6cf0:	f7ff feae 	bl	6a50 <__clzsi2>
    6cf4:	bd10      	pop	{r4, pc}
    6cf6:	46c0      	nop			; (mov r8, r8)

00006cf8 <__libc_init_array>:
    6cf8:	b570      	push	{r4, r5, r6, lr}
    6cfa:	2600      	movs	r6, #0
    6cfc:	4d0c      	ldr	r5, [pc, #48]	; (6d30 <__libc_init_array+0x38>)
    6cfe:	4c0d      	ldr	r4, [pc, #52]	; (6d34 <__libc_init_array+0x3c>)
    6d00:	1b64      	subs	r4, r4, r5
    6d02:	10a4      	asrs	r4, r4, #2
    6d04:	42a6      	cmp	r6, r4
    6d06:	d109      	bne.n	6d1c <__libc_init_array+0x24>
    6d08:	2600      	movs	r6, #0
    6d0a:	f000 fda5 	bl	7858 <_init>
    6d0e:	4d0a      	ldr	r5, [pc, #40]	; (6d38 <__libc_init_array+0x40>)
    6d10:	4c0a      	ldr	r4, [pc, #40]	; (6d3c <__libc_init_array+0x44>)
    6d12:	1b64      	subs	r4, r4, r5
    6d14:	10a4      	asrs	r4, r4, #2
    6d16:	42a6      	cmp	r6, r4
    6d18:	d105      	bne.n	6d26 <__libc_init_array+0x2e>
    6d1a:	bd70      	pop	{r4, r5, r6, pc}
    6d1c:	00b3      	lsls	r3, r6, #2
    6d1e:	58eb      	ldr	r3, [r5, r3]
    6d20:	4798      	blx	r3
    6d22:	3601      	adds	r6, #1
    6d24:	e7ee      	b.n	6d04 <__libc_init_array+0xc>
    6d26:	00b3      	lsls	r3, r6, #2
    6d28:	58eb      	ldr	r3, [r5, r3]
    6d2a:	4798      	blx	r3
    6d2c:	3601      	adds	r6, #1
    6d2e:	e7f2      	b.n	6d16 <__libc_init_array+0x1e>
    6d30:	00007864 	.word	0x00007864
    6d34:	00007864 	.word	0x00007864
    6d38:	00007864 	.word	0x00007864
    6d3c:	00007868 	.word	0x00007868

00006d40 <memcpy>:
    6d40:	2300      	movs	r3, #0
    6d42:	b510      	push	{r4, lr}
    6d44:	429a      	cmp	r2, r3
    6d46:	d100      	bne.n	6d4a <memcpy+0xa>
    6d48:	bd10      	pop	{r4, pc}
    6d4a:	5ccc      	ldrb	r4, [r1, r3]
    6d4c:	54c4      	strb	r4, [r0, r3]
    6d4e:	3301      	adds	r3, #1
    6d50:	e7f8      	b.n	6d44 <memcpy+0x4>

00006d52 <memset>:
    6d52:	0003      	movs	r3, r0
    6d54:	1882      	adds	r2, r0, r2
    6d56:	4293      	cmp	r3, r2
    6d58:	d100      	bne.n	6d5c <memset+0xa>
    6d5a:	4770      	bx	lr
    6d5c:	7019      	strb	r1, [r3, #0]
    6d5e:	3301      	adds	r3, #1
    6d60:	e7f9      	b.n	6d56 <memset+0x4>

00006d62 <setbuf>:
    6d62:	424a      	negs	r2, r1
    6d64:	414a      	adcs	r2, r1
    6d66:	2380      	movs	r3, #128	; 0x80
    6d68:	b510      	push	{r4, lr}
    6d6a:	0052      	lsls	r2, r2, #1
    6d6c:	00db      	lsls	r3, r3, #3
    6d6e:	f000 f801 	bl	6d74 <setvbuf>
    6d72:	bd10      	pop	{r4, pc}

00006d74 <setvbuf>:
    6d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d76:	001d      	movs	r5, r3
    6d78:	4b4f      	ldr	r3, [pc, #316]	; (6eb8 <setvbuf+0x144>)
    6d7a:	b085      	sub	sp, #20
    6d7c:	681e      	ldr	r6, [r3, #0]
    6d7e:	0004      	movs	r4, r0
    6d80:	000f      	movs	r7, r1
    6d82:	9200      	str	r2, [sp, #0]
    6d84:	2e00      	cmp	r6, #0
    6d86:	d005      	beq.n	6d94 <setvbuf+0x20>
    6d88:	69b3      	ldr	r3, [r6, #24]
    6d8a:	2b00      	cmp	r3, #0
    6d8c:	d102      	bne.n	6d94 <setvbuf+0x20>
    6d8e:	0030      	movs	r0, r6
    6d90:	f000 f994 	bl	70bc <__sinit>
    6d94:	4b49      	ldr	r3, [pc, #292]	; (6ebc <setvbuf+0x148>)
    6d96:	429c      	cmp	r4, r3
    6d98:	d150      	bne.n	6e3c <setvbuf+0xc8>
    6d9a:	6874      	ldr	r4, [r6, #4]
    6d9c:	9b00      	ldr	r3, [sp, #0]
    6d9e:	2b02      	cmp	r3, #2
    6da0:	d005      	beq.n	6dae <setvbuf+0x3a>
    6da2:	2b01      	cmp	r3, #1
    6da4:	d900      	bls.n	6da8 <setvbuf+0x34>
    6da6:	e084      	b.n	6eb2 <setvbuf+0x13e>
    6da8:	2d00      	cmp	r5, #0
    6daa:	da00      	bge.n	6dae <setvbuf+0x3a>
    6dac:	e081      	b.n	6eb2 <setvbuf+0x13e>
    6dae:	0021      	movs	r1, r4
    6db0:	0030      	movs	r0, r6
    6db2:	f000 f915 	bl	6fe0 <_fflush_r>
    6db6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6db8:	2900      	cmp	r1, #0
    6dba:	d008      	beq.n	6dce <setvbuf+0x5a>
    6dbc:	0023      	movs	r3, r4
    6dbe:	3344      	adds	r3, #68	; 0x44
    6dc0:	4299      	cmp	r1, r3
    6dc2:	d002      	beq.n	6dca <setvbuf+0x56>
    6dc4:	0030      	movs	r0, r6
    6dc6:	f000 fa41 	bl	724c <_free_r>
    6dca:	2300      	movs	r3, #0
    6dcc:	6363      	str	r3, [r4, #52]	; 0x34
    6dce:	2300      	movs	r3, #0
    6dd0:	61a3      	str	r3, [r4, #24]
    6dd2:	6063      	str	r3, [r4, #4]
    6dd4:	89a3      	ldrh	r3, [r4, #12]
    6dd6:	061b      	lsls	r3, r3, #24
    6dd8:	d503      	bpl.n	6de2 <setvbuf+0x6e>
    6dda:	6921      	ldr	r1, [r4, #16]
    6ddc:	0030      	movs	r0, r6
    6dde:	f000 fa35 	bl	724c <_free_r>
    6de2:	89a3      	ldrh	r3, [r4, #12]
    6de4:	4a36      	ldr	r2, [pc, #216]	; (6ec0 <setvbuf+0x14c>)
    6de6:	4013      	ands	r3, r2
    6de8:	81a3      	strh	r3, [r4, #12]
    6dea:	9b00      	ldr	r3, [sp, #0]
    6dec:	2b02      	cmp	r3, #2
    6dee:	d05a      	beq.n	6ea6 <setvbuf+0x132>
    6df0:	ab03      	add	r3, sp, #12
    6df2:	aa02      	add	r2, sp, #8
    6df4:	0021      	movs	r1, r4
    6df6:	0030      	movs	r0, r6
    6df8:	f000 f9f6 	bl	71e8 <__swhatbuf_r>
    6dfc:	89a3      	ldrh	r3, [r4, #12]
    6dfe:	4318      	orrs	r0, r3
    6e00:	81a0      	strh	r0, [r4, #12]
    6e02:	2d00      	cmp	r5, #0
    6e04:	d124      	bne.n	6e50 <setvbuf+0xdc>
    6e06:	9d02      	ldr	r5, [sp, #8]
    6e08:	0028      	movs	r0, r5
    6e0a:	f000 fa15 	bl	7238 <malloc>
    6e0e:	9501      	str	r5, [sp, #4]
    6e10:	1e07      	subs	r7, r0, #0
    6e12:	d142      	bne.n	6e9a <setvbuf+0x126>
    6e14:	9b02      	ldr	r3, [sp, #8]
    6e16:	9301      	str	r3, [sp, #4]
    6e18:	42ab      	cmp	r3, r5
    6e1a:	d139      	bne.n	6e90 <setvbuf+0x11c>
    6e1c:	2001      	movs	r0, #1
    6e1e:	4240      	negs	r0, r0
    6e20:	2302      	movs	r3, #2
    6e22:	89a2      	ldrh	r2, [r4, #12]
    6e24:	4313      	orrs	r3, r2
    6e26:	81a3      	strh	r3, [r4, #12]
    6e28:	2300      	movs	r3, #0
    6e2a:	60a3      	str	r3, [r4, #8]
    6e2c:	0023      	movs	r3, r4
    6e2e:	3347      	adds	r3, #71	; 0x47
    6e30:	6023      	str	r3, [r4, #0]
    6e32:	6123      	str	r3, [r4, #16]
    6e34:	2301      	movs	r3, #1
    6e36:	6163      	str	r3, [r4, #20]
    6e38:	b005      	add	sp, #20
    6e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e3c:	4b21      	ldr	r3, [pc, #132]	; (6ec4 <setvbuf+0x150>)
    6e3e:	429c      	cmp	r4, r3
    6e40:	d101      	bne.n	6e46 <setvbuf+0xd2>
    6e42:	68b4      	ldr	r4, [r6, #8]
    6e44:	e7aa      	b.n	6d9c <setvbuf+0x28>
    6e46:	4b20      	ldr	r3, [pc, #128]	; (6ec8 <setvbuf+0x154>)
    6e48:	429c      	cmp	r4, r3
    6e4a:	d1a7      	bne.n	6d9c <setvbuf+0x28>
    6e4c:	68f4      	ldr	r4, [r6, #12]
    6e4e:	e7a5      	b.n	6d9c <setvbuf+0x28>
    6e50:	2f00      	cmp	r7, #0
    6e52:	d0d9      	beq.n	6e08 <setvbuf+0x94>
    6e54:	69b3      	ldr	r3, [r6, #24]
    6e56:	2b00      	cmp	r3, #0
    6e58:	d102      	bne.n	6e60 <setvbuf+0xec>
    6e5a:	0030      	movs	r0, r6
    6e5c:	f000 f92e 	bl	70bc <__sinit>
    6e60:	9b00      	ldr	r3, [sp, #0]
    6e62:	2b01      	cmp	r3, #1
    6e64:	d103      	bne.n	6e6e <setvbuf+0xfa>
    6e66:	89a3      	ldrh	r3, [r4, #12]
    6e68:	9a00      	ldr	r2, [sp, #0]
    6e6a:	431a      	orrs	r2, r3
    6e6c:	81a2      	strh	r2, [r4, #12]
    6e6e:	2008      	movs	r0, #8
    6e70:	89a3      	ldrh	r3, [r4, #12]
    6e72:	6027      	str	r7, [r4, #0]
    6e74:	6127      	str	r7, [r4, #16]
    6e76:	6165      	str	r5, [r4, #20]
    6e78:	4018      	ands	r0, r3
    6e7a:	d018      	beq.n	6eae <setvbuf+0x13a>
    6e7c:	2001      	movs	r0, #1
    6e7e:	4018      	ands	r0, r3
    6e80:	2300      	movs	r3, #0
    6e82:	4298      	cmp	r0, r3
    6e84:	d011      	beq.n	6eaa <setvbuf+0x136>
    6e86:	426d      	negs	r5, r5
    6e88:	60a3      	str	r3, [r4, #8]
    6e8a:	61a5      	str	r5, [r4, #24]
    6e8c:	0018      	movs	r0, r3
    6e8e:	e7d3      	b.n	6e38 <setvbuf+0xc4>
    6e90:	9801      	ldr	r0, [sp, #4]
    6e92:	f000 f9d1 	bl	7238 <malloc>
    6e96:	1e07      	subs	r7, r0, #0
    6e98:	d0c0      	beq.n	6e1c <setvbuf+0xa8>
    6e9a:	2380      	movs	r3, #128	; 0x80
    6e9c:	89a2      	ldrh	r2, [r4, #12]
    6e9e:	9d01      	ldr	r5, [sp, #4]
    6ea0:	4313      	orrs	r3, r2
    6ea2:	81a3      	strh	r3, [r4, #12]
    6ea4:	e7d6      	b.n	6e54 <setvbuf+0xe0>
    6ea6:	2000      	movs	r0, #0
    6ea8:	e7ba      	b.n	6e20 <setvbuf+0xac>
    6eaa:	60a5      	str	r5, [r4, #8]
    6eac:	e7c4      	b.n	6e38 <setvbuf+0xc4>
    6eae:	60a0      	str	r0, [r4, #8]
    6eb0:	e7c2      	b.n	6e38 <setvbuf+0xc4>
    6eb2:	2001      	movs	r0, #1
    6eb4:	4240      	negs	r0, r0
    6eb6:	e7bf      	b.n	6e38 <setvbuf+0xc4>
    6eb8:	200000fc 	.word	0x200000fc
    6ebc:	00007818 	.word	0x00007818
    6ec0:	fffff35c 	.word	0xfffff35c
    6ec4:	00007838 	.word	0x00007838
    6ec8:	000077f8 	.word	0x000077f8

00006ecc <__sflush_r>:
    6ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6ece:	898a      	ldrh	r2, [r1, #12]
    6ed0:	0005      	movs	r5, r0
    6ed2:	000c      	movs	r4, r1
    6ed4:	0713      	lsls	r3, r2, #28
    6ed6:	d460      	bmi.n	6f9a <__sflush_r+0xce>
    6ed8:	684b      	ldr	r3, [r1, #4]
    6eda:	2b00      	cmp	r3, #0
    6edc:	dc04      	bgt.n	6ee8 <__sflush_r+0x1c>
    6ede:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6ee0:	2b00      	cmp	r3, #0
    6ee2:	dc01      	bgt.n	6ee8 <__sflush_r+0x1c>
    6ee4:	2000      	movs	r0, #0
    6ee6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6ee8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6eea:	2f00      	cmp	r7, #0
    6eec:	d0fa      	beq.n	6ee4 <__sflush_r+0x18>
    6eee:	2300      	movs	r3, #0
    6ef0:	682e      	ldr	r6, [r5, #0]
    6ef2:	602b      	str	r3, [r5, #0]
    6ef4:	2380      	movs	r3, #128	; 0x80
    6ef6:	015b      	lsls	r3, r3, #5
    6ef8:	401a      	ands	r2, r3
    6efa:	d034      	beq.n	6f66 <__sflush_r+0x9a>
    6efc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6efe:	89a3      	ldrh	r3, [r4, #12]
    6f00:	075b      	lsls	r3, r3, #29
    6f02:	d506      	bpl.n	6f12 <__sflush_r+0x46>
    6f04:	6863      	ldr	r3, [r4, #4]
    6f06:	1ac0      	subs	r0, r0, r3
    6f08:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6f0a:	2b00      	cmp	r3, #0
    6f0c:	d001      	beq.n	6f12 <__sflush_r+0x46>
    6f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6f10:	1ac0      	subs	r0, r0, r3
    6f12:	0002      	movs	r2, r0
    6f14:	6a21      	ldr	r1, [r4, #32]
    6f16:	2300      	movs	r3, #0
    6f18:	0028      	movs	r0, r5
    6f1a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6f1c:	47b8      	blx	r7
    6f1e:	89a1      	ldrh	r1, [r4, #12]
    6f20:	1c43      	adds	r3, r0, #1
    6f22:	d106      	bne.n	6f32 <__sflush_r+0x66>
    6f24:	682b      	ldr	r3, [r5, #0]
    6f26:	2b1d      	cmp	r3, #29
    6f28:	d831      	bhi.n	6f8e <__sflush_r+0xc2>
    6f2a:	4a2c      	ldr	r2, [pc, #176]	; (6fdc <__sflush_r+0x110>)
    6f2c:	40da      	lsrs	r2, r3
    6f2e:	07d3      	lsls	r3, r2, #31
    6f30:	d52d      	bpl.n	6f8e <__sflush_r+0xc2>
    6f32:	2300      	movs	r3, #0
    6f34:	6063      	str	r3, [r4, #4]
    6f36:	6923      	ldr	r3, [r4, #16]
    6f38:	6023      	str	r3, [r4, #0]
    6f3a:	04cb      	lsls	r3, r1, #19
    6f3c:	d505      	bpl.n	6f4a <__sflush_r+0x7e>
    6f3e:	1c43      	adds	r3, r0, #1
    6f40:	d102      	bne.n	6f48 <__sflush_r+0x7c>
    6f42:	682b      	ldr	r3, [r5, #0]
    6f44:	2b00      	cmp	r3, #0
    6f46:	d100      	bne.n	6f4a <__sflush_r+0x7e>
    6f48:	6560      	str	r0, [r4, #84]	; 0x54
    6f4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6f4c:	602e      	str	r6, [r5, #0]
    6f4e:	2900      	cmp	r1, #0
    6f50:	d0c8      	beq.n	6ee4 <__sflush_r+0x18>
    6f52:	0023      	movs	r3, r4
    6f54:	3344      	adds	r3, #68	; 0x44
    6f56:	4299      	cmp	r1, r3
    6f58:	d002      	beq.n	6f60 <__sflush_r+0x94>
    6f5a:	0028      	movs	r0, r5
    6f5c:	f000 f976 	bl	724c <_free_r>
    6f60:	2000      	movs	r0, #0
    6f62:	6360      	str	r0, [r4, #52]	; 0x34
    6f64:	e7bf      	b.n	6ee6 <__sflush_r+0x1a>
    6f66:	2301      	movs	r3, #1
    6f68:	6a21      	ldr	r1, [r4, #32]
    6f6a:	0028      	movs	r0, r5
    6f6c:	47b8      	blx	r7
    6f6e:	1c43      	adds	r3, r0, #1
    6f70:	d1c5      	bne.n	6efe <__sflush_r+0x32>
    6f72:	682b      	ldr	r3, [r5, #0]
    6f74:	2b00      	cmp	r3, #0
    6f76:	d0c2      	beq.n	6efe <__sflush_r+0x32>
    6f78:	2b1d      	cmp	r3, #29
    6f7a:	d001      	beq.n	6f80 <__sflush_r+0xb4>
    6f7c:	2b16      	cmp	r3, #22
    6f7e:	d101      	bne.n	6f84 <__sflush_r+0xb8>
    6f80:	602e      	str	r6, [r5, #0]
    6f82:	e7af      	b.n	6ee4 <__sflush_r+0x18>
    6f84:	2340      	movs	r3, #64	; 0x40
    6f86:	89a2      	ldrh	r2, [r4, #12]
    6f88:	4313      	orrs	r3, r2
    6f8a:	81a3      	strh	r3, [r4, #12]
    6f8c:	e7ab      	b.n	6ee6 <__sflush_r+0x1a>
    6f8e:	2340      	movs	r3, #64	; 0x40
    6f90:	430b      	orrs	r3, r1
    6f92:	2001      	movs	r0, #1
    6f94:	81a3      	strh	r3, [r4, #12]
    6f96:	4240      	negs	r0, r0
    6f98:	e7a5      	b.n	6ee6 <__sflush_r+0x1a>
    6f9a:	690f      	ldr	r7, [r1, #16]
    6f9c:	2f00      	cmp	r7, #0
    6f9e:	d0a1      	beq.n	6ee4 <__sflush_r+0x18>
    6fa0:	680b      	ldr	r3, [r1, #0]
    6fa2:	600f      	str	r7, [r1, #0]
    6fa4:	1bdb      	subs	r3, r3, r7
    6fa6:	9301      	str	r3, [sp, #4]
    6fa8:	2300      	movs	r3, #0
    6faa:	0792      	lsls	r2, r2, #30
    6fac:	d100      	bne.n	6fb0 <__sflush_r+0xe4>
    6fae:	694b      	ldr	r3, [r1, #20]
    6fb0:	60a3      	str	r3, [r4, #8]
    6fb2:	9b01      	ldr	r3, [sp, #4]
    6fb4:	2b00      	cmp	r3, #0
    6fb6:	dc00      	bgt.n	6fba <__sflush_r+0xee>
    6fb8:	e794      	b.n	6ee4 <__sflush_r+0x18>
    6fba:	9b01      	ldr	r3, [sp, #4]
    6fbc:	003a      	movs	r2, r7
    6fbe:	6a21      	ldr	r1, [r4, #32]
    6fc0:	0028      	movs	r0, r5
    6fc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6fc4:	47b0      	blx	r6
    6fc6:	2800      	cmp	r0, #0
    6fc8:	dc03      	bgt.n	6fd2 <__sflush_r+0x106>
    6fca:	2340      	movs	r3, #64	; 0x40
    6fcc:	89a2      	ldrh	r2, [r4, #12]
    6fce:	4313      	orrs	r3, r2
    6fd0:	e7df      	b.n	6f92 <__sflush_r+0xc6>
    6fd2:	9b01      	ldr	r3, [sp, #4]
    6fd4:	183f      	adds	r7, r7, r0
    6fd6:	1a1b      	subs	r3, r3, r0
    6fd8:	9301      	str	r3, [sp, #4]
    6fda:	e7ea      	b.n	6fb2 <__sflush_r+0xe6>
    6fdc:	20400001 	.word	0x20400001

00006fe0 <_fflush_r>:
    6fe0:	690b      	ldr	r3, [r1, #16]
    6fe2:	b570      	push	{r4, r5, r6, lr}
    6fe4:	0005      	movs	r5, r0
    6fe6:	000c      	movs	r4, r1
    6fe8:	2b00      	cmp	r3, #0
    6fea:	d101      	bne.n	6ff0 <_fflush_r+0x10>
    6fec:	2000      	movs	r0, #0
    6fee:	bd70      	pop	{r4, r5, r6, pc}
    6ff0:	2800      	cmp	r0, #0
    6ff2:	d004      	beq.n	6ffe <_fflush_r+0x1e>
    6ff4:	6983      	ldr	r3, [r0, #24]
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	d101      	bne.n	6ffe <_fflush_r+0x1e>
    6ffa:	f000 f85f 	bl	70bc <__sinit>
    6ffe:	4b0b      	ldr	r3, [pc, #44]	; (702c <_fflush_r+0x4c>)
    7000:	429c      	cmp	r4, r3
    7002:	d109      	bne.n	7018 <_fflush_r+0x38>
    7004:	686c      	ldr	r4, [r5, #4]
    7006:	220c      	movs	r2, #12
    7008:	5ea3      	ldrsh	r3, [r4, r2]
    700a:	2b00      	cmp	r3, #0
    700c:	d0ee      	beq.n	6fec <_fflush_r+0xc>
    700e:	0021      	movs	r1, r4
    7010:	0028      	movs	r0, r5
    7012:	f7ff ff5b 	bl	6ecc <__sflush_r>
    7016:	e7ea      	b.n	6fee <_fflush_r+0xe>
    7018:	4b05      	ldr	r3, [pc, #20]	; (7030 <_fflush_r+0x50>)
    701a:	429c      	cmp	r4, r3
    701c:	d101      	bne.n	7022 <_fflush_r+0x42>
    701e:	68ac      	ldr	r4, [r5, #8]
    7020:	e7f1      	b.n	7006 <_fflush_r+0x26>
    7022:	4b04      	ldr	r3, [pc, #16]	; (7034 <_fflush_r+0x54>)
    7024:	429c      	cmp	r4, r3
    7026:	d1ee      	bne.n	7006 <_fflush_r+0x26>
    7028:	68ec      	ldr	r4, [r5, #12]
    702a:	e7ec      	b.n	7006 <_fflush_r+0x26>
    702c:	00007818 	.word	0x00007818
    7030:	00007838 	.word	0x00007838
    7034:	000077f8 	.word	0x000077f8

00007038 <_cleanup_r>:
    7038:	b510      	push	{r4, lr}
    703a:	4902      	ldr	r1, [pc, #8]	; (7044 <_cleanup_r+0xc>)
    703c:	f000 f8b2 	bl	71a4 <_fwalk_reent>
    7040:	bd10      	pop	{r4, pc}
    7042:	46c0      	nop			; (mov r8, r8)
    7044:	00006fe1 	.word	0x00006fe1

00007048 <std.isra.0>:
    7048:	2300      	movs	r3, #0
    704a:	b510      	push	{r4, lr}
    704c:	0004      	movs	r4, r0
    704e:	6003      	str	r3, [r0, #0]
    7050:	6043      	str	r3, [r0, #4]
    7052:	6083      	str	r3, [r0, #8]
    7054:	8181      	strh	r1, [r0, #12]
    7056:	6643      	str	r3, [r0, #100]	; 0x64
    7058:	81c2      	strh	r2, [r0, #14]
    705a:	6103      	str	r3, [r0, #16]
    705c:	6143      	str	r3, [r0, #20]
    705e:	6183      	str	r3, [r0, #24]
    7060:	0019      	movs	r1, r3
    7062:	2208      	movs	r2, #8
    7064:	305c      	adds	r0, #92	; 0x5c
    7066:	f7ff fe74 	bl	6d52 <memset>
    706a:	4b05      	ldr	r3, [pc, #20]	; (7080 <std.isra.0+0x38>)
    706c:	6224      	str	r4, [r4, #32]
    706e:	6263      	str	r3, [r4, #36]	; 0x24
    7070:	4b04      	ldr	r3, [pc, #16]	; (7084 <std.isra.0+0x3c>)
    7072:	62a3      	str	r3, [r4, #40]	; 0x28
    7074:	4b04      	ldr	r3, [pc, #16]	; (7088 <std.isra.0+0x40>)
    7076:	62e3      	str	r3, [r4, #44]	; 0x2c
    7078:	4b04      	ldr	r3, [pc, #16]	; (708c <std.isra.0+0x44>)
    707a:	6323      	str	r3, [r4, #48]	; 0x30
    707c:	bd10      	pop	{r4, pc}
    707e:	46c0      	nop			; (mov r8, r8)
    7080:	000073c1 	.word	0x000073c1
    7084:	000073e9 	.word	0x000073e9
    7088:	00007421 	.word	0x00007421
    708c:	0000744d 	.word	0x0000744d

00007090 <__sfmoreglue>:
    7090:	b570      	push	{r4, r5, r6, lr}
    7092:	2568      	movs	r5, #104	; 0x68
    7094:	1e4a      	subs	r2, r1, #1
    7096:	4355      	muls	r5, r2
    7098:	000e      	movs	r6, r1
    709a:	0029      	movs	r1, r5
    709c:	3174      	adds	r1, #116	; 0x74
    709e:	f000 f91f 	bl	72e0 <_malloc_r>
    70a2:	1e04      	subs	r4, r0, #0
    70a4:	d008      	beq.n	70b8 <__sfmoreglue+0x28>
    70a6:	2100      	movs	r1, #0
    70a8:	002a      	movs	r2, r5
    70aa:	6001      	str	r1, [r0, #0]
    70ac:	6046      	str	r6, [r0, #4]
    70ae:	300c      	adds	r0, #12
    70b0:	60a0      	str	r0, [r4, #8]
    70b2:	3268      	adds	r2, #104	; 0x68
    70b4:	f7ff fe4d 	bl	6d52 <memset>
    70b8:	0020      	movs	r0, r4
    70ba:	bd70      	pop	{r4, r5, r6, pc}

000070bc <__sinit>:
    70bc:	6983      	ldr	r3, [r0, #24]
    70be:	b513      	push	{r0, r1, r4, lr}
    70c0:	0004      	movs	r4, r0
    70c2:	2b00      	cmp	r3, #0
    70c4:	d128      	bne.n	7118 <__sinit+0x5c>
    70c6:	6483      	str	r3, [r0, #72]	; 0x48
    70c8:	64c3      	str	r3, [r0, #76]	; 0x4c
    70ca:	6503      	str	r3, [r0, #80]	; 0x50
    70cc:	4b13      	ldr	r3, [pc, #76]	; (711c <__sinit+0x60>)
    70ce:	4a14      	ldr	r2, [pc, #80]	; (7120 <__sinit+0x64>)
    70d0:	681b      	ldr	r3, [r3, #0]
    70d2:	6282      	str	r2, [r0, #40]	; 0x28
    70d4:	9301      	str	r3, [sp, #4]
    70d6:	4298      	cmp	r0, r3
    70d8:	d101      	bne.n	70de <__sinit+0x22>
    70da:	2301      	movs	r3, #1
    70dc:	6183      	str	r3, [r0, #24]
    70de:	0020      	movs	r0, r4
    70e0:	f000 f820 	bl	7124 <__sfp>
    70e4:	6060      	str	r0, [r4, #4]
    70e6:	0020      	movs	r0, r4
    70e8:	f000 f81c 	bl	7124 <__sfp>
    70ec:	60a0      	str	r0, [r4, #8]
    70ee:	0020      	movs	r0, r4
    70f0:	f000 f818 	bl	7124 <__sfp>
    70f4:	2200      	movs	r2, #0
    70f6:	60e0      	str	r0, [r4, #12]
    70f8:	2104      	movs	r1, #4
    70fa:	6860      	ldr	r0, [r4, #4]
    70fc:	f7ff ffa4 	bl	7048 <std.isra.0>
    7100:	2201      	movs	r2, #1
    7102:	2109      	movs	r1, #9
    7104:	68a0      	ldr	r0, [r4, #8]
    7106:	f7ff ff9f 	bl	7048 <std.isra.0>
    710a:	2202      	movs	r2, #2
    710c:	2112      	movs	r1, #18
    710e:	68e0      	ldr	r0, [r4, #12]
    7110:	f7ff ff9a 	bl	7048 <std.isra.0>
    7114:	2301      	movs	r3, #1
    7116:	61a3      	str	r3, [r4, #24]
    7118:	bd13      	pop	{r0, r1, r4, pc}
    711a:	46c0      	nop			; (mov r8, r8)
    711c:	000077f4 	.word	0x000077f4
    7120:	00007039 	.word	0x00007039

00007124 <__sfp>:
    7124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7126:	4b1e      	ldr	r3, [pc, #120]	; (71a0 <__sfp+0x7c>)
    7128:	0007      	movs	r7, r0
    712a:	681e      	ldr	r6, [r3, #0]
    712c:	69b3      	ldr	r3, [r6, #24]
    712e:	2b00      	cmp	r3, #0
    7130:	d102      	bne.n	7138 <__sfp+0x14>
    7132:	0030      	movs	r0, r6
    7134:	f7ff ffc2 	bl	70bc <__sinit>
    7138:	3648      	adds	r6, #72	; 0x48
    713a:	68b4      	ldr	r4, [r6, #8]
    713c:	6873      	ldr	r3, [r6, #4]
    713e:	3b01      	subs	r3, #1
    7140:	d504      	bpl.n	714c <__sfp+0x28>
    7142:	6833      	ldr	r3, [r6, #0]
    7144:	2b00      	cmp	r3, #0
    7146:	d007      	beq.n	7158 <__sfp+0x34>
    7148:	6836      	ldr	r6, [r6, #0]
    714a:	e7f6      	b.n	713a <__sfp+0x16>
    714c:	220c      	movs	r2, #12
    714e:	5ea5      	ldrsh	r5, [r4, r2]
    7150:	2d00      	cmp	r5, #0
    7152:	d00d      	beq.n	7170 <__sfp+0x4c>
    7154:	3468      	adds	r4, #104	; 0x68
    7156:	e7f2      	b.n	713e <__sfp+0x1a>
    7158:	2104      	movs	r1, #4
    715a:	0038      	movs	r0, r7
    715c:	f7ff ff98 	bl	7090 <__sfmoreglue>
    7160:	6030      	str	r0, [r6, #0]
    7162:	2800      	cmp	r0, #0
    7164:	d1f0      	bne.n	7148 <__sfp+0x24>
    7166:	230c      	movs	r3, #12
    7168:	0004      	movs	r4, r0
    716a:	603b      	str	r3, [r7, #0]
    716c:	0020      	movs	r0, r4
    716e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7170:	2301      	movs	r3, #1
    7172:	0020      	movs	r0, r4
    7174:	425b      	negs	r3, r3
    7176:	81e3      	strh	r3, [r4, #14]
    7178:	3302      	adds	r3, #2
    717a:	81a3      	strh	r3, [r4, #12]
    717c:	6665      	str	r5, [r4, #100]	; 0x64
    717e:	6025      	str	r5, [r4, #0]
    7180:	60a5      	str	r5, [r4, #8]
    7182:	6065      	str	r5, [r4, #4]
    7184:	6125      	str	r5, [r4, #16]
    7186:	6165      	str	r5, [r4, #20]
    7188:	61a5      	str	r5, [r4, #24]
    718a:	2208      	movs	r2, #8
    718c:	0029      	movs	r1, r5
    718e:	305c      	adds	r0, #92	; 0x5c
    7190:	f7ff fddf 	bl	6d52 <memset>
    7194:	6365      	str	r5, [r4, #52]	; 0x34
    7196:	63a5      	str	r5, [r4, #56]	; 0x38
    7198:	64a5      	str	r5, [r4, #72]	; 0x48
    719a:	64e5      	str	r5, [r4, #76]	; 0x4c
    719c:	e7e6      	b.n	716c <__sfp+0x48>
    719e:	46c0      	nop			; (mov r8, r8)
    71a0:	000077f4 	.word	0x000077f4

000071a4 <_fwalk_reent>:
    71a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    71a6:	0004      	movs	r4, r0
    71a8:	0007      	movs	r7, r0
    71aa:	2600      	movs	r6, #0
    71ac:	9101      	str	r1, [sp, #4]
    71ae:	3448      	adds	r4, #72	; 0x48
    71b0:	2c00      	cmp	r4, #0
    71b2:	d101      	bne.n	71b8 <_fwalk_reent+0x14>
    71b4:	0030      	movs	r0, r6
    71b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    71b8:	6863      	ldr	r3, [r4, #4]
    71ba:	68a5      	ldr	r5, [r4, #8]
    71bc:	9300      	str	r3, [sp, #0]
    71be:	9b00      	ldr	r3, [sp, #0]
    71c0:	3b01      	subs	r3, #1
    71c2:	9300      	str	r3, [sp, #0]
    71c4:	d501      	bpl.n	71ca <_fwalk_reent+0x26>
    71c6:	6824      	ldr	r4, [r4, #0]
    71c8:	e7f2      	b.n	71b0 <_fwalk_reent+0xc>
    71ca:	89ab      	ldrh	r3, [r5, #12]
    71cc:	2b01      	cmp	r3, #1
    71ce:	d908      	bls.n	71e2 <_fwalk_reent+0x3e>
    71d0:	220e      	movs	r2, #14
    71d2:	5eab      	ldrsh	r3, [r5, r2]
    71d4:	3301      	adds	r3, #1
    71d6:	d004      	beq.n	71e2 <_fwalk_reent+0x3e>
    71d8:	0029      	movs	r1, r5
    71da:	0038      	movs	r0, r7
    71dc:	9b01      	ldr	r3, [sp, #4]
    71de:	4798      	blx	r3
    71e0:	4306      	orrs	r6, r0
    71e2:	3568      	adds	r5, #104	; 0x68
    71e4:	e7eb      	b.n	71be <_fwalk_reent+0x1a>
	...

000071e8 <__swhatbuf_r>:
    71e8:	b570      	push	{r4, r5, r6, lr}
    71ea:	000e      	movs	r6, r1
    71ec:	001d      	movs	r5, r3
    71ee:	230e      	movs	r3, #14
    71f0:	5ec9      	ldrsh	r1, [r1, r3]
    71f2:	b090      	sub	sp, #64	; 0x40
    71f4:	0014      	movs	r4, r2
    71f6:	2900      	cmp	r1, #0
    71f8:	da07      	bge.n	720a <__swhatbuf_r+0x22>
    71fa:	2300      	movs	r3, #0
    71fc:	602b      	str	r3, [r5, #0]
    71fe:	89b3      	ldrh	r3, [r6, #12]
    7200:	061b      	lsls	r3, r3, #24
    7202:	d411      	bmi.n	7228 <__swhatbuf_r+0x40>
    7204:	2380      	movs	r3, #128	; 0x80
    7206:	00db      	lsls	r3, r3, #3
    7208:	e00f      	b.n	722a <__swhatbuf_r+0x42>
    720a:	aa01      	add	r2, sp, #4
    720c:	f000 f94a 	bl	74a4 <_fstat_r>
    7210:	2800      	cmp	r0, #0
    7212:	dbf2      	blt.n	71fa <__swhatbuf_r+0x12>
    7214:	22f0      	movs	r2, #240	; 0xf0
    7216:	9b02      	ldr	r3, [sp, #8]
    7218:	0212      	lsls	r2, r2, #8
    721a:	4013      	ands	r3, r2
    721c:	4a05      	ldr	r2, [pc, #20]	; (7234 <__swhatbuf_r+0x4c>)
    721e:	189b      	adds	r3, r3, r2
    7220:	425a      	negs	r2, r3
    7222:	4153      	adcs	r3, r2
    7224:	602b      	str	r3, [r5, #0]
    7226:	e7ed      	b.n	7204 <__swhatbuf_r+0x1c>
    7228:	2340      	movs	r3, #64	; 0x40
    722a:	2000      	movs	r0, #0
    722c:	6023      	str	r3, [r4, #0]
    722e:	b010      	add	sp, #64	; 0x40
    7230:	bd70      	pop	{r4, r5, r6, pc}
    7232:	46c0      	nop			; (mov r8, r8)
    7234:	ffffe000 	.word	0xffffe000

00007238 <malloc>:
    7238:	b510      	push	{r4, lr}
    723a:	4b03      	ldr	r3, [pc, #12]	; (7248 <malloc+0x10>)
    723c:	0001      	movs	r1, r0
    723e:	6818      	ldr	r0, [r3, #0]
    7240:	f000 f84e 	bl	72e0 <_malloc_r>
    7244:	bd10      	pop	{r4, pc}
    7246:	46c0      	nop			; (mov r8, r8)
    7248:	200000fc 	.word	0x200000fc

0000724c <_free_r>:
    724c:	b570      	push	{r4, r5, r6, lr}
    724e:	0005      	movs	r5, r0
    7250:	2900      	cmp	r1, #0
    7252:	d010      	beq.n	7276 <_free_r+0x2a>
    7254:	1f0c      	subs	r4, r1, #4
    7256:	6823      	ldr	r3, [r4, #0]
    7258:	2b00      	cmp	r3, #0
    725a:	da00      	bge.n	725e <_free_r+0x12>
    725c:	18e4      	adds	r4, r4, r3
    725e:	0028      	movs	r0, r5
    7260:	f000 f946 	bl	74f0 <__malloc_lock>
    7264:	4a1d      	ldr	r2, [pc, #116]	; (72dc <_free_r+0x90>)
    7266:	6813      	ldr	r3, [r2, #0]
    7268:	2b00      	cmp	r3, #0
    726a:	d105      	bne.n	7278 <_free_r+0x2c>
    726c:	6063      	str	r3, [r4, #4]
    726e:	6014      	str	r4, [r2, #0]
    7270:	0028      	movs	r0, r5
    7272:	f000 f93e 	bl	74f2 <__malloc_unlock>
    7276:	bd70      	pop	{r4, r5, r6, pc}
    7278:	42a3      	cmp	r3, r4
    727a:	d909      	bls.n	7290 <_free_r+0x44>
    727c:	6821      	ldr	r1, [r4, #0]
    727e:	1860      	adds	r0, r4, r1
    7280:	4283      	cmp	r3, r0
    7282:	d1f3      	bne.n	726c <_free_r+0x20>
    7284:	6818      	ldr	r0, [r3, #0]
    7286:	685b      	ldr	r3, [r3, #4]
    7288:	1841      	adds	r1, r0, r1
    728a:	6021      	str	r1, [r4, #0]
    728c:	e7ee      	b.n	726c <_free_r+0x20>
    728e:	0013      	movs	r3, r2
    7290:	685a      	ldr	r2, [r3, #4]
    7292:	2a00      	cmp	r2, #0
    7294:	d001      	beq.n	729a <_free_r+0x4e>
    7296:	42a2      	cmp	r2, r4
    7298:	d9f9      	bls.n	728e <_free_r+0x42>
    729a:	6819      	ldr	r1, [r3, #0]
    729c:	1858      	adds	r0, r3, r1
    729e:	42a0      	cmp	r0, r4
    72a0:	d10b      	bne.n	72ba <_free_r+0x6e>
    72a2:	6820      	ldr	r0, [r4, #0]
    72a4:	1809      	adds	r1, r1, r0
    72a6:	1858      	adds	r0, r3, r1
    72a8:	6019      	str	r1, [r3, #0]
    72aa:	4282      	cmp	r2, r0
    72ac:	d1e0      	bne.n	7270 <_free_r+0x24>
    72ae:	6810      	ldr	r0, [r2, #0]
    72b0:	6852      	ldr	r2, [r2, #4]
    72b2:	1841      	adds	r1, r0, r1
    72b4:	6019      	str	r1, [r3, #0]
    72b6:	605a      	str	r2, [r3, #4]
    72b8:	e7da      	b.n	7270 <_free_r+0x24>
    72ba:	42a0      	cmp	r0, r4
    72bc:	d902      	bls.n	72c4 <_free_r+0x78>
    72be:	230c      	movs	r3, #12
    72c0:	602b      	str	r3, [r5, #0]
    72c2:	e7d5      	b.n	7270 <_free_r+0x24>
    72c4:	6821      	ldr	r1, [r4, #0]
    72c6:	1860      	adds	r0, r4, r1
    72c8:	4282      	cmp	r2, r0
    72ca:	d103      	bne.n	72d4 <_free_r+0x88>
    72cc:	6810      	ldr	r0, [r2, #0]
    72ce:	6852      	ldr	r2, [r2, #4]
    72d0:	1841      	adds	r1, r0, r1
    72d2:	6021      	str	r1, [r4, #0]
    72d4:	6062      	str	r2, [r4, #4]
    72d6:	605c      	str	r4, [r3, #4]
    72d8:	e7ca      	b.n	7270 <_free_r+0x24>
    72da:	46c0      	nop			; (mov r8, r8)
    72dc:	200002e8 	.word	0x200002e8

000072e0 <_malloc_r>:
    72e0:	2303      	movs	r3, #3
    72e2:	b570      	push	{r4, r5, r6, lr}
    72e4:	1ccd      	adds	r5, r1, #3
    72e6:	439d      	bics	r5, r3
    72e8:	3508      	adds	r5, #8
    72ea:	0006      	movs	r6, r0
    72ec:	2d0c      	cmp	r5, #12
    72ee:	d21e      	bcs.n	732e <_malloc_r+0x4e>
    72f0:	250c      	movs	r5, #12
    72f2:	42a9      	cmp	r1, r5
    72f4:	d81d      	bhi.n	7332 <_malloc_r+0x52>
    72f6:	0030      	movs	r0, r6
    72f8:	f000 f8fa 	bl	74f0 <__malloc_lock>
    72fc:	4a25      	ldr	r2, [pc, #148]	; (7394 <_malloc_r+0xb4>)
    72fe:	6814      	ldr	r4, [r2, #0]
    7300:	0021      	movs	r1, r4
    7302:	2900      	cmp	r1, #0
    7304:	d119      	bne.n	733a <_malloc_r+0x5a>
    7306:	4c24      	ldr	r4, [pc, #144]	; (7398 <_malloc_r+0xb8>)
    7308:	6823      	ldr	r3, [r4, #0]
    730a:	2b00      	cmp	r3, #0
    730c:	d103      	bne.n	7316 <_malloc_r+0x36>
    730e:	0030      	movs	r0, r6
    7310:	f000 f844 	bl	739c <_sbrk_r>
    7314:	6020      	str	r0, [r4, #0]
    7316:	0029      	movs	r1, r5
    7318:	0030      	movs	r0, r6
    731a:	f000 f83f 	bl	739c <_sbrk_r>
    731e:	1c43      	adds	r3, r0, #1
    7320:	d12c      	bne.n	737c <_malloc_r+0x9c>
    7322:	230c      	movs	r3, #12
    7324:	0030      	movs	r0, r6
    7326:	6033      	str	r3, [r6, #0]
    7328:	f000 f8e3 	bl	74f2 <__malloc_unlock>
    732c:	e003      	b.n	7336 <_malloc_r+0x56>
    732e:	2d00      	cmp	r5, #0
    7330:	dadf      	bge.n	72f2 <_malloc_r+0x12>
    7332:	230c      	movs	r3, #12
    7334:	6033      	str	r3, [r6, #0]
    7336:	2000      	movs	r0, #0
    7338:	bd70      	pop	{r4, r5, r6, pc}
    733a:	680b      	ldr	r3, [r1, #0]
    733c:	1b5b      	subs	r3, r3, r5
    733e:	d41a      	bmi.n	7376 <_malloc_r+0x96>
    7340:	2b0b      	cmp	r3, #11
    7342:	d903      	bls.n	734c <_malloc_r+0x6c>
    7344:	600b      	str	r3, [r1, #0]
    7346:	18cc      	adds	r4, r1, r3
    7348:	6025      	str	r5, [r4, #0]
    734a:	e003      	b.n	7354 <_malloc_r+0x74>
    734c:	428c      	cmp	r4, r1
    734e:	d10e      	bne.n	736e <_malloc_r+0x8e>
    7350:	6863      	ldr	r3, [r4, #4]
    7352:	6013      	str	r3, [r2, #0]
    7354:	0030      	movs	r0, r6
    7356:	f000 f8cc 	bl	74f2 <__malloc_unlock>
    735a:	0020      	movs	r0, r4
    735c:	2207      	movs	r2, #7
    735e:	300b      	adds	r0, #11
    7360:	1d23      	adds	r3, r4, #4
    7362:	4390      	bics	r0, r2
    7364:	1ac3      	subs	r3, r0, r3
    7366:	d0e7      	beq.n	7338 <_malloc_r+0x58>
    7368:	425a      	negs	r2, r3
    736a:	50e2      	str	r2, [r4, r3]
    736c:	e7e4      	b.n	7338 <_malloc_r+0x58>
    736e:	684b      	ldr	r3, [r1, #4]
    7370:	6063      	str	r3, [r4, #4]
    7372:	000c      	movs	r4, r1
    7374:	e7ee      	b.n	7354 <_malloc_r+0x74>
    7376:	000c      	movs	r4, r1
    7378:	6849      	ldr	r1, [r1, #4]
    737a:	e7c2      	b.n	7302 <_malloc_r+0x22>
    737c:	2303      	movs	r3, #3
    737e:	1cc4      	adds	r4, r0, #3
    7380:	439c      	bics	r4, r3
    7382:	42a0      	cmp	r0, r4
    7384:	d0e0      	beq.n	7348 <_malloc_r+0x68>
    7386:	1a21      	subs	r1, r4, r0
    7388:	0030      	movs	r0, r6
    738a:	f000 f807 	bl	739c <_sbrk_r>
    738e:	1c43      	adds	r3, r0, #1
    7390:	d1da      	bne.n	7348 <_malloc_r+0x68>
    7392:	e7c6      	b.n	7322 <_malloc_r+0x42>
    7394:	200002e8 	.word	0x200002e8
    7398:	200002ec 	.word	0x200002ec

0000739c <_sbrk_r>:
    739c:	2300      	movs	r3, #0
    739e:	b570      	push	{r4, r5, r6, lr}
    73a0:	4c06      	ldr	r4, [pc, #24]	; (73bc <_sbrk_r+0x20>)
    73a2:	0005      	movs	r5, r0
    73a4:	0008      	movs	r0, r1
    73a6:	6023      	str	r3, [r4, #0]
    73a8:	f7ff f9c0 	bl	672c <_sbrk>
    73ac:	1c43      	adds	r3, r0, #1
    73ae:	d103      	bne.n	73b8 <_sbrk_r+0x1c>
    73b0:	6823      	ldr	r3, [r4, #0]
    73b2:	2b00      	cmp	r3, #0
    73b4:	d000      	beq.n	73b8 <_sbrk_r+0x1c>
    73b6:	602b      	str	r3, [r5, #0]
    73b8:	bd70      	pop	{r4, r5, r6, pc}
    73ba:	46c0      	nop			; (mov r8, r8)
    73bc:	20000af0 	.word	0x20000af0

000073c0 <__sread>:
    73c0:	b570      	push	{r4, r5, r6, lr}
    73c2:	000c      	movs	r4, r1
    73c4:	250e      	movs	r5, #14
    73c6:	5f49      	ldrsh	r1, [r1, r5]
    73c8:	f000 f894 	bl	74f4 <_read_r>
    73cc:	2800      	cmp	r0, #0
    73ce:	db03      	blt.n	73d8 <__sread+0x18>
    73d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    73d2:	181b      	adds	r3, r3, r0
    73d4:	6563      	str	r3, [r4, #84]	; 0x54
    73d6:	bd70      	pop	{r4, r5, r6, pc}
    73d8:	89a3      	ldrh	r3, [r4, #12]
    73da:	4a02      	ldr	r2, [pc, #8]	; (73e4 <__sread+0x24>)
    73dc:	4013      	ands	r3, r2
    73de:	81a3      	strh	r3, [r4, #12]
    73e0:	e7f9      	b.n	73d6 <__sread+0x16>
    73e2:	46c0      	nop			; (mov r8, r8)
    73e4:	ffffefff 	.word	0xffffefff

000073e8 <__swrite>:
    73e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73ea:	001f      	movs	r7, r3
    73ec:	898b      	ldrh	r3, [r1, #12]
    73ee:	0005      	movs	r5, r0
    73f0:	000c      	movs	r4, r1
    73f2:	0016      	movs	r6, r2
    73f4:	05db      	lsls	r3, r3, #23
    73f6:	d505      	bpl.n	7404 <__swrite+0x1c>
    73f8:	230e      	movs	r3, #14
    73fa:	5ec9      	ldrsh	r1, [r1, r3]
    73fc:	2200      	movs	r2, #0
    73fe:	2302      	movs	r3, #2
    7400:	f000 f862 	bl	74c8 <_lseek_r>
    7404:	89a3      	ldrh	r3, [r4, #12]
    7406:	4a05      	ldr	r2, [pc, #20]	; (741c <__swrite+0x34>)
    7408:	0028      	movs	r0, r5
    740a:	4013      	ands	r3, r2
    740c:	81a3      	strh	r3, [r4, #12]
    740e:	0032      	movs	r2, r6
    7410:	230e      	movs	r3, #14
    7412:	5ee1      	ldrsh	r1, [r4, r3]
    7414:	003b      	movs	r3, r7
    7416:	f000 f81f 	bl	7458 <_write_r>
    741a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    741c:	ffffefff 	.word	0xffffefff

00007420 <__sseek>:
    7420:	b570      	push	{r4, r5, r6, lr}
    7422:	000c      	movs	r4, r1
    7424:	250e      	movs	r5, #14
    7426:	5f49      	ldrsh	r1, [r1, r5]
    7428:	f000 f84e 	bl	74c8 <_lseek_r>
    742c:	89a3      	ldrh	r3, [r4, #12]
    742e:	1c42      	adds	r2, r0, #1
    7430:	d103      	bne.n	743a <__sseek+0x1a>
    7432:	4a05      	ldr	r2, [pc, #20]	; (7448 <__sseek+0x28>)
    7434:	4013      	ands	r3, r2
    7436:	81a3      	strh	r3, [r4, #12]
    7438:	bd70      	pop	{r4, r5, r6, pc}
    743a:	2280      	movs	r2, #128	; 0x80
    743c:	0152      	lsls	r2, r2, #5
    743e:	4313      	orrs	r3, r2
    7440:	81a3      	strh	r3, [r4, #12]
    7442:	6560      	str	r0, [r4, #84]	; 0x54
    7444:	e7f8      	b.n	7438 <__sseek+0x18>
    7446:	46c0      	nop			; (mov r8, r8)
    7448:	ffffefff 	.word	0xffffefff

0000744c <__sclose>:
    744c:	b510      	push	{r4, lr}
    744e:	230e      	movs	r3, #14
    7450:	5ec9      	ldrsh	r1, [r1, r3]
    7452:	f000 f815 	bl	7480 <_close_r>
    7456:	bd10      	pop	{r4, pc}

00007458 <_write_r>:
    7458:	b570      	push	{r4, r5, r6, lr}
    745a:	0005      	movs	r5, r0
    745c:	0008      	movs	r0, r1
    745e:	0011      	movs	r1, r2
    7460:	2200      	movs	r2, #0
    7462:	4c06      	ldr	r4, [pc, #24]	; (747c <_write_r+0x24>)
    7464:	6022      	str	r2, [r4, #0]
    7466:	001a      	movs	r2, r3
    7468:	f7fc f926 	bl	36b8 <_write>
    746c:	1c43      	adds	r3, r0, #1
    746e:	d103      	bne.n	7478 <_write_r+0x20>
    7470:	6823      	ldr	r3, [r4, #0]
    7472:	2b00      	cmp	r3, #0
    7474:	d000      	beq.n	7478 <_write_r+0x20>
    7476:	602b      	str	r3, [r5, #0]
    7478:	bd70      	pop	{r4, r5, r6, pc}
    747a:	46c0      	nop			; (mov r8, r8)
    747c:	20000af0 	.word	0x20000af0

00007480 <_close_r>:
    7480:	2300      	movs	r3, #0
    7482:	b570      	push	{r4, r5, r6, lr}
    7484:	4c06      	ldr	r4, [pc, #24]	; (74a0 <_close_r+0x20>)
    7486:	0005      	movs	r5, r0
    7488:	0008      	movs	r0, r1
    748a:	6023      	str	r3, [r4, #0]
    748c:	f7ff f960 	bl	6750 <_close>
    7490:	1c43      	adds	r3, r0, #1
    7492:	d103      	bne.n	749c <_close_r+0x1c>
    7494:	6823      	ldr	r3, [r4, #0]
    7496:	2b00      	cmp	r3, #0
    7498:	d000      	beq.n	749c <_close_r+0x1c>
    749a:	602b      	str	r3, [r5, #0]
    749c:	bd70      	pop	{r4, r5, r6, pc}
    749e:	46c0      	nop			; (mov r8, r8)
    74a0:	20000af0 	.word	0x20000af0

000074a4 <_fstat_r>:
    74a4:	2300      	movs	r3, #0
    74a6:	b570      	push	{r4, r5, r6, lr}
    74a8:	4c06      	ldr	r4, [pc, #24]	; (74c4 <_fstat_r+0x20>)
    74aa:	0005      	movs	r5, r0
    74ac:	0008      	movs	r0, r1
    74ae:	0011      	movs	r1, r2
    74b0:	6023      	str	r3, [r4, #0]
    74b2:	f7ff f950 	bl	6756 <_fstat>
    74b6:	1c43      	adds	r3, r0, #1
    74b8:	d103      	bne.n	74c2 <_fstat_r+0x1e>
    74ba:	6823      	ldr	r3, [r4, #0]
    74bc:	2b00      	cmp	r3, #0
    74be:	d000      	beq.n	74c2 <_fstat_r+0x1e>
    74c0:	602b      	str	r3, [r5, #0]
    74c2:	bd70      	pop	{r4, r5, r6, pc}
    74c4:	20000af0 	.word	0x20000af0

000074c8 <_lseek_r>:
    74c8:	b570      	push	{r4, r5, r6, lr}
    74ca:	0005      	movs	r5, r0
    74cc:	0008      	movs	r0, r1
    74ce:	0011      	movs	r1, r2
    74d0:	2200      	movs	r2, #0
    74d2:	4c06      	ldr	r4, [pc, #24]	; (74ec <_lseek_r+0x24>)
    74d4:	6022      	str	r2, [r4, #0]
    74d6:	001a      	movs	r2, r3
    74d8:	f7ff f942 	bl	6760 <_lseek>
    74dc:	1c43      	adds	r3, r0, #1
    74de:	d103      	bne.n	74e8 <_lseek_r+0x20>
    74e0:	6823      	ldr	r3, [r4, #0]
    74e2:	2b00      	cmp	r3, #0
    74e4:	d000      	beq.n	74e8 <_lseek_r+0x20>
    74e6:	602b      	str	r3, [r5, #0]
    74e8:	bd70      	pop	{r4, r5, r6, pc}
    74ea:	46c0      	nop			; (mov r8, r8)
    74ec:	20000af0 	.word	0x20000af0

000074f0 <__malloc_lock>:
    74f0:	4770      	bx	lr

000074f2 <__malloc_unlock>:
    74f2:	4770      	bx	lr

000074f4 <_read_r>:
    74f4:	b570      	push	{r4, r5, r6, lr}
    74f6:	0005      	movs	r5, r0
    74f8:	0008      	movs	r0, r1
    74fa:	0011      	movs	r1, r2
    74fc:	2200      	movs	r2, #0
    74fe:	4c06      	ldr	r4, [pc, #24]	; (7518 <_read_r+0x24>)
    7500:	6022      	str	r2, [r4, #0]
    7502:	001a      	movs	r2, r3
    7504:	f7fc f8b6 	bl	3674 <_read>
    7508:	1c43      	adds	r3, r0, #1
    750a:	d103      	bne.n	7514 <_read_r+0x20>
    750c:	6823      	ldr	r3, [r4, #0]
    750e:	2b00      	cmp	r3, #0
    7510:	d000      	beq.n	7514 <_read_r+0x20>
    7512:	602b      	str	r3, [r5, #0]
    7514:	bd70      	pop	{r4, r5, r6, pc}
    7516:	46c0      	nop			; (mov r8, r8)
    7518:	20000af0 	.word	0x20000af0
    751c:	42002c00 	.word	0x42002c00
    7520:	42003000 	.word	0x42003000
    7524:	42003400 	.word	0x42003400
    7528:	42003800 	.word	0x42003800
    752c:	42003c00 	.word	0x42003c00
    7530:	10000800 	.word	0x10000800
    7534:	40002000 	.word	0x40002000
    7538:	00008000 	.word	0x00008000

0000753c <mmc_trans_multipliers>:
    753c:	00000000 0000000a 0000000c 0000000d     ................
    754c:	0000000f 00000014 0000001a 0000001e     ................
    755c:	00000023 00000028 0000002d 00000034     #...(...-...4...
    756c:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000757c <sd_mmc_trans_units>:
    757c:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00007598 <sd_trans_multipliers>:
    7598:	00000000 0000000a 0000000c 0000000d     ................
    75a8:	0000000f 00000014 00000019 0000001e     ................
    75b8:	00000023 00000028 0000002d 00000032     #...(...-...2...
    75c8:	00000037 0000003c 00000046 00000050     7...<...F...P...
    75d8:	00001366 0000143c 0000143c 000012a8     f...<...<.......
    75e8:	0000143c 0000143c 0000143c 0000143c     <...<...<...<...
    75f8:	0000143c 0000143c 0000143c 0000143c     <...<...<...<...
    7608:	0000143c 0000143c 0000143c 0000143c     <...<...<...<...
    7618:	0000143c 0000143c 000012cc 0000143c     <...<.......<...
    7628:	0000143c 0000143c 0000143c 0000143c     <...<...<...<...
    7638:	0000143c 0000143c 00001356 000013ea     <...<...V.......
    7648:	0000143c 0000143c 0000140a 0000143c     <...<.......<...
    7658:	0000143c 0000143c 0000143c 0000143c     <...<...<...<...
    7668:	0000143c 00001392 0000143c 0000143c     <.......<...<...
    7678:	0000142c 0000143c 00001434 0000143c     ,...<...4...<...
    7688:	0000143c 0000143c 0000143c 00001422     <...<...<..."...
    7698:	0000143c 0000143c 0000143c 0000143c     <...<...<...<...
    76a8:	0000143c 0000143c 0000143c 0000143c     <...<...<...<...
    76b8:	0000143c 0000143c 0000143c 0000143c     <...<...<...<...
    76c8:	0000143c 0000143c 0000143c 0000143c     <...<...<...<...
    76d8:	0000143c 0000143c 0000143c 0000143c     <...<...<...<...
    76e8:	0000143c 0000143c 0000143c 0000143c     <...<...<...<...
    76f8:	0000143c 0000143c 0000143c 0000143c     <...<...<...<...
    7708:	0000143c 0000143c 0000143c 0000143c     <...<...<...<...
    7718:	0000143c 0000143c 0000143c 0000143c     <...<...<...<...
    7728:	0000143c 0000143c 0000143c 0000143c     <...<...<...<...
    7738:	0000143c 0000143c 0000135e 31333231     <...<...^...1231
    7748:	32313332 33323133 00000000 000024d6     23123123.....$..
    7758:	000024d2 000024d2 00002540 00002540     .$...$..@%..@%..
    7768:	000024ea 000024dc 000024f0 0000252e     .$...$...$...%..
    7778:	000026c4 000026a4 000026a4 00002730     .&...&...&..0'..
    7788:	000026b6 000026d2 000026a8 000026e0     .&...&...&...&..
    7798:	00002720 00003fb0 00003fbe 00004058      '...?...?..X@..
    77a8:	000040f8 0000415c                       .@..\A..

000077b0 <_usb_device_irq_bits>:
    77b0:	00080004 00800070 01000001 00000200     ....p...........

000077c0 <_usb_endpoint_irq_bits>:
    77c0:	60100c03 42000800 42000c00 42001000     ...`...B...B...B
    77d0:	42001400 42001800 42001c00 2f445322     ...B...B...B"SD/
    77e0:	20434d4d 64726143 65766f20 50532072     MMC Card over SP
    77f0:	00002249                                I"..

000077f4 <_global_impure_ptr>:
    77f4:	20000100                                ... 

000077f8 <__sf_fake_stderr>:
	...

00007818 <__sf_fake_stdin>:
	...

00007838 <__sf_fake_stdout>:
	...

00007858 <_init>:
    7858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    785a:	46c0      	nop			; (mov r8, r8)
    785c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    785e:	bc08      	pop	{r3}
    7860:	469e      	mov	lr, r3
    7862:	4770      	bx	lr

00007864 <__init_array_start>:
    7864:	000000dd 	.word	0x000000dd

00007868 <_fini>:
    7868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    786a:	46c0      	nop			; (mov r8, r8)
    786c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    786e:	bc08      	pop	{r3}
    7870:	469e      	mov	lr, r3
    7872:	4770      	bx	lr

00007874 <__fini_array_start>:
    7874:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <sd_mmc_cards>:
	...
20000014:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

20000030 <udi_api_msc>:
20000030:	0e69 0000 14dd 0000 1505 0000 0e0d 0000     i...............
20000040:	0000 0000                                   ....

20000044 <udi_msc_b_ack_trans>:
20000044:	0101                                             .

20000045 <udi_msc_b_reset_trans>:
20000045:	0001 5500                                        ...

20000048 <udi_msc_csw>:
20000048:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20000058 <udi_msc_inquiry_data.12580>:
20000058:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
20000078:	2e31 3030                                   1.00

2000007c <udc_string_desc>:
2000007c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000098 <udc_string_desc_languageid>:
20000098:	0304 0409                                   ....

2000009c <udc_string_manufacturer_name>:
2000009c:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

200000a8 <udc_string_product_name>:
200000a8:	534d 0043                                   MSC.

200000ac <udc_config>:
200000ac:	00e0 2000 00b8 2000 0000 0000               ... ... ....

200000b8 <udc_config_lsfs>:
200000b8:	00c0 2000 00f4 2000                         ... ... 

200000c0 <udc_desc_fs>:
200000c0:	0209 0020 0101 c000 0932 0004 0200 0608     .. .....2.......
200000d0:	0050 0507 0281 0040 0700 0205 4002 0000     P.....@......@..

200000e0 <udc_device_desc>:
200000e0:	0112 0200 0000 4000 03eb 2403 0100 0201     .......@...$....
200000f0:	0103 0000                                   ....

200000f4 <udi_apis>:
200000f4:	0030 2000                                   0.. 

200000f8 <ss_pins>:
200000f8:	0105                                             .

200000f9 <g_interrupt_enabled>:
200000f9:	0001 0000                                        ...

200000fc <_impure_ptr>:
200000fc:	0100 2000                                   ... 

20000100 <impure_data>:
20000100:	0000 0000 7818 0000 7838 0000 77f8 0000     .....x..8x...w..
	...
