
SoundingSoil_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008058  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00008058  00008058  00018058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000160  20000000  00008060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000994  20000160  000081c0  00020160  2**2
                  ALLOC
  4 .stack        00002004  20000af4  00008b54  00020160  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
  7 .debug_info   0005726a  00000000  00000000  000201e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000074aa  00000000  00000000  0007744b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ec25  00000000  00000000  0007e8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d20  00000000  00000000  0008d51a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000014a0  00000000  00000000  0008e23a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00024663  00000000  00000000  0008f6da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001b1a3  00000000  00000000  000b3d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009c242  00000000  00000000  000ceee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000028dc  00000000  00000000  0016b124  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 2a 00 20 b5 65 00 00 b1 65 00 00 b1 65 00 00     .*. .e...e...e..
	...
      2c:	b1 65 00 00 00 00 00 00 00 00 00 00 b1 65 00 00     .e...........e..
      3c:	b1 65 00 00 b1 65 00 00 b1 65 00 00 b1 65 00 00     .e...e...e...e..
      4c:	b1 65 00 00 ad 4b 00 00 b1 65 00 00 b1 65 00 00     .e...K...e...e..
      5c:	69 43 00 00 b1 65 00 00 65 1e 00 00 75 1e 00 00     iC...e..e...u...
      6c:	85 1e 00 00 95 1e 00 00 a5 1e 00 00 b5 1e 00 00     ................
      7c:	b1 65 00 00 b1 65 00 00 b1 65 00 00 b1 65 00 00     .e...e...e...e..
      8c:	b1 65 00 00 b1 65 00 00 b1 65 00 00 b1 65 00 00     .e...e...e...e..
      9c:	b1 65 00 00 b1 65 00 00 b1 65 00 00 b1 65 00 00     .e...e...e...e..
      ac:	b1 65 00 00 00 00 00 00                             .e......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000160 	.word	0x20000160
      d4:	00000000 	.word	0x00000000
      d8:	00008060 	.word	0x00008060

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000164 	.word	0x20000164
     108:	00008060 	.word	0x00008060
     10c:	00008060 	.word	0x00008060
     110:	00000000 	.word	0x00000000

00000114 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     114:	b530      	push	{r4, r5, lr}
     116:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     118:	a901      	add	r1, sp, #4
     11a:	4b0c      	ldr	r3, [pc, #48]	; (14c <_tc_get_inst_index+0x38>)
     11c:	000a      	movs	r2, r1
     11e:	cb32      	ldmia	r3!, {r1, r4, r5}
     120:	c232      	stmia	r2!, {r1, r4, r5}
     122:	cb12      	ldmia	r3!, {r1, r4}
     124:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     126:	9b01      	ldr	r3, [sp, #4]
     128:	4298      	cmp	r0, r3
     12a:	d00b      	beq.n	144 <_tc_get_inst_index+0x30>
     12c:	2301      	movs	r3, #1
     12e:	a901      	add	r1, sp, #4
     130:	009a      	lsls	r2, r3, #2
     132:	5852      	ldr	r2, [r2, r1]
     134:	4282      	cmp	r2, r0
     136:	d006      	beq.n	146 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     138:	3301      	adds	r3, #1
     13a:	2b05      	cmp	r3, #5
     13c:	d1f8      	bne.n	130 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     13e:	2000      	movs	r0, #0
}
     140:	b007      	add	sp, #28
     142:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     144:	2300      	movs	r3, #0
			return i;
     146:	b2d8      	uxtb	r0, r3
     148:	e7fa      	b.n	140 <_tc_get_inst_index+0x2c>
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	00007cb8 	.word	0x00007cb8

00000150 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     150:	b5f0      	push	{r4, r5, r6, r7, lr}
     152:	b089      	sub	sp, #36	; 0x24
     154:	0006      	movs	r6, r0
     156:	000d      	movs	r5, r1
     158:	0017      	movs	r7, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     15a:	0008      	movs	r0, r1
     15c:	4b80      	ldr	r3, [pc, #512]	; (360 <tc_init+0x210>)
     15e:	4798      	blx	r3
     160:	0004      	movs	r4, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     162:	ab06      	add	r3, sp, #24
     164:	221b      	movs	r2, #27
     166:	701a      	strb	r2, [r3, #0]
     168:	3201      	adds	r2, #1
     16a:	705a      	strb	r2, [r3, #1]
     16c:	709a      	strb	r2, [r3, #2]
     16e:	3201      	adds	r2, #1
     170:	70da      	strb	r2, [r3, #3]
     172:	711a      	strb	r2, [r3, #4]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     174:	aa03      	add	r2, sp, #12
     176:	4b7b      	ldr	r3, [pc, #492]	; (364 <tc_init+0x214>)
     178:	3314      	adds	r3, #20
     17a:	cb03      	ldmia	r3!, {r0, r1}
     17c:	c203      	stmia	r2!, {r0, r1}
     17e:	881b      	ldrh	r3, [r3, #0]
     180:	8013      	strh	r3, [r2, #0]
	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     182:	6035      	str	r5, [r6, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     184:	78bb      	ldrb	r3, [r7, #2]
     186:	2b08      	cmp	r3, #8
     188:	d006      	beq.n	198 <tc_init+0x48>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     18a:	7133      	strb	r3, [r6, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     18c:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     18e:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     190:	07db      	lsls	r3, r3, #31
     192:	d505      	bpl.n	1a0 <tc_init+0x50>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     194:	b009      	add	sp, #36	; 0x24
     196:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     198:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     19a:	07e2      	lsls	r2, r4, #31
     19c:	d5fa      	bpl.n	194 <tc_init+0x44>
     19e:	e7f4      	b.n	18a <tc_init+0x3a>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     1a0:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     1a2:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     1a4:	06db      	lsls	r3, r3, #27
     1a6:	d4f5      	bmi.n	194 <tc_init+0x44>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     1a8:	882b      	ldrh	r3, [r5, #0]
     1aa:	079b      	lsls	r3, r3, #30
     1ac:	d4f2      	bmi.n	194 <tc_init+0x44>
	if (config->pwm_channel[0].enabled) {
     1ae:	7c3b      	ldrb	r3, [r7, #16]
     1b0:	2b00      	cmp	r3, #0
     1b2:	d179      	bne.n	2a8 <tc_init+0x158>
	if (config->pwm_channel[1].enabled) {
     1b4:	7f3b      	ldrb	r3, [r7, #28]
     1b6:	2b00      	cmp	r3, #0
     1b8:	d000      	beq.n	1bc <tc_init+0x6c>
     1ba:	e081      	b.n	2c0 <tc_init+0x170>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1bc:	496a      	ldr	r1, [pc, #424]	; (368 <tc_init+0x218>)
     1be:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     1c0:	0062      	lsls	r2, r4, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     1c2:	ab03      	add	r3, sp, #12
     1c4:	5ad3      	ldrh	r3, [r2, r3]
     1c6:	4303      	orrs	r3, r0
     1c8:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     1ca:	78bb      	ldrb	r3, [r7, #2]
     1cc:	2b08      	cmp	r3, #8
     1ce:	d100      	bne.n	1d2 <tc_init+0x82>
     1d0:	e086      	b.n	2e0 <tc_init+0x190>
	gclk_chan_config.source_generator = config->clock_source;
     1d2:	a901      	add	r1, sp, #4
     1d4:	783b      	ldrb	r3, [r7, #0]
     1d6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     1d8:	ab06      	add	r3, sp, #24
     1da:	5d1c      	ldrb	r4, [r3, r4]
     1dc:	0020      	movs	r0, r4
     1de:	4b63      	ldr	r3, [pc, #396]	; (36c <tc_init+0x21c>)
     1e0:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     1e2:	0020      	movs	r0, r4
     1e4:	4b62      	ldr	r3, [pc, #392]	; (370 <tc_init+0x220>)
     1e6:	4798      	blx	r3
	ctrla_tmp =
     1e8:	8939      	ldrh	r1, [r7, #8]
     1ea:	88bb      	ldrh	r3, [r7, #4]
     1ec:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     1ee:	78b9      	ldrb	r1, [r7, #2]
     1f0:	79ba      	ldrb	r2, [r7, #6]
     1f2:	4311      	orrs	r1, r2
	ctrla_tmp =
     1f4:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     1f6:	787b      	ldrb	r3, [r7, #1]
     1f8:	2b00      	cmp	r3, #0
     1fa:	d002      	beq.n	202 <tc_init+0xb2>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     1fc:	2380      	movs	r3, #128	; 0x80
     1fe:	011b      	lsls	r3, r3, #4
     200:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     202:	6832      	ldr	r2, [r6, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     204:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     206:	b25b      	sxtb	r3, r3
     208:	2b00      	cmp	r3, #0
     20a:	dbfb      	blt.n	204 <tc_init+0xb4>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     20c:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     20e:	7b79      	ldrb	r1, [r7, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     210:	1e4b      	subs	r3, r1, #1
     212:	4199      	sbcs	r1, r3
     214:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     216:	7bbb      	ldrb	r3, [r7, #14]
     218:	2b00      	cmp	r3, #0
     21a:	d001      	beq.n	220 <tc_init+0xd0>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     21c:	2301      	movs	r3, #1
     21e:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     220:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     222:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     224:	b25b      	sxtb	r3, r3
     226:	2b00      	cmp	r3, #0
     228:	dbfb      	blt.n	222 <tc_init+0xd2>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     22a:	23ff      	movs	r3, #255	; 0xff
     22c:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     22e:	2900      	cmp	r1, #0
     230:	d005      	beq.n	23e <tc_init+0xee>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     232:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     234:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     236:	b25b      	sxtb	r3, r3
     238:	2b00      	cmp	r3, #0
     23a:	dbfb      	blt.n	234 <tc_init+0xe4>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     23c:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     23e:	7ab9      	ldrb	r1, [r7, #10]
		if (config->enable_capture_on_channel[i] == true) {
     240:	7afb      	ldrb	r3, [r7, #11]
     242:	2b00      	cmp	r3, #0
     244:	d001      	beq.n	24a <tc_init+0xfa>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     246:	2310      	movs	r3, #16
     248:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     24a:	7b3b      	ldrb	r3, [r7, #12]
     24c:	2b00      	cmp	r3, #0
     24e:	d001      	beq.n	254 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     250:	2320      	movs	r3, #32
     252:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     254:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     256:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     258:	b25b      	sxtb	r3, r3
     25a:	2b00      	cmp	r3, #0
     25c:	dbfb      	blt.n	256 <tc_init+0x106>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     25e:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     260:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     262:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     264:	b25b      	sxtb	r3, r3
     266:	2b00      	cmp	r3, #0
     268:	dbfb      	blt.n	262 <tc_init+0x112>
	switch (module_inst->counter_size) {
     26a:	7933      	ldrb	r3, [r6, #4]
     26c:	2b04      	cmp	r3, #4
     26e:	d03f      	beq.n	2f0 <tc_init+0x1a0>
     270:	2b08      	cmp	r3, #8
     272:	d05e      	beq.n	332 <tc_init+0x1e2>
	return STATUS_ERR_INVALID_ARG;
     274:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     276:	2b00      	cmp	r3, #0
     278:	d000      	beq.n	27c <tc_init+0x12c>
     27a:	e78b      	b.n	194 <tc_init+0x44>
     27c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     27e:	b25b      	sxtb	r3, r3
     280:	2b00      	cmp	r3, #0
     282:	dbfb      	blt.n	27c <tc_init+0x12c>
				= config->counter_16_bit.value;
     284:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
     286:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     288:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     28a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     28c:	b25b      	sxtb	r3, r3
     28e:	2b00      	cmp	r3, #0
     290:	dbfb      	blt.n	28a <tc_init+0x13a>
					config->counter_16_bit.compare_capture_channel[0];
     292:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     294:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     296:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     298:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     29a:	b25b      	sxtb	r3, r3
     29c:	2b00      	cmp	r3, #0
     29e:	dbfb      	blt.n	298 <tc_init+0x148>
					config->counter_16_bit.compare_capture_channel[1];
     2a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     2a2:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     2a4:	2000      	movs	r0, #0
     2a6:	e775      	b.n	194 <tc_init+0x44>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2a8:	a902      	add	r1, sp, #8
     2aa:	2301      	movs	r3, #1
     2ac:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     2ae:	2200      	movs	r2, #0
     2b0:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     2b2:	7e3a      	ldrb	r2, [r7, #24]
     2b4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     2b6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     2b8:	7d38      	ldrb	r0, [r7, #20]
     2ba:	4b2e      	ldr	r3, [pc, #184]	; (374 <tc_init+0x224>)
     2bc:	4798      	blx	r3
     2be:	e779      	b.n	1b4 <tc_init+0x64>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2c0:	a902      	add	r1, sp, #8
     2c2:	2301      	movs	r3, #1
     2c4:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     2c6:	2200      	movs	r2, #0
     2c8:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     2ca:	3224      	adds	r2, #36	; 0x24
     2cc:	18ba      	adds	r2, r7, r2
     2ce:	7812      	ldrb	r2, [r2, #0]
     2d0:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     2d2:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     2d4:	331f      	adds	r3, #31
     2d6:	18fb      	adds	r3, r7, r3
     2d8:	7818      	ldrb	r0, [r3, #0]
     2da:	4b26      	ldr	r3, [pc, #152]	; (374 <tc_init+0x224>)
     2dc:	4798      	blx	r3
     2de:	e76d      	b.n	1bc <tc_init+0x6c>
     2e0:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     2e2:	1c62      	adds	r2, r4, #1
     2e4:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     2e6:	ab03      	add	r3, sp, #12
     2e8:	5ad3      	ldrh	r3, [r2, r3]
     2ea:	4303      	orrs	r3, r0
     2ec:	620b      	str	r3, [r1, #32]
     2ee:	e770      	b.n	1d2 <tc_init+0x82>
     2f0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     2f2:	b25b      	sxtb	r3, r3
     2f4:	2b00      	cmp	r3, #0
     2f6:	dbfb      	blt.n	2f0 <tc_init+0x1a0>
					config->counter_8_bit.value;
     2f8:	2328      	movs	r3, #40	; 0x28
     2fa:	5cfb      	ldrb	r3, [r7, r3]
			hw->COUNT8.COUNT.reg =
     2fc:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2fe:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     300:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     302:	b25b      	sxtb	r3, r3
     304:	2b00      	cmp	r3, #0
     306:	dbfb      	blt.n	300 <tc_init+0x1b0>
					config->counter_8_bit.period;
     308:	2329      	movs	r3, #41	; 0x29
     30a:	5cfb      	ldrb	r3, [r7, r3]
			hw->COUNT8.PER.reg =
     30c:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     30e:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     310:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     312:	b25b      	sxtb	r3, r3
     314:	2b00      	cmp	r3, #0
     316:	dbfb      	blt.n	310 <tc_init+0x1c0>
					config->counter_8_bit.compare_capture_channel[0];
     318:	232a      	movs	r3, #42	; 0x2a
     31a:	5cfb      	ldrb	r3, [r7, r3]
			hw->COUNT8.CC[0].reg =
     31c:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     31e:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     320:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     322:	b25b      	sxtb	r3, r3
     324:	2b00      	cmp	r3, #0
     326:	dbfb      	blt.n	320 <tc_init+0x1d0>
					config->counter_8_bit.compare_capture_channel[1];
     328:	232b      	movs	r3, #43	; 0x2b
     32a:	5cfb      	ldrb	r3, [r7, r3]
			hw->COUNT8.CC[1].reg =
     32c:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     32e:	2000      	movs	r0, #0
     330:	e730      	b.n	194 <tc_init+0x44>
     332:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     334:	b25b      	sxtb	r3, r3
     336:	2b00      	cmp	r3, #0
     338:	dbfb      	blt.n	332 <tc_init+0x1e2>
				= config->counter_32_bit.value;
     33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     33c:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     33e:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     340:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     342:	b25b      	sxtb	r3, r3
     344:	2b00      	cmp	r3, #0
     346:	dbfb      	blt.n	340 <tc_init+0x1f0>
			hw->COUNT32.CC[0].reg =
     348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     34a:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     34c:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     34e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     350:	b25b      	sxtb	r3, r3
     352:	2b00      	cmp	r3, #0
     354:	dbfb      	blt.n	34e <tc_init+0x1fe>
					config->counter_32_bit.compare_capture_channel[1];
     356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     358:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     35a:	2000      	movs	r0, #0
     35c:	e71a      	b.n	194 <tc_init+0x44>
     35e:	46c0      	nop			; (mov r8, r8)
     360:	00000115 	.word	0x00000115
     364:	00007cb8 	.word	0x00007cb8
     368:	40000400 	.word	0x40000400
     36c:	00006459 	.word	0x00006459
     370:	000063cd 	.word	0x000063cd
     374:	00006551 	.word	0x00006551

00000378 <audio_record_1samp>:
	spi_init(&adc_spi_module, ADC_SPI_MODULE, &config_spi_master);
	spi_enable(&adc_spi_module);
}


void audio_record_1samp(void) {
     378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     37a:	46de      	mov	lr, fp
     37c:	4657      	mov	r7, sl
     37e:	464e      	mov	r6, r9
     380:	4645      	mov	r5, r8
     382:	b5e0      	push	{r5, r6, r7, lr}
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     384:	4c1e      	ldr	r4, [pc, #120]	; (400 <audio_record_1samp+0x88>)
     386:	2580      	movs	r5, #128	; 0x80
     388:	036d      	lsls	r5, r5, #13
     38a:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(ADC_CONV_PIN, true);
	delay_us(5);
     38c:	2000      	movs	r0, #0
     38e:	4f1d      	ldr	r7, [pc, #116]	; (404 <audio_record_1samp+0x8c>)
     390:	47b8      	blx	r7
     392:	0002      	movs	r2, r0
     394:	2300      	movs	r3, #0
     396:	0f91      	lsrs	r1, r2, #30
     398:	0090      	lsls	r0, r2, #2
     39a:	1880      	adds	r0, r0, r2
     39c:	4159      	adcs	r1, r3
     39e:	4a1a      	ldr	r2, [pc, #104]	; (408 <audio_record_1samp+0x90>)
     3a0:	2300      	movs	r3, #0
     3a2:	1880      	adds	r0, r0, r2
     3a4:	4159      	adcs	r1, r3
     3a6:	4b19      	ldr	r3, [pc, #100]	; (40c <audio_record_1samp+0x94>)
     3a8:	469b      	mov	fp, r3
     3aa:	4a19      	ldr	r2, [pc, #100]	; (410 <audio_record_1samp+0x98>)
     3ac:	2300      	movs	r3, #0
     3ae:	47d8      	blx	fp
     3b0:	4b18      	ldr	r3, [pc, #96]	; (414 <audio_record_1samp+0x9c>)
     3b2:	4698      	mov	r8, r3
     3b4:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
     3b6:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(ADC_CONV_PIN, false);
	spi_read_buffer_wait(&adc_spi_module, adc_values, 2, 0xFF);
     3b8:	4b17      	ldr	r3, [pc, #92]	; (418 <audio_record_1samp+0xa0>)
     3ba:	4699      	mov	r9, r3
     3bc:	23ff      	movs	r3, #255	; 0xff
     3be:	2202      	movs	r2, #2
     3c0:	4649      	mov	r1, r9
     3c2:	4816      	ldr	r0, [pc, #88]	; (41c <audio_record_1samp+0xa4>)
     3c4:	4e16      	ldr	r6, [pc, #88]	; (420 <audio_record_1samp+0xa8>)
     3c6:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     3c8:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(ADC_CONV_PIN, true);
	printf("0x%02x %02x\n\r", adc_values[0], adc_values[1]);
     3ca:	464b      	mov	r3, r9
     3cc:	785a      	ldrb	r2, [r3, #1]
     3ce:	7819      	ldrb	r1, [r3, #0]
     3d0:	4814      	ldr	r0, [pc, #80]	; (424 <audio_record_1samp+0xac>)
     3d2:	4b15      	ldr	r3, [pc, #84]	; (428 <audio_record_1samp+0xb0>)
     3d4:	4798      	blx	r3
	delay_ms(2);
     3d6:	2000      	movs	r0, #0
     3d8:	47b8      	blx	r7
     3da:	0003      	movs	r3, r0
     3dc:	0018      	movs	r0, r3
     3de:	2100      	movs	r1, #0
     3e0:	1800      	adds	r0, r0, r0
     3e2:	4149      	adcs	r1, r1
     3e4:	4a11      	ldr	r2, [pc, #68]	; (42c <audio_record_1samp+0xb4>)
     3e6:	2300      	movs	r3, #0
     3e8:	1880      	adds	r0, r0, r2
     3ea:	4159      	adcs	r1, r3
     3ec:	4a10      	ldr	r2, [pc, #64]	; (430 <audio_record_1samp+0xb8>)
     3ee:	2300      	movs	r3, #0
     3f0:	47d8      	blx	fp
     3f2:	47c0      	blx	r8
     3f4:	bc3c      	pop	{r2, r3, r4, r5}
     3f6:	4690      	mov	r8, r2
     3f8:	4699      	mov	r9, r3
     3fa:	46a2      	mov	sl, r4
     3fc:	46ab      	mov	fp, r5
     3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     400:	41004400 	.word	0x41004400
     404:	00006341 	.word	0x00006341
     408:	006acfbf 	.word	0x006acfbf
     40c:	00006a3d 	.word	0x00006a3d
     410:	006acfc0 	.word	0x006acfc0
     414:	20000001 	.word	0x20000001
     418:	2000028c 	.word	0x2000028c
     41c:	20000598 	.word	0x20000598
     420:	0000532d 	.word	0x0000532d
     424:	00007cd8 	.word	0x00007cd8
     428:	00006cd5 	.word	0x00006cd5
     42c:	00001b57 	.word	0x00001b57
     430:	00001b58 	.word	0x00001b58

00000434 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     434:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     436:	4b07      	ldr	r3, [pc, #28]	; (454 <sd_mmc_configure_slot+0x20>)
     438:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     43a:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     43c:	5ccb      	ldrb	r3, [r1, r3]
     43e:	1e5a      	subs	r2, r3, #1
     440:	4193      	sbcs	r3, r2
     442:	b2db      	uxtb	r3, r3
     444:	7c4a      	ldrb	r2, [r1, #17]
     446:	6809      	ldr	r1, [r1, #0]
     448:	4803      	ldr	r0, [pc, #12]	; (458 <sd_mmc_configure_slot+0x24>)
     44a:	7800      	ldrb	r0, [r0, #0]
     44c:	4c03      	ldr	r4, [pc, #12]	; (45c <sd_mmc_configure_slot+0x28>)
     44e:	47a0      	blx	r4
}
     450:	bd10      	pop	{r4, pc}
     452:	46c0      	nop			; (mov r8, r8)
     454:	2000017c 	.word	0x2000017c
     458:	20000185 	.word	0x20000185
     45c:	00005c51 	.word	0x00005c51

00000460 <sd_mmc_select_slot>:
{
     460:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     462:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     464:	2800      	cmp	r0, #0
     466:	d001      	beq.n	46c <sd_mmc_select_slot+0xc>
}
     468:	0018      	movs	r0, r3
     46a:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     46c:	4b40      	ldr	r3, [pc, #256]	; (570 <sd_mmc_select_slot+0x110>)
     46e:	7a19      	ldrb	r1, [r3, #8]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     470:	09ca      	lsrs	r2, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     472:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     474:	2a00      	cmp	r2, #0
     476:	d104      	bne.n	482 <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     478:	094b      	lsrs	r3, r1, #5
     47a:	01db      	lsls	r3, r3, #7
     47c:	4a3d      	ldr	r2, [pc, #244]	; (574 <sd_mmc_select_slot+0x114>)
     47e:	4694      	mov	ip, r2
     480:	4463      	add	r3, ip
	return (port_base->IN.reg & pin_mask);
     482:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     484:	221f      	movs	r2, #31
     486:	400a      	ands	r2, r1
     488:	2301      	movs	r3, #1
     48a:	4093      	lsls	r3, r2
     48c:	4218      	tst	r0, r3
     48e:	d010      	beq.n	4b2 <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     490:	4b37      	ldr	r3, [pc, #220]	; (570 <sd_mmc_select_slot+0x110>)
     492:	7b9b      	ldrb	r3, [r3, #14]
     494:	2b01      	cmp	r3, #1
     496:	d004      	beq.n	4a2 <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     498:	2204      	movs	r2, #4
     49a:	4b35      	ldr	r3, [pc, #212]	; (570 <sd_mmc_select_slot+0x110>)
     49c:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     49e:	2302      	movs	r3, #2
     4a0:	e7e2      	b.n	468 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     4a2:	4b35      	ldr	r3, [pc, #212]	; (578 <sd_mmc_select_slot+0x118>)
     4a4:	781b      	ldrb	r3, [r3, #0]
     4a6:	2b00      	cmp	r3, #0
     4a8:	d0f6      	beq.n	498 <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     4aa:	2200      	movs	r2, #0
     4ac:	4b33      	ldr	r3, [pc, #204]	; (57c <sd_mmc_select_slot+0x11c>)
     4ae:	601a      	str	r2, [r3, #0]
     4b0:	e7f2      	b.n	498 <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     4b2:	4b2f      	ldr	r3, [pc, #188]	; (570 <sd_mmc_select_slot+0x110>)
     4b4:	7b9a      	ldrb	r2, [r3, #14]
     4b6:	2a04      	cmp	r2, #4
     4b8:	d005      	beq.n	4c6 <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     4ba:	2a01      	cmp	r2, #1
     4bc:	d033      	beq.n	526 <sd_mmc_select_slot+0xc6>
		return SD_MMC_ERR_UNUSABLE;
     4be:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     4c0:	2a03      	cmp	r2, #3
     4c2:	d0d1      	beq.n	468 <sd_mmc_select_slot+0x8>
     4c4:	e045      	b.n	552 <sd_mmc_select_slot+0xf2>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     4c6:	3a03      	subs	r2, #3
     4c8:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     4ca:	4b2c      	ldr	r3, [pc, #176]	; (57c <sd_mmc_select_slot+0x11c>)
     4cc:	681b      	ldr	r3, [r3, #0]
     4ce:	2b00      	cmp	r3, #0
     4d0:	d017      	beq.n	502 <sd_mmc_select_slot+0xa2>
		sd_mmc_sam_systick_used = false;
     4d2:	2200      	movs	r2, #0
     4d4:	4b28      	ldr	r3, [pc, #160]	; (578 <sd_mmc_select_slot+0x118>)
     4d6:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     4d8:	2000      	movs	r0, #0
     4da:	4b29      	ldr	r3, [pc, #164]	; (580 <sd_mmc_select_slot+0x120>)
     4dc:	4798      	blx	r3
     4de:	22fa      	movs	r2, #250	; 0xfa
     4e0:	0092      	lsls	r2, r2, #2
     4e2:	2300      	movs	r3, #0
     4e4:	2100      	movs	r1, #0
     4e6:	4c27      	ldr	r4, [pc, #156]	; (584 <sd_mmc_select_slot+0x124>)
     4e8:	47a0      	blx	r4
     4ea:	4a27      	ldr	r2, [pc, #156]	; (588 <sd_mmc_select_slot+0x128>)
     4ec:	2300      	movs	r3, #0
     4ee:	1880      	adds	r0, r0, r2
     4f0:	4159      	adcs	r1, r3
     4f2:	4a26      	ldr	r2, [pc, #152]	; (58c <sd_mmc_select_slot+0x12c>)
     4f4:	2300      	movs	r3, #0
     4f6:	4c26      	ldr	r4, [pc, #152]	; (590 <sd_mmc_select_slot+0x130>)
     4f8:	47a0      	blx	r4
     4fa:	4b26      	ldr	r3, [pc, #152]	; (594 <sd_mmc_select_slot+0x134>)
     4fc:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     4fe:	2302      	movs	r3, #2
     500:	e7b2      	b.n	468 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     502:	2401      	movs	r4, #1
     504:	4b1c      	ldr	r3, [pc, #112]	; (578 <sd_mmc_select_slot+0x118>)
     506:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     508:	2000      	movs	r0, #0
     50a:	4b1d      	ldr	r3, [pc, #116]	; (580 <sd_mmc_select_slot+0x120>)
     50c:	4798      	blx	r3
     50e:	21fa      	movs	r1, #250	; 0xfa
     510:	0149      	lsls	r1, r1, #5
     512:	4b21      	ldr	r3, [pc, #132]	; (598 <sd_mmc_select_slot+0x138>)
     514:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     516:	23fa      	movs	r3, #250	; 0xfa
     518:	009b      	lsls	r3, r3, #2
     51a:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     51c:	4b17      	ldr	r3, [pc, #92]	; (57c <sd_mmc_select_slot+0x11c>)
     51e:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     520:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     522:	2302      	movs	r3, #2
     524:	e7a0      	b.n	468 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     526:	4b14      	ldr	r3, [pc, #80]	; (578 <sd_mmc_select_slot+0x118>)
     528:	781b      	ldrb	r3, [r3, #0]
     52a:	2b00      	cmp	r3, #0
     52c:	d007      	beq.n	53e <sd_mmc_select_slot+0xde>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     52e:	4b13      	ldr	r3, [pc, #76]	; (57c <sd_mmc_select_slot+0x11c>)
     530:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     532:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     534:	03d2      	lsls	r2, r2, #15
     536:	d597      	bpl.n	468 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     538:	2200      	movs	r2, #0
     53a:	4b10      	ldr	r3, [pc, #64]	; (57c <sd_mmc_select_slot+0x11c>)
     53c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     53e:	4b0c      	ldr	r3, [pc, #48]	; (570 <sd_mmc_select_slot+0x110>)
     540:	2202      	movs	r2, #2
     542:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     544:	4a15      	ldr	r2, [pc, #84]	; (59c <sd_mmc_select_slot+0x13c>)
     546:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     548:	2201      	movs	r2, #1
     54a:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     54c:	2100      	movs	r1, #0
     54e:	3221      	adds	r2, #33	; 0x21
     550:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     552:	2200      	movs	r2, #0
     554:	4b12      	ldr	r3, [pc, #72]	; (5a0 <sd_mmc_select_slot+0x140>)
     556:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     558:	4c05      	ldr	r4, [pc, #20]	; (570 <sd_mmc_select_slot+0x110>)
     55a:	4b12      	ldr	r3, [pc, #72]	; (5a4 <sd_mmc_select_slot+0x144>)
     55c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     55e:	4b12      	ldr	r3, [pc, #72]	; (5a8 <sd_mmc_select_slot+0x148>)
     560:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     562:	7ba3      	ldrb	r3, [r4, #14]
     564:	3b02      	subs	r3, #2
     566:	425a      	negs	r2, r3
     568:	4153      	adcs	r3, r2
     56a:	b2db      	uxtb	r3, r3
     56c:	e77c      	b.n	468 <sd_mmc_select_slot+0x8>
     56e:	46c0      	nop			; (mov r8, r8)
     570:	2000000c 	.word	0x2000000c
     574:	41004400 	.word	0x41004400
     578:	20000184 	.word	0x20000184
     57c:	e000e010 	.word	0xe000e010
     580:	00006341 	.word	0x00006341
     584:	00006a7d 	.word	0x00006a7d
     588:	00001b57 	.word	0x00001b57
     58c:	00001b58 	.word	0x00001b58
     590:	00006a3d 	.word	0x00006a3d
     594:	20000001 	.word	0x20000001
     598:	000066d5 	.word	0x000066d5
     59c:	00061a80 	.word	0x00061a80
     5a0:	20000185 	.word	0x20000185
     5a4:	2000017c 	.word	0x2000017c
     5a8:	00000435 	.word	0x00000435

000005ac <sd_mmc_cmd13>:
{
     5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5ae:	4d09      	ldr	r5, [pc, #36]	; (5d4 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     5b0:	4f09      	ldr	r7, [pc, #36]	; (5d8 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     5b2:	4e0a      	ldr	r6, [pc, #40]	; (5dc <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     5b4:	2100      	movs	r1, #0
     5b6:	480a      	ldr	r0, [pc, #40]	; (5e0 <sd_mmc_cmd13+0x34>)
     5b8:	47b8      	blx	r7
     5ba:	1e04      	subs	r4, r0, #0
     5bc:	d007      	beq.n	5ce <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     5be:	47b0      	blx	r6
     5c0:	23ff      	movs	r3, #255	; 0xff
     5c2:	4203      	tst	r3, r0
     5c4:	d003      	beq.n	5ce <sd_mmc_cmd13+0x22>
     5c6:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     5c8:	2d00      	cmp	r5, #0
     5ca:	d1f3      	bne.n	5b4 <sd_mmc_cmd13+0x8>
			return false;
     5cc:	2400      	movs	r4, #0
}
     5ce:	0020      	movs	r0, r4
     5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5d2:	46c0      	nop			; (mov r8, r8)
     5d4:	00030d41 	.word	0x00030d41
     5d8:	00005e95 	.word	0x00005e95
     5dc:	00005ead 	.word	0x00005ead
     5e0:	00001b0d 	.word	0x00001b0d

000005e4 <sd_mmc_cmd9_spi>:
{
     5e4:	b510      	push	{r4, lr}
     5e6:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     5e8:	4b0c      	ldr	r3, [pc, #48]	; (61c <sd_mmc_cmd9_spi+0x38>)
     5ea:	681b      	ldr	r3, [r3, #0]
     5ec:	8999      	ldrh	r1, [r3, #12]
     5ee:	0409      	lsls	r1, r1, #16
     5f0:	2301      	movs	r3, #1
     5f2:	9300      	str	r3, [sp, #0]
     5f4:	2210      	movs	r2, #16
     5f6:	480a      	ldr	r0, [pc, #40]	; (620 <sd_mmc_cmd9_spi+0x3c>)
     5f8:	4c0a      	ldr	r4, [pc, #40]	; (624 <sd_mmc_cmd9_spi+0x40>)
     5fa:	47a0      	blx	r4
     5fc:	2800      	cmp	r0, #0
     5fe:	d101      	bne.n	604 <sd_mmc_cmd9_spi+0x20>
}
     600:	b002      	add	sp, #8
     602:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     604:	4b05      	ldr	r3, [pc, #20]	; (61c <sd_mmc_cmd9_spi+0x38>)
     606:	6818      	ldr	r0, [r3, #0]
     608:	3012      	adds	r0, #18
     60a:	2101      	movs	r1, #1
     60c:	4b06      	ldr	r3, [pc, #24]	; (628 <sd_mmc_cmd9_spi+0x44>)
     60e:	4798      	blx	r3
     610:	2800      	cmp	r0, #0
     612:	d0f5      	beq.n	600 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     614:	4b05      	ldr	r3, [pc, #20]	; (62c <sd_mmc_cmd9_spi+0x48>)
     616:	4798      	blx	r3
     618:	e7f2      	b.n	600 <sd_mmc_cmd9_spi+0x1c>
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	2000017c 	.word	0x2000017c
     620:	00081109 	.word	0x00081109
     624:	00005d05 	.word	0x00005d05
     628:	00005f31 	.word	0x00005f31
     62c:	00005fbd 	.word	0x00005fbd

00000630 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     630:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     632:	4b04      	ldr	r3, [pc, #16]	; (644 <sd_mmc_deselect_slot+0x14>)
     634:	781b      	ldrb	r3, [r3, #0]
     636:	2b00      	cmp	r3, #0
     638:	d000      	beq.n	63c <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     63a:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     63c:	2000      	movs	r0, #0
     63e:	4b02      	ldr	r3, [pc, #8]	; (648 <sd_mmc_deselect_slot+0x18>)
     640:	4798      	blx	r3
}
     642:	e7fa      	b.n	63a <sd_mmc_deselect_slot+0xa>
     644:	20000185 	.word	0x20000185
     648:	00005ca5 	.word	0x00005ca5

0000064c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     64c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     64e:	2204      	movs	r2, #4
     650:	4b03      	ldr	r3, [pc, #12]	; (660 <sd_mmc_init+0x14>)
     652:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     654:	32fb      	adds	r2, #251	; 0xfb
     656:	4b03      	ldr	r3, [pc, #12]	; (664 <sd_mmc_init+0x18>)
     658:	701a      	strb	r2, [r3, #0]
	driver_init();
     65a:	4b03      	ldr	r3, [pc, #12]	; (668 <sd_mmc_init+0x1c>)
     65c:	4798      	blx	r3
}
     65e:	bd10      	pop	{r4, pc}
     660:	2000000c 	.word	0x2000000c
     664:	20000185 	.word	0x20000185
     668:	00005b5d 	.word	0x00005b5d

0000066c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     66c:	b5f0      	push	{r4, r5, r6, r7, lr}
     66e:	46c6      	mov	lr, r8
     670:	b500      	push	{lr}
     672:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     674:	4bcb      	ldr	r3, [pc, #812]	; (9a4 <sd_mmc_check+0x338>)
     676:	4798      	blx	r3
     678:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     67a:	2801      	cmp	r0, #1
     67c:	d006      	beq.n	68c <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     67e:	4bca      	ldr	r3, [pc, #808]	; (9a8 <sd_mmc_check+0x33c>)
     680:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     682:	0020      	movs	r0, r4
     684:	b008      	add	sp, #32
     686:	bc04      	pop	{r2}
     688:	4690      	mov	r8, r2
     68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     68c:	4bc7      	ldr	r3, [pc, #796]	; (9ac <sd_mmc_check+0x340>)
     68e:	681b      	ldr	r3, [r3, #0]
     690:	2201      	movs	r2, #1
     692:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     694:	2200      	movs	r2, #0
     696:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     698:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     69a:	4bc5      	ldr	r3, [pc, #788]	; (9b0 <sd_mmc_check+0x344>)
     69c:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     69e:	2100      	movs	r1, #0
     6a0:	2088      	movs	r0, #136	; 0x88
     6a2:	0140      	lsls	r0, r0, #5
     6a4:	4bc3      	ldr	r3, [pc, #780]	; (9b4 <sd_mmc_check+0x348>)
     6a6:	4798      	blx	r3
     6a8:	2800      	cmp	r0, #0
     6aa:	d107      	bne.n	6bc <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     6ac:	4bbf      	ldr	r3, [pc, #764]	; (9ac <sd_mmc_check+0x340>)
     6ae:	681b      	ldr	r3, [r3, #0]
     6b0:	2203      	movs	r2, #3
     6b2:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     6b4:	4bbc      	ldr	r3, [pc, #752]	; (9a8 <sd_mmc_check+0x33c>)
     6b6:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     6b8:	2403      	movs	r4, #3
     6ba:	e7e2      	b.n	682 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     6bc:	21d5      	movs	r1, #213	; 0xd5
     6be:	0049      	lsls	r1, r1, #1
     6c0:	48bd      	ldr	r0, [pc, #756]	; (9b8 <sd_mmc_check+0x34c>)
     6c2:	4bbc      	ldr	r3, [pc, #752]	; (9b4 <sd_mmc_check+0x348>)
     6c4:	4798      	blx	r3
	*v2 = 0;
     6c6:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     6c8:	2800      	cmp	r0, #0
     6ca:	d125      	bne.n	718 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     6cc:	4bb7      	ldr	r3, [pc, #732]	; (9ac <sd_mmc_check+0x340>)
     6ce:	681b      	ldr	r3, [r3, #0]
     6d0:	7bdb      	ldrb	r3, [r3, #15]
     6d2:	07db      	lsls	r3, r3, #31
     6d4:	d500      	bpl.n	6d8 <sd_mmc_check+0x6c>
     6d6:	e1eb      	b.n	ab0 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     6d8:	4bb4      	ldr	r3, [pc, #720]	; (9ac <sd_mmc_check+0x340>)
     6da:	681b      	ldr	r3, [r3, #0]
     6dc:	7bda      	ldrb	r2, [r3, #15]
     6de:	2309      	movs	r3, #9
     6e0:	4013      	ands	r3, r2
     6e2:	2b01      	cmp	r3, #1
     6e4:	d10f      	bne.n	706 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     6e6:	2180      	movs	r1, #128	; 0x80
     6e8:	0089      	lsls	r1, r1, #2
     6ea:	48b4      	ldr	r0, [pc, #720]	; (9bc <sd_mmc_check+0x350>)
     6ec:	4bb1      	ldr	r3, [pc, #708]	; (9b4 <sd_mmc_check+0x348>)
     6ee:	4798      	blx	r3
     6f0:	2800      	cmp	r0, #0
     6f2:	d0db      	beq.n	6ac <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     6f4:	4bad      	ldr	r3, [pc, #692]	; (9ac <sd_mmc_check+0x340>)
     6f6:	681b      	ldr	r3, [r3, #0]
     6f8:	7bdb      	ldrb	r3, [r3, #15]
     6fa:	07db      	lsls	r3, r3, #31
     6fc:	d503      	bpl.n	706 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     6fe:	4bb0      	ldr	r3, [pc, #704]	; (9c0 <sd_mmc_check+0x354>)
     700:	4798      	blx	r3
     702:	2800      	cmp	r0, #0
     704:	d0d2      	beq.n	6ac <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     706:	4baf      	ldr	r3, [pc, #700]	; (9c4 <sd_mmc_check+0x358>)
     708:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     70a:	4ba8      	ldr	r3, [pc, #672]	; (9ac <sd_mmc_check+0x340>)
     70c:	681b      	ldr	r3, [r3, #0]
     70e:	2200      	movs	r2, #0
     710:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     712:	4ba5      	ldr	r3, [pc, #660]	; (9a8 <sd_mmc_check+0x33c>)
     714:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     716:	e7b4      	b.n	682 <sd_mmc_check+0x16>
	resp = driver_get_response();
     718:	4bab      	ldr	r3, [pc, #684]	; (9c8 <sd_mmc_check+0x35c>)
     71a:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     71c:	1c43      	adds	r3, r0, #1
     71e:	d100      	bne.n	722 <sd_mmc_check+0xb6>
     720:	e1c4      	b.n	aac <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     722:	0500      	lsls	r0, r0, #20
     724:	0d00      	lsrs	r0, r0, #20
     726:	23d5      	movs	r3, #213	; 0xd5
     728:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     72a:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     72c:	4298      	cmp	r0, r3
     72e:	d1bd      	bne.n	6ac <sd_mmc_check+0x40>
     730:	e7cc      	b.n	6cc <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     732:	2100      	movs	r1, #0
     734:	48a5      	ldr	r0, [pc, #660]	; (9cc <sd_mmc_check+0x360>)
     736:	4b9f      	ldr	r3, [pc, #636]	; (9b4 <sd_mmc_check+0x348>)
     738:	4798      	blx	r3
     73a:	2800      	cmp	r0, #0
     73c:	d119      	bne.n	772 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     73e:	4b9b      	ldr	r3, [pc, #620]	; (9ac <sd_mmc_check+0x340>)
     740:	681b      	ldr	r3, [r3, #0]
     742:	2202      	movs	r2, #2
     744:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     746:	2100      	movs	r1, #0
     748:	2088      	movs	r0, #136	; 0x88
     74a:	0140      	lsls	r0, r0, #5
     74c:	4b99      	ldr	r3, [pc, #612]	; (9b4 <sd_mmc_check+0x348>)
     74e:	4798      	blx	r3
     750:	2800      	cmp	r0, #0
     752:	d0ab      	beq.n	6ac <sd_mmc_check+0x40>
     754:	4d9e      	ldr	r5, [pc, #632]	; (9d0 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     756:	4f97      	ldr	r7, [pc, #604]	; (9b4 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     758:	4e9b      	ldr	r6, [pc, #620]	; (9c8 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     75a:	2100      	movs	r1, #0
     75c:	489d      	ldr	r0, [pc, #628]	; (9d4 <sd_mmc_check+0x368>)
     75e:	47b8      	blx	r7
     760:	2800      	cmp	r0, #0
     762:	d0a3      	beq.n	6ac <sd_mmc_check+0x40>
		resp = driver_get_response();
     764:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     766:	07c3      	lsls	r3, r0, #31
     768:	d57d      	bpl.n	866 <sd_mmc_check+0x1fa>
     76a:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     76c:	2d00      	cmp	r5, #0
     76e:	d1f4      	bne.n	75a <sd_mmc_check+0xee>
     770:	e79c      	b.n	6ac <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     772:	4b95      	ldr	r3, [pc, #596]	; (9c8 <sd_mmc_check+0x35c>)
     774:	4798      	blx	r3
     776:	0043      	lsls	r3, r0, #1
     778:	d505      	bpl.n	786 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     77a:	4b8c      	ldr	r3, [pc, #560]	; (9ac <sd_mmc_check+0x340>)
     77c:	681a      	ldr	r2, [r3, #0]
     77e:	7bd3      	ldrb	r3, [r2, #15]
     780:	2108      	movs	r1, #8
     782:	430b      	orrs	r3, r1
     784:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     786:	2100      	movs	r1, #0
     788:	4893      	ldr	r0, [pc, #588]	; (9d8 <sd_mmc_check+0x36c>)
     78a:	4b8a      	ldr	r3, [pc, #552]	; (9b4 <sd_mmc_check+0x348>)
     78c:	4798      	blx	r3
     78e:	2800      	cmp	r0, #0
     790:	d08c      	beq.n	6ac <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     792:	4b86      	ldr	r3, [pc, #536]	; (9ac <sd_mmc_check+0x340>)
     794:	681b      	ldr	r3, [r3, #0]
     796:	7bdb      	ldrb	r3, [r3, #15]
     798:	07da      	lsls	r2, r3, #31
     79a:	d400      	bmi.n	79e <sd_mmc_check+0x132>
     79c:	e1a4      	b.n	ae8 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     79e:	4b8f      	ldr	r3, [pc, #572]	; (9dc <sd_mmc_check+0x370>)
     7a0:	4798      	blx	r3
     7a2:	2800      	cmp	r0, #0
     7a4:	d082      	beq.n	6ac <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     7a6:	4b81      	ldr	r3, [pc, #516]	; (9ac <sd_mmc_check+0x340>)
     7a8:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     7aa:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     7ac:	2107      	movs	r1, #7
     7ae:	4019      	ands	r1, r3
     7b0:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     7b2:	488b      	ldr	r0, [pc, #556]	; (9e0 <sd_mmc_check+0x374>)
     7b4:	5808      	ldr	r0, [r1, r0]
     7b6:	21fa      	movs	r1, #250	; 0xfa
     7b8:	0089      	lsls	r1, r1, #2
     7ba:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     7bc:	065b      	lsls	r3, r3, #25
     7be:	0f1b      	lsrs	r3, r3, #28
     7c0:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     7c2:	4888      	ldr	r0, [pc, #544]	; (9e4 <sd_mmc_check+0x378>)
     7c4:	581b      	ldr	r3, [r3, r0]
     7c6:	434b      	muls	r3, r1
     7c8:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     7ca:	7c93      	ldrb	r3, [r2, #18]
     7cc:	099b      	lsrs	r3, r3, #6
     7ce:	d000      	beq.n	7d2 <sd_mmc_check+0x166>
     7d0:	e13c      	b.n	a4c <sd_mmc_check+0x3e0>
     7d2:	7e91      	ldrb	r1, [r2, #26]
     7d4:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     7d6:	7e53      	ldrb	r3, [r2, #25]
     7d8:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     7da:	7e10      	ldrb	r0, [r2, #24]
     7dc:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     7de:	4303      	orrs	r3, r0
     7e0:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     7e2:	7f10      	ldrb	r0, [r2, #28]
     7e4:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     7e6:	7ed1      	ldrb	r1, [r2, #27]
     7e8:	0049      	lsls	r1, r1, #1
     7ea:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     7ec:	051b      	lsls	r3, r3, #20
     7ee:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     7f0:	3301      	adds	r3, #1
     7f2:	2107      	movs	r1, #7
     7f4:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     7f6:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     7f8:	408b      	lsls	r3, r1
     7fa:	7dd0      	ldrb	r0, [r2, #23]
     7fc:	210f      	movs	r1, #15
     7fe:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     800:	408b      	lsls	r3, r1
				/ 1024;
     802:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     804:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     806:	8991      	ldrh	r1, [r2, #12]
     808:	0409      	lsls	r1, r1, #16
     80a:	4877      	ldr	r0, [pc, #476]	; (9e8 <sd_mmc_check+0x37c>)
     80c:	4b69      	ldr	r3, [pc, #420]	; (9b4 <sd_mmc_check+0x348>)
     80e:	4798      	blx	r3
     810:	2800      	cmp	r0, #0
     812:	d100      	bne.n	816 <sd_mmc_check+0x1aa>
     814:	e74a      	b.n	6ac <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     816:	2301      	movs	r3, #1
     818:	9300      	str	r3, [sp, #0]
     81a:	2208      	movs	r2, #8
     81c:	2100      	movs	r1, #0
     81e:	4873      	ldr	r0, [pc, #460]	; (9ec <sd_mmc_check+0x380>)
     820:	4d73      	ldr	r5, [pc, #460]	; (9f0 <sd_mmc_check+0x384>)
     822:	47a8      	blx	r5
     824:	2800      	cmp	r0, #0
     826:	d100      	bne.n	82a <sd_mmc_check+0x1be>
     828:	e740      	b.n	6ac <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     82a:	2101      	movs	r1, #1
     82c:	a806      	add	r0, sp, #24
     82e:	4b71      	ldr	r3, [pc, #452]	; (9f4 <sd_mmc_check+0x388>)
     830:	4798      	blx	r3
     832:	2800      	cmp	r0, #0
     834:	d100      	bne.n	838 <sd_mmc_check+0x1cc>
     836:	e739      	b.n	6ac <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     838:	4b6f      	ldr	r3, [pc, #444]	; (9f8 <sd_mmc_check+0x38c>)
     83a:	4798      	blx	r3
     83c:	2800      	cmp	r0, #0
     83e:	d100      	bne.n	842 <sd_mmc_check+0x1d6>
     840:	e734      	b.n	6ac <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     842:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     844:	781b      	ldrb	r3, [r3, #0]
     846:	220f      	movs	r2, #15
     848:	4013      	ands	r3, r2
     84a:	2b01      	cmp	r3, #1
     84c:	d100      	bne.n	850 <sd_mmc_check+0x1e4>
     84e:	e119      	b.n	a84 <sd_mmc_check+0x418>
     850:	2b00      	cmp	r3, #0
     852:	d100      	bne.n	856 <sd_mmc_check+0x1ea>
     854:	e109      	b.n	a6a <sd_mmc_check+0x3fe>
     856:	2b02      	cmp	r3, #2
     858:	d100      	bne.n	85c <sd_mmc_check+0x1f0>
     85a:	e118      	b.n	a8e <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     85c:	4b53      	ldr	r3, [pc, #332]	; (9ac <sd_mmc_check+0x340>)
     85e:	681b      	ldr	r3, [r3, #0]
     860:	2210      	movs	r2, #16
     862:	741a      	strb	r2, [r3, #16]
     864:	e105      	b.n	a72 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     866:	2100      	movs	r1, #0
     868:	4858      	ldr	r0, [pc, #352]	; (9cc <sd_mmc_check+0x360>)
     86a:	4b52      	ldr	r3, [pc, #328]	; (9b4 <sd_mmc_check+0x348>)
     86c:	4798      	blx	r3
     86e:	2800      	cmp	r0, #0
     870:	d100      	bne.n	874 <sd_mmc_check+0x208>
     872:	e71b      	b.n	6ac <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     874:	4b54      	ldr	r3, [pc, #336]	; (9c8 <sd_mmc_check+0x35c>)
     876:	4798      	blx	r3
     878:	23c0      	movs	r3, #192	; 0xc0
     87a:	05db      	lsls	r3, r3, #23
     87c:	4018      	ands	r0, r3
     87e:	2380      	movs	r3, #128	; 0x80
     880:	05db      	lsls	r3, r3, #23
     882:	4298      	cmp	r0, r3
     884:	d105      	bne.n	892 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     886:	4b49      	ldr	r3, [pc, #292]	; (9ac <sd_mmc_check+0x340>)
     888:	681a      	ldr	r2, [r3, #0]
     88a:	7bd1      	ldrb	r1, [r2, #15]
     88c:	2308      	movs	r3, #8
     88e:	430b      	orrs	r3, r1
     890:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     892:	2100      	movs	r1, #0
     894:	4850      	ldr	r0, [pc, #320]	; (9d8 <sd_mmc_check+0x36c>)
     896:	4b47      	ldr	r3, [pc, #284]	; (9b4 <sd_mmc_check+0x348>)
     898:	4798      	blx	r3
     89a:	2800      	cmp	r0, #0
     89c:	d100      	bne.n	8a0 <sd_mmc_check+0x234>
     89e:	e705      	b.n	6ac <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     8a0:	4b4e      	ldr	r3, [pc, #312]	; (9dc <sd_mmc_check+0x370>)
     8a2:	4798      	blx	r3
     8a4:	2800      	cmp	r0, #0
     8a6:	d100      	bne.n	8aa <sd_mmc_check+0x23e>
     8a8:	e700      	b.n	6ac <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     8aa:	4b40      	ldr	r3, [pc, #256]	; (9ac <sd_mmc_check+0x340>)
     8ac:	681a      	ldr	r2, [r3, #0]
     8ae:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     8b0:	069b      	lsls	r3, r3, #26
     8b2:	0f1b      	lsrs	r3, r3, #28
     8b4:	2b02      	cmp	r3, #2
     8b6:	d100      	bne.n	8ba <sd_mmc_check+0x24e>
     8b8:	e0a8      	b.n	a0c <sd_mmc_check+0x3a0>
     8ba:	d907      	bls.n	8cc <sd_mmc_check+0x260>
     8bc:	2b03      	cmp	r3, #3
     8be:	d100      	bne.n	8c2 <sd_mmc_check+0x256>
     8c0:	e0a7      	b.n	a12 <sd_mmc_check+0x3a6>
     8c2:	2b04      	cmp	r3, #4
     8c4:	d104      	bne.n	8d0 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     8c6:	2340      	movs	r3, #64	; 0x40
     8c8:	7413      	strb	r3, [r2, #16]
     8ca:	e003      	b.n	8d4 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     8cc:	2b01      	cmp	r3, #1
     8ce:	d066      	beq.n	99e <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     8d0:	2312      	movs	r3, #18
     8d2:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     8d4:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     8d6:	0659      	lsls	r1, r3, #25
     8d8:	0f09      	lsrs	r1, r1, #28
     8da:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     8dc:	2007      	movs	r0, #7
     8de:	4003      	ands	r3, r0
     8e0:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     8e2:	483f      	ldr	r0, [pc, #252]	; (9e0 <sd_mmc_check+0x374>)
     8e4:	5818      	ldr	r0, [r3, r0]
     8e6:	23fa      	movs	r3, #250	; 0xfa
     8e8:	009b      	lsls	r3, r3, #2
     8ea:	4343      	muls	r3, r0
     8ec:	4843      	ldr	r0, [pc, #268]	; (9fc <sd_mmc_check+0x390>)
     8ee:	5809      	ldr	r1, [r1, r0]
     8f0:	434b      	muls	r3, r1
     8f2:	6013      	str	r3, [r2, #0]
     8f4:	7e91      	ldrb	r1, [r2, #26]
     8f6:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     8f8:	7e53      	ldrb	r3, [r2, #25]
     8fa:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     8fc:	7e10      	ldrb	r0, [r2, #24]
     8fe:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     900:	4303      	orrs	r3, r0
     902:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     904:	051b      	lsls	r3, r3, #20
     906:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     908:	493d      	ldr	r1, [pc, #244]	; (a00 <sd_mmc_check+0x394>)
     90a:	428b      	cmp	r3, r1
     90c:	d00f      	beq.n	92e <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     90e:	7f10      	ldrb	r0, [r2, #28]
     910:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     912:	7ed1      	ldrb	r1, [r2, #27]
     914:	0049      	lsls	r1, r1, #1
     916:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     918:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     91a:	2007      	movs	r0, #7
     91c:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     91e:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     920:	408b      	lsls	r3, r1
     922:	7dd1      	ldrb	r1, [r2, #23]
     924:	3008      	adds	r0, #8
     926:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     928:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     92a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     92c:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     92e:	7c13      	ldrb	r3, [r2, #16]
     930:	2b3f      	cmp	r3, #63	; 0x3f
     932:	d97b      	bls.n	a2c <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     934:	2100      	movs	r1, #0
     936:	9100      	str	r1, [sp, #0]
     938:	2301      	movs	r3, #1
     93a:	2280      	movs	r2, #128	; 0x80
     93c:	0092      	lsls	r2, r2, #2
     93e:	4831      	ldr	r0, [pc, #196]	; (a04 <sd_mmc_check+0x398>)
     940:	4d2b      	ldr	r5, [pc, #172]	; (9f0 <sd_mmc_check+0x384>)
     942:	47a8      	blx	r5
     944:	2800      	cmp	r0, #0
     946:	d100      	bne.n	94a <sd_mmc_check+0x2de>
     948:	e6b0      	b.n	6ac <sd_mmc_check+0x40>
     94a:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     94c:	4e2e      	ldr	r6, [pc, #184]	; (a08 <sd_mmc_check+0x39c>)
     94e:	a805      	add	r0, sp, #20
     950:	47b0      	blx	r6
     952:	2800      	cmp	r0, #0
     954:	d100      	bne.n	958 <sd_mmc_check+0x2ec>
     956:	e6a9      	b.n	6ac <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     958:	3501      	adds	r5, #1
     95a:	b2ad      	uxth	r5, r5
     95c:	2d32      	cmp	r5, #50	; 0x32
     95e:	d1f6      	bne.n	94e <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     960:	4b12      	ldr	r3, [pc, #72]	; (9ac <sd_mmc_check+0x340>)
     962:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     964:	7e8a      	ldrb	r2, [r1, #26]
     966:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     968:	7e4b      	ldrb	r3, [r1, #25]
     96a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     96c:	7e09      	ldrb	r1, [r1, #24]
     96e:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     970:	430b      	orrs	r3, r1
     972:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     974:	051b      	lsls	r3, r3, #20
     976:	0d1b      	lsrs	r3, r3, #20
     978:	4a21      	ldr	r2, [pc, #132]	; (a00 <sd_mmc_check+0x394>)
     97a:	4293      	cmp	r3, r2
     97c:	d154      	bne.n	a28 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     97e:	4e22      	ldr	r6, [pc, #136]	; (a08 <sd_mmc_check+0x39c>)
     980:	a806      	add	r0, sp, #24
     982:	47b0      	blx	r6
     984:	2800      	cmp	r0, #0
     986:	d100      	bne.n	98a <sd_mmc_check+0x31e>
     988:	e690      	b.n	6ac <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     98a:	3501      	adds	r5, #1
     98c:	b2ad      	uxth	r5, r5
     98e:	2d35      	cmp	r5, #53	; 0x35
     990:	d9f6      	bls.n	980 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     992:	4b06      	ldr	r3, [pc, #24]	; (9ac <sd_mmc_check+0x340>)
     994:	681a      	ldr	r2, [r3, #0]
     996:	9b06      	ldr	r3, [sp, #24]
     998:	085b      	lsrs	r3, r3, #1
     99a:	6053      	str	r3, [r2, #4]
     99c:	e044      	b.n	a28 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     99e:	2314      	movs	r3, #20
     9a0:	7413      	strb	r3, [r2, #16]
     9a2:	e797      	b.n	8d4 <sd_mmc_check+0x268>
     9a4:	00000461 	.word	0x00000461
     9a8:	00000631 	.word	0x00000631
     9ac:	2000017c 	.word	0x2000017c
     9b0:	00005ccd 	.word	0x00005ccd
     9b4:	00005e95 	.word	0x00005e95
     9b8:	00005508 	.word	0x00005508
     9bc:	00001110 	.word	0x00001110
     9c0:	000005ad 	.word	0x000005ad
     9c4:	00000435 	.word	0x00000435
     9c8:	00005ead 	.word	0x00005ead
     9cc:	0000053a 	.word	0x0000053a
     9d0:	00001bef 	.word	0x00001bef
     9d4:	00001101 	.word	0x00001101
     9d8:	0000113b 	.word	0x0000113b
     9dc:	000005e5 	.word	0x000005e5
     9e0:	00007d28 	.word	0x00007d28
     9e4:	00007d44 	.word	0x00007d44
     9e8:	00001137 	.word	0x00001137
     9ec:	00081133 	.word	0x00081133
     9f0:	00005d05 	.word	0x00005d05
     9f4:	00005f31 	.word	0x00005f31
     9f8:	00005fbd 	.word	0x00005fbd
     9fc:	00007ce8 	.word	0x00007ce8
     a00:	00000fff 	.word	0x00000fff
     a04:	00081108 	.word	0x00081108
     a08:	00005eb9 	.word	0x00005eb9
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     a0c:	2322      	movs	r3, #34	; 0x22
     a0e:	7413      	strb	r3, [r2, #16]
     a10:	e760      	b.n	8d4 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     a12:	2330      	movs	r3, #48	; 0x30
     a14:	7413      	strb	r3, [r2, #16]
     a16:	e75d      	b.n	8d4 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     a18:	a806      	add	r0, sp, #24
     a1a:	4b36      	ldr	r3, [pc, #216]	; (af4 <sd_mmc_check+0x488>)
     a1c:	4798      	blx	r3
     a1e:	2800      	cmp	r0, #0
     a20:	d100      	bne.n	a24 <sd_mmc_check+0x3b8>
     a22:	e643      	b.n	6ac <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     a24:	3501      	adds	r5, #1
     a26:	b2ad      	uxth	r5, r5
     a28:	2d7f      	cmp	r5, #127	; 0x7f
     a2a:	d9f5      	bls.n	a18 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     a2c:	2180      	movs	r1, #128	; 0x80
     a2e:	0089      	lsls	r1, r1, #2
     a30:	4831      	ldr	r0, [pc, #196]	; (af8 <sd_mmc_check+0x48c>)
     a32:	4b32      	ldr	r3, [pc, #200]	; (afc <sd_mmc_check+0x490>)
     a34:	4798      	blx	r3
     a36:	2800      	cmp	r0, #0
     a38:	d100      	bne.n	a3c <sd_mmc_check+0x3d0>
     a3a:	e637      	b.n	6ac <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     a3c:	4b30      	ldr	r3, [pc, #192]	; (b00 <sd_mmc_check+0x494>)
     a3e:	4798      	blx	r3
     a40:	2800      	cmp	r0, #0
     a42:	d100      	bne.n	a46 <sd_mmc_check+0x3da>
     a44:	e632      	b.n	6ac <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     a46:	4b2f      	ldr	r3, [pc, #188]	; (b04 <sd_mmc_check+0x498>)
     a48:	4798      	blx	r3
     a4a:	e65e      	b.n	70a <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     a4c:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     a4e:	7e93      	ldrb	r3, [r2, #26]
     a50:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     a52:	7e51      	ldrb	r1, [r2, #25]
     a54:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     a56:	430b      	orrs	r3, r1
     a58:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     a5a:	029b      	lsls	r3, r3, #10
				* 512;
     a5c:	085b      	lsrs	r3, r3, #1
     a5e:	2180      	movs	r1, #128	; 0x80
     a60:	0089      	lsls	r1, r1, #2
     a62:	468c      	mov	ip, r1
     a64:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     a66:	6053      	str	r3, [r2, #4]
     a68:	e6cd      	b.n	806 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     a6a:	4b27      	ldr	r3, [pc, #156]	; (b08 <sd_mmc_check+0x49c>)
     a6c:	681b      	ldr	r3, [r3, #0]
     a6e:	2210      	movs	r2, #16
     a70:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     a72:	4b25      	ldr	r3, [pc, #148]	; (b08 <sd_mmc_check+0x49c>)
     a74:	681b      	ldr	r3, [r3, #0]
     a76:	7bdb      	ldrb	r3, [r3, #15]
     a78:	2209      	movs	r2, #9
     a7a:	4013      	ands	r3, r2
     a7c:	2b01      	cmp	r3, #1
     a7e:	d000      	beq.n	a82 <sd_mmc_check+0x416>
     a80:	e638      	b.n	6f4 <sd_mmc_check+0x88>
     a82:	e630      	b.n	6e6 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     a84:	4b20      	ldr	r3, [pc, #128]	; (b08 <sd_mmc_check+0x49c>)
     a86:	681b      	ldr	r3, [r3, #0]
     a88:	221a      	movs	r2, #26
     a8a:	741a      	strb	r2, [r3, #16]
     a8c:	e7f1      	b.n	a72 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     a8e:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     a90:	789b      	ldrb	r3, [r3, #2]
     a92:	09db      	lsrs	r3, r3, #7
     a94:	2b01      	cmp	r3, #1
     a96:	d104      	bne.n	aa2 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     a98:	4b1b      	ldr	r3, [pc, #108]	; (b08 <sd_mmc_check+0x49c>)
     a9a:	681b      	ldr	r3, [r3, #0]
     a9c:	2230      	movs	r2, #48	; 0x30
     a9e:	741a      	strb	r2, [r3, #16]
     aa0:	e7e7      	b.n	a72 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     aa2:	4b19      	ldr	r3, [pc, #100]	; (b08 <sd_mmc_check+0x49c>)
     aa4:	681b      	ldr	r3, [r3, #0]
     aa6:	2220      	movs	r2, #32
     aa8:	741a      	strb	r2, [r3, #16]
     aaa:	e7e2      	b.n	a72 <sd_mmc_check+0x406>
	*v2 = 0;
     aac:	2600      	movs	r6, #0
     aae:	e60d      	b.n	6cc <sd_mmc_check+0x60>
     ab0:	1e73      	subs	r3, r6, #1
     ab2:	419e      	sbcs	r6, r3
     ab4:	07b3      	lsls	r3, r6, #30
     ab6:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     ab8:	4d14      	ldr	r5, [pc, #80]	; (b0c <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     aba:	4f10      	ldr	r7, [pc, #64]	; (afc <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     abc:	46b8      	mov	r8, r7
		resp = driver_get_response();
     abe:	4e14      	ldr	r6, [pc, #80]	; (b10 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     ac0:	2100      	movs	r1, #0
     ac2:	4814      	ldr	r0, [pc, #80]	; (b14 <sd_mmc_check+0x4a8>)
     ac4:	47b8      	blx	r7
     ac6:	2800      	cmp	r0, #0
     ac8:	d100      	bne.n	acc <sd_mmc_check+0x460>
     aca:	e638      	b.n	73e <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     acc:	9903      	ldr	r1, [sp, #12]
     ace:	4812      	ldr	r0, [pc, #72]	; (b18 <sd_mmc_check+0x4ac>)
     ad0:	47c0      	blx	r8
     ad2:	2800      	cmp	r0, #0
     ad4:	d100      	bne.n	ad8 <sd_mmc_check+0x46c>
     ad6:	e632      	b.n	73e <sd_mmc_check+0xd2>
		resp = driver_get_response();
     ad8:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     ada:	07c3      	lsls	r3, r0, #31
     adc:	d400      	bmi.n	ae0 <sd_mmc_check+0x474>
     ade:	e628      	b.n	732 <sd_mmc_check+0xc6>
     ae0:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     ae2:	2d00      	cmp	r5, #0
     ae4:	d1ec      	bne.n	ac0 <sd_mmc_check+0x454>
     ae6:	e62a      	b.n	73e <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     ae8:	2209      	movs	r2, #9
     aea:	4013      	ands	r3, r2
     aec:	2b01      	cmp	r3, #1
     aee:	d000      	beq.n	af2 <sd_mmc_check+0x486>
     af0:	e609      	b.n	706 <sd_mmc_check+0x9a>
     af2:	e5f8      	b.n	6e6 <sd_mmc_check+0x7a>
     af4:	00005eb9 	.word	0x00005eb9
     af8:	00001110 	.word	0x00001110
     afc:	00005e95 	.word	0x00005e95
     b00:	000005ad 	.word	0x000005ad
     b04:	00000435 	.word	0x00000435
     b08:	2000017c 	.word	0x2000017c
     b0c:	00001bef 	.word	0x00001bef
     b10:	00005ead 	.word	0x00005ead
     b14:	00001137 	.word	0x00001137
     b18:	00001129 	.word	0x00001129

00000b1c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     b1c:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     b1e:	4b06      	ldr	r3, [pc, #24]	; (b38 <sd_mmc_get_type+0x1c>)
     b20:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     b22:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     b24:	2800      	cmp	r0, #0
     b26:	d001      	beq.n	b2c <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     b28:	0018      	movs	r0, r3
     b2a:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     b2c:	4b03      	ldr	r3, [pc, #12]	; (b3c <sd_mmc_get_type+0x20>)
     b2e:	4798      	blx	r3
	return sd_mmc_card->type;
     b30:	4b03      	ldr	r3, [pc, #12]	; (b40 <sd_mmc_get_type+0x24>)
     b32:	681b      	ldr	r3, [r3, #0]
     b34:	7bdb      	ldrb	r3, [r3, #15]
     b36:	e7f7      	b.n	b28 <sd_mmc_get_type+0xc>
     b38:	00000461 	.word	0x00000461
     b3c:	00000631 	.word	0x00000631
     b40:	2000017c 	.word	0x2000017c

00000b44 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     b44:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     b46:	4b06      	ldr	r3, [pc, #24]	; (b60 <sd_mmc_get_capacity+0x1c>)
     b48:	4798      	blx	r3
		return 0;
     b4a:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     b4c:	2800      	cmp	r0, #0
     b4e:	d001      	beq.n	b54 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     b50:	0018      	movs	r0, r3
     b52:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     b54:	4b03      	ldr	r3, [pc, #12]	; (b64 <sd_mmc_get_capacity+0x20>)
     b56:	4798      	blx	r3
	return sd_mmc_card->capacity;
     b58:	4b03      	ldr	r3, [pc, #12]	; (b68 <sd_mmc_get_capacity+0x24>)
     b5a:	681b      	ldr	r3, [r3, #0]
     b5c:	685b      	ldr	r3, [r3, #4]
     b5e:	e7f7      	b.n	b50 <sd_mmc_get_capacity+0xc>
     b60:	00000461 	.word	0x00000461
     b64:	00000631 	.word	0x00000631
     b68:	2000017c 	.word	0x2000017c

00000b6c <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     b6c:	2000      	movs	r0, #0
     b6e:	4770      	bx	lr

00000b70 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     b70:	b570      	push	{r4, r5, r6, lr}
     b72:	b082      	sub	sp, #8
     b74:	000e      	movs	r6, r1
     b76:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     b78:	4b16      	ldr	r3, [pc, #88]	; (bd4 <sd_mmc_init_read_blocks+0x64>)
     b7a:	4798      	blx	r3
     b7c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     b7e:	d002      	beq.n	b86 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     b80:	0020      	movs	r0, r4
     b82:	b002      	add	sp, #8
     b84:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     b86:	4b14      	ldr	r3, [pc, #80]	; (bd8 <sd_mmc_init_read_blocks+0x68>)
     b88:	4798      	blx	r3
     b8a:	2800      	cmp	r0, #0
     b8c:	d017      	beq.n	bbe <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     b8e:	2d01      	cmp	r5, #1
     b90:	d919      	bls.n	bc6 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     b92:	4812      	ldr	r0, [pc, #72]	; (bdc <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     b94:	4b12      	ldr	r3, [pc, #72]	; (be0 <sd_mmc_init_read_blocks+0x70>)
     b96:	681b      	ldr	r3, [r3, #0]
     b98:	7bdb      	ldrb	r3, [r3, #15]
     b9a:	071b      	lsls	r3, r3, #28
     b9c:	d400      	bmi.n	ba0 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     b9e:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     ba0:	2301      	movs	r3, #1
     ba2:	9300      	str	r3, [sp, #0]
     ba4:	002b      	movs	r3, r5
     ba6:	2280      	movs	r2, #128	; 0x80
     ba8:	0092      	lsls	r2, r2, #2
     baa:	0031      	movs	r1, r6
     bac:	4e0d      	ldr	r6, [pc, #52]	; (be4 <sd_mmc_init_read_blocks+0x74>)
     bae:	47b0      	blx	r6
     bb0:	2800      	cmp	r0, #0
     bb2:	d00a      	beq.n	bca <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     bb4:	4b0c      	ldr	r3, [pc, #48]	; (be8 <sd_mmc_init_read_blocks+0x78>)
     bb6:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     bb8:	4b0c      	ldr	r3, [pc, #48]	; (bec <sd_mmc_init_read_blocks+0x7c>)
     bba:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     bbc:	e7e0      	b.n	b80 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     bbe:	4b0c      	ldr	r3, [pc, #48]	; (bf0 <sd_mmc_init_read_blocks+0x80>)
     bc0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     bc2:	3405      	adds	r4, #5
     bc4:	e7dc      	b.n	b80 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     bc6:	480b      	ldr	r0, [pc, #44]	; (bf4 <sd_mmc_init_read_blocks+0x84>)
     bc8:	e7e4      	b.n	b94 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     bca:	4b09      	ldr	r3, [pc, #36]	; (bf0 <sd_mmc_init_read_blocks+0x80>)
     bcc:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     bce:	2405      	movs	r4, #5
     bd0:	e7d6      	b.n	b80 <sd_mmc_init_read_blocks+0x10>
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	00000461 	.word	0x00000461
     bd8:	000005ad 	.word	0x000005ad
     bdc:	00101112 	.word	0x00101112
     be0:	2000017c 	.word	0x2000017c
     be4:	00005d05 	.word	0x00005d05
     be8:	20000180 	.word	0x20000180
     bec:	20000182 	.word	0x20000182
     bf0:	00000631 	.word	0x00000631
     bf4:	00081111 	.word	0x00081111

00000bf8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     bf8:	b510      	push	{r4, lr}
     bfa:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     bfc:	4b07      	ldr	r3, [pc, #28]	; (c1c <sd_mmc_start_read_blocks+0x24>)
     bfe:	4798      	blx	r3
     c00:	2800      	cmp	r0, #0
     c02:	d104      	bne.n	c0e <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     c04:	2200      	movs	r2, #0
     c06:	4b06      	ldr	r3, [pc, #24]	; (c20 <sd_mmc_start_read_blocks+0x28>)
     c08:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     c0a:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     c0c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     c0e:	4a04      	ldr	r2, [pc, #16]	; (c20 <sd_mmc_start_read_blocks+0x28>)
     c10:	8813      	ldrh	r3, [r2, #0]
     c12:	1b1c      	subs	r4, r3, r4
     c14:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     c16:	2000      	movs	r0, #0
     c18:	e7f8      	b.n	c0c <sd_mmc_start_read_blocks+0x14>
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	00005f31 	.word	0x00005f31
     c20:	20000180 	.word	0x20000180

00000c24 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     c24:	b510      	push	{r4, lr}
     c26:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     c28:	4b14      	ldr	r3, [pc, #80]	; (c7c <sd_mmc_wait_end_of_read_blocks+0x58>)
     c2a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     c2c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     c2e:	2800      	cmp	r0, #0
     c30:	d101      	bne.n	c36 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     c32:	0018      	movs	r0, r3
     c34:	bd10      	pop	{r4, pc}
	if (abort) {
     c36:	2c00      	cmp	r4, #0
     c38:	d010      	beq.n	c5c <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     c3a:	2200      	movs	r2, #0
     c3c:	4b10      	ldr	r3, [pc, #64]	; (c80 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     c3e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     c40:	4b10      	ldr	r3, [pc, #64]	; (c84 <sd_mmc_wait_end_of_read_blocks+0x60>)
     c42:	881b      	ldrh	r3, [r3, #0]
     c44:	2b01      	cmp	r3, #1
     c46:	d00f      	beq.n	c68 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     c48:	2100      	movs	r1, #0
     c4a:	480f      	ldr	r0, [pc, #60]	; (c88 <sd_mmc_wait_end_of_read_blocks+0x64>)
     c4c:	4b0f      	ldr	r3, [pc, #60]	; (c8c <sd_mmc_wait_end_of_read_blocks+0x68>)
     c4e:	4798      	blx	r3
     c50:	2800      	cmp	r0, #0
     c52:	d00d      	beq.n	c70 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     c54:	4b0e      	ldr	r3, [pc, #56]	; (c90 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     c56:	4798      	blx	r3
	return SD_MMC_OK;
     c58:	2300      	movs	r3, #0
     c5a:	e7ea      	b.n	c32 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     c5c:	4b08      	ldr	r3, [pc, #32]	; (c80 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     c5e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     c60:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     c62:	2a00      	cmp	r2, #0
     c64:	d0ec      	beq.n	c40 <sd_mmc_wait_end_of_read_blocks+0x1c>
     c66:	e7e4      	b.n	c32 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     c68:	4b09      	ldr	r3, [pc, #36]	; (c90 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     c6a:	4798      	blx	r3
		return SD_MMC_OK;
     c6c:	2300      	movs	r3, #0
     c6e:	e7e0      	b.n	c32 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     c70:	2100      	movs	r1, #0
     c72:	4805      	ldr	r0, [pc, #20]	; (c88 <sd_mmc_wait_end_of_read_blocks+0x64>)
     c74:	4b05      	ldr	r3, [pc, #20]	; (c8c <sd_mmc_wait_end_of_read_blocks+0x68>)
     c76:	4798      	blx	r3
     c78:	e7ec      	b.n	c54 <sd_mmc_wait_end_of_read_blocks+0x30>
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	00005fbd 	.word	0x00005fbd
     c80:	20000180 	.word	0x20000180
     c84:	20000182 	.word	0x20000182
     c88:	0000310c 	.word	0x0000310c
     c8c:	00005e95 	.word	0x00005e95
     c90:	00000631 	.word	0x00000631

00000c94 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     c94:	b570      	push	{r4, r5, r6, lr}
     c96:	b082      	sub	sp, #8
     c98:	000e      	movs	r6, r1
     c9a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     c9c:	4b11      	ldr	r3, [pc, #68]	; (ce4 <sd_mmc_init_write_blocks+0x50>)
     c9e:	4798      	blx	r3
     ca0:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     ca2:	d116      	bne.n	cd2 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     ca4:	2d01      	cmp	r5, #1
     ca6:	d917      	bls.n	cd8 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     ca8:	480f      	ldr	r0, [pc, #60]	; (ce8 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     caa:	4b10      	ldr	r3, [pc, #64]	; (cec <sd_mmc_init_write_blocks+0x58>)
     cac:	681b      	ldr	r3, [r3, #0]
     cae:	7bdb      	ldrb	r3, [r3, #15]
     cb0:	071b      	lsls	r3, r3, #28
     cb2:	d400      	bmi.n	cb6 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     cb4:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     cb6:	2301      	movs	r3, #1
     cb8:	9300      	str	r3, [sp, #0]
     cba:	002b      	movs	r3, r5
     cbc:	2280      	movs	r2, #128	; 0x80
     cbe:	0092      	lsls	r2, r2, #2
     cc0:	0031      	movs	r1, r6
     cc2:	4e0b      	ldr	r6, [pc, #44]	; (cf0 <sd_mmc_init_write_blocks+0x5c>)
     cc4:	47b0      	blx	r6
     cc6:	2800      	cmp	r0, #0
     cc8:	d008      	beq.n	cdc <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     cca:	4b0a      	ldr	r3, [pc, #40]	; (cf4 <sd_mmc_init_write_blocks+0x60>)
     ccc:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     cce:	4b0a      	ldr	r3, [pc, #40]	; (cf8 <sd_mmc_init_write_blocks+0x64>)
     cd0:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     cd2:	0020      	movs	r0, r4
     cd4:	b002      	add	sp, #8
     cd6:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     cd8:	4808      	ldr	r0, [pc, #32]	; (cfc <sd_mmc_init_write_blocks+0x68>)
     cda:	e7e6      	b.n	caa <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     cdc:	4b08      	ldr	r3, [pc, #32]	; (d00 <sd_mmc_init_write_blocks+0x6c>)
     cde:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     ce0:	2405      	movs	r4, #5
     ce2:	e7f6      	b.n	cd2 <sd_mmc_init_write_blocks+0x3e>
     ce4:	00000461 	.word	0x00000461
     ce8:	00109119 	.word	0x00109119
     cec:	2000017c 	.word	0x2000017c
     cf0:	00005d05 	.word	0x00005d05
     cf4:	20000180 	.word	0x20000180
     cf8:	20000182 	.word	0x20000182
     cfc:	00089118 	.word	0x00089118
     d00:	00000631 	.word	0x00000631

00000d04 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     d04:	b510      	push	{r4, lr}
     d06:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     d08:	4b07      	ldr	r3, [pc, #28]	; (d28 <sd_mmc_start_write_blocks+0x24>)
     d0a:	4798      	blx	r3
     d0c:	2800      	cmp	r0, #0
     d0e:	d104      	bne.n	d1a <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     d10:	2200      	movs	r2, #0
     d12:	4b06      	ldr	r3, [pc, #24]	; (d2c <sd_mmc_start_write_blocks+0x28>)
     d14:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     d16:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     d18:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     d1a:	4a04      	ldr	r2, [pc, #16]	; (d2c <sd_mmc_start_write_blocks+0x28>)
     d1c:	8813      	ldrh	r3, [r2, #0]
     d1e:	1b1c      	subs	r4, r3, r4
     d20:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     d22:	2000      	movs	r0, #0
     d24:	e7f8      	b.n	d18 <sd_mmc_start_write_blocks+0x14>
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	00005fc1 	.word	0x00005fc1
     d2c:	20000180 	.word	0x20000180

00000d30 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     d30:	b510      	push	{r4, lr}
     d32:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     d34:	4b0e      	ldr	r3, [pc, #56]	; (d70 <sd_mmc_wait_end_of_write_blocks+0x40>)
     d36:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     d38:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     d3a:	2800      	cmp	r0, #0
     d3c:	d101      	bne.n	d42 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     d3e:	0018      	movs	r0, r3
     d40:	bd10      	pop	{r4, pc}
	if (abort) {
     d42:	2c00      	cmp	r4, #0
     d44:	d00a      	beq.n	d5c <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     d46:	2200      	movs	r2, #0
     d48:	4b0a      	ldr	r3, [pc, #40]	; (d74 <sd_mmc_wait_end_of_write_blocks+0x44>)
     d4a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     d4c:	4b0a      	ldr	r3, [pc, #40]	; (d78 <sd_mmc_wait_end_of_write_blocks+0x48>)
     d4e:	881b      	ldrh	r3, [r3, #0]
     d50:	2b01      	cmp	r3, #1
     d52:	d009      	beq.n	d68 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     d54:	4b09      	ldr	r3, [pc, #36]	; (d7c <sd_mmc_wait_end_of_write_blocks+0x4c>)
     d56:	4798      	blx	r3
	return SD_MMC_OK;
     d58:	2300      	movs	r3, #0
     d5a:	e7f0      	b.n	d3e <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     d5c:	4b05      	ldr	r3, [pc, #20]	; (d74 <sd_mmc_wait_end_of_write_blocks+0x44>)
     d5e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     d60:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     d62:	2a00      	cmp	r2, #0
     d64:	d0f2      	beq.n	d4c <sd_mmc_wait_end_of_write_blocks+0x1c>
     d66:	e7ea      	b.n	d3e <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     d68:	4b04      	ldr	r3, [pc, #16]	; (d7c <sd_mmc_wait_end_of_write_blocks+0x4c>)
     d6a:	4798      	blx	r3
		return SD_MMC_OK;
     d6c:	2300      	movs	r3, #0
     d6e:	e7e6      	b.n	d3e <sd_mmc_wait_end_of_write_blocks+0xe>
     d70:	00006041 	.word	0x00006041
     d74:	20000180 	.word	0x20000180
     d78:	20000182 	.word	0x20000182
     d7c:	00000631 	.word	0x00000631

00000d80 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
     d80:	2000      	movs	r0, #0
     d82:	4770      	bx	lr

00000d84 <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
     d84:	1e43      	subs	r3, r0, #1
     d86:	4198      	sbcs	r0, r3
     d88:	b2c0      	uxtb	r0, r0
     d8a:	4b03      	ldr	r3, [pc, #12]	; (d98 <udi_msc_trans_ack+0x14>)
     d8c:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
     d8e:	2201      	movs	r2, #1
     d90:	4b02      	ldr	r3, [pc, #8]	; (d9c <udi_msc_trans_ack+0x18>)
     d92:	701a      	strb	r2, [r3, #0]
}
     d94:	4770      	bx	lr
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	200002f0 	.word	0x200002f0
     d9c:	20000044 	.word	0x20000044

00000da0 <udi_msc_cbw_wait>:
{
     da0:	b510      	push	{r4, lr}
     da2:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     da4:	4b08      	ldr	r3, [pc, #32]	; (dc8 <udi_msc_cbw_wait+0x28>)
     da6:	9300      	str	r3, [sp, #0]
     da8:	231f      	movs	r3, #31
     daa:	4a08      	ldr	r2, [pc, #32]	; (dcc <udi_msc_cbw_wait+0x2c>)
     dac:	2101      	movs	r1, #1
     dae:	2002      	movs	r0, #2
     db0:	4c07      	ldr	r4, [pc, #28]	; (dd0 <udi_msc_cbw_wait+0x30>)
     db2:	47a0      	blx	r4
     db4:	2800      	cmp	r0, #0
     db6:	d001      	beq.n	dbc <udi_msc_cbw_wait+0x1c>
}
     db8:	b002      	add	sp, #8
     dba:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
     dbc:	4905      	ldr	r1, [pc, #20]	; (dd4 <udi_msc_cbw_wait+0x34>)
     dbe:	3002      	adds	r0, #2
     dc0:	4b05      	ldr	r3, [pc, #20]	; (dd8 <udi_msc_cbw_wait+0x38>)
     dc2:	4798      	blx	r3
}
     dc4:	e7f8      	b.n	db8 <udi_msc_cbw_wait+0x18>
     dc6:	46c0      	nop			; (mov r8, r8)
     dc8:	000011c5 	.word	0x000011c5
     dcc:	200001ac 	.word	0x200001ac
     dd0:	0000320d 	.word	0x0000320d
     dd4:	00000da1 	.word	0x00000da1
     dd8:	000031b5 	.word	0x000031b5

00000ddc <udi_msc_enable>:
{
     ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_msc_b_trans_req = false;
     dde:	2300      	movs	r3, #0
     de0:	4a13      	ldr	r2, [pc, #76]	; (e30 <udi_msc_enable+0x54>)
     de2:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
     de4:	4a13      	ldr	r2, [pc, #76]	; (e34 <udi_msc_enable+0x58>)
     de6:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
     de8:	3301      	adds	r3, #1
     dea:	4a13      	ldr	r2, [pc, #76]	; (e38 <udi_msc_enable+0x5c>)
     dec:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
     dee:	4a13      	ldr	r2, [pc, #76]	; (e3c <udi_msc_enable+0x60>)
     df0:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
     df2:	4b13      	ldr	r3, [pc, #76]	; (e40 <udi_msc_enable+0x64>)
     df4:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
     df6:	2800      	cmp	r0, #0
     df8:	d105      	bne.n	e06 <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
     dfa:	2200      	movs	r2, #0
     dfc:	4b11      	ldr	r3, [pc, #68]	; (e44 <udi_msc_enable+0x68>)
     dfe:	701a      	strb	r2, [r3, #0]
		return false; // No lun available, then not authorize to enable interface
     e00:	2500      	movs	r5, #0
}
     e02:	0028      	movs	r0, r5
     e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_nb_lun--;
     e06:	3801      	subs	r0, #1
     e08:	4b0e      	ldr	r3, [pc, #56]	; (e44 <udi_msc_enable+0x68>)
     e0a:	7018      	strb	r0, [r3, #0]
	if (!UDI_MSC_ENABLE_EXT())
     e0c:	4b0e      	ldr	r3, [pc, #56]	; (e48 <udi_msc_enable+0x6c>)
     e0e:	4798      	blx	r3
     e10:	1e05      	subs	r5, r0, #0
     e12:	d0f6      	beq.n	e02 <udi_msc_enable+0x26>
     e14:	2400      	movs	r4, #0
		mem_unload(lun, false);
     e16:	4f0d      	ldr	r7, [pc, #52]	; (e4c <udi_msc_enable+0x70>)
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
     e18:	4e0a      	ldr	r6, [pc, #40]	; (e44 <udi_msc_enable+0x68>)
		mem_unload(lun, false);
     e1a:	2100      	movs	r1, #0
     e1c:	0020      	movs	r0, r4
     e1e:	47b8      	blx	r7
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
     e20:	3401      	adds	r4, #1
     e22:	b2e4      	uxtb	r4, r4
     e24:	7833      	ldrb	r3, [r6, #0]
     e26:	42a3      	cmp	r3, r4
     e28:	d2f7      	bcs.n	e1a <udi_msc_enable+0x3e>
	udi_msc_cbw_wait();
     e2a:	4b09      	ldr	r3, [pc, #36]	; (e50 <udi_msc_enable+0x74>)
     e2c:	4798      	blx	r3
	return true;
     e2e:	e7e8      	b.n	e02 <udi_msc_enable+0x26>
     e30:	200001a2 	.word	0x200001a2
     e34:	200001a0 	.word	0x200001a0
     e38:	20000044 	.word	0x20000044
     e3c:	20000045 	.word	0x20000045
     e40:	00006065 	.word	0x00006065
     e44:	200001d0 	.word	0x200001d0
     e48:	000038b1 	.word	0x000038b1
     e4c:	0000609d 	.word	0x0000609d
     e50:	00000da1 	.word	0x00000da1

00000e54 <udi_msc_csw_sent>:
{
     e54:	b510      	push	{r4, lr}
	udi_msc_cbw_wait();
     e56:	4b01      	ldr	r3, [pc, #4]	; (e5c <udi_msc_csw_sent+0x8>)
     e58:	4798      	blx	r3
}
     e5a:	bd10      	pop	{r4, pc}
     e5c:	00000da1 	.word	0x00000da1

00000e60 <udi_msc_csw_send>:
{
     e60:	b510      	push	{r4, lr}
     e62:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     e64:	4b08      	ldr	r3, [pc, #32]	; (e88 <udi_msc_csw_send+0x28>)
     e66:	9300      	str	r3, [sp, #0]
     e68:	230d      	movs	r3, #13
     e6a:	4a08      	ldr	r2, [pc, #32]	; (e8c <udi_msc_csw_send+0x2c>)
     e6c:	2100      	movs	r1, #0
     e6e:	2081      	movs	r0, #129	; 0x81
     e70:	4c07      	ldr	r4, [pc, #28]	; (e90 <udi_msc_csw_send+0x30>)
     e72:	47a0      	blx	r4
     e74:	2800      	cmp	r0, #0
     e76:	d001      	beq.n	e7c <udi_msc_csw_send+0x1c>
}
     e78:	b002      	add	sp, #8
     e7a:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     e7c:	4905      	ldr	r1, [pc, #20]	; (e94 <udi_msc_csw_send+0x34>)
     e7e:	3081      	adds	r0, #129	; 0x81
     e80:	4b05      	ldr	r3, [pc, #20]	; (e98 <udi_msc_csw_send+0x38>)
     e82:	4798      	blx	r3
}
     e84:	e7f8      	b.n	e78 <udi_msc_csw_send+0x18>
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	00000e55 	.word	0x00000e55
     e8c:	20000048 	.word	0x20000048
     e90:	0000320d 	.word	0x0000320d
     e94:	00000e61 	.word	0x00000e61
     e98:	000031b5 	.word	0x000031b5

00000e9c <udi_msc_cbw_invalid>:
{
     e9c:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
     e9e:	4b06      	ldr	r3, [pc, #24]	; (eb8 <udi_msc_cbw_invalid+0x1c>)
     ea0:	781b      	ldrb	r3, [r3, #0]
     ea2:	2b00      	cmp	r3, #0
     ea4:	d100      	bne.n	ea8 <udi_msc_cbw_invalid+0xc>
}
     ea6:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_OUT);
     ea8:	2002      	movs	r0, #2
     eaa:	4b04      	ldr	r3, [pc, #16]	; (ebc <udi_msc_cbw_invalid+0x20>)
     eac:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
     eae:	4904      	ldr	r1, [pc, #16]	; (ec0 <udi_msc_cbw_invalid+0x24>)
     eb0:	2002      	movs	r0, #2
     eb2:	4b04      	ldr	r3, [pc, #16]	; (ec4 <udi_msc_cbw_invalid+0x28>)
     eb4:	4798      	blx	r3
     eb6:	e7f6      	b.n	ea6 <udi_msc_cbw_invalid+0xa>
     eb8:	200001a0 	.word	0x200001a0
     ebc:	00003041 	.word	0x00003041
     ec0:	00000e9d 	.word	0x00000e9d
     ec4:	000031b5 	.word	0x000031b5

00000ec8 <udi_msc_csw_invalid>:
{
     ec8:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
     eca:	4b06      	ldr	r3, [pc, #24]	; (ee4 <udi_msc_csw_invalid+0x1c>)
     ecc:	781b      	ldrb	r3, [r3, #0]
     ece:	2b00      	cmp	r3, #0
     ed0:	d100      	bne.n	ed4 <udi_msc_csw_invalid+0xc>
}
     ed2:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_IN);
     ed4:	2081      	movs	r0, #129	; 0x81
     ed6:	4b04      	ldr	r3, [pc, #16]	; (ee8 <udi_msc_csw_invalid+0x20>)
     ed8:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
     eda:	4904      	ldr	r1, [pc, #16]	; (eec <udi_msc_csw_invalid+0x24>)
     edc:	2081      	movs	r0, #129	; 0x81
     ede:	4b04      	ldr	r3, [pc, #16]	; (ef0 <udi_msc_csw_invalid+0x28>)
     ee0:	4798      	blx	r3
     ee2:	e7f6      	b.n	ed2 <udi_msc_csw_invalid+0xa>
     ee4:	200001a0 	.word	0x200001a0
     ee8:	00003041 	.word	0x00003041
     eec:	00000ec9 	.word	0x00000ec9
     ef0:	000031b5 	.word	0x000031b5

00000ef4 <udi_msc_csw_process>:
{
     ef4:	b510      	push	{r4, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
     ef6:	4b0b      	ldr	r3, [pc, #44]	; (f24 <udi_msc_csw_process+0x30>)
     ef8:	689b      	ldr	r3, [r3, #8]
     efa:	2b00      	cmp	r3, #0
     efc:	d006      	beq.n	f0c <udi_msc_csw_process+0x18>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     efe:	4b0a      	ldr	r3, [pc, #40]	; (f28 <udi_msc_csw_process+0x34>)
     f00:	7b1b      	ldrb	r3, [r3, #12]
     f02:	2b7f      	cmp	r3, #127	; 0x7f
     f04:	d809      	bhi.n	f1a <udi_msc_csw_process+0x26>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     f06:	2002      	movs	r0, #2
     f08:	4b08      	ldr	r3, [pc, #32]	; (f2c <udi_msc_csw_process+0x38>)
     f0a:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     f0c:	4b06      	ldr	r3, [pc, #24]	; (f28 <udi_msc_csw_process+0x34>)
     f0e:	685a      	ldr	r2, [r3, #4]
     f10:	4b04      	ldr	r3, [pc, #16]	; (f24 <udi_msc_csw_process+0x30>)
     f12:	605a      	str	r2, [r3, #4]
	udi_msc_csw_send();
     f14:	4b06      	ldr	r3, [pc, #24]	; (f30 <udi_msc_csw_process+0x3c>)
     f16:	4798      	blx	r3
}
     f18:	bd10      	pop	{r4, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
     f1a:	2081      	movs	r0, #129	; 0x81
     f1c:	4b03      	ldr	r3, [pc, #12]	; (f2c <udi_msc_csw_process+0x38>)
     f1e:	4798      	blx	r3
     f20:	e7f4      	b.n	f0c <udi_msc_csw_process+0x18>
     f22:	46c0      	nop			; (mov r8, r8)
     f24:	20000048 	.word	0x20000048
     f28:	200001ac 	.word	0x200001ac
     f2c:	00003041 	.word	0x00003041
     f30:	00000e61 	.word	0x00000e61

00000f34 <udi_msc_clear_sense>:
{
     f34:	b510      	push	{r4, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     f36:	4c05      	ldr	r4, [pc, #20]	; (f4c <udi_msc_clear_sense+0x18>)
     f38:	2212      	movs	r2, #18
     f3a:	2100      	movs	r1, #0
     f3c:	0020      	movs	r0, r4
     f3e:	4b04      	ldr	r3, [pc, #16]	; (f50 <udi_msc_clear_sense+0x1c>)
     f40:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     f42:	23f0      	movs	r3, #240	; 0xf0
     f44:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     f46:	3be6      	subs	r3, #230	; 0xe6
     f48:	71e3      	strb	r3, [r4, #7]
}
     f4a:	bd10      	pop	{r4, pc}
     f4c:	200001d4 	.word	0x200001d4
     f50:	00006cc3 	.word	0x00006cc3

00000f54 <udi_msc_sense_fail>:
{
     f54:	b570      	push	{r4, r5, r6, lr}
     f56:	0006      	movs	r6, r0
     f58:	000d      	movs	r5, r1
     f5a:	0014      	movs	r4, r2
	udi_msc_clear_sense();
     f5c:	4b08      	ldr	r3, [pc, #32]	; (f80 <udi_msc_sense_fail+0x2c>)
     f5e:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     f60:	2201      	movs	r2, #1
     f62:	4b08      	ldr	r3, [pc, #32]	; (f84 <udi_msc_sense_fail+0x30>)
     f64:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     f66:	4b08      	ldr	r3, [pc, #32]	; (f88 <udi_msc_sense_fail+0x34>)
     f68:	709e      	strb	r6, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
     f6a:	0e22      	lsrs	r2, r4, #24
     f6c:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
     f6e:	0c22      	lsrs	r2, r4, #16
     f70:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
     f72:	0a22      	lsrs	r2, r4, #8
     f74:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
     f76:	719c      	strb	r4, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     f78:	0a2a      	lsrs	r2, r5, #8
     f7a:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
     f7c:	735d      	strb	r5, [r3, #13]
}
     f7e:	bd70      	pop	{r4, r5, r6, pc}
     f80:	00000f35 	.word	0x00000f35
     f84:	20000048 	.word	0x20000048
     f88:	200001d4 	.word	0x200001d4

00000f8c <udi_msc_sense_fail_cdb_invalid>:
{
     f8c:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
     f8e:	2200      	movs	r2, #0
     f90:	2190      	movs	r1, #144	; 0x90
     f92:	0189      	lsls	r1, r1, #6
     f94:	2005      	movs	r0, #5
     f96:	4b01      	ldr	r3, [pc, #4]	; (f9c <udi_msc_sense_fail_cdb_invalid+0x10>)
     f98:	4798      	blx	r3
}
     f9a:	bd10      	pop	{r4, pc}
     f9c:	00000f55 	.word	0x00000f55

00000fa0 <udi_msc_cbw_validate>:
{
     fa0:	b510      	push	{r4, lr}
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     fa2:	4b09      	ldr	r3, [pc, #36]	; (fc8 <udi_msc_cbw_validate+0x28>)
     fa4:	7b1b      	ldrb	r3, [r3, #12]
     fa6:	4059      	eors	r1, r3
     fa8:	b249      	sxtb	r1, r1
     faa:	2900      	cmp	r1, #0
     fac:	db04      	blt.n	fb8 <udi_msc_cbw_validate+0x18>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     fae:	4b07      	ldr	r3, [pc, #28]	; (fcc <udi_msc_cbw_validate+0x2c>)
     fb0:	689a      	ldr	r2, [r3, #8]
	return true;
     fb2:	2301      	movs	r3, #1
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     fb4:	4282      	cmp	r2, r0
     fb6:	d204      	bcs.n	fc2 <udi_msc_cbw_validate+0x22>
		udi_msc_sense_fail_cdb_invalid();
     fb8:	4b05      	ldr	r3, [pc, #20]	; (fd0 <udi_msc_cbw_validate+0x30>)
     fba:	4798      	blx	r3
		udi_msc_csw_process();
     fbc:	4b05      	ldr	r3, [pc, #20]	; (fd4 <udi_msc_cbw_validate+0x34>)
     fbe:	4798      	blx	r3
		return false;
     fc0:	2300      	movs	r3, #0
}
     fc2:	0018      	movs	r0, r3
     fc4:	bd10      	pop	{r4, pc}
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	200001ac 	.word	0x200001ac
     fcc:	20000048 	.word	0x20000048
     fd0:	00000f8d 	.word	0x00000f8d
     fd4:	00000ef5 	.word	0x00000ef5

00000fd8 <udi_msc_sense_fail_hardware>:
{
     fd8:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
     fda:	2200      	movs	r2, #0
     fdc:	2100      	movs	r1, #0
     fde:	2004      	movs	r0, #4
     fe0:	4b01      	ldr	r3, [pc, #4]	; (fe8 <udi_msc_sense_fail_hardware+0x10>)
     fe2:	4798      	blx	r3
}
     fe4:	bd10      	pop	{r4, pc}
     fe6:	46c0      	nop			; (mov r8, r8)
     fe8:	00000f55 	.word	0x00000f55

00000fec <udi_msc_data_send>:
{
     fec:	b510      	push	{r4, lr}
     fee:	b082      	sub	sp, #8
     ff0:	0002      	movs	r2, r0
     ff2:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
     ff4:	4907      	ldr	r1, [pc, #28]	; (1014 <udi_msc_data_send+0x28>)
     ff6:	9100      	str	r1, [sp, #0]
     ff8:	2101      	movs	r1, #1
     ffa:	2081      	movs	r0, #129	; 0x81
     ffc:	4c06      	ldr	r4, [pc, #24]	; (1018 <udi_msc_data_send+0x2c>)
     ffe:	47a0      	blx	r4
    1000:	2800      	cmp	r0, #0
    1002:	d001      	beq.n	1008 <udi_msc_data_send+0x1c>
}
    1004:	b002      	add	sp, #8
    1006:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_hardware();
    1008:	4b04      	ldr	r3, [pc, #16]	; (101c <udi_msc_data_send+0x30>)
    100a:	4798      	blx	r3
		udi_msc_csw_process();
    100c:	4b04      	ldr	r3, [pc, #16]	; (1020 <udi_msc_data_send+0x34>)
    100e:	4798      	blx	r3
}
    1010:	e7f8      	b.n	1004 <udi_msc_data_send+0x18>
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	00001065 	.word	0x00001065
    1018:	0000320d 	.word	0x0000320d
    101c:	00000fd9 	.word	0x00000fd9
    1020:	00000ef5 	.word	0x00000ef5

00001024 <udi_msc_sense_fail_busy_or_change>:
{
    1024:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    1026:	2200      	movs	r2, #0
    1028:	21a0      	movs	r1, #160	; 0xa0
    102a:	0189      	lsls	r1, r1, #6
    102c:	2006      	movs	r0, #6
    102e:	4b01      	ldr	r3, [pc, #4]	; (1034 <udi_msc_sense_fail_busy_or_change+0x10>)
    1030:	4798      	blx	r3
}
    1032:	bd10      	pop	{r4, pc}
    1034:	00000f55 	.word	0x00000f55

00001038 <udi_msc_sense_fail_not_present>:
{
    1038:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    103a:	2200      	movs	r2, #0
    103c:	21e8      	movs	r1, #232	; 0xe8
    103e:	0189      	lsls	r1, r1, #6
    1040:	2002      	movs	r0, #2
    1042:	4b01      	ldr	r3, [pc, #4]	; (1048 <udi_msc_sense_fail_not_present+0x10>)
    1044:	4798      	blx	r3
}
    1046:	bd10      	pop	{r4, pc}
    1048:	00000f55 	.word	0x00000f55

0000104c <udi_msc_sense_pass>:
{
    104c:	b510      	push	{r4, lr}
	udi_msc_clear_sense();
    104e:	4b03      	ldr	r3, [pc, #12]	; (105c <udi_msc_sense_pass+0x10>)
    1050:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    1052:	2200      	movs	r2, #0
    1054:	4b02      	ldr	r3, [pc, #8]	; (1060 <udi_msc_sense_pass+0x14>)
    1056:	731a      	strb	r2, [r3, #12]
}
    1058:	bd10      	pop	{r4, pc}
    105a:	46c0      	nop			; (mov r8, r8)
    105c:	00000f35 	.word	0x00000f35
    1060:	20000048 	.word	0x20000048

00001064 <udi_msc_data_sent>:
{
    1064:	b510      	push	{r4, lr}
    1066:	000c      	movs	r4, r1
	if (UDD_EP_TRANSFER_OK != status) {
    1068:	2800      	cmp	r0, #0
    106a:	d000      	beq.n	106e <udi_msc_data_sent+0xa>
}
    106c:	bd10      	pop	{r4, pc}
	udi_msc_sense_pass();
    106e:	4b04      	ldr	r3, [pc, #16]	; (1080 <udi_msc_data_sent+0x1c>)
    1070:	4798      	blx	r3
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    1072:	4b04      	ldr	r3, [pc, #16]	; (1084 <udi_msc_data_sent+0x20>)
    1074:	689a      	ldr	r2, [r3, #8]
    1076:	1b14      	subs	r4, r2, r4
    1078:	609c      	str	r4, [r3, #8]
	udi_msc_csw_process();
    107a:	4b03      	ldr	r3, [pc, #12]	; (1088 <udi_msc_data_sent+0x24>)
    107c:	4798      	blx	r3
    107e:	e7f5      	b.n	106c <udi_msc_data_sent+0x8>
    1080:	0000104d 	.word	0x0000104d
    1084:	20000048 	.word	0x20000048
    1088:	00000ef5 	.word	0x00000ef5

0000108c <udi_msc_spc_mode_sense>:
{
    108c:	b570      	push	{r4, r5, r6, lr}
    108e:	0005      	movs	r5, r0
	memset(&sense, 0, sizeof(sense));
    1090:	2214      	movs	r2, #20
    1092:	2100      	movs	r1, #0
    1094:	4823      	ldr	r0, [pc, #140]	; (1124 <udi_msc_spc_mode_sense+0x98>)
    1096:	4b24      	ldr	r3, [pc, #144]	; (1128 <udi_msc_spc_mode_sense+0x9c>)
    1098:	4798      	blx	r3
	if (b_sense10) {
    109a:	2d00      	cmp	r5, #0
    109c:	d018      	beq.n	10d0 <udi_msc_spc_mode_sense+0x44>
		request_lgt = udi_msc_cbw.CDB[8];
    109e:	4b23      	ldr	r3, [pc, #140]	; (112c <udi_msc_spc_mode_sense+0xa0>)
    10a0:	7dd9      	ldrb	r1, [r3, #23]
		ptr_mode = &sense.s10.sense_data;
    10a2:	4a20      	ldr	r2, [pc, #128]	; (1124 <udi_msc_spc_mode_sense+0x98>)
    10a4:	3208      	adds	r2, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    10a6:	2408      	movs	r4, #8
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    10a8:	4b20      	ldr	r3, [pc, #128]	; (112c <udi_msc_spc_mode_sense+0xa0>)
    10aa:	7c58      	ldrb	r0, [r3, #17]
    10ac:	233f      	movs	r3, #63	; 0x3f
    10ae:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
    10b0:	2b1c      	cmp	r3, #28
    10b2:	d013      	beq.n	10dc <udi_msc_spc_mode_sense+0x50>
			|| (SCSI_MS_MODE_ALL == mode)) {
    10b4:	2b3f      	cmp	r3, #63	; 0x3f
    10b6:	d011      	beq.n	10dc <udi_msc_spc_mode_sense+0x50>
    10b8:	1c20      	adds	r0, r4, #0
    10ba:	428c      	cmp	r4, r1
    10bc:	d900      	bls.n	10c0 <udi_msc_spc_mode_sense+0x34>
    10be:	1c08      	adds	r0, r1, #0
    10c0:	b2c6      	uxtb	r6, r0
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    10c2:	2180      	movs	r1, #128	; 0x80
    10c4:	0030      	movs	r0, r6
    10c6:	4b1a      	ldr	r3, [pc, #104]	; (1130 <udi_msc_spc_mode_sense+0xa4>)
    10c8:	4798      	blx	r3
    10ca:	2800      	cmp	r0, #0
    10cc:	d10f      	bne.n	10ee <udi_msc_spc_mode_sense+0x62>
}
    10ce:	bd70      	pop	{r4, r5, r6, pc}
		request_lgt = udi_msc_cbw.CDB[4];
    10d0:	4b16      	ldr	r3, [pc, #88]	; (112c <udi_msc_spc_mode_sense+0xa0>)
    10d2:	7cd9      	ldrb	r1, [r3, #19]
		ptr_mode = &sense.s6.sense_data;
    10d4:	4a13      	ldr	r2, [pc, #76]	; (1124 <udi_msc_spc_mode_sense+0x98>)
    10d6:	3204      	adds	r2, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    10d8:	2404      	movs	r4, #4
    10da:	e7e5      	b.n	10a8 <udi_msc_spc_mode_sense+0x1c>
		ptr_mode->page_code =
    10dc:	231c      	movs	r3, #28
    10de:	7013      	strb	r3, [r2, #0]
		ptr_mode->page_length =
    10e0:	3b12      	subs	r3, #18
    10e2:	7053      	strb	r3, [r2, #1]
		ptr_mode->mrie =
    10e4:	3b05      	subs	r3, #5
    10e6:	70d3      	strb	r3, [r2, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    10e8:	340c      	adds	r4, #12
    10ea:	b2e4      	uxtb	r4, r4
    10ec:	e7e4      	b.n	10b8 <udi_msc_spc_mode_sense+0x2c>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    10ee:	4b0f      	ldr	r3, [pc, #60]	; (112c <udi_msc_spc_mode_sense+0xa0>)
    10f0:	7b58      	ldrb	r0, [r3, #13]
    10f2:	4b10      	ldr	r3, [pc, #64]	; (1134 <udi_msc_spc_mode_sense+0xa8>)
    10f4:	4798      	blx	r3
    10f6:	1e43      	subs	r3, r0, #1
    10f8:	4198      	sbcs	r0, r3
    10fa:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
    10fc:	2d00      	cmp	r5, #0
    10fe:	d00c      	beq.n	111a <udi_msc_spc_mode_sense+0x8e>
				cpu_to_be16((data_sense_lgt - 2));
    1100:	3c02      	subs	r4, #2
    1102:	b2a4      	uxth	r4, r4
		sense.s10.header.mode_data_length =
    1104:	4a07      	ldr	r2, [pc, #28]	; (1124 <udi_msc_spc_mode_sense+0x98>)
				cpu_to_be16((data_sense_lgt - 2));
    1106:	0a23      	lsrs	r3, r4, #8
    1108:	0224      	lsls	r4, r4, #8
    110a:	431c      	orrs	r4, r3
		sense.s10.header.mode_data_length =
    110c:	8014      	strh	r4, [r2, #0]
		sense.s10.header.device_specific_parameter = wp;
    110e:	70d0      	strb	r0, [r2, #3]
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
    1110:	0031      	movs	r1, r6
    1112:	4804      	ldr	r0, [pc, #16]	; (1124 <udi_msc_spc_mode_sense+0x98>)
    1114:	4b08      	ldr	r3, [pc, #32]	; (1138 <udi_msc_spc_mode_sense+0xac>)
    1116:	4798      	blx	r3
    1118:	e7d9      	b.n	10ce <udi_msc_spc_mode_sense+0x42>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    111a:	4b02      	ldr	r3, [pc, #8]	; (1124 <udi_msc_spc_mode_sense+0x98>)
    111c:	3c01      	subs	r4, #1
    111e:	701c      	strb	r4, [r3, #0]
		sense.s6.header.device_specific_parameter = wp;
    1120:	7098      	strb	r0, [r3, #2]
    1122:	e7f5      	b.n	1110 <udi_msc_spc_mode_sense+0x84>
    1124:	20000188 	.word	0x20000188
    1128:	00006cc3 	.word	0x00006cc3
    112c:	200001ac 	.word	0x200001ac
    1130:	00000fa1 	.word	0x00000fa1
    1134:	000060ad 	.word	0x000060ad
    1138:	00000fed 	.word	0x00000fed

0000113c <udi_msc_sbc_trans>:
{
    113c:	b510      	push	{r4, lr}
    113e:	1e04      	subs	r4, r0, #0
	if (!b_read) {
    1140:	d01e      	beq.n	1180 <udi_msc_sbc_trans+0x44>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    1142:	4a17      	ldr	r2, [pc, #92]	; (11a0 <udi_msc_sbc_trans+0x64>)
    1144:	4b17      	ldr	r3, [pc, #92]	; (11a4 <udi_msc_sbc_trans+0x68>)
    1146:	7c59      	ldrb	r1, [r3, #17]
    1148:	70d1      	strb	r1, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    114a:	7c99      	ldrb	r1, [r3, #18]
    114c:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    114e:	7cd9      	ldrb	r1, [r3, #19]
    1150:	7051      	strb	r1, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    1152:	7d19      	ldrb	r1, [r3, #20]
    1154:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    1156:	4a14      	ldr	r2, [pc, #80]	; (11a8 <udi_msc_sbc_trans+0x6c>)
    1158:	7d99      	ldrb	r1, [r3, #22]
    115a:	7051      	strb	r1, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    115c:	7ddb      	ldrb	r3, [r3, #23]
    115e:	7013      	strb	r3, [r2, #0]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    1160:	8810      	ldrh	r0, [r2, #0]
    1162:	0240      	lsls	r0, r0, #9
	if (!udi_msc_cbw_validate(trans_size,
    1164:	0021      	movs	r1, r4
    1166:	1e4b      	subs	r3, r1, #1
    1168:	4199      	sbcs	r1, r3
    116a:	01c9      	lsls	r1, r1, #7
    116c:	4b0f      	ldr	r3, [pc, #60]	; (11ac <udi_msc_sbc_trans+0x70>)
    116e:	4798      	blx	r3
    1170:	2800      	cmp	r0, #0
    1172:	d004      	beq.n	117e <udi_msc_sbc_trans+0x42>
	udi_msc_b_read = b_read;
    1174:	4b0e      	ldr	r3, [pc, #56]	; (11b0 <udi_msc_sbc_trans+0x74>)
    1176:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
    1178:	2201      	movs	r2, #1
    117a:	4b0e      	ldr	r3, [pc, #56]	; (11b4 <udi_msc_sbc_trans+0x78>)
    117c:	701a      	strb	r2, [r3, #0]
}
    117e:	bd10      	pop	{r4, pc}
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    1180:	4b08      	ldr	r3, [pc, #32]	; (11a4 <udi_msc_sbc_trans+0x68>)
    1182:	7b58      	ldrb	r0, [r3, #13]
    1184:	4b0c      	ldr	r3, [pc, #48]	; (11b8 <udi_msc_sbc_trans+0x7c>)
    1186:	4798      	blx	r3
    1188:	2800      	cmp	r0, #0
    118a:	d0da      	beq.n	1142 <udi_msc_sbc_trans+0x6>
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
    118c:	2200      	movs	r2, #0
    118e:	219c      	movs	r1, #156	; 0x9c
    1190:	0189      	lsls	r1, r1, #6
    1192:	2007      	movs	r0, #7
    1194:	4b09      	ldr	r3, [pc, #36]	; (11bc <udi_msc_sbc_trans+0x80>)
    1196:	4798      	blx	r3
			udi_msc_csw_process();
    1198:	4b09      	ldr	r3, [pc, #36]	; (11c0 <udi_msc_sbc_trans+0x84>)
    119a:	4798      	blx	r3
			return;
    119c:	e7ef      	b.n	117e <udi_msc_sbc_trans+0x42>
    119e:	46c0      	nop			; (mov r8, r8)
    11a0:	2000019c 	.word	0x2000019c
    11a4:	200001ac 	.word	0x200001ac
    11a8:	200001cc 	.word	0x200001cc
    11ac:	00000fa1 	.word	0x00000fa1
    11b0:	200001a1 	.word	0x200001a1
    11b4:	200001a2 	.word	0x200001a2
    11b8:	000060ad 	.word	0x000060ad
    11bc:	00000f55 	.word	0x00000f55
    11c0:	00000ef5 	.word	0x00000ef5

000011c4 <udi_msc_cbw_received>:
{
    11c4:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    11c6:	2800      	cmp	r0, #0
    11c8:	d10d      	bne.n	11e6 <udi_msc_cbw_received+0x22>
	if ((sizeof(udi_msc_cbw) != nb_received)
    11ca:	291f      	cmp	r1, #31
    11cc:	d104      	bne.n	11d8 <udi_msc_cbw_received+0x14>
			|| (udi_msc_cbw.dCBWSignature !=
    11ce:	4b84      	ldr	r3, [pc, #528]	; (13e0 <udi_msc_cbw_received+0x21c>)
    11d0:	4a84      	ldr	r2, [pc, #528]	; (13e4 <udi_msc_cbw_received+0x220>)
    11d2:	6812      	ldr	r2, [r2, #0]
    11d4:	429a      	cmp	r2, r3
    11d6:	d007      	beq.n	11e8 <udi_msc_cbw_received+0x24>
		udi_msc_b_cbw_invalid = true;
    11d8:	2201      	movs	r2, #1
    11da:	4b83      	ldr	r3, [pc, #524]	; (13e8 <udi_msc_cbw_received+0x224>)
    11dc:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
    11de:	4b83      	ldr	r3, [pc, #524]	; (13ec <udi_msc_cbw_received+0x228>)
    11e0:	4798      	blx	r3
		udi_msc_csw_invalid();
    11e2:	4b83      	ldr	r3, [pc, #524]	; (13f0 <udi_msc_cbw_received+0x22c>)
    11e4:	4798      	blx	r3
}
    11e6:	bd70      	pop	{r4, r5, r6, pc}
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    11e8:	4b7e      	ldr	r3, [pc, #504]	; (13e4 <udi_msc_cbw_received+0x220>)
    11ea:	7b58      	ldrb	r0, [r3, #13]
    11ec:	220f      	movs	r2, #15
    11ee:	4010      	ands	r0, r2
    11f0:	7358      	strb	r0, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    11f2:	4b80      	ldr	r3, [pc, #512]	; (13f4 <udi_msc_cbw_received+0x230>)
    11f4:	781b      	ldrb	r3, [r3, #0]
    11f6:	4283      	cmp	r3, r0
    11f8:	d30b      	bcc.n	1212 <udi_msc_cbw_received+0x4e>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    11fa:	4b7a      	ldr	r3, [pc, #488]	; (13e4 <udi_msc_cbw_received+0x220>)
	udi_msc_csw.dCSWDataResidue =
    11fc:	4a7e      	ldr	r2, [pc, #504]	; (13f8 <udi_msc_cbw_received+0x234>)
    11fe:	6899      	ldr	r1, [r3, #8]
    1200:	6091      	str	r1, [r2, #8]
	switch (udi_msc_cbw.CDB[0]) {
    1202:	7bda      	ldrb	r2, [r3, #15]
    1204:	2a5a      	cmp	r2, #90	; 0x5a
    1206:	d900      	bls.n	120a <udi_msc_cbw_received+0x46>
    1208:	e0d2      	b.n	13b0 <udi_msc_cbw_received+0x1ec>
    120a:	0093      	lsls	r3, r2, #2
    120c:	4a7b      	ldr	r2, [pc, #492]	; (13fc <udi_msc_cbw_received+0x238>)
    120e:	58d3      	ldr	r3, [r2, r3]
    1210:	469f      	mov	pc, r3
		udi_msc_sense_fail_cdb_invalid();
    1212:	4b7b      	ldr	r3, [pc, #492]	; (1400 <udi_msc_cbw_received+0x23c>)
    1214:	4798      	blx	r3
		udi_msc_csw_process();
    1216:	4b7b      	ldr	r3, [pc, #492]	; (1404 <udi_msc_cbw_received+0x240>)
    1218:	4798      	blx	r3
		return;
    121a:	e7e4      	b.n	11e6 <udi_msc_cbw_received+0x22>
	uint8_t length = udi_msc_cbw.CDB[4];
    121c:	4b71      	ldr	r3, [pc, #452]	; (13e4 <udi_msc_cbw_received+0x220>)
    121e:	7cda      	ldrb	r2, [r3, #19]
    1220:	1c13      	adds	r3, r2, #0
    1222:	2a12      	cmp	r2, #18
    1224:	d900      	bls.n	1228 <udi_msc_cbw_received+0x64>
    1226:	2312      	movs	r3, #18
    1228:	b2dc      	uxtb	r4, r3
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    122a:	2180      	movs	r1, #128	; 0x80
    122c:	0020      	movs	r0, r4
    122e:	4b76      	ldr	r3, [pc, #472]	; (1408 <udi_msc_cbw_received+0x244>)
    1230:	4798      	blx	r3
    1232:	2800      	cmp	r0, #0
    1234:	d0d7      	beq.n	11e6 <udi_msc_cbw_received+0x22>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    1236:	0021      	movs	r1, r4
    1238:	4874      	ldr	r0, [pc, #464]	; (140c <udi_msc_cbw_received+0x248>)
    123a:	4b75      	ldr	r3, [pc, #468]	; (1410 <udi_msc_cbw_received+0x24c>)
    123c:	4798      	blx	r3
    123e:	e7d2      	b.n	11e6 <udi_msc_cbw_received+0x22>
	length = udi_msc_cbw.CDB[4];
    1240:	4b68      	ldr	r3, [pc, #416]	; (13e4 <udi_msc_cbw_received+0x220>)
    1242:	7cdb      	ldrb	r3, [r3, #19]
    1244:	1c1a      	adds	r2, r3, #0
    1246:	2b24      	cmp	r3, #36	; 0x24
    1248:	d900      	bls.n	124c <udi_msc_cbw_received+0x88>
    124a:	2224      	movs	r2, #36	; 0x24
    124c:	b2d4      	uxtb	r4, r2
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    124e:	2180      	movs	r1, #128	; 0x80
    1250:	0020      	movs	r0, r4
    1252:	4b6d      	ldr	r3, [pc, #436]	; (1408 <udi_msc_cbw_received+0x244>)
    1254:	4798      	blx	r3
    1256:	2800      	cmp	r0, #0
    1258:	d0c5      	beq.n	11e6 <udi_msc_cbw_received+0x22>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    125a:	4b62      	ldr	r3, [pc, #392]	; (13e4 <udi_msc_cbw_received+0x220>)
    125c:	7c1b      	ldrb	r3, [r3, #16]
    125e:	079b      	lsls	r3, r3, #30
    1260:	d103      	bne.n	126a <udi_msc_cbw_received+0xa6>
			|| (0 != udi_msc_cbw.CDB[2])) {
    1262:	4b60      	ldr	r3, [pc, #384]	; (13e4 <udi_msc_cbw_received+0x220>)
    1264:	7c5d      	ldrb	r5, [r3, #17]
    1266:	2d00      	cmp	r5, #0
    1268:	d004      	beq.n	1274 <udi_msc_cbw_received+0xb0>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    126a:	4b65      	ldr	r3, [pc, #404]	; (1400 <udi_msc_cbw_received+0x23c>)
    126c:	4798      	blx	r3
		udi_msc_csw_process();
    126e:	4b65      	ldr	r3, [pc, #404]	; (1404 <udi_msc_cbw_received+0x240>)
    1270:	4798      	blx	r3
    1272:	e7b8      	b.n	11e6 <udi_msc_cbw_received+0x22>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    1274:	4b5b      	ldr	r3, [pc, #364]	; (13e4 <udi_msc_cbw_received+0x220>)
    1276:	7b58      	ldrb	r0, [r3, #13]
    1278:	4b66      	ldr	r3, [pc, #408]	; (1414 <udi_msc_cbw_received+0x250>)
    127a:	4798      	blx	r3
    127c:	2380      	movs	r3, #128	; 0x80
    127e:	2800      	cmp	r0, #0
    1280:	d100      	bne.n	1284 <udi_msc_cbw_received+0xc0>
    1282:	002b      	movs	r3, r5
    1284:	4e64      	ldr	r6, [pc, #400]	; (1418 <udi_msc_cbw_received+0x254>)
    1286:	7073      	strb	r3, [r6, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    1288:	4b56      	ldr	r3, [pc, #344]	; (13e4 <udi_msc_cbw_received+0x220>)
    128a:	7b58      	ldrb	r0, [r3, #13]
    128c:	4b63      	ldr	r3, [pc, #396]	; (141c <udi_msc_cbw_received+0x258>)
    128e:	4798      	blx	r3
    1290:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
    1292:	0030      	movs	r0, r6
    1294:	3010      	adds	r0, #16
    1296:	3101      	adds	r1, #1
    1298:	2210      	movs	r2, #16
    129a:	4b61      	ldr	r3, [pc, #388]	; (1420 <udi_msc_cbw_received+0x25c>)
    129c:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
    129e:	7c33      	ldrb	r3, [r6, #16]
    12a0:	2b00      	cmp	r3, #0
    12a2:	d100      	bne.n	12a6 <udi_msc_cbw_received+0xe2>
    12a4:	e08e      	b.n	13c4 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    12a6:	2b22      	cmp	r3, #34	; 0x22
    12a8:	d100      	bne.n	12ac <udi_msc_cbw_received+0xe8>
    12aa:	e08a      	b.n	13c2 <udi_msc_cbw_received+0x1fe>
    12ac:	495a      	ldr	r1, [pc, #360]	; (1418 <udi_msc_cbw_received+0x254>)
		i++;
    12ae:	2301      	movs	r3, #1
		if ((0 == udi_msc_inquiry_data.product_id[i])
    12b0:	7c4a      	ldrb	r2, [r1, #17]
    12b2:	2a00      	cmp	r2, #0
    12b4:	d100      	bne.n	12b8 <udi_msc_cbw_received+0xf4>
    12b6:	e085      	b.n	13c4 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    12b8:	2a22      	cmp	r2, #34	; 0x22
    12ba:	d100      	bne.n	12be <udi_msc_cbw_received+0xfa>
    12bc:	e082      	b.n	13c4 <udi_msc_cbw_received+0x200>
		i++;
    12be:	3301      	adds	r3, #1
    12c0:	b2db      	uxtb	r3, r3
    12c2:	3101      	adds	r1, #1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    12c4:	2b10      	cmp	r3, #16
    12c6:	d1f3      	bne.n	12b0 <udi_msc_cbw_received+0xec>
    12c8:	e084      	b.n	13d4 <udi_msc_cbw_received+0x210>
		udi_msc_spc_mode_sense(false);
    12ca:	2000      	movs	r0, #0
    12cc:	4b55      	ldr	r3, [pc, #340]	; (1424 <udi_msc_cbw_received+0x260>)
    12ce:	4798      	blx	r3
		break;
    12d0:	e789      	b.n	11e6 <udi_msc_cbw_received+0x22>
		udi_msc_spc_mode_sense(true);
    12d2:	2001      	movs	r0, #1
    12d4:	4b53      	ldr	r3, [pc, #332]	; (1424 <udi_msc_cbw_received+0x260>)
    12d6:	4798      	blx	r3
		break;
    12d8:	e785      	b.n	11e6 <udi_msc_cbw_received+0x22>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    12da:	4b53      	ldr	r3, [pc, #332]	; (1428 <udi_msc_cbw_received+0x264>)
    12dc:	4798      	blx	r3
    12de:	2802      	cmp	r0, #2
    12e0:	d009      	beq.n	12f6 <udi_msc_cbw_received+0x132>
    12e2:	2803      	cmp	r0, #3
    12e4:	d004      	beq.n	12f0 <udi_msc_cbw_received+0x12c>
    12e6:	2800      	cmp	r0, #0
    12e8:	d008      	beq.n	12fc <udi_msc_cbw_received+0x138>
		udi_msc_sense_fail_hardware();
    12ea:	4b50      	ldr	r3, [pc, #320]	; (142c <udi_msc_cbw_received+0x268>)
    12ec:	4798      	blx	r3
    12ee:	e007      	b.n	1300 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_busy_or_change();
    12f0:	4b4f      	ldr	r3, [pc, #316]	; (1430 <udi_msc_cbw_received+0x26c>)
    12f2:	4798      	blx	r3
    12f4:	e004      	b.n	1300 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_not_present();
    12f6:	4b4f      	ldr	r3, [pc, #316]	; (1434 <udi_msc_cbw_received+0x270>)
    12f8:	4798      	blx	r3
    12fa:	e001      	b.n	1300 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_pass();
    12fc:	4b4e      	ldr	r3, [pc, #312]	; (1438 <udi_msc_cbw_received+0x274>)
    12fe:	4798      	blx	r3
	udi_msc_csw_process();
    1300:	4b40      	ldr	r3, [pc, #256]	; (1404 <udi_msc_cbw_received+0x240>)
    1302:	4798      	blx	r3
    1304:	e76f      	b.n	11e6 <udi_msc_cbw_received+0x22>
	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
    1306:	2180      	movs	r1, #128	; 0x80
    1308:	2008      	movs	r0, #8
    130a:	4b3f      	ldr	r3, [pc, #252]	; (1408 <udi_msc_cbw_received+0x244>)
    130c:	4798      	blx	r3
    130e:	2800      	cmp	r0, #0
    1310:	d100      	bne.n	1314 <udi_msc_cbw_received+0x150>
    1312:	e768      	b.n	11e6 <udi_msc_cbw_received+0x22>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    1314:	4b33      	ldr	r3, [pc, #204]	; (13e4 <udi_msc_cbw_received+0x220>)
    1316:	7b58      	ldrb	r0, [r3, #13]
    1318:	4948      	ldr	r1, [pc, #288]	; (143c <udi_msc_cbw_received+0x278>)
    131a:	4b49      	ldr	r3, [pc, #292]	; (1440 <udi_msc_cbw_received+0x27c>)
    131c:	4798      	blx	r3
    131e:	2802      	cmp	r0, #2
    1320:	d00d      	beq.n	133e <udi_msc_cbw_received+0x17a>
    1322:	2803      	cmp	r0, #3
    1324:	d006      	beq.n	1334 <udi_msc_cbw_received+0x170>
    1326:	2800      	cmp	r0, #0
    1328:	d00e      	beq.n	1348 <udi_msc_cbw_received+0x184>
		udi_msc_sense_fail_hardware();
    132a:	4b40      	ldr	r3, [pc, #256]	; (142c <udi_msc_cbw_received+0x268>)
    132c:	4798      	blx	r3
		udi_msc_csw_process();
    132e:	4b35      	ldr	r3, [pc, #212]	; (1404 <udi_msc_cbw_received+0x240>)
    1330:	4798      	blx	r3
    1332:	e758      	b.n	11e6 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_busy_or_change();
    1334:	4b3e      	ldr	r3, [pc, #248]	; (1430 <udi_msc_cbw_received+0x26c>)
    1336:	4798      	blx	r3
		udi_msc_csw_process();
    1338:	4b32      	ldr	r3, [pc, #200]	; (1404 <udi_msc_cbw_received+0x240>)
    133a:	4798      	blx	r3
    133c:	e753      	b.n	11e6 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_not_present();
    133e:	4b3d      	ldr	r3, [pc, #244]	; (1434 <udi_msc_cbw_received+0x270>)
    1340:	4798      	blx	r3
		udi_msc_csw_process();
    1342:	4b30      	ldr	r3, [pc, #192]	; (1404 <udi_msc_cbw_received+0x240>)
    1344:	4798      	blx	r3
    1346:	e74e      	b.n	11e6 <udi_msc_cbw_received+0x22>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    1348:	483c      	ldr	r0, [pc, #240]	; (143c <udi_msc_cbw_received+0x278>)
    134a:	2380      	movs	r3, #128	; 0x80
    134c:	029b      	lsls	r3, r3, #10
    134e:	6043      	str	r3, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    1350:	6803      	ldr	r3, [r0, #0]
    1352:	ba1b      	rev	r3, r3
    1354:	6003      	str	r3, [r0, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    1356:	2108      	movs	r1, #8
    1358:	4b2d      	ldr	r3, [pc, #180]	; (1410 <udi_msc_cbw_received+0x24c>)
    135a:	4798      	blx	r3
    135c:	e743      	b.n	11e6 <udi_msc_cbw_received+0x22>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    135e:	4b21      	ldr	r3, [pc, #132]	; (13e4 <udi_msc_cbw_received+0x220>)
    1360:	7cdb      	ldrb	r3, [r3, #19]
	if (loej) {
    1362:	079a      	lsls	r2, r3, #30
    1364:	d404      	bmi.n	1370 <udi_msc_cbw_received+0x1ac>
	udi_msc_sense_pass();
    1366:	4b34      	ldr	r3, [pc, #208]	; (1438 <udi_msc_cbw_received+0x274>)
    1368:	4798      	blx	r3
	udi_msc_csw_process();
    136a:	4b26      	ldr	r3, [pc, #152]	; (1404 <udi_msc_cbw_received+0x240>)
    136c:	4798      	blx	r3
    136e:	e73a      	b.n	11e6 <udi_msc_cbw_received+0x22>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    1370:	2101      	movs	r1, #1
    1372:	404b      	eors	r3, r1
    1374:	2101      	movs	r1, #1
    1376:	4019      	ands	r1, r3
    1378:	4b32      	ldr	r3, [pc, #200]	; (1444 <udi_msc_cbw_received+0x280>)
    137a:	4798      	blx	r3
    137c:	e7f3      	b.n	1366 <udi_msc_cbw_received+0x1a2>
	uint8_t prevent = udi_msc_cbw.CDB[4];
    137e:	4b19      	ldr	r3, [pc, #100]	; (13e4 <udi_msc_cbw_received+0x220>)
	if (0 == prevent) {
    1380:	7cdb      	ldrb	r3, [r3, #19]
    1382:	2b00      	cmp	r3, #0
    1384:	d004      	beq.n	1390 <udi_msc_cbw_received+0x1cc>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    1386:	4b1e      	ldr	r3, [pc, #120]	; (1400 <udi_msc_cbw_received+0x23c>)
    1388:	4798      	blx	r3
	udi_msc_csw_process();
    138a:	4b1e      	ldr	r3, [pc, #120]	; (1404 <udi_msc_cbw_received+0x240>)
    138c:	4798      	blx	r3
    138e:	e72a      	b.n	11e6 <udi_msc_cbw_received+0x22>
		udi_msc_sense_pass();
    1390:	4b29      	ldr	r3, [pc, #164]	; (1438 <udi_msc_cbw_received+0x274>)
    1392:	4798      	blx	r3
    1394:	e7f9      	b.n	138a <udi_msc_cbw_received+0x1c6>
		udi_msc_sense_pass();
    1396:	4b28      	ldr	r3, [pc, #160]	; (1438 <udi_msc_cbw_received+0x274>)
    1398:	4798      	blx	r3
		udi_msc_csw_process();
    139a:	4b1a      	ldr	r3, [pc, #104]	; (1404 <udi_msc_cbw_received+0x240>)
    139c:	4798      	blx	r3
		break;
    139e:	e722      	b.n	11e6 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(true);
    13a0:	2001      	movs	r0, #1
    13a2:	4b29      	ldr	r3, [pc, #164]	; (1448 <udi_msc_cbw_received+0x284>)
    13a4:	4798      	blx	r3
		break;
    13a6:	e71e      	b.n	11e6 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(false);
    13a8:	2000      	movs	r0, #0
    13aa:	4b27      	ldr	r3, [pc, #156]	; (1448 <udi_msc_cbw_received+0x284>)
    13ac:	4798      	blx	r3
		break;
    13ae:	e71a      	b.n	11e6 <udi_msc_cbw_received+0x22>
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    13b0:	2200      	movs	r2, #0
    13b2:	2180      	movs	r1, #128	; 0x80
    13b4:	0189      	lsls	r1, r1, #6
    13b6:	2005      	movs	r0, #5
    13b8:	4b24      	ldr	r3, [pc, #144]	; (144c <udi_msc_cbw_received+0x288>)
    13ba:	4798      	blx	r3
		udi_msc_csw_process();
    13bc:	4b11      	ldr	r3, [pc, #68]	; (1404 <udi_msc_cbw_received+0x240>)
    13be:	4798      	blx	r3
		break;
    13c0:	e711      	b.n	11e6 <udi_msc_cbw_received+0x22>
	i = 0;
    13c2:	002b      	movs	r3, r5
		udi_msc_inquiry_data.product_id[i] = ' ';
    13c4:	4814      	ldr	r0, [pc, #80]	; (1418 <udi_msc_cbw_received+0x254>)
    13c6:	2120      	movs	r1, #32
    13c8:	18c2      	adds	r2, r0, r3
    13ca:	7411      	strb	r1, [r2, #16]
		i++;
    13cc:	3301      	adds	r3, #1
    13ce:	b2db      	uxtb	r3, r3
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    13d0:	2b10      	cmp	r3, #16
    13d2:	d1f9      	bne.n	13c8 <udi_msc_cbw_received+0x204>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    13d4:	0021      	movs	r1, r4
    13d6:	4810      	ldr	r0, [pc, #64]	; (1418 <udi_msc_cbw_received+0x254>)
    13d8:	4b0d      	ldr	r3, [pc, #52]	; (1410 <udi_msc_cbw_received+0x24c>)
    13da:	4798      	blx	r3
    13dc:	e703      	b.n	11e6 <udi_msc_cbw_received+0x22>
    13de:	46c0      	nop			; (mov r8, r8)
    13e0:	43425355 	.word	0x43425355
    13e4:	200001ac 	.word	0x200001ac
    13e8:	200001a0 	.word	0x200001a0
    13ec:	00000e9d 	.word	0x00000e9d
    13f0:	00000ec9 	.word	0x00000ec9
    13f4:	200001d0 	.word	0x200001d0
    13f8:	20000048 	.word	0x20000048
    13fc:	00007d84 	.word	0x00007d84
    1400:	00000f8d 	.word	0x00000f8d
    1404:	00000ef5 	.word	0x00000ef5
    1408:	00000fa1 	.word	0x00000fa1
    140c:	200001d4 	.word	0x200001d4
    1410:	00000fed 	.word	0x00000fed
    1414:	000060c5 	.word	0x000060c5
    1418:	20000058 	.word	0x20000058
    141c:	000060dd 	.word	0x000060dd
    1420:	00006cb1 	.word	0x00006cb1
    1424:	0000108d 	.word	0x0000108d
    1428:	00006069 	.word	0x00006069
    142c:	00000fd9 	.word	0x00000fd9
    1430:	00001025 	.word	0x00001025
    1434:	00001039 	.word	0x00001039
    1438:	0000104d 	.word	0x0000104d
    143c:	200001a4 	.word	0x200001a4
    1440:	00006081 	.word	0x00006081
    1444:	0000609d 	.word	0x0000609d
    1448:	0000113d 	.word	0x0000113d
    144c:	00000f55 	.word	0x00000f55

00001450 <udi_msc_disable>:
{
    1450:	b510      	push	{r4, lr}
	udi_msc_b_trans_req = false;
    1452:	2200      	movs	r2, #0
    1454:	4b04      	ldr	r3, [pc, #16]	; (1468 <udi_msc_disable+0x18>)
    1456:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    1458:	2301      	movs	r3, #1
    145a:	4a04      	ldr	r2, [pc, #16]	; (146c <udi_msc_disable+0x1c>)
    145c:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    145e:	4a04      	ldr	r2, [pc, #16]	; (1470 <udi_msc_disable+0x20>)
    1460:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
    1462:	4b04      	ldr	r3, [pc, #16]	; (1474 <udi_msc_disable+0x24>)
    1464:	4798      	blx	r3
}
    1466:	bd10      	pop	{r4, pc}
    1468:	200001a2 	.word	0x200001a2
    146c:	20000044 	.word	0x20000044
    1470:	20000045 	.word	0x20000045
    1474:	000038c1 	.word	0x000038c1

00001478 <udi_msc_setup>:
{
    1478:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    147a:	4b20      	ldr	r3, [pc, #128]	; (14fc <udi_msc_setup+0x84>)
    147c:	781a      	ldrb	r2, [r3, #0]
    147e:	b253      	sxtb	r3, r2
    1480:	2b00      	cmp	r3, #0
    1482:	db05      	blt.n	1490 <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1484:	2360      	movs	r3, #96	; 0x60
    1486:	4013      	ands	r3, r2
	return false;	// Not supported request
    1488:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    148a:	2b20      	cmp	r3, #32
    148c:	d018      	beq.n	14c0 <udi_msc_setup+0x48>
}
    148e:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1490:	2360      	movs	r3, #96	; 0x60
    1492:	4013      	ands	r3, r2
	return false;	// Not supported request
    1494:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1496:	2b20      	cmp	r3, #32
    1498:	d1f9      	bne.n	148e <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    149a:	4b18      	ldr	r3, [pc, #96]	; (14fc <udi_msc_setup+0x84>)
    149c:	785b      	ldrb	r3, [r3, #1]
    149e:	2bfe      	cmp	r3, #254	; 0xfe
    14a0:	d127      	bne.n	14f2 <udi_msc_setup+0x7a>
				if (1 != udd_g_ctrlreq.req.wLength)
    14a2:	4b16      	ldr	r3, [pc, #88]	; (14fc <udi_msc_setup+0x84>)
    14a4:	88db      	ldrh	r3, [r3, #6]
    14a6:	2b01      	cmp	r3, #1
    14a8:	d1f1      	bne.n	148e <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    14aa:	4b14      	ldr	r3, [pc, #80]	; (14fc <udi_msc_setup+0x84>)
    14ac:	885b      	ldrh	r3, [r3, #2]
    14ae:	2b00      	cmp	r3, #0
    14b0:	d1ed      	bne.n	148e <udi_msc_setup+0x16>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    14b2:	4b12      	ldr	r3, [pc, #72]	; (14fc <udi_msc_setup+0x84>)
    14b4:	4a12      	ldr	r2, [pc, #72]	; (1500 <udi_msc_setup+0x88>)
    14b6:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    14b8:	2201      	movs	r2, #1
    14ba:	819a      	strh	r2, [r3, #12]
				return true;
    14bc:	3001      	adds	r0, #1
    14be:	e7e6      	b.n	148e <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    14c0:	4b0e      	ldr	r3, [pc, #56]	; (14fc <udi_msc_setup+0x84>)
    14c2:	785b      	ldrb	r3, [r3, #1]
    14c4:	2bff      	cmp	r3, #255	; 0xff
    14c6:	d116      	bne.n	14f6 <udi_msc_setup+0x7e>
				if (0 != udd_g_ctrlreq.req.wLength)
    14c8:	4b0c      	ldr	r3, [pc, #48]	; (14fc <udi_msc_setup+0x84>)
    14ca:	88db      	ldrh	r3, [r3, #6]
    14cc:	2b00      	cmp	r3, #0
    14ce:	d1de      	bne.n	148e <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    14d0:	4b0a      	ldr	r3, [pc, #40]	; (14fc <udi_msc_setup+0x84>)
    14d2:	885b      	ldrh	r3, [r3, #2]
    14d4:	2b00      	cmp	r3, #0
    14d6:	d1da      	bne.n	148e <udi_msc_setup+0x16>
				udi_msc_b_cbw_invalid = false;
    14d8:	4a0a      	ldr	r2, [pc, #40]	; (1504 <udi_msc_setup+0x8c>)
    14da:	7013      	strb	r3, [r2, #0]
				udi_msc_b_trans_req = false;
    14dc:	4a0a      	ldr	r2, [pc, #40]	; (1508 <udi_msc_setup+0x90>)
    14de:	7013      	strb	r3, [r2, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
    14e0:	3002      	adds	r0, #2
    14e2:	4c0a      	ldr	r4, [pc, #40]	; (150c <udi_msc_setup+0x94>)
    14e4:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
    14e6:	2081      	movs	r0, #129	; 0x81
    14e8:	47a0      	blx	r4
				udi_msc_cbw_wait();
    14ea:	4b09      	ldr	r3, [pc, #36]	; (1510 <udi_msc_setup+0x98>)
    14ec:	4798      	blx	r3
				return true;
    14ee:	2001      	movs	r0, #1
    14f0:	e7cd      	b.n	148e <udi_msc_setup+0x16>
	return false;	// Not supported request
    14f2:	2000      	movs	r0, #0
    14f4:	e7cb      	b.n	148e <udi_msc_setup+0x16>
    14f6:	2000      	movs	r0, #0
    14f8:	e7c9      	b.n	148e <udi_msc_setup+0x16>
    14fa:	46c0      	nop			; (mov r8, r8)
    14fc:	20000534 	.word	0x20000534
    1500:	200001d0 	.word	0x200001d0
    1504:	200001a0 	.word	0x200001a0
    1508:	200001a2 	.word	0x200001a2
    150c:	00002e81 	.word	0x00002e81
    1510:	00000da1 	.word	0x00000da1

00001514 <udi_msc_process_trans>:
{
    1514:	b510      	push	{r4, lr}
	if (!udi_msc_b_trans_req)
    1516:	4b1e      	ldr	r3, [pc, #120]	; (1590 <udi_msc_process_trans+0x7c>)
    1518:	781c      	ldrb	r4, [r3, #0]
    151a:	2c00      	cmp	r4, #0
    151c:	d030      	beq.n	1580 <udi_msc_process_trans+0x6c>
	udi_msc_b_trans_req = false;
    151e:	2300      	movs	r3, #0
    1520:	4a1b      	ldr	r2, [pc, #108]	; (1590 <udi_msc_process_trans+0x7c>)
    1522:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = false;
    1524:	4a1b      	ldr	r2, [pc, #108]	; (1594 <udi_msc_process_trans+0x80>)
    1526:	7013      	strb	r3, [r2, #0]
	if (udi_msc_b_read) {
    1528:	4b1b      	ldr	r3, [pc, #108]	; (1598 <udi_msc_process_trans+0x84>)
    152a:	781b      	ldrb	r3, [r3, #0]
    152c:	2b00      	cmp	r3, #0
    152e:	d015      	beq.n	155c <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    1530:	4b1a      	ldr	r3, [pc, #104]	; (159c <udi_msc_process_trans+0x88>)
    1532:	881a      	ldrh	r2, [r3, #0]
    1534:	4b1a      	ldr	r3, [pc, #104]	; (15a0 <udi_msc_process_trans+0x8c>)
    1536:	6819      	ldr	r1, [r3, #0]
    1538:	4b1a      	ldr	r3, [pc, #104]	; (15a4 <udi_msc_process_trans+0x90>)
    153a:	7b58      	ldrb	r0, [r3, #13]
    153c:	4b1a      	ldr	r3, [pc, #104]	; (15a8 <udi_msc_process_trans+0x94>)
    153e:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
    1540:	4b14      	ldr	r3, [pc, #80]	; (1594 <udi_msc_process_trans+0x80>)
    1542:	781b      	ldrb	r3, [r3, #0]
    1544:	b2db      	uxtb	r3, r3
    1546:	2b00      	cmp	r3, #0
    1548:	d111      	bne.n	156e <udi_msc_process_trans+0x5a>
	switch (status) {
    154a:	2802      	cmp	r0, #2
    154c:	d01d      	beq.n	158a <udi_msc_process_trans+0x76>
    154e:	2803      	cmp	r0, #3
    1550:	d018      	beq.n	1584 <udi_msc_process_trans+0x70>
    1552:	2800      	cmp	r0, #0
    1554:	d010      	beq.n	1578 <udi_msc_process_trans+0x64>
		udi_msc_sense_fail_hardware();
    1556:	4b15      	ldr	r3, [pc, #84]	; (15ac <udi_msc_process_trans+0x98>)
    1558:	4798      	blx	r3
		break;
    155a:	e00f      	b.n	157c <udi_msc_process_trans+0x68>
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    155c:	4b0f      	ldr	r3, [pc, #60]	; (159c <udi_msc_process_trans+0x88>)
    155e:	881a      	ldrh	r2, [r3, #0]
    1560:	4b0f      	ldr	r3, [pc, #60]	; (15a0 <udi_msc_process_trans+0x8c>)
    1562:	6819      	ldr	r1, [r3, #0]
    1564:	4b0f      	ldr	r3, [pc, #60]	; (15a4 <udi_msc_process_trans+0x90>)
    1566:	7b58      	ldrb	r0, [r3, #13]
    1568:	4b11      	ldr	r3, [pc, #68]	; (15b0 <udi_msc_process_trans+0x9c>)
    156a:	4798      	blx	r3
    156c:	e7e8      	b.n	1540 <udi_msc_process_trans+0x2c>
		udi_msc_b_reset_trans = false;
    156e:	2100      	movs	r1, #0
    1570:	4a08      	ldr	r2, [pc, #32]	; (1594 <udi_msc_process_trans+0x80>)
    1572:	7011      	strb	r1, [r2, #0]
		return true;
    1574:	001c      	movs	r4, r3
    1576:	e003      	b.n	1580 <udi_msc_process_trans+0x6c>
		udi_msc_sense_pass();
    1578:	4b0e      	ldr	r3, [pc, #56]	; (15b4 <udi_msc_process_trans+0xa0>)
    157a:	4798      	blx	r3
	udi_msc_csw_process();
    157c:	4b0e      	ldr	r3, [pc, #56]	; (15b8 <udi_msc_process_trans+0xa4>)
    157e:	4798      	blx	r3
}
    1580:	0020      	movs	r0, r4
    1582:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_busy_or_change();
    1584:	4b0d      	ldr	r3, [pc, #52]	; (15bc <udi_msc_process_trans+0xa8>)
    1586:	4798      	blx	r3
		break;
    1588:	e7f8      	b.n	157c <udi_msc_process_trans+0x68>
		udi_msc_sense_fail_not_present();
    158a:	4b0d      	ldr	r3, [pc, #52]	; (15c0 <udi_msc_process_trans+0xac>)
    158c:	4798      	blx	r3
		break;
    158e:	e7f5      	b.n	157c <udi_msc_process_trans+0x68>
    1590:	200001a2 	.word	0x200001a2
    1594:	20000045 	.word	0x20000045
    1598:	200001a1 	.word	0x200001a1
    159c:	200001cc 	.word	0x200001cc
    15a0:	2000019c 	.word	0x2000019c
    15a4:	200001ac 	.word	0x200001ac
    15a8:	000060ed 	.word	0x000060ed
    15ac:	00000fd9 	.word	0x00000fd9
    15b0:	00006121 	.word	0x00006121
    15b4:	0000104d 	.word	0x0000104d
    15b8:	00000ef5 	.word	0x00000ef5
    15bc:	00001025 	.word	0x00001025
    15c0:	00001039 	.word	0x00001039

000015c4 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
    15c4:	b530      	push	{r4, r5, lr}
    15c6:	b083      	sub	sp, #12
    15c8:	0005      	movs	r5, r0
    15ca:	0014      	movs	r4, r2
	if (!udi_msc_b_ack_trans)
    15cc:	4a1d      	ldr	r2, [pc, #116]	; (1644 <udi_msc_trans_block+0x80>)
    15ce:	7810      	ldrb	r0, [r2, #0]
    15d0:	b2c0      	uxtb	r0, r0
    15d2:	2800      	cmp	r0, #0
    15d4:	d013      	beq.n	15fe <udi_msc_trans_block+0x3a>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
    15d6:	2000      	movs	r0, #0
    15d8:	7010      	strb	r0, [r2, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    15da:	3081      	adds	r0, #129	; 0x81
    15dc:	2d00      	cmp	r5, #0
    15de:	d100      	bne.n	15e2 <udi_msc_trans_block+0x1e>
    15e0:	387f      	subs	r0, #127	; 0x7f
    15e2:	2b00      	cmp	r3, #0
    15e4:	d00d      	beq.n	1602 <udi_msc_trans_block+0x3e>
    15e6:	9300      	str	r3, [sp, #0]
    15e8:	0023      	movs	r3, r4
    15ea:	000a      	movs	r2, r1
    15ec:	2100      	movs	r1, #0
    15ee:	4d16      	ldr	r5, [pc, #88]	; (1648 <udi_msc_trans_block+0x84>)
    15f0:	47a8      	blx	r5
    15f2:	2800      	cmp	r0, #0
    15f4:	d020      	beq.n	1638 <udi_msc_trans_block+0x74>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
    15f6:	4b15      	ldr	r3, [pc, #84]	; (164c <udi_msc_trans_block+0x88>)
    15f8:	689a      	ldr	r2, [r3, #8]
    15fa:	1b14      	subs	r4, r2, r4
    15fc:	609c      	str	r4, [r3, #8]
	return true;
}
    15fe:	b003      	add	sp, #12
    1600:	bd30      	pop	{r4, r5, pc}
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    1602:	4b13      	ldr	r3, [pc, #76]	; (1650 <udi_msc_trans_block+0x8c>)
    1604:	9300      	str	r3, [sp, #0]
    1606:	0023      	movs	r3, r4
    1608:	000a      	movs	r2, r1
    160a:	2100      	movs	r1, #0
    160c:	4d0e      	ldr	r5, [pc, #56]	; (1648 <udi_msc_trans_block+0x84>)
    160e:	47a8      	blx	r5
    1610:	2800      	cmp	r0, #0
    1612:	d011      	beq.n	1638 <udi_msc_trans_block+0x74>
		while (!udi_msc_b_ack_trans);
    1614:	4a0b      	ldr	r2, [pc, #44]	; (1644 <udi_msc_trans_block+0x80>)
    1616:	7813      	ldrb	r3, [r2, #0]
    1618:	2b00      	cmp	r3, #0
    161a:	d0fc      	beq.n	1616 <udi_msc_trans_block+0x52>
		if (udi_msc_b_abort_trans) {
    161c:	4b0d      	ldr	r3, [pc, #52]	; (1654 <udi_msc_trans_block+0x90>)
    161e:	781b      	ldrb	r3, [r3, #0]
			return false;
    1620:	2000      	movs	r0, #0
		if (udi_msc_b_abort_trans) {
    1622:	2b00      	cmp	r3, #0
    1624:	d1eb      	bne.n	15fe <udi_msc_trans_block+0x3a>
		udi_msc_csw.dCSWDataResidue -= block_size;
    1626:	4b09      	ldr	r3, [pc, #36]	; (164c <udi_msc_trans_block+0x88>)
    1628:	689a      	ldr	r2, [r3, #8]
    162a:	1b14      	subs	r4, r2, r4
    162c:	609c      	str	r4, [r3, #8]
		return (!udi_msc_b_abort_trans);
    162e:	4b09      	ldr	r3, [pc, #36]	; (1654 <udi_msc_trans_block+0x90>)
    1630:	7818      	ldrb	r0, [r3, #0]
    1632:	2301      	movs	r3, #1
    1634:	4058      	eors	r0, r3
    1636:	e7e2      	b.n	15fe <udi_msc_trans_block+0x3a>
		udi_msc_b_ack_trans = true;
    1638:	2201      	movs	r2, #1
    163a:	4b02      	ldr	r3, [pc, #8]	; (1644 <udi_msc_trans_block+0x80>)
    163c:	701a      	strb	r2, [r3, #0]
		return false;
    163e:	2000      	movs	r0, #0
    1640:	e7dd      	b.n	15fe <udi_msc_trans_block+0x3a>
    1642:	46c0      	nop			; (mov r8, r8)
    1644:	20000044 	.word	0x20000044
    1648:	0000320d 	.word	0x0000320d
    164c:	20000048 	.word	0x20000048
    1650:	00000d85 	.word	0x00000d85
    1654:	200002f0 	.word	0x200002f0

00001658 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1658:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    165a:	4b11      	ldr	r3, [pc, #68]	; (16a0 <udc_next_desc_in_iface+0x48>)
    165c:	681b      	ldr	r3, [r3, #0]
    165e:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1660:	7894      	ldrb	r4, [r2, #2]
    1662:	78d3      	ldrb	r3, [r2, #3]
    1664:	021b      	lsls	r3, r3, #8
    1666:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1668:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    166a:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    166c:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    166e:	4290      	cmp	r0, r2
    1670:	d210      	bcs.n	1694 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1672:	7843      	ldrb	r3, [r0, #1]
    1674:	2b04      	cmp	r3, #4
    1676:	d00f      	beq.n	1698 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1678:	428b      	cmp	r3, r1
    167a:	d00a      	beq.n	1692 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    167c:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    167e:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    1680:	4290      	cmp	r0, r2
    1682:	d205      	bcs.n	1690 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1684:	7843      	ldrb	r3, [r0, #1]
    1686:	2b04      	cmp	r3, #4
    1688:	d008      	beq.n	169c <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    168a:	428b      	cmp	r3, r1
    168c:	d1f6      	bne.n	167c <udc_next_desc_in_iface+0x24>
    168e:	e000      	b.n	1692 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    1690:	2000      	movs	r0, #0
}
    1692:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    1694:	2000      	movs	r0, #0
    1696:	e7fc      	b.n	1692 <udc_next_desc_in_iface+0x3a>
    1698:	2000      	movs	r0, #0
    169a:	e7fa      	b.n	1692 <udc_next_desc_in_iface+0x3a>
    169c:	2000      	movs	r0, #0
    169e:	e7f8      	b.n	1692 <udc_next_desc_in_iface+0x3a>
    16a0:	200001f4 	.word	0x200001f4

000016a4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    16a4:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    16a6:	4b03      	ldr	r3, [pc, #12]	; (16b4 <udc_valid_address+0x10>)
    16a8:	885b      	ldrh	r3, [r3, #2]
    16aa:	207f      	movs	r0, #127	; 0x7f
    16ac:	4018      	ands	r0, r3
    16ae:	4b02      	ldr	r3, [pc, #8]	; (16b8 <udc_valid_address+0x14>)
    16b0:	4798      	blx	r3
}
    16b2:	bd10      	pop	{r4, pc}
    16b4:	20000534 	.word	0x20000534
    16b8:	000033e5 	.word	0x000033e5

000016bc <udc_update_iface_desc>:
{
    16bc:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    16be:	4b19      	ldr	r3, [pc, #100]	; (1724 <udc_update_iface_desc+0x68>)
    16c0:	781b      	ldrb	r3, [r3, #0]
		return false;
    16c2:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    16c4:	2b00      	cmp	r3, #0
    16c6:	d029      	beq.n	171c <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    16c8:	4b17      	ldr	r3, [pc, #92]	; (1728 <udc_update_iface_desc+0x6c>)
    16ca:	681b      	ldr	r3, [r3, #0]
    16cc:	681b      	ldr	r3, [r3, #0]
    16ce:	791c      	ldrb	r4, [r3, #4]
    16d0:	4284      	cmp	r4, r0
    16d2:	d923      	bls.n	171c <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    16d4:	4a15      	ldr	r2, [pc, #84]	; (172c <udc_update_iface_desc+0x70>)
    16d6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    16d8:	789a      	ldrb	r2, [r3, #2]
    16da:	78dc      	ldrb	r4, [r3, #3]
    16dc:	0224      	lsls	r4, r4, #8
    16de:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    16e0:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    16e2:	42a3      	cmp	r3, r4
    16e4:	d21c      	bcs.n	1720 <udc_update_iface_desc+0x64>
    16e6:	2500      	movs	r5, #0
    16e8:	2601      	movs	r6, #1
    16ea:	e007      	b.n	16fc <udc_update_iface_desc+0x40>
    16ec:	4a0f      	ldr	r2, [pc, #60]	; (172c <udc_update_iface_desc+0x70>)
    16ee:	6013      	str	r3, [r2, #0]
    16f0:	e00f      	b.n	1712 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    16f2:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    16f4:	189b      	adds	r3, r3, r2
    16f6:	0035      	movs	r5, r6
	while (ptr_end_desc >
    16f8:	42a3      	cmp	r3, r4
    16fa:	d20c      	bcs.n	1716 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    16fc:	785a      	ldrb	r2, [r3, #1]
    16fe:	2a04      	cmp	r2, #4
    1700:	d1f7      	bne.n	16f2 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1702:	789a      	ldrb	r2, [r3, #2]
    1704:	4282      	cmp	r2, r0
    1706:	d1f4      	bne.n	16f2 <udc_update_iface_desc+0x36>
    1708:	78da      	ldrb	r2, [r3, #3]
    170a:	428a      	cmp	r2, r1
    170c:	d1f1      	bne.n	16f2 <udc_update_iface_desc+0x36>
    170e:	2d00      	cmp	r5, #0
    1710:	d1ec      	bne.n	16ec <udc_update_iface_desc+0x30>
				return true; // Interface found
    1712:	2201      	movs	r2, #1
    1714:	e002      	b.n	171c <udc_update_iface_desc+0x60>
    1716:	4a05      	ldr	r2, [pc, #20]	; (172c <udc_update_iface_desc+0x70>)
    1718:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    171a:	2200      	movs	r2, #0
}
    171c:	0010      	movs	r0, r2
    171e:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    1720:	2200      	movs	r2, #0
    1722:	e7fb      	b.n	171c <udc_update_iface_desc+0x60>
    1724:	200001f0 	.word	0x200001f0
    1728:	200001f4 	.word	0x200001f4
    172c:	200001f8 	.word	0x200001f8

00001730 <udc_iface_disable>:
{
    1730:	b5f0      	push	{r4, r5, r6, r7, lr}
    1732:	46c6      	mov	lr, r8
    1734:	b500      	push	{lr}
    1736:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1738:	2100      	movs	r1, #0
    173a:	4b13      	ldr	r3, [pc, #76]	; (1788 <udc_iface_disable+0x58>)
    173c:	4798      	blx	r3
    173e:	1e05      	subs	r5, r0, #0
    1740:	d103      	bne.n	174a <udc_iface_disable+0x1a>
}
    1742:	0028      	movs	r0, r5
    1744:	bc04      	pop	{r2}
    1746:	4690      	mov	r8, r2
    1748:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    174a:	4b10      	ldr	r3, [pc, #64]	; (178c <udc_iface_disable+0x5c>)
    174c:	681b      	ldr	r3, [r3, #0]
    174e:	685b      	ldr	r3, [r3, #4]
    1750:	00a2      	lsls	r2, r4, #2
    1752:	58d3      	ldr	r3, [r2, r3]
    1754:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1756:	68db      	ldr	r3, [r3, #12]
    1758:	4798      	blx	r3
    175a:	0001      	movs	r1, r0
    175c:	0020      	movs	r0, r4
    175e:	4b0a      	ldr	r3, [pc, #40]	; (1788 <udc_iface_disable+0x58>)
    1760:	4798      	blx	r3
    1762:	1e05      	subs	r5, r0, #0
    1764:	d0ed      	beq.n	1742 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1766:	4b0a      	ldr	r3, [pc, #40]	; (1790 <udc_iface_disable+0x60>)
    1768:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    176a:	4e0a      	ldr	r6, [pc, #40]	; (1794 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    176c:	4f0a      	ldr	r7, [pc, #40]	; (1798 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    176e:	2105      	movs	r1, #5
    1770:	0020      	movs	r0, r4
    1772:	47b0      	blx	r6
    1774:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    1776:	d002      	beq.n	177e <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    1778:	7880      	ldrb	r0, [r0, #2]
    177a:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    177c:	e7f7      	b.n	176e <udc_iface_disable+0x3e>
	udi_api->disable();
    177e:	4643      	mov	r3, r8
    1780:	685b      	ldr	r3, [r3, #4]
    1782:	4798      	blx	r3
	return true;
    1784:	e7dd      	b.n	1742 <udc_iface_disable+0x12>
    1786:	46c0      	nop			; (mov r8, r8)
    1788:	000016bd 	.word	0x000016bd
    178c:	200001f4 	.word	0x200001f4
    1790:	200001f8 	.word	0x200001f8
    1794:	00001659 	.word	0x00001659
    1798:	00002ecd 	.word	0x00002ecd

0000179c <udc_iface_enable>:
{
    179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    179e:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    17a0:	4b0f      	ldr	r3, [pc, #60]	; (17e0 <udc_iface_enable+0x44>)
    17a2:	4798      	blx	r3
    17a4:	2800      	cmp	r0, #0
    17a6:	d019      	beq.n	17dc <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    17a8:	4b0e      	ldr	r3, [pc, #56]	; (17e4 <udc_iface_enable+0x48>)
    17aa:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    17ac:	4e0e      	ldr	r6, [pc, #56]	; (17e8 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    17ae:	4f0f      	ldr	r7, [pc, #60]	; (17ec <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    17b0:	2105      	movs	r1, #5
    17b2:	0020      	movs	r0, r4
    17b4:	47b0      	blx	r6
    17b6:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    17b8:	d009      	beq.n	17ce <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    17ba:	7903      	ldrb	r3, [r0, #4]
    17bc:	7942      	ldrb	r2, [r0, #5]
    17be:	0212      	lsls	r2, r2, #8
    17c0:	431a      	orrs	r2, r3
    17c2:	78c1      	ldrb	r1, [r0, #3]
    17c4:	7880      	ldrb	r0, [r0, #2]
    17c6:	47b8      	blx	r7
    17c8:	2800      	cmp	r0, #0
    17ca:	d1f1      	bne.n	17b0 <udc_iface_enable+0x14>
    17cc:	e006      	b.n	17dc <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    17ce:	4b08      	ldr	r3, [pc, #32]	; (17f0 <udc_iface_enable+0x54>)
    17d0:	681b      	ldr	r3, [r3, #0]
    17d2:	685b      	ldr	r3, [r3, #4]
    17d4:	00ad      	lsls	r5, r5, #2
    17d6:	58eb      	ldr	r3, [r5, r3]
    17d8:	681b      	ldr	r3, [r3, #0]
    17da:	4798      	blx	r3
}
    17dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17de:	46c0      	nop			; (mov r8, r8)
    17e0:	000016bd 	.word	0x000016bd
    17e4:	200001f8 	.word	0x200001f8
    17e8:	00001659 	.word	0x00001659
    17ec:	00002f25 	.word	0x00002f25
    17f0:	200001f4 	.word	0x200001f4

000017f4 <udc_start>:
{
    17f4:	b510      	push	{r4, lr}
	udd_enable();
    17f6:	4b01      	ldr	r3, [pc, #4]	; (17fc <udc_start+0x8>)
    17f8:	4798      	blx	r3
}
    17fa:	bd10      	pop	{r4, pc}
    17fc:	000034f1 	.word	0x000034f1

00001800 <udc_reset>:
{
    1800:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1802:	4b0e      	ldr	r3, [pc, #56]	; (183c <udc_reset+0x3c>)
    1804:	781b      	ldrb	r3, [r3, #0]
    1806:	2b00      	cmp	r3, #0
    1808:	d011      	beq.n	182e <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    180a:	4b0d      	ldr	r3, [pc, #52]	; (1840 <udc_reset+0x40>)
    180c:	681b      	ldr	r3, [r3, #0]
    180e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1810:	791b      	ldrb	r3, [r3, #4]
    1812:	2b00      	cmp	r3, #0
    1814:	d00b      	beq.n	182e <udc_reset+0x2e>
    1816:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    1818:	4e0a      	ldr	r6, [pc, #40]	; (1844 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    181a:	4d09      	ldr	r5, [pc, #36]	; (1840 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    181c:	0020      	movs	r0, r4
    181e:	47b0      	blx	r6
				iface_num++) {
    1820:	3401      	adds	r4, #1
    1822:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1824:	682b      	ldr	r3, [r5, #0]
    1826:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1828:	791b      	ldrb	r3, [r3, #4]
    182a:	42a3      	cmp	r3, r4
    182c:	d8f6      	bhi.n	181c <udc_reset+0x1c>
	udc_num_configuration = 0;
    182e:	2200      	movs	r2, #0
    1830:	4b02      	ldr	r3, [pc, #8]	; (183c <udc_reset+0x3c>)
    1832:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    1834:	3201      	adds	r2, #1
    1836:	4b04      	ldr	r3, [pc, #16]	; (1848 <udc_reset+0x48>)
    1838:	801a      	strh	r2, [r3, #0]
}
    183a:	bd70      	pop	{r4, r5, r6, pc}
    183c:	200001f0 	.word	0x200001f0
    1840:	200001f4 	.word	0x200001f4
    1844:	00001731 	.word	0x00001731
    1848:	200001e6 	.word	0x200001e6

0000184c <udc_sof_notify>:
{
    184c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    184e:	4b0e      	ldr	r3, [pc, #56]	; (1888 <udc_sof_notify+0x3c>)
    1850:	781b      	ldrb	r3, [r3, #0]
    1852:	2b00      	cmp	r3, #0
    1854:	d017      	beq.n	1886 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1856:	4b0d      	ldr	r3, [pc, #52]	; (188c <udc_sof_notify+0x40>)
    1858:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    185a:	681a      	ldr	r2, [r3, #0]
    185c:	7912      	ldrb	r2, [r2, #4]
    185e:	2a00      	cmp	r2, #0
    1860:	d011      	beq.n	1886 <udc_sof_notify+0x3a>
    1862:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1864:	4d09      	ldr	r5, [pc, #36]	; (188c <udc_sof_notify+0x40>)
    1866:	e006      	b.n	1876 <udc_sof_notify+0x2a>
				iface_num++) {
    1868:	3401      	adds	r4, #1
    186a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    186c:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    186e:	681a      	ldr	r2, [r3, #0]
    1870:	7912      	ldrb	r2, [r2, #4]
    1872:	42a2      	cmp	r2, r4
    1874:	d907      	bls.n	1886 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1876:	685b      	ldr	r3, [r3, #4]
    1878:	00a2      	lsls	r2, r4, #2
    187a:	58d3      	ldr	r3, [r2, r3]
    187c:	691b      	ldr	r3, [r3, #16]
    187e:	2b00      	cmp	r3, #0
    1880:	d0f2      	beq.n	1868 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1882:	4798      	blx	r3
    1884:	e7f0      	b.n	1868 <udc_sof_notify+0x1c>
}
    1886:	bd70      	pop	{r4, r5, r6, pc}
    1888:	200001f0 	.word	0x200001f0
    188c:	200001f4 	.word	0x200001f4

00001890 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1892:	4bac      	ldr	r3, [pc, #688]	; (1b44 <udc_process_setup+0x2b4>)
    1894:	2200      	movs	r2, #0
    1896:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1898:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    189a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    189c:	781b      	ldrb	r3, [r3, #0]
    189e:	b25a      	sxtb	r2, r3
    18a0:	2a00      	cmp	r2, #0
    18a2:	db13      	blt.n	18cc <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    18a4:	2260      	movs	r2, #96	; 0x60
    18a6:	421a      	tst	r2, r3
    18a8:	d100      	bne.n	18ac <udc_process_setup+0x1c>
    18aa:	e0da      	b.n	1a62 <udc_process_setup+0x1d2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    18ac:	4ba5      	ldr	r3, [pc, #660]	; (1b44 <udc_process_setup+0x2b4>)
    18ae:	781a      	ldrb	r2, [r3, #0]
    18b0:	231f      	movs	r3, #31
    18b2:	4013      	ands	r3, r2
    18b4:	2b01      	cmp	r3, #1
    18b6:	d100      	bne.n	18ba <udc_process_setup+0x2a>
    18b8:	e176      	b.n	1ba8 <udc_process_setup+0x318>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    18ba:	4ba2      	ldr	r3, [pc, #648]	; (1b44 <udc_process_setup+0x2b4>)
    18bc:	781a      	ldrb	r2, [r3, #0]
    18be:	231f      	movs	r3, #31
    18c0:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    18c2:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    18c4:	2b02      	cmp	r3, #2
    18c6:	d100      	bne.n	18ca <udc_process_setup+0x3a>
    18c8:	e1cc      	b.n	1c64 <udc_process_setup+0x3d4>
#endif
}
    18ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    18cc:	4a9d      	ldr	r2, [pc, #628]	; (1b44 <udc_process_setup+0x2b4>)
    18ce:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    18d0:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    18d2:	2a00      	cmp	r2, #0
    18d4:	d0f9      	beq.n	18ca <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    18d6:	2160      	movs	r1, #96	; 0x60
    18d8:	4219      	tst	r1, r3
    18da:	d1e7      	bne.n	18ac <udc_process_setup+0x1c>
    18dc:	211f      	movs	r1, #31
    18de:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    18e0:	d108      	bne.n	18f4 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    18e2:	4998      	ldr	r1, [pc, #608]	; (1b44 <udc_process_setup+0x2b4>)
    18e4:	7849      	ldrb	r1, [r1, #1]
    18e6:	2906      	cmp	r1, #6
    18e8:	d023      	beq.n	1932 <udc_process_setup+0xa2>
    18ea:	2908      	cmp	r1, #8
    18ec:	d100      	bne.n	18f0 <udc_process_setup+0x60>
    18ee:	e087      	b.n	1a00 <udc_process_setup+0x170>
    18f0:	2900      	cmp	r1, #0
    18f2:	d017      	beq.n	1924 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    18f4:	2b01      	cmp	r3, #1
    18f6:	d100      	bne.n	18fa <udc_process_setup+0x6a>
    18f8:	e08a      	b.n	1a10 <udc_process_setup+0x180>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    18fa:	2b02      	cmp	r3, #2
    18fc:	d1d6      	bne.n	18ac <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    18fe:	4b91      	ldr	r3, [pc, #580]	; (1b44 <udc_process_setup+0x2b4>)
    1900:	785b      	ldrb	r3, [r3, #1]
	return false;
    1902:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    1904:	2b00      	cmp	r3, #0
    1906:	d000      	beq.n	190a <udc_process_setup+0x7a>
    1908:	e1a8      	b.n	1c5c <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    190a:	2a02      	cmp	r2, #2
    190c:	d1d5      	bne.n	18ba <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    190e:	4b8d      	ldr	r3, [pc, #564]	; (1b44 <udc_process_setup+0x2b4>)
    1910:	7918      	ldrb	r0, [r3, #4]
    1912:	4b8d      	ldr	r3, [pc, #564]	; (1b48 <udc_process_setup+0x2b8>)
    1914:	4798      	blx	r3
    1916:	4b8d      	ldr	r3, [pc, #564]	; (1b4c <udc_process_setup+0x2bc>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    1918:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    191a:	2102      	movs	r1, #2
    191c:	0018      	movs	r0, r3
    191e:	4b8c      	ldr	r3, [pc, #560]	; (1b50 <udc_process_setup+0x2c0>)
    1920:	4798      	blx	r3
    1922:	e0ff      	b.n	1b24 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1924:	2a02      	cmp	r2, #2
    1926:	d1c8      	bne.n	18ba <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1928:	3102      	adds	r1, #2
    192a:	488a      	ldr	r0, [pc, #552]	; (1b54 <udc_process_setup+0x2c4>)
    192c:	4b88      	ldr	r3, [pc, #544]	; (1b50 <udc_process_setup+0x2c0>)
    192e:	4798      	blx	r3
    1930:	e0f8      	b.n	1b24 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1932:	4b84      	ldr	r3, [pc, #528]	; (1b44 <udc_process_setup+0x2b4>)
    1934:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1936:	0a13      	lsrs	r3, r2, #8
    1938:	2b02      	cmp	r3, #2
    193a:	d023      	beq.n	1984 <udc_process_setup+0xf4>
    193c:	b2d9      	uxtb	r1, r3
    193e:	2902      	cmp	r1, #2
    1940:	d90f      	bls.n	1962 <udc_process_setup+0xd2>
    1942:	2b03      	cmp	r3, #3
    1944:	d034      	beq.n	19b0 <udc_process_setup+0x120>
    1946:	2b0f      	cmp	r3, #15
    1948:	d000      	beq.n	194c <udc_process_setup+0xbc>
    194a:	e184      	b.n	1c56 <udc_process_setup+0x3c6>
		if (udc_config.conf_bos == NULL) {
    194c:	4b82      	ldr	r3, [pc, #520]	; (1b58 <udc_process_setup+0x2c8>)
    194e:	6898      	ldr	r0, [r3, #8]
    1950:	2800      	cmp	r0, #0
    1952:	d0b2      	beq.n	18ba <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1954:	7883      	ldrb	r3, [r0, #2]
    1956:	78c1      	ldrb	r1, [r0, #3]
    1958:	0209      	lsls	r1, r1, #8
    195a:	4319      	orrs	r1, r3
    195c:	4b7c      	ldr	r3, [pc, #496]	; (1b50 <udc_process_setup+0x2c0>)
    195e:	4798      	blx	r3
    1960:	e007      	b.n	1972 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1962:	2b01      	cmp	r3, #1
    1964:	d000      	beq.n	1968 <udc_process_setup+0xd8>
    1966:	e176      	b.n	1c56 <udc_process_setup+0x3c6>
				(uint8_t *) udc_config.confdev_lsfs,
    1968:	4b7b      	ldr	r3, [pc, #492]	; (1b58 <udc_process_setup+0x2c8>)
    196a:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    196c:	7801      	ldrb	r1, [r0, #0]
    196e:	4b78      	ldr	r3, [pc, #480]	; (1b50 <udc_process_setup+0x2c0>)
    1970:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1972:	4b74      	ldr	r3, [pc, #464]	; (1b44 <udc_process_setup+0x2b4>)
    1974:	88da      	ldrh	r2, [r3, #6]
    1976:	899b      	ldrh	r3, [r3, #12]
    1978:	4293      	cmp	r3, r2
    197a:	d800      	bhi.n	197e <udc_process_setup+0xee>
    197c:	e0d2      	b.n	1b24 <udc_process_setup+0x294>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    197e:	4b71      	ldr	r3, [pc, #452]	; (1b44 <udc_process_setup+0x2b4>)
    1980:	819a      	strh	r2, [r3, #12]
    1982:	e0cf      	b.n	1b24 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1984:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    1986:	4b74      	ldr	r3, [pc, #464]	; (1b58 <udc_process_setup+0x2c8>)
    1988:	681b      	ldr	r3, [r3, #0]
    198a:	7c5b      	ldrb	r3, [r3, #17]
    198c:	4293      	cmp	r3, r2
    198e:	d800      	bhi.n	1992 <udc_process_setup+0x102>
    1990:	e793      	b.n	18ba <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1992:	4b71      	ldr	r3, [pc, #452]	; (1b58 <udc_process_setup+0x2c8>)
    1994:	685b      	ldr	r3, [r3, #4]
    1996:	00d2      	lsls	r2, r2, #3
    1998:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    199a:	7883      	ldrb	r3, [r0, #2]
    199c:	78c1      	ldrb	r1, [r0, #3]
    199e:	0209      	lsls	r1, r1, #8
    19a0:	4319      	orrs	r1, r3
    19a2:	4b6b      	ldr	r3, [pc, #428]	; (1b50 <udc_process_setup+0x2c0>)
    19a4:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    19a6:	4b67      	ldr	r3, [pc, #412]	; (1b44 <udc_process_setup+0x2b4>)
    19a8:	689b      	ldr	r3, [r3, #8]
    19aa:	2202      	movs	r2, #2
    19ac:	705a      	strb	r2, [r3, #1]
    19ae:	e7e0      	b.n	1972 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    19b0:	23ff      	movs	r3, #255	; 0xff
    19b2:	401a      	ands	r2, r3
    19b4:	2a01      	cmp	r2, #1
    19b6:	d020      	beq.n	19fa <udc_process_setup+0x16a>
    19b8:	2a00      	cmp	r2, #0
    19ba:	d019      	beq.n	19f0 <udc_process_setup+0x160>
    19bc:	2a02      	cmp	r2, #2
    19be:	d100      	bne.n	19c2 <udc_process_setup+0x132>
    19c0:	e178      	b.n	1cb4 <udc_process_setup+0x424>
    19c2:	2a03      	cmp	r2, #3
    19c4:	d000      	beq.n	19c8 <udc_process_setup+0x138>
    19c6:	e771      	b.n	18ac <udc_process_setup+0x1c>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    19c8:	210c      	movs	r1, #12
		str = udc_get_string_serial_name();
    19ca:	4c64      	ldr	r4, [pc, #400]	; (1b5c <udc_process_setup+0x2cc>)
    19cc:	4a64      	ldr	r2, [pc, #400]	; (1b60 <udc_process_setup+0x2d0>)
    19ce:	3202      	adds	r2, #2
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    19d0:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    19d2:	5ce0      	ldrb	r0, [r4, r3]
    19d4:	8010      	strh	r0, [r2, #0]
    19d6:	3301      	adds	r3, #1
    19d8:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    19da:	b2d8      	uxtb	r0, r3
    19dc:	4281      	cmp	r1, r0
    19de:	d8f8      	bhi.n	19d2 <udc_process_setup+0x142>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    19e0:	0049      	lsls	r1, r1, #1
    19e2:	3102      	adds	r1, #2
    19e4:	485e      	ldr	r0, [pc, #376]	; (1b60 <udc_process_setup+0x2d0>)
    19e6:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    19e8:	b289      	uxth	r1, r1
    19ea:	4b59      	ldr	r3, [pc, #356]	; (1b50 <udc_process_setup+0x2c0>)
    19ec:	4798      	blx	r3
    19ee:	e7c0      	b.n	1972 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    19f0:	2104      	movs	r1, #4
    19f2:	485c      	ldr	r0, [pc, #368]	; (1b64 <udc_process_setup+0x2d4>)
    19f4:	4b56      	ldr	r3, [pc, #344]	; (1b50 <udc_process_setup+0x2c0>)
    19f6:	4798      	blx	r3
    19f8:	e7bb      	b.n	1972 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    19fa:	4c5b      	ldr	r4, [pc, #364]	; (1b68 <udc_process_setup+0x2d8>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    19fc:	2109      	movs	r1, #9
    19fe:	e7e5      	b.n	19cc <udc_process_setup+0x13c>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1a00:	2a01      	cmp	r2, #1
    1a02:	d000      	beq.n	1a06 <udc_process_setup+0x176>
    1a04:	e759      	b.n	18ba <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    1a06:	2101      	movs	r1, #1
    1a08:	4858      	ldr	r0, [pc, #352]	; (1b6c <udc_process_setup+0x2dc>)
    1a0a:	4b51      	ldr	r3, [pc, #324]	; (1b50 <udc_process_setup+0x2c0>)
    1a0c:	4798      	blx	r3
    1a0e:	e089      	b.n	1b24 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1a10:	494c      	ldr	r1, [pc, #304]	; (1b44 <udc_process_setup+0x2b4>)
    1a12:	7849      	ldrb	r1, [r1, #1]
    1a14:	290a      	cmp	r1, #10
    1a16:	d000      	beq.n	1a1a <udc_process_setup+0x18a>
    1a18:	e76f      	b.n	18fa <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1a1a:	2a01      	cmp	r2, #1
    1a1c:	d000      	beq.n	1a20 <udc_process_setup+0x190>
    1a1e:	e0c3      	b.n	1ba8 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    1a20:	4b52      	ldr	r3, [pc, #328]	; (1b6c <udc_process_setup+0x2dc>)
    1a22:	781b      	ldrb	r3, [r3, #0]
    1a24:	2b00      	cmp	r3, #0
    1a26:	d100      	bne.n	1a2a <udc_process_setup+0x19a>
    1a28:	e0be      	b.n	1ba8 <udc_process_setup+0x318>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1a2a:	4b46      	ldr	r3, [pc, #280]	; (1b44 <udc_process_setup+0x2b4>)
    1a2c:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1a2e:	4b50      	ldr	r3, [pc, #320]	; (1b70 <udc_process_setup+0x2e0>)
    1a30:	681d      	ldr	r5, [r3, #0]
    1a32:	682b      	ldr	r3, [r5, #0]
    1a34:	791b      	ldrb	r3, [r3, #4]
    1a36:	42a3      	cmp	r3, r4
    1a38:	d800      	bhi.n	1a3c <udc_process_setup+0x1ac>
    1a3a:	e0b5      	b.n	1ba8 <udc_process_setup+0x318>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1a3c:	2100      	movs	r1, #0
    1a3e:	0020      	movs	r0, r4
    1a40:	4b4c      	ldr	r3, [pc, #304]	; (1b74 <udc_process_setup+0x2e4>)
    1a42:	4798      	blx	r3
    1a44:	2800      	cmp	r0, #0
    1a46:	d100      	bne.n	1a4a <udc_process_setup+0x1ba>
    1a48:	e730      	b.n	18ac <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a4a:	686b      	ldr	r3, [r5, #4]
    1a4c:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    1a4e:	58e3      	ldr	r3, [r4, r3]
    1a50:	68db      	ldr	r3, [r3, #12]
    1a52:	4798      	blx	r3
    1a54:	4b48      	ldr	r3, [pc, #288]	; (1b78 <udc_process_setup+0x2e8>)
    1a56:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    1a58:	2101      	movs	r1, #1
    1a5a:	0018      	movs	r0, r3
    1a5c:	4b3c      	ldr	r3, [pc, #240]	; (1b50 <udc_process_setup+0x2c0>)
    1a5e:	4798      	blx	r3
    1a60:	e060      	b.n	1b24 <udc_process_setup+0x294>
    1a62:	221f      	movs	r2, #31
    1a64:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1a66:	d15f      	bne.n	1b28 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
    1a68:	4a36      	ldr	r2, [pc, #216]	; (1b44 <udc_process_setup+0x2b4>)
    1a6a:	7852      	ldrb	r2, [r2, #1]
    1a6c:	2a03      	cmp	r2, #3
    1a6e:	d100      	bne.n	1a72 <udc_process_setup+0x1e2>
    1a70:	e0f3      	b.n	1c5a <udc_process_setup+0x3ca>
    1a72:	b2d1      	uxtb	r1, r2
    1a74:	2903      	cmp	r1, #3
    1a76:	d93b      	bls.n	1af0 <udc_process_setup+0x260>
    1a78:	2a05      	cmp	r2, #5
    1a7a:	d04b      	beq.n	1b14 <udc_process_setup+0x284>
    1a7c:	2a09      	cmp	r2, #9
    1a7e:	d153      	bne.n	1b28 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1a80:	4b30      	ldr	r3, [pc, #192]	; (1b44 <udc_process_setup+0x2b4>)
    1a82:	88db      	ldrh	r3, [r3, #6]
    1a84:	2b00      	cmp	r3, #0
    1a86:	d000      	beq.n	1a8a <udc_process_setup+0x1fa>
    1a88:	e717      	b.n	18ba <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    1a8a:	4b3c      	ldr	r3, [pc, #240]	; (1b7c <udc_process_setup+0x2ec>)
    1a8c:	4798      	blx	r3
    1a8e:	2800      	cmp	r0, #0
    1a90:	d100      	bne.n	1a94 <udc_process_setup+0x204>
    1a92:	e70b      	b.n	18ac <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a94:	4b2b      	ldr	r3, [pc, #172]	; (1b44 <udc_process_setup+0x2b4>)
    1a96:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1a98:	4b2f      	ldr	r3, [pc, #188]	; (1b58 <udc_process_setup+0x2c8>)
    1a9a:	681b      	ldr	r3, [r3, #0]
    1a9c:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a9e:	429a      	cmp	r2, r3
    1aa0:	dd00      	ble.n	1aa4 <udc_process_setup+0x214>
    1aa2:	e703      	b.n	18ac <udc_process_setup+0x1c>
	udc_reset();
    1aa4:	4b36      	ldr	r3, [pc, #216]	; (1b80 <udc_process_setup+0x2f0>)
    1aa6:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1aa8:	4b26      	ldr	r3, [pc, #152]	; (1b44 <udc_process_setup+0x2b4>)
    1aaa:	789b      	ldrb	r3, [r3, #2]
    1aac:	4a2f      	ldr	r2, [pc, #188]	; (1b6c <udc_process_setup+0x2dc>)
    1aae:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d037      	beq.n	1b24 <udc_process_setup+0x294>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1ab4:	4a33      	ldr	r2, [pc, #204]	; (1b84 <udc_process_setup+0x2f4>)
    1ab6:	4694      	mov	ip, r2
    1ab8:	4463      	add	r3, ip
    1aba:	00db      	lsls	r3, r3, #3
    1abc:	4a26      	ldr	r2, [pc, #152]	; (1b58 <udc_process_setup+0x2c8>)
    1abe:	6852      	ldr	r2, [r2, #4]
    1ac0:	18d3      	adds	r3, r2, r3
    1ac2:	4a2b      	ldr	r2, [pc, #172]	; (1b70 <udc_process_setup+0x2e0>)
    1ac4:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ac6:	681b      	ldr	r3, [r3, #0]
    1ac8:	791b      	ldrb	r3, [r3, #4]
    1aca:	2b00      	cmp	r3, #0
    1acc:	d02a      	beq.n	1b24 <udc_process_setup+0x294>
    1ace:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    1ad0:	4d2d      	ldr	r5, [pc, #180]	; (1b88 <udc_process_setup+0x2f8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ad2:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    1ad4:	2100      	movs	r1, #0
    1ad6:	0020      	movs	r0, r4
    1ad8:	47a8      	blx	r5
    1ada:	2800      	cmp	r0, #0
    1adc:	d100      	bne.n	1ae0 <udc_process_setup+0x250>
    1ade:	e6e5      	b.n	18ac <udc_process_setup+0x1c>
			iface_num++) {
    1ae0:	3401      	adds	r4, #1
    1ae2:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ae4:	6833      	ldr	r3, [r6, #0]
    1ae6:	681b      	ldr	r3, [r3, #0]
    1ae8:	791b      	ldrb	r3, [r3, #4]
    1aea:	42a3      	cmp	r3, r4
    1aec:	d8f2      	bhi.n	1ad4 <udc_process_setup+0x244>
    1aee:	e019      	b.n	1b24 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1af0:	2a01      	cmp	r2, #1
    1af2:	d119      	bne.n	1b28 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1af4:	4b13      	ldr	r3, [pc, #76]	; (1b44 <udc_process_setup+0x2b4>)
    1af6:	88db      	ldrh	r3, [r3, #6]
    1af8:	2b00      	cmp	r3, #0
    1afa:	d000      	beq.n	1afe <udc_process_setup+0x26e>
    1afc:	e6dd      	b.n	18ba <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1afe:	4b11      	ldr	r3, [pc, #68]	; (1b44 <udc_process_setup+0x2b4>)
    1b00:	885b      	ldrh	r3, [r3, #2]
    1b02:	2b01      	cmp	r3, #1
    1b04:	d000      	beq.n	1b08 <udc_process_setup+0x278>
    1b06:	e6d8      	b.n	18ba <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1b08:	4a12      	ldr	r2, [pc, #72]	; (1b54 <udc_process_setup+0x2c4>)
    1b0a:	8813      	ldrh	r3, [r2, #0]
    1b0c:	2102      	movs	r1, #2
    1b0e:	438b      	bics	r3, r1
    1b10:	8013      	strh	r3, [r2, #0]
    1b12:	e007      	b.n	1b24 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength) {
    1b14:	4b0b      	ldr	r3, [pc, #44]	; (1b44 <udc_process_setup+0x2b4>)
    1b16:	88db      	ldrh	r3, [r3, #6]
    1b18:	2b00      	cmp	r3, #0
    1b1a:	d000      	beq.n	1b1e <udc_process_setup+0x28e>
    1b1c:	e6cd      	b.n	18ba <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    1b1e:	4a1b      	ldr	r2, [pc, #108]	; (1b8c <udc_process_setup+0x2fc>)
    1b20:	4b08      	ldr	r3, [pc, #32]	; (1b44 <udc_process_setup+0x2b4>)
    1b22:	611a      	str	r2, [r3, #16]
			return true;
    1b24:	2001      	movs	r0, #1
    1b26:	e6d0      	b.n	18ca <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1b28:	2b01      	cmp	r3, #1
    1b2a:	d031      	beq.n	1b90 <udc_process_setup+0x300>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1b2c:	2b02      	cmp	r3, #2
    1b2e:	d000      	beq.n	1b32 <udc_process_setup+0x2a2>
    1b30:	e6bc      	b.n	18ac <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1b32:	4b04      	ldr	r3, [pc, #16]	; (1b44 <udc_process_setup+0x2b4>)
    1b34:	785b      	ldrb	r3, [r3, #1]
    1b36:	2b01      	cmp	r3, #1
    1b38:	d06c      	beq.n	1c14 <udc_process_setup+0x384>
    1b3a:	2b03      	cmp	r3, #3
    1b3c:	d100      	bne.n	1b40 <udc_process_setup+0x2b0>
    1b3e:	e078      	b.n	1c32 <udc_process_setup+0x3a2>
	return false;
    1b40:	2000      	movs	r0, #0
    1b42:	e08b      	b.n	1c5c <udc_process_setup+0x3cc>
    1b44:	20000534 	.word	0x20000534
    1b48:	0000302d 	.word	0x0000302d
    1b4c:	200001e8 	.word	0x200001e8
    1b50:	00003405 	.word	0x00003405
    1b54:	200001e6 	.word	0x200001e6
    1b58:	200000ac 	.word	0x200000ac
    1b5c:	00007ef0 	.word	0x00007ef0
    1b60:	2000007c 	.word	0x2000007c
    1b64:	20000098 	.word	0x20000098
    1b68:	2000009c 	.word	0x2000009c
    1b6c:	200001f0 	.word	0x200001f0
    1b70:	200001f4 	.word	0x200001f4
    1b74:	000016bd 	.word	0x000016bd
    1b78:	200001ec 	.word	0x200001ec
    1b7c:	000033f5 	.word	0x000033f5
    1b80:	00001801 	.word	0x00001801
    1b84:	1fffffff 	.word	0x1fffffff
    1b88:	0000179d 	.word	0x0000179d
    1b8c:	000016a5 	.word	0x000016a5
			switch (udd_g_ctrlreq.req.bRequest) {
    1b90:	4a4a      	ldr	r2, [pc, #296]	; (1cbc <udc_process_setup+0x42c>)
    1b92:	7852      	ldrb	r2, [r2, #1]
    1b94:	2a0b      	cmp	r2, #11
    1b96:	d1c9      	bne.n	1b2c <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
    1b98:	4b48      	ldr	r3, [pc, #288]	; (1cbc <udc_process_setup+0x42c>)
    1b9a:	88db      	ldrh	r3, [r3, #6]
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	d103      	bne.n	1ba8 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    1ba0:	4b47      	ldr	r3, [pc, #284]	; (1cc0 <udc_process_setup+0x430>)
    1ba2:	781b      	ldrb	r3, [r3, #0]
    1ba4:	2b00      	cmp	r3, #0
    1ba6:	d127      	bne.n	1bf8 <udc_process_setup+0x368>
	if (0 == udc_num_configuration) {
    1ba8:	4b45      	ldr	r3, [pc, #276]	; (1cc0 <udc_process_setup+0x430>)
    1baa:	781b      	ldrb	r3, [r3, #0]
	return false;
    1bac:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    1bae:	2b00      	cmp	r3, #0
    1bb0:	d100      	bne.n	1bb4 <udc_process_setup+0x324>
    1bb2:	e68a      	b.n	18ca <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1bb4:	4b41      	ldr	r3, [pc, #260]	; (1cbc <udc_process_setup+0x42c>)
    1bb6:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1bb8:	4b42      	ldr	r3, [pc, #264]	; (1cc4 <udc_process_setup+0x434>)
    1bba:	681d      	ldr	r5, [r3, #0]
    1bbc:	682b      	ldr	r3, [r5, #0]
    1bbe:	791b      	ldrb	r3, [r3, #4]
    1bc0:	42a3      	cmp	r3, r4
    1bc2:	d800      	bhi.n	1bc6 <udc_process_setup+0x336>
    1bc4:	e681      	b.n	18ca <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1bc6:	2100      	movs	r1, #0
    1bc8:	0020      	movs	r0, r4
    1bca:	4b3f      	ldr	r3, [pc, #252]	; (1cc8 <udc_process_setup+0x438>)
    1bcc:	4798      	blx	r3
    1bce:	2800      	cmp	r0, #0
    1bd0:	d100      	bne.n	1bd4 <udc_process_setup+0x344>
    1bd2:	e672      	b.n	18ba <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1bd4:	686b      	ldr	r3, [r5, #4]
    1bd6:	00a2      	lsls	r2, r4, #2
    1bd8:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1bda:	68eb      	ldr	r3, [r5, #12]
    1bdc:	4798      	blx	r3
    1bde:	0001      	movs	r1, r0
    1be0:	0020      	movs	r0, r4
    1be2:	4b39      	ldr	r3, [pc, #228]	; (1cc8 <udc_process_setup+0x438>)
    1be4:	4798      	blx	r3
    1be6:	2800      	cmp	r0, #0
    1be8:	d100      	bne.n	1bec <udc_process_setup+0x35c>
    1bea:	e666      	b.n	18ba <udc_process_setup+0x2a>
	return udi_api->setup();
    1bec:	68ab      	ldr	r3, [r5, #8]
    1bee:	4798      	blx	r3
		if (udc_req_iface()) {
    1bf0:	2800      	cmp	r0, #0
    1bf2:	d000      	beq.n	1bf6 <udc_process_setup+0x366>
    1bf4:	e669      	b.n	18ca <udc_process_setup+0x3a>
    1bf6:	e660      	b.n	18ba <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1bf8:	4b30      	ldr	r3, [pc, #192]	; (1cbc <udc_process_setup+0x42c>)
    1bfa:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1bfc:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    1bfe:	0028      	movs	r0, r5
    1c00:	4b32      	ldr	r3, [pc, #200]	; (1ccc <udc_process_setup+0x43c>)
    1c02:	4798      	blx	r3
    1c04:	2800      	cmp	r0, #0
    1c06:	d100      	bne.n	1c0a <udc_process_setup+0x37a>
    1c08:	e650      	b.n	18ac <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    1c0a:	b2e1      	uxtb	r1, r4
    1c0c:	0028      	movs	r0, r5
    1c0e:	4b30      	ldr	r3, [pc, #192]	; (1cd0 <udc_process_setup+0x440>)
    1c10:	4798      	blx	r3
    1c12:	e023      	b.n	1c5c <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
    1c14:	4b29      	ldr	r3, [pc, #164]	; (1cbc <udc_process_setup+0x42c>)
    1c16:	88db      	ldrh	r3, [r3, #6]
    1c18:	2b00      	cmp	r3, #0
    1c1a:	d000      	beq.n	1c1e <udc_process_setup+0x38e>
    1c1c:	e64d      	b.n	18ba <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1c1e:	4b27      	ldr	r3, [pc, #156]	; (1cbc <udc_process_setup+0x42c>)
    1c20:	885b      	ldrh	r3, [r3, #2]
    1c22:	2b00      	cmp	r3, #0
    1c24:	d000      	beq.n	1c28 <udc_process_setup+0x398>
    1c26:	e648      	b.n	18ba <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1c28:	4b24      	ldr	r3, [pc, #144]	; (1cbc <udc_process_setup+0x42c>)
    1c2a:	7918      	ldrb	r0, [r3, #4]
    1c2c:	4b29      	ldr	r3, [pc, #164]	; (1cd4 <udc_process_setup+0x444>)
    1c2e:	4798      	blx	r3
    1c30:	e014      	b.n	1c5c <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
    1c32:	4b22      	ldr	r3, [pc, #136]	; (1cbc <udc_process_setup+0x42c>)
    1c34:	88db      	ldrh	r3, [r3, #6]
    1c36:	2b00      	cmp	r3, #0
    1c38:	d000      	beq.n	1c3c <udc_process_setup+0x3ac>
    1c3a:	e63e      	b.n	18ba <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1c3c:	4b1f      	ldr	r3, [pc, #124]	; (1cbc <udc_process_setup+0x42c>)
    1c3e:	885b      	ldrh	r3, [r3, #2]
    1c40:	2b00      	cmp	r3, #0
    1c42:	d000      	beq.n	1c46 <udc_process_setup+0x3b6>
    1c44:	e639      	b.n	18ba <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1c46:	4c1d      	ldr	r4, [pc, #116]	; (1cbc <udc_process_setup+0x42c>)
    1c48:	7920      	ldrb	r0, [r4, #4]
    1c4a:	4b23      	ldr	r3, [pc, #140]	; (1cd8 <udc_process_setup+0x448>)
    1c4c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1c4e:	7920      	ldrb	r0, [r4, #4]
    1c50:	4b22      	ldr	r3, [pc, #136]	; (1cdc <udc_process_setup+0x44c>)
    1c52:	4798      	blx	r3
    1c54:	e002      	b.n	1c5c <udc_process_setup+0x3cc>
		return false;
    1c56:	2000      	movs	r0, #0
    1c58:	e000      	b.n	1c5c <udc_process_setup+0x3cc>
				return udc_req_std_dev_set_feature();
    1c5a:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    1c5c:	2800      	cmp	r0, #0
    1c5e:	d000      	beq.n	1c62 <udc_process_setup+0x3d2>
    1c60:	e633      	b.n	18ca <udc_process_setup+0x3a>
    1c62:	e623      	b.n	18ac <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    1c64:	4b16      	ldr	r3, [pc, #88]	; (1cc0 <udc_process_setup+0x430>)
    1c66:	781b      	ldrb	r3, [r3, #0]
    1c68:	2b00      	cmp	r3, #0
    1c6a:	d100      	bne.n	1c6e <udc_process_setup+0x3de>
    1c6c:	e62d      	b.n	18ca <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c6e:	4b15      	ldr	r3, [pc, #84]	; (1cc4 <udc_process_setup+0x434>)
    1c70:	681b      	ldr	r3, [r3, #0]
    1c72:	681a      	ldr	r2, [r3, #0]
    1c74:	7912      	ldrb	r2, [r2, #4]
    1c76:	2a00      	cmp	r2, #0
    1c78:	d01a      	beq.n	1cb0 <udc_process_setup+0x420>
    1c7a:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c7c:	4e12      	ldr	r6, [pc, #72]	; (1cc8 <udc_process_setup+0x438>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c7e:	4f11      	ldr	r7, [pc, #68]	; (1cc4 <udc_process_setup+0x434>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c80:	685b      	ldr	r3, [r3, #4]
    1c82:	00aa      	lsls	r2, r5, #2
    1c84:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c86:	68e3      	ldr	r3, [r4, #12]
    1c88:	4798      	blx	r3
    1c8a:	0001      	movs	r1, r0
    1c8c:	0028      	movs	r0, r5
    1c8e:	47b0      	blx	r6
    1c90:	2800      	cmp	r0, #0
    1c92:	d100      	bne.n	1c96 <udc_process_setup+0x406>
    1c94:	e619      	b.n	18ca <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    1c96:	68a3      	ldr	r3, [r4, #8]
    1c98:	4798      	blx	r3
    1c9a:	2800      	cmp	r0, #0
    1c9c:	d000      	beq.n	1ca0 <udc_process_setup+0x410>
    1c9e:	e614      	b.n	18ca <udc_process_setup+0x3a>
			iface_num++) {
    1ca0:	3501      	adds	r5, #1
    1ca2:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ca4:	683b      	ldr	r3, [r7, #0]
    1ca6:	681a      	ldr	r2, [r3, #0]
    1ca8:	7912      	ldrb	r2, [r2, #4]
    1caa:	42aa      	cmp	r2, r5
    1cac:	d8e8      	bhi.n	1c80 <udc_process_setup+0x3f0>
    1cae:	e60c      	b.n	18ca <udc_process_setup+0x3a>
	return false;
    1cb0:	2000      	movs	r0, #0
    1cb2:	e60a      	b.n	18ca <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1cb4:	2103      	movs	r1, #3
		str = udc_string_product_name;
    1cb6:	4c0a      	ldr	r4, [pc, #40]	; (1ce0 <udc_process_setup+0x450>)
    1cb8:	e688      	b.n	19cc <udc_process_setup+0x13c>
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	20000534 	.word	0x20000534
    1cc0:	200001f0 	.word	0x200001f0
    1cc4:	200001f4 	.word	0x200001f4
    1cc8:	000016bd 	.word	0x000016bd
    1ccc:	00001731 	.word	0x00001731
    1cd0:	0000179d 	.word	0x0000179d
    1cd4:	00003171 	.word	0x00003171
    1cd8:	00002e81 	.word	0x00002e81
    1cdc:	00003041 	.word	0x00003041
    1ce0:	200000a8 	.word	0x200000a8

00001ce4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1ce4:	4a04      	ldr	r2, [pc, #16]	; (1cf8 <_extint_enable+0x14>)
    1ce6:	7813      	ldrb	r3, [r2, #0]
    1ce8:	2102      	movs	r1, #2
    1cea:	430b      	orrs	r3, r1
    1cec:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1cee:	7853      	ldrb	r3, [r2, #1]
    1cf0:	b25b      	sxtb	r3, r3
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	dbfb      	blt.n	1cee <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1cf6:	4770      	bx	lr
    1cf8:	40001800 	.word	0x40001800

00001cfc <_system_extint_init>:
{
    1cfc:	b500      	push	{lr}
    1cfe:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    1d00:	4a12      	ldr	r2, [pc, #72]	; (1d4c <_system_extint_init+0x50>)
    1d02:	6993      	ldr	r3, [r2, #24]
    1d04:	2140      	movs	r1, #64	; 0x40
    1d06:	430b      	orrs	r3, r1
    1d08:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1d0a:	a901      	add	r1, sp, #4
    1d0c:	2300      	movs	r3, #0
    1d0e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1d10:	2005      	movs	r0, #5
    1d12:	4b0f      	ldr	r3, [pc, #60]	; (1d50 <_system_extint_init+0x54>)
    1d14:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1d16:	2005      	movs	r0, #5
    1d18:	4b0e      	ldr	r3, [pc, #56]	; (1d54 <_system_extint_init+0x58>)
    1d1a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1d1c:	4a0e      	ldr	r2, [pc, #56]	; (1d58 <_system_extint_init+0x5c>)
    1d1e:	7813      	ldrb	r3, [r2, #0]
    1d20:	2101      	movs	r1, #1
    1d22:	430b      	orrs	r3, r1
    1d24:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1d26:	7853      	ldrb	r3, [r2, #1]
    1d28:	b25b      	sxtb	r3, r3
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	dbfb      	blt.n	1d26 <_system_extint_init+0x2a>
    1d2e:	4b0b      	ldr	r3, [pc, #44]	; (1d5c <_system_extint_init+0x60>)
    1d30:	0019      	movs	r1, r3
    1d32:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1d34:	2200      	movs	r2, #0
    1d36:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1d38:	4299      	cmp	r1, r3
    1d3a:	d1fc      	bne.n	1d36 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1d3c:	2210      	movs	r2, #16
    1d3e:	4b08      	ldr	r3, [pc, #32]	; (1d60 <_system_extint_init+0x64>)
    1d40:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1d42:	4b08      	ldr	r3, [pc, #32]	; (1d64 <_system_extint_init+0x68>)
    1d44:	4798      	blx	r3
}
    1d46:	b003      	add	sp, #12
    1d48:	bd00      	pop	{pc}
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	40000400 	.word	0x40000400
    1d50:	00006459 	.word	0x00006459
    1d54:	000063cd 	.word	0x000063cd
    1d58:	40001800 	.word	0x40001800
    1d5c:	200002f4 	.word	0x200002f4
    1d60:	e000e100 	.word	0xe000e100
    1d64:	00001ce5 	.word	0x00001ce5

00001d68 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    1d68:	2300      	movs	r3, #0
    1d6a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    1d6c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1d6e:	2201      	movs	r2, #1
    1d70:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    1d72:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    1d74:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1d76:	3302      	adds	r3, #2
    1d78:	72c3      	strb	r3, [r0, #11]
}
    1d7a:	4770      	bx	lr

00001d7c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d7e:	b083      	sub	sp, #12
    1d80:	0005      	movs	r5, r0
    1d82:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1d84:	a901      	add	r1, sp, #4
    1d86:	2300      	movs	r3, #0
    1d88:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1d8a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    1d8c:	7923      	ldrb	r3, [r4, #4]
    1d8e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1d90:	7a23      	ldrb	r3, [r4, #8]
    1d92:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1d94:	7820      	ldrb	r0, [r4, #0]
    1d96:	4b15      	ldr	r3, [pc, #84]	; (1dec <extint_chan_set_config+0x70>)
    1d98:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1d9a:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    1d9c:	2d1f      	cmp	r5, #31
    1d9e:	d800      	bhi.n	1da2 <extint_chan_set_config+0x26>
		return eics[eic_index];
    1da0:	4813      	ldr	r0, [pc, #76]	; (1df0 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    1da2:	2207      	movs	r2, #7
    1da4:	402a      	ands	r2, r5
    1da6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    1da8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    1daa:	7aa3      	ldrb	r3, [r4, #10]
    1dac:	2b00      	cmp	r3, #0
    1dae:	d001      	beq.n	1db4 <extint_chan_set_config+0x38>
    1db0:	2308      	movs	r3, #8
    1db2:	431f      	orrs	r7, r3
    1db4:	08eb      	lsrs	r3, r5, #3
    1db6:	009b      	lsls	r3, r3, #2
    1db8:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    1dba:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1dbc:	260f      	movs	r6, #15
    1dbe:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    1dc0:	43b1      	bics	r1, r6
			(new_config << config_pos);
    1dc2:	4097      	lsls	r7, r2
    1dc4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1dc6:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    1dc8:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    1dca:	7a63      	ldrb	r3, [r4, #9]
    1dcc:	2b00      	cmp	r3, #0
    1dce:	d106      	bne.n	1dde <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    1dd0:	6943      	ldr	r3, [r0, #20]
    1dd2:	2201      	movs	r2, #1
    1dd4:	40aa      	lsls	r2, r5
    1dd6:	4393      	bics	r3, r2
    1dd8:	6143      	str	r3, [r0, #20]
	}
}
    1dda:	b003      	add	sp, #12
    1ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    1dde:	6942      	ldr	r2, [r0, #20]
    1de0:	2301      	movs	r3, #1
    1de2:	40ab      	lsls	r3, r5
    1de4:	4313      	orrs	r3, r2
    1de6:	6143      	str	r3, [r0, #20]
    1de8:	e7f7      	b.n	1dda <extint_chan_set_config+0x5e>
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	00006551 	.word	0x00006551
    1df0:	40001800 	.word	0x40001800

00001df4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1df4:	4770      	bx	lr
	...

00001df8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1df8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1dfa:	4b0a      	ldr	r3, [pc, #40]	; (1e24 <_sercom_set_handler+0x2c>)
    1dfc:	781b      	ldrb	r3, [r3, #0]
    1dfe:	2b00      	cmp	r3, #0
    1e00:	d10c      	bne.n	1e1c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1e02:	4f09      	ldr	r7, [pc, #36]	; (1e28 <_sercom_set_handler+0x30>)
    1e04:	4e09      	ldr	r6, [pc, #36]	; (1e2c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1e06:	4d0a      	ldr	r5, [pc, #40]	; (1e30 <_sercom_set_handler+0x38>)
    1e08:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1e0a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1e0c:	195a      	adds	r2, r3, r5
    1e0e:	6014      	str	r4, [r2, #0]
    1e10:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e12:	2b18      	cmp	r3, #24
    1e14:	d1f9      	bne.n	1e0a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1e16:	2201      	movs	r2, #1
    1e18:	4b02      	ldr	r3, [pc, #8]	; (1e24 <_sercom_set_handler+0x2c>)
    1e1a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1e1c:	0080      	lsls	r0, r0, #2
    1e1e:	4b02      	ldr	r3, [pc, #8]	; (1e28 <_sercom_set_handler+0x30>)
    1e20:	50c1      	str	r1, [r0, r3]
}
    1e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e24:	200001fc 	.word	0x200001fc
    1e28:	20000200 	.word	0x20000200
    1e2c:	00001df5 	.word	0x00001df5
    1e30:	20000334 	.word	0x20000334

00001e34 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1e34:	b500      	push	{lr}
    1e36:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1e38:	2309      	movs	r3, #9
    1e3a:	466a      	mov	r2, sp
    1e3c:	7013      	strb	r3, [r2, #0]
    1e3e:	3301      	adds	r3, #1
    1e40:	7053      	strb	r3, [r2, #1]
    1e42:	3301      	adds	r3, #1
    1e44:	7093      	strb	r3, [r2, #2]
    1e46:	3301      	adds	r3, #1
    1e48:	70d3      	strb	r3, [r2, #3]
    1e4a:	3301      	adds	r3, #1
    1e4c:	7113      	strb	r3, [r2, #4]
    1e4e:	3301      	adds	r3, #1
    1e50:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1e52:	4b03      	ldr	r3, [pc, #12]	; (1e60 <_sercom_get_interrupt_vector+0x2c>)
    1e54:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1e56:	466b      	mov	r3, sp
    1e58:	5618      	ldrsb	r0, [r3, r0]
}
    1e5a:	b003      	add	sp, #12
    1e5c:	bd00      	pop	{pc}
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	00004f3d 	.word	0x00004f3d

00001e64 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1e64:	b510      	push	{r4, lr}
    1e66:	4b02      	ldr	r3, [pc, #8]	; (1e70 <SERCOM0_Handler+0xc>)
    1e68:	681b      	ldr	r3, [r3, #0]
    1e6a:	2000      	movs	r0, #0
    1e6c:	4798      	blx	r3
    1e6e:	bd10      	pop	{r4, pc}
    1e70:	20000200 	.word	0x20000200

00001e74 <SERCOM1_Handler>:
    1e74:	b510      	push	{r4, lr}
    1e76:	4b02      	ldr	r3, [pc, #8]	; (1e80 <SERCOM1_Handler+0xc>)
    1e78:	685b      	ldr	r3, [r3, #4]
    1e7a:	2001      	movs	r0, #1
    1e7c:	4798      	blx	r3
    1e7e:	bd10      	pop	{r4, pc}
    1e80:	20000200 	.word	0x20000200

00001e84 <SERCOM2_Handler>:
    1e84:	b510      	push	{r4, lr}
    1e86:	4b02      	ldr	r3, [pc, #8]	; (1e90 <SERCOM2_Handler+0xc>)
    1e88:	689b      	ldr	r3, [r3, #8]
    1e8a:	2002      	movs	r0, #2
    1e8c:	4798      	blx	r3
    1e8e:	bd10      	pop	{r4, pc}
    1e90:	20000200 	.word	0x20000200

00001e94 <SERCOM3_Handler>:
    1e94:	b510      	push	{r4, lr}
    1e96:	4b02      	ldr	r3, [pc, #8]	; (1ea0 <SERCOM3_Handler+0xc>)
    1e98:	68db      	ldr	r3, [r3, #12]
    1e9a:	2003      	movs	r0, #3
    1e9c:	4798      	blx	r3
    1e9e:	bd10      	pop	{r4, pc}
    1ea0:	20000200 	.word	0x20000200

00001ea4 <SERCOM4_Handler>:
    1ea4:	b510      	push	{r4, lr}
    1ea6:	4b02      	ldr	r3, [pc, #8]	; (1eb0 <SERCOM4_Handler+0xc>)
    1ea8:	691b      	ldr	r3, [r3, #16]
    1eaa:	2004      	movs	r0, #4
    1eac:	4798      	blx	r3
    1eae:	bd10      	pop	{r4, pc}
    1eb0:	20000200 	.word	0x20000200

00001eb4 <SERCOM5_Handler>:
    1eb4:	b510      	push	{r4, lr}
    1eb6:	4b02      	ldr	r3, [pc, #8]	; (1ec0 <SERCOM5_Handler+0xc>)
    1eb8:	695b      	ldr	r3, [r3, #20]
    1eba:	2005      	movs	r0, #5
    1ebc:	4798      	blx	r3
    1ebe:	bd10      	pop	{r4, pc}
    1ec0:	20000200 	.word	0x20000200

00001ec4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ec6:	46de      	mov	lr, fp
    1ec8:	4657      	mov	r7, sl
    1eca:	464e      	mov	r6, r9
    1ecc:	4645      	mov	r5, r8
    1ece:	b5e0      	push	{r5, r6, r7, lr}
    1ed0:	b091      	sub	sp, #68	; 0x44
    1ed2:	0005      	movs	r5, r0
    1ed4:	000c      	movs	r4, r1
    1ed6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1ed8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1eda:	0008      	movs	r0, r1
    1edc:	4bbc      	ldr	r3, [pc, #752]	; (21d0 <STACK_SIZE+0x1d0>)
    1ede:	4798      	blx	r3
    1ee0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1ee2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1ee4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1ee6:	07db      	lsls	r3, r3, #31
    1ee8:	d506      	bpl.n	1ef8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1eea:	b011      	add	sp, #68	; 0x44
    1eec:	bc3c      	pop	{r2, r3, r4, r5}
    1eee:	4690      	mov	r8, r2
    1ef0:	4699      	mov	r9, r3
    1ef2:	46a2      	mov	sl, r4
    1ef4:	46ab      	mov	fp, r5
    1ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1ef8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1efa:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1efc:	079b      	lsls	r3, r3, #30
    1efe:	d4f4      	bmi.n	1eea <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    1f00:	49b4      	ldr	r1, [pc, #720]	; (21d4 <STACK_SIZE+0x1d4>)
    1f02:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1f04:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1f06:	2301      	movs	r3, #1
    1f08:	40bb      	lsls	r3, r7
    1f0a:	4303      	orrs	r3, r0
    1f0c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1f0e:	a90f      	add	r1, sp, #60	; 0x3c
    1f10:	272d      	movs	r7, #45	; 0x2d
    1f12:	5df3      	ldrb	r3, [r6, r7]
    1f14:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1f16:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1f18:	b2d3      	uxtb	r3, r2
    1f1a:	9302      	str	r3, [sp, #8]
    1f1c:	0018      	movs	r0, r3
    1f1e:	4bae      	ldr	r3, [pc, #696]	; (21d8 <STACK_SIZE+0x1d8>)
    1f20:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1f22:	9802      	ldr	r0, [sp, #8]
    1f24:	4bad      	ldr	r3, [pc, #692]	; (21dc <STACK_SIZE+0x1dc>)
    1f26:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1f28:	5df0      	ldrb	r0, [r6, r7]
    1f2a:	2100      	movs	r1, #0
    1f2c:	4bac      	ldr	r3, [pc, #688]	; (21e0 <STACK_SIZE+0x1e0>)
    1f2e:	4798      	blx	r3
	module->character_size = config->character_size;
    1f30:	7af3      	ldrb	r3, [r6, #11]
    1f32:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1f34:	2324      	movs	r3, #36	; 0x24
    1f36:	5cf3      	ldrb	r3, [r6, r3]
    1f38:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1f3a:	2325      	movs	r3, #37	; 0x25
    1f3c:	5cf3      	ldrb	r3, [r6, r3]
    1f3e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1f40:	7ef3      	ldrb	r3, [r6, #27]
    1f42:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1f44:	7f33      	ldrb	r3, [r6, #28]
    1f46:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f48:	682b      	ldr	r3, [r5, #0]
    1f4a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1f4c:	0018      	movs	r0, r3
    1f4e:	4ba0      	ldr	r3, [pc, #640]	; (21d0 <STACK_SIZE+0x1d0>)
    1f50:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1f52:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1f54:	2200      	movs	r2, #0
    1f56:	230e      	movs	r3, #14
    1f58:	a906      	add	r1, sp, #24
    1f5a:	468c      	mov	ip, r1
    1f5c:	4463      	add	r3, ip
    1f5e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1f60:	8a32      	ldrh	r2, [r6, #16]
    1f62:	9202      	str	r2, [sp, #8]
    1f64:	2380      	movs	r3, #128	; 0x80
    1f66:	01db      	lsls	r3, r3, #7
    1f68:	429a      	cmp	r2, r3
    1f6a:	d100      	bne.n	1f6e <usart_init+0xaa>
    1f6c:	e09e      	b.n	20ac <STACK_SIZE+0xac>
    1f6e:	d90f      	bls.n	1f90 <usart_init+0xcc>
    1f70:	23c0      	movs	r3, #192	; 0xc0
    1f72:	01db      	lsls	r3, r3, #7
    1f74:	9a02      	ldr	r2, [sp, #8]
    1f76:	429a      	cmp	r2, r3
    1f78:	d100      	bne.n	1f7c <usart_init+0xb8>
    1f7a:	e092      	b.n	20a2 <STACK_SIZE+0xa2>
    1f7c:	2380      	movs	r3, #128	; 0x80
    1f7e:	021b      	lsls	r3, r3, #8
    1f80:	429a      	cmp	r2, r3
    1f82:	d000      	beq.n	1f86 <usart_init+0xc2>
    1f84:	e11f      	b.n	21c6 <STACK_SIZE+0x1c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1f86:	2303      	movs	r3, #3
    1f88:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1f8a:	2300      	movs	r3, #0
    1f8c:	9307      	str	r3, [sp, #28]
    1f8e:	e008      	b.n	1fa2 <usart_init+0xde>
	switch (config->sample_rate) {
    1f90:	2380      	movs	r3, #128	; 0x80
    1f92:	019b      	lsls	r3, r3, #6
    1f94:	429a      	cmp	r2, r3
    1f96:	d000      	beq.n	1f9a <usart_init+0xd6>
    1f98:	e115      	b.n	21c6 <STACK_SIZE+0x1c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1f9a:	2310      	movs	r3, #16
    1f9c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1f9e:	3b0f      	subs	r3, #15
    1fa0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1fa2:	6833      	ldr	r3, [r6, #0]
    1fa4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1fa6:	68f3      	ldr	r3, [r6, #12]
    1fa8:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1faa:	6973      	ldr	r3, [r6, #20]
    1fac:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1fae:	7e33      	ldrb	r3, [r6, #24]
    1fb0:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1fb2:	2326      	movs	r3, #38	; 0x26
    1fb4:	5cf3      	ldrb	r3, [r6, r3]
    1fb6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1fb8:	6873      	ldr	r3, [r6, #4]
    1fba:	4699      	mov	r9, r3
	switch (transfer_mode)
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	d100      	bne.n	1fc2 <usart_init+0xfe>
    1fc0:	e0a0      	b.n	2104 <STACK_SIZE+0x104>
    1fc2:	2380      	movs	r3, #128	; 0x80
    1fc4:	055b      	lsls	r3, r3, #21
    1fc6:	4599      	cmp	r9, r3
    1fc8:	d100      	bne.n	1fcc <usart_init+0x108>
    1fca:	e084      	b.n	20d6 <STACK_SIZE+0xd6>
	if(config->encoding_format_enable) {
    1fcc:	7e73      	ldrb	r3, [r6, #25]
    1fce:	2b00      	cmp	r3, #0
    1fd0:	d002      	beq.n	1fd8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1fd2:	7eb3      	ldrb	r3, [r6, #26]
    1fd4:	4642      	mov	r2, r8
    1fd6:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1fd8:	682a      	ldr	r2, [r5, #0]
    1fda:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1fdc:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1fde:	2b00      	cmp	r3, #0
    1fe0:	d1fc      	bne.n	1fdc <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1fe2:	330e      	adds	r3, #14
    1fe4:	aa06      	add	r2, sp, #24
    1fe6:	4694      	mov	ip, r2
    1fe8:	4463      	add	r3, ip
    1fea:	881b      	ldrh	r3, [r3, #0]
    1fec:	4642      	mov	r2, r8
    1fee:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1ff0:	9b05      	ldr	r3, [sp, #20]
    1ff2:	9a03      	ldr	r2, [sp, #12]
    1ff4:	4313      	orrs	r3, r2
    1ff6:	9a04      	ldr	r2, [sp, #16]
    1ff8:	4313      	orrs	r3, r2
    1ffa:	464a      	mov	r2, r9
    1ffc:	4313      	orrs	r3, r2
    1ffe:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2000:	465b      	mov	r3, fp
    2002:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2004:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2006:	4653      	mov	r3, sl
    2008:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    200a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    200c:	2327      	movs	r3, #39	; 0x27
    200e:	5cf3      	ldrb	r3, [r6, r3]
    2010:	2b00      	cmp	r3, #0
    2012:	d101      	bne.n	2018 <STACK_SIZE+0x18>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2014:	3304      	adds	r3, #4
    2016:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2018:	7e73      	ldrb	r3, [r6, #25]
    201a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    201c:	7f32      	ldrb	r2, [r6, #28]
    201e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2020:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2022:	7f72      	ldrb	r2, [r6, #29]
    2024:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2026:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2028:	2224      	movs	r2, #36	; 0x24
    202a:	5cb2      	ldrb	r2, [r6, r2]
    202c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    202e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2030:	2225      	movs	r2, #37	; 0x25
    2032:	5cb2      	ldrb	r2, [r6, r2]
    2034:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2036:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2038:	7ab1      	ldrb	r1, [r6, #10]
    203a:	7af2      	ldrb	r2, [r6, #11]
    203c:	4311      	orrs	r1, r2
    203e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2040:	8933      	ldrh	r3, [r6, #8]
    2042:	2bff      	cmp	r3, #255	; 0xff
    2044:	d100      	bne.n	2048 <STACK_SIZE+0x48>
    2046:	e081      	b.n	214c <STACK_SIZE+0x14c>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2048:	2280      	movs	r2, #128	; 0x80
    204a:	0452      	lsls	r2, r2, #17
    204c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    204e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2050:	232c      	movs	r3, #44	; 0x2c
    2052:	5cf3      	ldrb	r3, [r6, r3]
    2054:	2b00      	cmp	r3, #0
    2056:	d103      	bne.n	2060 <STACK_SIZE+0x60>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2058:	4b62      	ldr	r3, [pc, #392]	; (21e4 <STACK_SIZE+0x1e4>)
    205a:	789b      	ldrb	r3, [r3, #2]
    205c:	079b      	lsls	r3, r3, #30
    205e:	d501      	bpl.n	2064 <STACK_SIZE+0x64>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2060:	2380      	movs	r3, #128	; 0x80
    2062:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2064:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2066:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2068:	2b00      	cmp	r3, #0
    206a:	d1fc      	bne.n	2066 <STACK_SIZE+0x66>
	usart_hw->CTRLB.reg = ctrlb;
    206c:	4643      	mov	r3, r8
    206e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2070:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2072:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2074:	2b00      	cmp	r3, #0
    2076:	d1fc      	bne.n	2072 <STACK_SIZE+0x72>
	usart_hw->CTRLA.reg = ctrla;
    2078:	4643      	mov	r3, r8
    207a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    207c:	ab0e      	add	r3, sp, #56	; 0x38
    207e:	2280      	movs	r2, #128	; 0x80
    2080:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2082:	2200      	movs	r2, #0
    2084:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2086:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2088:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    208a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    208c:	930a      	str	r3, [sp, #40]	; 0x28
    208e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2090:	930b      	str	r3, [sp, #44]	; 0x2c
    2092:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2094:	930c      	str	r3, [sp, #48]	; 0x30
    2096:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2098:	9302      	str	r3, [sp, #8]
    209a:	930d      	str	r3, [sp, #52]	; 0x34
    209c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    209e:	ae0a      	add	r6, sp, #40	; 0x28
    20a0:	e063      	b.n	216a <STACK_SIZE+0x16a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    20a2:	2308      	movs	r3, #8
    20a4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    20a6:	3b07      	subs	r3, #7
    20a8:	9307      	str	r3, [sp, #28]
    20aa:	e77a      	b.n	1fa2 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    20ac:	6833      	ldr	r3, [r6, #0]
    20ae:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    20b0:	68f3      	ldr	r3, [r6, #12]
    20b2:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    20b4:	6973      	ldr	r3, [r6, #20]
    20b6:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    20b8:	7e33      	ldrb	r3, [r6, #24]
    20ba:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    20bc:	2326      	movs	r3, #38	; 0x26
    20be:	5cf3      	ldrb	r3, [r6, r3]
    20c0:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    20c2:	6873      	ldr	r3, [r6, #4]
    20c4:	4699      	mov	r9, r3
	switch (transfer_mode)
    20c6:	2b00      	cmp	r3, #0
    20c8:	d018      	beq.n	20fc <STACK_SIZE+0xfc>
    20ca:	2380      	movs	r3, #128	; 0x80
    20cc:	055b      	lsls	r3, r3, #21
    20ce:	4599      	cmp	r9, r3
    20d0:	d001      	beq.n	20d6 <STACK_SIZE+0xd6>
	enum status_code status_code = STATUS_OK;
    20d2:	2000      	movs	r0, #0
    20d4:	e025      	b.n	2122 <STACK_SIZE+0x122>
			if (!config->use_external_clock) {
    20d6:	2327      	movs	r3, #39	; 0x27
    20d8:	5cf3      	ldrb	r3, [r6, r3]
    20da:	2b00      	cmp	r3, #0
    20dc:	d000      	beq.n	20e0 <STACK_SIZE+0xe0>
    20de:	e775      	b.n	1fcc <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    20e0:	6a33      	ldr	r3, [r6, #32]
    20e2:	001f      	movs	r7, r3
    20e4:	b2c0      	uxtb	r0, r0
    20e6:	4b40      	ldr	r3, [pc, #256]	; (21e8 <STACK_SIZE+0x1e8>)
    20e8:	4798      	blx	r3
    20ea:	0001      	movs	r1, r0
    20ec:	220e      	movs	r2, #14
    20ee:	ab06      	add	r3, sp, #24
    20f0:	469c      	mov	ip, r3
    20f2:	4462      	add	r2, ip
    20f4:	0038      	movs	r0, r7
    20f6:	4b3d      	ldr	r3, [pc, #244]	; (21ec <STACK_SIZE+0x1ec>)
    20f8:	4798      	blx	r3
    20fa:	e012      	b.n	2122 <STACK_SIZE+0x122>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    20fc:	2308      	movs	r3, #8
    20fe:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2100:	2300      	movs	r3, #0
    2102:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2104:	2327      	movs	r3, #39	; 0x27
    2106:	5cf3      	ldrb	r3, [r6, r3]
    2108:	2b00      	cmp	r3, #0
    210a:	d00e      	beq.n	212a <STACK_SIZE+0x12a>
				status_code =
    210c:	9b06      	ldr	r3, [sp, #24]
    210e:	9300      	str	r3, [sp, #0]
    2110:	9b07      	ldr	r3, [sp, #28]
    2112:	220e      	movs	r2, #14
    2114:	a906      	add	r1, sp, #24
    2116:	468c      	mov	ip, r1
    2118:	4462      	add	r2, ip
    211a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    211c:	6a30      	ldr	r0, [r6, #32]
    211e:	4f34      	ldr	r7, [pc, #208]	; (21f0 <STACK_SIZE+0x1f0>)
    2120:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2122:	2800      	cmp	r0, #0
    2124:	d000      	beq.n	2128 <STACK_SIZE+0x128>
    2126:	e6e0      	b.n	1eea <usart_init+0x26>
    2128:	e750      	b.n	1fcc <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    212a:	6a33      	ldr	r3, [r6, #32]
    212c:	001f      	movs	r7, r3
    212e:	b2c0      	uxtb	r0, r0
    2130:	4b2d      	ldr	r3, [pc, #180]	; (21e8 <STACK_SIZE+0x1e8>)
    2132:	4798      	blx	r3
    2134:	0001      	movs	r1, r0
				status_code =
    2136:	9b06      	ldr	r3, [sp, #24]
    2138:	9300      	str	r3, [sp, #0]
    213a:	9b07      	ldr	r3, [sp, #28]
    213c:	220e      	movs	r2, #14
    213e:	a806      	add	r0, sp, #24
    2140:	4684      	mov	ip, r0
    2142:	4462      	add	r2, ip
    2144:	0038      	movs	r0, r7
    2146:	4f2a      	ldr	r7, [pc, #168]	; (21f0 <STACK_SIZE+0x1f0>)
    2148:	47b8      	blx	r7
    214a:	e7ea      	b.n	2122 <STACK_SIZE+0x122>
		if(config->lin_slave_enable) {
    214c:	7ef3      	ldrb	r3, [r6, #27]
    214e:	2b00      	cmp	r3, #0
    2150:	d100      	bne.n	2154 <STACK_SIZE+0x154>
    2152:	e77d      	b.n	2050 <STACK_SIZE+0x50>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2154:	2380      	movs	r3, #128	; 0x80
    2156:	04db      	lsls	r3, r3, #19
    2158:	431f      	orrs	r7, r3
    215a:	e779      	b.n	2050 <STACK_SIZE+0x50>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    215c:	0020      	movs	r0, r4
    215e:	4b25      	ldr	r3, [pc, #148]	; (21f4 <STACK_SIZE+0x1f4>)
    2160:	4798      	blx	r3
    2162:	e007      	b.n	2174 <STACK_SIZE+0x174>
    2164:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2166:	2f04      	cmp	r7, #4
    2168:	d00d      	beq.n	2186 <STACK_SIZE+0x186>
    216a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    216c:	00bb      	lsls	r3, r7, #2
    216e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2170:	2800      	cmp	r0, #0
    2172:	d0f3      	beq.n	215c <STACK_SIZE+0x15c>
		if (current_pinmux != PINMUX_UNUSED) {
    2174:	1c43      	adds	r3, r0, #1
    2176:	d0f5      	beq.n	2164 <STACK_SIZE+0x164>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2178:	a90e      	add	r1, sp, #56	; 0x38
    217a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    217c:	0c00      	lsrs	r0, r0, #16
    217e:	b2c0      	uxtb	r0, r0
    2180:	4b1d      	ldr	r3, [pc, #116]	; (21f8 <STACK_SIZE+0x1f8>)
    2182:	4798      	blx	r3
    2184:	e7ee      	b.n	2164 <STACK_SIZE+0x164>
		module->callback[i]            = NULL;
    2186:	2300      	movs	r3, #0
    2188:	60eb      	str	r3, [r5, #12]
    218a:	612b      	str	r3, [r5, #16]
    218c:	616b      	str	r3, [r5, #20]
    218e:	61ab      	str	r3, [r5, #24]
    2190:	61eb      	str	r3, [r5, #28]
    2192:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2194:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2196:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2198:	2200      	movs	r2, #0
    219a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    219c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    219e:	3330      	adds	r3, #48	; 0x30
    21a0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    21a2:	3301      	adds	r3, #1
    21a4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    21a6:	3301      	adds	r3, #1
    21a8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    21aa:	3301      	adds	r3, #1
    21ac:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    21ae:	6828      	ldr	r0, [r5, #0]
    21b0:	4b07      	ldr	r3, [pc, #28]	; (21d0 <STACK_SIZE+0x1d0>)
    21b2:	4798      	blx	r3
    21b4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    21b6:	4911      	ldr	r1, [pc, #68]	; (21fc <STACK_SIZE+0x1fc>)
    21b8:	4b11      	ldr	r3, [pc, #68]	; (2200 <STACK_SIZE+0x200>)
    21ba:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    21bc:	00a4      	lsls	r4, r4, #2
    21be:	4b11      	ldr	r3, [pc, #68]	; (2204 <STACK_SIZE+0x204>)
    21c0:	50e5      	str	r5, [r4, r3]
	return status_code;
    21c2:	2000      	movs	r0, #0
    21c4:	e691      	b.n	1eea <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    21c6:	2310      	movs	r3, #16
    21c8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    21ca:	2300      	movs	r3, #0
    21cc:	9307      	str	r3, [sp, #28]
    21ce:	e6e8      	b.n	1fa2 <usart_init+0xde>
    21d0:	00004f3d 	.word	0x00004f3d
    21d4:	40000400 	.word	0x40000400
    21d8:	00006459 	.word	0x00006459
    21dc:	000063cd 	.word	0x000063cd
    21e0:	00004d79 	.word	0x00004d79
    21e4:	41002000 	.word	0x41002000
    21e8:	00006475 	.word	0x00006475
    21ec:	00004cbb 	.word	0x00004cbb
    21f0:	00004ce5 	.word	0x00004ce5
    21f4:	00004dc5 	.word	0x00004dc5
    21f8:	00006551 	.word	0x00006551
    21fc:	000022a5 	.word	0x000022a5
    2200:	00001df9 	.word	0x00001df9
    2204:	20000334 	.word	0x20000334

00002208 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2208:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    220a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    220c:	2a00      	cmp	r2, #0
    220e:	d101      	bne.n	2214 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2210:	0018      	movs	r0, r3
    2212:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2214:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2216:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2218:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    221a:	2a00      	cmp	r2, #0
    221c:	d1f8      	bne.n	2210 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    221e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2220:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2222:	2a00      	cmp	r2, #0
    2224:	d1fc      	bne.n	2220 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2226:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2228:	2102      	movs	r1, #2
    222a:	7e1a      	ldrb	r2, [r3, #24]
    222c:	420a      	tst	r2, r1
    222e:	d0fc      	beq.n	222a <usart_write_wait+0x22>
	return STATUS_OK;
    2230:	2300      	movs	r3, #0
    2232:	e7ed      	b.n	2210 <usart_write_wait+0x8>

00002234 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2234:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2236:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2238:	2a00      	cmp	r2, #0
    223a:	d101      	bne.n	2240 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    223c:	0018      	movs	r0, r3
    223e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2240:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2242:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2244:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2246:	2a00      	cmp	r2, #0
    2248:	d1f8      	bne.n	223c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    224a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    224c:	7e10      	ldrb	r0, [r2, #24]
    224e:	0740      	lsls	r0, r0, #29
    2250:	d5f4      	bpl.n	223c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2252:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2254:	2b00      	cmp	r3, #0
    2256:	d1fc      	bne.n	2252 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2258:	8b53      	ldrh	r3, [r2, #26]
    225a:	b2db      	uxtb	r3, r3
	if (error_code) {
    225c:	0698      	lsls	r0, r3, #26
    225e:	d01d      	beq.n	229c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2260:	0798      	lsls	r0, r3, #30
    2262:	d503      	bpl.n	226c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2264:	2302      	movs	r3, #2
    2266:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2268:	3318      	adds	r3, #24
    226a:	e7e7      	b.n	223c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    226c:	0758      	lsls	r0, r3, #29
    226e:	d503      	bpl.n	2278 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2270:	2304      	movs	r3, #4
    2272:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2274:	331a      	adds	r3, #26
    2276:	e7e1      	b.n	223c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2278:	07d8      	lsls	r0, r3, #31
    227a:	d503      	bpl.n	2284 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    227c:	2301      	movs	r3, #1
    227e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2280:	3312      	adds	r3, #18
    2282:	e7db      	b.n	223c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2284:	06d8      	lsls	r0, r3, #27
    2286:	d503      	bpl.n	2290 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2288:	2310      	movs	r3, #16
    228a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    228c:	3332      	adds	r3, #50	; 0x32
    228e:	e7d5      	b.n	223c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2290:	069b      	lsls	r3, r3, #26
    2292:	d503      	bpl.n	229c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2294:	2320      	movs	r3, #32
    2296:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2298:	3321      	adds	r3, #33	; 0x21
    229a:	e7cf      	b.n	223c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    229c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    229e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    22a0:	2300      	movs	r3, #0
    22a2:	e7cb      	b.n	223c <usart_read_wait+0x8>

000022a4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    22a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    22a6:	0080      	lsls	r0, r0, #2
    22a8:	4b62      	ldr	r3, [pc, #392]	; (2434 <_usart_interrupt_handler+0x190>)
    22aa:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    22ac:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    22ae:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    22b0:	2b00      	cmp	r3, #0
    22b2:	d1fc      	bne.n	22ae <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    22b4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    22b6:	7da6      	ldrb	r6, [r4, #22]
    22b8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    22ba:	2330      	movs	r3, #48	; 0x30
    22bc:	5ceb      	ldrb	r3, [r5, r3]
    22be:	2231      	movs	r2, #49	; 0x31
    22c0:	5caf      	ldrb	r7, [r5, r2]
    22c2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    22c4:	07f3      	lsls	r3, r6, #31
    22c6:	d522      	bpl.n	230e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    22c8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    22ca:	b29b      	uxth	r3, r3
    22cc:	2b00      	cmp	r3, #0
    22ce:	d01c      	beq.n	230a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    22d0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    22d2:	7813      	ldrb	r3, [r2, #0]
    22d4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    22d6:	1c51      	adds	r1, r2, #1
    22d8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    22da:	7969      	ldrb	r1, [r5, #5]
    22dc:	2901      	cmp	r1, #1
    22de:	d00e      	beq.n	22fe <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    22e0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    22e2:	05db      	lsls	r3, r3, #23
    22e4:	0ddb      	lsrs	r3, r3, #23
    22e6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    22e8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    22ea:	3b01      	subs	r3, #1
    22ec:	b29b      	uxth	r3, r3
    22ee:	85eb      	strh	r3, [r5, #46]	; 0x2e
    22f0:	2b00      	cmp	r3, #0
    22f2:	d10c      	bne.n	230e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    22f4:	3301      	adds	r3, #1
    22f6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    22f8:	3301      	adds	r3, #1
    22fa:	75a3      	strb	r3, [r4, #22]
    22fc:	e007      	b.n	230e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    22fe:	7851      	ldrb	r1, [r2, #1]
    2300:	0209      	lsls	r1, r1, #8
    2302:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2304:	3202      	adds	r2, #2
    2306:	62aa      	str	r2, [r5, #40]	; 0x28
    2308:	e7eb      	b.n	22e2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    230a:	2301      	movs	r3, #1
    230c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    230e:	07b3      	lsls	r3, r6, #30
    2310:	d506      	bpl.n	2320 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2312:	2302      	movs	r3, #2
    2314:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2316:	2200      	movs	r2, #0
    2318:	3331      	adds	r3, #49	; 0x31
    231a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    231c:	07fb      	lsls	r3, r7, #31
    231e:	d41a      	bmi.n	2356 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2320:	0773      	lsls	r3, r6, #29
    2322:	d565      	bpl.n	23f0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2324:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2326:	b29b      	uxth	r3, r3
    2328:	2b00      	cmp	r3, #0
    232a:	d05f      	beq.n	23ec <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    232c:	8b63      	ldrh	r3, [r4, #26]
    232e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2330:	071a      	lsls	r2, r3, #28
    2332:	d414      	bmi.n	235e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2334:	223f      	movs	r2, #63	; 0x3f
    2336:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2338:	2b00      	cmp	r3, #0
    233a:	d034      	beq.n	23a6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    233c:	079a      	lsls	r2, r3, #30
    233e:	d511      	bpl.n	2364 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2340:	221a      	movs	r2, #26
    2342:	2332      	movs	r3, #50	; 0x32
    2344:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2346:	3b30      	subs	r3, #48	; 0x30
    2348:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    234a:	077b      	lsls	r3, r7, #29
    234c:	d550      	bpl.n	23f0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    234e:	0028      	movs	r0, r5
    2350:	696b      	ldr	r3, [r5, #20]
    2352:	4798      	blx	r3
    2354:	e04c      	b.n	23f0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2356:	0028      	movs	r0, r5
    2358:	68eb      	ldr	r3, [r5, #12]
    235a:	4798      	blx	r3
    235c:	e7e0      	b.n	2320 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    235e:	2237      	movs	r2, #55	; 0x37
    2360:	4013      	ands	r3, r2
    2362:	e7e9      	b.n	2338 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2364:	075a      	lsls	r2, r3, #29
    2366:	d505      	bpl.n	2374 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2368:	221e      	movs	r2, #30
    236a:	2332      	movs	r3, #50	; 0x32
    236c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    236e:	3b2e      	subs	r3, #46	; 0x2e
    2370:	8363      	strh	r3, [r4, #26]
    2372:	e7ea      	b.n	234a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2374:	07da      	lsls	r2, r3, #31
    2376:	d505      	bpl.n	2384 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2378:	2213      	movs	r2, #19
    237a:	2332      	movs	r3, #50	; 0x32
    237c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    237e:	3b31      	subs	r3, #49	; 0x31
    2380:	8363      	strh	r3, [r4, #26]
    2382:	e7e2      	b.n	234a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2384:	06da      	lsls	r2, r3, #27
    2386:	d505      	bpl.n	2394 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2388:	2242      	movs	r2, #66	; 0x42
    238a:	2332      	movs	r3, #50	; 0x32
    238c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    238e:	3b22      	subs	r3, #34	; 0x22
    2390:	8363      	strh	r3, [r4, #26]
    2392:	e7da      	b.n	234a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2394:	2220      	movs	r2, #32
    2396:	421a      	tst	r2, r3
    2398:	d0d7      	beq.n	234a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    239a:	3221      	adds	r2, #33	; 0x21
    239c:	2332      	movs	r3, #50	; 0x32
    239e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    23a0:	3b12      	subs	r3, #18
    23a2:	8363      	strh	r3, [r4, #26]
    23a4:	e7d1      	b.n	234a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    23a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    23a8:	05db      	lsls	r3, r3, #23
    23aa:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    23ac:	b2da      	uxtb	r2, r3
    23ae:	6a69      	ldr	r1, [r5, #36]	; 0x24
    23b0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    23b2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    23b4:	1c51      	adds	r1, r2, #1
    23b6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    23b8:	7969      	ldrb	r1, [r5, #5]
    23ba:	2901      	cmp	r1, #1
    23bc:	d010      	beq.n	23e0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    23be:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    23c0:	3b01      	subs	r3, #1
    23c2:	b29b      	uxth	r3, r3
    23c4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    23c6:	2b00      	cmp	r3, #0
    23c8:	d112      	bne.n	23f0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    23ca:	3304      	adds	r3, #4
    23cc:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    23ce:	2200      	movs	r2, #0
    23d0:	332e      	adds	r3, #46	; 0x2e
    23d2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    23d4:	07bb      	lsls	r3, r7, #30
    23d6:	d50b      	bpl.n	23f0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    23d8:	0028      	movs	r0, r5
    23da:	692b      	ldr	r3, [r5, #16]
    23dc:	4798      	blx	r3
    23de:	e007      	b.n	23f0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    23e0:	0a1b      	lsrs	r3, r3, #8
    23e2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    23e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    23e6:	3301      	adds	r3, #1
    23e8:	626b      	str	r3, [r5, #36]	; 0x24
    23ea:	e7e8      	b.n	23be <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    23ec:	2304      	movs	r3, #4
    23ee:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    23f0:	06f3      	lsls	r3, r6, #27
    23f2:	d504      	bpl.n	23fe <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    23f4:	2310      	movs	r3, #16
    23f6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    23f8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    23fa:	06fb      	lsls	r3, r7, #27
    23fc:	d40e      	bmi.n	241c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    23fe:	06b3      	lsls	r3, r6, #26
    2400:	d504      	bpl.n	240c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2402:	2320      	movs	r3, #32
    2404:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2406:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2408:	073b      	lsls	r3, r7, #28
    240a:	d40b      	bmi.n	2424 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    240c:	0733      	lsls	r3, r6, #28
    240e:	d504      	bpl.n	241a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2410:	2308      	movs	r3, #8
    2412:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2414:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2416:	06bb      	lsls	r3, r7, #26
    2418:	d408      	bmi.n	242c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    241a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    241c:	0028      	movs	r0, r5
    241e:	69eb      	ldr	r3, [r5, #28]
    2420:	4798      	blx	r3
    2422:	e7ec      	b.n	23fe <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2424:	0028      	movs	r0, r5
    2426:	69ab      	ldr	r3, [r5, #24]
    2428:	4798      	blx	r3
    242a:	e7ef      	b.n	240c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    242c:	6a2b      	ldr	r3, [r5, #32]
    242e:	0028      	movs	r0, r5
    2430:	4798      	blx	r3
}
    2432:	e7f2      	b.n	241a <_usart_interrupt_handler+0x176>
    2434:	20000334 	.word	0x20000334

00002438 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2438:	b510      	push	{r4, lr}
	switch (clock_source) {
    243a:	2808      	cmp	r0, #8
    243c:	d803      	bhi.n	2446 <system_clock_source_get_hz+0xe>
    243e:	0080      	lsls	r0, r0, #2
    2440:	4b1e      	ldr	r3, [pc, #120]	; (24bc <system_clock_source_get_hz+0x84>)
    2442:	581b      	ldr	r3, [r3, r0]
    2444:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2446:	2000      	movs	r0, #0
    2448:	e036      	b.n	24b8 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
    244a:	4b1d      	ldr	r3, [pc, #116]	; (24c0 <system_clock_source_get_hz+0x88>)
    244c:	6918      	ldr	r0, [r3, #16]
    244e:	e033      	b.n	24b8 <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2450:	4b1c      	ldr	r3, [pc, #112]	; (24c4 <system_clock_source_get_hz+0x8c>)
    2452:	6a1b      	ldr	r3, [r3, #32]
    2454:	059b      	lsls	r3, r3, #22
    2456:	0f9b      	lsrs	r3, r3, #30
    2458:	481b      	ldr	r0, [pc, #108]	; (24c8 <system_clock_source_get_hz+0x90>)
    245a:	40d8      	lsrs	r0, r3
    245c:	e02c      	b.n	24b8 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
    245e:	4b18      	ldr	r3, [pc, #96]	; (24c0 <system_clock_source_get_hz+0x88>)
    2460:	6958      	ldr	r0, [r3, #20]
    2462:	e029      	b.n	24b8 <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2464:	4b16      	ldr	r3, [pc, #88]	; (24c0 <system_clock_source_get_hz+0x88>)
    2466:	681b      	ldr	r3, [r3, #0]
			return 0;
    2468:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    246a:	079b      	lsls	r3, r3, #30
    246c:	d524      	bpl.n	24b8 <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    246e:	4915      	ldr	r1, [pc, #84]	; (24c4 <system_clock_source_get_hz+0x8c>)
    2470:	2210      	movs	r2, #16
    2472:	68cb      	ldr	r3, [r1, #12]
    2474:	421a      	tst	r2, r3
    2476:	d0fc      	beq.n	2472 <system_clock_source_get_hz+0x3a>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2478:	4b11      	ldr	r3, [pc, #68]	; (24c0 <system_clock_source_get_hz+0x88>)
    247a:	681b      	ldr	r3, [r3, #0]
    247c:	075b      	lsls	r3, r3, #29
    247e:	d401      	bmi.n	2484 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2480:	4812      	ldr	r0, [pc, #72]	; (24cc <system_clock_source_get_hz+0x94>)
    2482:	e019      	b.n	24b8 <system_clock_source_get_hz+0x80>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2484:	4b0e      	ldr	r3, [pc, #56]	; (24c0 <system_clock_source_get_hz+0x88>)
    2486:	681b      	ldr	r3, [r3, #0]
    2488:	069b      	lsls	r3, r3, #26
    248a:	d501      	bpl.n	2490 <system_clock_source_get_hz+0x58>
		return 48000000UL;
    248c:	480f      	ldr	r0, [pc, #60]	; (24cc <system_clock_source_get_hz+0x94>)
    248e:	e013      	b.n	24b8 <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2490:	2000      	movs	r0, #0
    2492:	4b0f      	ldr	r3, [pc, #60]	; (24d0 <system_clock_source_get_hz+0x98>)
    2494:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2496:	4b0a      	ldr	r3, [pc, #40]	; (24c0 <system_clock_source_get_hz+0x88>)
    2498:	689b      	ldr	r3, [r3, #8]
    249a:	041b      	lsls	r3, r3, #16
    249c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    249e:	4358      	muls	r0, r3
    24a0:	e00a      	b.n	24b8 <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    24a2:	2350      	movs	r3, #80	; 0x50
    24a4:	4a07      	ldr	r2, [pc, #28]	; (24c4 <system_clock_source_get_hz+0x8c>)
    24a6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    24a8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    24aa:	075b      	lsls	r3, r3, #29
    24ac:	d504      	bpl.n	24b8 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
    24ae:	4b04      	ldr	r3, [pc, #16]	; (24c0 <system_clock_source_get_hz+0x88>)
    24b0:	68d8      	ldr	r0, [r3, #12]
    24b2:	e001      	b.n	24b8 <system_clock_source_get_hz+0x80>
		return 32768UL;
    24b4:	2080      	movs	r0, #128	; 0x80
    24b6:	0200      	lsls	r0, r0, #8
	}
}
    24b8:	bd10      	pop	{r4, pc}
    24ba:	46c0      	nop			; (mov r8, r8)
    24bc:	00007f00 	.word	0x00007f00
    24c0:	20000218 	.word	0x20000218
    24c4:	40000800 	.word	0x40000800
    24c8:	007a1200 	.word	0x007a1200
    24cc:	02dc6c00 	.word	0x02dc6c00
    24d0:	00006475 	.word	0x00006475

000024d4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    24d4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    24d6:	490c      	ldr	r1, [pc, #48]	; (2508 <system_clock_source_osc8m_set_config+0x34>)
    24d8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    24da:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    24dc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    24de:	7840      	ldrb	r0, [r0, #1]
    24e0:	2201      	movs	r2, #1
    24e2:	4010      	ands	r0, r2
    24e4:	0180      	lsls	r0, r0, #6
    24e6:	2640      	movs	r6, #64	; 0x40
    24e8:	43b3      	bics	r3, r6
    24ea:	4303      	orrs	r3, r0
    24ec:	402a      	ands	r2, r5
    24ee:	01d2      	lsls	r2, r2, #7
    24f0:	2080      	movs	r0, #128	; 0x80
    24f2:	4383      	bics	r3, r0
    24f4:	4313      	orrs	r3, r2
    24f6:	2203      	movs	r2, #3
    24f8:	4022      	ands	r2, r4
    24fa:	0212      	lsls	r2, r2, #8
    24fc:	4803      	ldr	r0, [pc, #12]	; (250c <system_clock_source_osc8m_set_config+0x38>)
    24fe:	4003      	ands	r3, r0
    2500:	4313      	orrs	r3, r2
    2502:	620b      	str	r3, [r1, #32]
}
    2504:	bd70      	pop	{r4, r5, r6, pc}
    2506:	46c0      	nop			; (mov r8, r8)
    2508:	40000800 	.word	0x40000800
    250c:	fffffcff 	.word	0xfffffcff

00002510 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2510:	b5f0      	push	{r4, r5, r6, r7, lr}
    2512:	46ce      	mov	lr, r9
    2514:	4647      	mov	r7, r8
    2516:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    2518:	4b19      	ldr	r3, [pc, #100]	; (2580 <system_clock_source_osc32k_set_config+0x70>)
    251a:	4699      	mov	r9, r3
    251c:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    251e:	7841      	ldrb	r1, [r0, #1]
    2520:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    2522:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2524:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2526:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    2528:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    252a:	7880      	ldrb	r0, [r0, #2]
    252c:	2101      	movs	r1, #1
    252e:	4008      	ands	r0, r1
    2530:	0080      	lsls	r0, r0, #2
    2532:	2204      	movs	r2, #4
    2534:	4393      	bics	r3, r2
    2536:	4303      	orrs	r3, r0
    2538:	4660      	mov	r0, ip
    253a:	4008      	ands	r0, r1
    253c:	00c0      	lsls	r0, r0, #3
    253e:	3204      	adds	r2, #4
    2540:	4393      	bics	r3, r2
    2542:	4303      	orrs	r3, r0
    2544:	0038      	movs	r0, r7
    2546:	4008      	ands	r0, r1
    2548:	0180      	lsls	r0, r0, #6
    254a:	2740      	movs	r7, #64	; 0x40
    254c:	43bb      	bics	r3, r7
    254e:	4303      	orrs	r3, r0
    2550:	0030      	movs	r0, r6
    2552:	4008      	ands	r0, r1
    2554:	01c0      	lsls	r0, r0, #7
    2556:	2680      	movs	r6, #128	; 0x80
    2558:	43b3      	bics	r3, r6
    255a:	4303      	orrs	r3, r0
    255c:	2007      	movs	r0, #7
    255e:	4005      	ands	r5, r0
    2560:	022d      	lsls	r5, r5, #8
    2562:	4808      	ldr	r0, [pc, #32]	; (2584 <system_clock_source_osc32k_set_config+0x74>)
    2564:	4003      	ands	r3, r0
    2566:	432b      	orrs	r3, r5
    2568:	4021      	ands	r1, r4
    256a:	0309      	lsls	r1, r1, #12
    256c:	4806      	ldr	r0, [pc, #24]	; (2588 <system_clock_source_osc32k_set_config+0x78>)
    256e:	4003      	ands	r3, r0
    2570:	430b      	orrs	r3, r1
    2572:	464a      	mov	r2, r9
    2574:	6193      	str	r3, [r2, #24]
}
    2576:	bc0c      	pop	{r2, r3}
    2578:	4690      	mov	r8, r2
    257a:	4699      	mov	r9, r3
    257c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    257e:	46c0      	nop			; (mov r8, r8)
    2580:	40000800 	.word	0x40000800
    2584:	fffff8ff 	.word	0xfffff8ff
    2588:	ffffefff 	.word	0xffffefff

0000258c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    258c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    258e:	7a03      	ldrb	r3, [r0, #8]
    2590:	069b      	lsls	r3, r3, #26
    2592:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2594:	8942      	ldrh	r2, [r0, #10]
    2596:	0592      	lsls	r2, r2, #22
    2598:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    259a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    259c:	4918      	ldr	r1, [pc, #96]	; (2600 <system_clock_source_dfll_set_config+0x74>)
    259e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    25a0:	7983      	ldrb	r3, [r0, #6]
    25a2:	79c2      	ldrb	r2, [r0, #7]
    25a4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    25a6:	8842      	ldrh	r2, [r0, #2]
    25a8:	8884      	ldrh	r4, [r0, #4]
    25aa:	4322      	orrs	r2, r4
    25ac:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    25ae:	7842      	ldrb	r2, [r0, #1]
    25b0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    25b2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    25b4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    25b6:	7803      	ldrb	r3, [r0, #0]
    25b8:	2b04      	cmp	r3, #4
    25ba:	d011      	beq.n	25e0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    25bc:	2b20      	cmp	r3, #32
    25be:	d10e      	bne.n	25de <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    25c0:	7b03      	ldrb	r3, [r0, #12]
    25c2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    25c4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    25c6:	4313      	orrs	r3, r2
    25c8:	89c2      	ldrh	r2, [r0, #14]
    25ca:	0412      	lsls	r2, r2, #16
    25cc:	490d      	ldr	r1, [pc, #52]	; (2604 <system_clock_source_dfll_set_config+0x78>)
    25ce:	400a      	ands	r2, r1
    25d0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    25d2:	4a0b      	ldr	r2, [pc, #44]	; (2600 <system_clock_source_dfll_set_config+0x74>)
    25d4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    25d6:	6811      	ldr	r1, [r2, #0]
    25d8:	4b0b      	ldr	r3, [pc, #44]	; (2608 <system_clock_source_dfll_set_config+0x7c>)
    25da:	430b      	orrs	r3, r1
    25dc:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    25de:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    25e0:	7b03      	ldrb	r3, [r0, #12]
    25e2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    25e4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    25e6:	4313      	orrs	r3, r2
    25e8:	89c2      	ldrh	r2, [r0, #14]
    25ea:	0412      	lsls	r2, r2, #16
    25ec:	4905      	ldr	r1, [pc, #20]	; (2604 <system_clock_source_dfll_set_config+0x78>)
    25ee:	400a      	ands	r2, r1
    25f0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    25f2:	4a03      	ldr	r2, [pc, #12]	; (2600 <system_clock_source_dfll_set_config+0x74>)
    25f4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    25f6:	6813      	ldr	r3, [r2, #0]
    25f8:	2104      	movs	r1, #4
    25fa:	430b      	orrs	r3, r1
    25fc:	6013      	str	r3, [r2, #0]
    25fe:	e7ee      	b.n	25de <system_clock_source_dfll_set_config+0x52>
    2600:	20000218 	.word	0x20000218
    2604:	03ff0000 	.word	0x03ff0000
    2608:	00000424 	.word	0x00000424

0000260c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    260c:	2808      	cmp	r0, #8
    260e:	d803      	bhi.n	2618 <system_clock_source_enable+0xc>
    2610:	0080      	lsls	r0, r0, #2
    2612:	4b25      	ldr	r3, [pc, #148]	; (26a8 <system_clock_source_enable+0x9c>)
    2614:	581b      	ldr	r3, [r3, r0]
    2616:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2618:	2017      	movs	r0, #23
    261a:	e044      	b.n	26a6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    261c:	4a23      	ldr	r2, [pc, #140]	; (26ac <system_clock_source_enable+0xa0>)
    261e:	6a13      	ldr	r3, [r2, #32]
    2620:	2102      	movs	r1, #2
    2622:	430b      	orrs	r3, r1
    2624:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2626:	2000      	movs	r0, #0
    2628:	e03d      	b.n	26a6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    262a:	4a20      	ldr	r2, [pc, #128]	; (26ac <system_clock_source_enable+0xa0>)
    262c:	6993      	ldr	r3, [r2, #24]
    262e:	2102      	movs	r1, #2
    2630:	430b      	orrs	r3, r1
    2632:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2634:	2000      	movs	r0, #0
		break;
    2636:	e036      	b.n	26a6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2638:	4a1c      	ldr	r2, [pc, #112]	; (26ac <system_clock_source_enable+0xa0>)
    263a:	8a13      	ldrh	r3, [r2, #16]
    263c:	2102      	movs	r1, #2
    263e:	430b      	orrs	r3, r1
    2640:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2642:	2000      	movs	r0, #0
		break;
    2644:	e02f      	b.n	26a6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2646:	4a19      	ldr	r2, [pc, #100]	; (26ac <system_clock_source_enable+0xa0>)
    2648:	8a93      	ldrh	r3, [r2, #20]
    264a:	2102      	movs	r1, #2
    264c:	430b      	orrs	r3, r1
    264e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2650:	2000      	movs	r0, #0
		break;
    2652:	e028      	b.n	26a6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2654:	4916      	ldr	r1, [pc, #88]	; (26b0 <system_clock_source_enable+0xa4>)
    2656:	680b      	ldr	r3, [r1, #0]
    2658:	2202      	movs	r2, #2
    265a:	4313      	orrs	r3, r2
    265c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    265e:	4b13      	ldr	r3, [pc, #76]	; (26ac <system_clock_source_enable+0xa0>)
    2660:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2662:	0019      	movs	r1, r3
    2664:	320e      	adds	r2, #14
    2666:	68cb      	ldr	r3, [r1, #12]
    2668:	421a      	tst	r2, r3
    266a:	d0fc      	beq.n	2666 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    266c:	4a10      	ldr	r2, [pc, #64]	; (26b0 <system_clock_source_enable+0xa4>)
    266e:	6891      	ldr	r1, [r2, #8]
    2670:	4b0e      	ldr	r3, [pc, #56]	; (26ac <system_clock_source_enable+0xa0>)
    2672:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2674:	6852      	ldr	r2, [r2, #4]
    2676:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2678:	2200      	movs	r2, #0
    267a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    267c:	0019      	movs	r1, r3
    267e:	3210      	adds	r2, #16
    2680:	68cb      	ldr	r3, [r1, #12]
    2682:	421a      	tst	r2, r3
    2684:	d0fc      	beq.n	2680 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2686:	4b0a      	ldr	r3, [pc, #40]	; (26b0 <system_clock_source_enable+0xa4>)
    2688:	681b      	ldr	r3, [r3, #0]
    268a:	b29b      	uxth	r3, r3
    268c:	4a07      	ldr	r2, [pc, #28]	; (26ac <system_clock_source_enable+0xa0>)
    268e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2690:	2000      	movs	r0, #0
    2692:	e008      	b.n	26a6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2694:	4905      	ldr	r1, [pc, #20]	; (26ac <system_clock_source_enable+0xa0>)
    2696:	2244      	movs	r2, #68	; 0x44
    2698:	5c8b      	ldrb	r3, [r1, r2]
    269a:	2002      	movs	r0, #2
    269c:	4303      	orrs	r3, r0
    269e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    26a0:	2000      	movs	r0, #0
		break;
    26a2:	e000      	b.n	26a6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    26a4:	2000      	movs	r0, #0
}
    26a6:	4770      	bx	lr
    26a8:	00007f24 	.word	0x00007f24
    26ac:	40000800 	.word	0x40000800
    26b0:	20000218 	.word	0x20000218

000026b4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    26b4:	b570      	push	{r4, r5, r6, lr}
    26b6:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    26b8:	22c2      	movs	r2, #194	; 0xc2
    26ba:	00d2      	lsls	r2, r2, #3
    26bc:	4b42      	ldr	r3, [pc, #264]	; (27c8 <system_clock_init+0x114>)
    26be:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    26c0:	4a42      	ldr	r2, [pc, #264]	; (27cc <system_clock_init+0x118>)
    26c2:	6853      	ldr	r3, [r2, #4]
    26c4:	211e      	movs	r1, #30
    26c6:	438b      	bics	r3, r1
    26c8:	391a      	subs	r1, #26
    26ca:	430b      	orrs	r3, r1
    26cc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    26ce:	2201      	movs	r2, #1
    26d0:	ab01      	add	r3, sp, #4
    26d2:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    26d4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    26d6:	4d3e      	ldr	r5, [pc, #248]	; (27d0 <system_clock_init+0x11c>)
    26d8:	b2e0      	uxtb	r0, r4
    26da:	a901      	add	r1, sp, #4
    26dc:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    26de:	3401      	adds	r4, #1
    26e0:	2c25      	cmp	r4, #37	; 0x25
    26e2:	d1f9      	bne.n	26d8 <system_clock_init+0x24>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    26e4:	4c3b      	ldr	r4, [pc, #236]	; (27d4 <system_clock_init+0x120>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    26e6:	6823      	ldr	r3, [r4, #0]
    26e8:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    26ea:	4937      	ldr	r1, [pc, #220]	; (27c8 <system_clock_init+0x114>)
    26ec:	698a      	ldr	r2, [r1, #24]
    26ee:	0e5b      	lsrs	r3, r3, #25
    26f0:	041b      	lsls	r3, r3, #16
    26f2:	4839      	ldr	r0, [pc, #228]	; (27d8 <system_clock_init+0x124>)
    26f4:	4002      	ands	r2, r0
    26f6:	4313      	orrs	r3, r2
    26f8:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    26fa:	a80a      	add	r0, sp, #40	; 0x28
    26fc:	2301      	movs	r3, #1
    26fe:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    2700:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    2702:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2704:	2207      	movs	r2, #7
    2706:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    2708:	2500      	movs	r5, #0
    270a:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    270c:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    270e:	4b33      	ldr	r3, [pc, #204]	; (27dc <system_clock_init+0x128>)
    2710:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    2712:	2004      	movs	r0, #4
    2714:	4b32      	ldr	r3, [pc, #200]	; (27e0 <system_clock_init+0x12c>)
    2716:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2718:	ab05      	add	r3, sp, #20
    271a:	2200      	movs	r2, #0
    271c:	805d      	strh	r5, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    271e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2720:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2722:	2120      	movs	r1, #32
    2724:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2726:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2728:	6823      	ldr	r3, [r4, #0]
    272a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    272c:	2b3f      	cmp	r3, #63	; 0x3f
    272e:	d049      	beq.n	27c4 <system_clock_init+0x110>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2730:	a805      	add	r0, sp, #20
    2732:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2734:	2307      	movs	r3, #7
    2736:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    2738:	3303      	adds	r3, #3
    273a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    273c:	4b29      	ldr	r3, [pc, #164]	; (27e4 <system_clock_init+0x130>)
    273e:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    2740:	3bff      	subs	r3, #255	; 0xff
    2742:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    2744:	4b28      	ldr	r3, [pc, #160]	; (27e8 <system_clock_init+0x134>)
    2746:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2748:	4b28      	ldr	r3, [pc, #160]	; (27ec <system_clock_init+0x138>)
    274a:	4798      	blx	r3
	config->run_in_standby  = false;
    274c:	a804      	add	r0, sp, #16
    274e:	2400      	movs	r4, #0
    2750:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    2752:	2501      	movs	r5, #1
    2754:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2756:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2758:	4b25      	ldr	r3, [pc, #148]	; (27f0 <system_clock_init+0x13c>)
    275a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    275c:	2006      	movs	r0, #6
    275e:	4e20      	ldr	r6, [pc, #128]	; (27e0 <system_clock_init+0x12c>)
    2760:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2762:	4b24      	ldr	r3, [pc, #144]	; (27f4 <system_clock_init+0x140>)
    2764:	4798      	blx	r3
	config->division_factor    = 1;
    2766:	a901      	add	r1, sp, #4
    2768:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    276a:	704c      	strb	r4, [r1, #1]
	config->output_enable      = false;
    276c:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    276e:	2304      	movs	r3, #4
    2770:	700b      	strb	r3, [r1, #0]
    2772:	720d      	strb	r5, [r1, #8]
    2774:	2007      	movs	r0, #7
    2776:	4b20      	ldr	r3, [pc, #128]	; (27f8 <system_clock_init+0x144>)
    2778:	4798      	blx	r3
    277a:	2007      	movs	r0, #7
    277c:	4b1f      	ldr	r3, [pc, #124]	; (27fc <system_clock_init+0x148>)
    277e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2780:	2007      	movs	r0, #7
    2782:	47b0      	blx	r6
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2784:	4910      	ldr	r1, [pc, #64]	; (27c8 <system_clock_init+0x114>)
    2786:	2210      	movs	r2, #16
    2788:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    278a:	421a      	tst	r2, r3
    278c:	d0fc      	beq.n	2788 <system_clock_init+0xd4>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    278e:	4a0e      	ldr	r2, [pc, #56]	; (27c8 <system_clock_init+0x114>)
    2790:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2792:	2180      	movs	r1, #128	; 0x80
    2794:	430b      	orrs	r3, r1
    2796:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    2798:	4a19      	ldr	r2, [pc, #100]	; (2800 <system_clock_init+0x14c>)
    279a:	2300      	movs	r3, #0
    279c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    279e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    27a0:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    27a2:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    27a4:	a901      	add	r1, sp, #4
    27a6:	2201      	movs	r2, #1
    27a8:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    27aa:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    27ac:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    27ae:	3307      	adds	r3, #7
    27b0:	700b      	strb	r3, [r1, #0]
    27b2:	720a      	strb	r2, [r1, #8]
    27b4:	2000      	movs	r0, #0
    27b6:	4b10      	ldr	r3, [pc, #64]	; (27f8 <system_clock_init+0x144>)
    27b8:	4798      	blx	r3
    27ba:	2000      	movs	r0, #0
    27bc:	4b0f      	ldr	r3, [pc, #60]	; (27fc <system_clock_init+0x148>)
    27be:	4798      	blx	r3
#endif
}
    27c0:	b00c      	add	sp, #48	; 0x30
    27c2:	bd70      	pop	{r4, r5, r6, pc}
		coarse = 0x1f;
    27c4:	3b20      	subs	r3, #32
    27c6:	e7b3      	b.n	2730 <system_clock_init+0x7c>
    27c8:	40000800 	.word	0x40000800
    27cc:	41004000 	.word	0x41004000
    27d0:	00006459 	.word	0x00006459
    27d4:	00806024 	.word	0x00806024
    27d8:	ff80ffff 	.word	0xff80ffff
    27dc:	00002511 	.word	0x00002511
    27e0:	0000260d 	.word	0x0000260d
    27e4:	000001ff 	.word	0x000001ff
    27e8:	ffffbb80 	.word	0xffffbb80
    27ec:	0000258d 	.word	0x0000258d
    27f0:	000024d5 	.word	0x000024d5
    27f4:	00006221 	.word	0x00006221
    27f8:	00006245 	.word	0x00006245
    27fc:	000062fd 	.word	0x000062fd
    2800:	40000400 	.word	0x40000400

00002804 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    2804:	b510      	push	{r4, lr}
    2806:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    2808:	ab03      	add	r3, sp, #12
    280a:	2200      	movs	r2, #0
    280c:	701a      	strb	r2, [r3, #0]
    280e:	3203      	adds	r2, #3
    2810:	705a      	strb	r2, [r3, #1]
    2812:	3a01      	subs	r2, #1
    2814:	709a      	strb	r2, [r3, #2]
    2816:	3a01      	subs	r2, #1
    2818:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    281a:	4b27      	ldr	r3, [pc, #156]	; (28b8 <udd_sleep_mode+0xb4>)
    281c:	781b      	ldrb	r3, [r3, #0]
    281e:	4283      	cmp	r3, r0
    2820:	d007      	beq.n	2832 <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    2822:	2800      	cmp	r0, #0
    2824:	d107      	bne.n	2836 <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    2826:	4b24      	ldr	r3, [pc, #144]	; (28b8 <udd_sleep_mode+0xb4>)
    2828:	781b      	ldrb	r3, [r3, #0]
    282a:	2b00      	cmp	r3, #0
    282c:	d123      	bne.n	2876 <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    282e:	4b22      	ldr	r3, [pc, #136]	; (28b8 <udd_sleep_mode+0xb4>)
    2830:	7018      	strb	r0, [r3, #0]
}
    2832:	b004      	add	sp, #16
    2834:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    2836:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    2838:	5c1b      	ldrb	r3, [r3, r0]
    283a:	4a20      	ldr	r2, [pc, #128]	; (28bc <udd_sleep_mode+0xb8>)
    283c:	5cd2      	ldrb	r2, [r2, r3]
    283e:	2aff      	cmp	r2, #255	; 0xff
    2840:	d100      	bne.n	2844 <udd_sleep_mode+0x40>
    2842:	e7fe      	b.n	2842 <udd_sleep_mode+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2844:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2848:	4251      	negs	r1, r2
    284a:	414a      	adcs	r2, r1
    284c:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    284e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2850:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2854:	2100      	movs	r1, #0
    2856:	4a1a      	ldr	r2, [pc, #104]	; (28c0 <udd_sleep_mode+0xbc>)
    2858:	7011      	strb	r1, [r2, #0]
	return flags;
    285a:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    285c:	4917      	ldr	r1, [pc, #92]	; (28bc <udd_sleep_mode+0xb8>)
    285e:	5cca      	ldrb	r2, [r1, r3]
    2860:	3201      	adds	r2, #1
    2862:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2864:	2c00      	cmp	r4, #0
    2866:	d0de      	beq.n	2826 <udd_sleep_mode+0x22>
		cpu_irq_enable();
    2868:	2201      	movs	r2, #1
    286a:	4b15      	ldr	r3, [pc, #84]	; (28c0 <udd_sleep_mode+0xbc>)
    286c:	701a      	strb	r2, [r3, #0]
    286e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2872:	b662      	cpsie	i
    2874:	e7d7      	b.n	2826 <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    2876:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    2878:	5cd3      	ldrb	r3, [r2, r3]
    287a:	4a10      	ldr	r2, [pc, #64]	; (28bc <udd_sleep_mode+0xb8>)
    287c:	5cd2      	ldrb	r2, [r2, r3]
    287e:	2a00      	cmp	r2, #0
    2880:	d100      	bne.n	2884 <udd_sleep_mode+0x80>
    2882:	e7fe      	b.n	2882 <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2884:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2888:	4251      	negs	r1, r2
    288a:	414a      	adcs	r2, r1
    288c:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    288e:	b672      	cpsid	i
    2890:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2894:	2100      	movs	r1, #0
    2896:	4a0a      	ldr	r2, [pc, #40]	; (28c0 <udd_sleep_mode+0xbc>)
    2898:	7011      	strb	r1, [r2, #0]
	return flags;
    289a:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    289c:	4907      	ldr	r1, [pc, #28]	; (28bc <udd_sleep_mode+0xb8>)
    289e:	5cca      	ldrb	r2, [r1, r3]
    28a0:	3a01      	subs	r2, #1
    28a2:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    28a4:	2c00      	cmp	r4, #0
    28a6:	d0c2      	beq.n	282e <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    28a8:	2201      	movs	r2, #1
    28aa:	4b05      	ldr	r3, [pc, #20]	; (28c0 <udd_sleep_mode+0xbc>)
    28ac:	701a      	strb	r2, [r3, #0]
    28ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    28b2:	b662      	cpsie	i
    28b4:	e7bb      	b.n	282e <udd_sleep_mode+0x2a>
    28b6:	46c0      	nop			; (mov r8, r8)
    28b8:	20000288 	.word	0x20000288
    28bc:	20000ae8 	.word	0x20000ae8
    28c0:	200000f9 	.word	0x200000f9

000028c4 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    28c4:	0643      	lsls	r3, r0, #25
    28c6:	d00b      	beq.n	28e0 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    28c8:	230f      	movs	r3, #15
    28ca:	4003      	ands	r3, r0
    28cc:	005b      	lsls	r3, r3, #1
    28ce:	09c0      	lsrs	r0, r0, #7
    28d0:	1818      	adds	r0, r3, r0
    28d2:	3802      	subs	r0, #2
    28d4:	0083      	lsls	r3, r0, #2
    28d6:	1818      	adds	r0, r3, r0
    28d8:	0080      	lsls	r0, r0, #2
    28da:	4b02      	ldr	r3, [pc, #8]	; (28e4 <udd_ep_get_job+0x20>)
    28dc:	1818      	adds	r0, r3, r0
	}
}
    28de:	4770      	bx	lr
		return NULL;
    28e0:	2000      	movs	r0, #0
    28e2:	e7fc      	b.n	28de <udd_ep_get_job+0x1a>
    28e4:	20000238 	.word	0x20000238

000028e8 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    28e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28ea:	46d6      	mov	lr, sl
    28ec:	464f      	mov	r7, r9
    28ee:	4646      	mov	r6, r8
    28f0:	b5c0      	push	{r6, r7, lr}
    28f2:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    28f4:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    28f6:	b26b      	sxtb	r3, r5
    28f8:	2b00      	cmp	r3, #0
    28fa:	db26      	blt.n	294a <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    28fc:	0028      	movs	r0, r5
    28fe:	4b5e      	ldr	r3, [pc, #376]	; (2a78 <udd_ep_transfer_process+0x190>)
    2900:	4798      	blx	r3
    2902:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2904:	270f      	movs	r7, #15
    2906:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2908:	8a03      	ldrh	r3, [r0, #16]
    290a:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    290c:	464b      	mov	r3, r9
    290e:	881b      	ldrh	r3, [r3, #0]
    2910:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    2912:	7c83      	ldrb	r3, [r0, #18]
    2914:	075b      	lsls	r3, r3, #29
    2916:	d46a      	bmi.n	29ee <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    2918:	68e3      	ldr	r3, [r4, #12]
    291a:	4453      	add	r3, sl
    291c:	001e      	movs	r6, r3
    291e:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    2920:	68a3      	ldr	r3, [r4, #8]
    2922:	429e      	cmp	r6, r3
    2924:	d800      	bhi.n	2928 <udd_ep_transfer_process+0x40>
    2926:	e074      	b.n	2a12 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    2928:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    292a:	7ca3      	ldrb	r3, [r4, #18]
    292c:	2201      	movs	r2, #1
    292e:	4393      	bics	r3, r2
    2930:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    2932:	6823      	ldr	r3, [r4, #0]
    2934:	2b00      	cmp	r3, #0
    2936:	d003      	beq.n	2940 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2938:	68e1      	ldr	r1, [r4, #12]
    293a:	002a      	movs	r2, r5
    293c:	2000      	movs	r0, #0
    293e:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    2940:	bc1c      	pop	{r2, r3, r4}
    2942:	4690      	mov	r8, r2
    2944:	4699      	mov	r9, r3
    2946:	46a2      	mov	sl, r4
    2948:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    294a:	0028      	movs	r0, r5
    294c:	4b4a      	ldr	r3, [pc, #296]	; (2a78 <udd_ep_transfer_process+0x190>)
    294e:	4798      	blx	r3
    2950:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2952:	270f      	movs	r7, #15
    2954:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2956:	8a03      	ldrh	r3, [r0, #16]
    2958:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    295a:	464b      	mov	r3, r9
    295c:	885e      	ldrh	r6, [r3, #2]
    295e:	68c3      	ldr	r3, [r0, #12]
    2960:	469c      	mov	ip, r3
    2962:	4466      	add	r6, ip
    2964:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    2966:	6881      	ldr	r1, [r0, #8]
    2968:	428e      	cmp	r6, r1
    296a:	d025      	beq.n	29b8 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    296c:	1b8d      	subs	r5, r1, r6
    296e:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2970:	4b42      	ldr	r3, [pc, #264]	; (2a7c <udd_ep_transfer_process+0x194>)
    2972:	429d      	cmp	r5, r3
    2974:	d906      	bls.n	2984 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    2976:	001d      	movs	r5, r3
    2978:	4641      	mov	r1, r8
    297a:	0018      	movs	r0, r3
    297c:	4b40      	ldr	r3, [pc, #256]	; (2a80 <udd_ep_transfer_process+0x198>)
    297e:	4798      	blx	r3
    2980:	1a6d      	subs	r5, r5, r1
    2982:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    2984:	7ca2      	ldrb	r2, [r4, #18]
    2986:	2300      	movs	r3, #0
    2988:	0792      	lsls	r2, r2, #30
    298a:	d507      	bpl.n	299c <udd_ep_transfer_process+0xb4>
    298c:	4641      	mov	r1, r8
    298e:	0028      	movs	r0, r5
    2990:	4b3c      	ldr	r3, [pc, #240]	; (2a84 <udd_ep_transfer_process+0x19c>)
    2992:	4798      	blx	r3
    2994:	b289      	uxth	r1, r1
    2996:	424b      	negs	r3, r1
    2998:	414b      	adcs	r3, r1
    299a:	b2db      	uxtb	r3, r3
    299c:	005b      	lsls	r3, r3, #1
    299e:	7ca2      	ldrb	r2, [r4, #18]
    29a0:	2102      	movs	r1, #2
    29a2:	438a      	bics	r2, r1
    29a4:	4313      	orrs	r3, r2
    29a6:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    29a8:	6862      	ldr	r2, [r4, #4]
    29aa:	1992      	adds	r2, r2, r6
    29ac:	002b      	movs	r3, r5
    29ae:	0039      	movs	r1, r7
    29b0:	4835      	ldr	r0, [pc, #212]	; (2a88 <udd_ep_transfer_process+0x1a0>)
    29b2:	4c36      	ldr	r4, [pc, #216]	; (2a8c <udd_ep_transfer_process+0x1a4>)
    29b4:	47a0      	blx	r4
    29b6:	e7c3      	b.n	2940 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    29b8:	7c83      	ldrb	r3, [r0, #18]
    29ba:	079b      	lsls	r3, r3, #30
    29bc:	d40b      	bmi.n	29d6 <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    29be:	7c83      	ldrb	r3, [r0, #18]
    29c0:	2201      	movs	r2, #1
    29c2:	4393      	bics	r3, r2
    29c4:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    29c6:	6803      	ldr	r3, [r0, #0]
    29c8:	2b00      	cmp	r3, #0
    29ca:	d0b9      	beq.n	2940 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    29cc:	002a      	movs	r2, r5
    29ce:	0031      	movs	r1, r6
    29d0:	2000      	movs	r0, #0
    29d2:	4798      	blx	r3
    29d4:	e7b4      	b.n	2940 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    29d6:	7c83      	ldrb	r3, [r0, #18]
    29d8:	2202      	movs	r2, #2
    29da:	4393      	bics	r3, r2
    29dc:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    29de:	6842      	ldr	r2, [r0, #4]
    29e0:	1992      	adds	r2, r2, r6
    29e2:	2300      	movs	r3, #0
    29e4:	0039      	movs	r1, r7
    29e6:	4828      	ldr	r0, [pc, #160]	; (2a88 <udd_ep_transfer_process+0x1a0>)
    29e8:	4c28      	ldr	r4, [pc, #160]	; (2a8c <udd_ep_transfer_process+0x1a4>)
    29ea:	47a0      	blx	r4
    29ec:	e7a8      	b.n	2940 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    29ee:	6843      	ldr	r3, [r0, #4]
    29f0:	68c2      	ldr	r2, [r0, #12]
    29f2:	4694      	mov	ip, r2
    29f4:	4463      	add	r3, ip
    29f6:	001e      	movs	r6, r3
    29f8:	4641      	mov	r1, r8
    29fa:	6880      	ldr	r0, [r0, #8]
    29fc:	4b21      	ldr	r3, [pc, #132]	; (2a84 <udd_ep_transfer_process+0x19c>)
    29fe:	4798      	blx	r3
    2a00:	000a      	movs	r2, r1
    2a02:	1e7b      	subs	r3, r7, #1
    2a04:	019b      	lsls	r3, r3, #6
    2a06:	4922      	ldr	r1, [pc, #136]	; (2a90 <udd_ep_transfer_process+0x1a8>)
    2a08:	1859      	adds	r1, r3, r1
    2a0a:	0030      	movs	r0, r6
    2a0c:	4b21      	ldr	r3, [pc, #132]	; (2a94 <udd_ep_transfer_process+0x1ac>)
    2a0e:	4798      	blx	r3
    2a10:	e782      	b.n	2918 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    2a12:	464a      	mov	r2, r9
    2a14:	8892      	ldrh	r2, [r2, #4]
    2a16:	4552      	cmp	r2, sl
    2a18:	d000      	beq.n	2a1c <udd_ep_transfer_process+0x134>
    2a1a:	e786      	b.n	292a <udd_ep_transfer_process+0x42>
    2a1c:	429e      	cmp	r6, r3
    2a1e:	d100      	bne.n	2a22 <udd_ep_transfer_process+0x13a>
    2a20:	e783      	b.n	292a <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2a22:	1b9b      	subs	r3, r3, r6
    2a24:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2a26:	4b15      	ldr	r3, [pc, #84]	; (2a7c <udd_ep_transfer_process+0x194>)
    2a28:	429d      	cmp	r5, r3
    2a2a:	d916      	bls.n	2a5a <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    2a2c:	001d      	movs	r5, r3
    2a2e:	4641      	mov	r1, r8
    2a30:	0018      	movs	r0, r3
    2a32:	4b13      	ldr	r3, [pc, #76]	; (2a80 <udd_ep_transfer_process+0x198>)
    2a34:	4798      	blx	r3
    2a36:	1a6b      	subs	r3, r5, r1
    2a38:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    2a3a:	4598      	cmp	r8, r3
    2a3c:	d914      	bls.n	2a68 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    2a3e:	7ca3      	ldrb	r3, [r4, #18]
    2a40:	2204      	movs	r2, #4
    2a42:	4313      	orrs	r3, r2
    2a44:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    2a46:	1e7a      	subs	r2, r7, #1
    2a48:	0192      	lsls	r2, r2, #6
    2a4a:	4b11      	ldr	r3, [pc, #68]	; (2a90 <udd_ep_transfer_process+0x1a8>)
    2a4c:	18d2      	adds	r2, r2, r3
    2a4e:	4643      	mov	r3, r8
    2a50:	0039      	movs	r1, r7
    2a52:	480d      	ldr	r0, [pc, #52]	; (2a88 <udd_ep_transfer_process+0x1a0>)
    2a54:	4c10      	ldr	r4, [pc, #64]	; (2a98 <udd_ep_transfer_process+0x1b0>)
    2a56:	47a0      	blx	r4
    2a58:	e772      	b.n	2940 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    2a5a:	4641      	mov	r1, r8
    2a5c:	0028      	movs	r0, r5
    2a5e:	4b09      	ldr	r3, [pc, #36]	; (2a84 <udd_ep_transfer_process+0x19c>)
    2a60:	4798      	blx	r3
    2a62:	1a6b      	subs	r3, r5, r1
    2a64:	b29b      	uxth	r3, r3
    2a66:	e7e8      	b.n	2a3a <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2a68:	6862      	ldr	r2, [r4, #4]
    2a6a:	1992      	adds	r2, r2, r6
    2a6c:	0039      	movs	r1, r7
    2a6e:	4806      	ldr	r0, [pc, #24]	; (2a88 <udd_ep_transfer_process+0x1a0>)
    2a70:	4c09      	ldr	r4, [pc, #36]	; (2a98 <udd_ep_transfer_process+0x1b0>)
    2a72:	47a0      	blx	r4
    2a74:	e764      	b.n	2940 <udd_ep_transfer_process+0x58>
    2a76:	46c0      	nop			; (mov r8, r8)
    2a78:	000028c5 	.word	0x000028c5
    2a7c:	00001fff 	.word	0x00001fff
    2a80:	000069b5 	.word	0x000069b5
    2a84:	000067e1 	.word	0x000067e1
    2a88:	200003cc 	.word	0x200003cc
    2a8c:	00004281 	.word	0x00004281
    2a90:	2000034c 	.word	0x2000034c
    2a94:	00006cb1 	.word	0x00006cb1
    2a98:	000042d5 	.word	0x000042d5

00002a9c <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    2a9c:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2a9e:	2205      	movs	r2, #5
    2aa0:	4b05      	ldr	r3, [pc, #20]	; (2ab8 <udd_ctrl_stall_data+0x1c>)
    2aa2:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    2aa4:	4c05      	ldr	r4, [pc, #20]	; (2abc <udd_ctrl_stall_data+0x20>)
    2aa6:	2180      	movs	r1, #128	; 0x80
    2aa8:	0020      	movs	r0, r4
    2aaa:	4b05      	ldr	r3, [pc, #20]	; (2ac0 <udd_ctrl_stall_data+0x24>)
    2aac:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    2aae:	2100      	movs	r1, #0
    2ab0:	0020      	movs	r0, r4
    2ab2:	4b04      	ldr	r3, [pc, #16]	; (2ac4 <udd_ctrl_stall_data+0x28>)
    2ab4:	4798      	blx	r3
}
    2ab6:	bd10      	pop	{r4, pc}
    2ab8:	20000236 	.word	0x20000236
    2abc:	200003cc 	.word	0x200003cc
    2ac0:	000041d5 	.word	0x000041d5
    2ac4:	000041fb 	.word	0x000041fb

00002ac8 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    2ac8:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2aca:	4c08      	ldr	r4, [pc, #32]	; (2aec <_usb_device_lpm_suspend+0x24>)
    2acc:	2106      	movs	r1, #6
    2ace:	0020      	movs	r0, r4
    2ad0:	4d07      	ldr	r5, [pc, #28]	; (2af0 <_usb_device_lpm_suspend+0x28>)
    2ad2:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2ad4:	2104      	movs	r1, #4
    2ad6:	0020      	movs	r0, r4
    2ad8:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2ada:	2102      	movs	r1, #2
    2adc:	0020      	movs	r0, r4
    2ade:	4b05      	ldr	r3, [pc, #20]	; (2af4 <_usb_device_lpm_suspend+0x2c>)
    2ae0:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    2ae2:	2002      	movs	r0, #2
    2ae4:	4b04      	ldr	r3, [pc, #16]	; (2af8 <_usb_device_lpm_suspend+0x30>)
    2ae6:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    2ae8:	bd70      	pop	{r4, r5, r6, pc}
    2aea:	46c0      	nop			; (mov r8, r8)
    2aec:	200003cc 	.word	0x200003cc
    2af0:	00003ce9 	.word	0x00003ce9
    2af4:	00003cc9 	.word	0x00003cc9
    2af8:	00002805 	.word	0x00002805

00002afc <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    2afc:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2afe:	4b13      	ldr	r3, [pc, #76]	; (2b4c <_usb_on_wakeup+0x50>)
    2b00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2b02:	069b      	lsls	r3, r3, #26
    2b04:	d41c      	bmi.n	2b40 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    2b06:	4911      	ldr	r1, [pc, #68]	; (2b4c <_usb_on_wakeup+0x50>)
    2b08:	22d0      	movs	r2, #208	; 0xd0
    2b0a:	68cb      	ldr	r3, [r1, #12]
    2b0c:	4013      	ands	r3, r2
    2b0e:	2bd0      	cmp	r3, #208	; 0xd0
    2b10:	d1fb      	bne.n	2b0a <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2b12:	4c0f      	ldr	r4, [pc, #60]	; (2b50 <_usb_on_wakeup+0x54>)
    2b14:	2102      	movs	r1, #2
    2b16:	0020      	movs	r0, r4
    2b18:	4b0e      	ldr	r3, [pc, #56]	; (2b54 <_usb_on_wakeup+0x58>)
    2b1a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2b1c:	2104      	movs	r1, #4
    2b1e:	0020      	movs	r0, r4
    2b20:	4d0d      	ldr	r5, [pc, #52]	; (2b58 <_usb_on_wakeup+0x5c>)
    2b22:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    2b24:	4a0d      	ldr	r2, [pc, #52]	; (2b5c <_usb_on_wakeup+0x60>)
    2b26:	2106      	movs	r1, #6
    2b28:	0020      	movs	r0, r4
    2b2a:	4b0d      	ldr	r3, [pc, #52]	; (2b60 <_usb_on_wakeup+0x64>)
    2b2c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2b2e:	2106      	movs	r1, #6
    2b30:	0020      	movs	r0, r4
    2b32:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    2b34:	2003      	movs	r0, #3
    2b36:	4b0b      	ldr	r3, [pc, #44]	; (2b64 <_usb_on_wakeup+0x68>)
    2b38:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    2b3a:	4b0b      	ldr	r3, [pc, #44]	; (2b68 <_usb_on_wakeup+0x6c>)
    2b3c:	4798      	blx	r3
#endif
}
    2b3e:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    2b40:	4902      	ldr	r1, [pc, #8]	; (2b4c <_usb_on_wakeup+0x50>)
    2b42:	2210      	movs	r2, #16
    2b44:	68cb      	ldr	r3, [r1, #12]
    2b46:	421a      	tst	r2, r3
    2b48:	d0fc      	beq.n	2b44 <_usb_on_wakeup+0x48>
    2b4a:	e7e2      	b.n	2b12 <_usb_on_wakeup+0x16>
    2b4c:	40000800 	.word	0x40000800
    2b50:	200003cc 	.word	0x200003cc
    2b54:	00003ce9 	.word	0x00003ce9
    2b58:	00003cc9 	.word	0x00003cc9
    2b5c:	00002ac9 	.word	0x00002ac9
    2b60:	00003ca5 	.word	0x00003ca5
    2b64:	00002805 	.word	0x00002805
    2b68:	00003881 	.word	0x00003881

00002b6c <_usb_on_bus_reset>:
{
    2b6c:	b530      	push	{r4, r5, lr}
    2b6e:	b083      	sub	sp, #12
    2b70:	0004      	movs	r4, r0
	udc_reset();
    2b72:	4b1e      	ldr	r3, [pc, #120]	; (2bec <_usb_on_bus_reset+0x80>)
    2b74:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    2b76:	2380      	movs	r3, #128	; 0x80
    2b78:	6822      	ldr	r2, [r4, #0]
    2b7a:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    2b7c:	ad01      	add	r5, sp, #4
    2b7e:	0028      	movs	r0, r5
    2b80:	4b1b      	ldr	r3, [pc, #108]	; (2bf0 <_usb_on_bus_reset+0x84>)
    2b82:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    2b84:	2303      	movs	r3, #3
    2b86:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    2b88:	0029      	movs	r1, r5
    2b8a:	0020      	movs	r0, r4
    2b8c:	4b19      	ldr	r3, [pc, #100]	; (2bf4 <_usb_on_bus_reset+0x88>)
    2b8e:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    2b90:	4919      	ldr	r1, [pc, #100]	; (2bf8 <_usb_on_bus_reset+0x8c>)
    2b92:	0020      	movs	r0, r4
    2b94:	4b19      	ldr	r3, [pc, #100]	; (2bfc <_usb_on_bus_reset+0x90>)
    2b96:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    2b98:	4b19      	ldr	r3, [pc, #100]	; (2c00 <_usb_on_bus_reset+0x94>)
    2b9a:	2202      	movs	r2, #2
    2b9c:	2100      	movs	r1, #0
    2b9e:	0020      	movs	r0, r4
    2ba0:	4d18      	ldr	r5, [pc, #96]	; (2c04 <_usb_on_bus_reset+0x98>)
    2ba2:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    2ba4:	4b18      	ldr	r3, [pc, #96]	; (2c08 <_usb_on_bus_reset+0x9c>)
    2ba6:	2200      	movs	r2, #0
    2ba8:	2100      	movs	r1, #0
    2baa:	0020      	movs	r0, r4
    2bac:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    2bae:	4b17      	ldr	r3, [pc, #92]	; (2c0c <_usb_on_bus_reset+0xa0>)
    2bb0:	2201      	movs	r2, #1
    2bb2:	2100      	movs	r1, #0
    2bb4:	0020      	movs	r0, r4
    2bb6:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    2bb8:	2202      	movs	r2, #2
    2bba:	2100      	movs	r1, #0
    2bbc:	0020      	movs	r0, r4
    2bbe:	4d14      	ldr	r5, [pc, #80]	; (2c10 <_usb_on_bus_reset+0xa4>)
    2bc0:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2bc2:	2200      	movs	r2, #0
    2bc4:	2100      	movs	r1, #0
    2bc6:	0020      	movs	r0, r4
    2bc8:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2bca:	2201      	movs	r2, #1
    2bcc:	2100      	movs	r1, #0
    2bce:	0020      	movs	r0, r4
    2bd0:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    2bd2:	6821      	ldr	r1, [r4, #0]
    2bd4:	890b      	ldrh	r3, [r1, #8]
    2bd6:	4a0f      	ldr	r2, [pc, #60]	; (2c14 <_usb_on_bus_reset+0xa8>)
    2bd8:	401a      	ands	r2, r3
    2bda:	2380      	movs	r3, #128	; 0x80
    2bdc:	00db      	lsls	r3, r3, #3
    2bde:	4313      	orrs	r3, r2
    2be0:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    2be2:	2200      	movs	r2, #0
    2be4:	4b0c      	ldr	r3, [pc, #48]	; (2c18 <_usb_on_bus_reset+0xac>)
    2be6:	701a      	strb	r2, [r3, #0]
}
    2be8:	b003      	add	sp, #12
    2bea:	bd30      	pop	{r4, r5, pc}
    2bec:	00001801 	.word	0x00001801
    2bf0:	00003ef5 	.word	0x00003ef5
    2bf4:	00003f05 	.word	0x00003f05
    2bf8:	2000054c 	.word	0x2000054c
    2bfc:	00004325 	.word	0x00004325
    2c00:	00002d55 	.word	0x00002d55
    2c04:	00003d05 	.word	0x00003d05
    2c08:	00003071 	.word	0x00003071
    2c0c:	00002c59 	.word	0x00002c59
    2c10:	00003d55 	.word	0x00003d55
    2c14:	fffff3ff 	.word	0xfffff3ff
    2c18:	20000236 	.word	0x20000236

00002c1c <udd_ctrl_send_zlp_in>:
{
    2c1c:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    2c1e:	2203      	movs	r2, #3
    2c20:	4b07      	ldr	r3, [pc, #28]	; (2c40 <udd_ctrl_send_zlp_in+0x24>)
    2c22:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2c24:	4c07      	ldr	r4, [pc, #28]	; (2c44 <udd_ctrl_send_zlp_in+0x28>)
    2c26:	4908      	ldr	r1, [pc, #32]	; (2c48 <udd_ctrl_send_zlp_in+0x2c>)
    2c28:	0020      	movs	r0, r4
    2c2a:	4b08      	ldr	r3, [pc, #32]	; (2c4c <udd_ctrl_send_zlp_in+0x30>)
    2c2c:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    2c2e:	4b08      	ldr	r3, [pc, #32]	; (2c50 <udd_ctrl_send_zlp_in+0x34>)
    2c30:	689a      	ldr	r2, [r3, #8]
    2c32:	2300      	movs	r3, #0
    2c34:	2100      	movs	r1, #0
    2c36:	0020      	movs	r0, r4
    2c38:	4c06      	ldr	r4, [pc, #24]	; (2c54 <udd_ctrl_send_zlp_in+0x38>)
    2c3a:	47a0      	blx	r4
}
    2c3c:	bd10      	pop	{r4, pc}
    2c3e:	46c0      	nop			; (mov r8, r8)
    2c40:	20000236 	.word	0x20000236
    2c44:	200003cc 	.word	0x200003cc
    2c48:	2000054c 	.word	0x2000054c
    2c4c:	00004325 	.word	0x00004325
    2c50:	20000534 	.word	0x20000534
    2c54:	00004281 	.word	0x00004281

00002c58 <_usb_ep0_on_tansfer_fail>:
{
    2c58:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    2c5a:	7989      	ldrb	r1, [r1, #6]
    2c5c:	b24b      	sxtb	r3, r1
    2c5e:	2b00      	cmp	r3, #0
    2c60:	db06      	blt.n	2c70 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2c62:	4b0e      	ldr	r3, [pc, #56]	; (2c9c <_usb_ep0_on_tansfer_fail+0x44>)
    2c64:	781b      	ldrb	r3, [r3, #0]
    2c66:	2b02      	cmp	r3, #2
    2c68:	d00f      	beq.n	2c8a <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2c6a:	2b03      	cmp	r3, #3
    2c6c:	d011      	beq.n	2c92 <_usb_ep0_on_tansfer_fail+0x3a>
}
    2c6e:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2c70:	4b0a      	ldr	r3, [pc, #40]	; (2c9c <_usb_ep0_on_tansfer_fail+0x44>)
    2c72:	781b      	ldrb	r3, [r3, #0]
    2c74:	2b01      	cmp	r3, #1
    2c76:	d005      	beq.n	2c84 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2c78:	2b04      	cmp	r3, #4
    2c7a:	d1f8      	bne.n	2c6e <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2c7c:	4808      	ldr	r0, [pc, #32]	; (2ca0 <_usb_ep0_on_tansfer_fail+0x48>)
    2c7e:	4b09      	ldr	r3, [pc, #36]	; (2ca4 <_usb_ep0_on_tansfer_fail+0x4c>)
    2c80:	4798      	blx	r3
    2c82:	e7f4      	b.n	2c6e <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    2c84:	4b08      	ldr	r3, [pc, #32]	; (2ca8 <_usb_ep0_on_tansfer_fail+0x50>)
    2c86:	4798      	blx	r3
    2c88:	e7f1      	b.n	2c6e <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2c8a:	2204      	movs	r2, #4
    2c8c:	4b03      	ldr	r3, [pc, #12]	; (2c9c <_usb_ep0_on_tansfer_fail+0x44>)
    2c8e:	701a      	strb	r2, [r3, #0]
    2c90:	e7ed      	b.n	2c6e <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2c92:	4803      	ldr	r0, [pc, #12]	; (2ca0 <_usb_ep0_on_tansfer_fail+0x48>)
    2c94:	4b03      	ldr	r3, [pc, #12]	; (2ca4 <_usb_ep0_on_tansfer_fail+0x4c>)
    2c96:	4798      	blx	r3
}
    2c98:	e7e9      	b.n	2c6e <_usb_ep0_on_tansfer_fail+0x16>
    2c9a:	46c0      	nop			; (mov r8, r8)
    2c9c:	20000236 	.word	0x20000236
    2ca0:	200003cc 	.word	0x200003cc
    2ca4:	000041d5 	.word	0x000041d5
    2ca8:	00002c1d 	.word	0x00002c1d

00002cac <udd_ctrl_in_sent>:
{
    2cac:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2cae:	4b20      	ldr	r3, [pc, #128]	; (2d30 <udd_ctrl_in_sent+0x84>)
    2cb0:	881b      	ldrh	r3, [r3, #0]
    2cb2:	4a20      	ldr	r2, [pc, #128]	; (2d34 <udd_ctrl_in_sent+0x88>)
    2cb4:	8994      	ldrh	r4, [r2, #12]
    2cb6:	1ae4      	subs	r4, r4, r3
    2cb8:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    2cba:	2c00      	cmp	r4, #0
    2cbc:	d118      	bne.n	2cf0 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2cbe:	4a1e      	ldr	r2, [pc, #120]	; (2d38 <udd_ctrl_in_sent+0x8c>)
    2cc0:	8811      	ldrh	r1, [r2, #0]
    2cc2:	185b      	adds	r3, r3, r1
    2cc4:	b29b      	uxth	r3, r3
    2cc6:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    2cc8:	4a1a      	ldr	r2, [pc, #104]	; (2d34 <udd_ctrl_in_sent+0x88>)
    2cca:	88d2      	ldrh	r2, [r2, #6]
    2ccc:	429a      	cmp	r2, r3
    2cce:	d023      	beq.n	2d18 <udd_ctrl_in_sent+0x6c>
    2cd0:	4b1a      	ldr	r3, [pc, #104]	; (2d3c <udd_ctrl_in_sent+0x90>)
    2cd2:	781b      	ldrb	r3, [r3, #0]
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	d11f      	bne.n	2d18 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    2cd8:	4b16      	ldr	r3, [pc, #88]	; (2d34 <udd_ctrl_in_sent+0x88>)
    2cda:	695b      	ldr	r3, [r3, #20]
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d023      	beq.n	2d28 <udd_ctrl_in_sent+0x7c>
    2ce0:	4798      	blx	r3
    2ce2:	2800      	cmp	r0, #0
    2ce4:	d020      	beq.n	2d28 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    2ce6:	2200      	movs	r2, #0
    2ce8:	4b11      	ldr	r3, [pc, #68]	; (2d30 <udd_ctrl_in_sent+0x84>)
    2cea:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    2cec:	4b11      	ldr	r3, [pc, #68]	; (2d34 <udd_ctrl_in_sent+0x88>)
    2cee:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    2cf0:	2c3f      	cmp	r4, #63	; 0x3f
    2cf2:	d919      	bls.n	2d28 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    2cf4:	2200      	movs	r2, #0
    2cf6:	4b11      	ldr	r3, [pc, #68]	; (2d3c <udd_ctrl_in_sent+0x90>)
    2cf8:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    2cfa:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    2cfc:	4d0c      	ldr	r5, [pc, #48]	; (2d30 <udd_ctrl_in_sent+0x84>)
    2cfe:	882b      	ldrh	r3, [r5, #0]
    2d00:	4a0c      	ldr	r2, [pc, #48]	; (2d34 <udd_ctrl_in_sent+0x88>)
    2d02:	6892      	ldr	r2, [r2, #8]
    2d04:	18d2      	adds	r2, r2, r3
    2d06:	0023      	movs	r3, r4
    2d08:	2100      	movs	r1, #0
    2d0a:	480d      	ldr	r0, [pc, #52]	; (2d40 <udd_ctrl_in_sent+0x94>)
    2d0c:	4e0d      	ldr	r6, [pc, #52]	; (2d44 <udd_ctrl_in_sent+0x98>)
    2d0e:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    2d10:	882b      	ldrh	r3, [r5, #0]
    2d12:	18e4      	adds	r4, r4, r3
    2d14:	802c      	strh	r4, [r5, #0]
}
    2d16:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2d18:	2204      	movs	r2, #4
    2d1a:	4b0b      	ldr	r3, [pc, #44]	; (2d48 <udd_ctrl_in_sent+0x9c>)
    2d1c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2d1e:	490b      	ldr	r1, [pc, #44]	; (2d4c <udd_ctrl_in_sent+0xa0>)
    2d20:	4807      	ldr	r0, [pc, #28]	; (2d40 <udd_ctrl_in_sent+0x94>)
    2d22:	4b0b      	ldr	r3, [pc, #44]	; (2d50 <udd_ctrl_in_sent+0xa4>)
    2d24:	4798      	blx	r3
			return;
    2d26:	e7f6      	b.n	2d16 <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    2d28:	2201      	movs	r2, #1
    2d2a:	4b04      	ldr	r3, [pc, #16]	; (2d3c <udd_ctrl_in_sent+0x90>)
    2d2c:	701a      	strb	r2, [r3, #0]
    2d2e:	e7e5      	b.n	2cfc <udd_ctrl_in_sent+0x50>
    2d30:	20000232 	.word	0x20000232
    2d34:	20000534 	.word	0x20000534
    2d38:	20000234 	.word	0x20000234
    2d3c:	20000230 	.word	0x20000230
    2d40:	200003cc 	.word	0x200003cc
    2d44:	00004281 	.word	0x00004281
    2d48:	20000236 	.word	0x20000236
    2d4c:	2000054c 	.word	0x2000054c
    2d50:	00004325 	.word	0x00004325

00002d54 <_usb_ep0_on_setup>:
{
    2d54:	b510      	push	{r4, lr}
    2d56:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2d58:	4b2c      	ldr	r3, [pc, #176]	; (2e0c <_usb_ep0_on_setup+0xb8>)
    2d5a:	781b      	ldrb	r3, [r3, #0]
    2d5c:	2b00      	cmp	r3, #0
    2d5e:	d007      	beq.n	2d70 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    2d60:	4b2b      	ldr	r3, [pc, #172]	; (2e10 <_usb_ep0_on_setup+0xbc>)
    2d62:	691b      	ldr	r3, [r3, #16]
    2d64:	2b00      	cmp	r3, #0
    2d66:	d000      	beq.n	2d6a <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    2d68:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    2d6a:	2200      	movs	r2, #0
    2d6c:	4b27      	ldr	r3, [pc, #156]	; (2e0c <_usb_ep0_on_setup+0xb8>)
    2d6e:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    2d70:	8823      	ldrh	r3, [r4, #0]
    2d72:	2b08      	cmp	r3, #8
    2d74:	d002      	beq.n	2d7c <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    2d76:	4b27      	ldr	r3, [pc, #156]	; (2e14 <_usb_ep0_on_setup+0xc0>)
    2d78:	4798      	blx	r3
}
    2d7a:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    2d7c:	4a24      	ldr	r2, [pc, #144]	; (2e10 <_usb_ep0_on_setup+0xbc>)
    2d7e:	4b26      	ldr	r3, [pc, #152]	; (2e18 <_usb_ep0_on_setup+0xc4>)
    2d80:	7819      	ldrb	r1, [r3, #0]
    2d82:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    2d84:	7859      	ldrb	r1, [r3, #1]
    2d86:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    2d88:	78d8      	ldrb	r0, [r3, #3]
    2d8a:	0200      	lsls	r0, r0, #8
    2d8c:	7899      	ldrb	r1, [r3, #2]
    2d8e:	1809      	adds	r1, r1, r0
    2d90:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    2d92:	7958      	ldrb	r0, [r3, #5]
    2d94:	0200      	lsls	r0, r0, #8
    2d96:	7919      	ldrb	r1, [r3, #4]
    2d98:	1809      	adds	r1, r1, r0
    2d9a:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    2d9c:	79d9      	ldrb	r1, [r3, #7]
    2d9e:	0209      	lsls	r1, r1, #8
    2da0:	799b      	ldrb	r3, [r3, #6]
    2da2:	185b      	adds	r3, r3, r1
    2da4:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    2da6:	4b1d      	ldr	r3, [pc, #116]	; (2e1c <_usb_ep0_on_setup+0xc8>)
    2da8:	4798      	blx	r3
    2daa:	2800      	cmp	r0, #0
    2dac:	d016      	beq.n	2ddc <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    2dae:	4b18      	ldr	r3, [pc, #96]	; (2e10 <_usb_ep0_on_setup+0xbc>)
    2db0:	781b      	ldrb	r3, [r3, #0]
    2db2:	2b7f      	cmp	r3, #127	; 0x7f
    2db4:	d815      	bhi.n	2de2 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    2db6:	4b16      	ldr	r3, [pc, #88]	; (2e10 <_usb_ep0_on_setup+0xbc>)
    2db8:	88db      	ldrh	r3, [r3, #6]
    2dba:	2b00      	cmp	r3, #0
    2dbc:	d022      	beq.n	2e04 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    2dbe:	2300      	movs	r3, #0
    2dc0:	4a17      	ldr	r2, [pc, #92]	; (2e20 <_usb_ep0_on_setup+0xcc>)
    2dc2:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    2dc4:	4a17      	ldr	r2, [pc, #92]	; (2e24 <_usb_ep0_on_setup+0xd0>)
    2dc6:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    2dc8:	2201      	movs	r2, #1
    2dca:	4b10      	ldr	r3, [pc, #64]	; (2e0c <_usb_ep0_on_setup+0xb8>)
    2dcc:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2dce:	2340      	movs	r3, #64	; 0x40
    2dd0:	4a11      	ldr	r2, [pc, #68]	; (2e18 <_usb_ep0_on_setup+0xc4>)
    2dd2:	2100      	movs	r1, #0
    2dd4:	4814      	ldr	r0, [pc, #80]	; (2e28 <_usb_ep0_on_setup+0xd4>)
    2dd6:	4c15      	ldr	r4, [pc, #84]	; (2e2c <_usb_ep0_on_setup+0xd8>)
    2dd8:	47a0      	blx	r4
    2dda:	e7ce      	b.n	2d7a <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    2ddc:	4b0d      	ldr	r3, [pc, #52]	; (2e14 <_usb_ep0_on_setup+0xc0>)
    2dde:	4798      	blx	r3
			return;
    2de0:	e7cb      	b.n	2d7a <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    2de2:	2300      	movs	r3, #0
    2de4:	4a0e      	ldr	r2, [pc, #56]	; (2e20 <_usb_ep0_on_setup+0xcc>)
    2de6:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    2de8:	4a0e      	ldr	r2, [pc, #56]	; (2e24 <_usb_ep0_on_setup+0xd0>)
    2dea:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    2dec:	2202      	movs	r2, #2
    2dee:	4b07      	ldr	r3, [pc, #28]	; (2e0c <_usb_ep0_on_setup+0xb8>)
    2df0:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2df2:	2340      	movs	r3, #64	; 0x40
    2df4:	4a08      	ldr	r2, [pc, #32]	; (2e18 <_usb_ep0_on_setup+0xc4>)
    2df6:	2100      	movs	r1, #0
    2df8:	480b      	ldr	r0, [pc, #44]	; (2e28 <_usb_ep0_on_setup+0xd4>)
    2dfa:	4c0c      	ldr	r4, [pc, #48]	; (2e2c <_usb_ep0_on_setup+0xd8>)
    2dfc:	47a0      	blx	r4
			udd_ctrl_in_sent();
    2dfe:	4b0c      	ldr	r3, [pc, #48]	; (2e30 <_usb_ep0_on_setup+0xdc>)
    2e00:	4798      	blx	r3
    2e02:	e7ba      	b.n	2d7a <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    2e04:	4b0b      	ldr	r3, [pc, #44]	; (2e34 <_usb_ep0_on_setup+0xe0>)
    2e06:	4798      	blx	r3
				return;
    2e08:	e7b7      	b.n	2d7a <_usb_ep0_on_setup+0x26>
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	20000236 	.word	0x20000236
    2e10:	20000534 	.word	0x20000534
    2e14:	00002a9d 	.word	0x00002a9d
    2e18:	2000054c 	.word	0x2000054c
    2e1c:	00001891 	.word	0x00001891
    2e20:	20000234 	.word	0x20000234
    2e24:	20000232 	.word	0x20000232
    2e28:	200003cc 	.word	0x200003cc
    2e2c:	000042d5 	.word	0x000042d5
    2e30:	00002cad 	.word	0x00002cad
    2e34:	00002c1d 	.word	0x00002c1d

00002e38 <_usb_on_sof_notify>:
{
    2e38:	b510      	push	{r4, lr}
	udc_sof_notify();
    2e3a:	4b02      	ldr	r3, [pc, #8]	; (2e44 <_usb_on_sof_notify+0xc>)
    2e3c:	4798      	blx	r3
	UDC_SOF_EVENT();
    2e3e:	4b02      	ldr	r3, [pc, #8]	; (2e48 <_usb_on_sof_notify+0x10>)
    2e40:	4798      	blx	r3
}
    2e42:	bd10      	pop	{r4, pc}
    2e44:	0000184d 	.word	0x0000184d
    2e48:	0000388d 	.word	0x0000388d

00002e4c <_usb_on_suspend>:
{
    2e4c:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2e4e:	4c07      	ldr	r4, [pc, #28]	; (2e6c <_usb_on_suspend+0x20>)
    2e50:	2104      	movs	r1, #4
    2e52:	0020      	movs	r0, r4
    2e54:	4b06      	ldr	r3, [pc, #24]	; (2e70 <_usb_on_suspend+0x24>)
    2e56:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2e58:	2102      	movs	r1, #2
    2e5a:	0020      	movs	r0, r4
    2e5c:	4b05      	ldr	r3, [pc, #20]	; (2e74 <_usb_on_suspend+0x28>)
    2e5e:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    2e60:	2001      	movs	r0, #1
    2e62:	4b05      	ldr	r3, [pc, #20]	; (2e78 <_usb_on_suspend+0x2c>)
    2e64:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    2e66:	4b05      	ldr	r3, [pc, #20]	; (2e7c <_usb_on_suspend+0x30>)
    2e68:	4798      	blx	r3
}
    2e6a:	bd10      	pop	{r4, pc}
    2e6c:	200003cc 	.word	0x200003cc
    2e70:	00003ce9 	.word	0x00003ce9
    2e74:	00003cc9 	.word	0x00003cc9
    2e78:	00002805 	.word	0x00002805
    2e7c:	00003875 	.word	0x00003875

00002e80 <udd_ep_abort>:
{
    2e80:	b510      	push	{r4, lr}
    2e82:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    2e84:	0001      	movs	r1, r0
    2e86:	480a      	ldr	r0, [pc, #40]	; (2eb0 <udd_ep_abort+0x30>)
    2e88:	4b0a      	ldr	r3, [pc, #40]	; (2eb4 <udd_ep_abort+0x34>)
    2e8a:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    2e8c:	0020      	movs	r0, r4
    2e8e:	4b0a      	ldr	r3, [pc, #40]	; (2eb8 <udd_ep_abort+0x38>)
    2e90:	4798      	blx	r3
	if (!ptr_job->busy) {
    2e92:	7c83      	ldrb	r3, [r0, #18]
    2e94:	07db      	lsls	r3, r3, #31
    2e96:	d50a      	bpl.n	2eae <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    2e98:	7c83      	ldrb	r3, [r0, #18]
    2e9a:	2201      	movs	r2, #1
    2e9c:	4393      	bics	r3, r2
    2e9e:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2ea0:	6803      	ldr	r3, [r0, #0]
    2ea2:	2b00      	cmp	r3, #0
    2ea4:	d003      	beq.n	2eae <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    2ea6:	68c1      	ldr	r1, [r0, #12]
    2ea8:	0022      	movs	r2, r4
    2eaa:	2001      	movs	r0, #1
    2eac:	4798      	blx	r3
}
    2eae:	bd10      	pop	{r4, pc}
    2eb0:	200003cc 	.word	0x200003cc
    2eb4:	00004175 	.word	0x00004175
    2eb8:	000028c5 	.word	0x000028c5

00002ebc <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    2ebc:	4b02      	ldr	r3, [pc, #8]	; (2ec8 <udd_get_frame_number+0xc>)
    2ebe:	681b      	ldr	r3, [r3, #0]
    2ec0:	8a18      	ldrh	r0, [r3, #16]
    2ec2:	0480      	lsls	r0, r0, #18
    2ec4:	0d40      	lsrs	r0, r0, #21
}
    2ec6:	4770      	bx	lr
    2ec8:	200003cc 	.word	0x200003cc

00002ecc <udd_ep_free>:
{
    2ecc:	b570      	push	{r4, r5, r6, lr}
    2ece:	b082      	sub	sp, #8
    2ed0:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    2ed2:	ad01      	add	r5, sp, #4
    2ed4:	0028      	movs	r0, r5
    2ed6:	4b0d      	ldr	r3, [pc, #52]	; (2f0c <udd_ep_free+0x40>)
    2ed8:	4798      	blx	r3
	udd_ep_abort(ep);
    2eda:	0020      	movs	r0, r4
    2edc:	4b0c      	ldr	r3, [pc, #48]	; (2f10 <udd_ep_free+0x44>)
    2ede:	4798      	blx	r3
	config_ep.ep_address = ep;
    2ee0:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    2ee2:	2300      	movs	r3, #0
    2ee4:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    2ee6:	4e0b      	ldr	r6, [pc, #44]	; (2f14 <udd_ep_free+0x48>)
    2ee8:	0029      	movs	r1, r5
    2eea:	0030      	movs	r0, r6
    2eec:	4b0a      	ldr	r3, [pc, #40]	; (2f18 <udd_ep_free+0x4c>)
    2eee:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2ef0:	210f      	movs	r1, #15
    2ef2:	4021      	ands	r1, r4
    2ef4:	2200      	movs	r2, #0
    2ef6:	0030      	movs	r0, r6
    2ef8:	4b08      	ldr	r3, [pc, #32]	; (2f1c <udd_ep_free+0x50>)
    2efa:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2efc:	2200      	movs	r2, #0
    2efe:	0021      	movs	r1, r4
    2f00:	0030      	movs	r0, r6
    2f02:	4b07      	ldr	r3, [pc, #28]	; (2f20 <udd_ep_free+0x54>)
    2f04:	4798      	blx	r3
}
    2f06:	b002      	add	sp, #8
    2f08:	bd70      	pop	{r4, r5, r6, pc}
    2f0a:	46c0      	nop			; (mov r8, r8)
    2f0c:	00003ef5 	.word	0x00003ef5
    2f10:	00002e81 	.word	0x00002e81
    2f14:	200003cc 	.word	0x200003cc
    2f18:	00003f05 	.word	0x00003f05
    2f1c:	00003d2d 	.word	0x00003d2d
    2f20:	00003e25 	.word	0x00003e25

00002f24 <udd_ep_alloc>:
{
    2f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f26:	b083      	sub	sp, #12
    2f28:	0005      	movs	r5, r0
    2f2a:	000f      	movs	r7, r1
    2f2c:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    2f2e:	ae01      	add	r6, sp, #4
    2f30:	0030      	movs	r0, r6
    2f32:	4b36      	ldr	r3, [pc, #216]	; (300c <udd_ep_alloc+0xe8>)
    2f34:	4798      	blx	r3
	config_ep.ep_address = ep;
    2f36:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    2f38:	2c08      	cmp	r4, #8
    2f3a:	d813      	bhi.n	2f64 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    2f3c:	2200      	movs	r2, #0
    2f3e:	ab01      	add	r3, sp, #4
    2f40:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    2f42:	0028      	movs	r0, r5
    2f44:	4b32      	ldr	r3, [pc, #200]	; (3010 <udd_ep_alloc+0xec>)
    2f46:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    2f48:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    2f4a:	2103      	movs	r1, #3
    2f4c:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    2f4e:	2901      	cmp	r1, #1
    2f50:	d038      	beq.n	2fc4 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    2f52:	2902      	cmp	r1, #2
    2f54:	d043      	beq.n	2fde <udd_ep_alloc+0xba>
		return false;
    2f56:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    2f58:	2903      	cmp	r1, #3
    2f5a:	d13d      	bne.n	2fd8 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    2f5c:	2204      	movs	r2, #4
    2f5e:	ab01      	add	r3, sp, #4
    2f60:	70da      	strb	r2, [r3, #3]
    2f62:	e032      	b.n	2fca <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    2f64:	2c10      	cmp	r4, #16
    2f66:	d803      	bhi.n	2f70 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    2f68:	2201      	movs	r2, #1
    2f6a:	ab01      	add	r3, sp, #4
    2f6c:	705a      	strb	r2, [r3, #1]
    2f6e:	e7e8      	b.n	2f42 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    2f70:	2c20      	cmp	r4, #32
    2f72:	d803      	bhi.n	2f7c <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    2f74:	2202      	movs	r2, #2
    2f76:	ab01      	add	r3, sp, #4
    2f78:	705a      	strb	r2, [r3, #1]
    2f7a:	e7e2      	b.n	2f42 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    2f7c:	2c40      	cmp	r4, #64	; 0x40
    2f7e:	d803      	bhi.n	2f88 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    2f80:	2203      	movs	r2, #3
    2f82:	ab01      	add	r3, sp, #4
    2f84:	705a      	strb	r2, [r3, #1]
    2f86:	e7dc      	b.n	2f42 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    2f88:	2c80      	cmp	r4, #128	; 0x80
    2f8a:	d803      	bhi.n	2f94 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    2f8c:	2204      	movs	r2, #4
    2f8e:	ab01      	add	r3, sp, #4
    2f90:	705a      	strb	r2, [r3, #1]
    2f92:	e7d6      	b.n	2f42 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    2f94:	2380      	movs	r3, #128	; 0x80
    2f96:	005b      	lsls	r3, r3, #1
    2f98:	429c      	cmp	r4, r3
    2f9a:	d803      	bhi.n	2fa4 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    2f9c:	2205      	movs	r2, #5
    2f9e:	ab01      	add	r3, sp, #4
    2fa0:	705a      	strb	r2, [r3, #1]
    2fa2:	e7ce      	b.n	2f42 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    2fa4:	2380      	movs	r3, #128	; 0x80
    2fa6:	009b      	lsls	r3, r3, #2
    2fa8:	429c      	cmp	r4, r3
    2faa:	d803      	bhi.n	2fb4 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    2fac:	2206      	movs	r2, #6
    2fae:	ab01      	add	r3, sp, #4
    2fb0:	705a      	strb	r2, [r3, #1]
    2fb2:	e7c6      	b.n	2f42 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    2fb4:	4a17      	ldr	r2, [pc, #92]	; (3014 <udd_ep_alloc+0xf0>)
		return false;
    2fb6:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    2fb8:	4294      	cmp	r4, r2
    2fba:	d80d      	bhi.n	2fd8 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    2fbc:	2207      	movs	r2, #7
    2fbe:	ab01      	add	r3, sp, #4
    2fc0:	705a      	strb	r2, [r3, #1]
    2fc2:	e7be      	b.n	2f42 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    2fc4:	2202      	movs	r2, #2
    2fc6:	ab01      	add	r3, sp, #4
    2fc8:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2fca:	a901      	add	r1, sp, #4
    2fcc:	4812      	ldr	r0, [pc, #72]	; (3018 <udd_ep_alloc+0xf4>)
    2fce:	4b13      	ldr	r3, [pc, #76]	; (301c <udd_ep_alloc+0xf8>)
    2fd0:	4798      	blx	r3
		return false;
    2fd2:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2fd4:	2800      	cmp	r0, #0
    2fd6:	d006      	beq.n	2fe6 <udd_ep_alloc+0xc2>
}
    2fd8:	0018      	movs	r0, r3
    2fda:	b003      	add	sp, #12
    2fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    2fde:	2203      	movs	r2, #3
    2fe0:	ab01      	add	r3, sp, #4
    2fe2:	70da      	strb	r2, [r3, #3]
    2fe4:	e7f1      	b.n	2fca <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    2fe6:	210f      	movs	r1, #15
    2fe8:	4029      	ands	r1, r5
    2fea:	4c0b      	ldr	r4, [pc, #44]	; (3018 <udd_ep_alloc+0xf4>)
    2fec:	4b0c      	ldr	r3, [pc, #48]	; (3020 <udd_ep_alloc+0xfc>)
    2fee:	2200      	movs	r2, #0
    2ff0:	0020      	movs	r0, r4
    2ff2:	4e0c      	ldr	r6, [pc, #48]	; (3024 <udd_ep_alloc+0x100>)
    2ff4:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2ff6:	2200      	movs	r2, #0
    2ff8:	0029      	movs	r1, r5
    2ffa:	0020      	movs	r0, r4
    2ffc:	4e0a      	ldr	r6, [pc, #40]	; (3028 <udd_ep_alloc+0x104>)
    2ffe:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3000:	2201      	movs	r2, #1
    3002:	0029      	movs	r1, r5
    3004:	0020      	movs	r0, r4
    3006:	47b0      	blx	r6
	return true;
    3008:	2301      	movs	r3, #1
    300a:	e7e5      	b.n	2fd8 <udd_ep_alloc+0xb4>
    300c:	00003ef5 	.word	0x00003ef5
    3010:	000028c5 	.word	0x000028c5
    3014:	000003ff 	.word	0x000003ff
    3018:	200003cc 	.word	0x200003cc
    301c:	00003f05 	.word	0x00003f05
    3020:	000028e9 	.word	0x000028e9
    3024:	00003d05 	.word	0x00003d05
    3028:	00003d55 	.word	0x00003d55

0000302c <udd_ep_is_halted>:
{
    302c:	b510      	push	{r4, lr}
    302e:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    3030:	4801      	ldr	r0, [pc, #4]	; (3038 <udd_ep_is_halted+0xc>)
    3032:	4b02      	ldr	r3, [pc, #8]	; (303c <udd_ep_is_halted+0x10>)
    3034:	4798      	blx	r3
}
    3036:	bd10      	pop	{r4, pc}
    3038:	200003cc 	.word	0x200003cc
    303c:	000041ab 	.word	0x000041ab

00003040 <udd_ep_set_halt>:
{
    3040:	b510      	push	{r4, lr}
    3042:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3044:	230f      	movs	r3, #15
    3046:	4003      	ands	r3, r0
		return false;
    3048:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    304a:	2b02      	cmp	r3, #2
    304c:	d900      	bls.n	3050 <udd_ep_set_halt+0x10>
}
    304e:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    3050:	0021      	movs	r1, r4
    3052:	4804      	ldr	r0, [pc, #16]	; (3064 <udd_ep_set_halt+0x24>)
    3054:	4b04      	ldr	r3, [pc, #16]	; (3068 <udd_ep_set_halt+0x28>)
    3056:	4798      	blx	r3
	udd_ep_abort(ep);
    3058:	0020      	movs	r0, r4
    305a:	4b04      	ldr	r3, [pc, #16]	; (306c <udd_ep_set_halt+0x2c>)
    305c:	4798      	blx	r3
	return true;
    305e:	2001      	movs	r0, #1
    3060:	e7f5      	b.n	304e <udd_ep_set_halt+0xe>
    3062:	46c0      	nop			; (mov r8, r8)
    3064:	200003cc 	.word	0x200003cc
    3068:	000041d5 	.word	0x000041d5
    306c:	00002e81 	.word	0x00002e81

00003070 <_usb_ep0_on_tansfer_ok>:
{
    3070:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    3072:	4b34      	ldr	r3, [pc, #208]	; (3144 <_usb_ep0_on_tansfer_ok+0xd4>)
    3074:	781b      	ldrb	r3, [r3, #0]
    3076:	2b01      	cmp	r3, #1
    3078:	d00a      	beq.n	3090 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    307a:	2b02      	cmp	r3, #2
    307c:	d05f      	beq.n	313e <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    307e:	4b32      	ldr	r3, [pc, #200]	; (3148 <_usb_ep0_on_tansfer_ok+0xd8>)
    3080:	691b      	ldr	r3, [r3, #16]
    3082:	2b00      	cmp	r3, #0
    3084:	d000      	beq.n	3088 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    3086:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    3088:	2200      	movs	r2, #0
    308a:	4b2e      	ldr	r3, [pc, #184]	; (3144 <_usb_ep0_on_tansfer_ok+0xd4>)
    308c:	701a      	strb	r2, [r3, #0]
}
    308e:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    3090:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    3092:	4b2d      	ldr	r3, [pc, #180]	; (3148 <_usb_ep0_on_tansfer_ok+0xd8>)
    3094:	899b      	ldrh	r3, [r3, #12]
    3096:	4a2d      	ldr	r2, [pc, #180]	; (314c <_usb_ep0_on_tansfer_ok+0xdc>)
    3098:	8814      	ldrh	r4, [r2, #0]
    309a:	1962      	adds	r2, r4, r5
    309c:	4293      	cmp	r3, r2
    309e:	da01      	bge.n	30a4 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    30a0:	1b1d      	subs	r5, r3, r4
    30a2:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    30a4:	4b28      	ldr	r3, [pc, #160]	; (3148 <_usb_ep0_on_tansfer_ok+0xd8>)
    30a6:	6898      	ldr	r0, [r3, #8]
    30a8:	1900      	adds	r0, r0, r4
    30aa:	002a      	movs	r2, r5
    30ac:	4928      	ldr	r1, [pc, #160]	; (3150 <_usb_ep0_on_tansfer_ok+0xe0>)
    30ae:	4b29      	ldr	r3, [pc, #164]	; (3154 <_usb_ep0_on_tansfer_ok+0xe4>)
    30b0:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    30b2:	1964      	adds	r4, r4, r5
    30b4:	b2a4      	uxth	r4, r4
    30b6:	4b25      	ldr	r3, [pc, #148]	; (314c <_usb_ep0_on_tansfer_ok+0xdc>)
    30b8:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    30ba:	2d40      	cmp	r5, #64	; 0x40
    30bc:	d00a      	beq.n	30d4 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    30be:	4b22      	ldr	r3, [pc, #136]	; (3148 <_usb_ep0_on_tansfer_ok+0xd8>)
    30c0:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    30c2:	695b      	ldr	r3, [r3, #20]
    30c4:	2b00      	cmp	r3, #0
    30c6:	d002      	beq.n	30ce <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    30c8:	4798      	blx	r3
    30ca:	2800      	cmp	r0, #0
    30cc:	d014      	beq.n	30f8 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    30ce:	4b22      	ldr	r3, [pc, #136]	; (3158 <_usb_ep0_on_tansfer_ok+0xe8>)
    30d0:	4798      	blx	r3
    30d2:	e7dc      	b.n	308e <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    30d4:	4b1c      	ldr	r3, [pc, #112]	; (3148 <_usb_ep0_on_tansfer_ok+0xd8>)
    30d6:	88da      	ldrh	r2, [r3, #6]
    30d8:	4b20      	ldr	r3, [pc, #128]	; (315c <_usb_ep0_on_tansfer_ok+0xec>)
    30da:	881b      	ldrh	r3, [r3, #0]
    30dc:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    30de:	429a      	cmp	r2, r3
    30e0:	dded      	ble.n	30be <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    30e2:	4b19      	ldr	r3, [pc, #100]	; (3148 <_usb_ep0_on_tansfer_ok+0xd8>)
    30e4:	899b      	ldrh	r3, [r3, #12]
    30e6:	42a3      	cmp	r3, r4
    30e8:	d00c      	beq.n	3104 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    30ea:	2340      	movs	r3, #64	; 0x40
    30ec:	4a18      	ldr	r2, [pc, #96]	; (3150 <_usb_ep0_on_tansfer_ok+0xe0>)
    30ee:	2100      	movs	r1, #0
    30f0:	481b      	ldr	r0, [pc, #108]	; (3160 <_usb_ep0_on_tansfer_ok+0xf0>)
    30f2:	4c1c      	ldr	r4, [pc, #112]	; (3164 <_usb_ep0_on_tansfer_ok+0xf4>)
    30f4:	47a0      	blx	r4
    30f6:	e7ca      	b.n	308e <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    30f8:	2205      	movs	r2, #5
    30fa:	4b12      	ldr	r3, [pc, #72]	; (3144 <_usb_ep0_on_tansfer_ok+0xd4>)
    30fc:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    30fe:	4b1a      	ldr	r3, [pc, #104]	; (3168 <_usb_ep0_on_tansfer_ok+0xf8>)
    3100:	4798      	blx	r3
    3102:	e7c4      	b.n	308e <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    3104:	4b10      	ldr	r3, [pc, #64]	; (3148 <_usb_ep0_on_tansfer_ok+0xd8>)
    3106:	695b      	ldr	r3, [r3, #20]
    3108:	2b00      	cmp	r3, #0
    310a:	d00b      	beq.n	3124 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    310c:	4798      	blx	r3
    310e:	2800      	cmp	r0, #0
    3110:	d00f      	beq.n	3132 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3112:	4912      	ldr	r1, [pc, #72]	; (315c <_usb_ep0_on_tansfer_ok+0xec>)
    3114:	4a0d      	ldr	r2, [pc, #52]	; (314c <_usb_ep0_on_tansfer_ok+0xdc>)
    3116:	880b      	ldrh	r3, [r1, #0]
    3118:	8810      	ldrh	r0, [r2, #0]
    311a:	181b      	adds	r3, r3, r0
    311c:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    311e:	2300      	movs	r3, #0
    3120:	8013      	strh	r3, [r2, #0]
    3122:	e7e2      	b.n	30ea <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3124:	2205      	movs	r2, #5
    3126:	4b07      	ldr	r3, [pc, #28]	; (3144 <_usb_ep0_on_tansfer_ok+0xd4>)
    3128:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    312a:	2000      	movs	r0, #0
    312c:	4b0e      	ldr	r3, [pc, #56]	; (3168 <_usb_ep0_on_tansfer_ok+0xf8>)
    312e:	4798      	blx	r3
    3130:	e7ad      	b.n	308e <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3132:	2205      	movs	r2, #5
    3134:	4b03      	ldr	r3, [pc, #12]	; (3144 <_usb_ep0_on_tansfer_ok+0xd4>)
    3136:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    3138:	4b0b      	ldr	r3, [pc, #44]	; (3168 <_usb_ep0_on_tansfer_ok+0xf8>)
    313a:	4798      	blx	r3
    313c:	e7a7      	b.n	308e <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    313e:	4b0b      	ldr	r3, [pc, #44]	; (316c <_usb_ep0_on_tansfer_ok+0xfc>)
    3140:	4798      	blx	r3
    3142:	e7a4      	b.n	308e <_usb_ep0_on_tansfer_ok+0x1e>
    3144:	20000236 	.word	0x20000236
    3148:	20000534 	.word	0x20000534
    314c:	20000232 	.word	0x20000232
    3150:	2000054c 	.word	0x2000054c
    3154:	00006cb1 	.word	0x00006cb1
    3158:	00002c1d 	.word	0x00002c1d
    315c:	20000234 	.word	0x20000234
    3160:	200003cc 	.word	0x200003cc
    3164:	000042d5 	.word	0x000042d5
    3168:	00003041 	.word	0x00003041
    316c:	00002cad 	.word	0x00002cad

00003170 <udd_ep_clear_halt>:
{
    3170:	b570      	push	{r4, r5, r6, lr}
    3172:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3174:	230f      	movs	r3, #15
    3176:	4003      	ands	r3, r0
		return false;
    3178:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    317a:	2b02      	cmp	r3, #2
    317c:	d900      	bls.n	3180 <udd_ep_clear_halt+0x10>
}
    317e:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    3180:	0020      	movs	r0, r4
    3182:	4b09      	ldr	r3, [pc, #36]	; (31a8 <udd_ep_clear_halt+0x38>)
    3184:	4798      	blx	r3
    3186:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    3188:	0021      	movs	r1, r4
    318a:	4808      	ldr	r0, [pc, #32]	; (31ac <udd_ep_clear_halt+0x3c>)
    318c:	4b08      	ldr	r3, [pc, #32]	; (31b0 <udd_ep_clear_halt+0x40>)
    318e:	4798      	blx	r3
	if (ptr_job->busy == true) {
    3190:	7cab      	ldrb	r3, [r5, #18]
	return true;
    3192:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    3194:	07db      	lsls	r3, r3, #31
    3196:	d5f2      	bpl.n	317e <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    3198:	7cab      	ldrb	r3, [r5, #18]
    319a:	2201      	movs	r2, #1
    319c:	4393      	bics	r3, r2
    319e:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    31a0:	682b      	ldr	r3, [r5, #0]
    31a2:	4798      	blx	r3
	return true;
    31a4:	2001      	movs	r0, #1
    31a6:	e7ea      	b.n	317e <udd_ep_clear_halt+0xe>
    31a8:	000028c5 	.word	0x000028c5
    31ac:	200003cc 	.word	0x200003cc
    31b0:	000041fb 	.word	0x000041fb

000031b4 <udd_ep_wait_stall_clear>:
{
    31b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31b6:	0004      	movs	r4, r0
    31b8:	000d      	movs	r5, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    31ba:	230f      	movs	r3, #15
    31bc:	4003      	ands	r3, r0
		return false;
    31be:	2600      	movs	r6, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    31c0:	2b02      	cmp	r3, #2
    31c2:	d805      	bhi.n	31d0 <udd_ep_wait_stall_clear+0x1c>
	ptr_job = udd_ep_get_job(ep);
    31c4:	4b0d      	ldr	r3, [pc, #52]	; (31fc <udd_ep_wait_stall_clear+0x48>)
    31c6:	4798      	blx	r3
    31c8:	0007      	movs	r7, r0
	if (ptr_job->busy == true) {
    31ca:	7c83      	ldrb	r3, [r0, #18]
    31cc:	07db      	lsls	r3, r3, #31
    31ce:	d501      	bpl.n	31d4 <udd_ep_wait_stall_clear+0x20>
}
    31d0:	0030      	movs	r0, r6
    31d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    31d4:	0021      	movs	r1, r4
    31d6:	480a      	ldr	r0, [pc, #40]	; (3200 <udd_ep_wait_stall_clear+0x4c>)
    31d8:	4b0a      	ldr	r3, [pc, #40]	; (3204 <udd_ep_wait_stall_clear+0x50>)
    31da:	4798      	blx	r3
    31dc:	1e06      	subs	r6, r0, #0
    31de:	d005      	beq.n	31ec <udd_ep_wait_stall_clear+0x38>
		ptr_job->busy = true;
    31e0:	7cbb      	ldrb	r3, [r7, #18]
    31e2:	2201      	movs	r2, #1
    31e4:	4313      	orrs	r3, r2
    31e6:	74bb      	strb	r3, [r7, #18]
		ptr_job->call_nohalt = callback;
    31e8:	603d      	str	r5, [r7, #0]
		return true;
    31ea:	e7f1      	b.n	31d0 <udd_ep_wait_stall_clear+0x1c>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    31ec:	0021      	movs	r1, r4
    31ee:	4804      	ldr	r0, [pc, #16]	; (3200 <udd_ep_wait_stall_clear+0x4c>)
    31f0:	4b05      	ldr	r3, [pc, #20]	; (3208 <udd_ep_wait_stall_clear+0x54>)
    31f2:	4798      	blx	r3
    31f4:	1e06      	subs	r6, r0, #0
    31f6:	d0eb      	beq.n	31d0 <udd_ep_wait_stall_clear+0x1c>
		callback(); /* Endpoint not halted then call directly callback */
    31f8:	47a8      	blx	r5
		return true;
    31fa:	e7e9      	b.n	31d0 <udd_ep_wait_stall_clear+0x1c>
    31fc:	000028c5 	.word	0x000028c5
    3200:	200003cc 	.word	0x200003cc
    3204:	000041ab 	.word	0x000041ab
    3208:	00004149 	.word	0x00004149

0000320c <udd_ep_run>:
{
    320c:	b5f0      	push	{r4, r5, r6, r7, lr}
    320e:	b087      	sub	sp, #28
    3210:	0005      	movs	r5, r0
    3212:	9103      	str	r1, [sp, #12]
    3214:	9202      	str	r2, [sp, #8]
    3216:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    3218:	260f      	movs	r6, #15
    321a:	4006      	ands	r6, r0
		return false;
    321c:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    321e:	2e02      	cmp	r6, #2
    3220:	d902      	bls.n	3228 <udd_ep_run+0x1c>
}
    3222:	0020      	movs	r0, r4
    3224:	b007      	add	sp, #28
    3226:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3228:	4b64      	ldr	r3, [pc, #400]	; (33bc <udd_ep_run+0x1b0>)
    322a:	4798      	blx	r3
    322c:	1e04      	subs	r4, r0, #0
    322e:	d000      	beq.n	3232 <udd_ep_run+0x26>
    3230:	e0bd      	b.n	33ae <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    3232:	0028      	movs	r0, r5
    3234:	4b62      	ldr	r3, [pc, #392]	; (33c0 <udd_ep_run+0x1b4>)
    3236:	4798      	blx	r3
    3238:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    323a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    323e:	425a      	negs	r2, r3
    3240:	4153      	adcs	r3, r2
    3242:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    3244:	b672      	cpsid	i
    3246:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    324a:	2200      	movs	r2, #0
    324c:	4b5d      	ldr	r3, [pc, #372]	; (33c4 <udd_ep_run+0x1b8>)
    324e:	701a      	strb	r2, [r3, #0]
	return flags;
    3250:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    3252:	7c83      	ldrb	r3, [r0, #18]
    3254:	07db      	lsls	r3, r3, #31
    3256:	d508      	bpl.n	326a <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    3258:	2a00      	cmp	r2, #0
    325a:	d0e2      	beq.n	3222 <udd_ep_run+0x16>
		cpu_irq_enable();
    325c:	2201      	movs	r2, #1
    325e:	4b59      	ldr	r3, [pc, #356]	; (33c4 <udd_ep_run+0x1b8>)
    3260:	701a      	strb	r2, [r3, #0]
    3262:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3266:	b662      	cpsie	i
    3268:	e7db      	b.n	3222 <udd_ep_run+0x16>
	ptr_job->busy = true;
    326a:	7c83      	ldrb	r3, [r0, #18]
    326c:	2101      	movs	r1, #1
    326e:	430b      	orrs	r3, r1
    3270:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    3272:	2a00      	cmp	r2, #0
    3274:	d005      	beq.n	3282 <udd_ep_run+0x76>
		cpu_irq_enable();
    3276:	2201      	movs	r2, #1
    3278:	4b52      	ldr	r3, [pc, #328]	; (33c4 <udd_ep_run+0x1b8>)
    327a:	701a      	strb	r2, [r3, #0]
    327c:	f3bf 8f5f 	dmb	sy
    3280:	b662      	cpsie	i
	ptr_job->buf = buf;
    3282:	9b02      	ldr	r3, [sp, #8]
    3284:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    3286:	9b01      	ldr	r3, [sp, #4]
    3288:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    328a:	2300      	movs	r3, #0
    328c:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    328e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3290:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    3292:	2301      	movs	r3, #1
    3294:	9a03      	ldr	r2, [sp, #12]
    3296:	4013      	ands	r3, r2
    3298:	005a      	lsls	r2, r3, #1
    329a:	7cbb      	ldrb	r3, [r7, #18]
    329c:	2102      	movs	r1, #2
    329e:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    32a0:	4313      	orrs	r3, r2
    32a2:	2204      	movs	r2, #4
    32a4:	4393      	bics	r3, r2
    32a6:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    32a8:	b26b      	sxtb	r3, r5
    32aa:	2b00      	cmp	r3, #0
    32ac:	db20      	blt.n	32f0 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    32ae:	9b01      	ldr	r3, [sp, #4]
    32b0:	2b00      	cmp	r3, #0
    32b2:	d06f      	beq.n	3394 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    32b4:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    32b6:	4b44      	ldr	r3, [pc, #272]	; (33c8 <udd_ep_run+0x1bc>)
    32b8:	429c      	cmp	r4, r3
    32ba:	d95a      	bls.n	3372 <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    32bc:	8a39      	ldrh	r1, [r7, #16]
    32be:	001c      	movs	r4, r3
    32c0:	0018      	movs	r0, r3
    32c2:	4b42      	ldr	r3, [pc, #264]	; (33cc <udd_ep_run+0x1c0>)
    32c4:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    32c6:	1a63      	subs	r3, r4, r1
    32c8:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    32ca:	8a3b      	ldrh	r3, [r7, #16]
    32cc:	429a      	cmp	r2, r3
    32ce:	d257      	bcs.n	3380 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    32d0:	7cba      	ldrb	r2, [r7, #18]
    32d2:	2104      	movs	r1, #4
    32d4:	430a      	orrs	r2, r1
    32d6:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    32d8:	1e72      	subs	r2, r6, #1
    32da:	0192      	lsls	r2, r2, #6
    32dc:	493c      	ldr	r1, [pc, #240]	; (33d0 <udd_ep_run+0x1c4>)
    32de:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    32e0:	0031      	movs	r1, r6
    32e2:	483c      	ldr	r0, [pc, #240]	; (33d4 <udd_ep_run+0x1c8>)
    32e4:	4c3c      	ldr	r4, [pc, #240]	; (33d8 <udd_ep_run+0x1cc>)
    32e6:	47a0      	blx	r4
				return (STATUS_OK ==
    32e8:	4244      	negs	r4, r0
    32ea:	4144      	adcs	r4, r0
    32ec:	b2e4      	uxtb	r4, r4
    32ee:	e798      	b.n	3222 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    32f0:	9b01      	ldr	r3, [sp, #4]
    32f2:	2b00      	cmp	r3, #0
    32f4:	d027      	beq.n	3346 <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    32f6:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    32f8:	4b33      	ldr	r3, [pc, #204]	; (33c8 <udd_ep_run+0x1bc>)
    32fa:	429d      	cmp	r5, r3
    32fc:	d906      	bls.n	330c <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    32fe:	8a39      	ldrh	r1, [r7, #16]
    3300:	001d      	movs	r5, r3
    3302:	0018      	movs	r0, r3
    3304:	4b31      	ldr	r3, [pc, #196]	; (33cc <udd_ep_run+0x1c0>)
    3306:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3308:	1a6b      	subs	r3, r5, r1
    330a:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    330c:	7cbb      	ldrb	r3, [r7, #18]
    330e:	079b      	lsls	r3, r3, #30
    3310:	d507      	bpl.n	3322 <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    3312:	8a39      	ldrh	r1, [r7, #16]
    3314:	0028      	movs	r0, r5
    3316:	4b31      	ldr	r3, [pc, #196]	; (33dc <udd_ep_run+0x1d0>)
    3318:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    331a:	b289      	uxth	r1, r1
    331c:	424c      	negs	r4, r1
    331e:	414c      	adcs	r4, r1
    3320:	b2e4      	uxtb	r4, r4
    3322:	2001      	movs	r0, #1
    3324:	4020      	ands	r0, r4
    3326:	0040      	lsls	r0, r0, #1
    3328:	7cbc      	ldrb	r4, [r7, #18]
    332a:	2302      	movs	r3, #2
    332c:	439c      	bics	r4, r3
    332e:	4304      	orrs	r4, r0
    3330:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    3332:	002b      	movs	r3, r5
    3334:	9a02      	ldr	r2, [sp, #8]
    3336:	0031      	movs	r1, r6
    3338:	4826      	ldr	r0, [pc, #152]	; (33d4 <udd_ep_run+0x1c8>)
    333a:	4c29      	ldr	r4, [pc, #164]	; (33e0 <udd_ep_run+0x1d4>)
    333c:	47a0      	blx	r4
		return (STATUS_OK ==
    333e:	4244      	negs	r4, r0
    3340:	4144      	adcs	r4, r0
    3342:	b2e4      	uxtb	r4, r4
    3344:	e76d      	b.n	3222 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    3346:	7cbb      	ldrb	r3, [r7, #18]
    3348:	079b      	lsls	r3, r3, #30
    334a:	d505      	bpl.n	3358 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    334c:	7cbb      	ldrb	r3, [r7, #18]
    334e:	2202      	movs	r2, #2
    3350:	4393      	bics	r3, r2
    3352:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    3354:	2500      	movs	r5, #0
    3356:	e7ec      	b.n	3332 <udd_ep_run+0x126>
			ptr_job->busy = false;
    3358:	7cbb      	ldrb	r3, [r7, #18]
    335a:	2201      	movs	r2, #1
    335c:	4393      	bics	r3, r2
    335e:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3362:	2b00      	cmp	r3, #0
    3364:	d025      	beq.n	33b2 <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3366:	002a      	movs	r2, r5
    3368:	2100      	movs	r1, #0
    336a:	2000      	movs	r0, #0
    336c:	4798      	blx	r3
			return true;
    336e:	2401      	movs	r4, #1
    3370:	e757      	b.n	3222 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    3372:	8a39      	ldrh	r1, [r7, #16]
    3374:	0020      	movs	r0, r4
    3376:	4b19      	ldr	r3, [pc, #100]	; (33dc <udd_ep_run+0x1d0>)
    3378:	4798      	blx	r3
    337a:	1a63      	subs	r3, r4, r1
    337c:	b29a      	uxth	r2, r3
    337e:	e7a4      	b.n	32ca <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3380:	0013      	movs	r3, r2
    3382:	9a02      	ldr	r2, [sp, #8]
    3384:	0031      	movs	r1, r6
    3386:	4813      	ldr	r0, [pc, #76]	; (33d4 <udd_ep_run+0x1c8>)
    3388:	4c13      	ldr	r4, [pc, #76]	; (33d8 <udd_ep_run+0x1cc>)
    338a:	47a0      	blx	r4
				return (STATUS_OK ==
    338c:	4244      	negs	r4, r0
    338e:	4144      	adcs	r4, r0
    3390:	b2e4      	uxtb	r4, r4
    3392:	e746      	b.n	3222 <udd_ep_run+0x16>
			ptr_job->busy = false;
    3394:	7cbb      	ldrb	r3, [r7, #18]
    3396:	2201      	movs	r2, #1
    3398:	4393      	bics	r3, r2
    339a:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    339c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    339e:	2b00      	cmp	r3, #0
    33a0:	d009      	beq.n	33b6 <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    33a2:	002a      	movs	r2, r5
    33a4:	2100      	movs	r1, #0
    33a6:	2000      	movs	r0, #0
    33a8:	4798      	blx	r3
			return true;
    33aa:	2401      	movs	r4, #1
    33ac:	e739      	b.n	3222 <udd_ep_run+0x16>
		return false;
    33ae:	2400      	movs	r4, #0
    33b0:	e737      	b.n	3222 <udd_ep_run+0x16>
			return true;
    33b2:	2401      	movs	r4, #1
    33b4:	e735      	b.n	3222 <udd_ep_run+0x16>
			return true;
    33b6:	2401      	movs	r4, #1
    33b8:	e733      	b.n	3222 <udd_ep_run+0x16>
    33ba:	46c0      	nop			; (mov r8, r8)
    33bc:	0000302d 	.word	0x0000302d
    33c0:	000028c5 	.word	0x000028c5
    33c4:	200000f9 	.word	0x200000f9
    33c8:	00001fff 	.word	0x00001fff
    33cc:	000069b5 	.word	0x000069b5
    33d0:	2000034c 	.word	0x2000034c
    33d4:	200003cc 	.word	0x200003cc
    33d8:	000042d5 	.word	0x000042d5
    33dc:	000067e1 	.word	0x000067e1
    33e0:	00004281 	.word	0x00004281

000033e4 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    33e4:	4b02      	ldr	r3, [pc, #8]	; (33f0 <udd_set_address+0xc>)
    33e6:	681b      	ldr	r3, [r3, #0]
    33e8:	2280      	movs	r2, #128	; 0x80
    33ea:	4310      	orrs	r0, r2
    33ec:	7298      	strb	r0, [r3, #10]
}
    33ee:	4770      	bx	lr
    33f0:	200003cc 	.word	0x200003cc

000033f4 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    33f4:	4b02      	ldr	r3, [pc, #8]	; (3400 <udd_getaddress+0xc>)
    33f6:	681b      	ldr	r3, [r3, #0]
    33f8:	7a98      	ldrb	r0, [r3, #10]
    33fa:	0640      	lsls	r0, r0, #25
    33fc:	0e40      	lsrs	r0, r0, #25
}
    33fe:	4770      	bx	lr
    3400:	200003cc 	.word	0x200003cc

00003404 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    3404:	4b01      	ldr	r3, [pc, #4]	; (340c <udd_set_setup_payload+0x8>)
    3406:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    3408:	8199      	strh	r1, [r3, #12]
}
    340a:	4770      	bx	lr
    340c:	20000534 	.word	0x20000534

00003410 <udd_detach>:

void udd_detach(void)
{
    3410:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    3412:	4b05      	ldr	r3, [pc, #20]	; (3428 <udd_detach+0x18>)
    3414:	681a      	ldr	r2, [r3, #0]
    3416:	8913      	ldrh	r3, [r2, #8]
    3418:	2101      	movs	r1, #1
    341a:	430b      	orrs	r3, r1
    341c:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    341e:	2001      	movs	r0, #1
    3420:	4b02      	ldr	r3, [pc, #8]	; (342c <udd_detach+0x1c>)
    3422:	4798      	blx	r3
}
    3424:	bd10      	pop	{r4, pc}
    3426:	46c0      	nop			; (mov r8, r8)
    3428:	200003cc 	.word	0x200003cc
    342c:	00002805 	.word	0x00002805

00003430 <udd_attach>:

void udd_attach(void)
{
    3430:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    3432:	2003      	movs	r0, #3
    3434:	4b16      	ldr	r3, [pc, #88]	; (3490 <udd_attach+0x60>)
    3436:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3438:	4c16      	ldr	r4, [pc, #88]	; (3494 <udd_attach+0x64>)
    343a:	6822      	ldr	r2, [r4, #0]
    343c:	8913      	ldrh	r3, [r2, #8]
    343e:	2101      	movs	r1, #1
    3440:	438b      	bics	r3, r1
    3442:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    3444:	4a14      	ldr	r2, [pc, #80]	; (3498 <udd_attach+0x68>)
    3446:	3103      	adds	r1, #3
    3448:	0020      	movs	r0, r4
    344a:	4e14      	ldr	r6, [pc, #80]	; (349c <udd_attach+0x6c>)
    344c:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    344e:	4a14      	ldr	r2, [pc, #80]	; (34a0 <udd_attach+0x70>)
    3450:	2100      	movs	r1, #0
    3452:	0020      	movs	r0, r4
    3454:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    3456:	4a13      	ldr	r2, [pc, #76]	; (34a4 <udd_attach+0x74>)
    3458:	2101      	movs	r1, #1
    345a:	0020      	movs	r0, r4
    345c:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    345e:	4a12      	ldr	r2, [pc, #72]	; (34a8 <udd_attach+0x78>)
    3460:	2102      	movs	r1, #2
    3462:	0020      	movs	r0, r4
    3464:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3466:	2104      	movs	r1, #4
    3468:	0020      	movs	r0, r4
    346a:	4d10      	ldr	r5, [pc, #64]	; (34ac <udd_attach+0x7c>)
    346c:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    346e:	2100      	movs	r1, #0
    3470:	0020      	movs	r0, r4
    3472:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    3474:	2101      	movs	r1, #1
    3476:	0020      	movs	r0, r4
    3478:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    347a:	2102      	movs	r1, #2
    347c:	0020      	movs	r0, r4
    347e:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3480:	4a0b      	ldr	r2, [pc, #44]	; (34b0 <udd_attach+0x80>)
    3482:	2106      	movs	r1, #6
    3484:	0020      	movs	r0, r4
    3486:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3488:	2106      	movs	r1, #6
    348a:	0020      	movs	r0, r4
    348c:	47a8      	blx	r5
#endif
}
    348e:	bd70      	pop	{r4, r5, r6, pc}
    3490:	00002805 	.word	0x00002805
    3494:	200003cc 	.word	0x200003cc
    3498:	00002e4d 	.word	0x00002e4d
    349c:	00003ca5 	.word	0x00003ca5
    34a0:	00002e39 	.word	0x00002e39
    34a4:	00002b6d 	.word	0x00002b6d
    34a8:	00002afd 	.word	0x00002afd
    34ac:	00003cc9 	.word	0x00003cc9
    34b0:	00002ac9 	.word	0x00002ac9

000034b4 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    34b4:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    34b6:	2100      	movs	r1, #0
    34b8:	200e      	movs	r0, #14
    34ba:	4b08      	ldr	r3, [pc, #32]	; (34dc <_uhd_vbus_handler+0x28>)
    34bc:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    34be:	4b08      	ldr	r3, [pc, #32]	; (34e0 <_uhd_vbus_handler+0x2c>)
    34c0:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    34c2:	045b      	lsls	r3, r3, #17
    34c4:	d406      	bmi.n	34d4 <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    34c6:	4b07      	ldr	r3, [pc, #28]	; (34e4 <_uhd_vbus_handler+0x30>)
    34c8:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    34ca:	2100      	movs	r1, #0
    34cc:	200e      	movs	r0, #14
    34ce:	4b06      	ldr	r3, [pc, #24]	; (34e8 <_uhd_vbus_handler+0x34>)
    34d0:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    34d2:	bd10      	pop	{r4, pc}
		udd_attach();
    34d4:	4b05      	ldr	r3, [pc, #20]	; (34ec <_uhd_vbus_handler+0x38>)
    34d6:	4798      	blx	r3
    34d8:	e7f7      	b.n	34ca <_uhd_vbus_handler+0x16>
    34da:	46c0      	nop			; (mov r8, r8)
    34dc:	00004b8d 	.word	0x00004b8d
    34e0:	41004400 	.word	0x41004400
    34e4:	00003411 	.word	0x00003411
    34e8:	00004b6d 	.word	0x00004b6d
    34ec:	00003431 	.word	0x00003431

000034f0 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    34f0:	b570      	push	{r4, r5, r6, lr}
    34f2:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    34f4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    34f8:	425a      	negs	r2, r3
    34fa:	4153      	adcs	r3, r2
    34fc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    34fe:	b672      	cpsid	i
    3500:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3504:	2600      	movs	r6, #0
    3506:	4b29      	ldr	r3, [pc, #164]	; (35ac <udd_enable+0xbc>)
    3508:	701e      	strb	r6, [r3, #0]
	return flags;
    350a:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    350c:	ac05      	add	r4, sp, #20
    350e:	0020      	movs	r0, r4
    3510:	4b27      	ldr	r3, [pc, #156]	; (35b0 <udd_enable+0xc0>)
    3512:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    3514:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    3516:	4e27      	ldr	r6, [pc, #156]	; (35b4 <udd_enable+0xc4>)
    3518:	0022      	movs	r2, r4
    351a:	4927      	ldr	r1, [pc, #156]	; (35b8 <udd_enable+0xc8>)
    351c:	0030      	movs	r0, r6
    351e:	4b27      	ldr	r3, [pc, #156]	; (35bc <udd_enable+0xcc>)
    3520:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    3522:	0030      	movs	r0, r6
    3524:	4b26      	ldr	r3, [pc, #152]	; (35c0 <udd_enable+0xd0>)
    3526:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3528:	4b26      	ldr	r3, [pc, #152]	; (35c4 <udd_enable+0xd4>)
    352a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    352c:	069b      	lsls	r3, r3, #26
    352e:	d434      	bmi.n	359a <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3530:	4924      	ldr	r1, [pc, #144]	; (35c4 <udd_enable+0xd4>)
    3532:	22d0      	movs	r2, #208	; 0xd0
    3534:	68cb      	ldr	r3, [r1, #12]
    3536:	4013      	ands	r3, r2
    3538:	2bd0      	cmp	r3, #208	; 0xd0
    353a:	d1fb      	bne.n	3534 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    353c:	2001      	movs	r0, #1
    353e:	4b22      	ldr	r3, [pc, #136]	; (35c8 <udd_enable+0xd8>)
    3540:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    3542:	ac02      	add	r4, sp, #8
    3544:	0020      	movs	r0, r4
    3546:	4b21      	ldr	r3, [pc, #132]	; (35cc <udd_enable+0xdc>)
    3548:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    354a:	230e      	movs	r3, #14
    354c:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    354e:	2300      	movs	r3, #0
    3550:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    3552:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    3554:	3303      	adds	r3, #3
    3556:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    3558:	3b02      	subs	r3, #2
    355a:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    355c:	2100      	movs	r1, #0
    355e:	200e      	movs	r0, #14
    3560:	4b1b      	ldr	r3, [pc, #108]	; (35d0 <udd_enable+0xe0>)
    3562:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    3564:	0021      	movs	r1, r4
    3566:	200e      	movs	r0, #14
    3568:	4b1a      	ldr	r3, [pc, #104]	; (35d4 <udd_enable+0xe4>)
    356a:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    356c:	2200      	movs	r2, #0
    356e:	210e      	movs	r1, #14
    3570:	4819      	ldr	r0, [pc, #100]	; (35d8 <udd_enable+0xe8>)
    3572:	4b1a      	ldr	r3, [pc, #104]	; (35dc <udd_enable+0xec>)
    3574:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3576:	2100      	movs	r1, #0
    3578:	200e      	movs	r0, #14
    357a:	4b19      	ldr	r3, [pc, #100]	; (35e0 <udd_enable+0xf0>)
    357c:	4798      	blx	r3
    357e:	4b19      	ldr	r3, [pc, #100]	; (35e4 <udd_enable+0xf4>)
    3580:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    3582:	045b      	lsls	r3, r3, #17
    3584:	d40f      	bmi.n	35a6 <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    3586:	2d00      	cmp	r5, #0
    3588:	d005      	beq.n	3596 <udd_enable+0xa6>
		cpu_irq_enable();
    358a:	2201      	movs	r2, #1
    358c:	4b07      	ldr	r3, [pc, #28]	; (35ac <udd_enable+0xbc>)
    358e:	701a      	strb	r2, [r3, #0]
    3590:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3594:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    3596:	b006      	add	sp, #24
    3598:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    359a:	490a      	ldr	r1, [pc, #40]	; (35c4 <udd_enable+0xd4>)
    359c:	2210      	movs	r2, #16
    359e:	68cb      	ldr	r3, [r1, #12]
    35a0:	421a      	tst	r2, r3
    35a2:	d0fc      	beq.n	359e <udd_enable+0xae>
    35a4:	e7ca      	b.n	353c <udd_enable+0x4c>
		_uhd_vbus_handler();
    35a6:	4b0c      	ldr	r3, [pc, #48]	; (35d8 <udd_enable+0xe8>)
    35a8:	4798      	blx	r3
    35aa:	e7ec      	b.n	3586 <udd_enable+0x96>
    35ac:	200000f9 	.word	0x200000f9
    35b0:	00004931 	.word	0x00004931
    35b4:	200003cc 	.word	0x200003cc
    35b8:	41005000 	.word	0x41005000
    35bc:	00004941 	.word	0x00004941
    35c0:	00004355 	.word	0x00004355
    35c4:	40000800 	.word	0x40000800
    35c8:	00002805 	.word	0x00002805
    35cc:	00001d69 	.word	0x00001d69
    35d0:	00004b8d 	.word	0x00004b8d
    35d4:	00001d7d 	.word	0x00001d7d
    35d8:	000034b5 	.word	0x000034b5
    35dc:	00004b41 	.word	0x00004b41
    35e0:	00004b6d 	.word	0x00004b6d
    35e4:	41004400 	.word	0x41004400

000035e8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    35e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ea:	46c6      	mov	lr, r8
    35ec:	b500      	push	{lr}
    35ee:	000c      	movs	r4, r1
    35f0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    35f2:	2800      	cmp	r0, #0
    35f4:	d10f      	bne.n	3616 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    35f6:	2a00      	cmp	r2, #0
    35f8:	dd11      	ble.n	361e <_read+0x36>
    35fa:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    35fc:	4e09      	ldr	r6, [pc, #36]	; (3624 <_read+0x3c>)
    35fe:	4d0a      	ldr	r5, [pc, #40]	; (3628 <_read+0x40>)
    3600:	6830      	ldr	r0, [r6, #0]
    3602:	0021      	movs	r1, r4
    3604:	682b      	ldr	r3, [r5, #0]
    3606:	4798      	blx	r3
		ptr++;
    3608:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    360a:	42bc      	cmp	r4, r7
    360c:	d1f8      	bne.n	3600 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    360e:	4640      	mov	r0, r8
    3610:	bc04      	pop	{r2}
    3612:	4690      	mov	r8, r2
    3614:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3616:	2301      	movs	r3, #1
    3618:	425b      	negs	r3, r3
    361a:	4698      	mov	r8, r3
    361c:	e7f7      	b.n	360e <_read+0x26>
	for (; len > 0; --len) {
    361e:	4680      	mov	r8, r0
    3620:	e7f5      	b.n	360e <_read+0x26>
    3622:	46c0      	nop			; (mov r8, r8)
    3624:	20000594 	.word	0x20000594
    3628:	2000058c 	.word	0x2000058c

0000362c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    362c:	b5f0      	push	{r4, r5, r6, r7, lr}
    362e:	46c6      	mov	lr, r8
    3630:	b500      	push	{lr}
    3632:	000e      	movs	r6, r1
    3634:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3636:	3801      	subs	r0, #1
    3638:	2802      	cmp	r0, #2
    363a:	d810      	bhi.n	365e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    363c:	2a00      	cmp	r2, #0
    363e:	d011      	beq.n	3664 <_write+0x38>
    3640:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3642:	4b0c      	ldr	r3, [pc, #48]	; (3674 <_write+0x48>)
    3644:	4698      	mov	r8, r3
    3646:	4f0c      	ldr	r7, [pc, #48]	; (3678 <_write+0x4c>)
    3648:	4643      	mov	r3, r8
    364a:	6818      	ldr	r0, [r3, #0]
    364c:	5d31      	ldrb	r1, [r6, r4]
    364e:	683b      	ldr	r3, [r7, #0]
    3650:	4798      	blx	r3
    3652:	2800      	cmp	r0, #0
    3654:	db08      	blt.n	3668 <_write+0x3c>
			return -1;
		}
		++nChars;
    3656:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3658:	42a5      	cmp	r5, r4
    365a:	d1f5      	bne.n	3648 <_write+0x1c>
    365c:	e006      	b.n	366c <_write+0x40>
		return -1;
    365e:	2401      	movs	r4, #1
    3660:	4264      	negs	r4, r4
    3662:	e003      	b.n	366c <_write+0x40>
	for (; len != 0; --len) {
    3664:	0014      	movs	r4, r2
    3666:	e001      	b.n	366c <_write+0x40>
			return -1;
    3668:	2401      	movs	r4, #1
    366a:	4264      	negs	r4, r4
	}
	return nChars;
}
    366c:	0020      	movs	r0, r4
    366e:	bc04      	pop	{r2}
    3670:	4690      	mov	r8, r2
    3672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3674:	20000594 	.word	0x20000594
    3678:	20000590 	.word	0x20000590

0000367c <main>:


/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
    367e:	2101      	movs	r1, #1
    3680:	4b68      	ldr	r3, [pc, #416]	; (3824 <main+0x1a8>)
    3682:	7019      	strb	r1, [r3, #0]
    3684:	f3bf 8f5f 	dmb	sy
    3688:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    368a:	4b67      	ldr	r3, [pc, #412]	; (3828 <main+0x1ac>)
    368c:	2200      	movs	r2, #0
    368e:	701a      	strb	r2, [r3, #0]
    3690:	705a      	strb	r2, [r3, #1]
    3692:	709a      	strb	r2, [r3, #2]
    3694:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    3696:	7119      	strb	r1, [r3, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	system_init();
    3698:	4b64      	ldr	r3, [pc, #400]	; (382c <main+0x1b0>)
    369a:	4798      	blx	r3
	ui_lb_init();
    369c:	4b64      	ldr	r3, [pc, #400]	; (3830 <main+0x1b4>)
    369e:	4798      	blx	r3
	ui_debouncer_init();
    36a0:	4b64      	ldr	r3, [pc, #400]	; (3834 <main+0x1b8>)
    36a2:	4798      	blx	r3
	ui_powerdown();
    36a4:	4b64      	ldr	r3, [pc, #400]	; (3838 <main+0x1bc>)
    36a6:	4798      	blx	r3
	ui_cdc_init();
    36a8:	4b64      	ldr	r3, [pc, #400]	; (383c <main+0x1c0>)
    36aa:	4798      	blx	r3
	sd_mmc_init();
    36ac:	4b64      	ldr	r3, [pc, #400]	; (3840 <main+0x1c4>)
    36ae:	4798      	blx	r3

	memories_initialization();
    36b0:	4b64      	ldr	r3, [pc, #400]	; (3844 <main+0x1c8>)
    36b2:	4798      	blx	r3

	ui_configure_callback();
    36b4:	4b64      	ldr	r3, [pc, #400]	; (3848 <main+0x1cc>)
    36b6:	4798      	blx	r3
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    36b8:	4b64      	ldr	r3, [pc, #400]	; (384c <main+0x1d0>)
    36ba:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    36bc:	4b64      	ldr	r3, [pc, #400]	; (3850 <main+0x1d4>)
    36be:	681b      	ldr	r3, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    36c0:	7bda      	ldrb	r2, [r3, #15]

	while (tc_is_syncing(module_inst)) {
    36c2:	b252      	sxtb	r2, r2
    36c4:	2a00      	cmp	r2, #0
    36c6:	dbfb      	blt.n	36c0 <main+0x44>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    36c8:	2200      	movs	r2, #0
    36ca:	711a      	strb	r2, [r3, #4]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    36cc:	7bda      	ldrb	r2, [r3, #15]

	while (tc_is_syncing(module_inst)) {
    36ce:	b252      	sxtb	r2, r2
    36d0:	2a00      	cmp	r2, #0
    36d2:	dbfb      	blt.n	36cc <main+0x50>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    36d4:	2240      	movs	r2, #64	; 0x40
    36d6:	715a      	strb	r2, [r3, #5]

	/* The main loop manages only the power mode
	 * because the USB management & button detection
	 * are done by interrupt */
	while (true) {
		if (main_b_msc_enable) {
    36d8:	4c5e      	ldr	r4, [pc, #376]	; (3854 <main+0x1d8>)
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    36da:	4e52      	ldr	r6, [pc, #328]	; (3824 <main+0x1a8>)
	while (!(*lock_ptr)) {
    36dc:	4d52      	ldr	r5, [pc, #328]	; (3828 <main+0x1ac>)

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
    36de:	0037      	movs	r7, r6
    36e0:	e05a      	b.n	3798 <main+0x11c>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    36e2:	0019      	movs	r1, r3
		lock_ptr++;
    36e4:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    36e6:	1c4b      	adds	r3, r1, #1
    36e8:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    36ea:	7810      	ldrb	r0, [r2, #0]
    36ec:	2800      	cmp	r0, #0
    36ee:	d0f8      	beq.n	36e2 <main+0x66>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    36f0:	2b00      	cmp	r3, #0
    36f2:	d106      	bne.n	3702 <main+0x86>
		cpu_irq_enable();
    36f4:	2201      	movs	r2, #1
    36f6:	4b4b      	ldr	r3, [pc, #300]	; (3824 <main+0x1a8>)
    36f8:	701a      	strb	r2, [r3, #0]
    36fa:	f3bf 8f5f 	dmb	sy
    36fe:	b662      	cpsie	i
    3700:	e046      	b.n	3790 <main+0x114>
  __ASM volatile ("cpsid i" : : : "memory");
    3702:	b672      	cpsid	i
    3704:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    3708:	2200      	movs	r2, #0
    370a:	4b46      	ldr	r3, [pc, #280]	; (3824 <main+0x1a8>)
    370c:	701a      	strb	r2, [r3, #0]
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    370e:	4b52      	ldr	r3, [pc, #328]	; (3858 <main+0x1dc>)
    3710:	699b      	ldr	r3, [r3, #24]

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    3712:	051b      	lsls	r3, r3, #20
    3714:	0f1b      	lsrs	r3, r3, #28
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    3716:	2b02      	cmp	r3, #2
    3718:	d805      	bhi.n	3726 <main+0xaa>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    371a:	4a50      	ldr	r2, [pc, #320]	; (385c <main+0x1e0>)
    371c:	6850      	ldr	r0, [r2, #4]
    371e:	23c0      	movs	r3, #192	; 0xc0
    3720:	009b      	lsls	r3, r3, #2
    3722:	4303      	orrs	r3, r0
    3724:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    3726:	2902      	cmp	r1, #2
    3728:	d90b      	bls.n	3742 <main+0xc6>
    372a:	2903      	cmp	r1, #3
    372c:	d011      	beq.n	3752 <main+0xd6>

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    372e:	2201      	movs	r2, #1
    3730:	4b3c      	ldr	r3, [pc, #240]	; (3824 <main+0x1a8>)
    3732:	701a      	strb	r2, [r3, #0]
    3734:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3738:	b662      	cpsie	i
  __ASM volatile ("dsb");
    373a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    373e:	bf30      	wfi
    3740:	e026      	b.n	3790 <main+0x114>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3742:	4a47      	ldr	r2, [pc, #284]	; (3860 <main+0x1e4>)
    3744:	6913      	ldr	r3, [r2, #16]
    3746:	2004      	movs	r0, #4
    3748:	4383      	bics	r3, r0
    374a:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    374c:	4b45      	ldr	r3, [pc, #276]	; (3864 <main+0x1e8>)
    374e:	7059      	strb	r1, [r3, #1]
    3750:	e7ed      	b.n	372e <main+0xb2>
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    3752:	4a43      	ldr	r2, [pc, #268]	; (3860 <main+0x1e4>)
    3754:	6913      	ldr	r3, [r2, #16]
    3756:	2104      	movs	r1, #4
    3758:	430b      	orrs	r3, r1
    375a:	6113      	str	r3, [r2, #16]
    375c:	e7e7      	b.n	372e <main+0xb2>
  __ASM volatile ("cpsid i" : : : "memory");
    375e:	b672      	cpsid	i
  __ASM volatile ("dmb");
    3760:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3764:	2300      	movs	r3, #0
    3766:	7033      	strb	r3, [r6, #0]
	while (!(*lock_ptr)) {
    3768:	782b      	ldrb	r3, [r5, #0]
    376a:	2b00      	cmp	r3, #0
    376c:	d10b      	bne.n	3786 <main+0x10a>
    376e:	2100      	movs	r1, #0
    3770:	4a2d      	ldr	r2, [pc, #180]	; (3828 <main+0x1ac>)
    3772:	e000      	b.n	3776 <main+0xfa>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3774:	0019      	movs	r1, r3
		lock_ptr++;
    3776:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3778:	1c4b      	adds	r3, r1, #1
    377a:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    377c:	7810      	ldrb	r0, [r2, #0]
    377e:	2800      	cmp	r0, #0
    3780:	d0f8      	beq.n	3774 <main+0xf8>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3782:	2b00      	cmp	r3, #0
    3784:	d11c      	bne.n	37c0 <main+0x144>
		cpu_irq_enable();
    3786:	2301      	movs	r3, #1
    3788:	703b      	strb	r3, [r7, #0]
    378a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    378e:	b662      	cpsie	i
		}
		else {
			sleepmgr_enter_sleep();
		}
		
		if(recording_on) {
    3790:	4b35      	ldr	r3, [pc, #212]	; (3868 <main+0x1ec>)
    3792:	781b      	ldrb	r3, [r3, #0]
    3794:	2b00      	cmp	r3, #0
    3796:	d141      	bne.n	381c <main+0x1a0>
		if (main_b_msc_enable) {
    3798:	7823      	ldrb	r3, [r4, #0]
    379a:	2b00      	cmp	r3, #0
    379c:	d0df      	beq.n	375e <main+0xe2>
			if (!udi_msc_process_trans()) {
    379e:	4b33      	ldr	r3, [pc, #204]	; (386c <main+0x1f0>)
    37a0:	4798      	blx	r3
    37a2:	2800      	cmp	r0, #0
    37a4:	d1f4      	bne.n	3790 <main+0x114>
  __ASM volatile ("cpsid i" : : : "memory");
    37a6:	b672      	cpsid	i
    37a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    37ac:	2200      	movs	r2, #0
    37ae:	4b1d      	ldr	r3, [pc, #116]	; (3824 <main+0x1a8>)
    37b0:	701a      	strb	r2, [r3, #0]
	while (!(*lock_ptr)) {
    37b2:	4b1d      	ldr	r3, [pc, #116]	; (3828 <main+0x1ac>)
    37b4:	781b      	ldrb	r3, [r3, #0]
    37b6:	2b00      	cmp	r3, #0
    37b8:	d19c      	bne.n	36f4 <main+0x78>
    37ba:	2100      	movs	r1, #0
    37bc:	4a1a      	ldr	r2, [pc, #104]	; (3828 <main+0x1ac>)
    37be:	e791      	b.n	36e4 <main+0x68>
    37c0:	b672      	cpsid	i
    37c2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    37c6:	2200      	movs	r2, #0
    37c8:	4b16      	ldr	r3, [pc, #88]	; (3824 <main+0x1a8>)
    37ca:	701a      	strb	r2, [r3, #0]
	uint32_t rev = DSU->DID.reg;
    37cc:	4b22      	ldr	r3, [pc, #136]	; (3858 <main+0x1dc>)
    37ce:	699b      	ldr	r3, [r3, #24]
	rev = rev >> DSU_DID_REVISION_Pos;
    37d0:	051b      	lsls	r3, r3, #20
    37d2:	0f1b      	lsrs	r3, r3, #28
	if (rev < _SYSTEM_MCU_REVISION_D) {
    37d4:	2b02      	cmp	r3, #2
    37d6:	d805      	bhi.n	37e4 <main+0x168>
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    37d8:	4a20      	ldr	r2, [pc, #128]	; (385c <main+0x1e0>)
    37da:	6850      	ldr	r0, [r2, #4]
    37dc:	23c0      	movs	r3, #192	; 0xc0
    37de:	009b      	lsls	r3, r3, #2
    37e0:	4303      	orrs	r3, r0
    37e2:	6053      	str	r3, [r2, #4]
	switch (sleep_mode) {
    37e4:	2902      	cmp	r1, #2
    37e6:	d90b      	bls.n	3800 <main+0x184>
    37e8:	2903      	cmp	r1, #3
    37ea:	d011      	beq.n	3810 <main+0x194>
	cpu_irq_enable();
    37ec:	2201      	movs	r2, #1
    37ee:	4b0d      	ldr	r3, [pc, #52]	; (3824 <main+0x1a8>)
    37f0:	701a      	strb	r2, [r3, #0]
    37f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    37f6:	b662      	cpsie	i
  __ASM volatile ("dsb");
    37f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    37fc:	bf30      	wfi
    37fe:	e7c7      	b.n	3790 <main+0x114>
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3800:	4a17      	ldr	r2, [pc, #92]	; (3860 <main+0x1e4>)
    3802:	6913      	ldr	r3, [r2, #16]
    3804:	2004      	movs	r0, #4
    3806:	4383      	bics	r3, r0
    3808:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    380a:	4b16      	ldr	r3, [pc, #88]	; (3864 <main+0x1e8>)
    380c:	7059      	strb	r1, [r3, #1]
    380e:	e7ed      	b.n	37ec <main+0x170>
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    3810:	4a13      	ldr	r2, [pc, #76]	; (3860 <main+0x1e4>)
    3812:	6913      	ldr	r3, [r2, #16]
    3814:	2104      	movs	r1, #4
    3816:	430b      	orrs	r3, r1
    3818:	6113      	str	r3, [r2, #16]
    381a:	e7e7      	b.n	37ec <main+0x170>
			audio_record_1samp();
    381c:	4b14      	ldr	r3, [pc, #80]	; (3870 <main+0x1f4>)
    381e:	4798      	blx	r3
    3820:	e7ba      	b.n	3798 <main+0x11c>
    3822:	46c0      	nop			; (mov r8, r8)
    3824:	200000f9 	.word	0x200000f9
    3828:	20000ae8 	.word	0x20000ae8
    382c:	00006585 	.word	0x00006585
    3830:	00003b09 	.word	0x00003b09
    3834:	00003ba9 	.word	0x00003ba9
    3838:	00003c59 	.word	0x00003c59
    383c:	00003a15 	.word	0x00003a15
    3840:	0000064d 	.word	0x0000064d
    3844:	000038cd 	.word	0x000038cd
    3848:	00003c11 	.word	0x00003c11
    384c:	000017f5 	.word	0x000017f5
    3850:	200005d8 	.word	0x200005d8
    3854:	2000028e 	.word	0x2000028e
    3858:	41002000 	.word	0x41002000
    385c:	41004000 	.word	0x41004000
    3860:	e000ed00 	.word	0xe000ed00
    3864:	40000400 	.word	0x40000400
    3868:	20000290 	.word	0x20000290
    386c:	00001515 	.word	0x00001515
    3870:	00000379 	.word	0x00000379

00003874 <main_suspend_action>:
		}
	}
}

void main_suspend_action(void)
{
    3874:	b510      	push	{r4, lr}
	ui_powerdown();
    3876:	4b01      	ldr	r3, [pc, #4]	; (387c <main_suspend_action+0x8>)
    3878:	4798      	blx	r3
}
    387a:	bd10      	pop	{r4, pc}
    387c:	00003c59 	.word	0x00003c59

00003880 <main_resume_action>:

void main_resume_action(void)
{
    3880:	b510      	push	{r4, lr}
	ui_wakeup();
    3882:	4b01      	ldr	r3, [pc, #4]	; (3888 <main_resume_action+0x8>)
    3884:	4798      	blx	r3
}
    3886:	bd10      	pop	{r4, pc}
    3888:	00003c69 	.word	0x00003c69

0000388c <main_sof_action>:

void main_sof_action(void)
{
    388c:	b510      	push	{r4, lr}
	if (!main_b_msc_enable)
    388e:	4b05      	ldr	r3, [pc, #20]	; (38a4 <main_sof_action+0x18>)
    3890:	781b      	ldrb	r3, [r3, #0]
    3892:	2b00      	cmp	r3, #0
    3894:	d100      	bne.n	3898 <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    3896:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    3898:	4b03      	ldr	r3, [pc, #12]	; (38a8 <main_sof_action+0x1c>)
    389a:	4798      	blx	r3
    389c:	4b03      	ldr	r3, [pc, #12]	; (38ac <main_sof_action+0x20>)
    389e:	4798      	blx	r3
    38a0:	e7f9      	b.n	3896 <main_sof_action+0xa>
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	2000028e 	.word	0x2000028e
    38a8:	00002ebd 	.word	0x00002ebd
    38ac:	00003c81 	.word	0x00003c81

000038b0 <main_msc_enable>:

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
    38b0:	2201      	movs	r2, #1
    38b2:	4b02      	ldr	r3, [pc, #8]	; (38bc <main_msc_enable+0xc>)
    38b4:	701a      	strb	r2, [r3, #0]
	return true;
}
    38b6:	2001      	movs	r0, #1
    38b8:	4770      	bx	lr
    38ba:	46c0      	nop			; (mov r8, r8)
    38bc:	2000028e 	.word	0x2000028e

000038c0 <main_msc_disable>:

void main_msc_disable(void)
{
	main_b_msc_enable = false;
    38c0:	2200      	movs	r2, #0
    38c2:	4b01      	ldr	r3, [pc, #4]	; (38c8 <main_msc_disable+0x8>)
    38c4:	701a      	strb	r2, [r3, #0]
}
    38c6:	4770      	bx	lr
    38c8:	2000028e 	.word	0x2000028e

000038cc <memories_initialization>:
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    38cc:	4770      	bx	lr

000038ce <ui_button2_callback>:
	//}
}

void ui_button2_callback(void)
{
}
    38ce:	4770      	bx	lr

000038d0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    38d0:	b570      	push	{r4, r5, r6, lr}
    38d2:	b082      	sub	sp, #8
    38d4:	0005      	movs	r5, r0
    38d6:	000e      	movs	r6, r1
	uint16_t temp = 0;
    38d8:	2200      	movs	r2, #0
    38da:	466b      	mov	r3, sp
    38dc:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    38de:	4c06      	ldr	r4, [pc, #24]	; (38f8 <usart_serial_getchar+0x28>)
    38e0:	466b      	mov	r3, sp
    38e2:	1d99      	adds	r1, r3, #6
    38e4:	0028      	movs	r0, r5
    38e6:	47a0      	blx	r4
    38e8:	2800      	cmp	r0, #0
    38ea:	d1f9      	bne.n	38e0 <usart_serial_getchar+0x10>

	*c = temp;
    38ec:	466b      	mov	r3, sp
    38ee:	3306      	adds	r3, #6
    38f0:	881b      	ldrh	r3, [r3, #0]
    38f2:	7033      	strb	r3, [r6, #0]
}
    38f4:	b002      	add	sp, #8
    38f6:	bd70      	pop	{r4, r5, r6, pc}
    38f8:	00002235 	.word	0x00002235

000038fc <usart_serial_putchar>:
{
    38fc:	b570      	push	{r4, r5, r6, lr}
    38fe:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3900:	b28c      	uxth	r4, r1
    3902:	4e03      	ldr	r6, [pc, #12]	; (3910 <usart_serial_putchar+0x14>)
    3904:	0021      	movs	r1, r4
    3906:	0028      	movs	r0, r5
    3908:	47b0      	blx	r6
    390a:	2800      	cmp	r0, #0
    390c:	d1fa      	bne.n	3904 <usart_serial_putchar+0x8>
}
    390e:	bd70      	pop	{r4, r5, r6, pc}
    3910:	00002209 	.word	0x00002209

00003914 <ui_button1_callback>:
{
    3914:	b510      	push	{r4, lr}
    3916:	4b17      	ldr	r3, [pc, #92]	; (3974 <ui_button1_callback+0x60>)
    3918:	6a1b      	ldr	r3, [r3, #32]
	if(press_state) {
    391a:	00db      	lsls	r3, r3, #3
    391c:	d500      	bpl.n	3920 <ui_button1_callback+0xc>
}
    391e:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    3920:	2000      	movs	r0, #0
    3922:	4b15      	ldr	r3, [pc, #84]	; (3978 <ui_button1_callback+0x64>)
    3924:	4798      	blx	r3
    3926:	2264      	movs	r2, #100	; 0x64
    3928:	2300      	movs	r3, #0
    392a:	2100      	movs	r1, #0
    392c:	4c13      	ldr	r4, [pc, #76]	; (397c <ui_button1_callback+0x68>)
    392e:	47a0      	blx	r4
    3930:	4a13      	ldr	r2, [pc, #76]	; (3980 <ui_button1_callback+0x6c>)
    3932:	2300      	movs	r3, #0
    3934:	1880      	adds	r0, r0, r2
    3936:	4159      	adcs	r1, r3
    3938:	4a12      	ldr	r2, [pc, #72]	; (3984 <ui_button1_callback+0x70>)
    393a:	2300      	movs	r3, #0
    393c:	4c12      	ldr	r4, [pc, #72]	; (3988 <ui_button1_callback+0x74>)
    393e:	47a0      	blx	r4
    3940:	4b12      	ldr	r3, [pc, #72]	; (398c <ui_button1_callback+0x78>)
    3942:	4798      	blx	r3
    3944:	4b0b      	ldr	r3, [pc, #44]	; (3974 <ui_button1_callback+0x60>)
    3946:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    3948:	00db      	lsls	r3, r3, #3
    394a:	d4e8      	bmi.n	391e <ui_button1_callback+0xa>
		if(recording_on) {
    394c:	4b10      	ldr	r3, [pc, #64]	; (3990 <ui_button1_callback+0x7c>)
    394e:	781b      	ldrb	r3, [r3, #0]
    3950:	2b00      	cmp	r3, #0
    3952:	d107      	bne.n	3964 <ui_button1_callback+0x50>
		port_base->OUTCLR.reg = pin_mask;
    3954:	2280      	movs	r2, #128	; 0x80
    3956:	0152      	lsls	r2, r2, #5
    3958:	4b06      	ldr	r3, [pc, #24]	; (3974 <ui_button1_callback+0x60>)
    395a:	615a      	str	r2, [r3, #20]
			recording_on = true;
    395c:	2201      	movs	r2, #1
    395e:	4b0c      	ldr	r3, [pc, #48]	; (3990 <ui_button1_callback+0x7c>)
    3960:	701a      	strb	r2, [r3, #0]
}
    3962:	e7dc      	b.n	391e <ui_button1_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    3964:	2280      	movs	r2, #128	; 0x80
    3966:	0152      	lsls	r2, r2, #5
    3968:	4b02      	ldr	r3, [pc, #8]	; (3974 <ui_button1_callback+0x60>)
    396a:	619a      	str	r2, [r3, #24]
			recording_on = false;
    396c:	2200      	movs	r2, #0
    396e:	4b08      	ldr	r3, [pc, #32]	; (3990 <ui_button1_callback+0x7c>)
    3970:	701a      	strb	r2, [r3, #0]
    3972:	e7d4      	b.n	391e <ui_button1_callback+0xa>
    3974:	41004400 	.word	0x41004400
    3978:	00006341 	.word	0x00006341
    397c:	00006a7d 	.word	0x00006a7d
    3980:	00001b57 	.word	0x00001b57
    3984:	00001b58 	.word	0x00001b58
    3988:	00006a3d 	.word	0x00006a3d
    398c:	20000001 	.word	0x20000001
    3990:	20000290 	.word	0x20000290

00003994 <ui_button3_callback>:

void ui_button3_callback(void)
{
    3994:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    3996:	4b17      	ldr	r3, [pc, #92]	; (39f4 <ui_button3_callback+0x60>)
    3998:	6a1b      	ldr	r3, [r3, #32]
	//static uint32_t debounce_old3 = 0;
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_3_PIN);
	
	if(press_state) {
    399a:	071b      	lsls	r3, r3, #28
    399c:	d500      	bpl.n	39a0 <ui_button3_callback+0xc>
				//port_pin_set_output_level(UI_LED_3_PIN, UI_LED_ACTIVE);
				//monitoring_on = true;
			//}
		//}
	//}
}
    399e:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    39a0:	2000      	movs	r0, #0
    39a2:	4b15      	ldr	r3, [pc, #84]	; (39f8 <ui_button3_callback+0x64>)
    39a4:	4798      	blx	r3
    39a6:	2264      	movs	r2, #100	; 0x64
    39a8:	2300      	movs	r3, #0
    39aa:	2100      	movs	r1, #0
    39ac:	4c13      	ldr	r4, [pc, #76]	; (39fc <ui_button3_callback+0x68>)
    39ae:	47a0      	blx	r4
    39b0:	4a13      	ldr	r2, [pc, #76]	; (3a00 <ui_button3_callback+0x6c>)
    39b2:	2300      	movs	r3, #0
    39b4:	1880      	adds	r0, r0, r2
    39b6:	4159      	adcs	r1, r3
    39b8:	4a12      	ldr	r2, [pc, #72]	; (3a04 <ui_button3_callback+0x70>)
    39ba:	2300      	movs	r3, #0
    39bc:	4c12      	ldr	r4, [pc, #72]	; (3a08 <ui_button3_callback+0x74>)
    39be:	47a0      	blx	r4
    39c0:	4b12      	ldr	r3, [pc, #72]	; (3a0c <ui_button3_callback+0x78>)
    39c2:	4798      	blx	r3
    39c4:	4b0b      	ldr	r3, [pc, #44]	; (39f4 <ui_button3_callback+0x60>)
    39c6:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    39c8:	071b      	lsls	r3, r3, #28
    39ca:	d4e8      	bmi.n	399e <ui_button3_callback+0xa>
		if(monitoring_on) {
    39cc:	4b10      	ldr	r3, [pc, #64]	; (3a10 <ui_button3_callback+0x7c>)
    39ce:	781b      	ldrb	r3, [r3, #0]
    39d0:	2b00      	cmp	r3, #0
    39d2:	d107      	bne.n	39e4 <ui_button3_callback+0x50>
		port_base->OUTCLR.reg = pin_mask;
    39d4:	2280      	movs	r2, #128	; 0x80
    39d6:	0212      	lsls	r2, r2, #8
    39d8:	4b06      	ldr	r3, [pc, #24]	; (39f4 <ui_button3_callback+0x60>)
    39da:	615a      	str	r2, [r3, #20]
			monitoring_on = true;
    39dc:	2201      	movs	r2, #1
    39de:	4b0c      	ldr	r3, [pc, #48]	; (3a10 <ui_button3_callback+0x7c>)
    39e0:	701a      	strb	r2, [r3, #0]
}
    39e2:	e7dc      	b.n	399e <ui_button3_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    39e4:	2280      	movs	r2, #128	; 0x80
    39e6:	0212      	lsls	r2, r2, #8
    39e8:	4b02      	ldr	r3, [pc, #8]	; (39f4 <ui_button3_callback+0x60>)
    39ea:	619a      	str	r2, [r3, #24]
			monitoring_on = false;
    39ec:	2200      	movs	r2, #0
    39ee:	4b08      	ldr	r3, [pc, #32]	; (3a10 <ui_button3_callback+0x7c>)
    39f0:	701a      	strb	r2, [r3, #0]
    39f2:	e7d4      	b.n	399e <ui_button3_callback+0xa>
    39f4:	41004400 	.word	0x41004400
    39f8:	00006341 	.word	0x00006341
    39fc:	00006a7d 	.word	0x00006a7d
    3a00:	00001b57 	.word	0x00001b57
    3a04:	00001b58 	.word	0x00001b58
    3a08:	00006a3d 	.word	0x00006a3d
    3a0c:	20000001 	.word	0x20000001
    3a10:	2000028f 	.word	0x2000028f

00003a14 <ui_cdc_init>:
{
    3a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a16:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3a18:	2380      	movs	r3, #128	; 0x80
    3a1a:	05db      	lsls	r3, r3, #23
    3a1c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3a1e:	2300      	movs	r3, #0
    3a20:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3a22:	22ff      	movs	r2, #255	; 0xff
    3a24:	4669      	mov	r1, sp
    3a26:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3a28:	2200      	movs	r2, #0
    3a2a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3a2c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3a2e:	2401      	movs	r4, #1
    3a30:	2124      	movs	r1, #36	; 0x24
    3a32:	4668      	mov	r0, sp
    3a34:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    3a36:	3101      	adds	r1, #1
    3a38:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    3a3a:	3101      	adds	r1, #1
    3a3c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    3a3e:	3101      	adds	r1, #1
    3a40:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    3a42:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3a44:	3105      	adds	r1, #5
    3a46:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3a48:	3101      	adds	r1, #1
    3a4a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3a4c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3a4e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3a50:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3a52:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3a54:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3a56:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    3a58:	2313      	movs	r3, #19
    3a5a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3a5c:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = UI_CDC_MUX_SETTING;
    3a5e:	2380      	movs	r3, #128	; 0x80
    3a60:	035b      	lsls	r3, r3, #13
    3a62:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = UI_CDC_PINMUX_PAD0;
    3a64:	4b1a      	ldr	r3, [pc, #104]	; (3ad0 <ui_cdc_init+0xbc>)
    3a66:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = UI_CDC_PINMUX_PAD1;
    3a68:	4b1a      	ldr	r3, [pc, #104]	; (3ad4 <ui_cdc_init+0xc0>)
    3a6a:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = UI_CDC_PINMUX_PAD2;
    3a6c:	2301      	movs	r3, #1
    3a6e:	425b      	negs	r3, r3
    3a70:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = UI_CDC_PINMUX_PAD3;
    3a72:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_CDC_BAUDRATE;
    3a74:	23e1      	movs	r3, #225	; 0xe1
    3a76:	025b      	lsls	r3, r3, #9
    3a78:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3a7a:	4d17      	ldr	r5, [pc, #92]	; (3ad8 <ui_cdc_init+0xc4>)
    3a7c:	4b17      	ldr	r3, [pc, #92]	; (3adc <ui_cdc_init+0xc8>)
    3a7e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3a80:	4a17      	ldr	r2, [pc, #92]	; (3ae0 <ui_cdc_init+0xcc>)
    3a82:	4b18      	ldr	r3, [pc, #96]	; (3ae4 <ui_cdc_init+0xd0>)
    3a84:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3a86:	4a18      	ldr	r2, [pc, #96]	; (3ae8 <ui_cdc_init+0xd4>)
    3a88:	4b18      	ldr	r3, [pc, #96]	; (3aec <ui_cdc_init+0xd8>)
    3a8a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3a8c:	466a      	mov	r2, sp
    3a8e:	4918      	ldr	r1, [pc, #96]	; (3af0 <ui_cdc_init+0xdc>)
    3a90:	0028      	movs	r0, r5
    3a92:	4b18      	ldr	r3, [pc, #96]	; (3af4 <ui_cdc_init+0xe0>)
    3a94:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3a96:	4f18      	ldr	r7, [pc, #96]	; (3af8 <ui_cdc_init+0xe4>)
    3a98:	683b      	ldr	r3, [r7, #0]
    3a9a:	6898      	ldr	r0, [r3, #8]
    3a9c:	2100      	movs	r1, #0
    3a9e:	4e17      	ldr	r6, [pc, #92]	; (3afc <ui_cdc_init+0xe8>)
    3aa0:	47b0      	blx	r6
	setbuf(stdin, NULL);
    3aa2:	683b      	ldr	r3, [r7, #0]
    3aa4:	6858      	ldr	r0, [r3, #4]
    3aa6:	2100      	movs	r1, #0
    3aa8:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3aaa:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3aac:	0030      	movs	r0, r6
    3aae:	4b14      	ldr	r3, [pc, #80]	; (3b00 <ui_cdc_init+0xec>)
    3ab0:	4798      	blx	r3
    3ab2:	231f      	movs	r3, #31
    3ab4:	4018      	ands	r0, r3
    3ab6:	4084      	lsls	r4, r0
    3ab8:	4b12      	ldr	r3, [pc, #72]	; (3b04 <ui_cdc_init+0xf0>)
    3aba:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3abc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3abe:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3ac0:	2b00      	cmp	r3, #0
    3ac2:	d1fc      	bne.n	3abe <ui_cdc_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3ac4:	6833      	ldr	r3, [r6, #0]
    3ac6:	2202      	movs	r2, #2
    3ac8:	4313      	orrs	r3, r2
    3aca:	6033      	str	r3, [r6, #0]
}
    3acc:	b011      	add	sp, #68	; 0x44
    3ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ad0:	00160002 	.word	0x00160002
    3ad4:	00170002 	.word	0x00170002
    3ad8:	200005a4 	.word	0x200005a4
    3adc:	20000594 	.word	0x20000594
    3ae0:	000038fd 	.word	0x000038fd
    3ae4:	20000590 	.word	0x20000590
    3ae8:	000038d1 	.word	0x000038d1
    3aec:	2000058c 	.word	0x2000058c
    3af0:	42001400 	.word	0x42001400
    3af4:	00001ec5 	.word	0x00001ec5
    3af8:	200000fc 	.word	0x200000fc
    3afc:	00006d09 	.word	0x00006d09
    3b00:	00001e35 	.word	0x00001e35
    3b04:	e000e100 	.word	0xe000e100

00003b08 <ui_lb_init>:
{
    3b08:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b0a:	46c6      	mov	lr, r8
    3b0c:	b500      	push	{lr}
    3b0e:	b084      	sub	sp, #16
	config->input_pull = PORT_PIN_PULL_UP;
    3b10:	ac03      	add	r4, sp, #12
    3b12:	2501      	movs	r5, #1
    3b14:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3b16:	2600      	movs	r6, #0
    3b18:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3b1a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(UI_LED_1_PIN, &pin_conf);
    3b1c:	0021      	movs	r1, r4
    3b1e:	200c      	movs	r0, #12
    3b20:	4b1c      	ldr	r3, [pc, #112]	; (3b94 <ui_lb_init+0x8c>)
    3b22:	4698      	mov	r8, r3
    3b24:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    3b26:	4f1c      	ldr	r7, [pc, #112]	; (3b98 <ui_lb_init+0x90>)
    3b28:	2380      	movs	r3, #128	; 0x80
    3b2a:	015b      	lsls	r3, r3, #5
    3b2c:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_2_PIN, &pin_conf);
    3b2e:	0021      	movs	r1, r4
    3b30:	200d      	movs	r0, #13
    3b32:	47c0      	blx	r8
    3b34:	2380      	movs	r3, #128	; 0x80
    3b36:	019b      	lsls	r3, r3, #6
    3b38:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_3_PIN, &pin_conf);
    3b3a:	0021      	movs	r1, r4
    3b3c:	200f      	movs	r0, #15
    3b3e:	47c0      	blx	r8
    3b40:	2380      	movs	r3, #128	; 0x80
    3b42:	021b      	lsls	r3, r3, #8
    3b44:	61bb      	str	r3, [r7, #24]
	extint_chan_get_config_defaults(&config_extint_chan);
    3b46:	4668      	mov	r0, sp
    3b48:	4b14      	ldr	r3, [pc, #80]	; (3b9c <ui_lb_init+0x94>)
    3b4a:	4798      	blx	r3
	config_extint_chan.gpio_pin = UI_BUT_1_EIC_PIN;
    3b4c:	231c      	movs	r3, #28
    3b4e:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_1_EIC_MUX;
    3b50:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    3b52:	466b      	mov	r3, sp
    3b54:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    3b56:	2403      	movs	r4, #3
    3b58:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_1_EIC_LINE, &config_extint_chan);
    3b5a:	4669      	mov	r1, sp
    3b5c:	2008      	movs	r0, #8
    3b5e:	4f10      	ldr	r7, [pc, #64]	; (3ba0 <ui_lb_init+0x98>)
    3b60:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_2_EIC_PIN;
    3b62:	2302      	movs	r3, #2
    3b64:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_2_EIC_MUX;
    3b66:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    3b68:	466b      	mov	r3, sp
    3b6a:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    3b6c:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_2_EIC_LINE, &config_extint_chan);
    3b6e:	4669      	mov	r1, sp
    3b70:	2002      	movs	r0, #2
    3b72:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_3_EIC_PIN;
    3b74:	9400      	str	r4, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_3_EIC_MUX;
    3b76:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    3b78:	466b      	mov	r3, sp
    3b7a:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    3b7c:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_3_EIC_LINE, &config_extint_chan);
    3b7e:	4669      	mov	r1, sp
    3b80:	2003      	movs	r0, #3
    3b82:	47b8      	blx	r7
		port_base->OUTCLR.reg = pin_mask;
    3b84:	2280      	movs	r2, #128	; 0x80
    3b86:	05d2      	lsls	r2, r2, #23
    3b88:	4b06      	ldr	r3, [pc, #24]	; (3ba4 <ui_lb_init+0x9c>)
    3b8a:	615a      	str	r2, [r3, #20]
}
    3b8c:	b004      	add	sp, #16
    3b8e:	bc04      	pop	{r2}
    3b90:	4690      	mov	r8, r2
    3b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b94:	000061fd 	.word	0x000061fd
    3b98:	41004400 	.word	0x41004400
    3b9c:	00001d69 	.word	0x00001d69
    3ba0:	00001d7d 	.word	0x00001d7d
    3ba4:	41004480 	.word	0x41004480

00003ba8 <ui_debouncer_init>:
{
    3ba8:	b510      	push	{r4, lr}
    3baa:	b08e      	sub	sp, #56	; 0x38
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    3bac:	aa01      	add	r2, sp, #4
    3bae:	2300      	movs	r3, #0
    3bb0:	2100      	movs	r1, #0
    3bb2:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    3bb4:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    3bb6:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    3bb8:	2000      	movs	r0, #0
    3bba:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3bbc:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3bbe:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    3bc0:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    3bc2:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    3bc4:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    3bc6:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3bc8:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    3bca:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    3bcc:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    3bce:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    3bd0:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    3bd2:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    3bd4:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    3bd6:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.clock_source = GCLK_GENERATOR_7; // GCKL7 driven by the internal 32 kHz oscillator
    3bd8:	3307      	adds	r3, #7
    3bda:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV256; // Counter running @ 128 Hz (7.8 ms accuracy)
    3bdc:	23c0      	movs	r3, #192	; 0xc0
    3bde:	00db      	lsls	r3, r3, #3
    3be0:	8093      	strh	r3, [r2, #4]
	tc_init(&debounce_timer_module, TC3, &config_tc);
    3be2:	4c08      	ldr	r4, [pc, #32]	; (3c04 <ui_debouncer_init+0x5c>)
    3be4:	4908      	ldr	r1, [pc, #32]	; (3c08 <ui_debouncer_init+0x60>)
    3be6:	0020      	movs	r0, r4
    3be8:	4b08      	ldr	r3, [pc, #32]	; (3c0c <ui_debouncer_init+0x64>)
    3bea:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3bec:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3bee:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    3bf0:	b25b      	sxtb	r3, r3
    3bf2:	2b00      	cmp	r3, #0
    3bf4:	dbfb      	blt.n	3bee <ui_debouncer_init+0x46>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3bf6:	8813      	ldrh	r3, [r2, #0]
    3bf8:	2102      	movs	r1, #2
    3bfa:	430b      	orrs	r3, r1
    3bfc:	8013      	strh	r3, [r2, #0]
}
    3bfe:	b00e      	add	sp, #56	; 0x38
    3c00:	bd10      	pop	{r4, pc}
    3c02:	46c0      	nop			; (mov r8, r8)
    3c04:	200005d8 	.word	0x200005d8
    3c08:	42002c00 	.word	0x42002c00
    3c0c:	00000151 	.word	0x00000151

00003c10 <ui_configure_callback>:
{
    3c10:	b510      	push	{r4, lr}
	extint_register_callback(ui_button1_callback, UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3c12:	2200      	movs	r2, #0
    3c14:	2108      	movs	r1, #8
    3c16:	480b      	ldr	r0, [pc, #44]	; (3c44 <ui_configure_callback+0x34>)
    3c18:	4c0b      	ldr	r4, [pc, #44]	; (3c48 <ui_configure_callback+0x38>)
    3c1a:	47a0      	blx	r4
	extint_register_callback(ui_button2_callback, UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3c1c:	2200      	movs	r2, #0
    3c1e:	2102      	movs	r1, #2
    3c20:	480a      	ldr	r0, [pc, #40]	; (3c4c <ui_configure_callback+0x3c>)
    3c22:	47a0      	blx	r4
	extint_register_callback(ui_button3_callback, UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3c24:	2200      	movs	r2, #0
    3c26:	2103      	movs	r1, #3
    3c28:	4809      	ldr	r0, [pc, #36]	; (3c50 <ui_configure_callback+0x40>)
    3c2a:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3c2c:	2100      	movs	r1, #0
    3c2e:	2008      	movs	r0, #8
    3c30:	4c08      	ldr	r4, [pc, #32]	; (3c54 <ui_configure_callback+0x44>)
    3c32:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3c34:	2100      	movs	r1, #0
    3c36:	2002      	movs	r0, #2
    3c38:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3c3a:	2100      	movs	r1, #0
    3c3c:	2003      	movs	r0, #3
    3c3e:	47a0      	blx	r4
}
    3c40:	bd10      	pop	{r4, pc}
    3c42:	46c0      	nop			; (mov r8, r8)
    3c44:	00003915 	.word	0x00003915
    3c48:	00004b41 	.word	0x00004b41
    3c4c:	000038cf 	.word	0x000038cf
    3c50:	00003995 	.word	0x00003995
    3c54:	00004b6d 	.word	0x00004b6d

00003c58 <ui_powerdown>:
		port_base->OUTSET.reg = pin_mask;
    3c58:	2280      	movs	r2, #128	; 0x80
    3c5a:	05d2      	lsls	r2, r2, #23
    3c5c:	4b01      	ldr	r3, [pc, #4]	; (3c64 <ui_powerdown+0xc>)
    3c5e:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    3c60:	4770      	bx	lr
    3c62:	46c0      	nop			; (mov r8, r8)
    3c64:	41004480 	.word	0x41004480

00003c68 <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
    3c68:	2280      	movs	r2, #128	; 0x80
    3c6a:	05d2      	lsls	r2, r2, #23
    3c6c:	4b01      	ldr	r3, [pc, #4]	; (3c74 <ui_wakeup+0xc>)
    3c6e:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    3c70:	4770      	bx	lr
    3c72:	46c0      	nop			; (mov r8, r8)
    3c74:	41004480 	.word	0x41004480

00003c78 <ui_start_read>:

void ui_start_read(void)
{
}
    3c78:	4770      	bx	lr

00003c7a <ui_stop_read>:

void ui_stop_read(void)
{
}
    3c7a:	4770      	bx	lr

00003c7c <ui_start_write>:

void ui_start_write(void)
{
}
    3c7c:	4770      	bx	lr

00003c7e <ui_stop_write>:

void ui_stop_write(void)
{
}
    3c7e:	4770      	bx	lr

00003c80 <ui_process>:

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
    3c80:	2800      	cmp	r0, #0
    3c82:	d104      	bne.n	3c8e <ui_process+0xe>
    3c84:	2280      	movs	r2, #128	; 0x80
    3c86:	05d2      	lsls	r2, r2, #23
    3c88:	4b05      	ldr	r3, [pc, #20]	; (3ca0 <ui_process+0x20>)
    3c8a:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if (1000 == framenumber) {
		LED_Off(LED_0_PIN);
	}
}
    3c8c:	4770      	bx	lr
	if (1000 == framenumber) {
    3c8e:	23fa      	movs	r3, #250	; 0xfa
    3c90:	009b      	lsls	r3, r3, #2
    3c92:	4298      	cmp	r0, r3
    3c94:	d1fa      	bne.n	3c8c <ui_process+0xc>
		port_base->OUTSET.reg = pin_mask;
    3c96:	2280      	movs	r2, #128	; 0x80
    3c98:	05d2      	lsls	r2, r2, #23
    3c9a:	4b01      	ldr	r3, [pc, #4]	; (3ca0 <ui_process+0x20>)
    3c9c:	619a      	str	r2, [r3, #24]
}
    3c9e:	e7f5      	b.n	3c8c <ui_process+0xc>
    3ca0:	41004480 	.word	0x41004480

00003ca4 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    3ca4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    3ca6:	000b      	movs	r3, r1
    3ca8:	332e      	adds	r3, #46	; 0x2e
    3caa:	009b      	lsls	r3, r3, #2
    3cac:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    3cae:	22aa      	movs	r2, #170	; 0xaa
    3cb0:	0052      	lsls	r2, r2, #1
    3cb2:	0049      	lsls	r1, r1, #1
    3cb4:	5a83      	ldrh	r3, [r0, r2]
    3cb6:	4c03      	ldr	r4, [pc, #12]	; (3cc4 <usb_device_register_callback+0x20>)
    3cb8:	5b09      	ldrh	r1, [r1, r4]
    3cba:	430b      	orrs	r3, r1
    3cbc:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    3cbe:	2000      	movs	r0, #0
    3cc0:	bd10      	pop	{r4, pc}
    3cc2:	46c0      	nop			; (mov r8, r8)
    3cc4:	00007f5c 	.word	0x00007f5c

00003cc8 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    3cc8:	0049      	lsls	r1, r1, #1
    3cca:	4b06      	ldr	r3, [pc, #24]	; (3ce4 <usb_device_enable_callback+0x1c>)
    3ccc:	5acb      	ldrh	r3, [r1, r3]
    3cce:	6802      	ldr	r2, [r0, #0]
    3cd0:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    3cd2:	21ab      	movs	r1, #171	; 0xab
    3cd4:	0049      	lsls	r1, r1, #1
    3cd6:	5a42      	ldrh	r2, [r0, r1]
    3cd8:	431a      	orrs	r2, r3
    3cda:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    3cdc:	6802      	ldr	r2, [r0, #0]
    3cde:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    3ce0:	2000      	movs	r0, #0
    3ce2:	4770      	bx	lr
    3ce4:	00007f5c 	.word	0x00007f5c

00003ce8 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    3ce8:	0049      	lsls	r1, r1, #1
    3cea:	4b05      	ldr	r3, [pc, #20]	; (3d00 <usb_device_disable_callback+0x18>)
    3cec:	5aca      	ldrh	r2, [r1, r3]
    3cee:	21ab      	movs	r1, #171	; 0xab
    3cf0:	0049      	lsls	r1, r1, #1
    3cf2:	5a43      	ldrh	r3, [r0, r1]
    3cf4:	4393      	bics	r3, r2
    3cf6:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    3cf8:	6803      	ldr	r3, [r0, #0]
    3cfa:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    3cfc:	2000      	movs	r0, #0
    3cfe:	4770      	bx	lr
    3d00:	00007f5c 	.word	0x00007f5c

00003d04 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    3d04:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    3d06:	008c      	lsls	r4, r1, #2
    3d08:	18a4      	adds	r4, r4, r2
    3d0a:	3434      	adds	r4, #52	; 0x34
    3d0c:	00a4      	lsls	r4, r4, #2
    3d0e:	1904      	adds	r4, r0, r4
    3d10:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3d12:	1840      	adds	r0, r0, r1
    3d14:	3059      	adds	r0, #89	; 0x59
    3d16:	30ff      	adds	r0, #255	; 0xff
    3d18:	7803      	ldrb	r3, [r0, #0]
    3d1a:	4903      	ldr	r1, [pc, #12]	; (3d28 <usb_device_endpoint_register_callback+0x24>)
    3d1c:	5c8a      	ldrb	r2, [r1, r2]
    3d1e:	4313      	orrs	r3, r2
    3d20:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    3d22:	2000      	movs	r0, #0
    3d24:	bd10      	pop	{r4, pc}
    3d26:	46c0      	nop			; (mov r8, r8)
    3d28:	00007f6c 	.word	0x00007f6c

00003d2c <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    3d2c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    3d2e:	008b      	lsls	r3, r1, #2
    3d30:	189b      	adds	r3, r3, r2
    3d32:	3334      	adds	r3, #52	; 0x34
    3d34:	009b      	lsls	r3, r3, #2
    3d36:	18c3      	adds	r3, r0, r3
    3d38:	2400      	movs	r4, #0
    3d3a:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3d3c:	1840      	adds	r0, r0, r1
    3d3e:	3059      	adds	r0, #89	; 0x59
    3d40:	30ff      	adds	r0, #255	; 0xff
    3d42:	4b03      	ldr	r3, [pc, #12]	; (3d50 <usb_device_endpoint_unregister_callback+0x24>)
    3d44:	5c9a      	ldrb	r2, [r3, r2]
    3d46:	7803      	ldrb	r3, [r0, #0]
    3d48:	4393      	bics	r3, r2
    3d4a:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    3d4c:	2000      	movs	r0, #0
    3d4e:	bd10      	pop	{r4, pc}
    3d50:	00007f6c 	.word	0x00007f6c

00003d54 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3d54:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3d56:	230f      	movs	r3, #15
    3d58:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3d5a:	18c4      	adds	r4, r0, r3
    3d5c:	3461      	adds	r4, #97	; 0x61
    3d5e:	34ff      	adds	r4, #255	; 0xff
    3d60:	7825      	ldrb	r5, [r4, #0]
    3d62:	4e2f      	ldr	r6, [pc, #188]	; (3e20 <usb_device_endpoint_enable_callback+0xcc>)
    3d64:	5cb6      	ldrb	r6, [r6, r2]
    3d66:	4335      	orrs	r5, r6
    3d68:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3d6a:	2a00      	cmp	r2, #0
    3d6c:	d129      	bne.n	3dc2 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    3d6e:	2b00      	cmp	r3, #0
    3d70:	d112      	bne.n	3d98 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    3d72:	2503      	movs	r5, #3
    3d74:	240a      	movs	r4, #10
    3d76:	34ff      	adds	r4, #255	; 0xff
    3d78:	6806      	ldr	r6, [r0, #0]
    3d7a:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3d7c:	2a03      	cmp	r2, #3
    3d7e:	d109      	bne.n	3d94 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3d80:	b249      	sxtb	r1, r1
    3d82:	2900      	cmp	r1, #0
    3d84:	db44      	blt.n	3e10 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    3d86:	6802      	ldr	r2, [r0, #0]
    3d88:	015b      	lsls	r3, r3, #5
    3d8a:	18d3      	adds	r3, r2, r3
    3d8c:	330a      	adds	r3, #10
    3d8e:	33ff      	adds	r3, #255	; 0xff
    3d90:	2220      	movs	r2, #32
    3d92:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3d94:	2000      	movs	r0, #0
    3d96:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3d98:	b24c      	sxtb	r4, r1
    3d9a:	2c00      	cmp	r4, #0
    3d9c:	db08      	blt.n	3db0 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    3d9e:	015c      	lsls	r4, r3, #5
    3da0:	6805      	ldr	r5, [r0, #0]
    3da2:	46ac      	mov	ip, r5
    3da4:	4464      	add	r4, ip
    3da6:	340a      	adds	r4, #10
    3da8:	34ff      	adds	r4, #255	; 0xff
    3daa:	2501      	movs	r5, #1
    3dac:	7025      	strb	r5, [r4, #0]
    3dae:	e7e5      	b.n	3d7c <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    3db0:	015c      	lsls	r4, r3, #5
    3db2:	6805      	ldr	r5, [r0, #0]
    3db4:	46ac      	mov	ip, r5
    3db6:	4464      	add	r4, ip
    3db8:	340a      	adds	r4, #10
    3dba:	34ff      	adds	r4, #255	; 0xff
    3dbc:	2502      	movs	r5, #2
    3dbe:	7025      	strb	r5, [r4, #0]
    3dc0:	e7dc      	b.n	3d7c <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3dc2:	2a01      	cmp	r2, #1
    3dc4:	d11a      	bne.n	3dfc <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d105      	bne.n	3dd6 <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    3dca:	6802      	ldr	r2, [r0, #0]
    3dcc:	210c      	movs	r1, #12
    3dce:	230a      	movs	r3, #10
    3dd0:	33ff      	adds	r3, #255	; 0xff
    3dd2:	54d1      	strb	r1, [r2, r3]
    3dd4:	e7de      	b.n	3d94 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    3dd6:	b249      	sxtb	r1, r1
    3dd8:	2900      	cmp	r1, #0
    3dda:	db07      	blt.n	3dec <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    3ddc:	6802      	ldr	r2, [r0, #0]
    3dde:	015b      	lsls	r3, r3, #5
    3de0:	18d3      	adds	r3, r2, r3
    3de2:	330a      	adds	r3, #10
    3de4:	33ff      	adds	r3, #255	; 0xff
    3de6:	2204      	movs	r2, #4
    3de8:	701a      	strb	r2, [r3, #0]
    3dea:	e7d3      	b.n	3d94 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    3dec:	6802      	ldr	r2, [r0, #0]
    3dee:	015b      	lsls	r3, r3, #5
    3df0:	18d3      	adds	r3, r2, r3
    3df2:	330a      	adds	r3, #10
    3df4:	33ff      	adds	r3, #255	; 0xff
    3df6:	2208      	movs	r2, #8
    3df8:	701a      	strb	r2, [r3, #0]
    3dfa:	e7cb      	b.n	3d94 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3dfc:	2a02      	cmp	r2, #2
    3dfe:	d1bd      	bne.n	3d7c <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3e00:	6802      	ldr	r2, [r0, #0]
    3e02:	015b      	lsls	r3, r3, #5
    3e04:	18d3      	adds	r3, r2, r3
    3e06:	330a      	adds	r3, #10
    3e08:	33ff      	adds	r3, #255	; 0xff
    3e0a:	2210      	movs	r2, #16
    3e0c:	701a      	strb	r2, [r3, #0]
    3e0e:	e7c1      	b.n	3d94 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    3e10:	6802      	ldr	r2, [r0, #0]
    3e12:	015b      	lsls	r3, r3, #5
    3e14:	18d3      	adds	r3, r2, r3
    3e16:	330a      	adds	r3, #10
    3e18:	33ff      	adds	r3, #255	; 0xff
    3e1a:	2240      	movs	r2, #64	; 0x40
    3e1c:	701a      	strb	r2, [r3, #0]
    3e1e:	e7b9      	b.n	3d94 <usb_device_endpoint_enable_callback+0x40>
    3e20:	00007f6c 	.word	0x00007f6c

00003e24 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3e24:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3e26:	230f      	movs	r3, #15
    3e28:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3e2a:	18c4      	adds	r4, r0, r3
    3e2c:	3461      	adds	r4, #97	; 0x61
    3e2e:	34ff      	adds	r4, #255	; 0xff
    3e30:	4d2f      	ldr	r5, [pc, #188]	; (3ef0 <usb_device_endpoint_disable_callback+0xcc>)
    3e32:	5cae      	ldrb	r6, [r5, r2]
    3e34:	7825      	ldrb	r5, [r4, #0]
    3e36:	43b5      	bics	r5, r6
    3e38:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3e3a:	2a00      	cmp	r2, #0
    3e3c:	d129      	bne.n	3e92 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    3e3e:	2b00      	cmp	r3, #0
    3e40:	d112      	bne.n	3e68 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    3e42:	2503      	movs	r5, #3
    3e44:	2484      	movs	r4, #132	; 0x84
    3e46:	0064      	lsls	r4, r4, #1
    3e48:	6806      	ldr	r6, [r0, #0]
    3e4a:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3e4c:	2a03      	cmp	r2, #3
    3e4e:	d109      	bne.n	3e64 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3e50:	b249      	sxtb	r1, r1
    3e52:	2900      	cmp	r1, #0
    3e54:	db44      	blt.n	3ee0 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    3e56:	6802      	ldr	r2, [r0, #0]
    3e58:	015b      	lsls	r3, r3, #5
    3e5a:	18d3      	adds	r3, r2, r3
    3e5c:	3309      	adds	r3, #9
    3e5e:	33ff      	adds	r3, #255	; 0xff
    3e60:	2220      	movs	r2, #32
    3e62:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3e64:	2000      	movs	r0, #0
    3e66:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3e68:	b24c      	sxtb	r4, r1
    3e6a:	2c00      	cmp	r4, #0
    3e6c:	db08      	blt.n	3e80 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    3e6e:	015c      	lsls	r4, r3, #5
    3e70:	6805      	ldr	r5, [r0, #0]
    3e72:	46ac      	mov	ip, r5
    3e74:	4464      	add	r4, ip
    3e76:	3409      	adds	r4, #9
    3e78:	34ff      	adds	r4, #255	; 0xff
    3e7a:	2501      	movs	r5, #1
    3e7c:	7025      	strb	r5, [r4, #0]
    3e7e:	e7e5      	b.n	3e4c <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    3e80:	015c      	lsls	r4, r3, #5
    3e82:	6805      	ldr	r5, [r0, #0]
    3e84:	46ac      	mov	ip, r5
    3e86:	4464      	add	r4, ip
    3e88:	3409      	adds	r4, #9
    3e8a:	34ff      	adds	r4, #255	; 0xff
    3e8c:	2502      	movs	r5, #2
    3e8e:	7025      	strb	r5, [r4, #0]
    3e90:	e7dc      	b.n	3e4c <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3e92:	2a01      	cmp	r2, #1
    3e94:	d11a      	bne.n	3ecc <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    3e96:	2b00      	cmp	r3, #0
    3e98:	d105      	bne.n	3ea6 <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    3e9a:	6802      	ldr	r2, [r0, #0]
    3e9c:	210c      	movs	r1, #12
    3e9e:	3309      	adds	r3, #9
    3ea0:	33ff      	adds	r3, #255	; 0xff
    3ea2:	54d1      	strb	r1, [r2, r3]
    3ea4:	e7de      	b.n	3e64 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    3ea6:	b249      	sxtb	r1, r1
    3ea8:	2900      	cmp	r1, #0
    3eaa:	db07      	blt.n	3ebc <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    3eac:	6802      	ldr	r2, [r0, #0]
    3eae:	015b      	lsls	r3, r3, #5
    3eb0:	18d3      	adds	r3, r2, r3
    3eb2:	3309      	adds	r3, #9
    3eb4:	33ff      	adds	r3, #255	; 0xff
    3eb6:	2204      	movs	r2, #4
    3eb8:	701a      	strb	r2, [r3, #0]
    3eba:	e7d3      	b.n	3e64 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    3ebc:	6802      	ldr	r2, [r0, #0]
    3ebe:	015b      	lsls	r3, r3, #5
    3ec0:	18d3      	adds	r3, r2, r3
    3ec2:	3309      	adds	r3, #9
    3ec4:	33ff      	adds	r3, #255	; 0xff
    3ec6:	2208      	movs	r2, #8
    3ec8:	701a      	strb	r2, [r3, #0]
    3eca:	e7cb      	b.n	3e64 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3ecc:	2a02      	cmp	r2, #2
    3ece:	d1bd      	bne.n	3e4c <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    3ed0:	6802      	ldr	r2, [r0, #0]
    3ed2:	015b      	lsls	r3, r3, #5
    3ed4:	18d3      	adds	r3, r2, r3
    3ed6:	3309      	adds	r3, #9
    3ed8:	33ff      	adds	r3, #255	; 0xff
    3eda:	2210      	movs	r2, #16
    3edc:	701a      	strb	r2, [r3, #0]
    3ede:	e7c1      	b.n	3e64 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    3ee0:	6802      	ldr	r2, [r0, #0]
    3ee2:	015b      	lsls	r3, r3, #5
    3ee4:	18d3      	adds	r3, r2, r3
    3ee6:	3309      	adds	r3, #9
    3ee8:	33ff      	adds	r3, #255	; 0xff
    3eea:	2240      	movs	r2, #64	; 0x40
    3eec:	701a      	strb	r2, [r3, #0]
    3eee:	e7b9      	b.n	3e64 <usb_device_endpoint_disable_callback+0x40>
    3ef0:	00007f6c 	.word	0x00007f6c

00003ef4 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    3ef4:	2300      	movs	r3, #0
    3ef6:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    3ef8:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    3efa:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    3efc:	3301      	adds	r3, #1
    3efe:	70c3      	strb	r3, [r0, #3]
}
    3f00:	4770      	bx	lr
	...

00003f04 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    3f04:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    3f06:	780c      	ldrb	r4, [r1, #0]
    3f08:	230f      	movs	r3, #15
    3f0a:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3f0c:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    3f0e:	78ca      	ldrb	r2, [r1, #3]
    3f10:	2a04      	cmp	r2, #4
    3f12:	d870      	bhi.n	3ff6 <usb_device_endpoint_set_config+0xf2>
    3f14:	0092      	lsls	r2, r2, #2
    3f16:	4d89      	ldr	r5, [pc, #548]	; (413c <usb_device_endpoint_set_config+0x238>)
    3f18:	58aa      	ldr	r2, [r5, r2]
    3f1a:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    3f1c:	6802      	ldr	r2, [r0, #0]
    3f1e:	3308      	adds	r3, #8
    3f20:	015b      	lsls	r3, r3, #5
    3f22:	2100      	movs	r1, #0
    3f24:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    3f26:	2200      	movs	r2, #0
    3f28:	e082      	b.n	4030 <usb_device_endpoint_set_config+0x12c>
    3f2a:	015c      	lsls	r4, r3, #5
    3f2c:	6802      	ldr	r2, [r0, #0]
    3f2e:	4694      	mov	ip, r2
    3f30:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3f32:	2280      	movs	r2, #128	; 0x80
    3f34:	0052      	lsls	r2, r2, #1
    3f36:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    3f38:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3f3a:	076d      	lsls	r5, r5, #29
    3f3c:	d178      	bne.n	4030 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    3f3e:	32e4      	adds	r2, #228	; 0xe4
    3f40:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3f42:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    3f44:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3f46:	422e      	tst	r6, r5
    3f48:	d172      	bne.n	4030 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    3f4a:	3d5f      	subs	r5, #95	; 0x5f
    3f4c:	32e4      	adds	r2, #228	; 0xe4
    3f4e:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3f50:	001a      	movs	r2, r3
    3f52:	3208      	adds	r2, #8
    3f54:	0152      	lsls	r2, r2, #5
    3f56:	6804      	ldr	r4, [r0, #0]
    3f58:	18a4      	adds	r4, r4, r2
    3f5a:	352f      	adds	r5, #47	; 0x2f
    3f5c:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3f5e:	6800      	ldr	r0, [r0, #0]
    3f60:	1882      	adds	r2, r0, r2
    3f62:	2080      	movs	r0, #128	; 0x80
    3f64:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    3f66:	788a      	ldrb	r2, [r1, #2]
    3f68:	2a00      	cmp	r2, #0
    3f6a:	d01f      	beq.n	3fac <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3f6c:	0158      	lsls	r0, r3, #5
    3f6e:	4a74      	ldr	r2, [pc, #464]	; (4140 <usb_device_endpoint_set_config+0x23c>)
    3f70:	1812      	adds	r2, r2, r0
    3f72:	6854      	ldr	r4, [r2, #4]
    3f74:	2080      	movs	r0, #128	; 0x80
    3f76:	0600      	lsls	r0, r0, #24
    3f78:	4304      	orrs	r4, r0
    3f7a:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3f7c:	6954      	ldr	r4, [r2, #20]
    3f7e:	4320      	orrs	r0, r4
    3f80:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3f82:	2507      	movs	r5, #7
    3f84:	784c      	ldrb	r4, [r1, #1]
    3f86:	015a      	lsls	r2, r3, #5
    3f88:	4b6d      	ldr	r3, [pc, #436]	; (4140 <usb_device_endpoint_set_config+0x23c>)
    3f8a:	189b      	adds	r3, r3, r2
    3f8c:	6858      	ldr	r0, [r3, #4]
    3f8e:	402c      	ands	r4, r5
    3f90:	0724      	lsls	r4, r4, #28
    3f92:	4e6c      	ldr	r6, [pc, #432]	; (4144 <usb_device_endpoint_set_config+0x240>)
    3f94:	4030      	ands	r0, r6
    3f96:	4320      	orrs	r0, r4
    3f98:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3f9a:	7849      	ldrb	r1, [r1, #1]
    3f9c:	695a      	ldr	r2, [r3, #20]
    3f9e:	4029      	ands	r1, r5
    3fa0:	0709      	lsls	r1, r1, #28
    3fa2:	4032      	ands	r2, r6
    3fa4:	430a      	orrs	r2, r1
    3fa6:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    3fa8:	2200      	movs	r2, #0
    3faa:	e041      	b.n	4030 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3fac:	0158      	lsls	r0, r3, #5
    3fae:	4a64      	ldr	r2, [pc, #400]	; (4140 <usb_device_endpoint_set_config+0x23c>)
    3fb0:	1812      	adds	r2, r2, r0
    3fb2:	6850      	ldr	r0, [r2, #4]
    3fb4:	0040      	lsls	r0, r0, #1
    3fb6:	0840      	lsrs	r0, r0, #1
    3fb8:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3fba:	6950      	ldr	r0, [r2, #20]
    3fbc:	0040      	lsls	r0, r0, #1
    3fbe:	0840      	lsrs	r0, r0, #1
    3fc0:	6150      	str	r0, [r2, #20]
    3fc2:	e7de      	b.n	3f82 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    3fc4:	2c00      	cmp	r4, #0
    3fc6:	db35      	blt.n	4034 <usb_device_endpoint_set_config+0x130>
    3fc8:	015d      	lsls	r5, r3, #5
    3fca:	6802      	ldr	r2, [r0, #0]
    3fcc:	4694      	mov	ip, r2
    3fce:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3fd0:	2280      	movs	r2, #128	; 0x80
    3fd2:	0052      	lsls	r2, r2, #1
    3fd4:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    3fd6:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3fd8:	0776      	lsls	r6, r6, #29
    3fda:	d129      	bne.n	4030 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    3fdc:	2680      	movs	r6, #128	; 0x80
    3fde:	0076      	lsls	r6, r6, #1
    3fe0:	5daa      	ldrb	r2, [r5, r6]
    3fe2:	2702      	movs	r7, #2
    3fe4:	433a      	orrs	r2, r7
    3fe6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3fe8:	6802      	ldr	r2, [r0, #0]
    3fea:	0018      	movs	r0, r3
    3fec:	3008      	adds	r0, #8
    3fee:	0140      	lsls	r0, r0, #5
    3ff0:	1812      	adds	r2, r2, r0
    3ff2:	2040      	movs	r0, #64	; 0x40
    3ff4:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3ff6:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3ff8:	784f      	ldrb	r7, [r1, #1]
    3ffa:	005d      	lsls	r5, r3, #1
    3ffc:	18ad      	adds	r5, r5, r2
    3ffe:	012d      	lsls	r5, r5, #4
    4000:	4e4f      	ldr	r6, [pc, #316]	; (4140 <usb_device_endpoint_set_config+0x23c>)
    4002:	1975      	adds	r5, r6, r5
    4004:	6868      	ldr	r0, [r5, #4]
    4006:	2407      	movs	r4, #7
    4008:	403c      	ands	r4, r7
    400a:	0724      	lsls	r4, r4, #28
    400c:	4e4d      	ldr	r6, [pc, #308]	; (4144 <usb_device_endpoint_set_config+0x240>)
    400e:	4030      	ands	r0, r6
    4010:	4320      	orrs	r0, r4
    4012:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    4014:	7889      	ldrb	r1, [r1, #2]
    4016:	2900      	cmp	r1, #0
    4018:	d000      	beq.n	401c <usb_device_endpoint_set_config+0x118>
    401a:	e088      	b.n	412e <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    401c:	005b      	lsls	r3, r3, #1
    401e:	189b      	adds	r3, r3, r2
    4020:	011b      	lsls	r3, r3, #4
    4022:	4a47      	ldr	r2, [pc, #284]	; (4140 <usb_device_endpoint_set_config+0x23c>)
    4024:	18d3      	adds	r3, r2, r3
    4026:	685a      	ldr	r2, [r3, #4]
    4028:	0052      	lsls	r2, r2, #1
    402a:	0852      	lsrs	r2, r2, #1
    402c:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    402e:	2200      	movs	r2, #0
}
    4030:	0010      	movs	r0, r2
    4032:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4034:	015d      	lsls	r5, r3, #5
    4036:	6802      	ldr	r2, [r0, #0]
    4038:	4694      	mov	ip, r2
    403a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    403c:	2280      	movs	r2, #128	; 0x80
    403e:	0052      	lsls	r2, r2, #1
    4040:	5caf      	ldrb	r7, [r5, r2]
    4042:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    4044:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4046:	4237      	tst	r7, r6
    4048:	d1f2      	bne.n	4030 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    404a:	3690      	adds	r6, #144	; 0x90
    404c:	5daa      	ldrb	r2, [r5, r6]
    404e:	2720      	movs	r7, #32
    4050:	433a      	orrs	r2, r7
    4052:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4054:	6802      	ldr	r2, [r0, #0]
    4056:	0018      	movs	r0, r3
    4058:	3008      	adds	r0, #8
    405a:	0140      	lsls	r0, r0, #5
    405c:	1812      	adds	r2, r2, r0
    405e:	2080      	movs	r0, #128	; 0x80
    4060:	7110      	strb	r0, [r2, #4]
    4062:	e7c8      	b.n	3ff6 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    4064:	2c00      	cmp	r4, #0
    4066:	db17      	blt.n	4098 <usb_device_endpoint_set_config+0x194>
    4068:	015d      	lsls	r5, r3, #5
    406a:	6802      	ldr	r2, [r0, #0]
    406c:	4694      	mov	ip, r2
    406e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4070:	2280      	movs	r2, #128	; 0x80
    4072:	0052      	lsls	r2, r2, #1
    4074:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    4076:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4078:	0776      	lsls	r6, r6, #29
    407a:	d1d9      	bne.n	4030 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    407c:	2680      	movs	r6, #128	; 0x80
    407e:	0076      	lsls	r6, r6, #1
    4080:	5daa      	ldrb	r2, [r5, r6]
    4082:	2703      	movs	r7, #3
    4084:	433a      	orrs	r2, r7
    4086:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4088:	6802      	ldr	r2, [r0, #0]
    408a:	0018      	movs	r0, r3
    408c:	3008      	adds	r0, #8
    408e:	0140      	lsls	r0, r0, #5
    4090:	1812      	adds	r2, r2, r0
    4092:	2040      	movs	r0, #64	; 0x40
    4094:	7150      	strb	r0, [r2, #5]
    4096:	e7ae      	b.n	3ff6 <usb_device_endpoint_set_config+0xf2>
    4098:	015d      	lsls	r5, r3, #5
    409a:	6802      	ldr	r2, [r0, #0]
    409c:	4694      	mov	ip, r2
    409e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    40a0:	2280      	movs	r2, #128	; 0x80
    40a2:	0052      	lsls	r2, r2, #1
    40a4:	5caf      	ldrb	r7, [r5, r2]
    40a6:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    40a8:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    40aa:	4237      	tst	r7, r6
    40ac:	d1c0      	bne.n	4030 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    40ae:	3690      	adds	r6, #144	; 0x90
    40b0:	5daa      	ldrb	r2, [r5, r6]
    40b2:	2730      	movs	r7, #48	; 0x30
    40b4:	433a      	orrs	r2, r7
    40b6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    40b8:	6802      	ldr	r2, [r0, #0]
    40ba:	0018      	movs	r0, r3
    40bc:	3008      	adds	r0, #8
    40be:	0140      	lsls	r0, r0, #5
    40c0:	1812      	adds	r2, r2, r0
    40c2:	2080      	movs	r0, #128	; 0x80
    40c4:	7110      	strb	r0, [r2, #4]
    40c6:	e796      	b.n	3ff6 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    40c8:	2c00      	cmp	r4, #0
    40ca:	db17      	blt.n	40fc <usb_device_endpoint_set_config+0x1f8>
    40cc:	015d      	lsls	r5, r3, #5
    40ce:	6802      	ldr	r2, [r0, #0]
    40d0:	4694      	mov	ip, r2
    40d2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    40d4:	2280      	movs	r2, #128	; 0x80
    40d6:	0052      	lsls	r2, r2, #1
    40d8:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    40da:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    40dc:	0776      	lsls	r6, r6, #29
    40de:	d1a7      	bne.n	4030 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    40e0:	2680      	movs	r6, #128	; 0x80
    40e2:	0076      	lsls	r6, r6, #1
    40e4:	5daa      	ldrb	r2, [r5, r6]
    40e6:	2704      	movs	r7, #4
    40e8:	433a      	orrs	r2, r7
    40ea:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    40ec:	6802      	ldr	r2, [r0, #0]
    40ee:	0018      	movs	r0, r3
    40f0:	3008      	adds	r0, #8
    40f2:	0140      	lsls	r0, r0, #5
    40f4:	1812      	adds	r2, r2, r0
    40f6:	2040      	movs	r0, #64	; 0x40
    40f8:	7150      	strb	r0, [r2, #5]
    40fa:	e77c      	b.n	3ff6 <usb_device_endpoint_set_config+0xf2>
    40fc:	015d      	lsls	r5, r3, #5
    40fe:	6802      	ldr	r2, [r0, #0]
    4100:	4694      	mov	ip, r2
    4102:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4104:	2280      	movs	r2, #128	; 0x80
    4106:	0052      	lsls	r2, r2, #1
    4108:	5caf      	ldrb	r7, [r5, r2]
    410a:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    410c:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    410e:	4237      	tst	r7, r6
    4110:	d000      	beq.n	4114 <usb_device_endpoint_set_config+0x210>
    4112:	e78d      	b.n	4030 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    4114:	3690      	adds	r6, #144	; 0x90
    4116:	5daa      	ldrb	r2, [r5, r6]
    4118:	2740      	movs	r7, #64	; 0x40
    411a:	433a      	orrs	r2, r7
    411c:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    411e:	6802      	ldr	r2, [r0, #0]
    4120:	0018      	movs	r0, r3
    4122:	3008      	adds	r0, #8
    4124:	0140      	lsls	r0, r0, #5
    4126:	1812      	adds	r2, r2, r0
    4128:	2080      	movs	r0, #128	; 0x80
    412a:	7110      	strb	r0, [r2, #4]
    412c:	e763      	b.n	3ff6 <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    412e:	6869      	ldr	r1, [r5, #4]
    4130:	2380      	movs	r3, #128	; 0x80
    4132:	061b      	lsls	r3, r3, #24
    4134:	430b      	orrs	r3, r1
    4136:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    4138:	2200      	movs	r2, #0
    413a:	e779      	b.n	4030 <usb_device_endpoint_set_config+0x12c>
    413c:	00007f48 	.word	0x00007f48
    4140:	200005e4 	.word	0x200005e4
    4144:	8fffffff 	.word	0x8fffffff

00004148 <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4148:	230f      	movs	r3, #15
    414a:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    414c:	b249      	sxtb	r1, r1
    414e:	2900      	cmp	r1, #0
    4150:	db09      	blt.n	4166 <usb_device_endpoint_is_configured+0x1e>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    4152:	6802      	ldr	r2, [r0, #0]
    4154:	3308      	adds	r3, #8
    4156:	015b      	lsls	r3, r3, #5
    4158:	5c98      	ldrb	r0, [r3, r2]
    415a:	0740      	lsls	r0, r0, #29
    415c:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    415e:	1e43      	subs	r3, r0, #1
    4160:	4198      	sbcs	r0, r3
    4162:	b2c0      	uxtb	r0, r0
}
    4164:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    4166:	6802      	ldr	r2, [r0, #0]
    4168:	3308      	adds	r3, #8
    416a:	015b      	lsls	r3, r3, #5
    416c:	5c98      	ldrb	r0, [r3, r2]
    416e:	0640      	lsls	r0, r0, #25
    4170:	0f40      	lsrs	r0, r0, #29
    4172:	e7f4      	b.n	415e <usb_device_endpoint_is_configured+0x16>

00004174 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    4174:	230f      	movs	r3, #15
    4176:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    4178:	b249      	sxtb	r1, r1
    417a:	2900      	cmp	r1, #0
    417c:	db0a      	blt.n	4194 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    417e:	3308      	adds	r3, #8
    4180:	015b      	lsls	r3, r3, #5
    4182:	6802      	ldr	r2, [r0, #0]
    4184:	18d2      	adds	r2, r2, r3
    4186:	2140      	movs	r1, #64	; 0x40
    4188:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    418a:	6802      	ldr	r2, [r0, #0]
    418c:	18d3      	adds	r3, r2, r3
    418e:	2201      	movs	r2, #1
    4190:	71da      	strb	r2, [r3, #7]
	}
}
    4192:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4194:	3308      	adds	r3, #8
    4196:	015b      	lsls	r3, r3, #5
    4198:	6802      	ldr	r2, [r0, #0]
    419a:	18d2      	adds	r2, r2, r3
    419c:	2180      	movs	r1, #128	; 0x80
    419e:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    41a0:	6802      	ldr	r2, [r0, #0]
    41a2:	18d3      	adds	r3, r2, r3
    41a4:	2202      	movs	r2, #2
    41a6:	71da      	strb	r2, [r3, #7]
    41a8:	e7f3      	b.n	4192 <usb_device_endpoint_abort_job+0x1e>

000041aa <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    41aa:	230f      	movs	r3, #15
    41ac:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    41ae:	b249      	sxtb	r1, r1
    41b0:	2900      	cmp	r1, #0
    41b2:	db07      	blt.n	41c4 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    41b4:	6802      	ldr	r2, [r0, #0]
    41b6:	3308      	adds	r3, #8
    41b8:	015b      	lsls	r3, r3, #5
    41ba:	18d3      	adds	r3, r2, r3
    41bc:	7998      	ldrb	r0, [r3, #6]
    41be:	06c0      	lsls	r0, r0, #27
    41c0:	0fc0      	lsrs	r0, r0, #31
	}
}
    41c2:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    41c4:	6802      	ldr	r2, [r0, #0]
    41c6:	3308      	adds	r3, #8
    41c8:	015b      	lsls	r3, r3, #5
    41ca:	18d3      	adds	r3, r2, r3
    41cc:	7998      	ldrb	r0, [r3, #6]
    41ce:	0680      	lsls	r0, r0, #26
    41d0:	0fc0      	lsrs	r0, r0, #31
    41d2:	e7f6      	b.n	41c2 <usb_device_endpoint_is_halted+0x18>

000041d4 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    41d4:	230f      	movs	r3, #15
    41d6:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    41d8:	b249      	sxtb	r1, r1
    41da:	2900      	cmp	r1, #0
    41dc:	db06      	blt.n	41ec <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    41de:	6802      	ldr	r2, [r0, #0]
    41e0:	3308      	adds	r3, #8
    41e2:	015b      	lsls	r3, r3, #5
    41e4:	18d3      	adds	r3, r2, r3
    41e6:	2210      	movs	r2, #16
    41e8:	715a      	strb	r2, [r3, #5]
	}
}
    41ea:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    41ec:	6802      	ldr	r2, [r0, #0]
    41ee:	3308      	adds	r3, #8
    41f0:	015b      	lsls	r3, r3, #5
    41f2:	18d3      	adds	r3, r2, r3
    41f4:	2220      	movs	r2, #32
    41f6:	715a      	strb	r2, [r3, #5]
    41f8:	e7f7      	b.n	41ea <usb_device_endpoint_set_halt+0x16>

000041fa <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    41fa:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    41fc:	230f      	movs	r3, #15
    41fe:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    4200:	b249      	sxtb	r1, r1
    4202:	2900      	cmp	r1, #0
    4204:	db1d      	blt.n	4242 <usb_device_endpoint_clear_halt+0x48>
    4206:	0159      	lsls	r1, r3, #5
    4208:	6802      	ldr	r2, [r0, #0]
    420a:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    420c:	2483      	movs	r4, #131	; 0x83
    420e:	0064      	lsls	r4, r4, #1
    4210:	5d14      	ldrb	r4, [r2, r4]
    4212:	06e4      	lsls	r4, r4, #27
    4214:	d514      	bpl.n	4240 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    4216:	2510      	movs	r5, #16
    4218:	2482      	movs	r4, #130	; 0x82
    421a:	0064      	lsls	r4, r4, #1
    421c:	5515      	strb	r5, [r2, r4]
    421e:	6802      	ldr	r2, [r0, #0]
    4220:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4222:	2108      	movs	r1, #8
    4224:	31ff      	adds	r1, #255	; 0xff
    4226:	5c51      	ldrb	r1, [r2, r1]
    4228:	0689      	lsls	r1, r1, #26
    422a:	d509      	bpl.n	4240 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    422c:	3ce4      	subs	r4, #228	; 0xe4
    422e:	2108      	movs	r1, #8
    4230:	31ff      	adds	r1, #255	; 0xff
    4232:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    4234:	6802      	ldr	r2, [r0, #0]
    4236:	3308      	adds	r3, #8
    4238:	015b      	lsls	r3, r3, #5
    423a:	18d3      	adds	r3, r2, r3
    423c:	2201      	movs	r2, #1
    423e:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    4240:	bd30      	pop	{r4, r5, pc}
    4242:	0159      	lsls	r1, r3, #5
    4244:	6802      	ldr	r2, [r0, #0]
    4246:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    4248:	2483      	movs	r4, #131	; 0x83
    424a:	0064      	lsls	r4, r4, #1
    424c:	5d14      	ldrb	r4, [r2, r4]
    424e:	06a4      	lsls	r4, r4, #26
    4250:	d5f6      	bpl.n	4240 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    4252:	2520      	movs	r5, #32
    4254:	2482      	movs	r4, #130	; 0x82
    4256:	0064      	lsls	r4, r4, #1
    4258:	5515      	strb	r5, [r2, r4]
    425a:	6802      	ldr	r2, [r0, #0]
    425c:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    425e:	2108      	movs	r1, #8
    4260:	31ff      	adds	r1, #255	; 0xff
    4262:	5c51      	ldrb	r1, [r2, r1]
    4264:	0649      	lsls	r1, r1, #25
    4266:	d5eb      	bpl.n	4240 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4268:	3cc4      	subs	r4, #196	; 0xc4
    426a:	2108      	movs	r1, #8
    426c:	31ff      	adds	r1, #255	; 0xff
    426e:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    4270:	6802      	ldr	r2, [r0, #0]
    4272:	3308      	adds	r3, #8
    4274:	015b      	lsls	r3, r3, #5
    4276:	18d3      	adds	r3, r2, r3
    4278:	2202      	movs	r2, #2
    427a:	711a      	strb	r2, [r3, #4]
    427c:	e7e0      	b.n	4240 <usb_device_endpoint_clear_halt+0x46>
	...

00004280 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4280:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    4282:	000c      	movs	r4, r1
    4284:	3408      	adds	r4, #8
    4286:	0164      	lsls	r4, r4, #5
    4288:	6805      	ldr	r5, [r0, #0]
    428a:	5d64      	ldrb	r4, [r4, r5]
    428c:	0664      	lsls	r4, r4, #25
    428e:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    4290:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    4292:	2c00      	cmp	r4, #0
    4294:	d101      	bne.n	429a <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    4296:	0028      	movs	r0, r5
    4298:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    429a:	014c      	lsls	r4, r1, #5
    429c:	4d0b      	ldr	r5, [pc, #44]	; (42cc <usb_device_endpoint_write_buffer_job+0x4c>)
    429e:	192d      	adds	r5, r5, r4
    42a0:	002c      	movs	r4, r5
    42a2:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    42a4:	696a      	ldr	r2, [r5, #20]
    42a6:	4d0a      	ldr	r5, [pc, #40]	; (42d0 <usb_device_endpoint_write_buffer_job+0x50>)
    42a8:	402a      	ands	r2, r5
    42aa:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    42ac:	6962      	ldr	r2, [r4, #20]
    42ae:	049b      	lsls	r3, r3, #18
    42b0:	0c9b      	lsrs	r3, r3, #18
    42b2:	0b92      	lsrs	r2, r2, #14
    42b4:	0392      	lsls	r2, r2, #14
    42b6:	4313      	orrs	r3, r2
    42b8:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    42ba:	6803      	ldr	r3, [r0, #0]
    42bc:	3108      	adds	r1, #8
    42be:	0149      	lsls	r1, r1, #5
    42c0:	1859      	adds	r1, r3, r1
    42c2:	2380      	movs	r3, #128	; 0x80
    42c4:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    42c6:	2500      	movs	r5, #0
    42c8:	e7e5      	b.n	4296 <usb_device_endpoint_write_buffer_job+0x16>
    42ca:	46c0      	nop			; (mov r8, r8)
    42cc:	200005e4 	.word	0x200005e4
    42d0:	f0003fff 	.word	0xf0003fff

000042d4 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    42d4:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    42d6:	000c      	movs	r4, r1
    42d8:	3408      	adds	r4, #8
    42da:	0164      	lsls	r4, r4, #5
    42dc:	6805      	ldr	r5, [r0, #0]
    42de:	5d64      	ldrb	r4, [r4, r5]
    42e0:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    42e2:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    42e4:	2c00      	cmp	r4, #0
    42e6:	d101      	bne.n	42ec <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    42e8:	0028      	movs	r0, r5
    42ea:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    42ec:	4c0b      	ldr	r4, [pc, #44]	; (431c <usb_device_endpoint_read_buffer_job+0x48>)
    42ee:	014d      	lsls	r5, r1, #5
    42f0:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    42f2:	1962      	adds	r2, r4, r5
    42f4:	6854      	ldr	r4, [r2, #4]
    42f6:	049b      	lsls	r3, r3, #18
    42f8:	091b      	lsrs	r3, r3, #4
    42fa:	4d09      	ldr	r5, [pc, #36]	; (4320 <usb_device_endpoint_read_buffer_job+0x4c>)
    42fc:	402c      	ands	r4, r5
    42fe:	4323      	orrs	r3, r4
    4300:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4302:	6853      	ldr	r3, [r2, #4]
    4304:	0b9b      	lsrs	r3, r3, #14
    4306:	039b      	lsls	r3, r3, #14
    4308:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    430a:	6803      	ldr	r3, [r0, #0]
    430c:	3108      	adds	r1, #8
    430e:	0149      	lsls	r1, r1, #5
    4310:	1859      	adds	r1, r3, r1
    4312:	2340      	movs	r3, #64	; 0x40
    4314:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    4316:	2500      	movs	r5, #0
    4318:	e7e6      	b.n	42e8 <usb_device_endpoint_read_buffer_job+0x14>
    431a:	46c0      	nop			; (mov r8, r8)
    431c:	200005e4 	.word	0x200005e4
    4320:	f0003fff 	.word	0xf0003fff

00004324 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    4324:	4b09      	ldr	r3, [pc, #36]	; (434c <usb_device_endpoint_setup_buffer_job+0x28>)
    4326:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    4328:	685a      	ldr	r2, [r3, #4]
    432a:	4909      	ldr	r1, [pc, #36]	; (4350 <usb_device_endpoint_setup_buffer_job+0x2c>)
    432c:	4011      	ands	r1, r2
    432e:	2280      	movs	r2, #128	; 0x80
    4330:	0292      	lsls	r2, r2, #10
    4332:	430a      	orrs	r2, r1
    4334:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4336:	685a      	ldr	r2, [r3, #4]
    4338:	0b92      	lsrs	r2, r2, #14
    433a:	0392      	lsls	r2, r2, #14
    433c:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    433e:	6802      	ldr	r2, [r0, #0]
    4340:	2140      	movs	r1, #64	; 0x40
    4342:	2382      	movs	r3, #130	; 0x82
    4344:	005b      	lsls	r3, r3, #1
    4346:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    4348:	2000      	movs	r0, #0
    434a:	4770      	bx	lr
    434c:	200005e4 	.word	0x200005e4
    4350:	f0003fff 	.word	0xf0003fff

00004354 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    4354:	6802      	ldr	r2, [r0, #0]
    4356:	7813      	ldrb	r3, [r2, #0]
    4358:	2102      	movs	r1, #2
    435a:	430b      	orrs	r3, r1
    435c:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    435e:	6802      	ldr	r2, [r0, #0]
    4360:	7893      	ldrb	r3, [r2, #2]
    4362:	2b02      	cmp	r3, #2
    4364:	d0fc      	beq.n	4360 <usb_enable+0xc>
}
    4366:	4770      	bx	lr

00004368 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    4368:	b5f0      	push	{r4, r5, r6, r7, lr}
    436a:	46de      	mov	lr, fp
    436c:	4657      	mov	r7, sl
    436e:	464e      	mov	r6, r9
    4370:	4645      	mov	r5, r8
    4372:	b5e0      	push	{r5, r6, r7, lr}
    4374:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    4376:	4bc2      	ldr	r3, [pc, #776]	; (4680 <USB_Handler+0x318>)
    4378:	681f      	ldr	r7, [r3, #0]
    437a:	683d      	ldr	r5, [r7, #0]
    437c:	782b      	ldrb	r3, [r5, #0]
    437e:	09db      	lsrs	r3, r3, #7
    4380:	d114      	bne.n	43ac <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    4382:	8c2e      	ldrh	r6, [r5, #32]
    4384:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    4386:	2e00      	cmp	r6, #0
    4388:	d000      	beq.n	438c <USB_Handler+0x24>
    438a:	e1a9      	b.n	46e0 <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    438c:	8bae      	ldrh	r6, [r5, #28]
    438e:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    4390:	23ab      	movs	r3, #171	; 0xab
    4392:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    4394:	5afb      	ldrh	r3, [r7, r3]
    4396:	22aa      	movs	r2, #170	; 0xaa
    4398:	0052      	lsls	r2, r2, #1
    439a:	5abd      	ldrh	r5, [r7, r2]
    439c:	401d      	ands	r5, r3
    439e:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    43a0:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    43a2:	4fb8      	ldr	r7, [pc, #736]	; (4684 <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    43a4:	4bb6      	ldr	r3, [pc, #728]	; (4680 <USB_Handler+0x318>)
    43a6:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    43a8:	4698      	mov	r8, r3
    43aa:	e184      	b.n	46b6 <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    43ac:	8c2b      	ldrh	r3, [r5, #32]
    43ae:	b29b      	uxth	r3, r3
    43b0:	2b00      	cmp	r3, #0
    43b2:	d100      	bne.n	43b6 <USB_Handler+0x4e>
    43b4:	e0de      	b.n	4574 <USB_Handler+0x20c>
    43b6:	8c28      	ldrh	r0, [r5, #32]
    43b8:	b280      	uxth	r0, r0
    43ba:	4bb3      	ldr	r3, [pc, #716]	; (4688 <USB_Handler+0x320>)
    43bc:	4798      	blx	r3
    43be:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    43c0:	281f      	cmp	r0, #31
    43c2:	d900      	bls.n	43c6 <USB_Handler+0x5e>
    43c4:	e0d6      	b.n	4574 <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    43c6:	0003      	movs	r3, r0
    43c8:	3308      	adds	r3, #8
    43ca:	015b      	lsls	r3, r3, #5
    43cc:	18ed      	adds	r5, r5, r3
    43ce:	79ed      	ldrb	r5, [r5, #7]
    43d0:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    43d2:	07ab      	lsls	r3, r5, #30
    43d4:	d041      	beq.n	445a <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    43d6:	4aad      	ldr	r2, [pc, #692]	; (468c <USB_Handler+0x324>)
    43d8:	2301      	movs	r3, #1
    43da:	4083      	lsls	r3, r0
    43dc:	6811      	ldr	r1, [r2, #0]
    43de:	4399      	bics	r1, r3
    43e0:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    43e2:	0003      	movs	r3, r0
    43e4:	3308      	adds	r3, #8
    43e6:	015b      	lsls	r3, r3, #5
    43e8:	683a      	ldr	r2, [r7, #0]
    43ea:	4694      	mov	ip, r2
    43ec:	4463      	add	r3, ip
    43ee:	2203      	movs	r2, #3
    43f0:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    43f2:	183b      	adds	r3, r7, r0
    43f4:	33ae      	adds	r3, #174	; 0xae
    43f6:	781b      	ldrb	r3, [r3, #0]
    43f8:	07db      	lsls	r3, r3, #31
    43fa:	d52e      	bpl.n	445a <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    43fc:	4ba4      	ldr	r3, [pc, #656]	; (4690 <USB_Handler+0x328>)
    43fe:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    4400:	683a      	ldr	r2, [r7, #0]
    4402:	0003      	movs	r3, r0
    4404:	3308      	adds	r3, #8
    4406:	015b      	lsls	r3, r3, #5
    4408:	5c9b      	ldrb	r3, [r3, r2]
    440a:	079b      	lsls	r3, r3, #30
    440c:	0f9b      	lsrs	r3, r3, #30
    440e:	2b01      	cmp	r3, #1
    4410:	d100      	bne.n	4414 <USB_Handler+0xac>
    4412:	e081      	b.n	4518 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4414:	0142      	lsls	r2, r0, #5
    4416:	4b9f      	ldr	r3, [pc, #636]	; (4694 <USB_Handler+0x32c>)
    4418:	189b      	adds	r3, r3, r2
    441a:	685a      	ldr	r2, [r3, #4]
    441c:	0112      	lsls	r2, r2, #4
    441e:	0c92      	lsrs	r2, r2, #18
    4420:	b290      	uxth	r0, r2
    4422:	499b      	ldr	r1, [pc, #620]	; (4690 <USB_Handler+0x328>)
    4424:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4426:	685a      	ldr	r2, [r3, #4]
    4428:	0492      	lsls	r2, r2, #18
    442a:	0c92      	lsrs	r2, r2, #18
    442c:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    442e:	685a      	ldr	r2, [r3, #4]
    4430:	4999      	ldr	r1, [pc, #612]	; (4698 <USB_Handler+0x330>)
    4432:	400a      	ands	r2, r1
    4434:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    4436:	2800      	cmp	r0, #0
    4438:	d107      	bne.n	444a <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    443a:	0162      	lsls	r2, r4, #5
    443c:	4b95      	ldr	r3, [pc, #596]	; (4694 <USB_Handler+0x32c>)
    443e:	189b      	adds	r3, r3, r2
    4440:	685b      	ldr	r3, [r3, #4]
    4442:	049b      	lsls	r3, r3, #18
    4444:	0c9b      	lsrs	r3, r3, #18
    4446:	4a92      	ldr	r2, [pc, #584]	; (4690 <USB_Handler+0x328>)
    4448:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    444a:	4b8d      	ldr	r3, [pc, #564]	; (4680 <USB_Handler+0x318>)
    444c:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    444e:	1ca3      	adds	r3, r4, #2
    4450:	011b      	lsls	r3, r3, #4
    4452:	18c3      	adds	r3, r0, r3
    4454:	685b      	ldr	r3, [r3, #4]
    4456:	498e      	ldr	r1, [pc, #568]	; (4690 <USB_Handler+0x328>)
    4458:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    445a:	076b      	lsls	r3, r5, #29
    445c:	d50e      	bpl.n	447c <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    445e:	4a8b      	ldr	r2, [pc, #556]	; (468c <USB_Handler+0x324>)
    4460:	2301      	movs	r3, #1
    4462:	40a3      	lsls	r3, r4
    4464:	6811      	ldr	r1, [r2, #0]
    4466:	4399      	bics	r1, r3
    4468:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    446a:	4b85      	ldr	r3, [pc, #532]	; (4680 <USB_Handler+0x318>)
    446c:	681b      	ldr	r3, [r3, #0]
    446e:	681b      	ldr	r3, [r3, #0]
    4470:	0022      	movs	r2, r4
    4472:	3208      	adds	r2, #8
    4474:	0152      	lsls	r2, r2, #5
    4476:	189b      	adds	r3, r3, r2
    4478:	2204      	movs	r2, #4
    447a:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    447c:	072b      	lsls	r3, r5, #28
    447e:	d514      	bpl.n	44aa <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4480:	4a82      	ldr	r2, [pc, #520]	; (468c <USB_Handler+0x324>)
    4482:	2301      	movs	r3, #1
    4484:	40a3      	lsls	r3, r4
    4486:	6811      	ldr	r1, [r2, #0]
    4488:	4399      	bics	r1, r3
    448a:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    448c:	4b7c      	ldr	r3, [pc, #496]	; (4680 <USB_Handler+0x318>)
    448e:	6818      	ldr	r0, [r3, #0]
    4490:	0023      	movs	r3, r4
    4492:	3308      	adds	r3, #8
    4494:	015b      	lsls	r3, r3, #5
    4496:	6802      	ldr	r2, [r0, #0]
    4498:	4694      	mov	ip, r2
    449a:	4463      	add	r3, ip
    449c:	2208      	movs	r2, #8
    449e:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    44a0:	1903      	adds	r3, r0, r4
    44a2:	33ae      	adds	r3, #174	; 0xae
    44a4:	781b      	ldrb	r3, [r3, #0]
    44a6:	079b      	lsls	r3, r3, #30
    44a8:	d447      	bmi.n	453a <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    44aa:	06eb      	lsls	r3, r5, #27
    44ac:	d514      	bpl.n	44d8 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    44ae:	4a77      	ldr	r2, [pc, #476]	; (468c <USB_Handler+0x324>)
    44b0:	2301      	movs	r3, #1
    44b2:	40a3      	lsls	r3, r4
    44b4:	6811      	ldr	r1, [r2, #0]
    44b6:	4399      	bics	r1, r3
    44b8:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    44ba:	4b71      	ldr	r3, [pc, #452]	; (4680 <USB_Handler+0x318>)
    44bc:	6818      	ldr	r0, [r3, #0]
    44be:	0023      	movs	r3, r4
    44c0:	3308      	adds	r3, #8
    44c2:	015b      	lsls	r3, r3, #5
    44c4:	6802      	ldr	r2, [r0, #0]
    44c6:	4694      	mov	ip, r2
    44c8:	4463      	add	r3, ip
    44ca:	2210      	movs	r2, #16
    44cc:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    44ce:	1903      	adds	r3, r0, r4
    44d0:	33ae      	adds	r3, #174	; 0xae
    44d2:	781b      	ldrb	r3, [r3, #0]
    44d4:	075b      	lsls	r3, r3, #29
    44d6:	d43e      	bmi.n	4556 <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    44d8:	06ab      	lsls	r3, r5, #26
    44da:	d400      	bmi.n	44de <USB_Handler+0x176>
    44dc:	e0b0      	b.n	4640 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    44de:	4a6b      	ldr	r2, [pc, #428]	; (468c <USB_Handler+0x324>)
    44e0:	2301      	movs	r3, #1
    44e2:	40a3      	lsls	r3, r4
    44e4:	6811      	ldr	r1, [r2, #0]
    44e6:	4399      	bics	r1, r3
    44e8:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    44ea:	4b65      	ldr	r3, [pc, #404]	; (4680 <USB_Handler+0x318>)
    44ec:	6818      	ldr	r0, [r3, #0]
    44ee:	0023      	movs	r3, r4
    44f0:	3308      	adds	r3, #8
    44f2:	015b      	lsls	r3, r3, #5
    44f4:	6802      	ldr	r2, [r0, #0]
    44f6:	4694      	mov	ip, r2
    44f8:	4463      	add	r3, ip
    44fa:	2220      	movs	r2, #32
    44fc:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    44fe:	1903      	adds	r3, r0, r4
    4500:	33ae      	adds	r3, #174	; 0xae
    4502:	781b      	ldrb	r3, [r3, #0]
    4504:	071b      	lsls	r3, r3, #28
    4506:	d400      	bmi.n	450a <USB_Handler+0x1a2>
    4508:	e09a      	b.n	4640 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    450a:	4961      	ldr	r1, [pc, #388]	; (4690 <USB_Handler+0x328>)
    450c:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    450e:	0124      	lsls	r4, r4, #4
    4510:	1904      	adds	r4, r0, r4
    4512:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4514:	4798      	blx	r3
    4516:	e093      	b.n	4640 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4518:	0142      	lsls	r2, r0, #5
    451a:	4b5e      	ldr	r3, [pc, #376]	; (4694 <USB_Handler+0x32c>)
    451c:	189b      	adds	r3, r3, r2
    451e:	685a      	ldr	r2, [r3, #4]
    4520:	0492      	lsls	r2, r2, #18
    4522:	0c92      	lsrs	r2, r2, #18
    4524:	495a      	ldr	r1, [pc, #360]	; (4690 <USB_Handler+0x328>)
    4526:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4528:	685a      	ldr	r2, [r3, #4]
    452a:	0112      	lsls	r2, r2, #4
    452c:	0c92      	lsrs	r2, r2, #18
    452e:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4530:	685a      	ldr	r2, [r3, #4]
    4532:	0b92      	lsrs	r2, r2, #14
    4534:	0392      	lsls	r2, r2, #14
    4536:	605a      	str	r2, [r3, #4]
    4538:	e787      	b.n	444a <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    453a:	4955      	ldr	r1, [pc, #340]	; (4690 <USB_Handler+0x328>)
    453c:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    453e:	0162      	lsls	r2, r4, #5
    4540:	4b54      	ldr	r3, [pc, #336]	; (4694 <USB_Handler+0x32c>)
    4542:	189b      	adds	r3, r3, r2
    4544:	89db      	ldrh	r3, [r3, #14]
    4546:	221f      	movs	r2, #31
    4548:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    454a:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    454c:	0123      	lsls	r3, r4, #4
    454e:	18c3      	adds	r3, r0, r3
    4550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4552:	4798      	blx	r3
    4554:	e7a9      	b.n	44aa <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    4556:	494e      	ldr	r1, [pc, #312]	; (4690 <USB_Handler+0x328>)
    4558:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    455a:	0162      	lsls	r2, r4, #5
    455c:	4b4d      	ldr	r3, [pc, #308]	; (4694 <USB_Handler+0x32c>)
    455e:	189b      	adds	r3, r3, r2
    4560:	685b      	ldr	r3, [r3, #4]
    4562:	011b      	lsls	r3, r3, #4
    4564:	0c9b      	lsrs	r3, r3, #18
    4566:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    4568:	0123      	lsls	r3, r4, #4
    456a:	18c3      	adds	r3, r0, r3
    456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    456e:	2100      	movs	r1, #0
    4570:	4798      	blx	r3
    4572:	e7b1      	b.n	44d8 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    4574:	8bac      	ldrh	r4, [r5, #28]
    4576:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    4578:	0763      	lsls	r3, r4, #29
    457a:	d505      	bpl.n	4588 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    457c:	2304      	movs	r3, #4
    457e:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    4580:	33a1      	adds	r3, #161	; 0xa1
    4582:	5cfb      	ldrb	r3, [r7, r3]
    4584:	07db      	lsls	r3, r3, #31
    4586:	d462      	bmi.n	464e <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    4588:	0723      	lsls	r3, r4, #28
    458a:	d50b      	bpl.n	45a4 <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    458c:	2200      	movs	r2, #0
    458e:	4b3f      	ldr	r3, [pc, #252]	; (468c <USB_Handler+0x324>)
    4590:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    4592:	4b3b      	ldr	r3, [pc, #236]	; (4680 <USB_Handler+0x318>)
    4594:	6818      	ldr	r0, [r3, #0]
    4596:	2308      	movs	r3, #8
    4598:	6802      	ldr	r2, [r0, #0]
    459a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    459c:	339d      	adds	r3, #157	; 0x9d
    459e:	5cc3      	ldrb	r3, [r0, r3]
    45a0:	079b      	lsls	r3, r3, #30
    45a2:	d458      	bmi.n	4656 <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    45a4:	0663      	lsls	r3, r4, #25
    45a6:	d508      	bpl.n	45ba <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    45a8:	4b35      	ldr	r3, [pc, #212]	; (4680 <USB_Handler+0x318>)
    45aa:	6818      	ldr	r0, [r3, #0]
    45ac:	2340      	movs	r3, #64	; 0x40
    45ae:	6802      	ldr	r2, [r0, #0]
    45b0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    45b2:	3365      	adds	r3, #101	; 0x65
    45b4:	5cc3      	ldrb	r3, [r0, r3]
    45b6:	06db      	lsls	r3, r3, #27
    45b8:	d450      	bmi.n	465c <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    45ba:	06a3      	lsls	r3, r4, #26
    45bc:	d508      	bpl.n	45d0 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    45be:	4b30      	ldr	r3, [pc, #192]	; (4680 <USB_Handler+0x318>)
    45c0:	6818      	ldr	r0, [r3, #0]
    45c2:	2320      	movs	r3, #32
    45c4:	6802      	ldr	r2, [r0, #0]
    45c6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    45c8:	3385      	adds	r3, #133	; 0x85
    45ca:	5cc3      	ldrb	r3, [r0, r3]
    45cc:	071b      	lsls	r3, r3, #28
    45ce:	d448      	bmi.n	4662 <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    45d0:	06e3      	lsls	r3, r4, #27
    45d2:	d508      	bpl.n	45e6 <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    45d4:	4b2a      	ldr	r3, [pc, #168]	; (4680 <USB_Handler+0x318>)
    45d6:	6818      	ldr	r0, [r3, #0]
    45d8:	2310      	movs	r3, #16
    45da:	6802      	ldr	r2, [r0, #0]
    45dc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    45de:	3395      	adds	r3, #149	; 0x95
    45e0:	5cc3      	ldrb	r3, [r0, r3]
    45e2:	075b      	lsls	r3, r3, #29
    45e4:	d440      	bmi.n	4668 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    45e6:	0623      	lsls	r3, r4, #24
    45e8:	d50b      	bpl.n	4602 <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    45ea:	2200      	movs	r2, #0
    45ec:	4b27      	ldr	r3, [pc, #156]	; (468c <USB_Handler+0x324>)
    45ee:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    45f0:	4b23      	ldr	r3, [pc, #140]	; (4680 <USB_Handler+0x318>)
    45f2:	6818      	ldr	r0, [r3, #0]
    45f4:	2380      	movs	r3, #128	; 0x80
    45f6:	6802      	ldr	r2, [r0, #0]
    45f8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    45fa:	3325      	adds	r3, #37	; 0x25
    45fc:	5cc3      	ldrb	r3, [r0, r3]
    45fe:	069b      	lsls	r3, r3, #26
    4600:	d435      	bmi.n	466e <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    4602:	05e3      	lsls	r3, r4, #23
    4604:	d50c      	bpl.n	4620 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    4606:	2200      	movs	r2, #0
    4608:	4b20      	ldr	r3, [pc, #128]	; (468c <USB_Handler+0x324>)
    460a:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    460c:	4b1c      	ldr	r3, [pc, #112]	; (4680 <USB_Handler+0x318>)
    460e:	6818      	ldr	r0, [r3, #0]
    4610:	2380      	movs	r3, #128	; 0x80
    4612:	005b      	lsls	r3, r3, #1
    4614:	6802      	ldr	r2, [r0, #0]
    4616:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    4618:	3b5b      	subs	r3, #91	; 0x5b
    461a:	5cc3      	ldrb	r3, [r0, r3]
    461c:	065b      	lsls	r3, r3, #25
    461e:	d429      	bmi.n	4674 <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    4620:	05a3      	lsls	r3, r4, #22
    4622:	d50d      	bpl.n	4640 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    4624:	2200      	movs	r2, #0
    4626:	4b19      	ldr	r3, [pc, #100]	; (468c <USB_Handler+0x324>)
    4628:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    462a:	4b15      	ldr	r3, [pc, #84]	; (4680 <USB_Handler+0x318>)
    462c:	6818      	ldr	r0, [r3, #0]
    462e:	2380      	movs	r3, #128	; 0x80
    4630:	009b      	lsls	r3, r3, #2
    4632:	6802      	ldr	r2, [r0, #0]
    4634:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    4636:	3b5c      	subs	r3, #92	; 0x5c
    4638:	3bff      	subs	r3, #255	; 0xff
    463a:	5cc3      	ldrb	r3, [r0, r3]
    463c:	2b7f      	cmp	r3, #127	; 0x7f
    463e:	d81c      	bhi.n	467a <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    4640:	b003      	add	sp, #12
    4642:	bc3c      	pop	{r2, r3, r4, r5}
    4644:	4690      	mov	r8, r2
    4646:	4699      	mov	r9, r3
    4648:	46a2      	mov	sl, r4
    464a:	46ab      	mov	fp, r5
    464c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    464e:	687b      	ldr	r3, [r7, #4]
    4650:	0038      	movs	r0, r7
    4652:	4798      	blx	r3
    4654:	e798      	b.n	4588 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    4656:	6883      	ldr	r3, [r0, #8]
    4658:	4798      	blx	r3
    465a:	e7a3      	b.n	45a4 <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    465c:	6943      	ldr	r3, [r0, #20]
    465e:	4798      	blx	r3
    4660:	e7ab      	b.n	45ba <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    4662:	6903      	ldr	r3, [r0, #16]
    4664:	4798      	blx	r3
    4666:	e7b3      	b.n	45d0 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    4668:	68c3      	ldr	r3, [r0, #12]
    466a:	4798      	blx	r3
    466c:	e7bb      	b.n	45e6 <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    466e:	6983      	ldr	r3, [r0, #24]
    4670:	4798      	blx	r3
    4672:	e7c6      	b.n	4602 <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    4674:	69c3      	ldr	r3, [r0, #28]
    4676:	4798      	blx	r3
    4678:	e7d2      	b.n	4620 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    467a:	6a03      	ldr	r3, [r0, #32]
    467c:	4798      	blx	r3
    467e:	e7df      	b.n	4640 <USB_Handler+0x2d8>
    4680:	20000294 	.word	0x20000294
    4684:	00007f5c 	.word	0x00007f5c
    4688:	000069fd 	.word	0x000069fd
    468c:	200002a4 	.word	0x200002a4
    4690:	200002a8 	.word	0x200002a8
    4694:	200005e4 	.word	0x200005e4
    4698:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    469c:	0023      	movs	r3, r4
    469e:	332e      	adds	r3, #46	; 0x2e
    46a0:	009b      	lsls	r3, r3, #2
    46a2:	4642      	mov	r2, r8
    46a4:	6812      	ldr	r2, [r2, #0]
    46a6:	589b      	ldr	r3, [r3, r2]
    46a8:	499e      	ldr	r1, [pc, #632]	; (4924 <USB_Handler+0x5bc>)
    46aa:	4642      	mov	r2, r8
    46ac:	6810      	ldr	r0, [r2, #0]
    46ae:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    46b0:	3401      	adds	r4, #1
    46b2:	2c07      	cmp	r4, #7
    46b4:	d0c4      	beq.n	4640 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    46b6:	0063      	lsls	r3, r4, #1
    46b8:	5bdb      	ldrh	r3, [r3, r7]
    46ba:	4233      	tst	r3, r6
    46bc:	d003      	beq.n	46c6 <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    46be:	464a      	mov	r2, r9
    46c0:	6812      	ldr	r2, [r2, #0]
    46c2:	6812      	ldr	r2, [r2, #0]
    46c4:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    46c6:	422b      	tst	r3, r5
    46c8:	d0f2      	beq.n	46b0 <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    46ca:	2c06      	cmp	r4, #6
    46cc:	d1e6      	bne.n	469c <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    46ce:	4b96      	ldr	r3, [pc, #600]	; (4928 <USB_Handler+0x5c0>)
    46d0:	891b      	ldrh	r3, [r3, #8]
    46d2:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    46d4:	2280      	movs	r2, #128	; 0x80
    46d6:	0052      	lsls	r2, r2, #1
    46d8:	4013      	ands	r3, r2
    46da:	4a92      	ldr	r2, [pc, #584]	; (4924 <USB_Handler+0x5bc>)
    46dc:	6013      	str	r3, [r2, #0]
    46de:	e7dd      	b.n	469c <USB_Handler+0x334>
    46e0:	003c      	movs	r4, r7
    46e2:	3459      	adds	r4, #89	; 0x59
    46e4:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    46e6:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    46e8:	2201      	movs	r2, #1
    46ea:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    46ec:	325f      	adds	r2, #95	; 0x5f
    46ee:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    46f0:	3a50      	subs	r2, #80	; 0x50
    46f2:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    46f4:	3a0d      	subs	r2, #13
    46f6:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    46f8:	46b8      	mov	r8, r7
    46fa:	002f      	movs	r7, r5
    46fc:	e0b9      	b.n	4872 <USB_Handler+0x50a>
    46fe:	002a      	movs	r2, r5
    4700:	003d      	movs	r5, r7
    4702:	4647      	mov	r7, r8
    4704:	4690      	mov	r8, r2
    4706:	015b      	lsls	r3, r3, #5
    4708:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    470a:	2308      	movs	r3, #8
    470c:	33ff      	adds	r3, #255	; 0xff
    470e:	5ceb      	ldrb	r3, [r5, r3]
    4710:	065b      	lsls	r3, r3, #25
    4712:	d516      	bpl.n	4742 <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4714:	2240      	movs	r2, #64	; 0x40
    4716:	2308      	movs	r3, #8
    4718:	33ff      	adds	r3, #255	; 0xff
    471a:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    471c:	3b88      	subs	r3, #136	; 0x88
    471e:	3bff      	subs	r3, #255	; 0xff
    4720:	4642      	mov	r2, r8
    4722:	4313      	orrs	r3, r2
    4724:	4a81      	ldr	r2, [pc, #516]	; (492c <USB_Handler+0x5c4>)
    4726:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4728:	2360      	movs	r3, #96	; 0x60
    472a:	420b      	tst	r3, r1
    472c:	d100      	bne.n	4730 <USB_Handler+0x3c8>
    472e:	e787      	b.n	4640 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    4730:	9b01      	ldr	r3, [sp, #4]
    4732:	011b      	lsls	r3, r3, #4
    4734:	18fb      	adds	r3, r7, r3
    4736:	33e0      	adds	r3, #224	; 0xe0
    4738:	681b      	ldr	r3, [r3, #0]
    473a:	497c      	ldr	r1, [pc, #496]	; (492c <USB_Handler+0x5c4>)
    473c:	0038      	movs	r0, r7
    473e:	4798      	blx	r3
    4740:	e77e      	b.n	4640 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4742:	2308      	movs	r3, #8
    4744:	33ff      	adds	r3, #255	; 0xff
    4746:	5ceb      	ldrb	r3, [r5, r3]
    4748:	069b      	lsls	r3, r3, #26
    474a:	d5ed      	bpl.n	4728 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    474c:	2220      	movs	r2, #32
    474e:	2308      	movs	r3, #8
    4750:	33ff      	adds	r3, #255	; 0xff
    4752:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4754:	4b75      	ldr	r3, [pc, #468]	; (492c <USB_Handler+0x5c4>)
    4756:	4642      	mov	r2, r8
    4758:	719a      	strb	r2, [r3, #6]
    475a:	e7e5      	b.n	4728 <USB_Handler+0x3c0>
    475c:	003d      	movs	r5, r7
    475e:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    4760:	9a01      	ldr	r2, [sp, #4]
    4762:	0013      	movs	r3, r2
    4764:	3308      	adds	r3, #8
    4766:	015b      	lsls	r3, r3, #5
    4768:	18ed      	adds	r5, r5, r3
    476a:	2310      	movs	r3, #16
    476c:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    476e:	18bb      	adds	r3, r7, r2
    4770:	3361      	adds	r3, #97	; 0x61
    4772:	33ff      	adds	r3, #255	; 0xff
    4774:	781b      	ldrb	r3, [r3, #0]
    4776:	06db      	lsls	r3, r3, #27
    4778:	d400      	bmi.n	477c <USB_Handler+0x414>
    477a:	e761      	b.n	4640 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    477c:	0010      	movs	r0, r2
    477e:	0152      	lsls	r2, r2, #5
    4780:	4b69      	ldr	r3, [pc, #420]	; (4928 <USB_Handler+0x5c0>)
    4782:	189b      	adds	r3, r3, r2
    4784:	685b      	ldr	r3, [r3, #4]
    4786:	049b      	lsls	r3, r3, #18
    4788:	0c9b      	lsrs	r3, r3, #18
    478a:	4968      	ldr	r1, [pc, #416]	; (492c <USB_Handler+0x5c4>)
    478c:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    478e:	0103      	lsls	r3, r0, #4
    4790:	18fb      	adds	r3, r7, r3
    4792:	33dc      	adds	r3, #220	; 0xdc
    4794:	681b      	ldr	r3, [r3, #0]
    4796:	4640      	mov	r0, r8
    4798:	4798      	blx	r3
    479a:	e751      	b.n	4640 <USB_Handler+0x2d8>
    479c:	002a      	movs	r2, r5
    479e:	003d      	movs	r5, r7
    47a0:	4647      	mov	r7, r8
    47a2:	4690      	mov	r8, r2
    47a4:	015b      	lsls	r3, r3, #5
    47a6:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    47a8:	2308      	movs	r3, #8
    47aa:	33ff      	adds	r3, #255	; 0xff
    47ac:	5ceb      	ldrb	r3, [r5, r3]
    47ae:	079b      	lsls	r3, r3, #30
    47b0:	d51e      	bpl.n	47f0 <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    47b2:	2202      	movs	r2, #2
    47b4:	2308      	movs	r3, #8
    47b6:	33ff      	adds	r3, #255	; 0xff
    47b8:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    47ba:	485c      	ldr	r0, [pc, #368]	; (492c <USB_Handler+0x5c4>)
    47bc:	3b88      	subs	r3, #136	; 0x88
    47be:	3bff      	subs	r3, #255	; 0xff
    47c0:	4642      	mov	r2, r8
    47c2:	4313      	orrs	r3, r2
    47c4:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    47c6:	9b01      	ldr	r3, [sp, #4]
    47c8:	015a      	lsls	r2, r3, #5
    47ca:	4b57      	ldr	r3, [pc, #348]	; (4928 <USB_Handler+0x5c0>)
    47cc:	189b      	adds	r3, r3, r2
    47ce:	3310      	adds	r3, #16
    47d0:	685b      	ldr	r3, [r3, #4]
    47d2:	049b      	lsls	r3, r3, #18
    47d4:	0c9b      	lsrs	r3, r3, #18
    47d6:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    47d8:	078b      	lsls	r3, r1, #30
    47da:	d100      	bne.n	47de <USB_Handler+0x476>
    47dc:	e730      	b.n	4640 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    47de:	9b01      	ldr	r3, [sp, #4]
    47e0:	330d      	adds	r3, #13
    47e2:	011b      	lsls	r3, r3, #4
    47e4:	18fb      	adds	r3, r7, r3
    47e6:	685b      	ldr	r3, [r3, #4]
    47e8:	4950      	ldr	r1, [pc, #320]	; (492c <USB_Handler+0x5c4>)
    47ea:	0038      	movs	r0, r7
    47ec:	4798      	blx	r3
    47ee:	e727      	b.n	4640 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    47f0:	2308      	movs	r3, #8
    47f2:	33ff      	adds	r3, #255	; 0xff
    47f4:	5ceb      	ldrb	r3, [r5, r3]
    47f6:	07db      	lsls	r3, r3, #31
    47f8:	d5ee      	bpl.n	47d8 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    47fa:	2201      	movs	r2, #1
    47fc:	2308      	movs	r3, #8
    47fe:	33ff      	adds	r3, #255	; 0xff
    4800:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4802:	484a      	ldr	r0, [pc, #296]	; (492c <USB_Handler+0x5c4>)
    4804:	4643      	mov	r3, r8
    4806:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4808:	9b01      	ldr	r3, [sp, #4]
    480a:	015b      	lsls	r3, r3, #5
    480c:	4a46      	ldr	r2, [pc, #280]	; (4928 <USB_Handler+0x5c0>)
    480e:	18d2      	adds	r2, r2, r3
    4810:	6853      	ldr	r3, [r2, #4]
    4812:	049b      	lsls	r3, r3, #18
    4814:	0c9b      	lsrs	r3, r3, #18
    4816:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    4818:	6853      	ldr	r3, [r2, #4]
    481a:	011b      	lsls	r3, r3, #4
    481c:	0c9b      	lsrs	r3, r3, #18
    481e:	8083      	strh	r3, [r0, #4]
    4820:	e7da      	b.n	47d8 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4822:	2208      	movs	r2, #8
    4824:	32ff      	adds	r2, #255	; 0xff
    4826:	5c9a      	ldrb	r2, [r3, r2]
    4828:	0752      	lsls	r2, r2, #29
    482a:	d56e      	bpl.n	490a <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    482c:	2004      	movs	r0, #4
    482e:	2208      	movs	r2, #8
    4830:	32ff      	adds	r2, #255	; 0xff
    4832:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4834:	9801      	ldr	r0, [sp, #4]
    4836:	0142      	lsls	r2, r0, #5
    4838:	4b3b      	ldr	r3, [pc, #236]	; (4928 <USB_Handler+0x5c0>)
    483a:	189b      	adds	r3, r3, r2
    483c:	7a9b      	ldrb	r3, [r3, #10]
    483e:	079b      	lsls	r3, r3, #30
    4840:	d505      	bpl.n	484e <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4842:	4b39      	ldr	r3, [pc, #228]	; (4928 <USB_Handler+0x5c0>)
    4844:	189b      	adds	r3, r3, r2
    4846:	7a9a      	ldrb	r2, [r3, #10]
    4848:	2002      	movs	r0, #2
    484a:	4382      	bics	r2, r0
    484c:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    484e:	4b37      	ldr	r3, [pc, #220]	; (492c <USB_Handler+0x5c4>)
    4850:	4642      	mov	r2, r8
    4852:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4854:	9b01      	ldr	r3, [sp, #4]
    4856:	3308      	adds	r3, #8
    4858:	015b      	lsls	r3, r3, #5
    485a:	683a      	ldr	r2, [r7, #0]
    485c:	4694      	mov	ip, r2
    485e:	4463      	add	r3, ip
    4860:	79db      	ldrb	r3, [r3, #7]
    4862:	07db      	lsls	r3, r3, #31
    4864:	d551      	bpl.n	490a <USB_Handler+0x5a2>
    4866:	e6eb      	b.n	4640 <USB_Handler+0x2d8>
    4868:	3301      	adds	r3, #1
    486a:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    486c:	2b08      	cmp	r3, #8
    486e:	d100      	bne.n	4872 <USB_Handler+0x50a>
    4870:	e6e6      	b.n	4640 <USB_Handler+0x2d8>
    4872:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    4874:	9301      	str	r3, [sp, #4]
    4876:	0032      	movs	r2, r6
    4878:	411a      	asrs	r2, r3
    487a:	4661      	mov	r1, ip
    487c:	4211      	tst	r1, r2
    487e:	d0f3      	beq.n	4868 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    4880:	001a      	movs	r2, r3
    4882:	3208      	adds	r2, #8
    4884:	0152      	lsls	r2, r2, #5
    4886:	18ba      	adds	r2, r7, r2
    4888:	79d2      	ldrb	r2, [r2, #7]
    488a:	b2d2      	uxtb	r2, r2
    488c:	7a21      	ldrb	r1, [r4, #8]
    488e:	4011      	ands	r1, r2
    4890:	7820      	ldrb	r0, [r4, #0]
    4892:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4894:	4648      	mov	r0, r9
    4896:	4210      	tst	r0, r2
    4898:	d000      	beq.n	489c <USB_Handler+0x534>
    489a:	e730      	b.n	46fe <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    489c:	4650      	mov	r0, sl
    489e:	4210      	tst	r0, r2
    48a0:	d000      	beq.n	48a4 <USB_Handler+0x53c>
    48a2:	e75b      	b.n	475c <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    48a4:	4658      	mov	r0, fp
    48a6:	4210      	tst	r0, r2
    48a8:	d000      	beq.n	48ac <USB_Handler+0x544>
    48aa:	e777      	b.n	479c <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    48ac:	200c      	movs	r0, #12
    48ae:	4210      	tst	r0, r2
    48b0:	d0da      	beq.n	4868 <USB_Handler+0x500>
    48b2:	002a      	movs	r2, r5
    48b4:	003d      	movs	r5, r7
    48b6:	4647      	mov	r7, r8
    48b8:	4690      	mov	r8, r2
    48ba:	015b      	lsls	r3, r3, #5
    48bc:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    48be:	2208      	movs	r2, #8
    48c0:	32ff      	adds	r2, #255	; 0xff
    48c2:	5c9a      	ldrb	r2, [r3, r2]
    48c4:	0712      	lsls	r2, r2, #28
    48c6:	d5ac      	bpl.n	4822 <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    48c8:	3804      	subs	r0, #4
    48ca:	2208      	movs	r2, #8
    48cc:	32ff      	adds	r2, #255	; 0xff
    48ce:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    48d0:	9801      	ldr	r0, [sp, #4]
    48d2:	0142      	lsls	r2, r0, #5
    48d4:	4b14      	ldr	r3, [pc, #80]	; (4928 <USB_Handler+0x5c0>)
    48d6:	189b      	adds	r3, r3, r2
    48d8:	7e9b      	ldrb	r3, [r3, #26]
    48da:	079b      	lsls	r3, r3, #30
    48dc:	d505      	bpl.n	48ea <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    48de:	4b12      	ldr	r3, [pc, #72]	; (4928 <USB_Handler+0x5c0>)
    48e0:	189b      	adds	r3, r3, r2
    48e2:	7e9a      	ldrb	r2, [r3, #26]
    48e4:	2002      	movs	r0, #2
    48e6:	4382      	bics	r2, r0
    48e8:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    48ea:	2380      	movs	r3, #128	; 0x80
    48ec:	425b      	negs	r3, r3
    48ee:	4642      	mov	r2, r8
    48f0:	4313      	orrs	r3, r2
    48f2:	4a0e      	ldr	r2, [pc, #56]	; (492c <USB_Handler+0x5c4>)
    48f4:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    48f6:	9b01      	ldr	r3, [sp, #4]
    48f8:	3308      	adds	r3, #8
    48fa:	015b      	lsls	r3, r3, #5
    48fc:	683a      	ldr	r2, [r7, #0]
    48fe:	4694      	mov	ip, r2
    4900:	4463      	add	r3, ip
    4902:	79db      	ldrb	r3, [r3, #7]
    4904:	079b      	lsls	r3, r3, #30
    4906:	d500      	bpl.n	490a <USB_Handler+0x5a2>
    4908:	e69a      	b.n	4640 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    490a:	230c      	movs	r3, #12
    490c:	420b      	tst	r3, r1
    490e:	d100      	bne.n	4912 <USB_Handler+0x5aa>
    4910:	e696      	b.n	4640 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4912:	9b01      	ldr	r3, [sp, #4]
    4914:	011b      	lsls	r3, r3, #4
    4916:	18fb      	adds	r3, r7, r3
    4918:	33d8      	adds	r3, #216	; 0xd8
    491a:	681b      	ldr	r3, [r3, #0]
    491c:	4903      	ldr	r1, [pc, #12]	; (492c <USB_Handler+0x5c4>)
    491e:	0038      	movs	r0, r7
    4920:	4798      	blx	r3
    4922:	e68d      	b.n	4640 <USB_Handler+0x2d8>
    4924:	20000298 	.word	0x20000298
    4928:	200005e4 	.word	0x200005e4
    492c:	2000029c 	.word	0x2000029c

00004930 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    4930:	2200      	movs	r2, #0
    4932:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    4934:	2301      	movs	r3, #1
    4936:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    4938:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    493a:	70c3      	strb	r3, [r0, #3]
}
    493c:	4770      	bx	lr
	...

00004940 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    4940:	b5f0      	push	{r4, r5, r6, r7, lr}
    4942:	46ce      	mov	lr, r9
    4944:	4647      	mov	r7, r8
    4946:	b580      	push	{r7, lr}
    4948:	b083      	sub	sp, #12
    494a:	0004      	movs	r4, r0
    494c:	000d      	movs	r5, r1
    494e:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    4950:	2300      	movs	r3, #0
    4952:	4a6e      	ldr	r2, [pc, #440]	; (4b0c <usb_init+0x1cc>)
    4954:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    4956:	4a6e      	ldr	r2, [pc, #440]	; (4b10 <usb_init+0x1d0>)
    4958:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    495a:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    495c:	496d      	ldr	r1, [pc, #436]	; (4b14 <usb_init+0x1d4>)
    495e:	69ca      	ldr	r2, [r1, #28]
    4960:	2020      	movs	r0, #32
    4962:	4302      	orrs	r2, r0
    4964:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4966:	af01      	add	r7, sp, #4
    4968:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    496a:	2201      	movs	r2, #1
    496c:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    496e:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    4970:	3306      	adds	r3, #6
    4972:	4699      	mov	r9, r3
    4974:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    4976:	0039      	movs	r1, r7
    4978:	3808      	subs	r0, #8
    497a:	4b67      	ldr	r3, [pc, #412]	; (4b18 <usb_init+0x1d8>)
    497c:	4698      	mov	r8, r3
    497e:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    4980:	464b      	mov	r3, r9
    4982:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    4984:	0039      	movs	r1, r7
    4986:	2019      	movs	r0, #25
    4988:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    498a:	78b3      	ldrb	r3, [r6, #2]
    498c:	466a      	mov	r2, sp
    498e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    4990:	4669      	mov	r1, sp
    4992:	2006      	movs	r0, #6
    4994:	4b61      	ldr	r3, [pc, #388]	; (4b1c <usb_init+0x1dc>)
    4996:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    4998:	2006      	movs	r0, #6
    499a:	4b61      	ldr	r3, [pc, #388]	; (4b20 <usb_init+0x1e0>)
    499c:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    499e:	782b      	ldrb	r3, [r5, #0]
    49a0:	2201      	movs	r2, #1
    49a2:	4313      	orrs	r3, r2
    49a4:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    49a6:	78ab      	ldrb	r3, [r5, #2]
    49a8:	07db      	lsls	r3, r3, #31
    49aa:	d4fc      	bmi.n	49a6 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    49ac:	4a5d      	ldr	r2, [pc, #372]	; (4b24 <usb_init+0x1e4>)
    49ae:	78d3      	ldrb	r3, [r2, #3]
    49b0:	2103      	movs	r1, #3
    49b2:	438b      	bics	r3, r1
    49b4:	2102      	movs	r1, #2
    49b6:	430b      	orrs	r3, r1
    49b8:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    49ba:	78d3      	ldrb	r3, [r2, #3]
    49bc:	210c      	movs	r1, #12
    49be:	438b      	bics	r3, r1
    49c0:	2108      	movs	r1, #8
    49c2:	430b      	orrs	r3, r1
    49c4:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    49c6:	4b58      	ldr	r3, [pc, #352]	; (4b28 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    49c8:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    49ca:	039b      	lsls	r3, r3, #14
    49cc:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    49ce:	2b1f      	cmp	r3, #31
    49d0:	d100      	bne.n	49d4 <usb_init+0x94>
    49d2:	e08f      	b.n	4af4 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    49d4:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    49d6:	019b      	lsls	r3, r3, #6
    49d8:	4954      	ldr	r1, [pc, #336]	; (4b2c <usb_init+0x1ec>)
    49da:	400a      	ands	r2, r1
    49dc:	4313      	orrs	r3, r2
    49de:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    49e0:	4b51      	ldr	r3, [pc, #324]	; (4b28 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    49e2:	681b      	ldr	r3, [r3, #0]
    49e4:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    49e6:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    49e8:	2b1f      	cmp	r3, #31
    49ea:	d100      	bne.n	49ee <usb_init+0xae>
    49ec:	e084      	b.n	4af8 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    49ee:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    49f0:	211f      	movs	r1, #31
    49f2:	438a      	bics	r2, r1
    49f4:	4313      	orrs	r3, r2
    49f6:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    49f8:	4b4b      	ldr	r3, [pc, #300]	; (4b28 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    49fa:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    49fc:	019b      	lsls	r3, r3, #6
    49fe:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    4a00:	2b07      	cmp	r3, #7
    4a02:	d100      	bne.n	4a06 <usb_init+0xc6>
    4a04:	e07a      	b.n	4afc <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    4a06:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4a08:	031b      	lsls	r3, r3, #12
    4a0a:	4949      	ldr	r1, [pc, #292]	; (4b30 <usb_init+0x1f0>)
    4a0c:	400a      	ands	r2, r1
    4a0e:	4313      	orrs	r3, r2
    4a10:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    4a12:	7832      	ldrb	r2, [r6, #0]
    4a14:	7829      	ldrb	r1, [r5, #0]
    4a16:	01d2      	lsls	r2, r2, #7
    4a18:	237f      	movs	r3, #127	; 0x7f
    4a1a:	400b      	ands	r3, r1
    4a1c:	4313      	orrs	r3, r2
    4a1e:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    4a20:	7871      	ldrb	r1, [r6, #1]
    4a22:	782b      	ldrb	r3, [r5, #0]
    4a24:	2201      	movs	r2, #1
    4a26:	400a      	ands	r2, r1
    4a28:	0092      	lsls	r2, r2, #2
    4a2a:	2104      	movs	r1, #4
    4a2c:	438b      	bics	r3, r1
    4a2e:	4313      	orrs	r3, r2
    4a30:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    4a32:	4b40      	ldr	r3, [pc, #256]	; (4b34 <usb_init+0x1f4>)
    4a34:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    4a36:	78f3      	ldrb	r3, [r6, #3]
    4a38:	2b01      	cmp	r3, #1
    4a3a:	d061      	beq.n	4b00 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	d106      	bne.n	4a4e <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    4a40:	6822      	ldr	r2, [r4, #0]
    4a42:	8913      	ldrh	r3, [r2, #8]
    4a44:	210c      	movs	r1, #12
    4a46:	438b      	bics	r3, r1
    4a48:	2104      	movs	r1, #4
    4a4a:	430b      	orrs	r3, r1
    4a4c:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    4a4e:	2280      	movs	r2, #128	; 0x80
    4a50:	0052      	lsls	r2, r2, #1
    4a52:	2100      	movs	r1, #0
    4a54:	4837      	ldr	r0, [pc, #220]	; (4b34 <usb_init+0x1f4>)
    4a56:	4b38      	ldr	r3, [pc, #224]	; (4b38 <usb_init+0x1f8>)
    4a58:	4798      	blx	r3
    4a5a:	1d23      	adds	r3, r4, #4
    4a5c:	0021      	movs	r1, r4
    4a5e:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    4a60:	2200      	movs	r2, #0
    4a62:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    4a64:	428b      	cmp	r3, r1
    4a66:	d1fc      	bne.n	4a62 <usb_init+0x122>
    4a68:	0021      	movs	r1, r4
    4a6a:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    4a6c:	2200      	movs	r2, #0
    4a6e:	601a      	str	r2, [r3, #0]
    4a70:	605a      	str	r2, [r3, #4]
    4a72:	609a      	str	r2, [r3, #8]
    4a74:	60da      	str	r2, [r3, #12]
    4a76:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4a78:	428b      	cmp	r3, r1
    4a7a:	d1f8      	bne.n	4a6e <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    4a7c:	2300      	movs	r3, #0
    4a7e:	22a4      	movs	r2, #164	; 0xa4
    4a80:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    4a82:	3201      	adds	r2, #1
    4a84:	54a3      	strb	r3, [r4, r2]
    4a86:	0023      	movs	r3, r4
    4a88:	33a6      	adds	r3, #166	; 0xa6
    4a8a:	0021      	movs	r1, r4
    4a8c:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    4a8e:	2200      	movs	r2, #0
    4a90:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    4a92:	721a      	strb	r2, [r3, #8]
    4a94:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4a96:	4299      	cmp	r1, r3
    4a98:	d1fa      	bne.n	4a90 <usb_init+0x150>
    4a9a:	0023      	movs	r3, r4
    4a9c:	33b8      	adds	r3, #184	; 0xb8
    4a9e:	0021      	movs	r1, r4
    4aa0:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    4aa2:	2200      	movs	r2, #0
    4aa4:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    4aa6:	428b      	cmp	r3, r1
    4aa8:	d1fc      	bne.n	4aa4 <usb_init+0x164>
    4aaa:	0021      	movs	r1, r4
    4aac:	3155      	adds	r1, #85	; 0x55
    4aae:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    4ab0:	2200      	movs	r2, #0
    4ab2:	601a      	str	r2, [r3, #0]
    4ab4:	605a      	str	r2, [r3, #4]
    4ab6:	609a      	str	r2, [r3, #8]
    4ab8:	60da      	str	r2, [r3, #12]
    4aba:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    4abc:	428b      	cmp	r3, r1
    4abe:	d1f8      	bne.n	4ab2 <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    4ac0:	2300      	movs	r3, #0
    4ac2:	22aa      	movs	r2, #170	; 0xaa
    4ac4:	0052      	lsls	r2, r2, #1
    4ac6:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    4ac8:	3202      	adds	r2, #2
    4aca:	52a3      	strh	r3, [r4, r2]
    4acc:	0023      	movs	r3, r4
    4ace:	3359      	adds	r3, #89	; 0x59
    4ad0:	33ff      	adds	r3, #255	; 0xff
    4ad2:	3461      	adds	r4, #97	; 0x61
    4ad4:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    4ad6:	2200      	movs	r2, #0
    4ad8:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    4ada:	721a      	strb	r2, [r3, #8]
    4adc:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    4ade:	42a3      	cmp	r3, r4
    4ae0:	d1fa      	bne.n	4ad8 <usb_init+0x198>
    4ae2:	2280      	movs	r2, #128	; 0x80
    4ae4:	4b15      	ldr	r3, [pc, #84]	; (4b3c <usb_init+0x1fc>)
    4ae6:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    4ae8:	2000      	movs	r0, #0
    4aea:	b003      	add	sp, #12
    4aec:	bc0c      	pop	{r2, r3}
    4aee:	4690      	mov	r8, r2
    4af0:	4699      	mov	r9, r3
    4af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    4af4:	3b1a      	subs	r3, #26
    4af6:	e76d      	b.n	49d4 <usb_init+0x94>
		pad_transp = 29;
    4af8:	3b02      	subs	r3, #2
    4afa:	e778      	b.n	49ee <usb_init+0xae>
		pad_trim = 3;
    4afc:	3b04      	subs	r3, #4
    4afe:	e782      	b.n	4a06 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    4b00:	6822      	ldr	r2, [r4, #0]
    4b02:	8913      	ldrh	r3, [r2, #8]
    4b04:	3108      	adds	r1, #8
    4b06:	438b      	bics	r3, r1
    4b08:	8113      	strh	r3, [r2, #8]
    4b0a:	e7a0      	b.n	4a4e <usb_init+0x10e>
    4b0c:	200002a4 	.word	0x200002a4
    4b10:	20000294 	.word	0x20000294
    4b14:	40000400 	.word	0x40000400
    4b18:	00006551 	.word	0x00006551
    4b1c:	00006459 	.word	0x00006459
    4b20:	000063cd 	.word	0x000063cd
    4b24:	41005000 	.word	0x41005000
    4b28:	00806024 	.word	0x00806024
    4b2c:	fffff83f 	.word	0xfffff83f
    4b30:	ffff8fff 	.word	0xffff8fff
    4b34:	200005e4 	.word	0x200005e4
    4b38:	00006cc3 	.word	0x00006cc3
    4b3c:	e000e100 	.word	0xe000e100

00004b40 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4b40:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4b42:	2a00      	cmp	r2, #0
    4b44:	d001      	beq.n	4b4a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4b46:	0018      	movs	r0, r3
    4b48:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4b4a:	008b      	lsls	r3, r1, #2
    4b4c:	4a06      	ldr	r2, [pc, #24]	; (4b68 <extint_register_callback+0x28>)
    4b4e:	589b      	ldr	r3, [r3, r2]
    4b50:	2b00      	cmp	r3, #0
    4b52:	d003      	beq.n	4b5c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4b54:	4283      	cmp	r3, r0
    4b56:	d005      	beq.n	4b64 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4b58:	231d      	movs	r3, #29
    4b5a:	e7f4      	b.n	4b46 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4b5c:	0089      	lsls	r1, r1, #2
    4b5e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4b60:	2300      	movs	r3, #0
    4b62:	e7f0      	b.n	4b46 <extint_register_callback+0x6>
		return STATUS_OK;
    4b64:	2300      	movs	r3, #0
    4b66:	e7ee      	b.n	4b46 <extint_register_callback+0x6>
    4b68:	200002f4 	.word	0x200002f4

00004b6c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4b6c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4b6e:	2900      	cmp	r1, #0
    4b70:	d001      	beq.n	4b76 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4b72:	0018      	movs	r0, r3
    4b74:	4770      	bx	lr
		return NULL;
    4b76:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4b78:	281f      	cmp	r0, #31
    4b7a:	d800      	bhi.n	4b7e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4b7c:	4a02      	ldr	r2, [pc, #8]	; (4b88 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    4b7e:	2301      	movs	r3, #1
    4b80:	4083      	lsls	r3, r0
    4b82:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    4b84:	2300      	movs	r3, #0
    4b86:	e7f4      	b.n	4b72 <extint_chan_enable_callback+0x6>
    4b88:	40001800 	.word	0x40001800

00004b8c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4b8c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4b8e:	2900      	cmp	r1, #0
    4b90:	d001      	beq.n	4b96 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    4b92:	0018      	movs	r0, r3
    4b94:	4770      	bx	lr
		return NULL;
    4b96:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4b98:	281f      	cmp	r0, #31
    4b9a:	d800      	bhi.n	4b9e <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    4b9c:	4a02      	ldr	r2, [pc, #8]	; (4ba8 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    4b9e:	2301      	movs	r3, #1
    4ba0:	4083      	lsls	r3, r0
    4ba2:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    4ba4:	2300      	movs	r3, #0
    4ba6:	e7f4      	b.n	4b92 <extint_chan_disable_callback+0x6>
    4ba8:	40001800 	.word	0x40001800

00004bac <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4bac:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4bae:	2200      	movs	r2, #0
    4bb0:	4b10      	ldr	r3, [pc, #64]	; (4bf4 <EIC_Handler+0x48>)
    4bb2:	701a      	strb	r2, [r3, #0]
    4bb4:	2300      	movs	r3, #0
    4bb6:	4910      	ldr	r1, [pc, #64]	; (4bf8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4bb8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4bba:	4e10      	ldr	r6, [pc, #64]	; (4bfc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4bbc:	4c0d      	ldr	r4, [pc, #52]	; (4bf4 <EIC_Handler+0x48>)
    4bbe:	e00a      	b.n	4bd6 <EIC_Handler+0x2a>
		return eics[eic_index];
    4bc0:	490d      	ldr	r1, [pc, #52]	; (4bf8 <EIC_Handler+0x4c>)
    4bc2:	e008      	b.n	4bd6 <EIC_Handler+0x2a>
    4bc4:	7823      	ldrb	r3, [r4, #0]
    4bc6:	3301      	adds	r3, #1
    4bc8:	b2db      	uxtb	r3, r3
    4bca:	7023      	strb	r3, [r4, #0]
    4bcc:	2b0f      	cmp	r3, #15
    4bce:	d810      	bhi.n	4bf2 <EIC_Handler+0x46>
		return NULL;
    4bd0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4bd2:	2b1f      	cmp	r3, #31
    4bd4:	d9f4      	bls.n	4bc0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    4bd6:	0028      	movs	r0, r5
    4bd8:	4018      	ands	r0, r3
    4bda:	2201      	movs	r2, #1
    4bdc:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4bde:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    4be0:	4210      	tst	r0, r2
    4be2:	d0ef      	beq.n	4bc4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4be4:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4be6:	009b      	lsls	r3, r3, #2
    4be8:	599b      	ldr	r3, [r3, r6]
    4bea:	2b00      	cmp	r3, #0
    4bec:	d0ea      	beq.n	4bc4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4bee:	4798      	blx	r3
    4bf0:	e7e8      	b.n	4bc4 <EIC_Handler+0x18>
			}
		}
	}
}
    4bf2:	bd70      	pop	{r4, r5, r6, pc}
    4bf4:	200006e4 	.word	0x200006e4
    4bf8:	40001800 	.word	0x40001800
    4bfc:	200002f4 	.word	0x200002f4

00004c00 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    4c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c02:	46de      	mov	lr, fp
    4c04:	4657      	mov	r7, sl
    4c06:	464e      	mov	r6, r9
    4c08:	4645      	mov	r5, r8
    4c0a:	b5e0      	push	{r5, r6, r7, lr}
    4c0c:	b087      	sub	sp, #28
    4c0e:	4680      	mov	r8, r0
    4c10:	9104      	str	r1, [sp, #16]
    4c12:	0016      	movs	r6, r2
    4c14:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4c16:	2200      	movs	r2, #0
    4c18:	2300      	movs	r3, #0
    4c1a:	2100      	movs	r1, #0
    4c1c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    4c1e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    4c20:	2001      	movs	r0, #1
    4c22:	0021      	movs	r1, r4
    4c24:	9600      	str	r6, [sp, #0]
    4c26:	9701      	str	r7, [sp, #4]
    4c28:	465c      	mov	r4, fp
    4c2a:	9403      	str	r4, [sp, #12]
    4c2c:	4644      	mov	r4, r8
    4c2e:	9405      	str	r4, [sp, #20]
    4c30:	e013      	b.n	4c5a <long_division+0x5a>
    4c32:	2420      	movs	r4, #32
    4c34:	1a64      	subs	r4, r4, r1
    4c36:	0005      	movs	r5, r0
    4c38:	40e5      	lsrs	r5, r4
    4c3a:	46a8      	mov	r8, r5
    4c3c:	e014      	b.n	4c68 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    4c3e:	9c00      	ldr	r4, [sp, #0]
    4c40:	9d01      	ldr	r5, [sp, #4]
    4c42:	1b12      	subs	r2, r2, r4
    4c44:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    4c46:	465c      	mov	r4, fp
    4c48:	464d      	mov	r5, r9
    4c4a:	432c      	orrs	r4, r5
    4c4c:	46a3      	mov	fp, r4
    4c4e:	9c03      	ldr	r4, [sp, #12]
    4c50:	4645      	mov	r5, r8
    4c52:	432c      	orrs	r4, r5
    4c54:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    4c56:	3901      	subs	r1, #1
    4c58:	d325      	bcc.n	4ca6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    4c5a:	2420      	movs	r4, #32
    4c5c:	4264      	negs	r4, r4
    4c5e:	190c      	adds	r4, r1, r4
    4c60:	d4e7      	bmi.n	4c32 <long_division+0x32>
    4c62:	0005      	movs	r5, r0
    4c64:	40a5      	lsls	r5, r4
    4c66:	46a8      	mov	r8, r5
    4c68:	0004      	movs	r4, r0
    4c6a:	408c      	lsls	r4, r1
    4c6c:	46a1      	mov	r9, r4
		r = r << 1;
    4c6e:	1892      	adds	r2, r2, r2
    4c70:	415b      	adcs	r3, r3
    4c72:	0014      	movs	r4, r2
    4c74:	001d      	movs	r5, r3
		if (n & bit_shift) {
    4c76:	9e05      	ldr	r6, [sp, #20]
    4c78:	464f      	mov	r7, r9
    4c7a:	403e      	ands	r6, r7
    4c7c:	46b4      	mov	ip, r6
    4c7e:	9e04      	ldr	r6, [sp, #16]
    4c80:	4647      	mov	r7, r8
    4c82:	403e      	ands	r6, r7
    4c84:	46b2      	mov	sl, r6
    4c86:	4666      	mov	r6, ip
    4c88:	4657      	mov	r7, sl
    4c8a:	433e      	orrs	r6, r7
    4c8c:	d003      	beq.n	4c96 <long_division+0x96>
			r |= 0x01;
    4c8e:	0006      	movs	r6, r0
    4c90:	4326      	orrs	r6, r4
    4c92:	0032      	movs	r2, r6
    4c94:	002b      	movs	r3, r5
		if (r >= d) {
    4c96:	9c00      	ldr	r4, [sp, #0]
    4c98:	9d01      	ldr	r5, [sp, #4]
    4c9a:	429d      	cmp	r5, r3
    4c9c:	d8db      	bhi.n	4c56 <long_division+0x56>
    4c9e:	d1ce      	bne.n	4c3e <long_division+0x3e>
    4ca0:	4294      	cmp	r4, r2
    4ca2:	d8d8      	bhi.n	4c56 <long_division+0x56>
    4ca4:	e7cb      	b.n	4c3e <long_division+0x3e>
    4ca6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    4ca8:	4658      	mov	r0, fp
    4caa:	0019      	movs	r1, r3
    4cac:	b007      	add	sp, #28
    4cae:	bc3c      	pop	{r2, r3, r4, r5}
    4cb0:	4690      	mov	r8, r2
    4cb2:	4699      	mov	r9, r3
    4cb4:	46a2      	mov	sl, r4
    4cb6:	46ab      	mov	fp, r5
    4cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004cba <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4cba:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4cbc:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4cbe:	2340      	movs	r3, #64	; 0x40
    4cc0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    4cc2:	4281      	cmp	r1, r0
    4cc4:	d202      	bcs.n	4ccc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    4cc6:	0018      	movs	r0, r3
    4cc8:	bd10      	pop	{r4, pc}
		baud_calculated++;
    4cca:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4ccc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    4cce:	1c63      	adds	r3, r4, #1
    4cd0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    4cd2:	4288      	cmp	r0, r1
    4cd4:	d9f9      	bls.n	4cca <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4cd6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    4cd8:	2cff      	cmp	r4, #255	; 0xff
    4cda:	d8f4      	bhi.n	4cc6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    4cdc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    4cde:	2300      	movs	r3, #0
    4ce0:	e7f1      	b.n	4cc6 <_sercom_get_sync_baud_val+0xc>
	...

00004ce4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ce6:	b083      	sub	sp, #12
    4ce8:	000f      	movs	r7, r1
    4cea:	0016      	movs	r6, r2
    4cec:	aa08      	add	r2, sp, #32
    4cee:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4cf0:	0004      	movs	r4, r0
    4cf2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4cf4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    4cf6:	42bc      	cmp	r4, r7
    4cf8:	d902      	bls.n	4d00 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    4cfa:	0010      	movs	r0, r2
    4cfc:	b003      	add	sp, #12
    4cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4d00:	2b00      	cmp	r3, #0
    4d02:	d114      	bne.n	4d2e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4d04:	0002      	movs	r2, r0
    4d06:	0008      	movs	r0, r1
    4d08:	2100      	movs	r1, #0
    4d0a:	4c19      	ldr	r4, [pc, #100]	; (4d70 <_sercom_get_async_baud_val+0x8c>)
    4d0c:	47a0      	blx	r4
    4d0e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    4d10:	003a      	movs	r2, r7
    4d12:	2300      	movs	r3, #0
    4d14:	2000      	movs	r0, #0
    4d16:	4c17      	ldr	r4, [pc, #92]	; (4d74 <_sercom_get_async_baud_val+0x90>)
    4d18:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4d1a:	2200      	movs	r2, #0
    4d1c:	2301      	movs	r3, #1
    4d1e:	1a12      	subs	r2, r2, r0
    4d20:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    4d22:	0c12      	lsrs	r2, r2, #16
    4d24:	041b      	lsls	r3, r3, #16
    4d26:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4d28:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    4d2a:	2200      	movs	r2, #0
    4d2c:	e7e5      	b.n	4cfa <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    4d2e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4d30:	2b01      	cmp	r3, #1
    4d32:	d1f9      	bne.n	4d28 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    4d34:	000a      	movs	r2, r1
    4d36:	2300      	movs	r3, #0
    4d38:	2100      	movs	r1, #0
    4d3a:	4c0d      	ldr	r4, [pc, #52]	; (4d70 <_sercom_get_async_baud_val+0x8c>)
    4d3c:	47a0      	blx	r4
    4d3e:	0002      	movs	r2, r0
    4d40:	000b      	movs	r3, r1
    4d42:	9200      	str	r2, [sp, #0]
    4d44:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    4d46:	0038      	movs	r0, r7
    4d48:	2100      	movs	r1, #0
    4d4a:	4c0a      	ldr	r4, [pc, #40]	; (4d74 <_sercom_get_async_baud_val+0x90>)
    4d4c:	47a0      	blx	r4
    4d4e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    4d50:	2380      	movs	r3, #128	; 0x80
    4d52:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4d54:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    4d56:	4298      	cmp	r0, r3
    4d58:	d8cf      	bhi.n	4cfa <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    4d5a:	0f79      	lsrs	r1, r7, #29
    4d5c:	00f8      	lsls	r0, r7, #3
    4d5e:	9a00      	ldr	r2, [sp, #0]
    4d60:	9b01      	ldr	r3, [sp, #4]
    4d62:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    4d64:	00ea      	lsls	r2, r5, #3
    4d66:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    4d68:	b2d2      	uxtb	r2, r2
    4d6a:	0352      	lsls	r2, r2, #13
    4d6c:	432a      	orrs	r2, r5
    4d6e:	e7db      	b.n	4d28 <_sercom_get_async_baud_val+0x44>
    4d70:	00006a7d 	.word	0x00006a7d
    4d74:	00004c01 	.word	0x00004c01

00004d78 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4d78:	b510      	push	{r4, lr}
    4d7a:	b082      	sub	sp, #8
    4d7c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4d7e:	4b0e      	ldr	r3, [pc, #56]	; (4db8 <sercom_set_gclk_generator+0x40>)
    4d80:	781b      	ldrb	r3, [r3, #0]
    4d82:	2b00      	cmp	r3, #0
    4d84:	d007      	beq.n	4d96 <sercom_set_gclk_generator+0x1e>
    4d86:	2900      	cmp	r1, #0
    4d88:	d105      	bne.n	4d96 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4d8a:	4b0b      	ldr	r3, [pc, #44]	; (4db8 <sercom_set_gclk_generator+0x40>)
    4d8c:	785b      	ldrb	r3, [r3, #1]
    4d8e:	4283      	cmp	r3, r0
    4d90:	d010      	beq.n	4db4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4d92:	201d      	movs	r0, #29
    4d94:	e00c      	b.n	4db0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    4d96:	a901      	add	r1, sp, #4
    4d98:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4d9a:	2013      	movs	r0, #19
    4d9c:	4b07      	ldr	r3, [pc, #28]	; (4dbc <sercom_set_gclk_generator+0x44>)
    4d9e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4da0:	2013      	movs	r0, #19
    4da2:	4b07      	ldr	r3, [pc, #28]	; (4dc0 <sercom_set_gclk_generator+0x48>)
    4da4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    4da6:	4b04      	ldr	r3, [pc, #16]	; (4db8 <sercom_set_gclk_generator+0x40>)
    4da8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4daa:	2201      	movs	r2, #1
    4dac:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4dae:	2000      	movs	r0, #0
}
    4db0:	b002      	add	sp, #8
    4db2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    4db4:	2000      	movs	r0, #0
    4db6:	e7fb      	b.n	4db0 <sercom_set_gclk_generator+0x38>
    4db8:	200002b0 	.word	0x200002b0
    4dbc:	00006459 	.word	0x00006459
    4dc0:	000063cd 	.word	0x000063cd

00004dc4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4dc4:	4b40      	ldr	r3, [pc, #256]	; (4ec8 <_sercom_get_default_pad+0x104>)
    4dc6:	4298      	cmp	r0, r3
    4dc8:	d031      	beq.n	4e2e <_sercom_get_default_pad+0x6a>
    4dca:	d90a      	bls.n	4de2 <_sercom_get_default_pad+0x1e>
    4dcc:	4b3f      	ldr	r3, [pc, #252]	; (4ecc <_sercom_get_default_pad+0x108>)
    4dce:	4298      	cmp	r0, r3
    4dd0:	d04d      	beq.n	4e6e <_sercom_get_default_pad+0xaa>
    4dd2:	4b3f      	ldr	r3, [pc, #252]	; (4ed0 <_sercom_get_default_pad+0x10c>)
    4dd4:	4298      	cmp	r0, r3
    4dd6:	d05a      	beq.n	4e8e <_sercom_get_default_pad+0xca>
    4dd8:	4b3e      	ldr	r3, [pc, #248]	; (4ed4 <_sercom_get_default_pad+0x110>)
    4dda:	4298      	cmp	r0, r3
    4ddc:	d037      	beq.n	4e4e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    4dde:	2000      	movs	r0, #0
}
    4de0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    4de2:	4b3d      	ldr	r3, [pc, #244]	; (4ed8 <_sercom_get_default_pad+0x114>)
    4de4:	4298      	cmp	r0, r3
    4de6:	d00c      	beq.n	4e02 <_sercom_get_default_pad+0x3e>
    4de8:	4b3c      	ldr	r3, [pc, #240]	; (4edc <_sercom_get_default_pad+0x118>)
    4dea:	4298      	cmp	r0, r3
    4dec:	d1f7      	bne.n	4dde <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4dee:	2901      	cmp	r1, #1
    4df0:	d017      	beq.n	4e22 <_sercom_get_default_pad+0x5e>
    4df2:	2900      	cmp	r1, #0
    4df4:	d05d      	beq.n	4eb2 <_sercom_get_default_pad+0xee>
    4df6:	2902      	cmp	r1, #2
    4df8:	d015      	beq.n	4e26 <_sercom_get_default_pad+0x62>
    4dfa:	2903      	cmp	r1, #3
    4dfc:	d015      	beq.n	4e2a <_sercom_get_default_pad+0x66>
	return 0;
    4dfe:	2000      	movs	r0, #0
    4e00:	e7ee      	b.n	4de0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4e02:	2901      	cmp	r1, #1
    4e04:	d007      	beq.n	4e16 <_sercom_get_default_pad+0x52>
    4e06:	2900      	cmp	r1, #0
    4e08:	d051      	beq.n	4eae <_sercom_get_default_pad+0xea>
    4e0a:	2902      	cmp	r1, #2
    4e0c:	d005      	beq.n	4e1a <_sercom_get_default_pad+0x56>
    4e0e:	2903      	cmp	r1, #3
    4e10:	d005      	beq.n	4e1e <_sercom_get_default_pad+0x5a>
	return 0;
    4e12:	2000      	movs	r0, #0
    4e14:	e7e4      	b.n	4de0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4e16:	4832      	ldr	r0, [pc, #200]	; (4ee0 <_sercom_get_default_pad+0x11c>)
    4e18:	e7e2      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4e1a:	4832      	ldr	r0, [pc, #200]	; (4ee4 <_sercom_get_default_pad+0x120>)
    4e1c:	e7e0      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4e1e:	4832      	ldr	r0, [pc, #200]	; (4ee8 <_sercom_get_default_pad+0x124>)
    4e20:	e7de      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4e22:	4832      	ldr	r0, [pc, #200]	; (4eec <_sercom_get_default_pad+0x128>)
    4e24:	e7dc      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4e26:	4832      	ldr	r0, [pc, #200]	; (4ef0 <_sercom_get_default_pad+0x12c>)
    4e28:	e7da      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4e2a:	4832      	ldr	r0, [pc, #200]	; (4ef4 <_sercom_get_default_pad+0x130>)
    4e2c:	e7d8      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4e2e:	2901      	cmp	r1, #1
    4e30:	d007      	beq.n	4e42 <_sercom_get_default_pad+0x7e>
    4e32:	2900      	cmp	r1, #0
    4e34:	d03f      	beq.n	4eb6 <_sercom_get_default_pad+0xf2>
    4e36:	2902      	cmp	r1, #2
    4e38:	d005      	beq.n	4e46 <_sercom_get_default_pad+0x82>
    4e3a:	2903      	cmp	r1, #3
    4e3c:	d005      	beq.n	4e4a <_sercom_get_default_pad+0x86>
	return 0;
    4e3e:	2000      	movs	r0, #0
    4e40:	e7ce      	b.n	4de0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4e42:	482d      	ldr	r0, [pc, #180]	; (4ef8 <_sercom_get_default_pad+0x134>)
    4e44:	e7cc      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4e46:	482d      	ldr	r0, [pc, #180]	; (4efc <_sercom_get_default_pad+0x138>)
    4e48:	e7ca      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4e4a:	482d      	ldr	r0, [pc, #180]	; (4f00 <_sercom_get_default_pad+0x13c>)
    4e4c:	e7c8      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4e4e:	2901      	cmp	r1, #1
    4e50:	d007      	beq.n	4e62 <_sercom_get_default_pad+0x9e>
    4e52:	2900      	cmp	r1, #0
    4e54:	d031      	beq.n	4eba <_sercom_get_default_pad+0xf6>
    4e56:	2902      	cmp	r1, #2
    4e58:	d005      	beq.n	4e66 <_sercom_get_default_pad+0xa2>
    4e5a:	2903      	cmp	r1, #3
    4e5c:	d005      	beq.n	4e6a <_sercom_get_default_pad+0xa6>
	return 0;
    4e5e:	2000      	movs	r0, #0
    4e60:	e7be      	b.n	4de0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4e62:	4828      	ldr	r0, [pc, #160]	; (4f04 <_sercom_get_default_pad+0x140>)
    4e64:	e7bc      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4e66:	4828      	ldr	r0, [pc, #160]	; (4f08 <_sercom_get_default_pad+0x144>)
    4e68:	e7ba      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4e6a:	4828      	ldr	r0, [pc, #160]	; (4f0c <_sercom_get_default_pad+0x148>)
    4e6c:	e7b8      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4e6e:	2901      	cmp	r1, #1
    4e70:	d007      	beq.n	4e82 <_sercom_get_default_pad+0xbe>
    4e72:	2900      	cmp	r1, #0
    4e74:	d023      	beq.n	4ebe <_sercom_get_default_pad+0xfa>
    4e76:	2902      	cmp	r1, #2
    4e78:	d005      	beq.n	4e86 <_sercom_get_default_pad+0xc2>
    4e7a:	2903      	cmp	r1, #3
    4e7c:	d005      	beq.n	4e8a <_sercom_get_default_pad+0xc6>
	return 0;
    4e7e:	2000      	movs	r0, #0
    4e80:	e7ae      	b.n	4de0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4e82:	4823      	ldr	r0, [pc, #140]	; (4f10 <_sercom_get_default_pad+0x14c>)
    4e84:	e7ac      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4e86:	4823      	ldr	r0, [pc, #140]	; (4f14 <_sercom_get_default_pad+0x150>)
    4e88:	e7aa      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4e8a:	4823      	ldr	r0, [pc, #140]	; (4f18 <_sercom_get_default_pad+0x154>)
    4e8c:	e7a8      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4e8e:	2901      	cmp	r1, #1
    4e90:	d007      	beq.n	4ea2 <_sercom_get_default_pad+0xde>
    4e92:	2900      	cmp	r1, #0
    4e94:	d015      	beq.n	4ec2 <_sercom_get_default_pad+0xfe>
    4e96:	2902      	cmp	r1, #2
    4e98:	d005      	beq.n	4ea6 <_sercom_get_default_pad+0xe2>
    4e9a:	2903      	cmp	r1, #3
    4e9c:	d005      	beq.n	4eaa <_sercom_get_default_pad+0xe6>
	return 0;
    4e9e:	2000      	movs	r0, #0
    4ea0:	e79e      	b.n	4de0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4ea2:	481e      	ldr	r0, [pc, #120]	; (4f1c <_sercom_get_default_pad+0x158>)
    4ea4:	e79c      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4ea6:	481e      	ldr	r0, [pc, #120]	; (4f20 <_sercom_get_default_pad+0x15c>)
    4ea8:	e79a      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4eaa:	481e      	ldr	r0, [pc, #120]	; (4f24 <_sercom_get_default_pad+0x160>)
    4eac:	e798      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4eae:	481e      	ldr	r0, [pc, #120]	; (4f28 <_sercom_get_default_pad+0x164>)
    4eb0:	e796      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4eb2:	2003      	movs	r0, #3
    4eb4:	e794      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4eb6:	481d      	ldr	r0, [pc, #116]	; (4f2c <_sercom_get_default_pad+0x168>)
    4eb8:	e792      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4eba:	481d      	ldr	r0, [pc, #116]	; (4f30 <_sercom_get_default_pad+0x16c>)
    4ebc:	e790      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4ebe:	481d      	ldr	r0, [pc, #116]	; (4f34 <_sercom_get_default_pad+0x170>)
    4ec0:	e78e      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4ec2:	481d      	ldr	r0, [pc, #116]	; (4f38 <_sercom_get_default_pad+0x174>)
    4ec4:	e78c      	b.n	4de0 <_sercom_get_default_pad+0x1c>
    4ec6:	46c0      	nop			; (mov r8, r8)
    4ec8:	42001000 	.word	0x42001000
    4ecc:	42001800 	.word	0x42001800
    4ed0:	42001c00 	.word	0x42001c00
    4ed4:	42001400 	.word	0x42001400
    4ed8:	42000800 	.word	0x42000800
    4edc:	42000c00 	.word	0x42000c00
    4ee0:	00050003 	.word	0x00050003
    4ee4:	00060003 	.word	0x00060003
    4ee8:	00070003 	.word	0x00070003
    4eec:	00010003 	.word	0x00010003
    4ef0:	001e0003 	.word	0x001e0003
    4ef4:	001f0003 	.word	0x001f0003
    4ef8:	00090003 	.word	0x00090003
    4efc:	000a0003 	.word	0x000a0003
    4f00:	000b0003 	.word	0x000b0003
    4f04:	00110003 	.word	0x00110003
    4f08:	00120003 	.word	0x00120003
    4f0c:	00130003 	.word	0x00130003
    4f10:	000d0003 	.word	0x000d0003
    4f14:	000e0003 	.word	0x000e0003
    4f18:	000f0003 	.word	0x000f0003
    4f1c:	00170003 	.word	0x00170003
    4f20:	00180003 	.word	0x00180003
    4f24:	00190003 	.word	0x00190003
    4f28:	00040003 	.word	0x00040003
    4f2c:	00080003 	.word	0x00080003
    4f30:	00100003 	.word	0x00100003
    4f34:	000c0003 	.word	0x000c0003
    4f38:	00160003 	.word	0x00160003

00004f3c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4f3c:	b530      	push	{r4, r5, lr}
    4f3e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4f40:	4b0b      	ldr	r3, [pc, #44]	; (4f70 <_sercom_get_sercom_inst_index+0x34>)
    4f42:	466a      	mov	r2, sp
    4f44:	cb32      	ldmia	r3!, {r1, r4, r5}
    4f46:	c232      	stmia	r2!, {r1, r4, r5}
    4f48:	cb32      	ldmia	r3!, {r1, r4, r5}
    4f4a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4f4c:	9b00      	ldr	r3, [sp, #0]
    4f4e:	4283      	cmp	r3, r0
    4f50:	d00b      	beq.n	4f6a <_sercom_get_sercom_inst_index+0x2e>
    4f52:	2301      	movs	r3, #1
    4f54:	009a      	lsls	r2, r3, #2
    4f56:	4669      	mov	r1, sp
    4f58:	5852      	ldr	r2, [r2, r1]
    4f5a:	4282      	cmp	r2, r0
    4f5c:	d006      	beq.n	4f6c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4f5e:	3301      	adds	r3, #1
    4f60:	2b06      	cmp	r3, #6
    4f62:	d1f7      	bne.n	4f54 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4f64:	2000      	movs	r0, #0
}
    4f66:	b007      	add	sp, #28
    4f68:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4f6a:	2300      	movs	r3, #0
			return i;
    4f6c:	b2d8      	uxtb	r0, r3
    4f6e:	e7fa      	b.n	4f66 <_sercom_get_sercom_inst_index+0x2a>
    4f70:	00007f70 	.word	0x00007f70

00004f74 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    4f74:	b570      	push	{r4, r5, r6, lr}
    4f76:	b082      	sub	sp, #8
    4f78:	0006      	movs	r6, r0
    4f7a:	000d      	movs	r5, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    4f7c:	2200      	movs	r2, #0
    4f7e:	466b      	mov	r3, sp
    4f80:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4f82:	6804      	ldr	r4, [r0, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    4f84:	69e3      	ldr	r3, [r4, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    4f86:	2b00      	cmp	r3, #0
    4f88:	d1fc      	bne.n	4f84 <spi_set_baudrate+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    4f8a:	338f      	adds	r3, #143	; 0x8f
    4f8c:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4f8e:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4f90:	6823      	ldr	r3, [r4, #0]
    4f92:	2202      	movs	r2, #2
    4f94:	4393      	bics	r3, r2
    4f96:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4f98:	6830      	ldr	r0, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    4f9a:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    4f9c:	2b00      	cmp	r3, #0
    4f9e:	d1fc      	bne.n	4f9a <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4fa0:	4b12      	ldr	r3, [pc, #72]	; (4fec <spi_set_baudrate+0x78>)
    4fa2:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4fa4:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4fa6:	b2c0      	uxtb	r0, r0
    4fa8:	4b11      	ldr	r3, [pc, #68]	; (4ff0 <spi_set_baudrate+0x7c>)
    4faa:	4798      	blx	r3
    4fac:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    4fae:	466b      	mov	r3, sp
    4fb0:	1d9a      	adds	r2, r3, #6
    4fb2:	0028      	movs	r0, r5
    4fb4:	4b0f      	ldr	r3, [pc, #60]	; (4ff4 <spi_set_baudrate+0x80>)
    4fb6:	4798      	blx	r3
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    4fb8:	2800      	cmp	r0, #0
    4fba:	d002      	beq.n	4fc2 <spi_set_baudrate+0x4e>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    4fbc:	2017      	movs	r0, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    4fbe:	b002      	add	sp, #8
    4fc0:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    4fc2:	466b      	mov	r3, sp
    4fc4:	3306      	adds	r3, #6
    4fc6:	781b      	ldrb	r3, [r3, #0]
    4fc8:	7323      	strb	r3, [r4, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4fca:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    4fcc:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    4fce:	2a00      	cmp	r2, #0
    4fd0:	d1fc      	bne.n	4fcc <spi_set_baudrate+0x58>
    4fd2:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    4fd4:	2a00      	cmp	r2, #0
    4fd6:	d1fc      	bne.n	4fd2 <spi_set_baudrate+0x5e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4fd8:	681a      	ldr	r2, [r3, #0]
    4fda:	2102      	movs	r1, #2
    4fdc:	430a      	orrs	r2, r1
    4fde:	601a      	str	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4fe0:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    4fe2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4fe4:	2b00      	cmp	r3, #0
    4fe6:	d1fc      	bne.n	4fe2 <spi_set_baudrate+0x6e>
    4fe8:	e7e9      	b.n	4fbe <spi_set_baudrate+0x4a>
    4fea:	46c0      	nop			; (mov r8, r8)
    4fec:	00004f3d 	.word	0x00004f3d
    4ff0:	00006475 	.word	0x00006475
    4ff4:	00004cbb 	.word	0x00004cbb

00004ff8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ffa:	46d6      	mov	lr, sl
    4ffc:	464f      	mov	r7, r9
    4ffe:	b580      	push	{r7, lr}
    5000:	b08b      	sub	sp, #44	; 0x2c
    5002:	4681      	mov	r9, r0
    5004:	000f      	movs	r7, r1
    5006:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    5008:	0003      	movs	r3, r0
    500a:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    500c:	680b      	ldr	r3, [r1, #0]
    500e:	079b      	lsls	r3, r3, #30
    5010:	d409      	bmi.n	5026 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5012:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    5014:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5016:	07db      	lsls	r3, r3, #31
    5018:	d400      	bmi.n	501c <spi_init+0x24>
    501a:	e0b1      	b.n	5180 <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    501c:	b00b      	add	sp, #44	; 0x2c
    501e:	bc0c      	pop	{r2, r3}
    5020:	4691      	mov	r9, r2
    5022:	469a      	mov	sl, r3
    5024:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    5026:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5028:	9305      	str	r3, [sp, #20]
    502a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    502c:	9306      	str	r3, [sp, #24]
    502e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5030:	9307      	str	r3, [sp, #28]
    5032:	6b53      	ldr	r3, [r2, #52]	; 0x34
    5034:	9308      	str	r3, [sp, #32]
    5036:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5038:	ab05      	add	r3, sp, #20
    503a:	9301      	str	r3, [sp, #4]
    503c:	e00a      	b.n	5054 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    503e:	0038      	movs	r0, r7
    5040:	4baf      	ldr	r3, [pc, #700]	; (5300 <spi_init+0x308>)
    5042:	4798      	blx	r3
    5044:	e00c      	b.n	5060 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    5046:	230f      	movs	r3, #15
    5048:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    504a:	4281      	cmp	r1, r0
    504c:	d12d      	bne.n	50aa <spi_init+0xb2>
    504e:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5050:	2e04      	cmp	r6, #4
    5052:	d02f      	beq.n	50b4 <spi_init+0xbc>
    5054:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5056:	00b3      	lsls	r3, r6, #2
    5058:	9a01      	ldr	r2, [sp, #4]
    505a:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    505c:	2800      	cmp	r0, #0
    505e:	d0ee      	beq.n	503e <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    5060:	1c43      	adds	r3, r0, #1
    5062:	d0f4      	beq.n	504e <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    5064:	0401      	lsls	r1, r0, #16
    5066:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    5068:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    506a:	b2c3      	uxtb	r3, r0
    506c:	469c      	mov	ip, r3
		return NULL;
    506e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5070:	0602      	lsls	r2, r0, #24
    5072:	d405      	bmi.n	5080 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    5074:	4663      	mov	r3, ip
    5076:	095b      	lsrs	r3, r3, #5
    5078:	01db      	lsls	r3, r3, #7
    507a:	4aa2      	ldr	r2, [pc, #648]	; (5304 <spi_init+0x30c>)
    507c:	4692      	mov	sl, r2
    507e:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    5080:	221f      	movs	r2, #31
    5082:	4660      	mov	r0, ip
    5084:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5086:	1898      	adds	r0, r3, r2
    5088:	3040      	adds	r0, #64	; 0x40
    508a:	7800      	ldrb	r0, [r0, #0]
    508c:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    508e:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5090:	4655      	mov	r5, sl
    5092:	07ed      	lsls	r5, r5, #31
    5094:	d5d9      	bpl.n	504a <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    5096:	0852      	lsrs	r2, r2, #1
    5098:	189b      	adds	r3, r3, r2
    509a:	3330      	adds	r3, #48	; 0x30
    509c:	7818      	ldrb	r0, [r3, #0]
    509e:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    50a0:	4663      	mov	r3, ip
    50a2:	07db      	lsls	r3, r3, #31
    50a4:	d5cf      	bpl.n	5046 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    50a6:	0900      	lsrs	r0, r0, #4
    50a8:	e7cf      	b.n	504a <spi_init+0x52>
			module->hw = NULL;
    50aa:	2300      	movs	r3, #0
    50ac:	464a      	mov	r2, r9
    50ae:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    50b0:	201c      	movs	r0, #28
    50b2:	e7b3      	b.n	501c <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    50b4:	2013      	movs	r0, #19
    50b6:	4b94      	ldr	r3, [pc, #592]	; (5308 <spi_init+0x310>)
    50b8:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    50ba:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    50bc:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    50be:	2a01      	cmp	r2, #1
    50c0:	d016      	beq.n	50f0 <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
    50c2:	7821      	ldrb	r1, [r4, #0]
    50c4:	2900      	cmp	r1, #0
    50c6:	d127      	bne.n	5118 <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
    50c8:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    50ca:	7fe2      	ldrb	r2, [r4, #31]
    50cc:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    50ce:	7fa0      	ldrb	r0, [r4, #30]
    50d0:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    50d2:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    50d4:	429a      	cmp	r2, r3
    50d6:	d1a1      	bne.n	501c <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    50d8:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    50da:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    50dc:	3004      	adds	r0, #4
    50de:	5c20      	ldrb	r0, [r4, r0]
    50e0:	2800      	cmp	r0, #0
    50e2:	d001      	beq.n	50e8 <spi_init+0xf0>
    50e4:	2040      	movs	r0, #64	; 0x40
    50e6:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    50e8:	2008      	movs	r0, #8
    50ea:	4303      	orrs	r3, r0
    50ec:	431d      	orrs	r5, r3
    50ee:	e014      	b.n	511a <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
    50f0:	aa04      	add	r2, sp, #16
    50f2:	0001      	movs	r1, r0
    50f4:	69a0      	ldr	r0, [r4, #24]
    50f6:	4b85      	ldr	r3, [pc, #532]	; (530c <spi_init+0x314>)
    50f8:	4798      	blx	r3
    50fa:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    50fc:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    50fe:	2b00      	cmp	r3, #0
    5100:	d000      	beq.n	5104 <spi_init+0x10c>
    5102:	e78b      	b.n	501c <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5104:	7b3b      	ldrb	r3, [r7, #12]
    5106:	b2db      	uxtb	r3, r3
    5108:	aa04      	add	r2, sp, #16
    510a:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    510c:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    510e:	429a      	cmp	r2, r3
    5110:	d000      	beq.n	5114 <spi_init+0x11c>
    5112:	e783      	b.n	501c <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    5114:	350c      	adds	r5, #12
    5116:	e7d4      	b.n	50c2 <spi_init+0xca>
	uint32_t ctrlb = 0;
    5118:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    511a:	6863      	ldr	r3, [r4, #4]
    511c:	68a0      	ldr	r0, [r4, #8]
    511e:	4303      	orrs	r3, r0
    5120:	68e0      	ldr	r0, [r4, #12]
    5122:	4303      	orrs	r3, r0
    5124:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    5126:	7c20      	ldrb	r0, [r4, #16]
    5128:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    512a:	7c60      	ldrb	r0, [r4, #17]
    512c:	2800      	cmp	r0, #0
    512e:	d001      	beq.n	5134 <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5130:	2080      	movs	r0, #128	; 0x80
    5132:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    5134:	7ca0      	ldrb	r0, [r4, #18]
    5136:	2800      	cmp	r0, #0
    5138:	d002      	beq.n	5140 <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    513a:	2080      	movs	r0, #128	; 0x80
    513c:	0280      	lsls	r0, r0, #10
    513e:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    5140:	7ce0      	ldrb	r0, [r4, #19]
    5142:	2800      	cmp	r0, #0
    5144:	d002      	beq.n	514c <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5146:	2080      	movs	r0, #128	; 0x80
    5148:	0080      	lsls	r0, r0, #2
    514a:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    514c:	7d20      	ldrb	r0, [r4, #20]
    514e:	2800      	cmp	r0, #0
    5150:	d002      	beq.n	5158 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5152:	2080      	movs	r0, #128	; 0x80
    5154:	0180      	lsls	r0, r0, #6
    5156:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    5158:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    515a:	2502      	movs	r5, #2
    515c:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    515e:	4283      	cmp	r3, r0
    5160:	d004      	beq.n	516c <spi_init+0x174>
	module->hw = NULL;
    5162:	2300      	movs	r3, #0
    5164:	464a      	mov	r2, r9
    5166:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    5168:	201c      	movs	r0, #28
    516a:	e757      	b.n	501c <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    516c:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    516e:	4293      	cmp	r3, r2
    5170:	d1f7      	bne.n	5162 <spi_init+0x16a>
		module->mode           = config->mode;
    5172:	464b      	mov	r3, r9
    5174:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
    5176:	7c23      	ldrb	r3, [r4, #16]
    5178:	464a      	mov	r2, r9
    517a:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    517c:	2000      	movs	r0, #0
    517e:	e74d      	b.n	501c <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5180:	0008      	movs	r0, r1
    5182:	4b63      	ldr	r3, [pc, #396]	; (5310 <spi_init+0x318>)
    5184:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    5186:	4a63      	ldr	r2, [pc, #396]	; (5314 <spi_init+0x31c>)
    5188:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    518a:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    518c:	2301      	movs	r3, #1
    518e:	40ab      	lsls	r3, r5
    5190:	430b      	orrs	r3, r1
    5192:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    5194:	a909      	add	r1, sp, #36	; 0x24
    5196:	2624      	movs	r6, #36	; 0x24
    5198:	5da3      	ldrb	r3, [r4, r6]
    519a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    519c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    519e:	b2c5      	uxtb	r5, r0
    51a0:	0028      	movs	r0, r5
    51a2:	4b5d      	ldr	r3, [pc, #372]	; (5318 <spi_init+0x320>)
    51a4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    51a6:	0028      	movs	r0, r5
    51a8:	4b5c      	ldr	r3, [pc, #368]	; (531c <spi_init+0x324>)
    51aa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    51ac:	5da0      	ldrb	r0, [r4, r6]
    51ae:	2100      	movs	r1, #0
    51b0:	4b5b      	ldr	r3, [pc, #364]	; (5320 <spi_init+0x328>)
    51b2:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    51b4:	7823      	ldrb	r3, [r4, #0]
    51b6:	2b01      	cmp	r3, #1
    51b8:	d020      	beq.n	51fc <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
    51ba:	7823      	ldrb	r3, [r4, #0]
    51bc:	2b00      	cmp	r3, #0
    51be:	d103      	bne.n	51c8 <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    51c0:	683b      	ldr	r3, [r7, #0]
    51c2:	2208      	movs	r2, #8
    51c4:	4313      	orrs	r3, r2
    51c6:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    51c8:	464b      	mov	r3, r9
    51ca:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    51cc:	ab04      	add	r3, sp, #16
    51ce:	2280      	movs	r2, #128	; 0x80
    51d0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    51d2:	2200      	movs	r2, #0
    51d4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    51d6:	2101      	movs	r1, #1
    51d8:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    51da:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    51dc:	7823      	ldrb	r3, [r4, #0]
    51de:	2b00      	cmp	r3, #0
    51e0:	d101      	bne.n	51e6 <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    51e2:	ab04      	add	r3, sp, #16
    51e4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    51e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    51e8:	9305      	str	r3, [sp, #20]
    51ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    51ec:	9306      	str	r3, [sp, #24]
    51ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    51f0:	9307      	str	r3, [sp, #28]
    51f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    51f4:	9308      	str	r3, [sp, #32]
    51f6:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    51f8:	ad05      	add	r5, sp, #20
    51fa:	e011      	b.n	5220 <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    51fc:	683b      	ldr	r3, [r7, #0]
    51fe:	220c      	movs	r2, #12
    5200:	4313      	orrs	r3, r2
    5202:	603b      	str	r3, [r7, #0]
    5204:	e7d9      	b.n	51ba <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5206:	0030      	movs	r0, r6
    5208:	4b3d      	ldr	r3, [pc, #244]	; (5300 <spi_init+0x308>)
    520a:	4798      	blx	r3
    520c:	e00d      	b.n	522a <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    520e:	a904      	add	r1, sp, #16
    5210:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5212:	0c00      	lsrs	r0, r0, #16
    5214:	b2c0      	uxtb	r0, r0
    5216:	4b43      	ldr	r3, [pc, #268]	; (5324 <spi_init+0x32c>)
    5218:	4798      	blx	r3
    521a:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    521c:	2f04      	cmp	r7, #4
    521e:	d007      	beq.n	5230 <spi_init+0x238>
    5220:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5222:	00bb      	lsls	r3, r7, #2
    5224:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    5226:	2800      	cmp	r0, #0
    5228:	d0ed      	beq.n	5206 <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
    522a:	1c43      	adds	r3, r0, #1
    522c:	d1ef      	bne.n	520e <spi_init+0x216>
    522e:	e7f4      	b.n	521a <spi_init+0x222>
	module->mode             = config->mode;
    5230:	7823      	ldrb	r3, [r4, #0]
    5232:	464a      	mov	r2, r9
    5234:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    5236:	7c23      	ldrb	r3, [r4, #16]
    5238:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    523a:	7ca3      	ldrb	r3, [r4, #18]
    523c:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    523e:	7d23      	ldrb	r3, [r4, #20]
    5240:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    5242:	2200      	movs	r2, #0
    5244:	ab02      	add	r3, sp, #8
    5246:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    5248:	7823      	ldrb	r3, [r4, #0]
    524a:	2b01      	cmp	r3, #1
    524c:	d012      	beq.n	5274 <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
    524e:	7823      	ldrb	r3, [r4, #0]
    5250:	2b00      	cmp	r3, #0
    5252:	d127      	bne.n	52a4 <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
    5254:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    5256:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    5258:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    525a:	7fe1      	ldrb	r1, [r4, #31]
    525c:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    525e:	7fa5      	ldrb	r5, [r4, #30]
    5260:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    5262:	4319      	orrs	r1, r3
    5264:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    5266:	2320      	movs	r3, #32
    5268:	5ce3      	ldrb	r3, [r4, r3]
    526a:	2b00      	cmp	r3, #0
    526c:	d01c      	beq.n	52a8 <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    526e:	2340      	movs	r3, #64	; 0x40
    5270:	431a      	orrs	r2, r3
    5272:	e019      	b.n	52a8 <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5274:	464b      	mov	r3, r9
    5276:	6818      	ldr	r0, [r3, #0]
    5278:	4b25      	ldr	r3, [pc, #148]	; (5310 <spi_init+0x318>)
    527a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    527c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    527e:	b2c0      	uxtb	r0, r0
    5280:	4b21      	ldr	r3, [pc, #132]	; (5308 <spi_init+0x310>)
    5282:	4798      	blx	r3
    5284:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    5286:	ab02      	add	r3, sp, #8
    5288:	1d9a      	adds	r2, r3, #6
    528a:	69a0      	ldr	r0, [r4, #24]
    528c:	4b1f      	ldr	r3, [pc, #124]	; (530c <spi_init+0x314>)
    528e:	4798      	blx	r3
    5290:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5292:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5294:	2b00      	cmp	r3, #0
    5296:	d000      	beq.n	529a <spi_init+0x2a2>
    5298:	e6c0      	b.n	501c <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    529a:	ab02      	add	r3, sp, #8
    529c:	3306      	adds	r3, #6
    529e:	781b      	ldrb	r3, [r3, #0]
    52a0:	7333      	strb	r3, [r6, #12]
    52a2:	e7d4      	b.n	524e <spi_init+0x256>
	uint32_t ctrlb = 0;
    52a4:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    52a6:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    52a8:	6863      	ldr	r3, [r4, #4]
    52aa:	68a1      	ldr	r1, [r4, #8]
    52ac:	430b      	orrs	r3, r1
    52ae:	68e1      	ldr	r1, [r4, #12]
    52b0:	430b      	orrs	r3, r1
    52b2:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    52b4:	7c21      	ldrb	r1, [r4, #16]
    52b6:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    52b8:	7c61      	ldrb	r1, [r4, #17]
    52ba:	2900      	cmp	r1, #0
    52bc:	d103      	bne.n	52c6 <spi_init+0x2ce>
    52be:	491a      	ldr	r1, [pc, #104]	; (5328 <spi_init+0x330>)
    52c0:	7889      	ldrb	r1, [r1, #2]
    52c2:	0789      	lsls	r1, r1, #30
    52c4:	d501      	bpl.n	52ca <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    52c6:	2180      	movs	r1, #128	; 0x80
    52c8:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    52ca:	7ca1      	ldrb	r1, [r4, #18]
    52cc:	2900      	cmp	r1, #0
    52ce:	d002      	beq.n	52d6 <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    52d0:	2180      	movs	r1, #128	; 0x80
    52d2:	0289      	lsls	r1, r1, #10
    52d4:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    52d6:	7ce1      	ldrb	r1, [r4, #19]
    52d8:	2900      	cmp	r1, #0
    52da:	d002      	beq.n	52e2 <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    52dc:	2180      	movs	r1, #128	; 0x80
    52de:	0089      	lsls	r1, r1, #2
    52e0:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    52e2:	7d21      	ldrb	r1, [r4, #20]
    52e4:	2900      	cmp	r1, #0
    52e6:	d002      	beq.n	52ee <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    52e8:	2180      	movs	r1, #128	; 0x80
    52ea:	0189      	lsls	r1, r1, #6
    52ec:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    52ee:	6831      	ldr	r1, [r6, #0]
    52f0:	430b      	orrs	r3, r1
    52f2:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    52f4:	6873      	ldr	r3, [r6, #4]
    52f6:	431a      	orrs	r2, r3
    52f8:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    52fa:	2000      	movs	r0, #0
    52fc:	e68e      	b.n	501c <spi_init+0x24>
    52fe:	46c0      	nop			; (mov r8, r8)
    5300:	00004dc5 	.word	0x00004dc5
    5304:	41004400 	.word	0x41004400
    5308:	00006475 	.word	0x00006475
    530c:	00004cbb 	.word	0x00004cbb
    5310:	00004f3d 	.word	0x00004f3d
    5314:	40000400 	.word	0x40000400
    5318:	00006459 	.word	0x00006459
    531c:	000063cd 	.word	0x000063cd
    5320:	00004d79 	.word	0x00004d79
    5324:	00006551 	.word	0x00006551
    5328:	41002000 	.word	0x41002000

0000532c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    532c:	b5f0      	push	{r4, r5, r6, r7, lr}
    532e:	46d6      	mov	lr, sl
    5330:	464f      	mov	r7, r9
    5332:	4646      	mov	r6, r8
    5334:	b5c0      	push	{r6, r7, lr}
    5336:	b082      	sub	sp, #8
    5338:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    533a:	2717      	movs	r7, #23
	if (length == 0) {
    533c:	2a00      	cmp	r2, #0
    533e:	d073      	beq.n	5428 <spi_read_buffer_wait+0xfc>
	}

	if (!(module->receiver_enabled)) {
    5340:	79c1      	ldrb	r1, [r0, #7]
		return STATUS_ERR_DENIED;
    5342:	3705      	adds	r7, #5
	if (!(module->receiver_enabled)) {
    5344:	2900      	cmp	r1, #0
    5346:	d06f      	beq.n	5428 <spi_read_buffer_wait+0xfc>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    5348:	7941      	ldrb	r1, [r0, #5]
    534a:	2900      	cmp	r1, #0
    534c:	d103      	bne.n	5356 <spi_read_buffer_wait+0x2a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    534e:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5350:	7e0c      	ldrb	r4, [r1, #24]
    5352:	07a4      	lsls	r4, r4, #30
    5354:	d40b      	bmi.n	536e <spi_read_buffer_wait+0x42>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    5356:	3a01      	subs	r2, #1
    5358:	b294      	uxth	r4, r2
    535a:	2500      	movs	r5, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    535c:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    535e:	2102      	movs	r1, #2
    5360:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    5362:	2601      	movs	r6, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5364:	05db      	lsls	r3, r3, #23
    5366:	0ddb      	lsrs	r3, r3, #23
    5368:	469a      	mov	sl, r3
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    536a:	46c4      	mov	ip, r8
    536c:	e037      	b.n	53de <spi_read_buffer_wait+0xb2>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    536e:	2402      	movs	r4, #2
    5370:	760c      	strb	r4, [r1, #24]
    5372:	e7f0      	b.n	5356 <spi_read_buffer_wait+0x2a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5374:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5376:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    5378:	4233      	tst	r3, r6
    537a:	d0fc      	beq.n	5376 <spi_read_buffer_wait+0x4a>
    537c:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    537e:	4233      	tst	r3, r6
    5380:	d009      	beq.n	5396 <spi_read_buffer_wait+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5382:	4653      	mov	r3, sl
    5384:	628b      	str	r3, [r1, #40]	; 0x28
    5386:	e02d      	b.n	53e4 <spi_read_buffer_wait+0xb8>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5388:	7e3b      	ldrb	r3, [r7, #24]
			if (spi_is_write_complete(module)) {
    538a:	4649      	mov	r1, r9
    538c:	420b      	tst	r3, r1
    538e:	d138      	bne.n	5402 <spi_read_buffer_wait+0xd6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5390:	7e3b      	ldrb	r3, [r7, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    5392:	4213      	tst	r3, r2
    5394:	d045      	beq.n	5422 <spi_read_buffer_wait+0xf6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5396:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5398:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    539a:	4213      	tst	r3, r2
    539c:	d0fc      	beq.n	5398 <spi_read_buffer_wait+0x6c>
    539e:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    53a0:	4213      	tst	r3, r2
    53a2:	d040      	beq.n	5426 <spi_read_buffer_wait+0xfa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    53a4:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    53a6:	2700      	movs	r7, #0
    53a8:	9701      	str	r7, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    53aa:	4213      	tst	r3, r2
    53ac:	d002      	beq.n	53b4 <spi_read_buffer_wait+0x88>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    53ae:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    53b0:	231e      	movs	r3, #30
    53b2:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    53b4:	7983      	ldrb	r3, [r0, #6]
    53b6:	2b01      	cmp	r3, #1
    53b8:	d027      	beq.n	540a <spi_read_buffer_wait+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    53ba:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    53bc:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    53be:	9901      	ldr	r1, [sp, #4]
    53c0:	2900      	cmp	r1, #0
    53c2:	d138      	bne.n	5436 <spi_read_buffer_wait+0x10a>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    53c4:	1c6f      	adds	r7, r5, #1
    53c6:	b2bf      	uxth	r7, r7
    53c8:	4661      	mov	r1, ip
    53ca:	554b      	strb	r3, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    53cc:	7981      	ldrb	r1, [r0, #6]
    53ce:	2901      	cmp	r1, #1
    53d0:	d01f      	beq.n	5412 <spi_read_buffer_wait+0xe6>
		rx_data[rx_pos++] = received_data;
    53d2:	003d      	movs	r5, r7
	while (length--) {
    53d4:	3c01      	subs	r4, #1
    53d6:	b2a4      	uxth	r4, r4
    53d8:	4918      	ldr	r1, [pc, #96]	; (543c <spi_read_buffer_wait+0x110>)
    53da:	428c      	cmp	r4, r1
    53dc:	d01f      	beq.n	541e <spi_read_buffer_wait+0xf2>
		if (module->mode == SPI_MODE_MASTER) {
    53de:	7943      	ldrb	r3, [r0, #5]
    53e0:	2b01      	cmp	r3, #1
    53e2:	d0c7      	beq.n	5374 <spi_read_buffer_wait+0x48>
		if (module->mode == SPI_MODE_SLAVE) {
    53e4:	7943      	ldrb	r3, [r0, #5]
    53e6:	2b00      	cmp	r3, #0
    53e8:	d1d5      	bne.n	5396 <spi_read_buffer_wait+0x6a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    53ea:	6807      	ldr	r7, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    53ec:	7e3b      	ldrb	r3, [r7, #24]
				if (spi_is_ready_to_read(module)) {
    53ee:	4213      	tst	r3, r2
    53f0:	d1ca      	bne.n	5388 <spi_read_buffer_wait+0x5c>
    53f2:	4b13      	ldr	r3, [pc, #76]	; (5440 <spi_read_buffer_wait+0x114>)
    53f4:	7e39      	ldrb	r1, [r7, #24]
    53f6:	4211      	tst	r1, r2
    53f8:	d1c6      	bne.n	5388 <spi_read_buffer_wait+0x5c>
    53fa:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    53fc:	2b00      	cmp	r3, #0
    53fe:	d1f9      	bne.n	53f4 <spi_read_buffer_wait+0xc8>
    5400:	e7c2      	b.n	5388 <spi_read_buffer_wait+0x5c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5402:	2302      	movs	r3, #2
    5404:	763b      	strb	r3, [r7, #24]
				return STATUS_ABORTED;
    5406:	2704      	movs	r7, #4
    5408:	e00e      	b.n	5428 <spi_read_buffer_wait+0xfc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    540a:	6a89      	ldr	r1, [r1, #40]	; 0x28
    540c:	05c9      	lsls	r1, r1, #23
    540e:	0dcb      	lsrs	r3, r1, #23
    5410:	e7d5      	b.n	53be <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
    5412:	3502      	adds	r5, #2
    5414:	b2ad      	uxth	r5, r5
    5416:	0a19      	lsrs	r1, r3, #8
    5418:	4663      	mov	r3, ip
    541a:	55d9      	strb	r1, [r3, r7]
    541c:	e7da      	b.n	53d4 <spi_read_buffer_wait+0xa8>
    541e:	9f01      	ldr	r7, [sp, #4]
    5420:	e002      	b.n	5428 <spi_read_buffer_wait+0xfc>
				return STATUS_ERR_TIMEOUT;
    5422:	2712      	movs	r7, #18
    5424:	e000      	b.n	5428 <spi_read_buffer_wait+0xfc>
		return STATUS_ERR_IO;
    5426:	2710      	movs	r7, #16
		}
	}

	return STATUS_OK;
}
    5428:	0038      	movs	r0, r7
    542a:	b002      	add	sp, #8
    542c:	bc1c      	pop	{r2, r3, r4}
    542e:	4690      	mov	r8, r2
    5430:	4699      	mov	r9, r3
    5432:	46a2      	mov	sl, r4
    5434:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5436:	9f01      	ldr	r7, [sp, #4]
    5438:	e7f6      	b.n	5428 <spi_read_buffer_wait+0xfc>
    543a:	46c0      	nop			; (mov r8, r8)
    543c:	0000ffff 	.word	0x0000ffff
    5440:	00002710 	.word	0x00002710

00005444 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    5444:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    5446:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    5448:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    544a:	2c01      	cmp	r4, #1
    544c:	d001      	beq.n	5452 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    544e:	0018      	movs	r0, r3
    5450:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    5452:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    5454:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    5456:	2c00      	cmp	r4, #0
    5458:	d1f9      	bne.n	544e <spi_select_slave+0xa>
		if (select) {
    545a:	2a00      	cmp	r2, #0
    545c:	d058      	beq.n	5510 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    545e:	784b      	ldrb	r3, [r1, #1]
    5460:	2b00      	cmp	r3, #0
    5462:	d044      	beq.n	54ee <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5464:	6803      	ldr	r3, [r0, #0]
    5466:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    5468:	07db      	lsls	r3, r3, #31
    546a:	d410      	bmi.n	548e <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    546c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    546e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5470:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5472:	2900      	cmp	r1, #0
    5474:	d104      	bne.n	5480 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    5476:	0953      	lsrs	r3, r2, #5
    5478:	01db      	lsls	r3, r3, #7
    547a:	492e      	ldr	r1, [pc, #184]	; (5534 <spi_select_slave+0xf0>)
    547c:	468c      	mov	ip, r1
    547e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5480:	211f      	movs	r1, #31
    5482:	4011      	ands	r1, r2
    5484:	2201      	movs	r2, #1
    5486:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5488:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    548a:	2305      	movs	r3, #5
    548c:	e7df      	b.n	544e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    548e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5490:	09d4      	lsrs	r4, r2, #7
		return NULL;
    5492:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5494:	2c00      	cmp	r4, #0
    5496:	d104      	bne.n	54a2 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    5498:	0953      	lsrs	r3, r2, #5
    549a:	01db      	lsls	r3, r3, #7
    549c:	4c25      	ldr	r4, [pc, #148]	; (5534 <spi_select_slave+0xf0>)
    549e:	46a4      	mov	ip, r4
    54a0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    54a2:	241f      	movs	r4, #31
    54a4:	4014      	ands	r4, r2
    54a6:	2201      	movs	r2, #1
    54a8:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    54aa:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    54ac:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    54ae:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    54b0:	07d2      	lsls	r2, r2, #31
    54b2:	d501      	bpl.n	54b8 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    54b4:	788a      	ldrb	r2, [r1, #2]
    54b6:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    54b8:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    54ba:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    54bc:	2a00      	cmp	r2, #0
    54be:	d1c6      	bne.n	544e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    54c0:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    54c2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    54c4:	7e13      	ldrb	r3, [r2, #24]
    54c6:	420b      	tst	r3, r1
    54c8:	d0fc      	beq.n	54c4 <spi_select_slave+0x80>
    54ca:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    54cc:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    54ce:	0749      	lsls	r1, r1, #29
    54d0:	d5bd      	bpl.n	544e <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    54d2:	8b53      	ldrh	r3, [r2, #26]
    54d4:	075b      	lsls	r3, r3, #29
    54d6:	d501      	bpl.n	54dc <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    54d8:	2304      	movs	r3, #4
    54da:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    54dc:	7983      	ldrb	r3, [r0, #6]
    54de:	2b01      	cmp	r3, #1
    54e0:	d002      	beq.n	54e8 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    54e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    54e4:	2300      	movs	r3, #0
    54e6:	e7b2      	b.n	544e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    54e8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    54ea:	2300      	movs	r3, #0
    54ec:	e7af      	b.n	544e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    54ee:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    54f0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    54f2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    54f4:	2900      	cmp	r1, #0
    54f6:	d104      	bne.n	5502 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    54f8:	0953      	lsrs	r3, r2, #5
    54fa:	01db      	lsls	r3, r3, #7
    54fc:	490d      	ldr	r1, [pc, #52]	; (5534 <spi_select_slave+0xf0>)
    54fe:	468c      	mov	ip, r1
    5500:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5502:	211f      	movs	r1, #31
    5504:	4011      	ands	r1, r2
    5506:	2201      	movs	r2, #1
    5508:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    550a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    550c:	2300      	movs	r3, #0
    550e:	e79e      	b.n	544e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    5510:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5512:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5514:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5516:	2900      	cmp	r1, #0
    5518:	d104      	bne.n	5524 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    551a:	0953      	lsrs	r3, r2, #5
    551c:	01db      	lsls	r3, r3, #7
    551e:	4905      	ldr	r1, [pc, #20]	; (5534 <spi_select_slave+0xf0>)
    5520:	468c      	mov	ip, r1
    5522:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5524:	211f      	movs	r1, #31
    5526:	4011      	ands	r1, r2
    5528:	2201      	movs	r2, #1
    552a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    552c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    552e:	2300      	movs	r3, #0
    5530:	e78d      	b.n	544e <spi_select_slave+0xa>
    5532:	46c0      	nop			; (mov r8, r8)
    5534:	41004400 	.word	0x41004400

00005538 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    5538:	b5f0      	push	{r4, r5, r6, r7, lr}
    553a:	46de      	mov	lr, fp
    553c:	4657      	mov	r7, sl
    553e:	464e      	mov	r6, r9
    5540:	4645      	mov	r5, r8
    5542:	b5e0      	push	{r5, r6, r7, lr}
    5544:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5546:	2317      	movs	r3, #23
	if (length == 0) {
    5548:	2a00      	cmp	r2, #0
    554a:	d107      	bne.n	555c <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    554c:	0018      	movs	r0, r3
    554e:	b003      	add	sp, #12
    5550:	bc3c      	pop	{r2, r3, r4, r5}
    5552:	4690      	mov	r8, r2
    5554:	4699      	mov	r9, r3
    5556:	46a2      	mov	sl, r4
    5558:	46ab      	mov	fp, r5
    555a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    555c:	7943      	ldrb	r3, [r0, #5]
    555e:	2b00      	cmp	r3, #0
    5560:	d103      	bne.n	556a <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5562:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5564:	7e1c      	ldrb	r4, [r3, #24]
    5566:	07a4      	lsls	r4, r4, #30
    5568:	d40a      	bmi.n	5580 <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
    556a:	4693      	mov	fp, r2
    556c:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    556e:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    5570:	2502      	movs	r5, #2
    5572:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    5574:	3502      	adds	r5, #2
    5576:	46a8      	mov	r8, r5
    5578:	3a01      	subs	r2, #1
    557a:	b292      	uxth	r2, r2
    557c:	468a      	mov	sl, r1
    557e:	e023      	b.n	55c8 <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5580:	2402      	movs	r4, #2
    5582:	761c      	strb	r4, [r3, #24]
    5584:	e7f1      	b.n	556a <spi_write_buffer_wait+0x32>
    5586:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    5588:	4661      	mov	r1, ip
    558a:	420d      	tst	r5, r1
    558c:	d12e      	bne.n	55ec <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    558e:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    5590:	421d      	tst	r5, r3
    5592:	d100      	bne.n	5596 <spi_write_buffer_wait+0x5e>
    5594:	e0c2      	b.n	571c <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5596:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5598:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    559a:	421d      	tst	r5, r3
    559c:	d0fc      	beq.n	5598 <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
    559e:	1c67      	adds	r7, r4, #1
    55a0:	b2bf      	uxth	r7, r7
    55a2:	4651      	mov	r1, sl
    55a4:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    55a6:	7981      	ldrb	r1, [r0, #6]
    55a8:	2901      	cmp	r1, #1
    55aa:	d023      	beq.n	55f4 <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    55ac:	b2ad      	uxth	r5, r5
    55ae:	003c      	movs	r4, r7
    55b0:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    55b2:	421f      	tst	r7, r3
    55b4:	d002      	beq.n	55bc <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    55b6:	05ed      	lsls	r5, r5, #23
    55b8:	0ded      	lsrs	r5, r5, #23
    55ba:	62b5      	str	r5, [r6, #40]	; 0x28
    55bc:	1e55      	subs	r5, r2, #1
    55be:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    55c0:	79c6      	ldrb	r6, [r0, #7]
    55c2:	2e00      	cmp	r6, #0
    55c4:	d11d      	bne.n	5602 <spi_write_buffer_wait+0xca>
    55c6:	002a      	movs	r2, r5
	while (length--) {
    55c8:	4d59      	ldr	r5, [pc, #356]	; (5730 <spi_write_buffer_wait+0x1f8>)
    55ca:	42aa      	cmp	r2, r5
    55cc:	d070      	beq.n	56b0 <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
    55ce:	7945      	ldrb	r5, [r0, #5]
    55d0:	2d00      	cmp	r5, #0
    55d2:	d1e0      	bne.n	5596 <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    55d4:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    55d6:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    55d8:	421d      	tst	r5, r3
    55da:	d1d4      	bne.n	5586 <spi_write_buffer_wait+0x4e>
    55dc:	4d55      	ldr	r5, [pc, #340]	; (5734 <spi_write_buffer_wait+0x1fc>)
    55de:	7e37      	ldrb	r7, [r6, #24]
    55e0:	421f      	tst	r7, r3
    55e2:	d1d0      	bne.n	5586 <spi_write_buffer_wait+0x4e>
    55e4:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    55e6:	2d00      	cmp	r5, #0
    55e8:	d1f9      	bne.n	55de <spi_write_buffer_wait+0xa6>
    55ea:	e7cc      	b.n	5586 <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    55ec:	2302      	movs	r3, #2
    55ee:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    55f0:	3302      	adds	r3, #2
    55f2:	e7ab      	b.n	554c <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    55f4:	3402      	adds	r4, #2
    55f6:	b2a4      	uxth	r4, r4
    55f8:	4651      	mov	r1, sl
    55fa:	5dcf      	ldrb	r7, [r1, r7]
    55fc:	023f      	lsls	r7, r7, #8
    55fe:	433d      	orrs	r5, r7
    5600:	e7d6      	b.n	55b0 <spi_write_buffer_wait+0x78>
    5602:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    5604:	7945      	ldrb	r5, [r0, #5]
    5606:	2d00      	cmp	r5, #0
    5608:	d137      	bne.n	567a <spi_write_buffer_wait+0x142>
    560a:	4d4b      	ldr	r5, [pc, #300]	; (5738 <spi_write_buffer_wait+0x200>)
    560c:	9101      	str	r1, [sp, #4]
    560e:	e012      	b.n	5636 <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
    5610:	3402      	adds	r4, #2
    5612:	b2a4      	uxth	r4, r4
    5614:	4649      	mov	r1, r9
    5616:	9f01      	ldr	r7, [sp, #4]
    5618:	5c79      	ldrb	r1, [r7, r1]
    561a:	0209      	lsls	r1, r1, #8
    561c:	9f00      	ldr	r7, [sp, #0]
    561e:	430f      	orrs	r7, r1
    5620:	e01b      	b.n	565a <spi_write_buffer_wait+0x122>
						length--;
    5622:	3a01      	subs	r2, #1
    5624:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    5626:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5628:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    562a:	4641      	mov	r1, r8
    562c:	420f      	tst	r7, r1
    562e:	d11b      	bne.n	5668 <spi_write_buffer_wait+0x130>
    5630:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5632:	2d00      	cmp	r5, #0
    5634:	d018      	beq.n	5668 <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
    5636:	2a00      	cmp	r2, #0
    5638:	d0f5      	beq.n	5626 <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    563a:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    563c:	7e37      	ldrb	r7, [r6, #24]
    563e:	421f      	tst	r7, r3
    5640:	d0f1      	beq.n	5626 <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    5642:	1c67      	adds	r7, r4, #1
    5644:	b2b9      	uxth	r1, r7
    5646:	4689      	mov	r9, r1
    5648:	9901      	ldr	r1, [sp, #4]
    564a:	5d09      	ldrb	r1, [r1, r4]
    564c:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    564e:	7981      	ldrb	r1, [r0, #6]
    5650:	2901      	cmp	r1, #1
    5652:	d0dd      	beq.n	5610 <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
    5654:	4669      	mov	r1, sp
    5656:	880f      	ldrh	r7, [r1, #0]
    5658:	464c      	mov	r4, r9
    565a:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    565c:	4219      	tst	r1, r3
    565e:	d0e0      	beq.n	5622 <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5660:	05ff      	lsls	r7, r7, #23
    5662:	0dff      	lsrs	r7, r7, #23
    5664:	62b7      	str	r7, [r6, #40]	; 0x28
    5666:	e7dc      	b.n	5622 <spi_write_buffer_wait+0xea>
    5668:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    566a:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    566c:	4667      	mov	r7, ip
    566e:	423d      	tst	r5, r7
    5670:	d118      	bne.n	56a4 <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5672:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    5674:	4646      	mov	r6, r8
    5676:	4235      	tst	r5, r6
    5678:	d052      	beq.n	5720 <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    567a:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    567c:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    567e:	4647      	mov	r7, r8
    5680:	423d      	tst	r5, r7
    5682:	d0fb      	beq.n	567c <spi_write_buffer_wait+0x144>
    5684:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    5686:	423d      	tst	r5, r7
    5688:	d007      	beq.n	569a <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    568a:	8b75      	ldrh	r5, [r6, #26]
    568c:	423d      	tst	r5, r7
    568e:	d000      	beq.n	5692 <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5690:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5692:	7985      	ldrb	r5, [r0, #6]
    5694:	2d01      	cmp	r5, #1
    5696:	d009      	beq.n	56ac <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5698:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    569a:	465d      	mov	r5, fp
    569c:	3d01      	subs	r5, #1
    569e:	b2ad      	uxth	r5, r5
    56a0:	46ab      	mov	fp, r5
    56a2:	e769      	b.n	5578 <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    56a4:	2302      	movs	r3, #2
    56a6:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    56a8:	3302      	adds	r3, #2
    56aa:	e74f      	b.n	554c <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    56ac:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    56ae:	e7f4      	b.n	569a <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
    56b0:	7943      	ldrb	r3, [r0, #5]
    56b2:	2b01      	cmp	r3, #1
    56b4:	d00b      	beq.n	56ce <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
    56b6:	2b00      	cmp	r3, #0
    56b8:	d134      	bne.n	5724 <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
    56ba:	79c2      	ldrb	r2, [r0, #7]
    56bc:	2a00      	cmp	r2, #0
    56be:	d100      	bne.n	56c2 <spi_write_buffer_wait+0x18a>
    56c0:	e744      	b.n	554c <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    56c2:	2404      	movs	r4, #4
			while (flush_length) {
    56c4:	465b      	mov	r3, fp
    56c6:	465d      	mov	r5, fp
    56c8:	2b00      	cmp	r3, #0
    56ca:	d119      	bne.n	5700 <spi_write_buffer_wait+0x1c8>
    56cc:	e73e      	b.n	554c <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    56ce:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    56d0:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    56d2:	7e0b      	ldrb	r3, [r1, #24]
    56d4:	4213      	tst	r3, r2
    56d6:	d0fc      	beq.n	56d2 <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    56d8:	2300      	movs	r3, #0
    56da:	e737      	b.n	554c <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    56dc:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    56de:	4223      	tst	r3, r4
    56e0:	d022      	beq.n	5728 <spi_write_buffer_wait+0x1f0>
    56e2:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    56e4:	4223      	tst	r3, r4
    56e6:	d007      	beq.n	56f8 <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    56e8:	8b4b      	ldrh	r3, [r1, #26]
    56ea:	4223      	tst	r3, r4
    56ec:	d000      	beq.n	56f0 <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    56ee:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    56f0:	7983      	ldrb	r3, [r0, #6]
    56f2:	2b01      	cmp	r3, #1
    56f4:	d010      	beq.n	5718 <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    56f6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    56f8:	3d01      	subs	r5, #1
    56fa:	b2ad      	uxth	r5, r5
			while (flush_length) {
    56fc:	2d00      	cmp	r5, #0
    56fe:	d015      	beq.n	572c <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5700:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5702:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    5704:	4223      	tst	r3, r4
    5706:	d1e9      	bne.n	56dc <spi_write_buffer_wait+0x1a4>
    5708:	4b0a      	ldr	r3, [pc, #40]	; (5734 <spi_write_buffer_wait+0x1fc>)
    570a:	7e0a      	ldrb	r2, [r1, #24]
    570c:	4222      	tst	r2, r4
    570e:	d1e5      	bne.n	56dc <spi_write_buffer_wait+0x1a4>
    5710:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5712:	2b00      	cmp	r3, #0
    5714:	d1f9      	bne.n	570a <spi_write_buffer_wait+0x1d2>
    5716:	e7e1      	b.n	56dc <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5718:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    571a:	e7ed      	b.n	56f8 <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    571c:	2312      	movs	r3, #18
    571e:	e715      	b.n	554c <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    5720:	2312      	movs	r3, #18
    5722:	e713      	b.n	554c <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    5724:	2300      	movs	r3, #0
    5726:	e711      	b.n	554c <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    5728:	2312      	movs	r3, #18
    572a:	e70f      	b.n	554c <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    572c:	2300      	movs	r3, #0
    572e:	e70d      	b.n	554c <spi_write_buffer_wait+0x14>
    5730:	0000ffff 	.word	0x0000ffff
    5734:	00002710 	.word	0x00002710
    5738:	00002711 	.word	0x00002711

0000573c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    573c:	b510      	push	{r4, lr}
    573e:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    5740:	4b0f      	ldr	r3, [pc, #60]	; (5780 <sd_mmc_test_unit_ready+0x44>)
    5742:	4798      	blx	r3
    5744:	2801      	cmp	r0, #1
    5746:	d019      	beq.n	577c <sd_mmc_test_unit_ready+0x40>
    5748:	2800      	cmp	r0, #0
    574a:	d003      	beq.n	5754 <sd_mmc_test_unit_ready+0x18>
    574c:	2802      	cmp	r0, #2
    574e:	d010      	beq.n	5772 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    5750:	2001      	movs	r0, #1
	}
}
    5752:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    5754:	4b0b      	ldr	r3, [pc, #44]	; (5784 <sd_mmc_test_unit_ready+0x48>)
    5756:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    5758:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    575a:	2b00      	cmp	r3, #0
    575c:	d1f9      	bne.n	5752 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    575e:	0020      	movs	r0, r4
    5760:	4b09      	ldr	r3, [pc, #36]	; (5788 <sd_mmc_test_unit_ready+0x4c>)
    5762:	4798      	blx	r3
    5764:	0003      	movs	r3, r0
    5766:	2003      	movs	r0, #3
    5768:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    576a:	4243      	negs	r3, r0
    576c:	4158      	adcs	r0, r3
    576e:	0040      	lsls	r0, r0, #1
    5770:	e7ef      	b.n	5752 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    5772:	2200      	movs	r2, #0
    5774:	4b03      	ldr	r3, [pc, #12]	; (5784 <sd_mmc_test_unit_ready+0x48>)
    5776:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    5778:	2002      	movs	r0, #2
    577a:	e7ea      	b.n	5752 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    577c:	2003      	movs	r0, #3
    577e:	e7e8      	b.n	5752 <sd_mmc_test_unit_ready+0x16>
    5780:	0000066d 	.word	0x0000066d
    5784:	200002b4 	.word	0x200002b4
    5788:	00000b1d 	.word	0x00000b1d

0000578c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    578c:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    578e:	2000      	movs	r0, #0
    5790:	4b01      	ldr	r3, [pc, #4]	; (5798 <sd_mmc_test_unit_ready_0+0xc>)
    5792:	4798      	blx	r3
}
    5794:	bd10      	pop	{r4, pc}
    5796:	46c0      	nop			; (mov r8, r8)
    5798:	0000573d 	.word	0x0000573d

0000579c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    579c:	b570      	push	{r4, r5, r6, lr}
    579e:	0004      	movs	r4, r0
    57a0:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    57a2:	4b04      	ldr	r3, [pc, #16]	; (57b4 <sd_mmc_read_capacity+0x18>)
    57a4:	4798      	blx	r3
    57a6:	0040      	lsls	r0, r0, #1
    57a8:	3801      	subs	r0, #1
    57aa:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    57ac:	0020      	movs	r0, r4
    57ae:	4b02      	ldr	r3, [pc, #8]	; (57b8 <sd_mmc_read_capacity+0x1c>)
    57b0:	4798      	blx	r3
}
    57b2:	bd70      	pop	{r4, r5, r6, pc}
    57b4:	00000b45 	.word	0x00000b45
    57b8:	0000573d 	.word	0x0000573d

000057bc <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    57bc:	b510      	push	{r4, lr}
    57be:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    57c0:	2000      	movs	r0, #0
    57c2:	4b01      	ldr	r3, [pc, #4]	; (57c8 <sd_mmc_read_capacity_0+0xc>)
    57c4:	4798      	blx	r3
}
    57c6:	bd10      	pop	{r4, pc}
    57c8:	0000579d 	.word	0x0000579d

000057cc <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    57cc:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    57ce:	2000      	movs	r0, #0
    57d0:	4b01      	ldr	r3, [pc, #4]	; (57d8 <sd_mmc_wr_protect_0+0xc>)
    57d2:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    57d4:	bd10      	pop	{r4, pc}
    57d6:	46c0      	nop			; (mov r8, r8)
    57d8:	00000b6d 	.word	0x00000b6d

000057dc <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
    57dc:	2001      	movs	r0, #1
    57de:	4770      	bx	lr

000057e0 <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    57e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57e2:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
    57e4:	4b24      	ldr	r3, [pc, #144]	; (5878 <sd_mmc_usb_read_10+0x98>)
    57e6:	4798      	blx	r3
    57e8:	2800      	cmp	r0, #0
    57ea:	d004      	beq.n	57f6 <sd_mmc_usb_read_10+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    57ec:	3802      	subs	r0, #2
    57ee:	4243      	negs	r3, r0
    57f0:	4158      	adcs	r0, r3
    57f2:	3001      	adds	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
    57f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nb_step = nb_sector + 1;
    57f6:	3401      	adds	r4, #1
    57f8:	b2a2      	uxth	r2, r4
	bool b_first_step = true;
    57fa:	2701      	movs	r7, #1
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    57fc:	4e1f      	ldr	r6, [pc, #124]	; (587c <sd_mmc_usb_read_10+0x9c>)
	while (nb_step--) {
    57fe:	e008      	b.n	5812 <sd_mmc_usb_read_10+0x32>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    5800:	481f      	ldr	r0, [pc, #124]	; (5880 <sd_mmc_usb_read_10+0xa0>)
    5802:	e010      	b.n	5826 <sd_mmc_usb_read_10+0x46>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    5804:	2000      	movs	r0, #0
    5806:	4b1f      	ldr	r3, [pc, #124]	; (5884 <sd_mmc_usb_read_10+0xa4>)
    5808:	4798      	blx	r3
    580a:	2800      	cmp	r0, #0
    580c:	d126      	bne.n	585c <sd_mmc_usb_read_10+0x7c>
    580e:	2700      	movs	r7, #0
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    5810:	0022      	movs	r2, r4
	while (nb_step--) {
    5812:	1e54      	subs	r4, r2, #1
    5814:	b2a4      	uxth	r4, r4
    5816:	2a00      	cmp	r2, #0
    5818:	d01c      	beq.n	5854 <sd_mmc_usb_read_10+0x74>
		if (nb_step) { // Skip last step
    581a:	2c00      	cmp	r4, #0
    581c:	d020      	beq.n	5860 <sd_mmc_usb_read_10+0x80>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    581e:	2501      	movs	r5, #1
    5820:	4025      	ands	r5, r4
    5822:	d0ed      	beq.n	5800 <sd_mmc_usb_read_10+0x20>
    5824:	4818      	ldr	r0, [pc, #96]	; (5888 <sd_mmc_usb_read_10+0xa8>)
    5826:	2101      	movs	r1, #1
    5828:	47b0      	blx	r6
    582a:	2800      	cmp	r0, #0
    582c:	d114      	bne.n	5858 <sd_mmc_usb_read_10+0x78>
		if (!b_first_step) { // Skip first step
    582e:	2f00      	cmp	r7, #0
    5830:	d1e8      	bne.n	5804 <sd_mmc_usb_read_10+0x24>
			if (!udi_msc_trans_block(true,
    5832:	4915      	ldr	r1, [pc, #84]	; (5888 <sd_mmc_usb_read_10+0xa8>)
    5834:	2d00      	cmp	r5, #0
    5836:	d000      	beq.n	583a <sd_mmc_usb_read_10+0x5a>
    5838:	4911      	ldr	r1, [pc, #68]	; (5880 <sd_mmc_usb_read_10+0xa0>)
    583a:	2300      	movs	r3, #0
    583c:	2280      	movs	r2, #128	; 0x80
    583e:	0092      	lsls	r2, r2, #2
    5840:	2001      	movs	r0, #1
    5842:	4d12      	ldr	r5, [pc, #72]	; (588c <sd_mmc_usb_read_10+0xac>)
    5844:	47a8      	blx	r5
    5846:	2800      	cmp	r0, #0
    5848:	d1dc      	bne.n	5804 <sd_mmc_usb_read_10+0x24>
					sd_mmc_wait_end_of_read_blocks(true);
    584a:	2001      	movs	r0, #1
    584c:	4b0d      	ldr	r3, [pc, #52]	; (5884 <sd_mmc_usb_read_10+0xa4>)
    584e:	4798      	blx	r3
				return CTRL_FAIL;
    5850:	2001      	movs	r0, #1
    5852:	e7cf      	b.n	57f4 <sd_mmc_usb_read_10+0x14>
	return CTRL_GOOD;
    5854:	2000      	movs	r0, #0
    5856:	e7cd      	b.n	57f4 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    5858:	2001      	movs	r0, #1
    585a:	e7cb      	b.n	57f4 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    585c:	2001      	movs	r0, #1
    585e:	e7c9      	b.n	57f4 <sd_mmc_usb_read_10+0x14>
		if (!b_first_step) { // Skip first step
    5860:	2f00      	cmp	r7, #0
    5862:	d1d4      	bne.n	580e <sd_mmc_usb_read_10+0x2e>
			if (!udi_msc_trans_block(true,
    5864:	2300      	movs	r3, #0
    5866:	2280      	movs	r2, #128	; 0x80
    5868:	0092      	lsls	r2, r2, #2
    586a:	4907      	ldr	r1, [pc, #28]	; (5888 <sd_mmc_usb_read_10+0xa8>)
    586c:	2001      	movs	r0, #1
    586e:	4d07      	ldr	r5, [pc, #28]	; (588c <sd_mmc_usb_read_10+0xac>)
    5870:	47a8      	blx	r5
    5872:	2800      	cmp	r0, #0
    5874:	d1cb      	bne.n	580e <sd_mmc_usb_read_10+0x2e>
    5876:	e7e8      	b.n	584a <sd_mmc_usb_read_10+0x6a>
    5878:	00000b71 	.word	0x00000b71
    587c:	00000bf9 	.word	0x00000bf9
    5880:	200008e8 	.word	0x200008e8
    5884:	00000c25 	.word	0x00000c25
    5888:	200006e8 	.word	0x200006e8
    588c:	000015c5 	.word	0x000015c5

00005890 <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
    5890:	b510      	push	{r4, lr}
    5892:	000a      	movs	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
    5894:	0001      	movs	r1, r0
    5896:	2000      	movs	r0, #0
    5898:	4b01      	ldr	r3, [pc, #4]	; (58a0 <sd_mmc_usb_read_10_0+0x10>)
    589a:	4798      	blx	r3
}
    589c:	bd10      	pop	{r4, pc}
    589e:	46c0      	nop			; (mov r8, r8)
    58a0:	000057e1 	.word	0x000057e1

000058a4 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    58a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58a6:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
    58a8:	4b20      	ldr	r3, [pc, #128]	; (592c <sd_mmc_usb_write_10+0x88>)
    58aa:	4798      	blx	r3
    58ac:	2800      	cmp	r0, #0
    58ae:	d00d      	beq.n	58cc <sd_mmc_usb_write_10+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    58b0:	3802      	subs	r0, #2
    58b2:	4243      	negs	r3, r0
    58b4:	4158      	adcs	r0, r3
    58b6:	3001      	adds	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
    58b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    58ba:	481d      	ldr	r0, [pc, #116]	; (5930 <sd_mmc_usb_write_10+0x8c>)
    58bc:	e01b      	b.n	58f6 <sd_mmc_usb_write_10+0x52>
				return CTRL_FAIL;
    58be:	3001      	adds	r0, #1
				if (!b_first_step) {
    58c0:	2d00      	cmp	r5, #0
    58c2:	d1f9      	bne.n	58b8 <sd_mmc_usb_write_10+0x14>
					sd_mmc_wait_end_of_write_blocks(true);
    58c4:	4b1b      	ldr	r3, [pc, #108]	; (5934 <sd_mmc_usb_write_10+0x90>)
    58c6:	4798      	blx	r3
				return CTRL_FAIL;
    58c8:	2001      	movs	r0, #1
    58ca:	e7f5      	b.n	58b8 <sd_mmc_usb_write_10+0x14>
	bool b_first_step = true;
    58cc:	2501      	movs	r5, #1
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    58ce:	4f19      	ldr	r7, [pc, #100]	; (5934 <sd_mmc_usb_write_10+0x90>)
			if (!udi_msc_trans_block(false,
    58d0:	4e19      	ldr	r6, [pc, #100]	; (5938 <sd_mmc_usb_write_10+0x94>)
    58d2:	e008      	b.n	58e6 <sd_mmc_usb_write_10+0x42>
	return CTRL_GOOD;
    58d4:	2000      	movs	r0, #0
    58d6:	e7ef      	b.n	58b8 <sd_mmc_usb_write_10+0x14>
				return CTRL_FAIL;
    58d8:	2001      	movs	r0, #1
    58da:	e7ed      	b.n	58b8 <sd_mmc_usb_write_10+0x14>
		if (nb_step) { // Skip last step
    58dc:	2c00      	cmp	r4, #0
    58de:	d111      	bne.n	5904 <sd_mmc_usb_write_10+0x60>
    58e0:	3c01      	subs	r4, #1
    58e2:	b2a4      	uxth	r4, r4
    58e4:	2500      	movs	r5, #0
	while (nb_step--) {
    58e6:	4b15      	ldr	r3, [pc, #84]	; (593c <sd_mmc_usb_write_10+0x98>)
    58e8:	429c      	cmp	r4, r3
    58ea:	d0f3      	beq.n	58d4 <sd_mmc_usb_write_10+0x30>
		if (!b_first_step) { // Skip first step
    58ec:	2d00      	cmp	r5, #0
    58ee:	d1f5      	bne.n	58dc <sd_mmc_usb_write_10+0x38>
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    58f0:	07e3      	lsls	r3, r4, #31
    58f2:	d5e2      	bpl.n	58ba <sd_mmc_usb_write_10+0x16>
    58f4:	4812      	ldr	r0, [pc, #72]	; (5940 <sd_mmc_usb_write_10+0x9c>)
    58f6:	2101      	movs	r1, #1
    58f8:	4b12      	ldr	r3, [pc, #72]	; (5944 <sd_mmc_usb_write_10+0xa0>)
    58fa:	4798      	blx	r3
    58fc:	2800      	cmp	r0, #0
    58fe:	d1eb      	bne.n	58d8 <sd_mmc_usb_write_10+0x34>
		if (nb_step) { // Skip last step
    5900:	2c00      	cmp	r4, #0
    5902:	d00c      	beq.n	591e <sd_mmc_usb_write_10+0x7a>
			if (!udi_msc_trans_block(false,
    5904:	490e      	ldr	r1, [pc, #56]	; (5940 <sd_mmc_usb_write_10+0x9c>)
    5906:	07e3      	lsls	r3, r4, #31
    5908:	d500      	bpl.n	590c <sd_mmc_usb_write_10+0x68>
    590a:	4909      	ldr	r1, [pc, #36]	; (5930 <sd_mmc_usb_write_10+0x8c>)
    590c:	2300      	movs	r3, #0
    590e:	2280      	movs	r2, #128	; 0x80
    5910:	0092      	lsls	r2, r2, #2
    5912:	2000      	movs	r0, #0
    5914:	47b0      	blx	r6
    5916:	2800      	cmp	r0, #0
    5918:	d0d1      	beq.n	58be <sd_mmc_usb_write_10+0x1a>
		if (!b_first_step) { // Skip first step
    591a:	2d00      	cmp	r5, #0
    591c:	d1e0      	bne.n	58e0 <sd_mmc_usb_write_10+0x3c>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    591e:	2000      	movs	r0, #0
    5920:	47b8      	blx	r7
    5922:	2800      	cmp	r0, #0
    5924:	d0dc      	beq.n	58e0 <sd_mmc_usb_write_10+0x3c>
				return CTRL_FAIL;
    5926:	2001      	movs	r0, #1
    5928:	e7c6      	b.n	58b8 <sd_mmc_usb_write_10+0x14>
    592a:	46c0      	nop			; (mov r8, r8)
    592c:	00000c95 	.word	0x00000c95
    5930:	200008e8 	.word	0x200008e8
    5934:	00000d31 	.word	0x00000d31
    5938:	000015c5 	.word	0x000015c5
    593c:	0000ffff 	.word	0x0000ffff
    5940:	200006e8 	.word	0x200006e8
    5944:	00000d05 	.word	0x00000d05

00005948 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
    5948:	b510      	push	{r4, lr}
    594a:	000a      	movs	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
    594c:	0001      	movs	r1, r0
    594e:	2000      	movs	r0, #0
    5950:	4b01      	ldr	r3, [pc, #4]	; (5958 <sd_mmc_usb_write_10_0+0x10>)
    5952:	4798      	blx	r3
}
    5954:	bd10      	pop	{r4, pc}
    5956:	46c0      	nop			; (mov r8, r8)
    5958:	000058a5 	.word	0x000058a5

0000595c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    595c:	b500      	push	{lr}
    595e:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    5960:	466b      	mov	r3, sp
    5962:	1dd9      	adds	r1, r3, #7
    5964:	23ff      	movs	r3, #255	; 0xff
    5966:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    5968:	2201      	movs	r2, #1
    596a:	480b      	ldr	r0, [pc, #44]	; (5998 <sd_mmc_spi_start_write_block+0x3c>)
    596c:	4b0b      	ldr	r3, [pc, #44]	; (599c <sd_mmc_spi_start_write_block+0x40>)
    596e:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    5970:	4b0b      	ldr	r3, [pc, #44]	; (59a0 <sd_mmc_spi_start_write_block+0x44>)
    5972:	881b      	ldrh	r3, [r3, #0]
    5974:	2b01      	cmp	r3, #1
    5976:	d00a      	beq.n	598e <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    5978:	22fc      	movs	r2, #252	; 0xfc
    597a:	466b      	mov	r3, sp
    597c:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    597e:	2201      	movs	r2, #1
    5980:	466b      	mov	r3, sp
    5982:	1d99      	adds	r1, r3, #6
    5984:	4804      	ldr	r0, [pc, #16]	; (5998 <sd_mmc_spi_start_write_block+0x3c>)
    5986:	4b05      	ldr	r3, [pc, #20]	; (599c <sd_mmc_spi_start_write_block+0x40>)
    5988:	4798      	blx	r3
}
    598a:	b003      	add	sp, #12
    598c:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    598e:	22fe      	movs	r2, #254	; 0xfe
    5990:	466b      	mov	r3, sp
    5992:	719a      	strb	r2, [r3, #6]
    5994:	e7f3      	b.n	597e <sd_mmc_spi_start_write_block+0x22>
    5996:	46c0      	nop			; (mov r8, r8)
    5998:	200002b8 	.word	0x200002b8
    599c:	00005539 	.word	0x00005539
    59a0:	200002cc 	.word	0x200002cc

000059a4 <sd_mmc_spi_wait_busy>:
{
    59a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    59a6:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    59a8:	466b      	mov	r3, sp
    59aa:	1ddc      	adds	r4, r3, #7
    59ac:	23ff      	movs	r3, #255	; 0xff
    59ae:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    59b0:	4e12      	ldr	r6, [pc, #72]	; (59fc <sd_mmc_spi_wait_busy+0x58>)
    59b2:	2201      	movs	r2, #1
    59b4:	0021      	movs	r1, r4
    59b6:	0030      	movs	r0, r6
    59b8:	4d11      	ldr	r5, [pc, #68]	; (5a00 <sd_mmc_spi_wait_busy+0x5c>)
    59ba:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    59bc:	23ff      	movs	r3, #255	; 0xff
    59be:	2201      	movs	r2, #1
    59c0:	0021      	movs	r1, r4
    59c2:	0030      	movs	r0, r6
    59c4:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    59c6:	23ff      	movs	r3, #255	; 0xff
    59c8:	2201      	movs	r2, #1
    59ca:	0021      	movs	r1, r4
    59cc:	0030      	movs	r0, r6
    59ce:	47a8      	blx	r5
    59d0:	4c0c      	ldr	r4, [pc, #48]	; (5a04 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    59d2:	466b      	mov	r3, sp
    59d4:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    59d6:	4e09      	ldr	r6, [pc, #36]	; (59fc <sd_mmc_spi_wait_busy+0x58>)
    59d8:	4f09      	ldr	r7, [pc, #36]	; (5a00 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    59da:	782b      	ldrb	r3, [r5, #0]
    59dc:	2bff      	cmp	r3, #255	; 0xff
    59de:	d009      	beq.n	59f4 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    59e0:	23ff      	movs	r3, #255	; 0xff
    59e2:	2201      	movs	r2, #1
    59e4:	0029      	movs	r1, r5
    59e6:	0030      	movs	r0, r6
    59e8:	47b8      	blx	r7
    59ea:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    59ec:	2c00      	cmp	r4, #0
    59ee:	d1f4      	bne.n	59da <sd_mmc_spi_wait_busy+0x36>
			return false;
    59f0:	2000      	movs	r0, #0
    59f2:	e000      	b.n	59f6 <sd_mmc_spi_wait_busy+0x52>
	return true;
    59f4:	2001      	movs	r0, #1
}
    59f6:	b003      	add	sp, #12
    59f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59fa:	46c0      	nop			; (mov r8, r8)
    59fc:	200002b8 	.word	0x200002b8
    5a00:	0000532d 	.word	0x0000532d
    5a04:	00030d40 	.word	0x00030d40

00005a08 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    5a08:	b570      	push	{r4, r5, r6, lr}
    5a0a:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    5a0c:	4b14      	ldr	r3, [pc, #80]	; (5a60 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    5a0e:	881c      	ldrh	r4, [r3, #0]
    5a10:	2c01      	cmp	r4, #1
    5a12:	d023      	beq.n	5a5c <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    5a14:	4b13      	ldr	r3, [pc, #76]	; (5a64 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    5a16:	8819      	ldrh	r1, [r3, #0]
    5a18:	4b13      	ldr	r3, [pc, #76]	; (5a68 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    5a1a:	6818      	ldr	r0, [r3, #0]
    5a1c:	4b13      	ldr	r3, [pc, #76]	; (5a6c <sd_mmc_spi_stop_multiwrite_block+0x64>)
    5a1e:	4798      	blx	r3
		return true; // It is not the End of multi write
    5a20:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    5a22:	4284      	cmp	r4, r0
    5a24:	d902      	bls.n	5a2c <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    5a26:	0018      	movs	r0, r3
    5a28:	b002      	add	sp, #8
    5a2a:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    5a2c:	466b      	mov	r3, sp
    5a2e:	1ddc      	adds	r4, r3, #7
    5a30:	23ff      	movs	r3, #255	; 0xff
    5a32:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    5a34:	4e0e      	ldr	r6, [pc, #56]	; (5a70 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    5a36:	2201      	movs	r2, #1
    5a38:	0021      	movs	r1, r4
    5a3a:	0030      	movs	r0, r6
    5a3c:	4d0d      	ldr	r5, [pc, #52]	; (5a74 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    5a3e:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    5a40:	23fd      	movs	r3, #253	; 0xfd
    5a42:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    5a44:	2201      	movs	r2, #1
    5a46:	0021      	movs	r1, r4
    5a48:	0030      	movs	r0, r6
    5a4a:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    5a4c:	4b0a      	ldr	r3, [pc, #40]	; (5a78 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    5a4e:	4798      	blx	r3
    5a50:	1e03      	subs	r3, r0, #0
    5a52:	d1e8      	bne.n	5a26 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    5a54:	2105      	movs	r1, #5
    5a56:	4a09      	ldr	r2, [pc, #36]	; (5a7c <sd_mmc_spi_stop_multiwrite_block+0x74>)
    5a58:	7011      	strb	r1, [r2, #0]
		return false;
    5a5a:	e7e4      	b.n	5a26 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    5a5c:	2301      	movs	r3, #1
    5a5e:	e7e2      	b.n	5a26 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    5a60:	200002cc 	.word	0x200002cc
    5a64:	200002c4 	.word	0x200002c4
    5a68:	200002d4 	.word	0x200002d4
    5a6c:	000066d5 	.word	0x000066d5
    5a70:	200002b8 	.word	0x200002b8
    5a74:	00005539 	.word	0x00005539
    5a78:	000059a5 	.word	0x000059a5
    5a7c:	200002cb 	.word	0x200002cb

00005a80 <sd_mmc_spi_start_read_block>:
{
    5a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a82:	b083      	sub	sp, #12
	token = 0;
    5a84:	2200      	movs	r2, #0
    5a86:	466b      	mov	r3, sp
    5a88:	71da      	strb	r2, [r3, #7]
    5a8a:	4c14      	ldr	r4, [pc, #80]	; (5adc <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    5a8c:	466b      	mov	r3, sp
    5a8e:	1ddd      	adds	r5, r3, #7
    5a90:	4e13      	ldr	r6, [pc, #76]	; (5ae0 <sd_mmc_spi_start_read_block+0x60>)
    5a92:	4f14      	ldr	r7, [pc, #80]	; (5ae4 <sd_mmc_spi_start_read_block+0x64>)
    5a94:	23ff      	movs	r3, #255	; 0xff
    5a96:	2201      	movs	r2, #1
    5a98:	0029      	movs	r1, r5
    5a9a:	0030      	movs	r0, r6
    5a9c:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    5a9e:	782b      	ldrb	r3, [r5, #0]
    5aa0:	220f      	movs	r2, #15
    5aa2:	0019      	movs	r1, r3
    5aa4:	4391      	bics	r1, r2
    5aa6:	1e0a      	subs	r2, r1, #0
    5aa8:	d009      	beq.n	5abe <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    5aaa:	2bfe      	cmp	r3, #254	; 0xfe
    5aac:	d013      	beq.n	5ad6 <sd_mmc_spi_start_read_block+0x56>
    5aae:	3c01      	subs	r4, #1
		if (i-- == 0) {
    5ab0:	2c00      	cmp	r4, #0
    5ab2:	d1ef      	bne.n	5a94 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    5ab4:	2204      	movs	r2, #4
    5ab6:	4b0c      	ldr	r3, [pc, #48]	; (5ae8 <sd_mmc_spi_start_read_block+0x68>)
    5ab8:	701a      	strb	r2, [r3, #0]
			return false;
    5aba:	2000      	movs	r0, #0
    5abc:	e00c      	b.n	5ad8 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    5abe:	075b      	lsls	r3, r3, #29
    5ac0:	d004      	beq.n	5acc <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    5ac2:	3207      	adds	r2, #7
    5ac4:	4b08      	ldr	r3, [pc, #32]	; (5ae8 <sd_mmc_spi_start_read_block+0x68>)
    5ac6:	701a      	strb	r2, [r3, #0]
			return false;
    5ac8:	2000      	movs	r0, #0
    5aca:	e005      	b.n	5ad8 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    5acc:	220b      	movs	r2, #11
    5ace:	4b06      	ldr	r3, [pc, #24]	; (5ae8 <sd_mmc_spi_start_read_block+0x68>)
    5ad0:	701a      	strb	r2, [r3, #0]
			return false;
    5ad2:	2000      	movs	r0, #0
    5ad4:	e000      	b.n	5ad8 <sd_mmc_spi_start_read_block+0x58>
	return true;
    5ad6:	2001      	movs	r0, #1
}
    5ad8:	b003      	add	sp, #12
    5ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5adc:	0007a120 	.word	0x0007a120
    5ae0:	200002b8 	.word	0x200002b8
    5ae4:	0000532d 	.word	0x0000532d
    5ae8:	200002cb 	.word	0x200002cb

00005aec <sd_mmc_spi_stop_write_block>:
{
    5aec:	b530      	push	{r4, r5, lr}
    5aee:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    5af0:	a901      	add	r1, sp, #4
    5af2:	2301      	movs	r3, #1
    5af4:	425b      	negs	r3, r3
    5af6:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    5af8:	4d14      	ldr	r5, [pc, #80]	; (5b4c <sd_mmc_spi_stop_write_block+0x60>)
    5afa:	2202      	movs	r2, #2
    5afc:	0028      	movs	r0, r5
    5afe:	4b14      	ldr	r3, [pc, #80]	; (5b50 <sd_mmc_spi_stop_write_block+0x64>)
    5b00:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    5b02:	466b      	mov	r3, sp
    5b04:	1ddc      	adds	r4, r3, #7
    5b06:	23ff      	movs	r3, #255	; 0xff
    5b08:	2201      	movs	r2, #1
    5b0a:	0021      	movs	r1, r4
    5b0c:	0028      	movs	r0, r5
    5b0e:	4d11      	ldr	r5, [pc, #68]	; (5b54 <sd_mmc_spi_stop_write_block+0x68>)
    5b10:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    5b12:	7822      	ldrb	r2, [r4, #0]
    5b14:	2311      	movs	r3, #17
    5b16:	4013      	ands	r3, r2
    5b18:	2b01      	cmp	r3, #1
    5b1a:	d005      	beq.n	5b28 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    5b1c:	2201      	movs	r2, #1
    5b1e:	4b0e      	ldr	r3, [pc, #56]	; (5b58 <sd_mmc_spi_stop_write_block+0x6c>)
    5b20:	701a      	strb	r2, [r3, #0]
		return false;
    5b22:	2000      	movs	r0, #0
}
    5b24:	b003      	add	sp, #12
    5b26:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    5b28:	231e      	movs	r3, #30
    5b2a:	401a      	ands	r2, r3
    5b2c:	2a04      	cmp	r2, #4
    5b2e:	d00b      	beq.n	5b48 <sd_mmc_spi_stop_write_block+0x5c>
    5b30:	2a0a      	cmp	r2, #10
    5b32:	d104      	bne.n	5b3e <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    5b34:	3a02      	subs	r2, #2
    5b36:	4b08      	ldr	r3, [pc, #32]	; (5b58 <sd_mmc_spi_stop_write_block+0x6c>)
    5b38:	701a      	strb	r2, [r3, #0]
		return false;
    5b3a:	2000      	movs	r0, #0
    5b3c:	e7f2      	b.n	5b24 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    5b3e:	220a      	movs	r2, #10
    5b40:	4b05      	ldr	r3, [pc, #20]	; (5b58 <sd_mmc_spi_stop_write_block+0x6c>)
    5b42:	701a      	strb	r2, [r3, #0]
		return false;
    5b44:	2000      	movs	r0, #0
    5b46:	e7ed      	b.n	5b24 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    5b48:	2001      	movs	r0, #1
    5b4a:	e7eb      	b.n	5b24 <sd_mmc_spi_stop_write_block+0x38>
    5b4c:	200002b8 	.word	0x200002b8
    5b50:	00005539 	.word	0x00005539
    5b54:	0000532d 	.word	0x0000532d
    5b58:	200002cb 	.word	0x200002cb

00005b5c <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    5b5c:	b570      	push	{r4, r5, r6, lr}
    5b5e:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5b60:	2500      	movs	r5, #0
    5b62:	4b2c      	ldr	r3, [pc, #176]	; (5c14 <sd_mmc_spi_init+0xb8>)
    5b64:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    5b66:	a90f      	add	r1, sp, #60	; 0x3c
    5b68:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5b6a:	2601      	movs	r6, #1
    5b6c:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    5b6e:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
    5b70:	2025      	movs	r0, #37	; 0x25
    5b72:	4b29      	ldr	r3, [pc, #164]	; (5c18 <sd_mmc_spi_init+0xbc>)
    5b74:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    5b76:	ac01      	add	r4, sp, #4
    5b78:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5b7a:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5b7c:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    5b7e:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    5b80:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    5b82:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    5b84:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    5b86:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    5b88:	2324      	movs	r3, #36	; 0x24
    5b8a:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5b8c:	220c      	movs	r2, #12
    5b8e:	2100      	movs	r1, #0
    5b90:	a807      	add	r0, sp, #28
    5b92:	4b22      	ldr	r3, [pc, #136]	; (5c1c <sd_mmc_spi_init+0xc0>)
    5b94:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    5b96:	2380      	movs	r3, #128	; 0x80
    5b98:	025b      	lsls	r3, r3, #9
    5b9a:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    5b9c:	4b20      	ldr	r3, [pc, #128]	; (5c20 <sd_mmc_spi_init+0xc4>)
    5b9e:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    5ba0:	4b20      	ldr	r3, [pc, #128]	; (5c24 <sd_mmc_spi_init+0xc8>)
    5ba2:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    5ba4:	4b20      	ldr	r3, [pc, #128]	; (5c28 <sd_mmc_spi_init+0xcc>)
    5ba6:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    5ba8:	4b20      	ldr	r3, [pc, #128]	; (5c2c <sd_mmc_spi_init+0xd0>)
    5baa:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    5bac:	4b20      	ldr	r3, [pc, #128]	; (5c30 <sd_mmc_spi_init+0xd4>)
    5bae:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    5bb0:	4d20      	ldr	r5, [pc, #128]	; (5c34 <sd_mmc_spi_init+0xd8>)
    5bb2:	0022      	movs	r2, r4
    5bb4:	4920      	ldr	r1, [pc, #128]	; (5c38 <sd_mmc_spi_init+0xdc>)
    5bb6:	0028      	movs	r0, r5
    5bb8:	4b20      	ldr	r3, [pc, #128]	; (5c3c <sd_mmc_spi_init+0xe0>)
    5bba:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    5bbc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    5bbe:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    5bc0:	2b00      	cmp	r3, #0
    5bc2:	d1fc      	bne.n	5bbe <sd_mmc_spi_init+0x62>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5bc4:	6813      	ldr	r3, [r2, #0]
    5bc6:	2102      	movs	r1, #2
    5bc8:	430b      	orrs	r3, r1
    5bca:	6013      	str	r3, [r2, #0]
	config->address_enabled = false;
    5bcc:	4a1c      	ldr	r2, [pc, #112]	; (5c40 <sd_mmc_spi_init+0xe4>)
    5bce:	2300      	movs	r3, #0
    5bd0:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    5bd2:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    5bd4:	491b      	ldr	r1, [pc, #108]	; (5c44 <sd_mmc_spi_init+0xe8>)
    5bd6:	7808      	ldrb	r0, [r1, #0]
    5bd8:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    5bda:	4c1b      	ldr	r4, [pc, #108]	; (5c48 <sd_mmc_spi_init+0xec>)
    5bdc:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    5bde:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    5be0:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    5be2:	2201      	movs	r2, #1
    5be4:	4669      	mov	r1, sp
    5be6:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    5be8:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5bea:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5bec:	4b0a      	ldr	r3, [pc, #40]	; (5c18 <sd_mmc_spi_init+0xbc>)
    5bee:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    5bf0:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    5bf2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5bf4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5bf6:	2900      	cmp	r1, #0
    5bf8:	d104      	bne.n	5c04 <sd_mmc_spi_init+0xa8>
		return &(ports[port_index]->Group[group_index]);
    5bfa:	0953      	lsrs	r3, r2, #5
    5bfc:	01db      	lsls	r3, r3, #7
    5bfe:	4913      	ldr	r1, [pc, #76]	; (5c4c <sd_mmc_spi_init+0xf0>)
    5c00:	468c      	mov	ip, r1
    5c02:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c04:	211f      	movs	r1, #31
    5c06:	4011      	ands	r1, r2
    5c08:	2201      	movs	r2, #1
    5c0a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5c0c:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    5c0e:	b010      	add	sp, #64	; 0x40
    5c10:	bd70      	pop	{r4, r5, r6, pc}
    5c12:	46c0      	nop			; (mov r8, r8)
    5c14:	200002cb 	.word	0x200002cb
    5c18:	000061fd 	.word	0x000061fd
    5c1c:	00006cc3 	.word	0x00006cc3
    5c20:	00040003 	.word	0x00040003
    5c24:	00050003 	.word	0x00050003
    5c28:	00060003 	.word	0x00060003
    5c2c:	00070003 	.word	0x00070003
    5c30:	00061a80 	.word	0x00061a80
    5c34:	200002b8 	.word	0x200002b8
    5c38:	42000800 	.word	0x42000800
    5c3c:	00004ff9 	.word	0x00004ff9
    5c40:	200002d8 	.word	0x200002d8
    5c44:	200000f8 	.word	0x200000f8
    5c48:	200002c8 	.word	0x200002c8
    5c4c:	41004400 	.word	0x41004400

00005c50 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    5c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c52:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5c54:	2200      	movs	r2, #0
    5c56:	4b0d      	ldr	r3, [pc, #52]	; (5c8c <sd_mmc_spi_select_device+0x3c>)
    5c58:	701a      	strb	r2, [r3, #0]
    5c5a:	000c      	movs	r4, r1
    5c5c:	4b0c      	ldr	r3, [pc, #48]	; (5c90 <sd_mmc_spi_select_device+0x40>)
    5c5e:	4299      	cmp	r1, r3
    5c60:	d900      	bls.n	5c64 <sd_mmc_spi_select_device+0x14>
    5c62:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    5c64:	4d0b      	ldr	r5, [pc, #44]	; (5c94 <sd_mmc_spi_select_device+0x44>)
    5c66:	4e0c      	ldr	r6, [pc, #48]	; (5c98 <sd_mmc_spi_select_device+0x48>)
    5c68:	e001      	b.n	5c6e <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    5c6a:	08e3      	lsrs	r3, r4, #3
    5c6c:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    5c6e:	0021      	movs	r1, r4
    5c70:	0028      	movs	r0, r5
    5c72:	47b0      	blx	r6
    5c74:	2817      	cmp	r0, #23
    5c76:	d0f8      	beq.n	5c6a <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    5c78:	0079      	lsls	r1, r7, #1
    5c7a:	19cf      	adds	r7, r1, r7
    5c7c:	4907      	ldr	r1, [pc, #28]	; (5c9c <sd_mmc_spi_select_device+0x4c>)
    5c7e:	19c9      	adds	r1, r1, r7
    5c80:	2201      	movs	r2, #1
    5c82:	4804      	ldr	r0, [pc, #16]	; (5c94 <sd_mmc_spi_select_device+0x44>)
    5c84:	4b06      	ldr	r3, [pc, #24]	; (5ca0 <sd_mmc_spi_select_device+0x50>)
    5c86:	4798      	blx	r3
}
    5c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c8a:	46c0      	nop			; (mov r8, r8)
    5c8c:	200002cb 	.word	0x200002cb
    5c90:	003d0900 	.word	0x003d0900
    5c94:	200002b8 	.word	0x200002b8
    5c98:	00004f75 	.word	0x00004f75
    5c9c:	200002c8 	.word	0x200002c8
    5ca0:	00005445 	.word	0x00005445

00005ca4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    5ca4:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5ca6:	2200      	movs	r2, #0
    5ca8:	4b04      	ldr	r3, [pc, #16]	; (5cbc <sd_mmc_spi_deselect_device+0x18>)
    5caa:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    5cac:	0041      	lsls	r1, r0, #1
    5cae:	1808      	adds	r0, r1, r0
    5cb0:	4903      	ldr	r1, [pc, #12]	; (5cc0 <sd_mmc_spi_deselect_device+0x1c>)
    5cb2:	1809      	adds	r1, r1, r0
    5cb4:	4803      	ldr	r0, [pc, #12]	; (5cc4 <sd_mmc_spi_deselect_device+0x20>)
    5cb6:	4b04      	ldr	r3, [pc, #16]	; (5cc8 <sd_mmc_spi_deselect_device+0x24>)
    5cb8:	4798      	blx	r3
}
    5cba:	bd10      	pop	{r4, pc}
    5cbc:	200002cb 	.word	0x200002cb
    5cc0:	200002c8 	.word	0x200002c8
    5cc4:	200002b8 	.word	0x200002b8
    5cc8:	00005445 	.word	0x00005445

00005ccc <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    5ccc:	b570      	push	{r4, r5, r6, lr}
    5cce:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    5cd0:	22ff      	movs	r2, #255	; 0xff
    5cd2:	466b      	mov	r3, sp
    5cd4:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5cd6:	2200      	movs	r2, #0
    5cd8:	4b07      	ldr	r3, [pc, #28]	; (5cf8 <sd_mmc_spi_send_clock+0x2c>)
    5cda:	701a      	strb	r2, [r3, #0]
    5cdc:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    5cde:	4e07      	ldr	r6, [pc, #28]	; (5cfc <sd_mmc_spi_send_clock+0x30>)
    5ce0:	4d07      	ldr	r5, [pc, #28]	; (5d00 <sd_mmc_spi_send_clock+0x34>)
    5ce2:	2201      	movs	r2, #1
    5ce4:	466b      	mov	r3, sp
    5ce6:	1dd9      	adds	r1, r3, #7
    5ce8:	0030      	movs	r0, r6
    5cea:	47a8      	blx	r5
    5cec:	3c01      	subs	r4, #1
    5cee:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    5cf0:	2c00      	cmp	r4, #0
    5cf2:	d1f6      	bne.n	5ce2 <sd_mmc_spi_send_clock+0x16>
	}
}
    5cf4:	b002      	add	sp, #8
    5cf6:	bd70      	pop	{r4, r5, r6, pc}
    5cf8:	200002cb 	.word	0x200002cb
    5cfc:	200002b8 	.word	0x200002b8
    5d00:	00005539 	.word	0x00005539

00005d04 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    5d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d06:	46c6      	mov	lr, r8
    5d08:	b500      	push	{lr}
    5d0a:	b086      	sub	sp, #24
    5d0c:	4680      	mov	r8, r0
    5d0e:	9200      	str	r2, [sp, #0]
    5d10:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    5d12:	22ff      	movs	r2, #255	; 0xff
    5d14:	230f      	movs	r3, #15
    5d16:	a802      	add	r0, sp, #8
    5d18:	4684      	mov	ip, r0
    5d1a:	4463      	add	r3, ip
    5d1c:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5d1e:	2200      	movs	r2, #0
    5d20:	4b53      	ldr	r3, [pc, #332]	; (5e70 <sd_mmc_spi_adtc_start+0x16c>)
    5d22:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    5d24:	ab04      	add	r3, sp, #16
    5d26:	323f      	adds	r2, #63	; 0x3f
    5d28:	4640      	mov	r0, r8
    5d2a:	4002      	ands	r2, r0
    5d2c:	2040      	movs	r0, #64	; 0x40
    5d2e:	4302      	orrs	r2, r0
    5d30:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    5d32:	0e0a      	lsrs	r2, r1, #24
    5d34:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    5d36:	0c0a      	lsrs	r2, r1, #16
    5d38:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    5d3a:	0a0a      	lsrs	r2, r1, #8
    5d3c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    5d3e:	7119      	strb	r1, [r3, #4]
    5d40:	2700      	movs	r7, #0
	crc = 0;
    5d42:	2300      	movs	r3, #0
		value = *buf++;
    5d44:	a904      	add	r1, sp, #16
    5d46:	2208      	movs	r2, #8
				crc ^= 0x09;
    5d48:	2409      	movs	r4, #9
    5d4a:	e011      	b.n	5d70 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    5d4c:	0076      	lsls	r6, r6, #1
    5d4e:	b2f6      	uxtb	r6, r6
    5d50:	3801      	subs	r0, #1
    5d52:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    5d54:	2800      	cmp	r0, #0
    5d56:	d008      	beq.n	5d6a <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    5d58:	005b      	lsls	r3, r3, #1
    5d5a:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    5d5c:	001d      	movs	r5, r3
    5d5e:	4075      	eors	r5, r6
    5d60:	062d      	lsls	r5, r5, #24
    5d62:	d5f3      	bpl.n	5d4c <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    5d64:	4063      	eors	r3, r4
    5d66:	b2db      	uxtb	r3, r3
    5d68:	e7f0      	b.n	5d4c <sd_mmc_spi_adtc_start+0x48>
    5d6a:	3701      	adds	r7, #1
	while (size--) {
    5d6c:	2f05      	cmp	r7, #5
    5d6e:	d002      	beq.n	5d76 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    5d70:	5c7e      	ldrb	r6, [r7, r1]
    5d72:	0010      	movs	r0, r2
    5d74:	e7f0      	b.n	5d58 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    5d76:	005b      	lsls	r3, r3, #1
    5d78:	2201      	movs	r2, #1
    5d7a:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    5d7c:	ac04      	add	r4, sp, #16
    5d7e:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    5d80:	4e3c      	ldr	r6, [pc, #240]	; (5e74 <sd_mmc_spi_adtc_start+0x170>)
    5d82:	2201      	movs	r2, #1
    5d84:	210f      	movs	r1, #15
    5d86:	ab02      	add	r3, sp, #8
    5d88:	469c      	mov	ip, r3
    5d8a:	4461      	add	r1, ip
    5d8c:	0030      	movs	r0, r6
    5d8e:	4f3a      	ldr	r7, [pc, #232]	; (5e78 <sd_mmc_spi_adtc_start+0x174>)
    5d90:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    5d92:	2206      	movs	r2, #6
    5d94:	0021      	movs	r1, r4
    5d96:	0030      	movs	r0, r6
    5d98:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    5d9a:	ab02      	add	r3, sp, #8
    5d9c:	1dd9      	adds	r1, r3, #7
    5d9e:	23ff      	movs	r3, #255	; 0xff
    5da0:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    5da2:	2201      	movs	r2, #1
    5da4:	0030      	movs	r0, r6
    5da6:	4e35      	ldr	r6, [pc, #212]	; (5e7c <sd_mmc_spi_adtc_start+0x178>)
    5da8:	47b0      	blx	r6
    5daa:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    5dac:	ab02      	add	r3, sp, #8
    5dae:	1dde      	adds	r6, r3, #7
    5db0:	4f30      	ldr	r7, [pc, #192]	; (5e74 <sd_mmc_spi_adtc_start+0x170>)
    5db2:	4d32      	ldr	r5, [pc, #200]	; (5e7c <sd_mmc_spi_adtc_start+0x178>)
    5db4:	23ff      	movs	r3, #255	; 0xff
    5db6:	2201      	movs	r2, #1
    5db8:	0031      	movs	r1, r6
    5dba:	0038      	movs	r0, r7
    5dbc:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    5dbe:	7833      	ldrb	r3, [r6, #0]
    5dc0:	b25a      	sxtb	r2, r3
    5dc2:	2a00      	cmp	r2, #0
    5dc4:	da0b      	bge.n	5dde <sd_mmc_spi_adtc_start+0xda>
    5dc6:	3c01      	subs	r4, #1
    5dc8:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    5dca:	2c00      	cmp	r4, #0
    5dcc:	d1f2      	bne.n	5db4 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    5dce:	2202      	movs	r2, #2
    5dd0:	4b27      	ldr	r3, [pc, #156]	; (5e70 <sd_mmc_spi_adtc_start+0x16c>)
    5dd2:	701a      	strb	r2, [r3, #0]
			return false;
    5dd4:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    5dd6:	b006      	add	sp, #24
    5dd8:	bc04      	pop	{r2}
    5dda:	4690      	mov	r8, r2
    5ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    5dde:	4a28      	ldr	r2, [pc, #160]	; (5e80 <sd_mmc_spi_adtc_start+0x17c>)
    5de0:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    5de2:	071a      	lsls	r2, r3, #28
    5de4:	d41a      	bmi.n	5e1c <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    5de6:	075a      	lsls	r2, r3, #29
    5de8:	d41d      	bmi.n	5e26 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    5dea:	2201      	movs	r2, #1
    5dec:	4393      	bics	r3, r2
    5dee:	d11f      	bne.n	5e30 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    5df0:	4643      	mov	r3, r8
    5df2:	049b      	lsls	r3, r3, #18
    5df4:	d420      	bmi.n	5e38 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    5df6:	4643      	mov	r3, r8
    5df8:	059b      	lsls	r3, r3, #22
    5dfa:	d425      	bmi.n	5e48 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    5dfc:	4643      	mov	r3, r8
    5dfe:	055b      	lsls	r3, r3, #21
    5e00:	d42b      	bmi.n	5e5a <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    5e02:	4b20      	ldr	r3, [pc, #128]	; (5e84 <sd_mmc_spi_adtc_start+0x180>)
    5e04:	466a      	mov	r2, sp
    5e06:	8812      	ldrh	r2, [r2, #0]
    5e08:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    5e0a:	4b1f      	ldr	r3, [pc, #124]	; (5e88 <sd_mmc_spi_adtc_start+0x184>)
    5e0c:	466a      	mov	r2, sp
    5e0e:	8892      	ldrh	r2, [r2, #4]
    5e10:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    5e12:	2200      	movs	r2, #0
    5e14:	4b1d      	ldr	r3, [pc, #116]	; (5e8c <sd_mmc_spi_adtc_start+0x188>)
    5e16:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    5e18:	2001      	movs	r0, #1
    5e1a:	e7dc      	b.n	5dd6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    5e1c:	2206      	movs	r2, #6
    5e1e:	4b14      	ldr	r3, [pc, #80]	; (5e70 <sd_mmc_spi_adtc_start+0x16c>)
    5e20:	701a      	strb	r2, [r3, #0]
		return false;
    5e22:	2000      	movs	r0, #0
    5e24:	e7d7      	b.n	5dd6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    5e26:	2209      	movs	r2, #9
    5e28:	4b11      	ldr	r3, [pc, #68]	; (5e70 <sd_mmc_spi_adtc_start+0x16c>)
    5e2a:	701a      	strb	r2, [r3, #0]
		return false;
    5e2c:	2000      	movs	r0, #0
    5e2e:	e7d2      	b.n	5dd6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    5e30:	4b0f      	ldr	r3, [pc, #60]	; (5e70 <sd_mmc_spi_adtc_start+0x16c>)
    5e32:	701a      	strb	r2, [r3, #0]
		return false;
    5e34:	2000      	movs	r0, #0
    5e36:	e7ce      	b.n	5dd6 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    5e38:	4b15      	ldr	r3, [pc, #84]	; (5e90 <sd_mmc_spi_adtc_start+0x18c>)
    5e3a:	4798      	blx	r3
    5e3c:	2800      	cmp	r0, #0
    5e3e:	d1da      	bne.n	5df6 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    5e40:	2203      	movs	r2, #3
    5e42:	4b0b      	ldr	r3, [pc, #44]	; (5e70 <sd_mmc_spi_adtc_start+0x16c>)
    5e44:	701a      	strb	r2, [r3, #0]
			return false;
    5e46:	e7c6      	b.n	5dd6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    5e48:	490d      	ldr	r1, [pc, #52]	; (5e80 <sd_mmc_spi_adtc_start+0x17c>)
    5e4a:	2300      	movs	r3, #0
    5e4c:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    5e4e:	33ff      	adds	r3, #255	; 0xff
    5e50:	2201      	movs	r2, #1
    5e52:	4808      	ldr	r0, [pc, #32]	; (5e74 <sd_mmc_spi_adtc_start+0x170>)
    5e54:	4e09      	ldr	r6, [pc, #36]	; (5e7c <sd_mmc_spi_adtc_start+0x178>)
    5e56:	47b0      	blx	r6
    5e58:	e7d0      	b.n	5dfc <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    5e5a:	4e09      	ldr	r6, [pc, #36]	; (5e80 <sd_mmc_spi_adtc_start+0x17c>)
    5e5c:	23ff      	movs	r3, #255	; 0xff
    5e5e:	2204      	movs	r2, #4
    5e60:	0031      	movs	r1, r6
    5e62:	4804      	ldr	r0, [pc, #16]	; (5e74 <sd_mmc_spi_adtc_start+0x170>)
    5e64:	4f05      	ldr	r7, [pc, #20]	; (5e7c <sd_mmc_spi_adtc_start+0x178>)
    5e66:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    5e68:	6833      	ldr	r3, [r6, #0]
    5e6a:	ba1b      	rev	r3, r3
    5e6c:	6033      	str	r3, [r6, #0]
    5e6e:	e7c8      	b.n	5e02 <sd_mmc_spi_adtc_start+0xfe>
    5e70:	200002cb 	.word	0x200002cb
    5e74:	200002b8 	.word	0x200002b8
    5e78:	00005539 	.word	0x00005539
    5e7c:	0000532d 	.word	0x0000532d
    5e80:	200002d0 	.word	0x200002d0
    5e84:	200002c4 	.word	0x200002c4
    5e88:	200002cc 	.word	0x200002cc
    5e8c:	200002d4 	.word	0x200002d4
    5e90:	000059a5 	.word	0x000059a5

00005e94 <sd_mmc_spi_send_cmd>:
{
    5e94:	b510      	push	{r4, lr}
    5e96:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    5e98:	2300      	movs	r3, #0
    5e9a:	9300      	str	r3, [sp, #0]
    5e9c:	2200      	movs	r2, #0
    5e9e:	4c02      	ldr	r4, [pc, #8]	; (5ea8 <sd_mmc_spi_send_cmd+0x14>)
    5ea0:	47a0      	blx	r4
}
    5ea2:	b002      	add	sp, #8
    5ea4:	bd10      	pop	{r4, pc}
    5ea6:	46c0      	nop			; (mov r8, r8)
    5ea8:	00005d05 	.word	0x00005d05

00005eac <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    5eac:	4b01      	ldr	r3, [pc, #4]	; (5eb4 <sd_mmc_spi_get_response+0x8>)
    5eae:	6818      	ldr	r0, [r3, #0]
}
    5eb0:	4770      	bx	lr
    5eb2:	46c0      	nop			; (mov r8, r8)
    5eb4:	200002d0 	.word	0x200002d0

00005eb8 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    5eb8:	b510      	push	{r4, lr}
    5eba:	b084      	sub	sp, #16
    5ebc:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5ebe:	2200      	movs	r2, #0
    5ec0:	4b14      	ldr	r3, [pc, #80]	; (5f14 <sd_mmc_spi_read_word+0x5c>)
    5ec2:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    5ec4:	4b14      	ldr	r3, [pc, #80]	; (5f18 <sd_mmc_spi_read_word+0x60>)
    5ec6:	8819      	ldrh	r1, [r3, #0]
    5ec8:	4b14      	ldr	r3, [pc, #80]	; (5f1c <sd_mmc_spi_read_word+0x64>)
    5eca:	6818      	ldr	r0, [r3, #0]
    5ecc:	4b14      	ldr	r3, [pc, #80]	; (5f20 <sd_mmc_spi_read_word+0x68>)
    5ece:	4798      	blx	r3
    5ed0:	2900      	cmp	r1, #0
    5ed2:	d103      	bne.n	5edc <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    5ed4:	4b13      	ldr	r3, [pc, #76]	; (5f24 <sd_mmc_spi_read_word+0x6c>)
    5ed6:	4798      	blx	r3
    5ed8:	2800      	cmp	r0, #0
    5eda:	d010      	beq.n	5efe <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    5edc:	23ff      	movs	r3, #255	; 0xff
    5ede:	2204      	movs	r2, #4
    5ee0:	a901      	add	r1, sp, #4
    5ee2:	4811      	ldr	r0, [pc, #68]	; (5f28 <sd_mmc_spi_read_word+0x70>)
    5ee4:	4c11      	ldr	r4, [pc, #68]	; (5f2c <sd_mmc_spi_read_word+0x74>)
    5ee6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    5ee8:	4b0c      	ldr	r3, [pc, #48]	; (5f1c <sd_mmc_spi_read_word+0x64>)
    5eea:	681a      	ldr	r2, [r3, #0]
    5eec:	1d10      	adds	r0, r2, #4
    5eee:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    5ef0:	4b09      	ldr	r3, [pc, #36]	; (5f18 <sd_mmc_spi_read_word+0x60>)
    5ef2:	8819      	ldrh	r1, [r3, #0]
    5ef4:	4b0a      	ldr	r3, [pc, #40]	; (5f20 <sd_mmc_spi_read_word+0x68>)
    5ef6:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    5ef8:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    5efa:	2900      	cmp	r1, #0
    5efc:	d001      	beq.n	5f02 <sd_mmc_spi_read_word+0x4a>
}
    5efe:	b004      	add	sp, #16
    5f00:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    5f02:	23ff      	movs	r3, #255	; 0xff
    5f04:	2202      	movs	r2, #2
    5f06:	a903      	add	r1, sp, #12
    5f08:	4807      	ldr	r0, [pc, #28]	; (5f28 <sd_mmc_spi_read_word+0x70>)
    5f0a:	4c08      	ldr	r4, [pc, #32]	; (5f2c <sd_mmc_spi_read_word+0x74>)
    5f0c:	47a0      	blx	r4
	return true;
    5f0e:	2001      	movs	r0, #1
    5f10:	e7f5      	b.n	5efe <sd_mmc_spi_read_word+0x46>
    5f12:	46c0      	nop			; (mov r8, r8)
    5f14:	200002cb 	.word	0x200002cb
    5f18:	200002c4 	.word	0x200002c4
    5f1c:	200002d4 	.word	0x200002d4
    5f20:	000067e1 	.word	0x000067e1
    5f24:	00005a81 	.word	0x00005a81
    5f28:	200002b8 	.word	0x200002b8
    5f2c:	0000532d 	.word	0x0000532d

00005f30 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    5f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f32:	46de      	mov	lr, fp
    5f34:	4657      	mov	r7, sl
    5f36:	4646      	mov	r6, r8
    5f38:	b5c0      	push	{r6, r7, lr}
    5f3a:	b082      	sub	sp, #8
    5f3c:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5f3e:	2200      	movs	r2, #0
    5f40:	4b17      	ldr	r3, [pc, #92]	; (5fa0 <sd_mmc_spi_start_read_blocks+0x70>)
    5f42:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    5f44:	1e4c      	subs	r4, r1, #1
    5f46:	b2a4      	uxth	r4, r4
    5f48:	2900      	cmp	r1, #0
    5f4a:	d026      	beq.n	5f9a <sd_mmc_spi_start_read_blocks+0x6a>
    5f4c:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    5f4e:	4b15      	ldr	r3, [pc, #84]	; (5fa4 <sd_mmc_spi_start_read_blocks+0x74>)
    5f50:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    5f52:	4f15      	ldr	r7, [pc, #84]	; (5fa8 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    5f54:	47d0      	blx	sl
    5f56:	4680      	mov	r8, r0
    5f58:	2800      	cmp	r0, #0
    5f5a:	d017      	beq.n	5f8c <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    5f5c:	883a      	ldrh	r2, [r7, #0]
    5f5e:	465b      	mov	r3, fp
    5f60:	1999      	adds	r1, r3, r6
    5f62:	23ff      	movs	r3, #255	; 0xff
    5f64:	4811      	ldr	r0, [pc, #68]	; (5fac <sd_mmc_spi_start_read_blocks+0x7c>)
    5f66:	4d12      	ldr	r5, [pc, #72]	; (5fb0 <sd_mmc_spi_start_read_blocks+0x80>)
    5f68:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    5f6a:	883b      	ldrh	r3, [r7, #0]
    5f6c:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    5f6e:	4a11      	ldr	r2, [pc, #68]	; (5fb4 <sd_mmc_spi_start_read_blocks+0x84>)
    5f70:	6811      	ldr	r1, [r2, #0]
    5f72:	468c      	mov	ip, r1
    5f74:	4463      	add	r3, ip
    5f76:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    5f78:	23ff      	movs	r3, #255	; 0xff
    5f7a:	2202      	movs	r2, #2
    5f7c:	a901      	add	r1, sp, #4
    5f7e:	480b      	ldr	r0, [pc, #44]	; (5fac <sd_mmc_spi_start_read_blocks+0x7c>)
    5f80:	47a8      	blx	r5
	while (nb_block--) {
    5f82:	3c01      	subs	r4, #1
    5f84:	b2a4      	uxth	r4, r4
    5f86:	4b0c      	ldr	r3, [pc, #48]	; (5fb8 <sd_mmc_spi_start_read_blocks+0x88>)
    5f88:	429c      	cmp	r4, r3
    5f8a:	d1e3      	bne.n	5f54 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    5f8c:	4640      	mov	r0, r8
    5f8e:	b002      	add	sp, #8
    5f90:	bc1c      	pop	{r2, r3, r4}
    5f92:	4690      	mov	r8, r2
    5f94:	469a      	mov	sl, r3
    5f96:	46a3      	mov	fp, r4
    5f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    5f9a:	2301      	movs	r3, #1
    5f9c:	4698      	mov	r8, r3
    5f9e:	e7f5      	b.n	5f8c <sd_mmc_spi_start_read_blocks+0x5c>
    5fa0:	200002cb 	.word	0x200002cb
    5fa4:	00005a81 	.word	0x00005a81
    5fa8:	200002c4 	.word	0x200002c4
    5fac:	200002b8 	.word	0x200002b8
    5fb0:	0000532d 	.word	0x0000532d
    5fb4:	200002d4 	.word	0x200002d4
    5fb8:	0000ffff 	.word	0x0000ffff

00005fbc <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    5fbc:	2001      	movs	r0, #1
    5fbe:	4770      	bx	lr

00005fc0 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    5fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fc2:	46c6      	mov	lr, r8
    5fc4:	b500      	push	{lr}
    5fc6:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5fc8:	2200      	movs	r2, #0
    5fca:	4b15      	ldr	r3, [pc, #84]	; (6020 <sd_mmc_spi_start_write_blocks+0x60>)
    5fcc:	701a      	strb	r2, [r3, #0]
	pos = 0;
    5fce:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    5fd0:	4f14      	ldr	r7, [pc, #80]	; (6024 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    5fd2:	4e15      	ldr	r6, [pc, #84]	; (6028 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    5fd4:	e000      	b.n	5fd8 <sd_mmc_spi_start_write_blocks+0x18>
{
    5fd6:	0021      	movs	r1, r4
	while (nb_block--) {
    5fd8:	1e4c      	subs	r4, r1, #1
    5fda:	b2a4      	uxth	r4, r4
    5fdc:	2900      	cmp	r1, #0
    5fde:	d01b      	beq.n	6018 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    5fe0:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    5fe2:	8832      	ldrh	r2, [r6, #0]
    5fe4:	4643      	mov	r3, r8
    5fe6:	1959      	adds	r1, r3, r5
    5fe8:	4810      	ldr	r0, [pc, #64]	; (602c <sd_mmc_spi_start_write_blocks+0x6c>)
    5fea:	4b11      	ldr	r3, [pc, #68]	; (6030 <sd_mmc_spi_start_write_blocks+0x70>)
    5fec:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    5fee:	8833      	ldrh	r3, [r6, #0]
    5ff0:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    5ff2:	4a10      	ldr	r2, [pc, #64]	; (6034 <sd_mmc_spi_start_write_blocks+0x74>)
    5ff4:	6811      	ldr	r1, [r2, #0]
    5ff6:	468c      	mov	ip, r1
    5ff8:	4463      	add	r3, ip
    5ffa:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    5ffc:	4b0e      	ldr	r3, [pc, #56]	; (6038 <sd_mmc_spi_start_write_blocks+0x78>)
    5ffe:	4798      	blx	r3
    6000:	2800      	cmp	r0, #0
    6002:	d00a      	beq.n	601a <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    6004:	2c00      	cmp	r4, #0
    6006:	d0e6      	beq.n	5fd6 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    6008:	4b0c      	ldr	r3, [pc, #48]	; (603c <sd_mmc_spi_start_write_blocks+0x7c>)
    600a:	4798      	blx	r3
    600c:	2800      	cmp	r0, #0
    600e:	d1e2      	bne.n	5fd6 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    6010:	2205      	movs	r2, #5
    6012:	4b03      	ldr	r3, [pc, #12]	; (6020 <sd_mmc_spi_start_write_blocks+0x60>)
    6014:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    6016:	e000      	b.n	601a <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    6018:	2001      	movs	r0, #1
}
    601a:	bc04      	pop	{r2}
    601c:	4690      	mov	r8, r2
    601e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6020:	200002cb 	.word	0x200002cb
    6024:	0000595d 	.word	0x0000595d
    6028:	200002c4 	.word	0x200002c4
    602c:	200002b8 	.word	0x200002b8
    6030:	00005539 	.word	0x00005539
    6034:	200002d4 	.word	0x200002d4
    6038:	00005aed 	.word	0x00005aed
    603c:	000059a5 	.word	0x000059a5

00006040 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    6040:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    6042:	4b05      	ldr	r3, [pc, #20]	; (6058 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    6044:	4798      	blx	r3
    6046:	2800      	cmp	r0, #0
    6048:	d103      	bne.n	6052 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    604a:	2205      	movs	r2, #5
    604c:	4b03      	ldr	r3, [pc, #12]	; (605c <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    604e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    6050:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    6052:	4b03      	ldr	r3, [pc, #12]	; (6060 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    6054:	4798      	blx	r3
    6056:	e7fb      	b.n	6050 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    6058:	000059a5 	.word	0x000059a5
    605c:	200002cb 	.word	0x200002cb
    6060:	00005a09 	.word	0x00005a09

00006064 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
    6064:	2001      	movs	r0, #1
    6066:	4770      	bx	lr

00006068 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    6068:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    606a:	2301      	movs	r3, #1
    606c:	2800      	cmp	r0, #0
    606e:	d001      	beq.n	6074 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    6070:	0018      	movs	r0, r3
    6072:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    6074:	4b01      	ldr	r3, [pc, #4]	; (607c <mem_test_unit_ready+0x14>)
    6076:	4798      	blx	r3
    6078:	0003      	movs	r3, r0
    607a:	e7f9      	b.n	6070 <mem_test_unit_ready+0x8>
    607c:	0000578d 	.word	0x0000578d

00006080 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    6080:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    6082:	2301      	movs	r3, #1
    6084:	2800      	cmp	r0, #0
    6086:	d001      	beq.n	608c <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    6088:	0018      	movs	r0, r3
    608a:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    608c:	0008      	movs	r0, r1
    608e:	4b02      	ldr	r3, [pc, #8]	; (6098 <mem_read_capacity+0x18>)
    6090:	4798      	blx	r3
    6092:	0003      	movs	r3, r0
    6094:	e7f8      	b.n	6088 <mem_read_capacity+0x8>
    6096:	46c0      	nop			; (mov r8, r8)
    6098:	000057bd 	.word	0x000057bd

0000609c <mem_unload>:
  return sector_size;
}


bool mem_unload(U8 lun, bool unload)
{
    609c:	0003      	movs	r3, r0

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    609e:	2000      	movs	r0, #0
    60a0:	2b00      	cmp	r3, #0
    60a2:	d101      	bne.n	60a8 <mem_unload+0xc>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
    60a4:	3001      	adds	r0, #1
    60a6:	4048      	eors	r0, r1
#endif

  Ctrl_access_unlock();

  return unloaded;
}
    60a8:	4770      	bx	lr
	...

000060ac <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    60ac:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    60ae:	2301      	movs	r3, #1
    60b0:	2800      	cmp	r0, #0
    60b2:	d001      	beq.n	60b8 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    60b4:	0018      	movs	r0, r3
    60b6:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    60b8:	4b01      	ldr	r3, [pc, #4]	; (60c0 <mem_wr_protect+0x14>)
    60ba:	4798      	blx	r3
    60bc:	0003      	movs	r3, r0
    60be:	e7f9      	b.n	60b4 <mem_wr_protect+0x8>
    60c0:	000057cd 	.word	0x000057cd

000060c4 <mem_removal>:


bool mem_removal(U8 lun)
{
    60c4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    60c6:	2301      	movs	r3, #1
    60c8:	2800      	cmp	r0, #0
    60ca:	d001      	beq.n	60d0 <mem_removal+0xc>
#endif

  Ctrl_access_unlock();

  return removal;
}
    60cc:	0018      	movs	r0, r3
    60ce:	bd10      	pop	{r4, pc}
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    60d0:	4b01      	ldr	r3, [pc, #4]	; (60d8 <mem_removal+0x14>)
    60d2:	4798      	blx	r3
    60d4:	0003      	movs	r3, r0
    60d6:	e7f9      	b.n	60cc <mem_removal+0x8>
    60d8:	000057dd 	.word	0x000057dd

000060dc <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    60dc:	2800      	cmp	r0, #0
    60de:	d101      	bne.n	60e4 <mem_name+0x8>
    60e0:	4801      	ldr	r0, [pc, #4]	; (60e8 <mem_name+0xc>)
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    60e2:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
    60e4:	2000      	movs	r0, #0
    60e6:	e7fc      	b.n	60e2 <mem_name+0x6>
    60e8:	00007f88 	.word	0x00007f88

000060ec <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
    60ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60ee:	0005      	movs	r5, r0
    60f0:	000e      	movs	r6, r1
    60f2:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
    60f4:	4b07      	ldr	r3, [pc, #28]	; (6114 <memory_2_usb+0x28>)
    60f6:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    60f8:	2401      	movs	r4, #1
    60fa:	2d00      	cmp	r5, #0
    60fc:	d003      	beq.n	6106 <memory_2_usb+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
    60fe:	4b06      	ldr	r3, [pc, #24]	; (6118 <memory_2_usb+0x2c>)
    6100:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    6102:	0020      	movs	r0, r4
    6104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    6106:	0039      	movs	r1, r7
    6108:	0030      	movs	r0, r6
    610a:	4b04      	ldr	r3, [pc, #16]	; (611c <memory_2_usb+0x30>)
    610c:	4798      	blx	r3
    610e:	0004      	movs	r4, r0
    6110:	e7f5      	b.n	60fe <memory_2_usb+0x12>
    6112:	46c0      	nop			; (mov r8, r8)
    6114:	00003c79 	.word	0x00003c79
    6118:	00003c7b 	.word	0x00003c7b
    611c:	00005891 	.word	0x00005891

00006120 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
    6120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6122:	0005      	movs	r5, r0
    6124:	000e      	movs	r6, r1
    6126:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
    6128:	4b07      	ldr	r3, [pc, #28]	; (6148 <usb_2_memory+0x28>)
    612a:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    612c:	2401      	movs	r4, #1
    612e:	2d00      	cmp	r5, #0
    6130:	d003      	beq.n	613a <usb_2_memory+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
    6132:	4b06      	ldr	r3, [pc, #24]	; (614c <usb_2_memory+0x2c>)
    6134:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    6136:	0020      	movs	r0, r4
    6138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    613a:	0039      	movs	r1, r7
    613c:	0030      	movs	r0, r6
    613e:	4b04      	ldr	r3, [pc, #16]	; (6150 <usb_2_memory+0x30>)
    6140:	4798      	blx	r3
    6142:	0004      	movs	r4, r0
    6144:	e7f5      	b.n	6132 <usb_2_memory+0x12>
    6146:	46c0      	nop			; (mov r8, r8)
    6148:	00003c7d 	.word	0x00003c7d
    614c:	00003c7f 	.word	0x00003c7f
    6150:	00005949 	.word	0x00005949

00006154 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    6154:	4b0c      	ldr	r3, [pc, #48]	; (6188 <cpu_irq_enter_critical+0x34>)
    6156:	681b      	ldr	r3, [r3, #0]
    6158:	2b00      	cmp	r3, #0
    615a:	d106      	bne.n	616a <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    615c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    6160:	2b00      	cmp	r3, #0
    6162:	d007      	beq.n	6174 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    6164:	2200      	movs	r2, #0
    6166:	4b09      	ldr	r3, [pc, #36]	; (618c <cpu_irq_enter_critical+0x38>)
    6168:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    616a:	4a07      	ldr	r2, [pc, #28]	; (6188 <cpu_irq_enter_critical+0x34>)
    616c:	6813      	ldr	r3, [r2, #0]
    616e:	3301      	adds	r3, #1
    6170:	6013      	str	r3, [r2, #0]
}
    6172:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    6174:	b672      	cpsid	i
  __ASM volatile ("dmb");
    6176:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    617a:	2200      	movs	r2, #0
    617c:	4b04      	ldr	r3, [pc, #16]	; (6190 <cpu_irq_enter_critical+0x3c>)
    617e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    6180:	3201      	adds	r2, #1
    6182:	4b02      	ldr	r3, [pc, #8]	; (618c <cpu_irq_enter_critical+0x38>)
    6184:	701a      	strb	r2, [r3, #0]
    6186:	e7f0      	b.n	616a <cpu_irq_enter_critical+0x16>
    6188:	200002dc 	.word	0x200002dc
    618c:	200002e0 	.word	0x200002e0
    6190:	200000f9 	.word	0x200000f9

00006194 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    6194:	4b08      	ldr	r3, [pc, #32]	; (61b8 <cpu_irq_leave_critical+0x24>)
    6196:	681a      	ldr	r2, [r3, #0]
    6198:	3a01      	subs	r2, #1
    619a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    619c:	681b      	ldr	r3, [r3, #0]
    619e:	2b00      	cmp	r3, #0
    61a0:	d109      	bne.n	61b6 <cpu_irq_leave_critical+0x22>
    61a2:	4b06      	ldr	r3, [pc, #24]	; (61bc <cpu_irq_leave_critical+0x28>)
    61a4:	781b      	ldrb	r3, [r3, #0]
    61a6:	2b00      	cmp	r3, #0
    61a8:	d005      	beq.n	61b6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    61aa:	2201      	movs	r2, #1
    61ac:	4b04      	ldr	r3, [pc, #16]	; (61c0 <cpu_irq_leave_critical+0x2c>)
    61ae:	701a      	strb	r2, [r3, #0]
    61b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    61b4:	b662      	cpsie	i
	}
}
    61b6:	4770      	bx	lr
    61b8:	200002dc 	.word	0x200002dc
    61bc:	200002e0 	.word	0x200002e0
    61c0:	200000f9 	.word	0x200000f9

000061c4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    61c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    61c6:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    61c8:	ac01      	add	r4, sp, #4
    61ca:	2501      	movs	r5, #1
    61cc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    61ce:	2700      	movs	r7, #0
    61d0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    61d2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    61d4:	0021      	movs	r1, r4
    61d6:	203e      	movs	r0, #62	; 0x3e
    61d8:	4e06      	ldr	r6, [pc, #24]	; (61f4 <system_board_init+0x30>)
    61da:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    61dc:	2280      	movs	r2, #128	; 0x80
    61de:	05d2      	lsls	r2, r2, #23
    61e0:	4b05      	ldr	r3, [pc, #20]	; (61f8 <system_board_init+0x34>)
    61e2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    61e4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    61e6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    61e8:	0021      	movs	r1, r4
    61ea:	200f      	movs	r0, #15
    61ec:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    61ee:	b003      	add	sp, #12
    61f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61f2:	46c0      	nop			; (mov r8, r8)
    61f4:	000061fd 	.word	0x000061fd
    61f8:	41004480 	.word	0x41004480

000061fc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    61fc:	b500      	push	{lr}
    61fe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6200:	ab01      	add	r3, sp, #4
    6202:	2280      	movs	r2, #128	; 0x80
    6204:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    6206:	780a      	ldrb	r2, [r1, #0]
    6208:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    620a:	784a      	ldrb	r2, [r1, #1]
    620c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    620e:	788a      	ldrb	r2, [r1, #2]
    6210:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    6212:	0019      	movs	r1, r3
    6214:	4b01      	ldr	r3, [pc, #4]	; (621c <port_pin_set_config+0x20>)
    6216:	4798      	blx	r3
}
    6218:	b003      	add	sp, #12
    621a:	bd00      	pop	{pc}
    621c:	00006551 	.word	0x00006551

00006220 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    6220:	4a06      	ldr	r2, [pc, #24]	; (623c <system_gclk_init+0x1c>)
    6222:	6993      	ldr	r3, [r2, #24]
    6224:	2108      	movs	r1, #8
    6226:	430b      	orrs	r3, r1
    6228:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    622a:	2201      	movs	r2, #1
    622c:	4b04      	ldr	r3, [pc, #16]	; (6240 <system_gclk_init+0x20>)
    622e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    6230:	0019      	movs	r1, r3
    6232:	780b      	ldrb	r3, [r1, #0]
    6234:	4213      	tst	r3, r2
    6236:	d1fc      	bne.n	6232 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    6238:	4770      	bx	lr
    623a:	46c0      	nop			; (mov r8, r8)
    623c:	40000400 	.word	0x40000400
    6240:	40000c00 	.word	0x40000c00

00006244 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6244:	b570      	push	{r4, r5, r6, lr}
    6246:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    6248:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    624a:	780d      	ldrb	r5, [r1, #0]
    624c:	022d      	lsls	r5, r5, #8
    624e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6250:	784b      	ldrb	r3, [r1, #1]
    6252:	2b00      	cmp	r3, #0
    6254:	d002      	beq.n	625c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6256:	2380      	movs	r3, #128	; 0x80
    6258:	02db      	lsls	r3, r3, #11
    625a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    625c:	7a4b      	ldrb	r3, [r1, #9]
    625e:	2b00      	cmp	r3, #0
    6260:	d002      	beq.n	6268 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6262:	2380      	movs	r3, #128	; 0x80
    6264:	031b      	lsls	r3, r3, #12
    6266:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6268:	6848      	ldr	r0, [r1, #4]
    626a:	2801      	cmp	r0, #1
    626c:	d910      	bls.n	6290 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    626e:	1e43      	subs	r3, r0, #1
    6270:	4218      	tst	r0, r3
    6272:	d134      	bne.n	62de <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6274:	2802      	cmp	r0, #2
    6276:	d930      	bls.n	62da <system_gclk_gen_set_config+0x96>
    6278:	2302      	movs	r3, #2
    627a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    627c:	3201      	adds	r2, #1
						mask <<= 1) {
    627e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    6280:	4298      	cmp	r0, r3
    6282:	d8fb      	bhi.n	627c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6284:	0212      	lsls	r2, r2, #8
    6286:	4332      	orrs	r2, r6
    6288:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    628a:	2380      	movs	r3, #128	; 0x80
    628c:	035b      	lsls	r3, r3, #13
    628e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6290:	7a0b      	ldrb	r3, [r1, #8]
    6292:	2b00      	cmp	r3, #0
    6294:	d002      	beq.n	629c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6296:	2380      	movs	r3, #128	; 0x80
    6298:	039b      	lsls	r3, r3, #14
    629a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    629c:	4a13      	ldr	r2, [pc, #76]	; (62ec <system_gclk_gen_set_config+0xa8>)
    629e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    62a0:	b25b      	sxtb	r3, r3
    62a2:	2b00      	cmp	r3, #0
    62a4:	dbfb      	blt.n	629e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    62a6:	4b12      	ldr	r3, [pc, #72]	; (62f0 <system_gclk_gen_set_config+0xac>)
    62a8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    62aa:	4b12      	ldr	r3, [pc, #72]	; (62f4 <system_gclk_gen_set_config+0xb0>)
    62ac:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    62ae:	4a0f      	ldr	r2, [pc, #60]	; (62ec <system_gclk_gen_set_config+0xa8>)
    62b0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    62b2:	b25b      	sxtb	r3, r3
    62b4:	2b00      	cmp	r3, #0
    62b6:	dbfb      	blt.n	62b0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    62b8:	4b0c      	ldr	r3, [pc, #48]	; (62ec <system_gclk_gen_set_config+0xa8>)
    62ba:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    62bc:	001a      	movs	r2, r3
    62be:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    62c0:	b25b      	sxtb	r3, r3
    62c2:	2b00      	cmp	r3, #0
    62c4:	dbfb      	blt.n	62be <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    62c6:	4a09      	ldr	r2, [pc, #36]	; (62ec <system_gclk_gen_set_config+0xa8>)
    62c8:	6853      	ldr	r3, [r2, #4]
    62ca:	2180      	movs	r1, #128	; 0x80
    62cc:	0249      	lsls	r1, r1, #9
    62ce:	400b      	ands	r3, r1
    62d0:	431d      	orrs	r5, r3
    62d2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    62d4:	4b08      	ldr	r3, [pc, #32]	; (62f8 <system_gclk_gen_set_config+0xb4>)
    62d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    62d8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    62da:	2200      	movs	r2, #0
    62dc:	e7d2      	b.n	6284 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    62de:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    62e0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    62e2:	2380      	movs	r3, #128	; 0x80
    62e4:	029b      	lsls	r3, r3, #10
    62e6:	431d      	orrs	r5, r3
    62e8:	e7d2      	b.n	6290 <system_gclk_gen_set_config+0x4c>
    62ea:	46c0      	nop			; (mov r8, r8)
    62ec:	40000c00 	.word	0x40000c00
    62f0:	00006155 	.word	0x00006155
    62f4:	40000c08 	.word	0x40000c08
    62f8:	00006195 	.word	0x00006195

000062fc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    62fc:	b510      	push	{r4, lr}
    62fe:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6300:	4a0b      	ldr	r2, [pc, #44]	; (6330 <system_gclk_gen_enable+0x34>)
    6302:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6304:	b25b      	sxtb	r3, r3
    6306:	2b00      	cmp	r3, #0
    6308:	dbfb      	blt.n	6302 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    630a:	4b0a      	ldr	r3, [pc, #40]	; (6334 <system_gclk_gen_enable+0x38>)
    630c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    630e:	4b0a      	ldr	r3, [pc, #40]	; (6338 <system_gclk_gen_enable+0x3c>)
    6310:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6312:	4a07      	ldr	r2, [pc, #28]	; (6330 <system_gclk_gen_enable+0x34>)
    6314:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6316:	b25b      	sxtb	r3, r3
    6318:	2b00      	cmp	r3, #0
    631a:	dbfb      	blt.n	6314 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    631c:	4a04      	ldr	r2, [pc, #16]	; (6330 <system_gclk_gen_enable+0x34>)
    631e:	6851      	ldr	r1, [r2, #4]
    6320:	2380      	movs	r3, #128	; 0x80
    6322:	025b      	lsls	r3, r3, #9
    6324:	430b      	orrs	r3, r1
    6326:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    6328:	4b04      	ldr	r3, [pc, #16]	; (633c <system_gclk_gen_enable+0x40>)
    632a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    632c:	bd10      	pop	{r4, pc}
    632e:	46c0      	nop			; (mov r8, r8)
    6330:	40000c00 	.word	0x40000c00
    6334:	00006155 	.word	0x00006155
    6338:	40000c04 	.word	0x40000c04
    633c:	00006195 	.word	0x00006195

00006340 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6340:	b570      	push	{r4, r5, r6, lr}
    6342:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6344:	4a1a      	ldr	r2, [pc, #104]	; (63b0 <system_gclk_gen_get_hz+0x70>)
    6346:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6348:	b25b      	sxtb	r3, r3
    634a:	2b00      	cmp	r3, #0
    634c:	dbfb      	blt.n	6346 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    634e:	4b19      	ldr	r3, [pc, #100]	; (63b4 <system_gclk_gen_get_hz+0x74>)
    6350:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6352:	4b19      	ldr	r3, [pc, #100]	; (63b8 <system_gclk_gen_get_hz+0x78>)
    6354:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6356:	4a16      	ldr	r2, [pc, #88]	; (63b0 <system_gclk_gen_get_hz+0x70>)
    6358:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    635a:	b25b      	sxtb	r3, r3
    635c:	2b00      	cmp	r3, #0
    635e:	dbfb      	blt.n	6358 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6360:	4e13      	ldr	r6, [pc, #76]	; (63b0 <system_gclk_gen_get_hz+0x70>)
    6362:	6870      	ldr	r0, [r6, #4]
    6364:	04c0      	lsls	r0, r0, #19
    6366:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6368:	4b14      	ldr	r3, [pc, #80]	; (63bc <system_gclk_gen_get_hz+0x7c>)
    636a:	4798      	blx	r3
    636c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    636e:	4b12      	ldr	r3, [pc, #72]	; (63b8 <system_gclk_gen_get_hz+0x78>)
    6370:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6372:	6876      	ldr	r6, [r6, #4]
    6374:	02f6      	lsls	r6, r6, #11
    6376:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6378:	4b11      	ldr	r3, [pc, #68]	; (63c0 <system_gclk_gen_get_hz+0x80>)
    637a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    637c:	4a0c      	ldr	r2, [pc, #48]	; (63b0 <system_gclk_gen_get_hz+0x70>)
    637e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6380:	b25b      	sxtb	r3, r3
    6382:	2b00      	cmp	r3, #0
    6384:	dbfb      	blt.n	637e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6386:	4b0a      	ldr	r3, [pc, #40]	; (63b0 <system_gclk_gen_get_hz+0x70>)
    6388:	689c      	ldr	r4, [r3, #8]
    638a:	0224      	lsls	r4, r4, #8
    638c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    638e:	4b0d      	ldr	r3, [pc, #52]	; (63c4 <system_gclk_gen_get_hz+0x84>)
    6390:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6392:	2e00      	cmp	r6, #0
    6394:	d107      	bne.n	63a6 <system_gclk_gen_get_hz+0x66>
    6396:	2c01      	cmp	r4, #1
    6398:	d907      	bls.n	63aa <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    639a:	0021      	movs	r1, r4
    639c:	0028      	movs	r0, r5
    639e:	4b0a      	ldr	r3, [pc, #40]	; (63c8 <system_gclk_gen_get_hz+0x88>)
    63a0:	4798      	blx	r3
    63a2:	0005      	movs	r5, r0
    63a4:	e001      	b.n	63aa <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    63a6:	3401      	adds	r4, #1
    63a8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    63aa:	0028      	movs	r0, r5
    63ac:	bd70      	pop	{r4, r5, r6, pc}
    63ae:	46c0      	nop			; (mov r8, r8)
    63b0:	40000c00 	.word	0x40000c00
    63b4:	00006155 	.word	0x00006155
    63b8:	40000c04 	.word	0x40000c04
    63bc:	00002439 	.word	0x00002439
    63c0:	40000c08 	.word	0x40000c08
    63c4:	00006195 	.word	0x00006195
    63c8:	000066d5 	.word	0x000066d5

000063cc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    63cc:	b510      	push	{r4, lr}
    63ce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    63d0:	4b06      	ldr	r3, [pc, #24]	; (63ec <system_gclk_chan_enable+0x20>)
    63d2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    63d4:	4b06      	ldr	r3, [pc, #24]	; (63f0 <system_gclk_chan_enable+0x24>)
    63d6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    63d8:	4a06      	ldr	r2, [pc, #24]	; (63f4 <system_gclk_chan_enable+0x28>)
    63da:	8853      	ldrh	r3, [r2, #2]
    63dc:	2180      	movs	r1, #128	; 0x80
    63de:	01c9      	lsls	r1, r1, #7
    63e0:	430b      	orrs	r3, r1
    63e2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    63e4:	4b04      	ldr	r3, [pc, #16]	; (63f8 <system_gclk_chan_enable+0x2c>)
    63e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    63e8:	bd10      	pop	{r4, pc}
    63ea:	46c0      	nop			; (mov r8, r8)
    63ec:	00006155 	.word	0x00006155
    63f0:	40000c02 	.word	0x40000c02
    63f4:	40000c00 	.word	0x40000c00
    63f8:	00006195 	.word	0x00006195

000063fc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    63fc:	b510      	push	{r4, lr}
    63fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6400:	4b0f      	ldr	r3, [pc, #60]	; (6440 <system_gclk_chan_disable+0x44>)
    6402:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6404:	4b0f      	ldr	r3, [pc, #60]	; (6444 <system_gclk_chan_disable+0x48>)
    6406:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6408:	4a0f      	ldr	r2, [pc, #60]	; (6448 <system_gclk_chan_disable+0x4c>)
    640a:	8853      	ldrh	r3, [r2, #2]
    640c:	051b      	lsls	r3, r3, #20
    640e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    6410:	8853      	ldrh	r3, [r2, #2]
    6412:	490e      	ldr	r1, [pc, #56]	; (644c <system_gclk_chan_disable+0x50>)
    6414:	400b      	ands	r3, r1
    6416:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    6418:	8853      	ldrh	r3, [r2, #2]
    641a:	490d      	ldr	r1, [pc, #52]	; (6450 <system_gclk_chan_disable+0x54>)
    641c:	400b      	ands	r3, r1
    641e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    6420:	0011      	movs	r1, r2
    6422:	2280      	movs	r2, #128	; 0x80
    6424:	01d2      	lsls	r2, r2, #7
    6426:	884b      	ldrh	r3, [r1, #2]
    6428:	4213      	tst	r3, r2
    642a:	d1fc      	bne.n	6426 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    642c:	4906      	ldr	r1, [pc, #24]	; (6448 <system_gclk_chan_disable+0x4c>)
    642e:	884a      	ldrh	r2, [r1, #2]
    6430:	0203      	lsls	r3, r0, #8
    6432:	4806      	ldr	r0, [pc, #24]	; (644c <system_gclk_chan_disable+0x50>)
    6434:	4002      	ands	r2, r0
    6436:	4313      	orrs	r3, r2
    6438:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    643a:	4b06      	ldr	r3, [pc, #24]	; (6454 <system_gclk_chan_disable+0x58>)
    643c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    643e:	bd10      	pop	{r4, pc}
    6440:	00006155 	.word	0x00006155
    6444:	40000c02 	.word	0x40000c02
    6448:	40000c00 	.word	0x40000c00
    644c:	fffff0ff 	.word	0xfffff0ff
    6450:	ffffbfff 	.word	0xffffbfff
    6454:	00006195 	.word	0x00006195

00006458 <system_gclk_chan_set_config>:
{
    6458:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    645a:	780c      	ldrb	r4, [r1, #0]
    645c:	0224      	lsls	r4, r4, #8
    645e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    6460:	4b02      	ldr	r3, [pc, #8]	; (646c <system_gclk_chan_set_config+0x14>)
    6462:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6464:	b2a4      	uxth	r4, r4
    6466:	4b02      	ldr	r3, [pc, #8]	; (6470 <system_gclk_chan_set_config+0x18>)
    6468:	805c      	strh	r4, [r3, #2]
}
    646a:	bd10      	pop	{r4, pc}
    646c:	000063fd 	.word	0x000063fd
    6470:	40000c00 	.word	0x40000c00

00006474 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6474:	b510      	push	{r4, lr}
    6476:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6478:	4b06      	ldr	r3, [pc, #24]	; (6494 <system_gclk_chan_get_hz+0x20>)
    647a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    647c:	4b06      	ldr	r3, [pc, #24]	; (6498 <system_gclk_chan_get_hz+0x24>)
    647e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6480:	4b06      	ldr	r3, [pc, #24]	; (649c <system_gclk_chan_get_hz+0x28>)
    6482:	885c      	ldrh	r4, [r3, #2]
    6484:	0524      	lsls	r4, r4, #20
    6486:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    6488:	4b05      	ldr	r3, [pc, #20]	; (64a0 <system_gclk_chan_get_hz+0x2c>)
    648a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    648c:	0020      	movs	r0, r4
    648e:	4b05      	ldr	r3, [pc, #20]	; (64a4 <system_gclk_chan_get_hz+0x30>)
    6490:	4798      	blx	r3
}
    6492:	bd10      	pop	{r4, pc}
    6494:	00006155 	.word	0x00006155
    6498:	40000c02 	.word	0x40000c02
    649c:	40000c00 	.word	0x40000c00
    64a0:	00006195 	.word	0x00006195
    64a4:	00006341 	.word	0x00006341

000064a8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    64a8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    64aa:	78d3      	ldrb	r3, [r2, #3]
    64ac:	2b00      	cmp	r3, #0
    64ae:	d135      	bne.n	651c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    64b0:	7813      	ldrb	r3, [r2, #0]
    64b2:	2b80      	cmp	r3, #128	; 0x80
    64b4:	d029      	beq.n	650a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    64b6:	061b      	lsls	r3, r3, #24
    64b8:	2480      	movs	r4, #128	; 0x80
    64ba:	0264      	lsls	r4, r4, #9
    64bc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    64be:	7854      	ldrb	r4, [r2, #1]
    64c0:	2502      	movs	r5, #2
    64c2:	43ac      	bics	r4, r5
    64c4:	d106      	bne.n	64d4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    64c6:	7894      	ldrb	r4, [r2, #2]
    64c8:	2c00      	cmp	r4, #0
    64ca:	d120      	bne.n	650e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    64cc:	2480      	movs	r4, #128	; 0x80
    64ce:	02a4      	lsls	r4, r4, #10
    64d0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    64d2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    64d4:	7854      	ldrb	r4, [r2, #1]
    64d6:	3c01      	subs	r4, #1
    64d8:	2c01      	cmp	r4, #1
    64da:	d91c      	bls.n	6516 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    64dc:	040d      	lsls	r5, r1, #16
    64de:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    64e0:	24a0      	movs	r4, #160	; 0xa0
    64e2:	05e4      	lsls	r4, r4, #23
    64e4:	432c      	orrs	r4, r5
    64e6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    64e8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    64ea:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    64ec:	24d0      	movs	r4, #208	; 0xd0
    64ee:	0624      	lsls	r4, r4, #24
    64f0:	432c      	orrs	r4, r5
    64f2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    64f4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    64f6:	78d4      	ldrb	r4, [r2, #3]
    64f8:	2c00      	cmp	r4, #0
    64fa:	d122      	bne.n	6542 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    64fc:	035b      	lsls	r3, r3, #13
    64fe:	d51c      	bpl.n	653a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6500:	7893      	ldrb	r3, [r2, #2]
    6502:	2b01      	cmp	r3, #1
    6504:	d01e      	beq.n	6544 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    6506:	6141      	str	r1, [r0, #20]
    6508:	e017      	b.n	653a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    650a:	2300      	movs	r3, #0
    650c:	e7d7      	b.n	64be <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    650e:	24c0      	movs	r4, #192	; 0xc0
    6510:	02e4      	lsls	r4, r4, #11
    6512:	4323      	orrs	r3, r4
    6514:	e7dd      	b.n	64d2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6516:	4c0d      	ldr	r4, [pc, #52]	; (654c <_system_pinmux_config+0xa4>)
    6518:	4023      	ands	r3, r4
    651a:	e7df      	b.n	64dc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    651c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    651e:	040c      	lsls	r4, r1, #16
    6520:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6522:	23a0      	movs	r3, #160	; 0xa0
    6524:	05db      	lsls	r3, r3, #23
    6526:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6528:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    652a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    652c:	23d0      	movs	r3, #208	; 0xd0
    652e:	061b      	lsls	r3, r3, #24
    6530:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6532:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6534:	78d3      	ldrb	r3, [r2, #3]
    6536:	2b00      	cmp	r3, #0
    6538:	d103      	bne.n	6542 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    653a:	7853      	ldrb	r3, [r2, #1]
    653c:	3b01      	subs	r3, #1
    653e:	2b01      	cmp	r3, #1
    6540:	d902      	bls.n	6548 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    6542:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6544:	6181      	str	r1, [r0, #24]
    6546:	e7f8      	b.n	653a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    6548:	6081      	str	r1, [r0, #8]
}
    654a:	e7fa      	b.n	6542 <_system_pinmux_config+0x9a>
    654c:	fffbffff 	.word	0xfffbffff

00006550 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6550:	b510      	push	{r4, lr}
    6552:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    6554:	09c1      	lsrs	r1, r0, #7
		return NULL;
    6556:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6558:	2900      	cmp	r1, #0
    655a:	d104      	bne.n	6566 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    655c:	0943      	lsrs	r3, r0, #5
    655e:	01db      	lsls	r3, r3, #7
    6560:	4905      	ldr	r1, [pc, #20]	; (6578 <system_pinmux_pin_set_config+0x28>)
    6562:	468c      	mov	ip, r1
    6564:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6566:	241f      	movs	r4, #31
    6568:	4020      	ands	r0, r4
    656a:	2101      	movs	r1, #1
    656c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    656e:	0018      	movs	r0, r3
    6570:	4b02      	ldr	r3, [pc, #8]	; (657c <system_pinmux_pin_set_config+0x2c>)
    6572:	4798      	blx	r3
}
    6574:	bd10      	pop	{r4, pc}
    6576:	46c0      	nop			; (mov r8, r8)
    6578:	41004400 	.word	0x41004400
    657c:	000064a9 	.word	0x000064a9

00006580 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6580:	4770      	bx	lr
	...

00006584 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6584:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6586:	4b05      	ldr	r3, [pc, #20]	; (659c <system_init+0x18>)
    6588:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    658a:	4b05      	ldr	r3, [pc, #20]	; (65a0 <system_init+0x1c>)
    658c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    658e:	4b05      	ldr	r3, [pc, #20]	; (65a4 <system_init+0x20>)
    6590:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6592:	4b05      	ldr	r3, [pc, #20]	; (65a8 <system_init+0x24>)
    6594:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6596:	4b05      	ldr	r3, [pc, #20]	; (65ac <system_init+0x28>)
    6598:	4798      	blx	r3
}
    659a:	bd10      	pop	{r4, pc}
    659c:	000026b5 	.word	0x000026b5
    65a0:	000061c5 	.word	0x000061c5
    65a4:	00006581 	.word	0x00006581
    65a8:	00001cfd 	.word	0x00001cfd
    65ac:	00006581 	.word	0x00006581

000065b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    65b0:	e7fe      	b.n	65b0 <Dummy_Handler>
	...

000065b4 <Reset_Handler>:
{
    65b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    65b6:	4a2a      	ldr	r2, [pc, #168]	; (6660 <Reset_Handler+0xac>)
    65b8:	4b2a      	ldr	r3, [pc, #168]	; (6664 <Reset_Handler+0xb0>)
    65ba:	429a      	cmp	r2, r3
    65bc:	d011      	beq.n	65e2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    65be:	001a      	movs	r2, r3
    65c0:	4b29      	ldr	r3, [pc, #164]	; (6668 <Reset_Handler+0xb4>)
    65c2:	429a      	cmp	r2, r3
    65c4:	d20d      	bcs.n	65e2 <Reset_Handler+0x2e>
    65c6:	4a29      	ldr	r2, [pc, #164]	; (666c <Reset_Handler+0xb8>)
    65c8:	3303      	adds	r3, #3
    65ca:	1a9b      	subs	r3, r3, r2
    65cc:	089b      	lsrs	r3, r3, #2
    65ce:	3301      	adds	r3, #1
    65d0:	009b      	lsls	r3, r3, #2
    65d2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    65d4:	4823      	ldr	r0, [pc, #140]	; (6664 <Reset_Handler+0xb0>)
    65d6:	4922      	ldr	r1, [pc, #136]	; (6660 <Reset_Handler+0xac>)
    65d8:	588c      	ldr	r4, [r1, r2]
    65da:	5084      	str	r4, [r0, r2]
    65dc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    65de:	429a      	cmp	r2, r3
    65e0:	d1fa      	bne.n	65d8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    65e2:	4a23      	ldr	r2, [pc, #140]	; (6670 <Reset_Handler+0xbc>)
    65e4:	4b23      	ldr	r3, [pc, #140]	; (6674 <Reset_Handler+0xc0>)
    65e6:	429a      	cmp	r2, r3
    65e8:	d20a      	bcs.n	6600 <Reset_Handler+0x4c>
    65ea:	43d3      	mvns	r3, r2
    65ec:	4921      	ldr	r1, [pc, #132]	; (6674 <Reset_Handler+0xc0>)
    65ee:	185b      	adds	r3, r3, r1
    65f0:	2103      	movs	r1, #3
    65f2:	438b      	bics	r3, r1
    65f4:	3304      	adds	r3, #4
    65f6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    65f8:	2100      	movs	r1, #0
    65fa:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    65fc:	4293      	cmp	r3, r2
    65fe:	d1fc      	bne.n	65fa <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6600:	4a1d      	ldr	r2, [pc, #116]	; (6678 <Reset_Handler+0xc4>)
    6602:	21ff      	movs	r1, #255	; 0xff
    6604:	4b1d      	ldr	r3, [pc, #116]	; (667c <Reset_Handler+0xc8>)
    6606:	438b      	bics	r3, r1
    6608:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    660a:	39fd      	subs	r1, #253	; 0xfd
    660c:	2390      	movs	r3, #144	; 0x90
    660e:	005b      	lsls	r3, r3, #1
    6610:	4a1b      	ldr	r2, [pc, #108]	; (6680 <Reset_Handler+0xcc>)
    6612:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6614:	4a1b      	ldr	r2, [pc, #108]	; (6684 <Reset_Handler+0xd0>)
    6616:	78d3      	ldrb	r3, [r2, #3]
    6618:	2503      	movs	r5, #3
    661a:	43ab      	bics	r3, r5
    661c:	2402      	movs	r4, #2
    661e:	4323      	orrs	r3, r4
    6620:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6622:	78d3      	ldrb	r3, [r2, #3]
    6624:	270c      	movs	r7, #12
    6626:	43bb      	bics	r3, r7
    6628:	2608      	movs	r6, #8
    662a:	4333      	orrs	r3, r6
    662c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    662e:	4b16      	ldr	r3, [pc, #88]	; (6688 <Reset_Handler+0xd4>)
    6630:	7b98      	ldrb	r0, [r3, #14]
    6632:	2230      	movs	r2, #48	; 0x30
    6634:	4390      	bics	r0, r2
    6636:	2220      	movs	r2, #32
    6638:	4310      	orrs	r0, r2
    663a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    663c:	7b99      	ldrb	r1, [r3, #14]
    663e:	43b9      	bics	r1, r7
    6640:	4331      	orrs	r1, r6
    6642:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6644:	7b9a      	ldrb	r2, [r3, #14]
    6646:	43aa      	bics	r2, r5
    6648:	4322      	orrs	r2, r4
    664a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    664c:	4a0f      	ldr	r2, [pc, #60]	; (668c <Reset_Handler+0xd8>)
    664e:	6853      	ldr	r3, [r2, #4]
    6650:	2180      	movs	r1, #128	; 0x80
    6652:	430b      	orrs	r3, r1
    6654:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    6656:	4b0e      	ldr	r3, [pc, #56]	; (6690 <Reset_Handler+0xdc>)
    6658:	4798      	blx	r3
        main();
    665a:	4b0e      	ldr	r3, [pc, #56]	; (6694 <Reset_Handler+0xe0>)
    665c:	4798      	blx	r3
    665e:	e7fe      	b.n	665e <Reset_Handler+0xaa>
    6660:	00008060 	.word	0x00008060
    6664:	20000000 	.word	0x20000000
    6668:	20000160 	.word	0x20000160
    666c:	20000004 	.word	0x20000004
    6670:	20000160 	.word	0x20000160
    6674:	20000af4 	.word	0x20000af4
    6678:	e000ed00 	.word	0xe000ed00
    667c:	00000000 	.word	0x00000000
    6680:	41007000 	.word	0x41007000
    6684:	41005000 	.word	0x41005000
    6688:	41004800 	.word	0x41004800
    668c:	41004000 	.word	0x41004000
    6690:	00006c69 	.word	0x00006c69
    6694:	0000367d 	.word	0x0000367d

00006698 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6698:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    669a:	4a06      	ldr	r2, [pc, #24]	; (66b4 <_sbrk+0x1c>)
    669c:	6812      	ldr	r2, [r2, #0]
    669e:	2a00      	cmp	r2, #0
    66a0:	d004      	beq.n	66ac <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    66a2:	4a04      	ldr	r2, [pc, #16]	; (66b4 <_sbrk+0x1c>)
    66a4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    66a6:	18c3      	adds	r3, r0, r3
    66a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    66aa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    66ac:	4902      	ldr	r1, [pc, #8]	; (66b8 <_sbrk+0x20>)
    66ae:	4a01      	ldr	r2, [pc, #4]	; (66b4 <_sbrk+0x1c>)
    66b0:	6011      	str	r1, [r2, #0]
    66b2:	e7f6      	b.n	66a2 <_sbrk+0xa>
    66b4:	200002e4 	.word	0x200002e4
    66b8:	20002af8 	.word	0x20002af8

000066bc <_close>:
}

extern int _close(int file)
{
	return -1;
}
    66bc:	2001      	movs	r0, #1
    66be:	4240      	negs	r0, r0
    66c0:	4770      	bx	lr

000066c2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    66c2:	2380      	movs	r3, #128	; 0x80
    66c4:	019b      	lsls	r3, r3, #6
    66c6:	604b      	str	r3, [r1, #4]

	return 0;
}
    66c8:	2000      	movs	r0, #0
    66ca:	4770      	bx	lr

000066cc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    66cc:	2001      	movs	r0, #1
    66ce:	4770      	bx	lr

000066d0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    66d0:	2000      	movs	r0, #0
    66d2:	4770      	bx	lr

000066d4 <__udivsi3>:
    66d4:	2200      	movs	r2, #0
    66d6:	0843      	lsrs	r3, r0, #1
    66d8:	428b      	cmp	r3, r1
    66da:	d374      	bcc.n	67c6 <__udivsi3+0xf2>
    66dc:	0903      	lsrs	r3, r0, #4
    66de:	428b      	cmp	r3, r1
    66e0:	d35f      	bcc.n	67a2 <__udivsi3+0xce>
    66e2:	0a03      	lsrs	r3, r0, #8
    66e4:	428b      	cmp	r3, r1
    66e6:	d344      	bcc.n	6772 <__udivsi3+0x9e>
    66e8:	0b03      	lsrs	r3, r0, #12
    66ea:	428b      	cmp	r3, r1
    66ec:	d328      	bcc.n	6740 <__udivsi3+0x6c>
    66ee:	0c03      	lsrs	r3, r0, #16
    66f0:	428b      	cmp	r3, r1
    66f2:	d30d      	bcc.n	6710 <__udivsi3+0x3c>
    66f4:	22ff      	movs	r2, #255	; 0xff
    66f6:	0209      	lsls	r1, r1, #8
    66f8:	ba12      	rev	r2, r2
    66fa:	0c03      	lsrs	r3, r0, #16
    66fc:	428b      	cmp	r3, r1
    66fe:	d302      	bcc.n	6706 <__udivsi3+0x32>
    6700:	1212      	asrs	r2, r2, #8
    6702:	0209      	lsls	r1, r1, #8
    6704:	d065      	beq.n	67d2 <__udivsi3+0xfe>
    6706:	0b03      	lsrs	r3, r0, #12
    6708:	428b      	cmp	r3, r1
    670a:	d319      	bcc.n	6740 <__udivsi3+0x6c>
    670c:	e000      	b.n	6710 <__udivsi3+0x3c>
    670e:	0a09      	lsrs	r1, r1, #8
    6710:	0bc3      	lsrs	r3, r0, #15
    6712:	428b      	cmp	r3, r1
    6714:	d301      	bcc.n	671a <__udivsi3+0x46>
    6716:	03cb      	lsls	r3, r1, #15
    6718:	1ac0      	subs	r0, r0, r3
    671a:	4152      	adcs	r2, r2
    671c:	0b83      	lsrs	r3, r0, #14
    671e:	428b      	cmp	r3, r1
    6720:	d301      	bcc.n	6726 <__udivsi3+0x52>
    6722:	038b      	lsls	r3, r1, #14
    6724:	1ac0      	subs	r0, r0, r3
    6726:	4152      	adcs	r2, r2
    6728:	0b43      	lsrs	r3, r0, #13
    672a:	428b      	cmp	r3, r1
    672c:	d301      	bcc.n	6732 <__udivsi3+0x5e>
    672e:	034b      	lsls	r3, r1, #13
    6730:	1ac0      	subs	r0, r0, r3
    6732:	4152      	adcs	r2, r2
    6734:	0b03      	lsrs	r3, r0, #12
    6736:	428b      	cmp	r3, r1
    6738:	d301      	bcc.n	673e <__udivsi3+0x6a>
    673a:	030b      	lsls	r3, r1, #12
    673c:	1ac0      	subs	r0, r0, r3
    673e:	4152      	adcs	r2, r2
    6740:	0ac3      	lsrs	r3, r0, #11
    6742:	428b      	cmp	r3, r1
    6744:	d301      	bcc.n	674a <__udivsi3+0x76>
    6746:	02cb      	lsls	r3, r1, #11
    6748:	1ac0      	subs	r0, r0, r3
    674a:	4152      	adcs	r2, r2
    674c:	0a83      	lsrs	r3, r0, #10
    674e:	428b      	cmp	r3, r1
    6750:	d301      	bcc.n	6756 <__udivsi3+0x82>
    6752:	028b      	lsls	r3, r1, #10
    6754:	1ac0      	subs	r0, r0, r3
    6756:	4152      	adcs	r2, r2
    6758:	0a43      	lsrs	r3, r0, #9
    675a:	428b      	cmp	r3, r1
    675c:	d301      	bcc.n	6762 <__udivsi3+0x8e>
    675e:	024b      	lsls	r3, r1, #9
    6760:	1ac0      	subs	r0, r0, r3
    6762:	4152      	adcs	r2, r2
    6764:	0a03      	lsrs	r3, r0, #8
    6766:	428b      	cmp	r3, r1
    6768:	d301      	bcc.n	676e <__udivsi3+0x9a>
    676a:	020b      	lsls	r3, r1, #8
    676c:	1ac0      	subs	r0, r0, r3
    676e:	4152      	adcs	r2, r2
    6770:	d2cd      	bcs.n	670e <__udivsi3+0x3a>
    6772:	09c3      	lsrs	r3, r0, #7
    6774:	428b      	cmp	r3, r1
    6776:	d301      	bcc.n	677c <__udivsi3+0xa8>
    6778:	01cb      	lsls	r3, r1, #7
    677a:	1ac0      	subs	r0, r0, r3
    677c:	4152      	adcs	r2, r2
    677e:	0983      	lsrs	r3, r0, #6
    6780:	428b      	cmp	r3, r1
    6782:	d301      	bcc.n	6788 <__udivsi3+0xb4>
    6784:	018b      	lsls	r3, r1, #6
    6786:	1ac0      	subs	r0, r0, r3
    6788:	4152      	adcs	r2, r2
    678a:	0943      	lsrs	r3, r0, #5
    678c:	428b      	cmp	r3, r1
    678e:	d301      	bcc.n	6794 <__udivsi3+0xc0>
    6790:	014b      	lsls	r3, r1, #5
    6792:	1ac0      	subs	r0, r0, r3
    6794:	4152      	adcs	r2, r2
    6796:	0903      	lsrs	r3, r0, #4
    6798:	428b      	cmp	r3, r1
    679a:	d301      	bcc.n	67a0 <__udivsi3+0xcc>
    679c:	010b      	lsls	r3, r1, #4
    679e:	1ac0      	subs	r0, r0, r3
    67a0:	4152      	adcs	r2, r2
    67a2:	08c3      	lsrs	r3, r0, #3
    67a4:	428b      	cmp	r3, r1
    67a6:	d301      	bcc.n	67ac <__udivsi3+0xd8>
    67a8:	00cb      	lsls	r3, r1, #3
    67aa:	1ac0      	subs	r0, r0, r3
    67ac:	4152      	adcs	r2, r2
    67ae:	0883      	lsrs	r3, r0, #2
    67b0:	428b      	cmp	r3, r1
    67b2:	d301      	bcc.n	67b8 <__udivsi3+0xe4>
    67b4:	008b      	lsls	r3, r1, #2
    67b6:	1ac0      	subs	r0, r0, r3
    67b8:	4152      	adcs	r2, r2
    67ba:	0843      	lsrs	r3, r0, #1
    67bc:	428b      	cmp	r3, r1
    67be:	d301      	bcc.n	67c4 <__udivsi3+0xf0>
    67c0:	004b      	lsls	r3, r1, #1
    67c2:	1ac0      	subs	r0, r0, r3
    67c4:	4152      	adcs	r2, r2
    67c6:	1a41      	subs	r1, r0, r1
    67c8:	d200      	bcs.n	67cc <__udivsi3+0xf8>
    67ca:	4601      	mov	r1, r0
    67cc:	4152      	adcs	r2, r2
    67ce:	4610      	mov	r0, r2
    67d0:	4770      	bx	lr
    67d2:	e7ff      	b.n	67d4 <__udivsi3+0x100>
    67d4:	b501      	push	{r0, lr}
    67d6:	2000      	movs	r0, #0
    67d8:	f000 f8f0 	bl	69bc <__aeabi_idiv0>
    67dc:	bd02      	pop	{r1, pc}
    67de:	46c0      	nop			; (mov r8, r8)

000067e0 <__aeabi_uidivmod>:
    67e0:	2900      	cmp	r1, #0
    67e2:	d0f7      	beq.n	67d4 <__udivsi3+0x100>
    67e4:	e776      	b.n	66d4 <__udivsi3>
    67e6:	4770      	bx	lr

000067e8 <__divsi3>:
    67e8:	4603      	mov	r3, r0
    67ea:	430b      	orrs	r3, r1
    67ec:	d47f      	bmi.n	68ee <__divsi3+0x106>
    67ee:	2200      	movs	r2, #0
    67f0:	0843      	lsrs	r3, r0, #1
    67f2:	428b      	cmp	r3, r1
    67f4:	d374      	bcc.n	68e0 <__divsi3+0xf8>
    67f6:	0903      	lsrs	r3, r0, #4
    67f8:	428b      	cmp	r3, r1
    67fa:	d35f      	bcc.n	68bc <__divsi3+0xd4>
    67fc:	0a03      	lsrs	r3, r0, #8
    67fe:	428b      	cmp	r3, r1
    6800:	d344      	bcc.n	688c <__divsi3+0xa4>
    6802:	0b03      	lsrs	r3, r0, #12
    6804:	428b      	cmp	r3, r1
    6806:	d328      	bcc.n	685a <__divsi3+0x72>
    6808:	0c03      	lsrs	r3, r0, #16
    680a:	428b      	cmp	r3, r1
    680c:	d30d      	bcc.n	682a <__divsi3+0x42>
    680e:	22ff      	movs	r2, #255	; 0xff
    6810:	0209      	lsls	r1, r1, #8
    6812:	ba12      	rev	r2, r2
    6814:	0c03      	lsrs	r3, r0, #16
    6816:	428b      	cmp	r3, r1
    6818:	d302      	bcc.n	6820 <__divsi3+0x38>
    681a:	1212      	asrs	r2, r2, #8
    681c:	0209      	lsls	r1, r1, #8
    681e:	d065      	beq.n	68ec <__divsi3+0x104>
    6820:	0b03      	lsrs	r3, r0, #12
    6822:	428b      	cmp	r3, r1
    6824:	d319      	bcc.n	685a <__divsi3+0x72>
    6826:	e000      	b.n	682a <__divsi3+0x42>
    6828:	0a09      	lsrs	r1, r1, #8
    682a:	0bc3      	lsrs	r3, r0, #15
    682c:	428b      	cmp	r3, r1
    682e:	d301      	bcc.n	6834 <__divsi3+0x4c>
    6830:	03cb      	lsls	r3, r1, #15
    6832:	1ac0      	subs	r0, r0, r3
    6834:	4152      	adcs	r2, r2
    6836:	0b83      	lsrs	r3, r0, #14
    6838:	428b      	cmp	r3, r1
    683a:	d301      	bcc.n	6840 <__divsi3+0x58>
    683c:	038b      	lsls	r3, r1, #14
    683e:	1ac0      	subs	r0, r0, r3
    6840:	4152      	adcs	r2, r2
    6842:	0b43      	lsrs	r3, r0, #13
    6844:	428b      	cmp	r3, r1
    6846:	d301      	bcc.n	684c <__divsi3+0x64>
    6848:	034b      	lsls	r3, r1, #13
    684a:	1ac0      	subs	r0, r0, r3
    684c:	4152      	adcs	r2, r2
    684e:	0b03      	lsrs	r3, r0, #12
    6850:	428b      	cmp	r3, r1
    6852:	d301      	bcc.n	6858 <__divsi3+0x70>
    6854:	030b      	lsls	r3, r1, #12
    6856:	1ac0      	subs	r0, r0, r3
    6858:	4152      	adcs	r2, r2
    685a:	0ac3      	lsrs	r3, r0, #11
    685c:	428b      	cmp	r3, r1
    685e:	d301      	bcc.n	6864 <__divsi3+0x7c>
    6860:	02cb      	lsls	r3, r1, #11
    6862:	1ac0      	subs	r0, r0, r3
    6864:	4152      	adcs	r2, r2
    6866:	0a83      	lsrs	r3, r0, #10
    6868:	428b      	cmp	r3, r1
    686a:	d301      	bcc.n	6870 <__divsi3+0x88>
    686c:	028b      	lsls	r3, r1, #10
    686e:	1ac0      	subs	r0, r0, r3
    6870:	4152      	adcs	r2, r2
    6872:	0a43      	lsrs	r3, r0, #9
    6874:	428b      	cmp	r3, r1
    6876:	d301      	bcc.n	687c <__divsi3+0x94>
    6878:	024b      	lsls	r3, r1, #9
    687a:	1ac0      	subs	r0, r0, r3
    687c:	4152      	adcs	r2, r2
    687e:	0a03      	lsrs	r3, r0, #8
    6880:	428b      	cmp	r3, r1
    6882:	d301      	bcc.n	6888 <__divsi3+0xa0>
    6884:	020b      	lsls	r3, r1, #8
    6886:	1ac0      	subs	r0, r0, r3
    6888:	4152      	adcs	r2, r2
    688a:	d2cd      	bcs.n	6828 <__divsi3+0x40>
    688c:	09c3      	lsrs	r3, r0, #7
    688e:	428b      	cmp	r3, r1
    6890:	d301      	bcc.n	6896 <__divsi3+0xae>
    6892:	01cb      	lsls	r3, r1, #7
    6894:	1ac0      	subs	r0, r0, r3
    6896:	4152      	adcs	r2, r2
    6898:	0983      	lsrs	r3, r0, #6
    689a:	428b      	cmp	r3, r1
    689c:	d301      	bcc.n	68a2 <__divsi3+0xba>
    689e:	018b      	lsls	r3, r1, #6
    68a0:	1ac0      	subs	r0, r0, r3
    68a2:	4152      	adcs	r2, r2
    68a4:	0943      	lsrs	r3, r0, #5
    68a6:	428b      	cmp	r3, r1
    68a8:	d301      	bcc.n	68ae <__divsi3+0xc6>
    68aa:	014b      	lsls	r3, r1, #5
    68ac:	1ac0      	subs	r0, r0, r3
    68ae:	4152      	adcs	r2, r2
    68b0:	0903      	lsrs	r3, r0, #4
    68b2:	428b      	cmp	r3, r1
    68b4:	d301      	bcc.n	68ba <__divsi3+0xd2>
    68b6:	010b      	lsls	r3, r1, #4
    68b8:	1ac0      	subs	r0, r0, r3
    68ba:	4152      	adcs	r2, r2
    68bc:	08c3      	lsrs	r3, r0, #3
    68be:	428b      	cmp	r3, r1
    68c0:	d301      	bcc.n	68c6 <__divsi3+0xde>
    68c2:	00cb      	lsls	r3, r1, #3
    68c4:	1ac0      	subs	r0, r0, r3
    68c6:	4152      	adcs	r2, r2
    68c8:	0883      	lsrs	r3, r0, #2
    68ca:	428b      	cmp	r3, r1
    68cc:	d301      	bcc.n	68d2 <__divsi3+0xea>
    68ce:	008b      	lsls	r3, r1, #2
    68d0:	1ac0      	subs	r0, r0, r3
    68d2:	4152      	adcs	r2, r2
    68d4:	0843      	lsrs	r3, r0, #1
    68d6:	428b      	cmp	r3, r1
    68d8:	d301      	bcc.n	68de <__divsi3+0xf6>
    68da:	004b      	lsls	r3, r1, #1
    68dc:	1ac0      	subs	r0, r0, r3
    68de:	4152      	adcs	r2, r2
    68e0:	1a41      	subs	r1, r0, r1
    68e2:	d200      	bcs.n	68e6 <__divsi3+0xfe>
    68e4:	4601      	mov	r1, r0
    68e6:	4152      	adcs	r2, r2
    68e8:	4610      	mov	r0, r2
    68ea:	4770      	bx	lr
    68ec:	e05d      	b.n	69aa <__divsi3+0x1c2>
    68ee:	0fca      	lsrs	r2, r1, #31
    68f0:	d000      	beq.n	68f4 <__divsi3+0x10c>
    68f2:	4249      	negs	r1, r1
    68f4:	1003      	asrs	r3, r0, #32
    68f6:	d300      	bcc.n	68fa <__divsi3+0x112>
    68f8:	4240      	negs	r0, r0
    68fa:	4053      	eors	r3, r2
    68fc:	2200      	movs	r2, #0
    68fe:	469c      	mov	ip, r3
    6900:	0903      	lsrs	r3, r0, #4
    6902:	428b      	cmp	r3, r1
    6904:	d32d      	bcc.n	6962 <__divsi3+0x17a>
    6906:	0a03      	lsrs	r3, r0, #8
    6908:	428b      	cmp	r3, r1
    690a:	d312      	bcc.n	6932 <__divsi3+0x14a>
    690c:	22fc      	movs	r2, #252	; 0xfc
    690e:	0189      	lsls	r1, r1, #6
    6910:	ba12      	rev	r2, r2
    6912:	0a03      	lsrs	r3, r0, #8
    6914:	428b      	cmp	r3, r1
    6916:	d30c      	bcc.n	6932 <__divsi3+0x14a>
    6918:	0189      	lsls	r1, r1, #6
    691a:	1192      	asrs	r2, r2, #6
    691c:	428b      	cmp	r3, r1
    691e:	d308      	bcc.n	6932 <__divsi3+0x14a>
    6920:	0189      	lsls	r1, r1, #6
    6922:	1192      	asrs	r2, r2, #6
    6924:	428b      	cmp	r3, r1
    6926:	d304      	bcc.n	6932 <__divsi3+0x14a>
    6928:	0189      	lsls	r1, r1, #6
    692a:	d03a      	beq.n	69a2 <__divsi3+0x1ba>
    692c:	1192      	asrs	r2, r2, #6
    692e:	e000      	b.n	6932 <__divsi3+0x14a>
    6930:	0989      	lsrs	r1, r1, #6
    6932:	09c3      	lsrs	r3, r0, #7
    6934:	428b      	cmp	r3, r1
    6936:	d301      	bcc.n	693c <__divsi3+0x154>
    6938:	01cb      	lsls	r3, r1, #7
    693a:	1ac0      	subs	r0, r0, r3
    693c:	4152      	adcs	r2, r2
    693e:	0983      	lsrs	r3, r0, #6
    6940:	428b      	cmp	r3, r1
    6942:	d301      	bcc.n	6948 <__divsi3+0x160>
    6944:	018b      	lsls	r3, r1, #6
    6946:	1ac0      	subs	r0, r0, r3
    6948:	4152      	adcs	r2, r2
    694a:	0943      	lsrs	r3, r0, #5
    694c:	428b      	cmp	r3, r1
    694e:	d301      	bcc.n	6954 <__divsi3+0x16c>
    6950:	014b      	lsls	r3, r1, #5
    6952:	1ac0      	subs	r0, r0, r3
    6954:	4152      	adcs	r2, r2
    6956:	0903      	lsrs	r3, r0, #4
    6958:	428b      	cmp	r3, r1
    695a:	d301      	bcc.n	6960 <__divsi3+0x178>
    695c:	010b      	lsls	r3, r1, #4
    695e:	1ac0      	subs	r0, r0, r3
    6960:	4152      	adcs	r2, r2
    6962:	08c3      	lsrs	r3, r0, #3
    6964:	428b      	cmp	r3, r1
    6966:	d301      	bcc.n	696c <__divsi3+0x184>
    6968:	00cb      	lsls	r3, r1, #3
    696a:	1ac0      	subs	r0, r0, r3
    696c:	4152      	adcs	r2, r2
    696e:	0883      	lsrs	r3, r0, #2
    6970:	428b      	cmp	r3, r1
    6972:	d301      	bcc.n	6978 <__divsi3+0x190>
    6974:	008b      	lsls	r3, r1, #2
    6976:	1ac0      	subs	r0, r0, r3
    6978:	4152      	adcs	r2, r2
    697a:	d2d9      	bcs.n	6930 <__divsi3+0x148>
    697c:	0843      	lsrs	r3, r0, #1
    697e:	428b      	cmp	r3, r1
    6980:	d301      	bcc.n	6986 <__divsi3+0x19e>
    6982:	004b      	lsls	r3, r1, #1
    6984:	1ac0      	subs	r0, r0, r3
    6986:	4152      	adcs	r2, r2
    6988:	1a41      	subs	r1, r0, r1
    698a:	d200      	bcs.n	698e <__divsi3+0x1a6>
    698c:	4601      	mov	r1, r0
    698e:	4663      	mov	r3, ip
    6990:	4152      	adcs	r2, r2
    6992:	105b      	asrs	r3, r3, #1
    6994:	4610      	mov	r0, r2
    6996:	d301      	bcc.n	699c <__divsi3+0x1b4>
    6998:	4240      	negs	r0, r0
    699a:	2b00      	cmp	r3, #0
    699c:	d500      	bpl.n	69a0 <__divsi3+0x1b8>
    699e:	4249      	negs	r1, r1
    69a0:	4770      	bx	lr
    69a2:	4663      	mov	r3, ip
    69a4:	105b      	asrs	r3, r3, #1
    69a6:	d300      	bcc.n	69aa <__divsi3+0x1c2>
    69a8:	4240      	negs	r0, r0
    69aa:	b501      	push	{r0, lr}
    69ac:	2000      	movs	r0, #0
    69ae:	f000 f805 	bl	69bc <__aeabi_idiv0>
    69b2:	bd02      	pop	{r1, pc}

000069b4 <__aeabi_idivmod>:
    69b4:	2900      	cmp	r1, #0
    69b6:	d0f8      	beq.n	69aa <__divsi3+0x1c2>
    69b8:	e716      	b.n	67e8 <__divsi3>
    69ba:	4770      	bx	lr

000069bc <__aeabi_idiv0>:
    69bc:	4770      	bx	lr
    69be:	46c0      	nop			; (mov r8, r8)

000069c0 <__clzsi2>:
    69c0:	211c      	movs	r1, #28
    69c2:	2301      	movs	r3, #1
    69c4:	041b      	lsls	r3, r3, #16
    69c6:	4298      	cmp	r0, r3
    69c8:	d301      	bcc.n	69ce <__clzsi2+0xe>
    69ca:	0c00      	lsrs	r0, r0, #16
    69cc:	3910      	subs	r1, #16
    69ce:	0a1b      	lsrs	r3, r3, #8
    69d0:	4298      	cmp	r0, r3
    69d2:	d301      	bcc.n	69d8 <__clzsi2+0x18>
    69d4:	0a00      	lsrs	r0, r0, #8
    69d6:	3908      	subs	r1, #8
    69d8:	091b      	lsrs	r3, r3, #4
    69da:	4298      	cmp	r0, r3
    69dc:	d301      	bcc.n	69e2 <__clzsi2+0x22>
    69de:	0900      	lsrs	r0, r0, #4
    69e0:	3904      	subs	r1, #4
    69e2:	a202      	add	r2, pc, #8	; (adr r2, 69ec <__clzsi2+0x2c>)
    69e4:	5c10      	ldrb	r0, [r2, r0]
    69e6:	1840      	adds	r0, r0, r1
    69e8:	4770      	bx	lr
    69ea:	46c0      	nop			; (mov r8, r8)
    69ec:	02020304 	.word	0x02020304
    69f0:	01010101 	.word	0x01010101
	...

000069fc <__ctzsi2>:
    69fc:	4241      	negs	r1, r0
    69fe:	4008      	ands	r0, r1
    6a00:	211c      	movs	r1, #28
    6a02:	2301      	movs	r3, #1
    6a04:	041b      	lsls	r3, r3, #16
    6a06:	4298      	cmp	r0, r3
    6a08:	d301      	bcc.n	6a0e <__ctzsi2+0x12>
    6a0a:	0c00      	lsrs	r0, r0, #16
    6a0c:	3910      	subs	r1, #16
    6a0e:	0a1b      	lsrs	r3, r3, #8
    6a10:	4298      	cmp	r0, r3
    6a12:	d301      	bcc.n	6a18 <__ctzsi2+0x1c>
    6a14:	0a00      	lsrs	r0, r0, #8
    6a16:	3908      	subs	r1, #8
    6a18:	091b      	lsrs	r3, r3, #4
    6a1a:	4298      	cmp	r0, r3
    6a1c:	d301      	bcc.n	6a22 <__ctzsi2+0x26>
    6a1e:	0900      	lsrs	r0, r0, #4
    6a20:	3904      	subs	r1, #4
    6a22:	a202      	add	r2, pc, #8	; (adr r2, 6a2c <__ctzsi2+0x30>)
    6a24:	5c10      	ldrb	r0, [r2, r0]
    6a26:	1a40      	subs	r0, r0, r1
    6a28:	4770      	bx	lr
    6a2a:	46c0      	nop			; (mov r8, r8)
    6a2c:	1d1d1c1b 	.word	0x1d1d1c1b
    6a30:	1e1e1e1e 	.word	0x1e1e1e1e
    6a34:	1f1f1f1f 	.word	0x1f1f1f1f
    6a38:	1f1f1f1f 	.word	0x1f1f1f1f

00006a3c <__aeabi_uldivmod>:
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d111      	bne.n	6a64 <__aeabi_uldivmod+0x28>
    6a40:	2a00      	cmp	r2, #0
    6a42:	d10f      	bne.n	6a64 <__aeabi_uldivmod+0x28>
    6a44:	2900      	cmp	r1, #0
    6a46:	d100      	bne.n	6a4a <__aeabi_uldivmod+0xe>
    6a48:	2800      	cmp	r0, #0
    6a4a:	d002      	beq.n	6a52 <__aeabi_uldivmod+0x16>
    6a4c:	2100      	movs	r1, #0
    6a4e:	43c9      	mvns	r1, r1
    6a50:	1c08      	adds	r0, r1, #0
    6a52:	b407      	push	{r0, r1, r2}
    6a54:	4802      	ldr	r0, [pc, #8]	; (6a60 <__aeabi_uldivmod+0x24>)
    6a56:	a102      	add	r1, pc, #8	; (adr r1, 6a60 <__aeabi_uldivmod+0x24>)
    6a58:	1840      	adds	r0, r0, r1
    6a5a:	9002      	str	r0, [sp, #8]
    6a5c:	bd03      	pop	{r0, r1, pc}
    6a5e:	46c0      	nop			; (mov r8, r8)
    6a60:	ffffff5d 	.word	0xffffff5d
    6a64:	b403      	push	{r0, r1}
    6a66:	4668      	mov	r0, sp
    6a68:	b501      	push	{r0, lr}
    6a6a:	9802      	ldr	r0, [sp, #8]
    6a6c:	f000 f830 	bl	6ad0 <__udivmoddi4>
    6a70:	9b01      	ldr	r3, [sp, #4]
    6a72:	469e      	mov	lr, r3
    6a74:	b002      	add	sp, #8
    6a76:	bc0c      	pop	{r2, r3}
    6a78:	4770      	bx	lr
    6a7a:	46c0      	nop			; (mov r8, r8)

00006a7c <__aeabi_lmul>:
    6a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a7e:	46ce      	mov	lr, r9
    6a80:	4647      	mov	r7, r8
    6a82:	0415      	lsls	r5, r2, #16
    6a84:	0c2d      	lsrs	r5, r5, #16
    6a86:	002e      	movs	r6, r5
    6a88:	b580      	push	{r7, lr}
    6a8a:	0407      	lsls	r7, r0, #16
    6a8c:	0c14      	lsrs	r4, r2, #16
    6a8e:	0c3f      	lsrs	r7, r7, #16
    6a90:	4699      	mov	r9, r3
    6a92:	0c03      	lsrs	r3, r0, #16
    6a94:	437e      	muls	r6, r7
    6a96:	435d      	muls	r5, r3
    6a98:	4367      	muls	r7, r4
    6a9a:	4363      	muls	r3, r4
    6a9c:	197f      	adds	r7, r7, r5
    6a9e:	0c34      	lsrs	r4, r6, #16
    6aa0:	19e4      	adds	r4, r4, r7
    6aa2:	469c      	mov	ip, r3
    6aa4:	42a5      	cmp	r5, r4
    6aa6:	d903      	bls.n	6ab0 <__aeabi_lmul+0x34>
    6aa8:	2380      	movs	r3, #128	; 0x80
    6aaa:	025b      	lsls	r3, r3, #9
    6aac:	4698      	mov	r8, r3
    6aae:	44c4      	add	ip, r8
    6ab0:	464b      	mov	r3, r9
    6ab2:	4351      	muls	r1, r2
    6ab4:	4343      	muls	r3, r0
    6ab6:	0436      	lsls	r6, r6, #16
    6ab8:	0c36      	lsrs	r6, r6, #16
    6aba:	0c25      	lsrs	r5, r4, #16
    6abc:	0424      	lsls	r4, r4, #16
    6abe:	4465      	add	r5, ip
    6ac0:	19a4      	adds	r4, r4, r6
    6ac2:	1859      	adds	r1, r3, r1
    6ac4:	1949      	adds	r1, r1, r5
    6ac6:	0020      	movs	r0, r4
    6ac8:	bc0c      	pop	{r2, r3}
    6aca:	4690      	mov	r8, r2
    6acc:	4699      	mov	r9, r3
    6ace:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006ad0 <__udivmoddi4>:
    6ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ad2:	4657      	mov	r7, sl
    6ad4:	464e      	mov	r6, r9
    6ad6:	4645      	mov	r5, r8
    6ad8:	46de      	mov	lr, fp
    6ada:	b5e0      	push	{r5, r6, r7, lr}
    6adc:	0004      	movs	r4, r0
    6ade:	b083      	sub	sp, #12
    6ae0:	000d      	movs	r5, r1
    6ae2:	4692      	mov	sl, r2
    6ae4:	4699      	mov	r9, r3
    6ae6:	428b      	cmp	r3, r1
    6ae8:	d82f      	bhi.n	6b4a <__udivmoddi4+0x7a>
    6aea:	d02c      	beq.n	6b46 <__udivmoddi4+0x76>
    6aec:	4649      	mov	r1, r9
    6aee:	4650      	mov	r0, sl
    6af0:	f000 f8ae 	bl	6c50 <__clzdi2>
    6af4:	0029      	movs	r1, r5
    6af6:	0006      	movs	r6, r0
    6af8:	0020      	movs	r0, r4
    6afa:	f000 f8a9 	bl	6c50 <__clzdi2>
    6afe:	1a33      	subs	r3, r6, r0
    6b00:	4698      	mov	r8, r3
    6b02:	3b20      	subs	r3, #32
    6b04:	469b      	mov	fp, r3
    6b06:	d500      	bpl.n	6b0a <__udivmoddi4+0x3a>
    6b08:	e074      	b.n	6bf4 <__udivmoddi4+0x124>
    6b0a:	4653      	mov	r3, sl
    6b0c:	465a      	mov	r2, fp
    6b0e:	4093      	lsls	r3, r2
    6b10:	001f      	movs	r7, r3
    6b12:	4653      	mov	r3, sl
    6b14:	4642      	mov	r2, r8
    6b16:	4093      	lsls	r3, r2
    6b18:	001e      	movs	r6, r3
    6b1a:	42af      	cmp	r7, r5
    6b1c:	d829      	bhi.n	6b72 <__udivmoddi4+0xa2>
    6b1e:	d026      	beq.n	6b6e <__udivmoddi4+0x9e>
    6b20:	465b      	mov	r3, fp
    6b22:	1ba4      	subs	r4, r4, r6
    6b24:	41bd      	sbcs	r5, r7
    6b26:	2b00      	cmp	r3, #0
    6b28:	da00      	bge.n	6b2c <__udivmoddi4+0x5c>
    6b2a:	e079      	b.n	6c20 <__udivmoddi4+0x150>
    6b2c:	2200      	movs	r2, #0
    6b2e:	2300      	movs	r3, #0
    6b30:	9200      	str	r2, [sp, #0]
    6b32:	9301      	str	r3, [sp, #4]
    6b34:	2301      	movs	r3, #1
    6b36:	465a      	mov	r2, fp
    6b38:	4093      	lsls	r3, r2
    6b3a:	9301      	str	r3, [sp, #4]
    6b3c:	2301      	movs	r3, #1
    6b3e:	4642      	mov	r2, r8
    6b40:	4093      	lsls	r3, r2
    6b42:	9300      	str	r3, [sp, #0]
    6b44:	e019      	b.n	6b7a <__udivmoddi4+0xaa>
    6b46:	4282      	cmp	r2, r0
    6b48:	d9d0      	bls.n	6aec <__udivmoddi4+0x1c>
    6b4a:	2200      	movs	r2, #0
    6b4c:	2300      	movs	r3, #0
    6b4e:	9200      	str	r2, [sp, #0]
    6b50:	9301      	str	r3, [sp, #4]
    6b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6b54:	2b00      	cmp	r3, #0
    6b56:	d001      	beq.n	6b5c <__udivmoddi4+0x8c>
    6b58:	601c      	str	r4, [r3, #0]
    6b5a:	605d      	str	r5, [r3, #4]
    6b5c:	9800      	ldr	r0, [sp, #0]
    6b5e:	9901      	ldr	r1, [sp, #4]
    6b60:	b003      	add	sp, #12
    6b62:	bc3c      	pop	{r2, r3, r4, r5}
    6b64:	4690      	mov	r8, r2
    6b66:	4699      	mov	r9, r3
    6b68:	46a2      	mov	sl, r4
    6b6a:	46ab      	mov	fp, r5
    6b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b6e:	42a3      	cmp	r3, r4
    6b70:	d9d6      	bls.n	6b20 <__udivmoddi4+0x50>
    6b72:	2200      	movs	r2, #0
    6b74:	2300      	movs	r3, #0
    6b76:	9200      	str	r2, [sp, #0]
    6b78:	9301      	str	r3, [sp, #4]
    6b7a:	4643      	mov	r3, r8
    6b7c:	2b00      	cmp	r3, #0
    6b7e:	d0e8      	beq.n	6b52 <__udivmoddi4+0x82>
    6b80:	07fb      	lsls	r3, r7, #31
    6b82:	0872      	lsrs	r2, r6, #1
    6b84:	431a      	orrs	r2, r3
    6b86:	4646      	mov	r6, r8
    6b88:	087b      	lsrs	r3, r7, #1
    6b8a:	e00e      	b.n	6baa <__udivmoddi4+0xda>
    6b8c:	42ab      	cmp	r3, r5
    6b8e:	d101      	bne.n	6b94 <__udivmoddi4+0xc4>
    6b90:	42a2      	cmp	r2, r4
    6b92:	d80c      	bhi.n	6bae <__udivmoddi4+0xde>
    6b94:	1aa4      	subs	r4, r4, r2
    6b96:	419d      	sbcs	r5, r3
    6b98:	2001      	movs	r0, #1
    6b9a:	1924      	adds	r4, r4, r4
    6b9c:	416d      	adcs	r5, r5
    6b9e:	2100      	movs	r1, #0
    6ba0:	3e01      	subs	r6, #1
    6ba2:	1824      	adds	r4, r4, r0
    6ba4:	414d      	adcs	r5, r1
    6ba6:	2e00      	cmp	r6, #0
    6ba8:	d006      	beq.n	6bb8 <__udivmoddi4+0xe8>
    6baa:	42ab      	cmp	r3, r5
    6bac:	d9ee      	bls.n	6b8c <__udivmoddi4+0xbc>
    6bae:	3e01      	subs	r6, #1
    6bb0:	1924      	adds	r4, r4, r4
    6bb2:	416d      	adcs	r5, r5
    6bb4:	2e00      	cmp	r6, #0
    6bb6:	d1f8      	bne.n	6baa <__udivmoddi4+0xda>
    6bb8:	465b      	mov	r3, fp
    6bba:	9800      	ldr	r0, [sp, #0]
    6bbc:	9901      	ldr	r1, [sp, #4]
    6bbe:	1900      	adds	r0, r0, r4
    6bc0:	4169      	adcs	r1, r5
    6bc2:	2b00      	cmp	r3, #0
    6bc4:	db22      	blt.n	6c0c <__udivmoddi4+0x13c>
    6bc6:	002b      	movs	r3, r5
    6bc8:	465a      	mov	r2, fp
    6bca:	40d3      	lsrs	r3, r2
    6bcc:	002a      	movs	r2, r5
    6bce:	4644      	mov	r4, r8
    6bd0:	40e2      	lsrs	r2, r4
    6bd2:	001c      	movs	r4, r3
    6bd4:	465b      	mov	r3, fp
    6bd6:	0015      	movs	r5, r2
    6bd8:	2b00      	cmp	r3, #0
    6bda:	db2c      	blt.n	6c36 <__udivmoddi4+0x166>
    6bdc:	0026      	movs	r6, r4
    6bde:	409e      	lsls	r6, r3
    6be0:	0033      	movs	r3, r6
    6be2:	0026      	movs	r6, r4
    6be4:	4647      	mov	r7, r8
    6be6:	40be      	lsls	r6, r7
    6be8:	0032      	movs	r2, r6
    6bea:	1a80      	subs	r0, r0, r2
    6bec:	4199      	sbcs	r1, r3
    6bee:	9000      	str	r0, [sp, #0]
    6bf0:	9101      	str	r1, [sp, #4]
    6bf2:	e7ae      	b.n	6b52 <__udivmoddi4+0x82>
    6bf4:	4642      	mov	r2, r8
    6bf6:	2320      	movs	r3, #32
    6bf8:	1a9b      	subs	r3, r3, r2
    6bfa:	4652      	mov	r2, sl
    6bfc:	40da      	lsrs	r2, r3
    6bfe:	4641      	mov	r1, r8
    6c00:	0013      	movs	r3, r2
    6c02:	464a      	mov	r2, r9
    6c04:	408a      	lsls	r2, r1
    6c06:	0017      	movs	r7, r2
    6c08:	431f      	orrs	r7, r3
    6c0a:	e782      	b.n	6b12 <__udivmoddi4+0x42>
    6c0c:	4642      	mov	r2, r8
    6c0e:	2320      	movs	r3, #32
    6c10:	1a9b      	subs	r3, r3, r2
    6c12:	002a      	movs	r2, r5
    6c14:	4646      	mov	r6, r8
    6c16:	409a      	lsls	r2, r3
    6c18:	0023      	movs	r3, r4
    6c1a:	40f3      	lsrs	r3, r6
    6c1c:	4313      	orrs	r3, r2
    6c1e:	e7d5      	b.n	6bcc <__udivmoddi4+0xfc>
    6c20:	4642      	mov	r2, r8
    6c22:	2320      	movs	r3, #32
    6c24:	2100      	movs	r1, #0
    6c26:	1a9b      	subs	r3, r3, r2
    6c28:	2200      	movs	r2, #0
    6c2a:	9100      	str	r1, [sp, #0]
    6c2c:	9201      	str	r2, [sp, #4]
    6c2e:	2201      	movs	r2, #1
    6c30:	40da      	lsrs	r2, r3
    6c32:	9201      	str	r2, [sp, #4]
    6c34:	e782      	b.n	6b3c <__udivmoddi4+0x6c>
    6c36:	4642      	mov	r2, r8
    6c38:	2320      	movs	r3, #32
    6c3a:	0026      	movs	r6, r4
    6c3c:	1a9b      	subs	r3, r3, r2
    6c3e:	40de      	lsrs	r6, r3
    6c40:	002f      	movs	r7, r5
    6c42:	46b4      	mov	ip, r6
    6c44:	4097      	lsls	r7, r2
    6c46:	4666      	mov	r6, ip
    6c48:	003b      	movs	r3, r7
    6c4a:	4333      	orrs	r3, r6
    6c4c:	e7c9      	b.n	6be2 <__udivmoddi4+0x112>
    6c4e:	46c0      	nop			; (mov r8, r8)

00006c50 <__clzdi2>:
    6c50:	b510      	push	{r4, lr}
    6c52:	2900      	cmp	r1, #0
    6c54:	d103      	bne.n	6c5e <__clzdi2+0xe>
    6c56:	f7ff feb3 	bl	69c0 <__clzsi2>
    6c5a:	3020      	adds	r0, #32
    6c5c:	e002      	b.n	6c64 <__clzdi2+0x14>
    6c5e:	1c08      	adds	r0, r1, #0
    6c60:	f7ff feae 	bl	69c0 <__clzsi2>
    6c64:	bd10      	pop	{r4, pc}
    6c66:	46c0      	nop			; (mov r8, r8)

00006c68 <__libc_init_array>:
    6c68:	b570      	push	{r4, r5, r6, lr}
    6c6a:	2600      	movs	r6, #0
    6c6c:	4d0c      	ldr	r5, [pc, #48]	; (6ca0 <__libc_init_array+0x38>)
    6c6e:	4c0d      	ldr	r4, [pc, #52]	; (6ca4 <__libc_init_array+0x3c>)
    6c70:	1b64      	subs	r4, r4, r5
    6c72:	10a4      	asrs	r4, r4, #2
    6c74:	42a6      	cmp	r6, r4
    6c76:	d109      	bne.n	6c8c <__libc_init_array+0x24>
    6c78:	2600      	movs	r6, #0
    6c7a:	f001 f9dd 	bl	8038 <_init>
    6c7e:	4d0a      	ldr	r5, [pc, #40]	; (6ca8 <__libc_init_array+0x40>)
    6c80:	4c0a      	ldr	r4, [pc, #40]	; (6cac <__libc_init_array+0x44>)
    6c82:	1b64      	subs	r4, r4, r5
    6c84:	10a4      	asrs	r4, r4, #2
    6c86:	42a6      	cmp	r6, r4
    6c88:	d105      	bne.n	6c96 <__libc_init_array+0x2e>
    6c8a:	bd70      	pop	{r4, r5, r6, pc}
    6c8c:	00b3      	lsls	r3, r6, #2
    6c8e:	58eb      	ldr	r3, [r5, r3]
    6c90:	4798      	blx	r3
    6c92:	3601      	adds	r6, #1
    6c94:	e7ee      	b.n	6c74 <__libc_init_array+0xc>
    6c96:	00b3      	lsls	r3, r6, #2
    6c98:	58eb      	ldr	r3, [r5, r3]
    6c9a:	4798      	blx	r3
    6c9c:	3601      	adds	r6, #1
    6c9e:	e7f2      	b.n	6c86 <__libc_init_array+0x1e>
    6ca0:	00008044 	.word	0x00008044
    6ca4:	00008044 	.word	0x00008044
    6ca8:	00008044 	.word	0x00008044
    6cac:	00008048 	.word	0x00008048

00006cb0 <memcpy>:
    6cb0:	2300      	movs	r3, #0
    6cb2:	b510      	push	{r4, lr}
    6cb4:	429a      	cmp	r2, r3
    6cb6:	d100      	bne.n	6cba <memcpy+0xa>
    6cb8:	bd10      	pop	{r4, pc}
    6cba:	5ccc      	ldrb	r4, [r1, r3]
    6cbc:	54c4      	strb	r4, [r0, r3]
    6cbe:	3301      	adds	r3, #1
    6cc0:	e7f8      	b.n	6cb4 <memcpy+0x4>

00006cc2 <memset>:
    6cc2:	0003      	movs	r3, r0
    6cc4:	1882      	adds	r2, r0, r2
    6cc6:	4293      	cmp	r3, r2
    6cc8:	d100      	bne.n	6ccc <memset+0xa>
    6cca:	4770      	bx	lr
    6ccc:	7019      	strb	r1, [r3, #0]
    6cce:	3301      	adds	r3, #1
    6cd0:	e7f9      	b.n	6cc6 <memset+0x4>
	...

00006cd4 <iprintf>:
    6cd4:	b40f      	push	{r0, r1, r2, r3}
    6cd6:	4b0b      	ldr	r3, [pc, #44]	; (6d04 <iprintf+0x30>)
    6cd8:	b513      	push	{r0, r1, r4, lr}
    6cda:	681c      	ldr	r4, [r3, #0]
    6cdc:	2c00      	cmp	r4, #0
    6cde:	d005      	beq.n	6cec <iprintf+0x18>
    6ce0:	69a3      	ldr	r3, [r4, #24]
    6ce2:	2b00      	cmp	r3, #0
    6ce4:	d102      	bne.n	6cec <iprintf+0x18>
    6ce6:	0020      	movs	r0, r4
    6ce8:	f000 f9bc 	bl	7064 <__sinit>
    6cec:	ab05      	add	r3, sp, #20
    6cee:	9a04      	ldr	r2, [sp, #16]
    6cf0:	68a1      	ldr	r1, [r4, #8]
    6cf2:	0020      	movs	r0, r4
    6cf4:	9301      	str	r3, [sp, #4]
    6cf6:	f000 fb91 	bl	741c <_vfiprintf_r>
    6cfa:	bc16      	pop	{r1, r2, r4}
    6cfc:	bc08      	pop	{r3}
    6cfe:	b004      	add	sp, #16
    6d00:	4718      	bx	r3
    6d02:	46c0      	nop			; (mov r8, r8)
    6d04:	200000fc 	.word	0x200000fc

00006d08 <setbuf>:
    6d08:	424a      	negs	r2, r1
    6d0a:	414a      	adcs	r2, r1
    6d0c:	2380      	movs	r3, #128	; 0x80
    6d0e:	b510      	push	{r4, lr}
    6d10:	0052      	lsls	r2, r2, #1
    6d12:	00db      	lsls	r3, r3, #3
    6d14:	f000 f802 	bl	6d1c <setvbuf>
    6d18:	bd10      	pop	{r4, pc}
	...

00006d1c <setvbuf>:
    6d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d1e:	001d      	movs	r5, r3
    6d20:	4b4f      	ldr	r3, [pc, #316]	; (6e60 <setvbuf+0x144>)
    6d22:	b085      	sub	sp, #20
    6d24:	681e      	ldr	r6, [r3, #0]
    6d26:	0004      	movs	r4, r0
    6d28:	000f      	movs	r7, r1
    6d2a:	9200      	str	r2, [sp, #0]
    6d2c:	2e00      	cmp	r6, #0
    6d2e:	d005      	beq.n	6d3c <setvbuf+0x20>
    6d30:	69b3      	ldr	r3, [r6, #24]
    6d32:	2b00      	cmp	r3, #0
    6d34:	d102      	bne.n	6d3c <setvbuf+0x20>
    6d36:	0030      	movs	r0, r6
    6d38:	f000 f994 	bl	7064 <__sinit>
    6d3c:	4b49      	ldr	r3, [pc, #292]	; (6e64 <setvbuf+0x148>)
    6d3e:	429c      	cmp	r4, r3
    6d40:	d150      	bne.n	6de4 <setvbuf+0xc8>
    6d42:	6874      	ldr	r4, [r6, #4]
    6d44:	9b00      	ldr	r3, [sp, #0]
    6d46:	2b02      	cmp	r3, #2
    6d48:	d005      	beq.n	6d56 <setvbuf+0x3a>
    6d4a:	2b01      	cmp	r3, #1
    6d4c:	d900      	bls.n	6d50 <setvbuf+0x34>
    6d4e:	e084      	b.n	6e5a <setvbuf+0x13e>
    6d50:	2d00      	cmp	r5, #0
    6d52:	da00      	bge.n	6d56 <setvbuf+0x3a>
    6d54:	e081      	b.n	6e5a <setvbuf+0x13e>
    6d56:	0021      	movs	r1, r4
    6d58:	0030      	movs	r0, r6
    6d5a:	f000 f915 	bl	6f88 <_fflush_r>
    6d5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6d60:	2900      	cmp	r1, #0
    6d62:	d008      	beq.n	6d76 <setvbuf+0x5a>
    6d64:	0023      	movs	r3, r4
    6d66:	3344      	adds	r3, #68	; 0x44
    6d68:	4299      	cmp	r1, r3
    6d6a:	d002      	beq.n	6d72 <setvbuf+0x56>
    6d6c:	0030      	movs	r0, r6
    6d6e:	f000 fa85 	bl	727c <_free_r>
    6d72:	2300      	movs	r3, #0
    6d74:	6363      	str	r3, [r4, #52]	; 0x34
    6d76:	2300      	movs	r3, #0
    6d78:	61a3      	str	r3, [r4, #24]
    6d7a:	6063      	str	r3, [r4, #4]
    6d7c:	89a3      	ldrh	r3, [r4, #12]
    6d7e:	061b      	lsls	r3, r3, #24
    6d80:	d503      	bpl.n	6d8a <setvbuf+0x6e>
    6d82:	6921      	ldr	r1, [r4, #16]
    6d84:	0030      	movs	r0, r6
    6d86:	f000 fa79 	bl	727c <_free_r>
    6d8a:	89a3      	ldrh	r3, [r4, #12]
    6d8c:	4a36      	ldr	r2, [pc, #216]	; (6e68 <setvbuf+0x14c>)
    6d8e:	4013      	ands	r3, r2
    6d90:	81a3      	strh	r3, [r4, #12]
    6d92:	9b00      	ldr	r3, [sp, #0]
    6d94:	2b02      	cmp	r3, #2
    6d96:	d05a      	beq.n	6e4e <setvbuf+0x132>
    6d98:	ab03      	add	r3, sp, #12
    6d9a:	aa02      	add	r2, sp, #8
    6d9c:	0021      	movs	r1, r4
    6d9e:	0030      	movs	r0, r6
    6da0:	f000 f9f6 	bl	7190 <__swhatbuf_r>
    6da4:	89a3      	ldrh	r3, [r4, #12]
    6da6:	4318      	orrs	r0, r3
    6da8:	81a0      	strh	r0, [r4, #12]
    6daa:	2d00      	cmp	r5, #0
    6dac:	d124      	bne.n	6df8 <setvbuf+0xdc>
    6dae:	9d02      	ldr	r5, [sp, #8]
    6db0:	0028      	movs	r0, r5
    6db2:	f000 fa59 	bl	7268 <malloc>
    6db6:	9501      	str	r5, [sp, #4]
    6db8:	1e07      	subs	r7, r0, #0
    6dba:	d142      	bne.n	6e42 <setvbuf+0x126>
    6dbc:	9b02      	ldr	r3, [sp, #8]
    6dbe:	9301      	str	r3, [sp, #4]
    6dc0:	42ab      	cmp	r3, r5
    6dc2:	d139      	bne.n	6e38 <setvbuf+0x11c>
    6dc4:	2001      	movs	r0, #1
    6dc6:	4240      	negs	r0, r0
    6dc8:	2302      	movs	r3, #2
    6dca:	89a2      	ldrh	r2, [r4, #12]
    6dcc:	4313      	orrs	r3, r2
    6dce:	81a3      	strh	r3, [r4, #12]
    6dd0:	2300      	movs	r3, #0
    6dd2:	60a3      	str	r3, [r4, #8]
    6dd4:	0023      	movs	r3, r4
    6dd6:	3347      	adds	r3, #71	; 0x47
    6dd8:	6023      	str	r3, [r4, #0]
    6dda:	6123      	str	r3, [r4, #16]
    6ddc:	2301      	movs	r3, #1
    6dde:	6163      	str	r3, [r4, #20]
    6de0:	b005      	add	sp, #20
    6de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6de4:	4b21      	ldr	r3, [pc, #132]	; (6e6c <setvbuf+0x150>)
    6de6:	429c      	cmp	r4, r3
    6de8:	d101      	bne.n	6dee <setvbuf+0xd2>
    6dea:	68b4      	ldr	r4, [r6, #8]
    6dec:	e7aa      	b.n	6d44 <setvbuf+0x28>
    6dee:	4b20      	ldr	r3, [pc, #128]	; (6e70 <setvbuf+0x154>)
    6df0:	429c      	cmp	r4, r3
    6df2:	d1a7      	bne.n	6d44 <setvbuf+0x28>
    6df4:	68f4      	ldr	r4, [r6, #12]
    6df6:	e7a5      	b.n	6d44 <setvbuf+0x28>
    6df8:	2f00      	cmp	r7, #0
    6dfa:	d0d9      	beq.n	6db0 <setvbuf+0x94>
    6dfc:	69b3      	ldr	r3, [r6, #24]
    6dfe:	2b00      	cmp	r3, #0
    6e00:	d102      	bne.n	6e08 <setvbuf+0xec>
    6e02:	0030      	movs	r0, r6
    6e04:	f000 f92e 	bl	7064 <__sinit>
    6e08:	9b00      	ldr	r3, [sp, #0]
    6e0a:	2b01      	cmp	r3, #1
    6e0c:	d103      	bne.n	6e16 <setvbuf+0xfa>
    6e0e:	89a3      	ldrh	r3, [r4, #12]
    6e10:	9a00      	ldr	r2, [sp, #0]
    6e12:	431a      	orrs	r2, r3
    6e14:	81a2      	strh	r2, [r4, #12]
    6e16:	2008      	movs	r0, #8
    6e18:	89a3      	ldrh	r3, [r4, #12]
    6e1a:	6027      	str	r7, [r4, #0]
    6e1c:	6127      	str	r7, [r4, #16]
    6e1e:	6165      	str	r5, [r4, #20]
    6e20:	4018      	ands	r0, r3
    6e22:	d018      	beq.n	6e56 <setvbuf+0x13a>
    6e24:	2001      	movs	r0, #1
    6e26:	4018      	ands	r0, r3
    6e28:	2300      	movs	r3, #0
    6e2a:	4298      	cmp	r0, r3
    6e2c:	d011      	beq.n	6e52 <setvbuf+0x136>
    6e2e:	426d      	negs	r5, r5
    6e30:	60a3      	str	r3, [r4, #8]
    6e32:	61a5      	str	r5, [r4, #24]
    6e34:	0018      	movs	r0, r3
    6e36:	e7d3      	b.n	6de0 <setvbuf+0xc4>
    6e38:	9801      	ldr	r0, [sp, #4]
    6e3a:	f000 fa15 	bl	7268 <malloc>
    6e3e:	1e07      	subs	r7, r0, #0
    6e40:	d0c0      	beq.n	6dc4 <setvbuf+0xa8>
    6e42:	2380      	movs	r3, #128	; 0x80
    6e44:	89a2      	ldrh	r2, [r4, #12]
    6e46:	9d01      	ldr	r5, [sp, #4]
    6e48:	4313      	orrs	r3, r2
    6e4a:	81a3      	strh	r3, [r4, #12]
    6e4c:	e7d6      	b.n	6dfc <setvbuf+0xe0>
    6e4e:	2000      	movs	r0, #0
    6e50:	e7ba      	b.n	6dc8 <setvbuf+0xac>
    6e52:	60a5      	str	r5, [r4, #8]
    6e54:	e7c4      	b.n	6de0 <setvbuf+0xc4>
    6e56:	60a0      	str	r0, [r4, #8]
    6e58:	e7c2      	b.n	6de0 <setvbuf+0xc4>
    6e5a:	2001      	movs	r0, #1
    6e5c:	4240      	negs	r0, r0
    6e5e:	e7bf      	b.n	6de0 <setvbuf+0xc4>
    6e60:	200000fc 	.word	0x200000fc
    6e64:	00007fc4 	.word	0x00007fc4
    6e68:	fffff35c 	.word	0xfffff35c
    6e6c:	00007fe4 	.word	0x00007fe4
    6e70:	00007fa4 	.word	0x00007fa4

00006e74 <__sflush_r>:
    6e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6e76:	898a      	ldrh	r2, [r1, #12]
    6e78:	0005      	movs	r5, r0
    6e7a:	000c      	movs	r4, r1
    6e7c:	0713      	lsls	r3, r2, #28
    6e7e:	d460      	bmi.n	6f42 <__sflush_r+0xce>
    6e80:	684b      	ldr	r3, [r1, #4]
    6e82:	2b00      	cmp	r3, #0
    6e84:	dc04      	bgt.n	6e90 <__sflush_r+0x1c>
    6e86:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6e88:	2b00      	cmp	r3, #0
    6e8a:	dc01      	bgt.n	6e90 <__sflush_r+0x1c>
    6e8c:	2000      	movs	r0, #0
    6e8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6e90:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6e92:	2f00      	cmp	r7, #0
    6e94:	d0fa      	beq.n	6e8c <__sflush_r+0x18>
    6e96:	2300      	movs	r3, #0
    6e98:	682e      	ldr	r6, [r5, #0]
    6e9a:	602b      	str	r3, [r5, #0]
    6e9c:	2380      	movs	r3, #128	; 0x80
    6e9e:	015b      	lsls	r3, r3, #5
    6ea0:	401a      	ands	r2, r3
    6ea2:	d034      	beq.n	6f0e <__sflush_r+0x9a>
    6ea4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6ea6:	89a3      	ldrh	r3, [r4, #12]
    6ea8:	075b      	lsls	r3, r3, #29
    6eaa:	d506      	bpl.n	6eba <__sflush_r+0x46>
    6eac:	6863      	ldr	r3, [r4, #4]
    6eae:	1ac0      	subs	r0, r0, r3
    6eb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6eb2:	2b00      	cmp	r3, #0
    6eb4:	d001      	beq.n	6eba <__sflush_r+0x46>
    6eb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6eb8:	1ac0      	subs	r0, r0, r3
    6eba:	0002      	movs	r2, r0
    6ebc:	6a21      	ldr	r1, [r4, #32]
    6ebe:	2300      	movs	r3, #0
    6ec0:	0028      	movs	r0, r5
    6ec2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6ec4:	47b8      	blx	r7
    6ec6:	89a1      	ldrh	r1, [r4, #12]
    6ec8:	1c43      	adds	r3, r0, #1
    6eca:	d106      	bne.n	6eda <__sflush_r+0x66>
    6ecc:	682b      	ldr	r3, [r5, #0]
    6ece:	2b1d      	cmp	r3, #29
    6ed0:	d831      	bhi.n	6f36 <__sflush_r+0xc2>
    6ed2:	4a2c      	ldr	r2, [pc, #176]	; (6f84 <__sflush_r+0x110>)
    6ed4:	40da      	lsrs	r2, r3
    6ed6:	07d3      	lsls	r3, r2, #31
    6ed8:	d52d      	bpl.n	6f36 <__sflush_r+0xc2>
    6eda:	2300      	movs	r3, #0
    6edc:	6063      	str	r3, [r4, #4]
    6ede:	6923      	ldr	r3, [r4, #16]
    6ee0:	6023      	str	r3, [r4, #0]
    6ee2:	04cb      	lsls	r3, r1, #19
    6ee4:	d505      	bpl.n	6ef2 <__sflush_r+0x7e>
    6ee6:	1c43      	adds	r3, r0, #1
    6ee8:	d102      	bne.n	6ef0 <__sflush_r+0x7c>
    6eea:	682b      	ldr	r3, [r5, #0]
    6eec:	2b00      	cmp	r3, #0
    6eee:	d100      	bne.n	6ef2 <__sflush_r+0x7e>
    6ef0:	6560      	str	r0, [r4, #84]	; 0x54
    6ef2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6ef4:	602e      	str	r6, [r5, #0]
    6ef6:	2900      	cmp	r1, #0
    6ef8:	d0c8      	beq.n	6e8c <__sflush_r+0x18>
    6efa:	0023      	movs	r3, r4
    6efc:	3344      	adds	r3, #68	; 0x44
    6efe:	4299      	cmp	r1, r3
    6f00:	d002      	beq.n	6f08 <__sflush_r+0x94>
    6f02:	0028      	movs	r0, r5
    6f04:	f000 f9ba 	bl	727c <_free_r>
    6f08:	2000      	movs	r0, #0
    6f0a:	6360      	str	r0, [r4, #52]	; 0x34
    6f0c:	e7bf      	b.n	6e8e <__sflush_r+0x1a>
    6f0e:	2301      	movs	r3, #1
    6f10:	6a21      	ldr	r1, [r4, #32]
    6f12:	0028      	movs	r0, r5
    6f14:	47b8      	blx	r7
    6f16:	1c43      	adds	r3, r0, #1
    6f18:	d1c5      	bne.n	6ea6 <__sflush_r+0x32>
    6f1a:	682b      	ldr	r3, [r5, #0]
    6f1c:	2b00      	cmp	r3, #0
    6f1e:	d0c2      	beq.n	6ea6 <__sflush_r+0x32>
    6f20:	2b1d      	cmp	r3, #29
    6f22:	d001      	beq.n	6f28 <__sflush_r+0xb4>
    6f24:	2b16      	cmp	r3, #22
    6f26:	d101      	bne.n	6f2c <__sflush_r+0xb8>
    6f28:	602e      	str	r6, [r5, #0]
    6f2a:	e7af      	b.n	6e8c <__sflush_r+0x18>
    6f2c:	2340      	movs	r3, #64	; 0x40
    6f2e:	89a2      	ldrh	r2, [r4, #12]
    6f30:	4313      	orrs	r3, r2
    6f32:	81a3      	strh	r3, [r4, #12]
    6f34:	e7ab      	b.n	6e8e <__sflush_r+0x1a>
    6f36:	2340      	movs	r3, #64	; 0x40
    6f38:	430b      	orrs	r3, r1
    6f3a:	2001      	movs	r0, #1
    6f3c:	81a3      	strh	r3, [r4, #12]
    6f3e:	4240      	negs	r0, r0
    6f40:	e7a5      	b.n	6e8e <__sflush_r+0x1a>
    6f42:	690f      	ldr	r7, [r1, #16]
    6f44:	2f00      	cmp	r7, #0
    6f46:	d0a1      	beq.n	6e8c <__sflush_r+0x18>
    6f48:	680b      	ldr	r3, [r1, #0]
    6f4a:	600f      	str	r7, [r1, #0]
    6f4c:	1bdb      	subs	r3, r3, r7
    6f4e:	9301      	str	r3, [sp, #4]
    6f50:	2300      	movs	r3, #0
    6f52:	0792      	lsls	r2, r2, #30
    6f54:	d100      	bne.n	6f58 <__sflush_r+0xe4>
    6f56:	694b      	ldr	r3, [r1, #20]
    6f58:	60a3      	str	r3, [r4, #8]
    6f5a:	9b01      	ldr	r3, [sp, #4]
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	dc00      	bgt.n	6f62 <__sflush_r+0xee>
    6f60:	e794      	b.n	6e8c <__sflush_r+0x18>
    6f62:	9b01      	ldr	r3, [sp, #4]
    6f64:	003a      	movs	r2, r7
    6f66:	6a21      	ldr	r1, [r4, #32]
    6f68:	0028      	movs	r0, r5
    6f6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6f6c:	47b0      	blx	r6
    6f6e:	2800      	cmp	r0, #0
    6f70:	dc03      	bgt.n	6f7a <__sflush_r+0x106>
    6f72:	2340      	movs	r3, #64	; 0x40
    6f74:	89a2      	ldrh	r2, [r4, #12]
    6f76:	4313      	orrs	r3, r2
    6f78:	e7df      	b.n	6f3a <__sflush_r+0xc6>
    6f7a:	9b01      	ldr	r3, [sp, #4]
    6f7c:	183f      	adds	r7, r7, r0
    6f7e:	1a1b      	subs	r3, r3, r0
    6f80:	9301      	str	r3, [sp, #4]
    6f82:	e7ea      	b.n	6f5a <__sflush_r+0xe6>
    6f84:	20400001 	.word	0x20400001

00006f88 <_fflush_r>:
    6f88:	690b      	ldr	r3, [r1, #16]
    6f8a:	b570      	push	{r4, r5, r6, lr}
    6f8c:	0005      	movs	r5, r0
    6f8e:	000c      	movs	r4, r1
    6f90:	2b00      	cmp	r3, #0
    6f92:	d101      	bne.n	6f98 <_fflush_r+0x10>
    6f94:	2000      	movs	r0, #0
    6f96:	bd70      	pop	{r4, r5, r6, pc}
    6f98:	2800      	cmp	r0, #0
    6f9a:	d004      	beq.n	6fa6 <_fflush_r+0x1e>
    6f9c:	6983      	ldr	r3, [r0, #24]
    6f9e:	2b00      	cmp	r3, #0
    6fa0:	d101      	bne.n	6fa6 <_fflush_r+0x1e>
    6fa2:	f000 f85f 	bl	7064 <__sinit>
    6fa6:	4b0b      	ldr	r3, [pc, #44]	; (6fd4 <_fflush_r+0x4c>)
    6fa8:	429c      	cmp	r4, r3
    6faa:	d109      	bne.n	6fc0 <_fflush_r+0x38>
    6fac:	686c      	ldr	r4, [r5, #4]
    6fae:	220c      	movs	r2, #12
    6fb0:	5ea3      	ldrsh	r3, [r4, r2]
    6fb2:	2b00      	cmp	r3, #0
    6fb4:	d0ee      	beq.n	6f94 <_fflush_r+0xc>
    6fb6:	0021      	movs	r1, r4
    6fb8:	0028      	movs	r0, r5
    6fba:	f7ff ff5b 	bl	6e74 <__sflush_r>
    6fbe:	e7ea      	b.n	6f96 <_fflush_r+0xe>
    6fc0:	4b05      	ldr	r3, [pc, #20]	; (6fd8 <_fflush_r+0x50>)
    6fc2:	429c      	cmp	r4, r3
    6fc4:	d101      	bne.n	6fca <_fflush_r+0x42>
    6fc6:	68ac      	ldr	r4, [r5, #8]
    6fc8:	e7f1      	b.n	6fae <_fflush_r+0x26>
    6fca:	4b04      	ldr	r3, [pc, #16]	; (6fdc <_fflush_r+0x54>)
    6fcc:	429c      	cmp	r4, r3
    6fce:	d1ee      	bne.n	6fae <_fflush_r+0x26>
    6fd0:	68ec      	ldr	r4, [r5, #12]
    6fd2:	e7ec      	b.n	6fae <_fflush_r+0x26>
    6fd4:	00007fc4 	.word	0x00007fc4
    6fd8:	00007fe4 	.word	0x00007fe4
    6fdc:	00007fa4 	.word	0x00007fa4

00006fe0 <_cleanup_r>:
    6fe0:	b510      	push	{r4, lr}
    6fe2:	4902      	ldr	r1, [pc, #8]	; (6fec <_cleanup_r+0xc>)
    6fe4:	f000 f8b2 	bl	714c <_fwalk_reent>
    6fe8:	bd10      	pop	{r4, pc}
    6fea:	46c0      	nop			; (mov r8, r8)
    6fec:	00006f89 	.word	0x00006f89

00006ff0 <std.isra.0>:
    6ff0:	2300      	movs	r3, #0
    6ff2:	b510      	push	{r4, lr}
    6ff4:	0004      	movs	r4, r0
    6ff6:	6003      	str	r3, [r0, #0]
    6ff8:	6043      	str	r3, [r0, #4]
    6ffa:	6083      	str	r3, [r0, #8]
    6ffc:	8181      	strh	r1, [r0, #12]
    6ffe:	6643      	str	r3, [r0, #100]	; 0x64
    7000:	81c2      	strh	r2, [r0, #14]
    7002:	6103      	str	r3, [r0, #16]
    7004:	6143      	str	r3, [r0, #20]
    7006:	6183      	str	r3, [r0, #24]
    7008:	0019      	movs	r1, r3
    700a:	2208      	movs	r2, #8
    700c:	305c      	adds	r0, #92	; 0x5c
    700e:	f7ff fe58 	bl	6cc2 <memset>
    7012:	4b05      	ldr	r3, [pc, #20]	; (7028 <std.isra.0+0x38>)
    7014:	6224      	str	r4, [r4, #32]
    7016:	6263      	str	r3, [r4, #36]	; 0x24
    7018:	4b04      	ldr	r3, [pc, #16]	; (702c <std.isra.0+0x3c>)
    701a:	62a3      	str	r3, [r4, #40]	; 0x28
    701c:	4b04      	ldr	r3, [pc, #16]	; (7030 <std.isra.0+0x40>)
    701e:	62e3      	str	r3, [r4, #44]	; 0x2c
    7020:	4b04      	ldr	r3, [pc, #16]	; (7034 <std.isra.0+0x44>)
    7022:	6323      	str	r3, [r4, #48]	; 0x30
    7024:	bd10      	pop	{r4, pc}
    7026:	46c0      	nop			; (mov r8, r8)
    7028:	00007989 	.word	0x00007989
    702c:	000079b1 	.word	0x000079b1
    7030:	000079e9 	.word	0x000079e9
    7034:	00007a15 	.word	0x00007a15

00007038 <__sfmoreglue>:
    7038:	b570      	push	{r4, r5, r6, lr}
    703a:	2568      	movs	r5, #104	; 0x68
    703c:	1e4a      	subs	r2, r1, #1
    703e:	4355      	muls	r5, r2
    7040:	000e      	movs	r6, r1
    7042:	0029      	movs	r1, r5
    7044:	3174      	adds	r1, #116	; 0x74
    7046:	f000 f963 	bl	7310 <_malloc_r>
    704a:	1e04      	subs	r4, r0, #0
    704c:	d008      	beq.n	7060 <__sfmoreglue+0x28>
    704e:	2100      	movs	r1, #0
    7050:	002a      	movs	r2, r5
    7052:	6001      	str	r1, [r0, #0]
    7054:	6046      	str	r6, [r0, #4]
    7056:	300c      	adds	r0, #12
    7058:	60a0      	str	r0, [r4, #8]
    705a:	3268      	adds	r2, #104	; 0x68
    705c:	f7ff fe31 	bl	6cc2 <memset>
    7060:	0020      	movs	r0, r4
    7062:	bd70      	pop	{r4, r5, r6, pc}

00007064 <__sinit>:
    7064:	6983      	ldr	r3, [r0, #24]
    7066:	b513      	push	{r0, r1, r4, lr}
    7068:	0004      	movs	r4, r0
    706a:	2b00      	cmp	r3, #0
    706c:	d128      	bne.n	70c0 <__sinit+0x5c>
    706e:	6483      	str	r3, [r0, #72]	; 0x48
    7070:	64c3      	str	r3, [r0, #76]	; 0x4c
    7072:	6503      	str	r3, [r0, #80]	; 0x50
    7074:	4b13      	ldr	r3, [pc, #76]	; (70c4 <__sinit+0x60>)
    7076:	4a14      	ldr	r2, [pc, #80]	; (70c8 <__sinit+0x64>)
    7078:	681b      	ldr	r3, [r3, #0]
    707a:	6282      	str	r2, [r0, #40]	; 0x28
    707c:	9301      	str	r3, [sp, #4]
    707e:	4298      	cmp	r0, r3
    7080:	d101      	bne.n	7086 <__sinit+0x22>
    7082:	2301      	movs	r3, #1
    7084:	6183      	str	r3, [r0, #24]
    7086:	0020      	movs	r0, r4
    7088:	f000 f820 	bl	70cc <__sfp>
    708c:	6060      	str	r0, [r4, #4]
    708e:	0020      	movs	r0, r4
    7090:	f000 f81c 	bl	70cc <__sfp>
    7094:	60a0      	str	r0, [r4, #8]
    7096:	0020      	movs	r0, r4
    7098:	f000 f818 	bl	70cc <__sfp>
    709c:	2200      	movs	r2, #0
    709e:	60e0      	str	r0, [r4, #12]
    70a0:	2104      	movs	r1, #4
    70a2:	6860      	ldr	r0, [r4, #4]
    70a4:	f7ff ffa4 	bl	6ff0 <std.isra.0>
    70a8:	2201      	movs	r2, #1
    70aa:	2109      	movs	r1, #9
    70ac:	68a0      	ldr	r0, [r4, #8]
    70ae:	f7ff ff9f 	bl	6ff0 <std.isra.0>
    70b2:	2202      	movs	r2, #2
    70b4:	2112      	movs	r1, #18
    70b6:	68e0      	ldr	r0, [r4, #12]
    70b8:	f7ff ff9a 	bl	6ff0 <std.isra.0>
    70bc:	2301      	movs	r3, #1
    70be:	61a3      	str	r3, [r4, #24]
    70c0:	bd13      	pop	{r0, r1, r4, pc}
    70c2:	46c0      	nop			; (mov r8, r8)
    70c4:	00007fa0 	.word	0x00007fa0
    70c8:	00006fe1 	.word	0x00006fe1

000070cc <__sfp>:
    70cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70ce:	4b1e      	ldr	r3, [pc, #120]	; (7148 <__sfp+0x7c>)
    70d0:	0007      	movs	r7, r0
    70d2:	681e      	ldr	r6, [r3, #0]
    70d4:	69b3      	ldr	r3, [r6, #24]
    70d6:	2b00      	cmp	r3, #0
    70d8:	d102      	bne.n	70e0 <__sfp+0x14>
    70da:	0030      	movs	r0, r6
    70dc:	f7ff ffc2 	bl	7064 <__sinit>
    70e0:	3648      	adds	r6, #72	; 0x48
    70e2:	68b4      	ldr	r4, [r6, #8]
    70e4:	6873      	ldr	r3, [r6, #4]
    70e6:	3b01      	subs	r3, #1
    70e8:	d504      	bpl.n	70f4 <__sfp+0x28>
    70ea:	6833      	ldr	r3, [r6, #0]
    70ec:	2b00      	cmp	r3, #0
    70ee:	d007      	beq.n	7100 <__sfp+0x34>
    70f0:	6836      	ldr	r6, [r6, #0]
    70f2:	e7f6      	b.n	70e2 <__sfp+0x16>
    70f4:	220c      	movs	r2, #12
    70f6:	5ea5      	ldrsh	r5, [r4, r2]
    70f8:	2d00      	cmp	r5, #0
    70fa:	d00d      	beq.n	7118 <__sfp+0x4c>
    70fc:	3468      	adds	r4, #104	; 0x68
    70fe:	e7f2      	b.n	70e6 <__sfp+0x1a>
    7100:	2104      	movs	r1, #4
    7102:	0038      	movs	r0, r7
    7104:	f7ff ff98 	bl	7038 <__sfmoreglue>
    7108:	6030      	str	r0, [r6, #0]
    710a:	2800      	cmp	r0, #0
    710c:	d1f0      	bne.n	70f0 <__sfp+0x24>
    710e:	230c      	movs	r3, #12
    7110:	0004      	movs	r4, r0
    7112:	603b      	str	r3, [r7, #0]
    7114:	0020      	movs	r0, r4
    7116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7118:	2301      	movs	r3, #1
    711a:	0020      	movs	r0, r4
    711c:	425b      	negs	r3, r3
    711e:	81e3      	strh	r3, [r4, #14]
    7120:	3302      	adds	r3, #2
    7122:	81a3      	strh	r3, [r4, #12]
    7124:	6665      	str	r5, [r4, #100]	; 0x64
    7126:	6025      	str	r5, [r4, #0]
    7128:	60a5      	str	r5, [r4, #8]
    712a:	6065      	str	r5, [r4, #4]
    712c:	6125      	str	r5, [r4, #16]
    712e:	6165      	str	r5, [r4, #20]
    7130:	61a5      	str	r5, [r4, #24]
    7132:	2208      	movs	r2, #8
    7134:	0029      	movs	r1, r5
    7136:	305c      	adds	r0, #92	; 0x5c
    7138:	f7ff fdc3 	bl	6cc2 <memset>
    713c:	6365      	str	r5, [r4, #52]	; 0x34
    713e:	63a5      	str	r5, [r4, #56]	; 0x38
    7140:	64a5      	str	r5, [r4, #72]	; 0x48
    7142:	64e5      	str	r5, [r4, #76]	; 0x4c
    7144:	e7e6      	b.n	7114 <__sfp+0x48>
    7146:	46c0      	nop			; (mov r8, r8)
    7148:	00007fa0 	.word	0x00007fa0

0000714c <_fwalk_reent>:
    714c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    714e:	0004      	movs	r4, r0
    7150:	0007      	movs	r7, r0
    7152:	2600      	movs	r6, #0
    7154:	9101      	str	r1, [sp, #4]
    7156:	3448      	adds	r4, #72	; 0x48
    7158:	2c00      	cmp	r4, #0
    715a:	d101      	bne.n	7160 <_fwalk_reent+0x14>
    715c:	0030      	movs	r0, r6
    715e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7160:	6863      	ldr	r3, [r4, #4]
    7162:	68a5      	ldr	r5, [r4, #8]
    7164:	9300      	str	r3, [sp, #0]
    7166:	9b00      	ldr	r3, [sp, #0]
    7168:	3b01      	subs	r3, #1
    716a:	9300      	str	r3, [sp, #0]
    716c:	d501      	bpl.n	7172 <_fwalk_reent+0x26>
    716e:	6824      	ldr	r4, [r4, #0]
    7170:	e7f2      	b.n	7158 <_fwalk_reent+0xc>
    7172:	89ab      	ldrh	r3, [r5, #12]
    7174:	2b01      	cmp	r3, #1
    7176:	d908      	bls.n	718a <_fwalk_reent+0x3e>
    7178:	220e      	movs	r2, #14
    717a:	5eab      	ldrsh	r3, [r5, r2]
    717c:	3301      	adds	r3, #1
    717e:	d004      	beq.n	718a <_fwalk_reent+0x3e>
    7180:	0029      	movs	r1, r5
    7182:	0038      	movs	r0, r7
    7184:	9b01      	ldr	r3, [sp, #4]
    7186:	4798      	blx	r3
    7188:	4306      	orrs	r6, r0
    718a:	3568      	adds	r5, #104	; 0x68
    718c:	e7eb      	b.n	7166 <_fwalk_reent+0x1a>
	...

00007190 <__swhatbuf_r>:
    7190:	b570      	push	{r4, r5, r6, lr}
    7192:	000e      	movs	r6, r1
    7194:	001d      	movs	r5, r3
    7196:	230e      	movs	r3, #14
    7198:	5ec9      	ldrsh	r1, [r1, r3]
    719a:	b090      	sub	sp, #64	; 0x40
    719c:	0014      	movs	r4, r2
    719e:	2900      	cmp	r1, #0
    71a0:	da07      	bge.n	71b2 <__swhatbuf_r+0x22>
    71a2:	2300      	movs	r3, #0
    71a4:	602b      	str	r3, [r5, #0]
    71a6:	89b3      	ldrh	r3, [r6, #12]
    71a8:	061b      	lsls	r3, r3, #24
    71aa:	d411      	bmi.n	71d0 <__swhatbuf_r+0x40>
    71ac:	2380      	movs	r3, #128	; 0x80
    71ae:	00db      	lsls	r3, r3, #3
    71b0:	e00f      	b.n	71d2 <__swhatbuf_r+0x42>
    71b2:	aa01      	add	r2, sp, #4
    71b4:	f000 fd26 	bl	7c04 <_fstat_r>
    71b8:	2800      	cmp	r0, #0
    71ba:	dbf2      	blt.n	71a2 <__swhatbuf_r+0x12>
    71bc:	22f0      	movs	r2, #240	; 0xf0
    71be:	9b02      	ldr	r3, [sp, #8]
    71c0:	0212      	lsls	r2, r2, #8
    71c2:	4013      	ands	r3, r2
    71c4:	4a05      	ldr	r2, [pc, #20]	; (71dc <__swhatbuf_r+0x4c>)
    71c6:	189b      	adds	r3, r3, r2
    71c8:	425a      	negs	r2, r3
    71ca:	4153      	adcs	r3, r2
    71cc:	602b      	str	r3, [r5, #0]
    71ce:	e7ed      	b.n	71ac <__swhatbuf_r+0x1c>
    71d0:	2340      	movs	r3, #64	; 0x40
    71d2:	2000      	movs	r0, #0
    71d4:	6023      	str	r3, [r4, #0]
    71d6:	b010      	add	sp, #64	; 0x40
    71d8:	bd70      	pop	{r4, r5, r6, pc}
    71da:	46c0      	nop			; (mov r8, r8)
    71dc:	ffffe000 	.word	0xffffe000

000071e0 <__smakebuf_r>:
    71e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    71e2:	2602      	movs	r6, #2
    71e4:	898b      	ldrh	r3, [r1, #12]
    71e6:	0005      	movs	r5, r0
    71e8:	000c      	movs	r4, r1
    71ea:	4233      	tst	r3, r6
    71ec:	d006      	beq.n	71fc <__smakebuf_r+0x1c>
    71ee:	0023      	movs	r3, r4
    71f0:	3347      	adds	r3, #71	; 0x47
    71f2:	6023      	str	r3, [r4, #0]
    71f4:	6123      	str	r3, [r4, #16]
    71f6:	2301      	movs	r3, #1
    71f8:	6163      	str	r3, [r4, #20]
    71fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    71fc:	ab01      	add	r3, sp, #4
    71fe:	466a      	mov	r2, sp
    7200:	f7ff ffc6 	bl	7190 <__swhatbuf_r>
    7204:	9900      	ldr	r1, [sp, #0]
    7206:	0007      	movs	r7, r0
    7208:	0028      	movs	r0, r5
    720a:	f000 f881 	bl	7310 <_malloc_r>
    720e:	2800      	cmp	r0, #0
    7210:	d108      	bne.n	7224 <__smakebuf_r+0x44>
    7212:	220c      	movs	r2, #12
    7214:	5ea3      	ldrsh	r3, [r4, r2]
    7216:	059a      	lsls	r2, r3, #22
    7218:	d4ef      	bmi.n	71fa <__smakebuf_r+0x1a>
    721a:	2203      	movs	r2, #3
    721c:	4393      	bics	r3, r2
    721e:	431e      	orrs	r6, r3
    7220:	81a6      	strh	r6, [r4, #12]
    7222:	e7e4      	b.n	71ee <__smakebuf_r+0xe>
    7224:	4b0f      	ldr	r3, [pc, #60]	; (7264 <__smakebuf_r+0x84>)
    7226:	62ab      	str	r3, [r5, #40]	; 0x28
    7228:	2380      	movs	r3, #128	; 0x80
    722a:	89a2      	ldrh	r2, [r4, #12]
    722c:	6020      	str	r0, [r4, #0]
    722e:	4313      	orrs	r3, r2
    7230:	81a3      	strh	r3, [r4, #12]
    7232:	9b00      	ldr	r3, [sp, #0]
    7234:	6120      	str	r0, [r4, #16]
    7236:	6163      	str	r3, [r4, #20]
    7238:	9b01      	ldr	r3, [sp, #4]
    723a:	2b00      	cmp	r3, #0
    723c:	d00d      	beq.n	725a <__smakebuf_r+0x7a>
    723e:	230e      	movs	r3, #14
    7240:	5ee1      	ldrsh	r1, [r4, r3]
    7242:	0028      	movs	r0, r5
    7244:	f000 fcf0 	bl	7c28 <_isatty_r>
    7248:	2800      	cmp	r0, #0
    724a:	d006      	beq.n	725a <__smakebuf_r+0x7a>
    724c:	2203      	movs	r2, #3
    724e:	89a3      	ldrh	r3, [r4, #12]
    7250:	4393      	bics	r3, r2
    7252:	001a      	movs	r2, r3
    7254:	2301      	movs	r3, #1
    7256:	4313      	orrs	r3, r2
    7258:	81a3      	strh	r3, [r4, #12]
    725a:	89a0      	ldrh	r0, [r4, #12]
    725c:	4338      	orrs	r0, r7
    725e:	81a0      	strh	r0, [r4, #12]
    7260:	e7cb      	b.n	71fa <__smakebuf_r+0x1a>
    7262:	46c0      	nop			; (mov r8, r8)
    7264:	00006fe1 	.word	0x00006fe1

00007268 <malloc>:
    7268:	b510      	push	{r4, lr}
    726a:	4b03      	ldr	r3, [pc, #12]	; (7278 <malloc+0x10>)
    726c:	0001      	movs	r1, r0
    726e:	6818      	ldr	r0, [r3, #0]
    7270:	f000 f84e 	bl	7310 <_malloc_r>
    7274:	bd10      	pop	{r4, pc}
    7276:	46c0      	nop			; (mov r8, r8)
    7278:	200000fc 	.word	0x200000fc

0000727c <_free_r>:
    727c:	b570      	push	{r4, r5, r6, lr}
    727e:	0005      	movs	r5, r0
    7280:	2900      	cmp	r1, #0
    7282:	d010      	beq.n	72a6 <_free_r+0x2a>
    7284:	1f0c      	subs	r4, r1, #4
    7286:	6823      	ldr	r3, [r4, #0]
    7288:	2b00      	cmp	r3, #0
    728a:	da00      	bge.n	728e <_free_r+0x12>
    728c:	18e4      	adds	r4, r4, r3
    728e:	0028      	movs	r0, r5
    7290:	f000 fcfb 	bl	7c8a <__malloc_lock>
    7294:	4a1d      	ldr	r2, [pc, #116]	; (730c <_free_r+0x90>)
    7296:	6813      	ldr	r3, [r2, #0]
    7298:	2b00      	cmp	r3, #0
    729a:	d105      	bne.n	72a8 <_free_r+0x2c>
    729c:	6063      	str	r3, [r4, #4]
    729e:	6014      	str	r4, [r2, #0]
    72a0:	0028      	movs	r0, r5
    72a2:	f000 fcf3 	bl	7c8c <__malloc_unlock>
    72a6:	bd70      	pop	{r4, r5, r6, pc}
    72a8:	42a3      	cmp	r3, r4
    72aa:	d909      	bls.n	72c0 <_free_r+0x44>
    72ac:	6821      	ldr	r1, [r4, #0]
    72ae:	1860      	adds	r0, r4, r1
    72b0:	4283      	cmp	r3, r0
    72b2:	d1f3      	bne.n	729c <_free_r+0x20>
    72b4:	6818      	ldr	r0, [r3, #0]
    72b6:	685b      	ldr	r3, [r3, #4]
    72b8:	1841      	adds	r1, r0, r1
    72ba:	6021      	str	r1, [r4, #0]
    72bc:	e7ee      	b.n	729c <_free_r+0x20>
    72be:	0013      	movs	r3, r2
    72c0:	685a      	ldr	r2, [r3, #4]
    72c2:	2a00      	cmp	r2, #0
    72c4:	d001      	beq.n	72ca <_free_r+0x4e>
    72c6:	42a2      	cmp	r2, r4
    72c8:	d9f9      	bls.n	72be <_free_r+0x42>
    72ca:	6819      	ldr	r1, [r3, #0]
    72cc:	1858      	adds	r0, r3, r1
    72ce:	42a0      	cmp	r0, r4
    72d0:	d10b      	bne.n	72ea <_free_r+0x6e>
    72d2:	6820      	ldr	r0, [r4, #0]
    72d4:	1809      	adds	r1, r1, r0
    72d6:	1858      	adds	r0, r3, r1
    72d8:	6019      	str	r1, [r3, #0]
    72da:	4282      	cmp	r2, r0
    72dc:	d1e0      	bne.n	72a0 <_free_r+0x24>
    72de:	6810      	ldr	r0, [r2, #0]
    72e0:	6852      	ldr	r2, [r2, #4]
    72e2:	1841      	adds	r1, r0, r1
    72e4:	6019      	str	r1, [r3, #0]
    72e6:	605a      	str	r2, [r3, #4]
    72e8:	e7da      	b.n	72a0 <_free_r+0x24>
    72ea:	42a0      	cmp	r0, r4
    72ec:	d902      	bls.n	72f4 <_free_r+0x78>
    72ee:	230c      	movs	r3, #12
    72f0:	602b      	str	r3, [r5, #0]
    72f2:	e7d5      	b.n	72a0 <_free_r+0x24>
    72f4:	6821      	ldr	r1, [r4, #0]
    72f6:	1860      	adds	r0, r4, r1
    72f8:	4282      	cmp	r2, r0
    72fa:	d103      	bne.n	7304 <_free_r+0x88>
    72fc:	6810      	ldr	r0, [r2, #0]
    72fe:	6852      	ldr	r2, [r2, #4]
    7300:	1841      	adds	r1, r0, r1
    7302:	6021      	str	r1, [r4, #0]
    7304:	6062      	str	r2, [r4, #4]
    7306:	605c      	str	r4, [r3, #4]
    7308:	e7ca      	b.n	72a0 <_free_r+0x24>
    730a:	46c0      	nop			; (mov r8, r8)
    730c:	200002e8 	.word	0x200002e8

00007310 <_malloc_r>:
    7310:	2303      	movs	r3, #3
    7312:	b570      	push	{r4, r5, r6, lr}
    7314:	1ccd      	adds	r5, r1, #3
    7316:	439d      	bics	r5, r3
    7318:	3508      	adds	r5, #8
    731a:	0006      	movs	r6, r0
    731c:	2d0c      	cmp	r5, #12
    731e:	d21e      	bcs.n	735e <_malloc_r+0x4e>
    7320:	250c      	movs	r5, #12
    7322:	42a9      	cmp	r1, r5
    7324:	d81d      	bhi.n	7362 <_malloc_r+0x52>
    7326:	0030      	movs	r0, r6
    7328:	f000 fcaf 	bl	7c8a <__malloc_lock>
    732c:	4a25      	ldr	r2, [pc, #148]	; (73c4 <_malloc_r+0xb4>)
    732e:	6814      	ldr	r4, [r2, #0]
    7330:	0021      	movs	r1, r4
    7332:	2900      	cmp	r1, #0
    7334:	d119      	bne.n	736a <_malloc_r+0x5a>
    7336:	4c24      	ldr	r4, [pc, #144]	; (73c8 <_malloc_r+0xb8>)
    7338:	6823      	ldr	r3, [r4, #0]
    733a:	2b00      	cmp	r3, #0
    733c:	d103      	bne.n	7346 <_malloc_r+0x36>
    733e:	0030      	movs	r0, r6
    7340:	f000 fb10 	bl	7964 <_sbrk_r>
    7344:	6020      	str	r0, [r4, #0]
    7346:	0029      	movs	r1, r5
    7348:	0030      	movs	r0, r6
    734a:	f000 fb0b 	bl	7964 <_sbrk_r>
    734e:	1c43      	adds	r3, r0, #1
    7350:	d12c      	bne.n	73ac <_malloc_r+0x9c>
    7352:	230c      	movs	r3, #12
    7354:	0030      	movs	r0, r6
    7356:	6033      	str	r3, [r6, #0]
    7358:	f000 fc98 	bl	7c8c <__malloc_unlock>
    735c:	e003      	b.n	7366 <_malloc_r+0x56>
    735e:	2d00      	cmp	r5, #0
    7360:	dadf      	bge.n	7322 <_malloc_r+0x12>
    7362:	230c      	movs	r3, #12
    7364:	6033      	str	r3, [r6, #0]
    7366:	2000      	movs	r0, #0
    7368:	bd70      	pop	{r4, r5, r6, pc}
    736a:	680b      	ldr	r3, [r1, #0]
    736c:	1b5b      	subs	r3, r3, r5
    736e:	d41a      	bmi.n	73a6 <_malloc_r+0x96>
    7370:	2b0b      	cmp	r3, #11
    7372:	d903      	bls.n	737c <_malloc_r+0x6c>
    7374:	600b      	str	r3, [r1, #0]
    7376:	18cc      	adds	r4, r1, r3
    7378:	6025      	str	r5, [r4, #0]
    737a:	e003      	b.n	7384 <_malloc_r+0x74>
    737c:	428c      	cmp	r4, r1
    737e:	d10e      	bne.n	739e <_malloc_r+0x8e>
    7380:	6863      	ldr	r3, [r4, #4]
    7382:	6013      	str	r3, [r2, #0]
    7384:	0030      	movs	r0, r6
    7386:	f000 fc81 	bl	7c8c <__malloc_unlock>
    738a:	0020      	movs	r0, r4
    738c:	2207      	movs	r2, #7
    738e:	300b      	adds	r0, #11
    7390:	1d23      	adds	r3, r4, #4
    7392:	4390      	bics	r0, r2
    7394:	1ac3      	subs	r3, r0, r3
    7396:	d0e7      	beq.n	7368 <_malloc_r+0x58>
    7398:	425a      	negs	r2, r3
    739a:	50e2      	str	r2, [r4, r3]
    739c:	e7e4      	b.n	7368 <_malloc_r+0x58>
    739e:	684b      	ldr	r3, [r1, #4]
    73a0:	6063      	str	r3, [r4, #4]
    73a2:	000c      	movs	r4, r1
    73a4:	e7ee      	b.n	7384 <_malloc_r+0x74>
    73a6:	000c      	movs	r4, r1
    73a8:	6849      	ldr	r1, [r1, #4]
    73aa:	e7c2      	b.n	7332 <_malloc_r+0x22>
    73ac:	2303      	movs	r3, #3
    73ae:	1cc4      	adds	r4, r0, #3
    73b0:	439c      	bics	r4, r3
    73b2:	42a0      	cmp	r0, r4
    73b4:	d0e0      	beq.n	7378 <_malloc_r+0x68>
    73b6:	1a21      	subs	r1, r4, r0
    73b8:	0030      	movs	r0, r6
    73ba:	f000 fad3 	bl	7964 <_sbrk_r>
    73be:	1c43      	adds	r3, r0, #1
    73c0:	d1da      	bne.n	7378 <_malloc_r+0x68>
    73c2:	e7c6      	b.n	7352 <_malloc_r+0x42>
    73c4:	200002e8 	.word	0x200002e8
    73c8:	200002ec 	.word	0x200002ec

000073cc <__sfputc_r>:
    73cc:	6893      	ldr	r3, [r2, #8]
    73ce:	b510      	push	{r4, lr}
    73d0:	3b01      	subs	r3, #1
    73d2:	6093      	str	r3, [r2, #8]
    73d4:	2b00      	cmp	r3, #0
    73d6:	da05      	bge.n	73e4 <__sfputc_r+0x18>
    73d8:	6994      	ldr	r4, [r2, #24]
    73da:	42a3      	cmp	r3, r4
    73dc:	db08      	blt.n	73f0 <__sfputc_r+0x24>
    73de:	b2cb      	uxtb	r3, r1
    73e0:	2b0a      	cmp	r3, #10
    73e2:	d005      	beq.n	73f0 <__sfputc_r+0x24>
    73e4:	6813      	ldr	r3, [r2, #0]
    73e6:	1c58      	adds	r0, r3, #1
    73e8:	6010      	str	r0, [r2, #0]
    73ea:	7019      	strb	r1, [r3, #0]
    73ec:	b2c8      	uxtb	r0, r1
    73ee:	bd10      	pop	{r4, pc}
    73f0:	f000 fb16 	bl	7a20 <__swbuf_r>
    73f4:	e7fb      	b.n	73ee <__sfputc_r+0x22>

000073f6 <__sfputs_r>:
    73f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73f8:	0006      	movs	r6, r0
    73fa:	000f      	movs	r7, r1
    73fc:	0014      	movs	r4, r2
    73fe:	18d5      	adds	r5, r2, r3
    7400:	42ac      	cmp	r4, r5
    7402:	d101      	bne.n	7408 <__sfputs_r+0x12>
    7404:	2000      	movs	r0, #0
    7406:	e007      	b.n	7418 <__sfputs_r+0x22>
    7408:	7821      	ldrb	r1, [r4, #0]
    740a:	003a      	movs	r2, r7
    740c:	0030      	movs	r0, r6
    740e:	f7ff ffdd 	bl	73cc <__sfputc_r>
    7412:	3401      	adds	r4, #1
    7414:	1c43      	adds	r3, r0, #1
    7416:	d1f3      	bne.n	7400 <__sfputs_r+0xa>
    7418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000741c <_vfiprintf_r>:
    741c:	b5f0      	push	{r4, r5, r6, r7, lr}
    741e:	b09f      	sub	sp, #124	; 0x7c
    7420:	0006      	movs	r6, r0
    7422:	000f      	movs	r7, r1
    7424:	0014      	movs	r4, r2
    7426:	9305      	str	r3, [sp, #20]
    7428:	2800      	cmp	r0, #0
    742a:	d004      	beq.n	7436 <_vfiprintf_r+0x1a>
    742c:	6983      	ldr	r3, [r0, #24]
    742e:	2b00      	cmp	r3, #0
    7430:	d101      	bne.n	7436 <_vfiprintf_r+0x1a>
    7432:	f7ff fe17 	bl	7064 <__sinit>
    7436:	4b7f      	ldr	r3, [pc, #508]	; (7634 <_vfiprintf_r+0x218>)
    7438:	429f      	cmp	r7, r3
    743a:	d15c      	bne.n	74f6 <_vfiprintf_r+0xda>
    743c:	6877      	ldr	r7, [r6, #4]
    743e:	89bb      	ldrh	r3, [r7, #12]
    7440:	071b      	lsls	r3, r3, #28
    7442:	d562      	bpl.n	750a <_vfiprintf_r+0xee>
    7444:	693b      	ldr	r3, [r7, #16]
    7446:	2b00      	cmp	r3, #0
    7448:	d05f      	beq.n	750a <_vfiprintf_r+0xee>
    744a:	2300      	movs	r3, #0
    744c:	ad06      	add	r5, sp, #24
    744e:	616b      	str	r3, [r5, #20]
    7450:	3320      	adds	r3, #32
    7452:	766b      	strb	r3, [r5, #25]
    7454:	3310      	adds	r3, #16
    7456:	76ab      	strb	r3, [r5, #26]
    7458:	9402      	str	r4, [sp, #8]
    745a:	9c02      	ldr	r4, [sp, #8]
    745c:	7823      	ldrb	r3, [r4, #0]
    745e:	2b00      	cmp	r3, #0
    7460:	d15d      	bne.n	751e <_vfiprintf_r+0x102>
    7462:	9b02      	ldr	r3, [sp, #8]
    7464:	1ae3      	subs	r3, r4, r3
    7466:	9304      	str	r3, [sp, #16]
    7468:	d00d      	beq.n	7486 <_vfiprintf_r+0x6a>
    746a:	9b04      	ldr	r3, [sp, #16]
    746c:	9a02      	ldr	r2, [sp, #8]
    746e:	0039      	movs	r1, r7
    7470:	0030      	movs	r0, r6
    7472:	f7ff ffc0 	bl	73f6 <__sfputs_r>
    7476:	1c43      	adds	r3, r0, #1
    7478:	d100      	bne.n	747c <_vfiprintf_r+0x60>
    747a:	e0cc      	b.n	7616 <_vfiprintf_r+0x1fa>
    747c:	696a      	ldr	r2, [r5, #20]
    747e:	9b04      	ldr	r3, [sp, #16]
    7480:	4694      	mov	ip, r2
    7482:	4463      	add	r3, ip
    7484:	616b      	str	r3, [r5, #20]
    7486:	7823      	ldrb	r3, [r4, #0]
    7488:	2b00      	cmp	r3, #0
    748a:	d100      	bne.n	748e <_vfiprintf_r+0x72>
    748c:	e0c3      	b.n	7616 <_vfiprintf_r+0x1fa>
    748e:	2201      	movs	r2, #1
    7490:	2300      	movs	r3, #0
    7492:	4252      	negs	r2, r2
    7494:	606a      	str	r2, [r5, #4]
    7496:	a902      	add	r1, sp, #8
    7498:	3254      	adds	r2, #84	; 0x54
    749a:	1852      	adds	r2, r2, r1
    749c:	3401      	adds	r4, #1
    749e:	602b      	str	r3, [r5, #0]
    74a0:	60eb      	str	r3, [r5, #12]
    74a2:	60ab      	str	r3, [r5, #8]
    74a4:	7013      	strb	r3, [r2, #0]
    74a6:	65ab      	str	r3, [r5, #88]	; 0x58
    74a8:	7821      	ldrb	r1, [r4, #0]
    74aa:	2205      	movs	r2, #5
    74ac:	4862      	ldr	r0, [pc, #392]	; (7638 <_vfiprintf_r+0x21c>)
    74ae:	f000 fbe1 	bl	7c74 <memchr>
    74b2:	1c63      	adds	r3, r4, #1
    74b4:	469c      	mov	ip, r3
    74b6:	2800      	cmp	r0, #0
    74b8:	d135      	bne.n	7526 <_vfiprintf_r+0x10a>
    74ba:	6829      	ldr	r1, [r5, #0]
    74bc:	06cb      	lsls	r3, r1, #27
    74be:	d504      	bpl.n	74ca <_vfiprintf_r+0xae>
    74c0:	2353      	movs	r3, #83	; 0x53
    74c2:	aa02      	add	r2, sp, #8
    74c4:	3020      	adds	r0, #32
    74c6:	189b      	adds	r3, r3, r2
    74c8:	7018      	strb	r0, [r3, #0]
    74ca:	070b      	lsls	r3, r1, #28
    74cc:	d504      	bpl.n	74d8 <_vfiprintf_r+0xbc>
    74ce:	2353      	movs	r3, #83	; 0x53
    74d0:	202b      	movs	r0, #43	; 0x2b
    74d2:	aa02      	add	r2, sp, #8
    74d4:	189b      	adds	r3, r3, r2
    74d6:	7018      	strb	r0, [r3, #0]
    74d8:	7823      	ldrb	r3, [r4, #0]
    74da:	2b2a      	cmp	r3, #42	; 0x2a
    74dc:	d02c      	beq.n	7538 <_vfiprintf_r+0x11c>
    74de:	2000      	movs	r0, #0
    74e0:	210a      	movs	r1, #10
    74e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    74e4:	7822      	ldrb	r2, [r4, #0]
    74e6:	3a30      	subs	r2, #48	; 0x30
    74e8:	2a09      	cmp	r2, #9
    74ea:	d800      	bhi.n	74ee <_vfiprintf_r+0xd2>
    74ec:	e06b      	b.n	75c6 <_vfiprintf_r+0x1aa>
    74ee:	2800      	cmp	r0, #0
    74f0:	d02a      	beq.n	7548 <_vfiprintf_r+0x12c>
    74f2:	9309      	str	r3, [sp, #36]	; 0x24
    74f4:	e028      	b.n	7548 <_vfiprintf_r+0x12c>
    74f6:	4b51      	ldr	r3, [pc, #324]	; (763c <_vfiprintf_r+0x220>)
    74f8:	429f      	cmp	r7, r3
    74fa:	d101      	bne.n	7500 <_vfiprintf_r+0xe4>
    74fc:	68b7      	ldr	r7, [r6, #8]
    74fe:	e79e      	b.n	743e <_vfiprintf_r+0x22>
    7500:	4b4f      	ldr	r3, [pc, #316]	; (7640 <_vfiprintf_r+0x224>)
    7502:	429f      	cmp	r7, r3
    7504:	d19b      	bne.n	743e <_vfiprintf_r+0x22>
    7506:	68f7      	ldr	r7, [r6, #12]
    7508:	e799      	b.n	743e <_vfiprintf_r+0x22>
    750a:	0039      	movs	r1, r7
    750c:	0030      	movs	r0, r6
    750e:	f000 faf1 	bl	7af4 <__swsetup_r>
    7512:	2800      	cmp	r0, #0
    7514:	d099      	beq.n	744a <_vfiprintf_r+0x2e>
    7516:	2001      	movs	r0, #1
    7518:	4240      	negs	r0, r0
    751a:	b01f      	add	sp, #124	; 0x7c
    751c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    751e:	2b25      	cmp	r3, #37	; 0x25
    7520:	d09f      	beq.n	7462 <_vfiprintf_r+0x46>
    7522:	3401      	adds	r4, #1
    7524:	e79a      	b.n	745c <_vfiprintf_r+0x40>
    7526:	4b44      	ldr	r3, [pc, #272]	; (7638 <_vfiprintf_r+0x21c>)
    7528:	6829      	ldr	r1, [r5, #0]
    752a:	1ac0      	subs	r0, r0, r3
    752c:	2301      	movs	r3, #1
    752e:	4083      	lsls	r3, r0
    7530:	430b      	orrs	r3, r1
    7532:	602b      	str	r3, [r5, #0]
    7534:	4664      	mov	r4, ip
    7536:	e7b7      	b.n	74a8 <_vfiprintf_r+0x8c>
    7538:	9b05      	ldr	r3, [sp, #20]
    753a:	1d18      	adds	r0, r3, #4
    753c:	681b      	ldr	r3, [r3, #0]
    753e:	9005      	str	r0, [sp, #20]
    7540:	2b00      	cmp	r3, #0
    7542:	db3a      	blt.n	75ba <_vfiprintf_r+0x19e>
    7544:	9309      	str	r3, [sp, #36]	; 0x24
    7546:	4664      	mov	r4, ip
    7548:	7823      	ldrb	r3, [r4, #0]
    754a:	2b2e      	cmp	r3, #46	; 0x2e
    754c:	d10b      	bne.n	7566 <_vfiprintf_r+0x14a>
    754e:	7863      	ldrb	r3, [r4, #1]
    7550:	1c62      	adds	r2, r4, #1
    7552:	2b2a      	cmp	r3, #42	; 0x2a
    7554:	d13f      	bne.n	75d6 <_vfiprintf_r+0x1ba>
    7556:	9b05      	ldr	r3, [sp, #20]
    7558:	3402      	adds	r4, #2
    755a:	1d1a      	adds	r2, r3, #4
    755c:	681b      	ldr	r3, [r3, #0]
    755e:	9205      	str	r2, [sp, #20]
    7560:	2b00      	cmp	r3, #0
    7562:	db35      	blt.n	75d0 <_vfiprintf_r+0x1b4>
    7564:	9307      	str	r3, [sp, #28]
    7566:	7821      	ldrb	r1, [r4, #0]
    7568:	2203      	movs	r2, #3
    756a:	4836      	ldr	r0, [pc, #216]	; (7644 <_vfiprintf_r+0x228>)
    756c:	f000 fb82 	bl	7c74 <memchr>
    7570:	2800      	cmp	r0, #0
    7572:	d007      	beq.n	7584 <_vfiprintf_r+0x168>
    7574:	4b33      	ldr	r3, [pc, #204]	; (7644 <_vfiprintf_r+0x228>)
    7576:	682a      	ldr	r2, [r5, #0]
    7578:	1ac0      	subs	r0, r0, r3
    757a:	2340      	movs	r3, #64	; 0x40
    757c:	4083      	lsls	r3, r0
    757e:	4313      	orrs	r3, r2
    7580:	602b      	str	r3, [r5, #0]
    7582:	3401      	adds	r4, #1
    7584:	7821      	ldrb	r1, [r4, #0]
    7586:	1c63      	adds	r3, r4, #1
    7588:	2206      	movs	r2, #6
    758a:	482f      	ldr	r0, [pc, #188]	; (7648 <_vfiprintf_r+0x22c>)
    758c:	9302      	str	r3, [sp, #8]
    758e:	7629      	strb	r1, [r5, #24]
    7590:	f000 fb70 	bl	7c74 <memchr>
    7594:	2800      	cmp	r0, #0
    7596:	d044      	beq.n	7622 <_vfiprintf_r+0x206>
    7598:	4b2c      	ldr	r3, [pc, #176]	; (764c <_vfiprintf_r+0x230>)
    759a:	2b00      	cmp	r3, #0
    759c:	d12f      	bne.n	75fe <_vfiprintf_r+0x1e2>
    759e:	6829      	ldr	r1, [r5, #0]
    75a0:	9b05      	ldr	r3, [sp, #20]
    75a2:	2207      	movs	r2, #7
    75a4:	05c9      	lsls	r1, r1, #23
    75a6:	d528      	bpl.n	75fa <_vfiprintf_r+0x1de>
    75a8:	189b      	adds	r3, r3, r2
    75aa:	4393      	bics	r3, r2
    75ac:	3308      	adds	r3, #8
    75ae:	9305      	str	r3, [sp, #20]
    75b0:	696b      	ldr	r3, [r5, #20]
    75b2:	9a03      	ldr	r2, [sp, #12]
    75b4:	189b      	adds	r3, r3, r2
    75b6:	616b      	str	r3, [r5, #20]
    75b8:	e74f      	b.n	745a <_vfiprintf_r+0x3e>
    75ba:	425b      	negs	r3, r3
    75bc:	60eb      	str	r3, [r5, #12]
    75be:	2302      	movs	r3, #2
    75c0:	430b      	orrs	r3, r1
    75c2:	602b      	str	r3, [r5, #0]
    75c4:	e7bf      	b.n	7546 <_vfiprintf_r+0x12a>
    75c6:	434b      	muls	r3, r1
    75c8:	3401      	adds	r4, #1
    75ca:	189b      	adds	r3, r3, r2
    75cc:	2001      	movs	r0, #1
    75ce:	e789      	b.n	74e4 <_vfiprintf_r+0xc8>
    75d0:	2301      	movs	r3, #1
    75d2:	425b      	negs	r3, r3
    75d4:	e7c6      	b.n	7564 <_vfiprintf_r+0x148>
    75d6:	2300      	movs	r3, #0
    75d8:	0014      	movs	r4, r2
    75da:	200a      	movs	r0, #10
    75dc:	001a      	movs	r2, r3
    75de:	606b      	str	r3, [r5, #4]
    75e0:	7821      	ldrb	r1, [r4, #0]
    75e2:	3930      	subs	r1, #48	; 0x30
    75e4:	2909      	cmp	r1, #9
    75e6:	d903      	bls.n	75f0 <_vfiprintf_r+0x1d4>
    75e8:	2b00      	cmp	r3, #0
    75ea:	d0bc      	beq.n	7566 <_vfiprintf_r+0x14a>
    75ec:	9207      	str	r2, [sp, #28]
    75ee:	e7ba      	b.n	7566 <_vfiprintf_r+0x14a>
    75f0:	4342      	muls	r2, r0
    75f2:	3401      	adds	r4, #1
    75f4:	1852      	adds	r2, r2, r1
    75f6:	2301      	movs	r3, #1
    75f8:	e7f2      	b.n	75e0 <_vfiprintf_r+0x1c4>
    75fa:	3307      	adds	r3, #7
    75fc:	e7d5      	b.n	75aa <_vfiprintf_r+0x18e>
    75fe:	ab05      	add	r3, sp, #20
    7600:	9300      	str	r3, [sp, #0]
    7602:	003a      	movs	r2, r7
    7604:	4b12      	ldr	r3, [pc, #72]	; (7650 <_vfiprintf_r+0x234>)
    7606:	0029      	movs	r1, r5
    7608:	0030      	movs	r0, r6
    760a:	e000      	b.n	760e <_vfiprintf_r+0x1f2>
    760c:	bf00      	nop
    760e:	9003      	str	r0, [sp, #12]
    7610:	9b03      	ldr	r3, [sp, #12]
    7612:	3301      	adds	r3, #1
    7614:	d1cc      	bne.n	75b0 <_vfiprintf_r+0x194>
    7616:	89bb      	ldrh	r3, [r7, #12]
    7618:	065b      	lsls	r3, r3, #25
    761a:	d500      	bpl.n	761e <_vfiprintf_r+0x202>
    761c:	e77b      	b.n	7516 <_vfiprintf_r+0xfa>
    761e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7620:	e77b      	b.n	751a <_vfiprintf_r+0xfe>
    7622:	ab05      	add	r3, sp, #20
    7624:	9300      	str	r3, [sp, #0]
    7626:	003a      	movs	r2, r7
    7628:	4b09      	ldr	r3, [pc, #36]	; (7650 <_vfiprintf_r+0x234>)
    762a:	0029      	movs	r1, r5
    762c:	0030      	movs	r0, r6
    762e:	f000 f87f 	bl	7730 <_printf_i>
    7632:	e7ec      	b.n	760e <_vfiprintf_r+0x1f2>
    7634:	00007fc4 	.word	0x00007fc4
    7638:	00008004 	.word	0x00008004
    763c:	00007fe4 	.word	0x00007fe4
    7640:	00007fa4 	.word	0x00007fa4
    7644:	0000800a 	.word	0x0000800a
    7648:	0000800e 	.word	0x0000800e
    764c:	00000000 	.word	0x00000000
    7650:	000073f7 	.word	0x000073f7

00007654 <_printf_common>:
    7654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7656:	0015      	movs	r5, r2
    7658:	9301      	str	r3, [sp, #4]
    765a:	688a      	ldr	r2, [r1, #8]
    765c:	690b      	ldr	r3, [r1, #16]
    765e:	9000      	str	r0, [sp, #0]
    7660:	000c      	movs	r4, r1
    7662:	4293      	cmp	r3, r2
    7664:	da00      	bge.n	7668 <_printf_common+0x14>
    7666:	0013      	movs	r3, r2
    7668:	0022      	movs	r2, r4
    766a:	602b      	str	r3, [r5, #0]
    766c:	3243      	adds	r2, #67	; 0x43
    766e:	7812      	ldrb	r2, [r2, #0]
    7670:	2a00      	cmp	r2, #0
    7672:	d001      	beq.n	7678 <_printf_common+0x24>
    7674:	3301      	adds	r3, #1
    7676:	602b      	str	r3, [r5, #0]
    7678:	6823      	ldr	r3, [r4, #0]
    767a:	069b      	lsls	r3, r3, #26
    767c:	d502      	bpl.n	7684 <_printf_common+0x30>
    767e:	682b      	ldr	r3, [r5, #0]
    7680:	3302      	adds	r3, #2
    7682:	602b      	str	r3, [r5, #0]
    7684:	2706      	movs	r7, #6
    7686:	6823      	ldr	r3, [r4, #0]
    7688:	401f      	ands	r7, r3
    768a:	d027      	beq.n	76dc <_printf_common+0x88>
    768c:	0023      	movs	r3, r4
    768e:	3343      	adds	r3, #67	; 0x43
    7690:	781b      	ldrb	r3, [r3, #0]
    7692:	1e5a      	subs	r2, r3, #1
    7694:	4193      	sbcs	r3, r2
    7696:	6822      	ldr	r2, [r4, #0]
    7698:	0692      	lsls	r2, r2, #26
    769a:	d430      	bmi.n	76fe <_printf_common+0xaa>
    769c:	0022      	movs	r2, r4
    769e:	9901      	ldr	r1, [sp, #4]
    76a0:	3243      	adds	r2, #67	; 0x43
    76a2:	9800      	ldr	r0, [sp, #0]
    76a4:	9e08      	ldr	r6, [sp, #32]
    76a6:	47b0      	blx	r6
    76a8:	1c43      	adds	r3, r0, #1
    76aa:	d025      	beq.n	76f8 <_printf_common+0xa4>
    76ac:	2306      	movs	r3, #6
    76ae:	6820      	ldr	r0, [r4, #0]
    76b0:	682a      	ldr	r2, [r5, #0]
    76b2:	68e1      	ldr	r1, [r4, #12]
    76b4:	4003      	ands	r3, r0
    76b6:	2500      	movs	r5, #0
    76b8:	2b04      	cmp	r3, #4
    76ba:	d103      	bne.n	76c4 <_printf_common+0x70>
    76bc:	1a8d      	subs	r5, r1, r2
    76be:	43eb      	mvns	r3, r5
    76c0:	17db      	asrs	r3, r3, #31
    76c2:	401d      	ands	r5, r3
    76c4:	68a3      	ldr	r3, [r4, #8]
    76c6:	6922      	ldr	r2, [r4, #16]
    76c8:	4293      	cmp	r3, r2
    76ca:	dd01      	ble.n	76d0 <_printf_common+0x7c>
    76cc:	1a9b      	subs	r3, r3, r2
    76ce:	18ed      	adds	r5, r5, r3
    76d0:	2700      	movs	r7, #0
    76d2:	42bd      	cmp	r5, r7
    76d4:	d120      	bne.n	7718 <_printf_common+0xc4>
    76d6:	2000      	movs	r0, #0
    76d8:	e010      	b.n	76fc <_printf_common+0xa8>
    76da:	3701      	adds	r7, #1
    76dc:	68e3      	ldr	r3, [r4, #12]
    76de:	682a      	ldr	r2, [r5, #0]
    76e0:	1a9b      	subs	r3, r3, r2
    76e2:	429f      	cmp	r7, r3
    76e4:	dad2      	bge.n	768c <_printf_common+0x38>
    76e6:	0022      	movs	r2, r4
    76e8:	2301      	movs	r3, #1
    76ea:	3219      	adds	r2, #25
    76ec:	9901      	ldr	r1, [sp, #4]
    76ee:	9800      	ldr	r0, [sp, #0]
    76f0:	9e08      	ldr	r6, [sp, #32]
    76f2:	47b0      	blx	r6
    76f4:	1c43      	adds	r3, r0, #1
    76f6:	d1f0      	bne.n	76da <_printf_common+0x86>
    76f8:	2001      	movs	r0, #1
    76fa:	4240      	negs	r0, r0
    76fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    76fe:	2030      	movs	r0, #48	; 0x30
    7700:	18e1      	adds	r1, r4, r3
    7702:	3143      	adds	r1, #67	; 0x43
    7704:	7008      	strb	r0, [r1, #0]
    7706:	0021      	movs	r1, r4
    7708:	1c5a      	adds	r2, r3, #1
    770a:	3145      	adds	r1, #69	; 0x45
    770c:	7809      	ldrb	r1, [r1, #0]
    770e:	18a2      	adds	r2, r4, r2
    7710:	3243      	adds	r2, #67	; 0x43
    7712:	3302      	adds	r3, #2
    7714:	7011      	strb	r1, [r2, #0]
    7716:	e7c1      	b.n	769c <_printf_common+0x48>
    7718:	0022      	movs	r2, r4
    771a:	2301      	movs	r3, #1
    771c:	321a      	adds	r2, #26
    771e:	9901      	ldr	r1, [sp, #4]
    7720:	9800      	ldr	r0, [sp, #0]
    7722:	9e08      	ldr	r6, [sp, #32]
    7724:	47b0      	blx	r6
    7726:	1c43      	adds	r3, r0, #1
    7728:	d0e6      	beq.n	76f8 <_printf_common+0xa4>
    772a:	3701      	adds	r7, #1
    772c:	e7d1      	b.n	76d2 <_printf_common+0x7e>
	...

00007730 <_printf_i>:
    7730:	b5f0      	push	{r4, r5, r6, r7, lr}
    7732:	b08b      	sub	sp, #44	; 0x2c
    7734:	9206      	str	r2, [sp, #24]
    7736:	000a      	movs	r2, r1
    7738:	3243      	adds	r2, #67	; 0x43
    773a:	9307      	str	r3, [sp, #28]
    773c:	9005      	str	r0, [sp, #20]
    773e:	9204      	str	r2, [sp, #16]
    7740:	7e0a      	ldrb	r2, [r1, #24]
    7742:	000c      	movs	r4, r1
    7744:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7746:	2a6e      	cmp	r2, #110	; 0x6e
    7748:	d100      	bne.n	774c <_printf_i+0x1c>
    774a:	e08f      	b.n	786c <_printf_i+0x13c>
    774c:	d817      	bhi.n	777e <_printf_i+0x4e>
    774e:	2a63      	cmp	r2, #99	; 0x63
    7750:	d02c      	beq.n	77ac <_printf_i+0x7c>
    7752:	d808      	bhi.n	7766 <_printf_i+0x36>
    7754:	2a00      	cmp	r2, #0
    7756:	d100      	bne.n	775a <_printf_i+0x2a>
    7758:	e099      	b.n	788e <_printf_i+0x15e>
    775a:	2a58      	cmp	r2, #88	; 0x58
    775c:	d054      	beq.n	7808 <_printf_i+0xd8>
    775e:	0026      	movs	r6, r4
    7760:	3642      	adds	r6, #66	; 0x42
    7762:	7032      	strb	r2, [r6, #0]
    7764:	e029      	b.n	77ba <_printf_i+0x8a>
    7766:	2a64      	cmp	r2, #100	; 0x64
    7768:	d001      	beq.n	776e <_printf_i+0x3e>
    776a:	2a69      	cmp	r2, #105	; 0x69
    776c:	d1f7      	bne.n	775e <_printf_i+0x2e>
    776e:	6821      	ldr	r1, [r4, #0]
    7770:	681a      	ldr	r2, [r3, #0]
    7772:	0608      	lsls	r0, r1, #24
    7774:	d523      	bpl.n	77be <_printf_i+0x8e>
    7776:	1d11      	adds	r1, r2, #4
    7778:	6019      	str	r1, [r3, #0]
    777a:	6815      	ldr	r5, [r2, #0]
    777c:	e025      	b.n	77ca <_printf_i+0x9a>
    777e:	2a73      	cmp	r2, #115	; 0x73
    7780:	d100      	bne.n	7784 <_printf_i+0x54>
    7782:	e088      	b.n	7896 <_printf_i+0x166>
    7784:	d808      	bhi.n	7798 <_printf_i+0x68>
    7786:	2a6f      	cmp	r2, #111	; 0x6f
    7788:	d029      	beq.n	77de <_printf_i+0xae>
    778a:	2a70      	cmp	r2, #112	; 0x70
    778c:	d1e7      	bne.n	775e <_printf_i+0x2e>
    778e:	2220      	movs	r2, #32
    7790:	6809      	ldr	r1, [r1, #0]
    7792:	430a      	orrs	r2, r1
    7794:	6022      	str	r2, [r4, #0]
    7796:	e003      	b.n	77a0 <_printf_i+0x70>
    7798:	2a75      	cmp	r2, #117	; 0x75
    779a:	d020      	beq.n	77de <_printf_i+0xae>
    779c:	2a78      	cmp	r2, #120	; 0x78
    779e:	d1de      	bne.n	775e <_printf_i+0x2e>
    77a0:	0022      	movs	r2, r4
    77a2:	2178      	movs	r1, #120	; 0x78
    77a4:	3245      	adds	r2, #69	; 0x45
    77a6:	7011      	strb	r1, [r2, #0]
    77a8:	4a6c      	ldr	r2, [pc, #432]	; (795c <_printf_i+0x22c>)
    77aa:	e030      	b.n	780e <_printf_i+0xde>
    77ac:	000e      	movs	r6, r1
    77ae:	681a      	ldr	r2, [r3, #0]
    77b0:	3642      	adds	r6, #66	; 0x42
    77b2:	1d11      	adds	r1, r2, #4
    77b4:	6019      	str	r1, [r3, #0]
    77b6:	6813      	ldr	r3, [r2, #0]
    77b8:	7033      	strb	r3, [r6, #0]
    77ba:	2301      	movs	r3, #1
    77bc:	e079      	b.n	78b2 <_printf_i+0x182>
    77be:	0649      	lsls	r1, r1, #25
    77c0:	d5d9      	bpl.n	7776 <_printf_i+0x46>
    77c2:	1d11      	adds	r1, r2, #4
    77c4:	6019      	str	r1, [r3, #0]
    77c6:	2300      	movs	r3, #0
    77c8:	5ed5      	ldrsh	r5, [r2, r3]
    77ca:	2d00      	cmp	r5, #0
    77cc:	da03      	bge.n	77d6 <_printf_i+0xa6>
    77ce:	232d      	movs	r3, #45	; 0x2d
    77d0:	9a04      	ldr	r2, [sp, #16]
    77d2:	426d      	negs	r5, r5
    77d4:	7013      	strb	r3, [r2, #0]
    77d6:	4b62      	ldr	r3, [pc, #392]	; (7960 <_printf_i+0x230>)
    77d8:	270a      	movs	r7, #10
    77da:	9303      	str	r3, [sp, #12]
    77dc:	e02f      	b.n	783e <_printf_i+0x10e>
    77de:	6820      	ldr	r0, [r4, #0]
    77e0:	6819      	ldr	r1, [r3, #0]
    77e2:	0605      	lsls	r5, r0, #24
    77e4:	d503      	bpl.n	77ee <_printf_i+0xbe>
    77e6:	1d08      	adds	r0, r1, #4
    77e8:	6018      	str	r0, [r3, #0]
    77ea:	680d      	ldr	r5, [r1, #0]
    77ec:	e005      	b.n	77fa <_printf_i+0xca>
    77ee:	0640      	lsls	r0, r0, #25
    77f0:	d5f9      	bpl.n	77e6 <_printf_i+0xb6>
    77f2:	680d      	ldr	r5, [r1, #0]
    77f4:	1d08      	adds	r0, r1, #4
    77f6:	6018      	str	r0, [r3, #0]
    77f8:	b2ad      	uxth	r5, r5
    77fa:	4b59      	ldr	r3, [pc, #356]	; (7960 <_printf_i+0x230>)
    77fc:	2708      	movs	r7, #8
    77fe:	9303      	str	r3, [sp, #12]
    7800:	2a6f      	cmp	r2, #111	; 0x6f
    7802:	d018      	beq.n	7836 <_printf_i+0x106>
    7804:	270a      	movs	r7, #10
    7806:	e016      	b.n	7836 <_printf_i+0x106>
    7808:	3145      	adds	r1, #69	; 0x45
    780a:	700a      	strb	r2, [r1, #0]
    780c:	4a54      	ldr	r2, [pc, #336]	; (7960 <_printf_i+0x230>)
    780e:	9203      	str	r2, [sp, #12]
    7810:	681a      	ldr	r2, [r3, #0]
    7812:	6821      	ldr	r1, [r4, #0]
    7814:	1d10      	adds	r0, r2, #4
    7816:	6018      	str	r0, [r3, #0]
    7818:	6815      	ldr	r5, [r2, #0]
    781a:	0608      	lsls	r0, r1, #24
    781c:	d522      	bpl.n	7864 <_printf_i+0x134>
    781e:	07cb      	lsls	r3, r1, #31
    7820:	d502      	bpl.n	7828 <_printf_i+0xf8>
    7822:	2320      	movs	r3, #32
    7824:	4319      	orrs	r1, r3
    7826:	6021      	str	r1, [r4, #0]
    7828:	2710      	movs	r7, #16
    782a:	2d00      	cmp	r5, #0
    782c:	d103      	bne.n	7836 <_printf_i+0x106>
    782e:	2320      	movs	r3, #32
    7830:	6822      	ldr	r2, [r4, #0]
    7832:	439a      	bics	r2, r3
    7834:	6022      	str	r2, [r4, #0]
    7836:	0023      	movs	r3, r4
    7838:	2200      	movs	r2, #0
    783a:	3343      	adds	r3, #67	; 0x43
    783c:	701a      	strb	r2, [r3, #0]
    783e:	6863      	ldr	r3, [r4, #4]
    7840:	60a3      	str	r3, [r4, #8]
    7842:	2b00      	cmp	r3, #0
    7844:	db5c      	blt.n	7900 <_printf_i+0x1d0>
    7846:	2204      	movs	r2, #4
    7848:	6821      	ldr	r1, [r4, #0]
    784a:	4391      	bics	r1, r2
    784c:	6021      	str	r1, [r4, #0]
    784e:	2d00      	cmp	r5, #0
    7850:	d158      	bne.n	7904 <_printf_i+0x1d4>
    7852:	9e04      	ldr	r6, [sp, #16]
    7854:	2b00      	cmp	r3, #0
    7856:	d064      	beq.n	7922 <_printf_i+0x1f2>
    7858:	0026      	movs	r6, r4
    785a:	9b03      	ldr	r3, [sp, #12]
    785c:	3642      	adds	r6, #66	; 0x42
    785e:	781b      	ldrb	r3, [r3, #0]
    7860:	7033      	strb	r3, [r6, #0]
    7862:	e05e      	b.n	7922 <_printf_i+0x1f2>
    7864:	0648      	lsls	r0, r1, #25
    7866:	d5da      	bpl.n	781e <_printf_i+0xee>
    7868:	b2ad      	uxth	r5, r5
    786a:	e7d8      	b.n	781e <_printf_i+0xee>
    786c:	6809      	ldr	r1, [r1, #0]
    786e:	681a      	ldr	r2, [r3, #0]
    7870:	0608      	lsls	r0, r1, #24
    7872:	d505      	bpl.n	7880 <_printf_i+0x150>
    7874:	1d11      	adds	r1, r2, #4
    7876:	6019      	str	r1, [r3, #0]
    7878:	6813      	ldr	r3, [r2, #0]
    787a:	6962      	ldr	r2, [r4, #20]
    787c:	601a      	str	r2, [r3, #0]
    787e:	e006      	b.n	788e <_printf_i+0x15e>
    7880:	0649      	lsls	r1, r1, #25
    7882:	d5f7      	bpl.n	7874 <_printf_i+0x144>
    7884:	1d11      	adds	r1, r2, #4
    7886:	6019      	str	r1, [r3, #0]
    7888:	6813      	ldr	r3, [r2, #0]
    788a:	8aa2      	ldrh	r2, [r4, #20]
    788c:	801a      	strh	r2, [r3, #0]
    788e:	2300      	movs	r3, #0
    7890:	9e04      	ldr	r6, [sp, #16]
    7892:	6123      	str	r3, [r4, #16]
    7894:	e054      	b.n	7940 <_printf_i+0x210>
    7896:	681a      	ldr	r2, [r3, #0]
    7898:	1d11      	adds	r1, r2, #4
    789a:	6019      	str	r1, [r3, #0]
    789c:	6816      	ldr	r6, [r2, #0]
    789e:	2100      	movs	r1, #0
    78a0:	6862      	ldr	r2, [r4, #4]
    78a2:	0030      	movs	r0, r6
    78a4:	f000 f9e6 	bl	7c74 <memchr>
    78a8:	2800      	cmp	r0, #0
    78aa:	d001      	beq.n	78b0 <_printf_i+0x180>
    78ac:	1b80      	subs	r0, r0, r6
    78ae:	6060      	str	r0, [r4, #4]
    78b0:	6863      	ldr	r3, [r4, #4]
    78b2:	6123      	str	r3, [r4, #16]
    78b4:	2300      	movs	r3, #0
    78b6:	9a04      	ldr	r2, [sp, #16]
    78b8:	7013      	strb	r3, [r2, #0]
    78ba:	e041      	b.n	7940 <_printf_i+0x210>
    78bc:	6923      	ldr	r3, [r4, #16]
    78be:	0032      	movs	r2, r6
    78c0:	9906      	ldr	r1, [sp, #24]
    78c2:	9805      	ldr	r0, [sp, #20]
    78c4:	9d07      	ldr	r5, [sp, #28]
    78c6:	47a8      	blx	r5
    78c8:	1c43      	adds	r3, r0, #1
    78ca:	d043      	beq.n	7954 <_printf_i+0x224>
    78cc:	6823      	ldr	r3, [r4, #0]
    78ce:	2500      	movs	r5, #0
    78d0:	079b      	lsls	r3, r3, #30
    78d2:	d40f      	bmi.n	78f4 <_printf_i+0x1c4>
    78d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    78d6:	68e0      	ldr	r0, [r4, #12]
    78d8:	4298      	cmp	r0, r3
    78da:	da3d      	bge.n	7958 <_printf_i+0x228>
    78dc:	0018      	movs	r0, r3
    78de:	e03b      	b.n	7958 <_printf_i+0x228>
    78e0:	0022      	movs	r2, r4
    78e2:	2301      	movs	r3, #1
    78e4:	3219      	adds	r2, #25
    78e6:	9906      	ldr	r1, [sp, #24]
    78e8:	9805      	ldr	r0, [sp, #20]
    78ea:	9e07      	ldr	r6, [sp, #28]
    78ec:	47b0      	blx	r6
    78ee:	1c43      	adds	r3, r0, #1
    78f0:	d030      	beq.n	7954 <_printf_i+0x224>
    78f2:	3501      	adds	r5, #1
    78f4:	68e3      	ldr	r3, [r4, #12]
    78f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    78f8:	1a9b      	subs	r3, r3, r2
    78fa:	429d      	cmp	r5, r3
    78fc:	dbf0      	blt.n	78e0 <_printf_i+0x1b0>
    78fe:	e7e9      	b.n	78d4 <_printf_i+0x1a4>
    7900:	2d00      	cmp	r5, #0
    7902:	d0a9      	beq.n	7858 <_printf_i+0x128>
    7904:	9e04      	ldr	r6, [sp, #16]
    7906:	0028      	movs	r0, r5
    7908:	0039      	movs	r1, r7
    790a:	f7fe ff69 	bl	67e0 <__aeabi_uidivmod>
    790e:	9b03      	ldr	r3, [sp, #12]
    7910:	3e01      	subs	r6, #1
    7912:	5c5b      	ldrb	r3, [r3, r1]
    7914:	0028      	movs	r0, r5
    7916:	7033      	strb	r3, [r6, #0]
    7918:	0039      	movs	r1, r7
    791a:	f7fe fedb 	bl	66d4 <__udivsi3>
    791e:	1e05      	subs	r5, r0, #0
    7920:	d1f1      	bne.n	7906 <_printf_i+0x1d6>
    7922:	2f08      	cmp	r7, #8
    7924:	d109      	bne.n	793a <_printf_i+0x20a>
    7926:	6823      	ldr	r3, [r4, #0]
    7928:	07db      	lsls	r3, r3, #31
    792a:	d506      	bpl.n	793a <_printf_i+0x20a>
    792c:	6863      	ldr	r3, [r4, #4]
    792e:	6922      	ldr	r2, [r4, #16]
    7930:	4293      	cmp	r3, r2
    7932:	dc02      	bgt.n	793a <_printf_i+0x20a>
    7934:	2330      	movs	r3, #48	; 0x30
    7936:	3e01      	subs	r6, #1
    7938:	7033      	strb	r3, [r6, #0]
    793a:	9b04      	ldr	r3, [sp, #16]
    793c:	1b9b      	subs	r3, r3, r6
    793e:	6123      	str	r3, [r4, #16]
    7940:	9b07      	ldr	r3, [sp, #28]
    7942:	aa09      	add	r2, sp, #36	; 0x24
    7944:	9300      	str	r3, [sp, #0]
    7946:	0021      	movs	r1, r4
    7948:	9b06      	ldr	r3, [sp, #24]
    794a:	9805      	ldr	r0, [sp, #20]
    794c:	f7ff fe82 	bl	7654 <_printf_common>
    7950:	1c43      	adds	r3, r0, #1
    7952:	d1b3      	bne.n	78bc <_printf_i+0x18c>
    7954:	2001      	movs	r0, #1
    7956:	4240      	negs	r0, r0
    7958:	b00b      	add	sp, #44	; 0x2c
    795a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    795c:	00008026 	.word	0x00008026
    7960:	00008015 	.word	0x00008015

00007964 <_sbrk_r>:
    7964:	2300      	movs	r3, #0
    7966:	b570      	push	{r4, r5, r6, lr}
    7968:	4c06      	ldr	r4, [pc, #24]	; (7984 <_sbrk_r+0x20>)
    796a:	0005      	movs	r5, r0
    796c:	0008      	movs	r0, r1
    796e:	6023      	str	r3, [r4, #0]
    7970:	f7fe fe92 	bl	6698 <_sbrk>
    7974:	1c43      	adds	r3, r0, #1
    7976:	d103      	bne.n	7980 <_sbrk_r+0x1c>
    7978:	6823      	ldr	r3, [r4, #0]
    797a:	2b00      	cmp	r3, #0
    797c:	d000      	beq.n	7980 <_sbrk_r+0x1c>
    797e:	602b      	str	r3, [r5, #0]
    7980:	bd70      	pop	{r4, r5, r6, pc}
    7982:	46c0      	nop			; (mov r8, r8)
    7984:	20000af0 	.word	0x20000af0

00007988 <__sread>:
    7988:	b570      	push	{r4, r5, r6, lr}
    798a:	000c      	movs	r4, r1
    798c:	250e      	movs	r5, #14
    798e:	5f49      	ldrsh	r1, [r1, r5]
    7990:	f000 f97e 	bl	7c90 <_read_r>
    7994:	2800      	cmp	r0, #0
    7996:	db03      	blt.n	79a0 <__sread+0x18>
    7998:	6d63      	ldr	r3, [r4, #84]	; 0x54
    799a:	181b      	adds	r3, r3, r0
    799c:	6563      	str	r3, [r4, #84]	; 0x54
    799e:	bd70      	pop	{r4, r5, r6, pc}
    79a0:	89a3      	ldrh	r3, [r4, #12]
    79a2:	4a02      	ldr	r2, [pc, #8]	; (79ac <__sread+0x24>)
    79a4:	4013      	ands	r3, r2
    79a6:	81a3      	strh	r3, [r4, #12]
    79a8:	e7f9      	b.n	799e <__sread+0x16>
    79aa:	46c0      	nop			; (mov r8, r8)
    79ac:	ffffefff 	.word	0xffffefff

000079b0 <__swrite>:
    79b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79b2:	001f      	movs	r7, r3
    79b4:	898b      	ldrh	r3, [r1, #12]
    79b6:	0005      	movs	r5, r0
    79b8:	000c      	movs	r4, r1
    79ba:	0016      	movs	r6, r2
    79bc:	05db      	lsls	r3, r3, #23
    79be:	d505      	bpl.n	79cc <__swrite+0x1c>
    79c0:	230e      	movs	r3, #14
    79c2:	5ec9      	ldrsh	r1, [r1, r3]
    79c4:	2200      	movs	r2, #0
    79c6:	2302      	movs	r3, #2
    79c8:	f000 f940 	bl	7c4c <_lseek_r>
    79cc:	89a3      	ldrh	r3, [r4, #12]
    79ce:	4a05      	ldr	r2, [pc, #20]	; (79e4 <__swrite+0x34>)
    79d0:	0028      	movs	r0, r5
    79d2:	4013      	ands	r3, r2
    79d4:	81a3      	strh	r3, [r4, #12]
    79d6:	0032      	movs	r2, r6
    79d8:	230e      	movs	r3, #14
    79da:	5ee1      	ldrsh	r1, [r4, r3]
    79dc:	003b      	movs	r3, r7
    79de:	f000 f875 	bl	7acc <_write_r>
    79e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    79e4:	ffffefff 	.word	0xffffefff

000079e8 <__sseek>:
    79e8:	b570      	push	{r4, r5, r6, lr}
    79ea:	000c      	movs	r4, r1
    79ec:	250e      	movs	r5, #14
    79ee:	5f49      	ldrsh	r1, [r1, r5]
    79f0:	f000 f92c 	bl	7c4c <_lseek_r>
    79f4:	89a3      	ldrh	r3, [r4, #12]
    79f6:	1c42      	adds	r2, r0, #1
    79f8:	d103      	bne.n	7a02 <__sseek+0x1a>
    79fa:	4a05      	ldr	r2, [pc, #20]	; (7a10 <__sseek+0x28>)
    79fc:	4013      	ands	r3, r2
    79fe:	81a3      	strh	r3, [r4, #12]
    7a00:	bd70      	pop	{r4, r5, r6, pc}
    7a02:	2280      	movs	r2, #128	; 0x80
    7a04:	0152      	lsls	r2, r2, #5
    7a06:	4313      	orrs	r3, r2
    7a08:	81a3      	strh	r3, [r4, #12]
    7a0a:	6560      	str	r0, [r4, #84]	; 0x54
    7a0c:	e7f8      	b.n	7a00 <__sseek+0x18>
    7a0e:	46c0      	nop			; (mov r8, r8)
    7a10:	ffffefff 	.word	0xffffefff

00007a14 <__sclose>:
    7a14:	b510      	push	{r4, lr}
    7a16:	230e      	movs	r3, #14
    7a18:	5ec9      	ldrsh	r1, [r1, r3]
    7a1a:	f000 f8e1 	bl	7be0 <_close_r>
    7a1e:	bd10      	pop	{r4, pc}

00007a20 <__swbuf_r>:
    7a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a22:	0005      	movs	r5, r0
    7a24:	000e      	movs	r6, r1
    7a26:	0014      	movs	r4, r2
    7a28:	2800      	cmp	r0, #0
    7a2a:	d004      	beq.n	7a36 <__swbuf_r+0x16>
    7a2c:	6983      	ldr	r3, [r0, #24]
    7a2e:	2b00      	cmp	r3, #0
    7a30:	d101      	bne.n	7a36 <__swbuf_r+0x16>
    7a32:	f7ff fb17 	bl	7064 <__sinit>
    7a36:	4b22      	ldr	r3, [pc, #136]	; (7ac0 <__swbuf_r+0xa0>)
    7a38:	429c      	cmp	r4, r3
    7a3a:	d12d      	bne.n	7a98 <__swbuf_r+0x78>
    7a3c:	686c      	ldr	r4, [r5, #4]
    7a3e:	69a3      	ldr	r3, [r4, #24]
    7a40:	60a3      	str	r3, [r4, #8]
    7a42:	89a3      	ldrh	r3, [r4, #12]
    7a44:	071b      	lsls	r3, r3, #28
    7a46:	d531      	bpl.n	7aac <__swbuf_r+0x8c>
    7a48:	6923      	ldr	r3, [r4, #16]
    7a4a:	2b00      	cmp	r3, #0
    7a4c:	d02e      	beq.n	7aac <__swbuf_r+0x8c>
    7a4e:	6823      	ldr	r3, [r4, #0]
    7a50:	6922      	ldr	r2, [r4, #16]
    7a52:	b2f7      	uxtb	r7, r6
    7a54:	1a98      	subs	r0, r3, r2
    7a56:	6963      	ldr	r3, [r4, #20]
    7a58:	b2f6      	uxtb	r6, r6
    7a5a:	4298      	cmp	r0, r3
    7a5c:	db05      	blt.n	7a6a <__swbuf_r+0x4a>
    7a5e:	0021      	movs	r1, r4
    7a60:	0028      	movs	r0, r5
    7a62:	f7ff fa91 	bl	6f88 <_fflush_r>
    7a66:	2800      	cmp	r0, #0
    7a68:	d126      	bne.n	7ab8 <__swbuf_r+0x98>
    7a6a:	68a3      	ldr	r3, [r4, #8]
    7a6c:	3001      	adds	r0, #1
    7a6e:	3b01      	subs	r3, #1
    7a70:	60a3      	str	r3, [r4, #8]
    7a72:	6823      	ldr	r3, [r4, #0]
    7a74:	1c5a      	adds	r2, r3, #1
    7a76:	6022      	str	r2, [r4, #0]
    7a78:	701f      	strb	r7, [r3, #0]
    7a7a:	6963      	ldr	r3, [r4, #20]
    7a7c:	4298      	cmp	r0, r3
    7a7e:	d004      	beq.n	7a8a <__swbuf_r+0x6a>
    7a80:	89a3      	ldrh	r3, [r4, #12]
    7a82:	07db      	lsls	r3, r3, #31
    7a84:	d51a      	bpl.n	7abc <__swbuf_r+0x9c>
    7a86:	2e0a      	cmp	r6, #10
    7a88:	d118      	bne.n	7abc <__swbuf_r+0x9c>
    7a8a:	0021      	movs	r1, r4
    7a8c:	0028      	movs	r0, r5
    7a8e:	f7ff fa7b 	bl	6f88 <_fflush_r>
    7a92:	2800      	cmp	r0, #0
    7a94:	d012      	beq.n	7abc <__swbuf_r+0x9c>
    7a96:	e00f      	b.n	7ab8 <__swbuf_r+0x98>
    7a98:	4b0a      	ldr	r3, [pc, #40]	; (7ac4 <__swbuf_r+0xa4>)
    7a9a:	429c      	cmp	r4, r3
    7a9c:	d101      	bne.n	7aa2 <__swbuf_r+0x82>
    7a9e:	68ac      	ldr	r4, [r5, #8]
    7aa0:	e7cd      	b.n	7a3e <__swbuf_r+0x1e>
    7aa2:	4b09      	ldr	r3, [pc, #36]	; (7ac8 <__swbuf_r+0xa8>)
    7aa4:	429c      	cmp	r4, r3
    7aa6:	d1ca      	bne.n	7a3e <__swbuf_r+0x1e>
    7aa8:	68ec      	ldr	r4, [r5, #12]
    7aaa:	e7c8      	b.n	7a3e <__swbuf_r+0x1e>
    7aac:	0021      	movs	r1, r4
    7aae:	0028      	movs	r0, r5
    7ab0:	f000 f820 	bl	7af4 <__swsetup_r>
    7ab4:	2800      	cmp	r0, #0
    7ab6:	d0ca      	beq.n	7a4e <__swbuf_r+0x2e>
    7ab8:	2601      	movs	r6, #1
    7aba:	4276      	negs	r6, r6
    7abc:	0030      	movs	r0, r6
    7abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ac0:	00007fc4 	.word	0x00007fc4
    7ac4:	00007fe4 	.word	0x00007fe4
    7ac8:	00007fa4 	.word	0x00007fa4

00007acc <_write_r>:
    7acc:	b570      	push	{r4, r5, r6, lr}
    7ace:	0005      	movs	r5, r0
    7ad0:	0008      	movs	r0, r1
    7ad2:	0011      	movs	r1, r2
    7ad4:	2200      	movs	r2, #0
    7ad6:	4c06      	ldr	r4, [pc, #24]	; (7af0 <_write_r+0x24>)
    7ad8:	6022      	str	r2, [r4, #0]
    7ada:	001a      	movs	r2, r3
    7adc:	f7fb fda6 	bl	362c <_write>
    7ae0:	1c43      	adds	r3, r0, #1
    7ae2:	d103      	bne.n	7aec <_write_r+0x20>
    7ae4:	6823      	ldr	r3, [r4, #0]
    7ae6:	2b00      	cmp	r3, #0
    7ae8:	d000      	beq.n	7aec <_write_r+0x20>
    7aea:	602b      	str	r3, [r5, #0]
    7aec:	bd70      	pop	{r4, r5, r6, pc}
    7aee:	46c0      	nop			; (mov r8, r8)
    7af0:	20000af0 	.word	0x20000af0

00007af4 <__swsetup_r>:
    7af4:	4b36      	ldr	r3, [pc, #216]	; (7bd0 <__swsetup_r+0xdc>)
    7af6:	b570      	push	{r4, r5, r6, lr}
    7af8:	681d      	ldr	r5, [r3, #0]
    7afa:	0006      	movs	r6, r0
    7afc:	000c      	movs	r4, r1
    7afe:	2d00      	cmp	r5, #0
    7b00:	d005      	beq.n	7b0e <__swsetup_r+0x1a>
    7b02:	69ab      	ldr	r3, [r5, #24]
    7b04:	2b00      	cmp	r3, #0
    7b06:	d102      	bne.n	7b0e <__swsetup_r+0x1a>
    7b08:	0028      	movs	r0, r5
    7b0a:	f7ff faab 	bl	7064 <__sinit>
    7b0e:	4b31      	ldr	r3, [pc, #196]	; (7bd4 <__swsetup_r+0xe0>)
    7b10:	429c      	cmp	r4, r3
    7b12:	d10f      	bne.n	7b34 <__swsetup_r+0x40>
    7b14:	686c      	ldr	r4, [r5, #4]
    7b16:	230c      	movs	r3, #12
    7b18:	5ee2      	ldrsh	r2, [r4, r3]
    7b1a:	b293      	uxth	r3, r2
    7b1c:	0719      	lsls	r1, r3, #28
    7b1e:	d42d      	bmi.n	7b7c <__swsetup_r+0x88>
    7b20:	06d9      	lsls	r1, r3, #27
    7b22:	d411      	bmi.n	7b48 <__swsetup_r+0x54>
    7b24:	2309      	movs	r3, #9
    7b26:	2001      	movs	r0, #1
    7b28:	6033      	str	r3, [r6, #0]
    7b2a:	3337      	adds	r3, #55	; 0x37
    7b2c:	4313      	orrs	r3, r2
    7b2e:	81a3      	strh	r3, [r4, #12]
    7b30:	4240      	negs	r0, r0
    7b32:	bd70      	pop	{r4, r5, r6, pc}
    7b34:	4b28      	ldr	r3, [pc, #160]	; (7bd8 <__swsetup_r+0xe4>)
    7b36:	429c      	cmp	r4, r3
    7b38:	d101      	bne.n	7b3e <__swsetup_r+0x4a>
    7b3a:	68ac      	ldr	r4, [r5, #8]
    7b3c:	e7eb      	b.n	7b16 <__swsetup_r+0x22>
    7b3e:	4b27      	ldr	r3, [pc, #156]	; (7bdc <__swsetup_r+0xe8>)
    7b40:	429c      	cmp	r4, r3
    7b42:	d1e8      	bne.n	7b16 <__swsetup_r+0x22>
    7b44:	68ec      	ldr	r4, [r5, #12]
    7b46:	e7e6      	b.n	7b16 <__swsetup_r+0x22>
    7b48:	075b      	lsls	r3, r3, #29
    7b4a:	d513      	bpl.n	7b74 <__swsetup_r+0x80>
    7b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7b4e:	2900      	cmp	r1, #0
    7b50:	d008      	beq.n	7b64 <__swsetup_r+0x70>
    7b52:	0023      	movs	r3, r4
    7b54:	3344      	adds	r3, #68	; 0x44
    7b56:	4299      	cmp	r1, r3
    7b58:	d002      	beq.n	7b60 <__swsetup_r+0x6c>
    7b5a:	0030      	movs	r0, r6
    7b5c:	f7ff fb8e 	bl	727c <_free_r>
    7b60:	2300      	movs	r3, #0
    7b62:	6363      	str	r3, [r4, #52]	; 0x34
    7b64:	2224      	movs	r2, #36	; 0x24
    7b66:	89a3      	ldrh	r3, [r4, #12]
    7b68:	4393      	bics	r3, r2
    7b6a:	81a3      	strh	r3, [r4, #12]
    7b6c:	2300      	movs	r3, #0
    7b6e:	6063      	str	r3, [r4, #4]
    7b70:	6923      	ldr	r3, [r4, #16]
    7b72:	6023      	str	r3, [r4, #0]
    7b74:	2308      	movs	r3, #8
    7b76:	89a2      	ldrh	r2, [r4, #12]
    7b78:	4313      	orrs	r3, r2
    7b7a:	81a3      	strh	r3, [r4, #12]
    7b7c:	6923      	ldr	r3, [r4, #16]
    7b7e:	2b00      	cmp	r3, #0
    7b80:	d10b      	bne.n	7b9a <__swsetup_r+0xa6>
    7b82:	21a0      	movs	r1, #160	; 0xa0
    7b84:	2280      	movs	r2, #128	; 0x80
    7b86:	89a3      	ldrh	r3, [r4, #12]
    7b88:	0089      	lsls	r1, r1, #2
    7b8a:	0092      	lsls	r2, r2, #2
    7b8c:	400b      	ands	r3, r1
    7b8e:	4293      	cmp	r3, r2
    7b90:	d003      	beq.n	7b9a <__swsetup_r+0xa6>
    7b92:	0021      	movs	r1, r4
    7b94:	0030      	movs	r0, r6
    7b96:	f7ff fb23 	bl	71e0 <__smakebuf_r>
    7b9a:	2301      	movs	r3, #1
    7b9c:	89a2      	ldrh	r2, [r4, #12]
    7b9e:	4013      	ands	r3, r2
    7ba0:	d011      	beq.n	7bc6 <__swsetup_r+0xd2>
    7ba2:	2300      	movs	r3, #0
    7ba4:	60a3      	str	r3, [r4, #8]
    7ba6:	6963      	ldr	r3, [r4, #20]
    7ba8:	425b      	negs	r3, r3
    7baa:	61a3      	str	r3, [r4, #24]
    7bac:	2000      	movs	r0, #0
    7bae:	6923      	ldr	r3, [r4, #16]
    7bb0:	4283      	cmp	r3, r0
    7bb2:	d1be      	bne.n	7b32 <__swsetup_r+0x3e>
    7bb4:	230c      	movs	r3, #12
    7bb6:	5ee2      	ldrsh	r2, [r4, r3]
    7bb8:	0613      	lsls	r3, r2, #24
    7bba:	d5ba      	bpl.n	7b32 <__swsetup_r+0x3e>
    7bbc:	2340      	movs	r3, #64	; 0x40
    7bbe:	4313      	orrs	r3, r2
    7bc0:	81a3      	strh	r3, [r4, #12]
    7bc2:	3801      	subs	r0, #1
    7bc4:	e7b5      	b.n	7b32 <__swsetup_r+0x3e>
    7bc6:	0792      	lsls	r2, r2, #30
    7bc8:	d400      	bmi.n	7bcc <__swsetup_r+0xd8>
    7bca:	6963      	ldr	r3, [r4, #20]
    7bcc:	60a3      	str	r3, [r4, #8]
    7bce:	e7ed      	b.n	7bac <__swsetup_r+0xb8>
    7bd0:	200000fc 	.word	0x200000fc
    7bd4:	00007fc4 	.word	0x00007fc4
    7bd8:	00007fe4 	.word	0x00007fe4
    7bdc:	00007fa4 	.word	0x00007fa4

00007be0 <_close_r>:
    7be0:	2300      	movs	r3, #0
    7be2:	b570      	push	{r4, r5, r6, lr}
    7be4:	4c06      	ldr	r4, [pc, #24]	; (7c00 <_close_r+0x20>)
    7be6:	0005      	movs	r5, r0
    7be8:	0008      	movs	r0, r1
    7bea:	6023      	str	r3, [r4, #0]
    7bec:	f7fe fd66 	bl	66bc <_close>
    7bf0:	1c43      	adds	r3, r0, #1
    7bf2:	d103      	bne.n	7bfc <_close_r+0x1c>
    7bf4:	6823      	ldr	r3, [r4, #0]
    7bf6:	2b00      	cmp	r3, #0
    7bf8:	d000      	beq.n	7bfc <_close_r+0x1c>
    7bfa:	602b      	str	r3, [r5, #0]
    7bfc:	bd70      	pop	{r4, r5, r6, pc}
    7bfe:	46c0      	nop			; (mov r8, r8)
    7c00:	20000af0 	.word	0x20000af0

00007c04 <_fstat_r>:
    7c04:	2300      	movs	r3, #0
    7c06:	b570      	push	{r4, r5, r6, lr}
    7c08:	4c06      	ldr	r4, [pc, #24]	; (7c24 <_fstat_r+0x20>)
    7c0a:	0005      	movs	r5, r0
    7c0c:	0008      	movs	r0, r1
    7c0e:	0011      	movs	r1, r2
    7c10:	6023      	str	r3, [r4, #0]
    7c12:	f7fe fd56 	bl	66c2 <_fstat>
    7c16:	1c43      	adds	r3, r0, #1
    7c18:	d103      	bne.n	7c22 <_fstat_r+0x1e>
    7c1a:	6823      	ldr	r3, [r4, #0]
    7c1c:	2b00      	cmp	r3, #0
    7c1e:	d000      	beq.n	7c22 <_fstat_r+0x1e>
    7c20:	602b      	str	r3, [r5, #0]
    7c22:	bd70      	pop	{r4, r5, r6, pc}
    7c24:	20000af0 	.word	0x20000af0

00007c28 <_isatty_r>:
    7c28:	2300      	movs	r3, #0
    7c2a:	b570      	push	{r4, r5, r6, lr}
    7c2c:	4c06      	ldr	r4, [pc, #24]	; (7c48 <_isatty_r+0x20>)
    7c2e:	0005      	movs	r5, r0
    7c30:	0008      	movs	r0, r1
    7c32:	6023      	str	r3, [r4, #0]
    7c34:	f7fe fd4a 	bl	66cc <_isatty>
    7c38:	1c43      	adds	r3, r0, #1
    7c3a:	d103      	bne.n	7c44 <_isatty_r+0x1c>
    7c3c:	6823      	ldr	r3, [r4, #0]
    7c3e:	2b00      	cmp	r3, #0
    7c40:	d000      	beq.n	7c44 <_isatty_r+0x1c>
    7c42:	602b      	str	r3, [r5, #0]
    7c44:	bd70      	pop	{r4, r5, r6, pc}
    7c46:	46c0      	nop			; (mov r8, r8)
    7c48:	20000af0 	.word	0x20000af0

00007c4c <_lseek_r>:
    7c4c:	b570      	push	{r4, r5, r6, lr}
    7c4e:	0005      	movs	r5, r0
    7c50:	0008      	movs	r0, r1
    7c52:	0011      	movs	r1, r2
    7c54:	2200      	movs	r2, #0
    7c56:	4c06      	ldr	r4, [pc, #24]	; (7c70 <_lseek_r+0x24>)
    7c58:	6022      	str	r2, [r4, #0]
    7c5a:	001a      	movs	r2, r3
    7c5c:	f7fe fd38 	bl	66d0 <_lseek>
    7c60:	1c43      	adds	r3, r0, #1
    7c62:	d103      	bne.n	7c6c <_lseek_r+0x20>
    7c64:	6823      	ldr	r3, [r4, #0]
    7c66:	2b00      	cmp	r3, #0
    7c68:	d000      	beq.n	7c6c <_lseek_r+0x20>
    7c6a:	602b      	str	r3, [r5, #0]
    7c6c:	bd70      	pop	{r4, r5, r6, pc}
    7c6e:	46c0      	nop			; (mov r8, r8)
    7c70:	20000af0 	.word	0x20000af0

00007c74 <memchr>:
    7c74:	b2c9      	uxtb	r1, r1
    7c76:	1882      	adds	r2, r0, r2
    7c78:	4290      	cmp	r0, r2
    7c7a:	d101      	bne.n	7c80 <memchr+0xc>
    7c7c:	2000      	movs	r0, #0
    7c7e:	4770      	bx	lr
    7c80:	7803      	ldrb	r3, [r0, #0]
    7c82:	428b      	cmp	r3, r1
    7c84:	d0fb      	beq.n	7c7e <memchr+0xa>
    7c86:	3001      	adds	r0, #1
    7c88:	e7f6      	b.n	7c78 <memchr+0x4>

00007c8a <__malloc_lock>:
    7c8a:	4770      	bx	lr

00007c8c <__malloc_unlock>:
    7c8c:	4770      	bx	lr
	...

00007c90 <_read_r>:
    7c90:	b570      	push	{r4, r5, r6, lr}
    7c92:	0005      	movs	r5, r0
    7c94:	0008      	movs	r0, r1
    7c96:	0011      	movs	r1, r2
    7c98:	2200      	movs	r2, #0
    7c9a:	4c06      	ldr	r4, [pc, #24]	; (7cb4 <_read_r+0x24>)
    7c9c:	6022      	str	r2, [r4, #0]
    7c9e:	001a      	movs	r2, r3
    7ca0:	f7fb fca2 	bl	35e8 <_read>
    7ca4:	1c43      	adds	r3, r0, #1
    7ca6:	d103      	bne.n	7cb0 <_read_r+0x20>
    7ca8:	6823      	ldr	r3, [r4, #0]
    7caa:	2b00      	cmp	r3, #0
    7cac:	d000      	beq.n	7cb0 <_read_r+0x20>
    7cae:	602b      	str	r3, [r5, #0]
    7cb0:	bd70      	pop	{r4, r5, r6, pc}
    7cb2:	46c0      	nop			; (mov r8, r8)
    7cb4:	20000af0 	.word	0x20000af0
    7cb8:	42002c00 	.word	0x42002c00
    7cbc:	42003000 	.word	0x42003000
    7cc0:	42003400 	.word	0x42003400
    7cc4:	42003800 	.word	0x42003800
    7cc8:	42003c00 	.word	0x42003c00
    7ccc:	10000800 	.word	0x10000800
    7cd0:	40002000 	.word	0x40002000
    7cd4:	00008000 	.word	0x00008000
    7cd8:	30257830 	.word	0x30257830
    7cdc:	25207832 	.word	0x25207832
    7ce0:	0a783230 	.word	0x0a783230
    7ce4:	0000000d 	.word	0x0000000d

00007ce8 <mmc_trans_multipliers>:
    7ce8:	00000000 0000000a 0000000c 0000000d     ................
    7cf8:	0000000f 00000014 0000001a 0000001e     ................
    7d08:	00000023 00000028 0000002d 00000034     #...(...-...4...
    7d18:	00000037 0000003c 00000046 00000050     7...<...F...P...

00007d28 <sd_mmc_trans_units>:
    7d28:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00007d44 <sd_trans_multipliers>:
    7d44:	00000000 0000000a 0000000c 0000000d     ................
    7d54:	0000000f 00000014 00000019 0000001e     ................
    7d64:	00000023 00000028 0000002d 00000032     #...(...-...2...
    7d74:	00000037 0000003c 00000046 00000050     7...<...F...P...
    7d84:	000012da 000013b0 000013b0 0000121c     ................
    7d94:	000013b0 000013b0 000013b0 000013b0     ................
    7da4:	000013b0 000013b0 000013b0 000013b0     ................
    7db4:	000013b0 000013b0 000013b0 000013b0     ................
    7dc4:	000013b0 000013b0 00001240 000013b0     ........@.......
    7dd4:	000013b0 000013b0 000013b0 000013b0     ................
    7de4:	000013b0 000013b0 000012ca 0000135e     ............^...
    7df4:	000013b0 000013b0 0000137e 000013b0     ........~.......
    7e04:	000013b0 000013b0 000013b0 000013b0     ................
    7e14:	000013b0 00001306 000013b0 000013b0     ................
    7e24:	000013a0 000013b0 000013a8 000013b0     ................
    7e34:	000013b0 000013b0 000013b0 00001396     ................
    7e44:	000013b0 000013b0 000013b0 000013b0     ................
    7e54:	000013b0 000013b0 000013b0 000013b0     ................
    7e64:	000013b0 000013b0 000013b0 000013b0     ................
    7e74:	000013b0 000013b0 000013b0 000013b0     ................
    7e84:	000013b0 000013b0 000013b0 000013b0     ................
    7e94:	000013b0 000013b0 000013b0 000013b0     ................
    7ea4:	000013b0 000013b0 000013b0 000013b0     ................
    7eb4:	000013b0 000013b0 000013b0 000013b0     ................
    7ec4:	000013b0 000013b0 000013b0 000013b0     ................
    7ed4:	000013b0 000013b0 000013b0 000013b0     ................
    7ee4:	000013b0 000013b0 000012d2 31333231     ............1231
    7ef4:	32313332 33323133 00000000 0000244a     23123123....J$..
    7f04:	00002446 00002446 000024b4 000024b4     F$..F$...$...$..
    7f14:	0000245e 00002450 00002464 000024a2     ^$..P$..d$...$..
    7f24:	00002638 00002618 00002618 000026a4     8&...&...&...&..
    7f34:	0000262a 00002646 0000261c 00002654     *&..F&...&..T&..
    7f44:	00002694 00003f1c 00003f2a 00003fc4     .&...?..*?...?..
    7f54:	00004064 000040c8                       d@...@..

00007f5c <_usb_device_irq_bits>:
    7f5c:	00080004 00800070 01000001 00000200     ....p...........

00007f6c <_usb_endpoint_irq_bits>:
    7f6c:	60100c03 42000800 42000c00 42001000     ...`...B...B...B
    7f7c:	42001400 42001800 42001c00 2f445322     ...B...B...B"SD/
    7f8c:	20434d4d 64726143 65766f20 50532072     MMC Card over SP
    7f9c:	00002249                                I"..

00007fa0 <_global_impure_ptr>:
    7fa0:	20000100                                ... 

00007fa4 <__sf_fake_stderr>:
	...

00007fc4 <__sf_fake_stdin>:
	...

00007fe4 <__sf_fake_stdout>:
	...
    8004:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8014:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8024:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8034:	00006665                                ef..

00008038 <_init>:
    8038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    803a:	46c0      	nop			; (mov r8, r8)
    803c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    803e:	bc08      	pop	{r3}
    8040:	469e      	mov	lr, r3
    8042:	4770      	bx	lr

00008044 <__init_array_start>:
    8044:	000000dd 	.word	0x000000dd

00008048 <_fini>:
    8048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    804a:	46c0      	nop			; (mov r8, r8)
    804c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    804e:	bc08      	pop	{r3}
    8050:	469e      	mov	lr, r3
    8052:	4770      	bx	lr

00008054 <__fini_array_start>:
    8054:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <sd_mmc_cards>:
	...
20000014:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

20000030 <udi_api_msc>:
20000030:	0ddd 0000 1451 0000 1479 0000 0d81 0000     ....Q...y.......
20000040:	0000 0000                                   ....

20000044 <udi_msc_b_ack_trans>:
20000044:	0101                                             .

20000045 <udi_msc_b_reset_trans>:
20000045:	0001 5500                                        ...

20000048 <udi_msc_csw>:
20000048:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20000058 <udi_msc_inquiry_data.12580>:
20000058:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
20000078:	2e31 3030                                   1.00

2000007c <udc_string_desc>:
2000007c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000098 <udc_string_desc_languageid>:
20000098:	0304 0409                                   ....

2000009c <udc_string_manufacturer_name>:
2000009c:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

200000a8 <udc_string_product_name>:
200000a8:	534d 0043                                   MSC.

200000ac <udc_config>:
200000ac:	00e0 2000 00b8 2000 0000 0000               ... ... ....

200000b8 <udc_config_lsfs>:
200000b8:	00c0 2000 00f4 2000                         ... ... 

200000c0 <udc_desc_fs>:
200000c0:	0209 0020 0101 c000 0932 0004 0200 0608     .. .....2.......
200000d0:	0050 0507 0281 0040 0700 0205 4002 0000     P.....@......@..

200000e0 <udc_device_desc>:
200000e0:	0112 0200 0000 4000 03eb 2403 0100 0201     .......@...$....
200000f0:	0103 0000                                   ....

200000f4 <udi_apis>:
200000f4:	0030 2000                                   0.. 

200000f8 <ss_pins>:
200000f8:	0105                                             .

200000f9 <g_interrupt_enabled>:
200000f9:	0001 0000                                        ...

200000fc <_impure_ptr>:
200000fc:	0100 2000                                   ... 

20000100 <impure_data>:
20000100:	0000 0000 7fc4 0000 7fe4 0000 7fa4 0000     ................
	...
