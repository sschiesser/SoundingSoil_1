
SoundingSoil_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000072c0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000072c0  000072c0  000172c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000160  20000000  000072c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000984  20000160  00007428  00020160  2**2
                  ALLOC
  4 .stack        00002004  20000ae4  00007dac  00020160  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
  7 .debug_info   0004e5d4  00000000  00000000  000201e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006c7a  00000000  00000000  0006e7b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000dac0  00000000  00000000  0007542f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c98  00000000  00000000  00082eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001408  00000000  00000000  00083b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000dc47  00000000  00000000  00084f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001916e  00000000  00000000  00092bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009b6ca  00000000  00000000  000abd44  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002598  00000000  00000000  00147410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 2a 00 20 b1 60 00 00 ad 60 00 00 ad 60 00 00     .*. .`...`...`..
	...
      2c:	ad 60 00 00 00 00 00 00 00 00 00 00 ad 60 00 00     .`...........`..
      3c:	ad 60 00 00 ad 60 00 00 ad 60 00 00 ad 60 00 00     .`...`...`...`..
      4c:	ad 60 00 00 a9 46 00 00 ad 60 00 00 ad 60 00 00     .`...F...`...`..
      5c:	65 3e 00 00 ad 60 00 00 45 1b 00 00 55 1b 00 00     e>...`..E...U...
      6c:	65 1b 00 00 75 1b 00 00 85 1b 00 00 95 1b 00 00     e...u...........
      7c:	ad 60 00 00 ad 60 00 00 ad 60 00 00 ad 60 00 00     .`...`...`...`..
      8c:	ad 60 00 00 ad 60 00 00 ad 60 00 00 ad 60 00 00     .`...`...`...`..
      9c:	ad 60 00 00 ad 60 00 00 ad 60 00 00 ad 60 00 00     .`...`...`...`..
      ac:	ad 60 00 00 00 00 00 00                             .`......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000160 	.word	0x20000160
      d4:	00000000 	.word	0x00000000
      d8:	000072c8 	.word	0x000072c8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000164 	.word	0x20000164
     108:	000072c8 	.word	0x000072c8
     10c:	000072c8 	.word	0x000072c8
     110:	00000000 	.word	0x00000000

00000114 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     114:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     116:	4b07      	ldr	r3, [pc, #28]	; (134 <sd_mmc_configure_slot+0x20>)
     118:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     11a:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     11c:	5ccb      	ldrb	r3, [r1, r3]
     11e:	1e5a      	subs	r2, r3, #1
     120:	4193      	sbcs	r3, r2
     122:	b2db      	uxtb	r3, r3
     124:	7c4a      	ldrb	r2, [r1, #17]
     126:	6809      	ldr	r1, [r1, #0]
     128:	4803      	ldr	r0, [pc, #12]	; (138 <sd_mmc_configure_slot+0x24>)
     12a:	7800      	ldrb	r0, [r0, #0]
     12c:	4c03      	ldr	r4, [pc, #12]	; (13c <sd_mmc_configure_slot+0x28>)
     12e:	47a0      	blx	r4
}
     130:	bd10      	pop	{r4, pc}
     132:	46c0      	nop			; (mov r8, r8)
     134:	2000017c 	.word	0x2000017c
     138:	20000185 	.word	0x20000185
     13c:	0000574d 	.word	0x0000574d

00000140 <sd_mmc_select_slot>:
{
     140:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     142:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     144:	2800      	cmp	r0, #0
     146:	d001      	beq.n	14c <sd_mmc_select_slot+0xc>
}
     148:	0018      	movs	r0, r3
     14a:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     14c:	4b40      	ldr	r3, [pc, #256]	; (250 <sd_mmc_select_slot+0x110>)
     14e:	7a19      	ldrb	r1, [r3, #8]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     150:	09ca      	lsrs	r2, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     152:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     154:	2a00      	cmp	r2, #0
     156:	d104      	bne.n	162 <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     158:	094b      	lsrs	r3, r1, #5
     15a:	01db      	lsls	r3, r3, #7
     15c:	4a3d      	ldr	r2, [pc, #244]	; (254 <sd_mmc_select_slot+0x114>)
     15e:	4694      	mov	ip, r2
     160:	4463      	add	r3, ip
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     162:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     164:	221f      	movs	r2, #31
     166:	400a      	ands	r2, r1
     168:	2301      	movs	r3, #1
     16a:	4093      	lsls	r3, r2
     16c:	4218      	tst	r0, r3
     16e:	d010      	beq.n	192 <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     170:	4b37      	ldr	r3, [pc, #220]	; (250 <sd_mmc_select_slot+0x110>)
     172:	7b9b      	ldrb	r3, [r3, #14]
     174:	2b01      	cmp	r3, #1
     176:	d004      	beq.n	182 <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     178:	2204      	movs	r2, #4
     17a:	4b35      	ldr	r3, [pc, #212]	; (250 <sd_mmc_select_slot+0x110>)
     17c:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     17e:	2302      	movs	r3, #2
     180:	e7e2      	b.n	148 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     182:	4b35      	ldr	r3, [pc, #212]	; (258 <sd_mmc_select_slot+0x118>)
     184:	781b      	ldrb	r3, [r3, #0]
     186:	2b00      	cmp	r3, #0
     188:	d0f6      	beq.n	178 <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     18a:	2200      	movs	r2, #0
     18c:	4b33      	ldr	r3, [pc, #204]	; (25c <sd_mmc_select_slot+0x11c>)
     18e:	601a      	str	r2, [r3, #0]
     190:	e7f2      	b.n	178 <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     192:	4b2f      	ldr	r3, [pc, #188]	; (250 <sd_mmc_select_slot+0x110>)
     194:	7b9a      	ldrb	r2, [r3, #14]
     196:	2a04      	cmp	r2, #4
     198:	d005      	beq.n	1a6 <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     19a:	2a01      	cmp	r2, #1
     19c:	d033      	beq.n	206 <sd_mmc_select_slot+0xc6>
		return SD_MMC_ERR_UNUSABLE;
     19e:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     1a0:	2a03      	cmp	r2, #3
     1a2:	d0d1      	beq.n	148 <sd_mmc_select_slot+0x8>
     1a4:	e045      	b.n	232 <sd_mmc_select_slot+0xf2>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     1a6:	3a03      	subs	r2, #3
     1a8:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     1aa:	4b2c      	ldr	r3, [pc, #176]	; (25c <sd_mmc_select_slot+0x11c>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	2b00      	cmp	r3, #0
     1b0:	d017      	beq.n	1e2 <sd_mmc_select_slot+0xa2>
		sd_mmc_sam_systick_used = false;
     1b2:	2200      	movs	r2, #0
     1b4:	4b28      	ldr	r3, [pc, #160]	; (258 <sd_mmc_select_slot+0x118>)
     1b6:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     1b8:	2000      	movs	r0, #0
     1ba:	4b29      	ldr	r3, [pc, #164]	; (260 <sd_mmc_select_slot+0x120>)
     1bc:	4798      	blx	r3
     1be:	22fa      	movs	r2, #250	; 0xfa
     1c0:	0092      	lsls	r2, r2, #2
     1c2:	2300      	movs	r3, #0
     1c4:	2100      	movs	r1, #0
     1c6:	4c27      	ldr	r4, [pc, #156]	; (264 <sd_mmc_select_slot+0x124>)
     1c8:	47a0      	blx	r4
     1ca:	4a27      	ldr	r2, [pc, #156]	; (268 <sd_mmc_select_slot+0x128>)
     1cc:	2300      	movs	r3, #0
     1ce:	1880      	adds	r0, r0, r2
     1d0:	4159      	adcs	r1, r3
     1d2:	4a26      	ldr	r2, [pc, #152]	; (26c <sd_mmc_select_slot+0x12c>)
     1d4:	2300      	movs	r3, #0
     1d6:	4c26      	ldr	r4, [pc, #152]	; (270 <sd_mmc_select_slot+0x130>)
     1d8:	47a0      	blx	r4
     1da:	4b26      	ldr	r3, [pc, #152]	; (274 <sd_mmc_select_slot+0x134>)
     1dc:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     1de:	2302      	movs	r3, #2
     1e0:	e7b2      	b.n	148 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     1e2:	2401      	movs	r4, #1
     1e4:	4b1c      	ldr	r3, [pc, #112]	; (258 <sd_mmc_select_slot+0x118>)
     1e6:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     1e8:	2000      	movs	r0, #0
     1ea:	4b1d      	ldr	r3, [pc, #116]	; (260 <sd_mmc_select_slot+0x120>)
     1ec:	4798      	blx	r3
     1ee:	21fa      	movs	r1, #250	; 0xfa
     1f0:	0149      	lsls	r1, r1, #5
     1f2:	4b21      	ldr	r3, [pc, #132]	; (278 <sd_mmc_select_slot+0x138>)
     1f4:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     1f6:	23fa      	movs	r3, #250	; 0xfa
     1f8:	009b      	lsls	r3, r3, #2
     1fa:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     1fc:	4b17      	ldr	r3, [pc, #92]	; (25c <sd_mmc_select_slot+0x11c>)
     1fe:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     200:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     202:	2302      	movs	r3, #2
     204:	e7a0      	b.n	148 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     206:	4b14      	ldr	r3, [pc, #80]	; (258 <sd_mmc_select_slot+0x118>)
     208:	781b      	ldrb	r3, [r3, #0]
     20a:	2b00      	cmp	r3, #0
     20c:	d007      	beq.n	21e <sd_mmc_select_slot+0xde>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     20e:	4b13      	ldr	r3, [pc, #76]	; (25c <sd_mmc_select_slot+0x11c>)
     210:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     212:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     214:	03d2      	lsls	r2, r2, #15
     216:	d597      	bpl.n	148 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     218:	2200      	movs	r2, #0
     21a:	4b10      	ldr	r3, [pc, #64]	; (25c <sd_mmc_select_slot+0x11c>)
     21c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     21e:	4b0c      	ldr	r3, [pc, #48]	; (250 <sd_mmc_select_slot+0x110>)
     220:	2202      	movs	r2, #2
     222:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     224:	4a15      	ldr	r2, [pc, #84]	; (27c <sd_mmc_select_slot+0x13c>)
     226:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     228:	2201      	movs	r2, #1
     22a:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     22c:	2100      	movs	r1, #0
     22e:	3221      	adds	r2, #33	; 0x21
     230:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     232:	2200      	movs	r2, #0
     234:	4b12      	ldr	r3, [pc, #72]	; (280 <sd_mmc_select_slot+0x140>)
     236:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     238:	4c05      	ldr	r4, [pc, #20]	; (250 <sd_mmc_select_slot+0x110>)
     23a:	4b12      	ldr	r3, [pc, #72]	; (284 <sd_mmc_select_slot+0x144>)
     23c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     23e:	4b12      	ldr	r3, [pc, #72]	; (288 <sd_mmc_select_slot+0x148>)
     240:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     242:	7ba3      	ldrb	r3, [r4, #14]
     244:	3b02      	subs	r3, #2
     246:	425a      	negs	r2, r3
     248:	4153      	adcs	r3, r2
     24a:	b2db      	uxtb	r3, r3
     24c:	e77c      	b.n	148 <sd_mmc_select_slot+0x8>
     24e:	46c0      	nop			; (mov r8, r8)
     250:	2000000c 	.word	0x2000000c
     254:	41004400 	.word	0x41004400
     258:	20000184 	.word	0x20000184
     25c:	e000e010 	.word	0xe000e010
     260:	00005e3d 	.word	0x00005e3d
     264:	00006575 	.word	0x00006575
     268:	00001b57 	.word	0x00001b57
     26c:	00001b58 	.word	0x00001b58
     270:	00006535 	.word	0x00006535
     274:	20000001 	.word	0x20000001
     278:	000061cd 	.word	0x000061cd
     27c:	00061a80 	.word	0x00061a80
     280:	20000185 	.word	0x20000185
     284:	2000017c 	.word	0x2000017c
     288:	00000115 	.word	0x00000115

0000028c <sd_mmc_cmd13>:
{
     28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     28e:	4d09      	ldr	r5, [pc, #36]	; (2b4 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     290:	4f09      	ldr	r7, [pc, #36]	; (2b8 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     292:	4e0a      	ldr	r6, [pc, #40]	; (2bc <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     294:	2100      	movs	r1, #0
     296:	480a      	ldr	r0, [pc, #40]	; (2c0 <sd_mmc_cmd13+0x34>)
     298:	47b8      	blx	r7
     29a:	1e04      	subs	r4, r0, #0
     29c:	d007      	beq.n	2ae <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     29e:	47b0      	blx	r6
     2a0:	23ff      	movs	r3, #255	; 0xff
     2a2:	4203      	tst	r3, r0
     2a4:	d003      	beq.n	2ae <sd_mmc_cmd13+0x22>
     2a6:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     2a8:	2d00      	cmp	r5, #0
     2aa:	d1f3      	bne.n	294 <sd_mmc_cmd13+0x8>
			return false;
     2ac:	2400      	movs	r4, #0
}
     2ae:	0020      	movs	r0, r4
     2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	00030d41 	.word	0x00030d41
     2b8:	00005991 	.word	0x00005991
     2bc:	000059a9 	.word	0x000059a9
     2c0:	00001b0d 	.word	0x00001b0d

000002c4 <sd_mmc_cmd9_spi>:
{
     2c4:	b510      	push	{r4, lr}
     2c6:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     2c8:	4b0c      	ldr	r3, [pc, #48]	; (2fc <sd_mmc_cmd9_spi+0x38>)
     2ca:	681b      	ldr	r3, [r3, #0]
     2cc:	8999      	ldrh	r1, [r3, #12]
     2ce:	0409      	lsls	r1, r1, #16
     2d0:	2301      	movs	r3, #1
     2d2:	9300      	str	r3, [sp, #0]
     2d4:	2210      	movs	r2, #16
     2d6:	480a      	ldr	r0, [pc, #40]	; (300 <sd_mmc_cmd9_spi+0x3c>)
     2d8:	4c0a      	ldr	r4, [pc, #40]	; (304 <sd_mmc_cmd9_spi+0x40>)
     2da:	47a0      	blx	r4
     2dc:	2800      	cmp	r0, #0
     2de:	d101      	bne.n	2e4 <sd_mmc_cmd9_spi+0x20>
}
     2e0:	b002      	add	sp, #8
     2e2:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     2e4:	4b05      	ldr	r3, [pc, #20]	; (2fc <sd_mmc_cmd9_spi+0x38>)
     2e6:	6818      	ldr	r0, [r3, #0]
     2e8:	3012      	adds	r0, #18
     2ea:	2101      	movs	r1, #1
     2ec:	4b06      	ldr	r3, [pc, #24]	; (308 <sd_mmc_cmd9_spi+0x44>)
     2ee:	4798      	blx	r3
     2f0:	2800      	cmp	r0, #0
     2f2:	d0f5      	beq.n	2e0 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     2f4:	4b05      	ldr	r3, [pc, #20]	; (30c <sd_mmc_cmd9_spi+0x48>)
     2f6:	4798      	blx	r3
     2f8:	e7f2      	b.n	2e0 <sd_mmc_cmd9_spi+0x1c>
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	2000017c 	.word	0x2000017c
     300:	00081109 	.word	0x00081109
     304:	00005801 	.word	0x00005801
     308:	00005a2d 	.word	0x00005a2d
     30c:	00005ab9 	.word	0x00005ab9

00000310 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     310:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     312:	4b04      	ldr	r3, [pc, #16]	; (324 <sd_mmc_deselect_slot+0x14>)
     314:	781b      	ldrb	r3, [r3, #0]
     316:	2b00      	cmp	r3, #0
     318:	d000      	beq.n	31c <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     31a:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     31c:	2000      	movs	r0, #0
     31e:	4b02      	ldr	r3, [pc, #8]	; (328 <sd_mmc_deselect_slot+0x18>)
     320:	4798      	blx	r3
}
     322:	e7fa      	b.n	31a <sd_mmc_deselect_slot+0xa>
     324:	20000185 	.word	0x20000185
     328:	000057a1 	.word	0x000057a1

0000032c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     32c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     32e:	2204      	movs	r2, #4
     330:	4b03      	ldr	r3, [pc, #12]	; (340 <sd_mmc_init+0x14>)
     332:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     334:	32fb      	adds	r2, #251	; 0xfb
     336:	4b03      	ldr	r3, [pc, #12]	; (344 <sd_mmc_init+0x18>)
     338:	701a      	strb	r2, [r3, #0]
	driver_init();
     33a:	4b03      	ldr	r3, [pc, #12]	; (348 <sd_mmc_init+0x1c>)
     33c:	4798      	blx	r3
}
     33e:	bd10      	pop	{r4, pc}
     340:	2000000c 	.word	0x2000000c
     344:	20000185 	.word	0x20000185
     348:	00005659 	.word	0x00005659

0000034c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     34c:	b5f0      	push	{r4, r5, r6, r7, lr}
     34e:	46c6      	mov	lr, r8
     350:	b500      	push	{lr}
     352:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     354:	4bcb      	ldr	r3, [pc, #812]	; (684 <sd_mmc_check+0x338>)
     356:	4798      	blx	r3
     358:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     35a:	2801      	cmp	r0, #1
     35c:	d006      	beq.n	36c <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     35e:	4bca      	ldr	r3, [pc, #808]	; (688 <sd_mmc_check+0x33c>)
     360:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     362:	0020      	movs	r0, r4
     364:	b008      	add	sp, #32
     366:	bc04      	pop	{r2}
     368:	4690      	mov	r8, r2
     36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     36c:	4bc7      	ldr	r3, [pc, #796]	; (68c <sd_mmc_check+0x340>)
     36e:	681b      	ldr	r3, [r3, #0]
     370:	2201      	movs	r2, #1
     372:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     374:	2200      	movs	r2, #0
     376:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     378:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     37a:	4bc5      	ldr	r3, [pc, #788]	; (690 <sd_mmc_check+0x344>)
     37c:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     37e:	2100      	movs	r1, #0
     380:	2088      	movs	r0, #136	; 0x88
     382:	0140      	lsls	r0, r0, #5
     384:	4bc3      	ldr	r3, [pc, #780]	; (694 <sd_mmc_check+0x348>)
     386:	4798      	blx	r3
     388:	2800      	cmp	r0, #0
     38a:	d107      	bne.n	39c <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     38c:	4bbf      	ldr	r3, [pc, #764]	; (68c <sd_mmc_check+0x340>)
     38e:	681b      	ldr	r3, [r3, #0]
     390:	2203      	movs	r2, #3
     392:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     394:	4bbc      	ldr	r3, [pc, #752]	; (688 <sd_mmc_check+0x33c>)
     396:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     398:	2403      	movs	r4, #3
     39a:	e7e2      	b.n	362 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     39c:	21d5      	movs	r1, #213	; 0xd5
     39e:	0049      	lsls	r1, r1, #1
     3a0:	48bd      	ldr	r0, [pc, #756]	; (698 <sd_mmc_check+0x34c>)
     3a2:	4bbc      	ldr	r3, [pc, #752]	; (694 <sd_mmc_check+0x348>)
     3a4:	4798      	blx	r3
	*v2 = 0;
     3a6:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     3a8:	2800      	cmp	r0, #0
     3aa:	d125      	bne.n	3f8 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     3ac:	4bb7      	ldr	r3, [pc, #732]	; (68c <sd_mmc_check+0x340>)
     3ae:	681b      	ldr	r3, [r3, #0]
     3b0:	7bdb      	ldrb	r3, [r3, #15]
     3b2:	07db      	lsls	r3, r3, #31
     3b4:	d500      	bpl.n	3b8 <sd_mmc_check+0x6c>
     3b6:	e1eb      	b.n	790 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     3b8:	4bb4      	ldr	r3, [pc, #720]	; (68c <sd_mmc_check+0x340>)
     3ba:	681b      	ldr	r3, [r3, #0]
     3bc:	7bda      	ldrb	r2, [r3, #15]
     3be:	2309      	movs	r3, #9
     3c0:	4013      	ands	r3, r2
     3c2:	2b01      	cmp	r3, #1
     3c4:	d10f      	bne.n	3e6 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     3c6:	2180      	movs	r1, #128	; 0x80
     3c8:	0089      	lsls	r1, r1, #2
     3ca:	48b4      	ldr	r0, [pc, #720]	; (69c <sd_mmc_check+0x350>)
     3cc:	4bb1      	ldr	r3, [pc, #708]	; (694 <sd_mmc_check+0x348>)
     3ce:	4798      	blx	r3
     3d0:	2800      	cmp	r0, #0
     3d2:	d0db      	beq.n	38c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     3d4:	4bad      	ldr	r3, [pc, #692]	; (68c <sd_mmc_check+0x340>)
     3d6:	681b      	ldr	r3, [r3, #0]
     3d8:	7bdb      	ldrb	r3, [r3, #15]
     3da:	07db      	lsls	r3, r3, #31
     3dc:	d503      	bpl.n	3e6 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     3de:	4bb0      	ldr	r3, [pc, #704]	; (6a0 <sd_mmc_check+0x354>)
     3e0:	4798      	blx	r3
     3e2:	2800      	cmp	r0, #0
     3e4:	d0d2      	beq.n	38c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     3e6:	4baf      	ldr	r3, [pc, #700]	; (6a4 <sd_mmc_check+0x358>)
     3e8:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     3ea:	4ba8      	ldr	r3, [pc, #672]	; (68c <sd_mmc_check+0x340>)
     3ec:	681b      	ldr	r3, [r3, #0]
     3ee:	2200      	movs	r2, #0
     3f0:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     3f2:	4ba5      	ldr	r3, [pc, #660]	; (688 <sd_mmc_check+0x33c>)
     3f4:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     3f6:	e7b4      	b.n	362 <sd_mmc_check+0x16>
	resp = driver_get_response();
     3f8:	4bab      	ldr	r3, [pc, #684]	; (6a8 <sd_mmc_check+0x35c>)
     3fa:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     3fc:	1c43      	adds	r3, r0, #1
     3fe:	d100      	bne.n	402 <sd_mmc_check+0xb6>
     400:	e1c4      	b.n	78c <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     402:	0500      	lsls	r0, r0, #20
     404:	0d00      	lsrs	r0, r0, #20
     406:	23d5      	movs	r3, #213	; 0xd5
     408:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     40a:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     40c:	4298      	cmp	r0, r3
     40e:	d1bd      	bne.n	38c <sd_mmc_check+0x40>
     410:	e7cc      	b.n	3ac <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     412:	2100      	movs	r1, #0
     414:	48a5      	ldr	r0, [pc, #660]	; (6ac <sd_mmc_check+0x360>)
     416:	4b9f      	ldr	r3, [pc, #636]	; (694 <sd_mmc_check+0x348>)
     418:	4798      	blx	r3
     41a:	2800      	cmp	r0, #0
     41c:	d119      	bne.n	452 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     41e:	4b9b      	ldr	r3, [pc, #620]	; (68c <sd_mmc_check+0x340>)
     420:	681b      	ldr	r3, [r3, #0]
     422:	2202      	movs	r2, #2
     424:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     426:	2100      	movs	r1, #0
     428:	2088      	movs	r0, #136	; 0x88
     42a:	0140      	lsls	r0, r0, #5
     42c:	4b99      	ldr	r3, [pc, #612]	; (694 <sd_mmc_check+0x348>)
     42e:	4798      	blx	r3
     430:	2800      	cmp	r0, #0
     432:	d0ab      	beq.n	38c <sd_mmc_check+0x40>
     434:	4d9e      	ldr	r5, [pc, #632]	; (6b0 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     436:	4f97      	ldr	r7, [pc, #604]	; (694 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     438:	4e9b      	ldr	r6, [pc, #620]	; (6a8 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     43a:	2100      	movs	r1, #0
     43c:	489d      	ldr	r0, [pc, #628]	; (6b4 <sd_mmc_check+0x368>)
     43e:	47b8      	blx	r7
     440:	2800      	cmp	r0, #0
     442:	d0a3      	beq.n	38c <sd_mmc_check+0x40>
		resp = driver_get_response();
     444:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     446:	07c3      	lsls	r3, r0, #31
     448:	d57d      	bpl.n	546 <sd_mmc_check+0x1fa>
     44a:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     44c:	2d00      	cmp	r5, #0
     44e:	d1f4      	bne.n	43a <sd_mmc_check+0xee>
     450:	e79c      	b.n	38c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     452:	4b95      	ldr	r3, [pc, #596]	; (6a8 <sd_mmc_check+0x35c>)
     454:	4798      	blx	r3
     456:	0043      	lsls	r3, r0, #1
     458:	d505      	bpl.n	466 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     45a:	4b8c      	ldr	r3, [pc, #560]	; (68c <sd_mmc_check+0x340>)
     45c:	681a      	ldr	r2, [r3, #0]
     45e:	7bd3      	ldrb	r3, [r2, #15]
     460:	2108      	movs	r1, #8
     462:	430b      	orrs	r3, r1
     464:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     466:	2100      	movs	r1, #0
     468:	4893      	ldr	r0, [pc, #588]	; (6b8 <sd_mmc_check+0x36c>)
     46a:	4b8a      	ldr	r3, [pc, #552]	; (694 <sd_mmc_check+0x348>)
     46c:	4798      	blx	r3
     46e:	2800      	cmp	r0, #0
     470:	d08c      	beq.n	38c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     472:	4b86      	ldr	r3, [pc, #536]	; (68c <sd_mmc_check+0x340>)
     474:	681b      	ldr	r3, [r3, #0]
     476:	7bdb      	ldrb	r3, [r3, #15]
     478:	07da      	lsls	r2, r3, #31
     47a:	d400      	bmi.n	47e <sd_mmc_check+0x132>
     47c:	e1a4      	b.n	7c8 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     47e:	4b8f      	ldr	r3, [pc, #572]	; (6bc <sd_mmc_check+0x370>)
     480:	4798      	blx	r3
     482:	2800      	cmp	r0, #0
     484:	d082      	beq.n	38c <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     486:	4b81      	ldr	r3, [pc, #516]	; (68c <sd_mmc_check+0x340>)
     488:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     48a:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     48c:	2107      	movs	r1, #7
     48e:	4019      	ands	r1, r3
     490:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     492:	488b      	ldr	r0, [pc, #556]	; (6c0 <sd_mmc_check+0x374>)
     494:	5808      	ldr	r0, [r1, r0]
     496:	21fa      	movs	r1, #250	; 0xfa
     498:	0089      	lsls	r1, r1, #2
     49a:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     49c:	065b      	lsls	r3, r3, #25
     49e:	0f1b      	lsrs	r3, r3, #28
     4a0:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     4a2:	4888      	ldr	r0, [pc, #544]	; (6c4 <sd_mmc_check+0x378>)
     4a4:	581b      	ldr	r3, [r3, r0]
     4a6:	434b      	muls	r3, r1
     4a8:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     4aa:	7c93      	ldrb	r3, [r2, #18]
     4ac:	099b      	lsrs	r3, r3, #6
     4ae:	d000      	beq.n	4b2 <sd_mmc_check+0x166>
     4b0:	e13c      	b.n	72c <sd_mmc_check+0x3e0>
     4b2:	7e91      	ldrb	r1, [r2, #26]
     4b4:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     4b6:	7e53      	ldrb	r3, [r2, #25]
     4b8:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     4ba:	7e10      	ldrb	r0, [r2, #24]
     4bc:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     4be:	4303      	orrs	r3, r0
     4c0:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     4c2:	7f10      	ldrb	r0, [r2, #28]
     4c4:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     4c6:	7ed1      	ldrb	r1, [r2, #27]
     4c8:	0049      	lsls	r1, r1, #1
     4ca:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     4cc:	051b      	lsls	r3, r3, #20
     4ce:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     4d0:	3301      	adds	r3, #1
     4d2:	2107      	movs	r1, #7
     4d4:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     4d6:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     4d8:	408b      	lsls	r3, r1
     4da:	7dd0      	ldrb	r0, [r2, #23]
     4dc:	210f      	movs	r1, #15
     4de:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     4e0:	408b      	lsls	r3, r1
				/ 1024;
     4e2:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     4e4:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     4e6:	8991      	ldrh	r1, [r2, #12]
     4e8:	0409      	lsls	r1, r1, #16
     4ea:	4877      	ldr	r0, [pc, #476]	; (6c8 <sd_mmc_check+0x37c>)
     4ec:	4b69      	ldr	r3, [pc, #420]	; (694 <sd_mmc_check+0x348>)
     4ee:	4798      	blx	r3
     4f0:	2800      	cmp	r0, #0
     4f2:	d100      	bne.n	4f6 <sd_mmc_check+0x1aa>
     4f4:	e74a      	b.n	38c <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     4f6:	2301      	movs	r3, #1
     4f8:	9300      	str	r3, [sp, #0]
     4fa:	2208      	movs	r2, #8
     4fc:	2100      	movs	r1, #0
     4fe:	4873      	ldr	r0, [pc, #460]	; (6cc <sd_mmc_check+0x380>)
     500:	4d73      	ldr	r5, [pc, #460]	; (6d0 <sd_mmc_check+0x384>)
     502:	47a8      	blx	r5
     504:	2800      	cmp	r0, #0
     506:	d100      	bne.n	50a <sd_mmc_check+0x1be>
     508:	e740      	b.n	38c <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     50a:	2101      	movs	r1, #1
     50c:	a806      	add	r0, sp, #24
     50e:	4b71      	ldr	r3, [pc, #452]	; (6d4 <sd_mmc_check+0x388>)
     510:	4798      	blx	r3
     512:	2800      	cmp	r0, #0
     514:	d100      	bne.n	518 <sd_mmc_check+0x1cc>
     516:	e739      	b.n	38c <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     518:	4b6f      	ldr	r3, [pc, #444]	; (6d8 <sd_mmc_check+0x38c>)
     51a:	4798      	blx	r3
     51c:	2800      	cmp	r0, #0
     51e:	d100      	bne.n	522 <sd_mmc_check+0x1d6>
     520:	e734      	b.n	38c <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     522:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     524:	781b      	ldrb	r3, [r3, #0]
     526:	220f      	movs	r2, #15
     528:	4013      	ands	r3, r2
     52a:	2b01      	cmp	r3, #1
     52c:	d100      	bne.n	530 <sd_mmc_check+0x1e4>
     52e:	e119      	b.n	764 <sd_mmc_check+0x418>
     530:	2b00      	cmp	r3, #0
     532:	d100      	bne.n	536 <sd_mmc_check+0x1ea>
     534:	e109      	b.n	74a <sd_mmc_check+0x3fe>
     536:	2b02      	cmp	r3, #2
     538:	d100      	bne.n	53c <sd_mmc_check+0x1f0>
     53a:	e118      	b.n	76e <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     53c:	4b53      	ldr	r3, [pc, #332]	; (68c <sd_mmc_check+0x340>)
     53e:	681b      	ldr	r3, [r3, #0]
     540:	2210      	movs	r2, #16
     542:	741a      	strb	r2, [r3, #16]
     544:	e105      	b.n	752 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     546:	2100      	movs	r1, #0
     548:	4858      	ldr	r0, [pc, #352]	; (6ac <sd_mmc_check+0x360>)
     54a:	4b52      	ldr	r3, [pc, #328]	; (694 <sd_mmc_check+0x348>)
     54c:	4798      	blx	r3
     54e:	2800      	cmp	r0, #0
     550:	d100      	bne.n	554 <sd_mmc_check+0x208>
     552:	e71b      	b.n	38c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     554:	4b54      	ldr	r3, [pc, #336]	; (6a8 <sd_mmc_check+0x35c>)
     556:	4798      	blx	r3
     558:	23c0      	movs	r3, #192	; 0xc0
     55a:	05db      	lsls	r3, r3, #23
     55c:	4018      	ands	r0, r3
     55e:	2380      	movs	r3, #128	; 0x80
     560:	05db      	lsls	r3, r3, #23
     562:	4298      	cmp	r0, r3
     564:	d105      	bne.n	572 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     566:	4b49      	ldr	r3, [pc, #292]	; (68c <sd_mmc_check+0x340>)
     568:	681a      	ldr	r2, [r3, #0]
     56a:	7bd1      	ldrb	r1, [r2, #15]
     56c:	2308      	movs	r3, #8
     56e:	430b      	orrs	r3, r1
     570:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     572:	2100      	movs	r1, #0
     574:	4850      	ldr	r0, [pc, #320]	; (6b8 <sd_mmc_check+0x36c>)
     576:	4b47      	ldr	r3, [pc, #284]	; (694 <sd_mmc_check+0x348>)
     578:	4798      	blx	r3
     57a:	2800      	cmp	r0, #0
     57c:	d100      	bne.n	580 <sd_mmc_check+0x234>
     57e:	e705      	b.n	38c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     580:	4b4e      	ldr	r3, [pc, #312]	; (6bc <sd_mmc_check+0x370>)
     582:	4798      	blx	r3
     584:	2800      	cmp	r0, #0
     586:	d100      	bne.n	58a <sd_mmc_check+0x23e>
     588:	e700      	b.n	38c <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     58a:	4b40      	ldr	r3, [pc, #256]	; (68c <sd_mmc_check+0x340>)
     58c:	681a      	ldr	r2, [r3, #0]
     58e:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     590:	069b      	lsls	r3, r3, #26
     592:	0f1b      	lsrs	r3, r3, #28
     594:	2b02      	cmp	r3, #2
     596:	d100      	bne.n	59a <sd_mmc_check+0x24e>
     598:	e0a8      	b.n	6ec <sd_mmc_check+0x3a0>
     59a:	d907      	bls.n	5ac <sd_mmc_check+0x260>
     59c:	2b03      	cmp	r3, #3
     59e:	d100      	bne.n	5a2 <sd_mmc_check+0x256>
     5a0:	e0a7      	b.n	6f2 <sd_mmc_check+0x3a6>
     5a2:	2b04      	cmp	r3, #4
     5a4:	d104      	bne.n	5b0 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     5a6:	2340      	movs	r3, #64	; 0x40
     5a8:	7413      	strb	r3, [r2, #16]
     5aa:	e003      	b.n	5b4 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     5ac:	2b01      	cmp	r3, #1
     5ae:	d066      	beq.n	67e <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     5b0:	2312      	movs	r3, #18
     5b2:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     5b4:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     5b6:	0659      	lsls	r1, r3, #25
     5b8:	0f09      	lsrs	r1, r1, #28
     5ba:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     5bc:	2007      	movs	r0, #7
     5be:	4003      	ands	r3, r0
     5c0:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     5c2:	483f      	ldr	r0, [pc, #252]	; (6c0 <sd_mmc_check+0x374>)
     5c4:	5818      	ldr	r0, [r3, r0]
     5c6:	23fa      	movs	r3, #250	; 0xfa
     5c8:	009b      	lsls	r3, r3, #2
     5ca:	4343      	muls	r3, r0
     5cc:	4843      	ldr	r0, [pc, #268]	; (6dc <sd_mmc_check+0x390>)
     5ce:	5809      	ldr	r1, [r1, r0]
     5d0:	434b      	muls	r3, r1
     5d2:	6013      	str	r3, [r2, #0]
     5d4:	7e91      	ldrb	r1, [r2, #26]
     5d6:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     5d8:	7e53      	ldrb	r3, [r2, #25]
     5da:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     5dc:	7e10      	ldrb	r0, [r2, #24]
     5de:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     5e0:	4303      	orrs	r3, r0
     5e2:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     5e4:	051b      	lsls	r3, r3, #20
     5e6:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     5e8:	493d      	ldr	r1, [pc, #244]	; (6e0 <sd_mmc_check+0x394>)
     5ea:	428b      	cmp	r3, r1
     5ec:	d00f      	beq.n	60e <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     5ee:	7f10      	ldrb	r0, [r2, #28]
     5f0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     5f2:	7ed1      	ldrb	r1, [r2, #27]
     5f4:	0049      	lsls	r1, r1, #1
     5f6:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     5f8:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     5fa:	2007      	movs	r0, #7
     5fc:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     5fe:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     600:	408b      	lsls	r3, r1
     602:	7dd1      	ldrb	r1, [r2, #23]
     604:	3008      	adds	r0, #8
     606:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     608:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     60a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     60c:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     60e:	7c13      	ldrb	r3, [r2, #16]
     610:	2b3f      	cmp	r3, #63	; 0x3f
     612:	d97b      	bls.n	70c <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     614:	2100      	movs	r1, #0
     616:	9100      	str	r1, [sp, #0]
     618:	2301      	movs	r3, #1
     61a:	2280      	movs	r2, #128	; 0x80
     61c:	0092      	lsls	r2, r2, #2
     61e:	4831      	ldr	r0, [pc, #196]	; (6e4 <sd_mmc_check+0x398>)
     620:	4d2b      	ldr	r5, [pc, #172]	; (6d0 <sd_mmc_check+0x384>)
     622:	47a8      	blx	r5
     624:	2800      	cmp	r0, #0
     626:	d100      	bne.n	62a <sd_mmc_check+0x2de>
     628:	e6b0      	b.n	38c <sd_mmc_check+0x40>
     62a:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     62c:	4e2e      	ldr	r6, [pc, #184]	; (6e8 <sd_mmc_check+0x39c>)
     62e:	a805      	add	r0, sp, #20
     630:	47b0      	blx	r6
     632:	2800      	cmp	r0, #0
     634:	d100      	bne.n	638 <sd_mmc_check+0x2ec>
     636:	e6a9      	b.n	38c <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     638:	3501      	adds	r5, #1
     63a:	b2ad      	uxth	r5, r5
     63c:	2d32      	cmp	r5, #50	; 0x32
     63e:	d1f6      	bne.n	62e <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     640:	4b12      	ldr	r3, [pc, #72]	; (68c <sd_mmc_check+0x340>)
     642:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     644:	7e8a      	ldrb	r2, [r1, #26]
     646:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     648:	7e4b      	ldrb	r3, [r1, #25]
     64a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     64c:	7e09      	ldrb	r1, [r1, #24]
     64e:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     650:	430b      	orrs	r3, r1
     652:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     654:	051b      	lsls	r3, r3, #20
     656:	0d1b      	lsrs	r3, r3, #20
     658:	4a21      	ldr	r2, [pc, #132]	; (6e0 <sd_mmc_check+0x394>)
     65a:	4293      	cmp	r3, r2
     65c:	d154      	bne.n	708 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     65e:	4e22      	ldr	r6, [pc, #136]	; (6e8 <sd_mmc_check+0x39c>)
     660:	a806      	add	r0, sp, #24
     662:	47b0      	blx	r6
     664:	2800      	cmp	r0, #0
     666:	d100      	bne.n	66a <sd_mmc_check+0x31e>
     668:	e690      	b.n	38c <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     66a:	3501      	adds	r5, #1
     66c:	b2ad      	uxth	r5, r5
     66e:	2d35      	cmp	r5, #53	; 0x35
     670:	d9f6      	bls.n	660 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     672:	4b06      	ldr	r3, [pc, #24]	; (68c <sd_mmc_check+0x340>)
     674:	681a      	ldr	r2, [r3, #0]
     676:	9b06      	ldr	r3, [sp, #24]
     678:	085b      	lsrs	r3, r3, #1
     67a:	6053      	str	r3, [r2, #4]
     67c:	e044      	b.n	708 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     67e:	2314      	movs	r3, #20
     680:	7413      	strb	r3, [r2, #16]
     682:	e797      	b.n	5b4 <sd_mmc_check+0x268>
     684:	00000141 	.word	0x00000141
     688:	00000311 	.word	0x00000311
     68c:	2000017c 	.word	0x2000017c
     690:	000057c9 	.word	0x000057c9
     694:	00005991 	.word	0x00005991
     698:	00005508 	.word	0x00005508
     69c:	00001110 	.word	0x00001110
     6a0:	0000028d 	.word	0x0000028d
     6a4:	00000115 	.word	0x00000115
     6a8:	000059a9 	.word	0x000059a9
     6ac:	0000053a 	.word	0x0000053a
     6b0:	00001bef 	.word	0x00001bef
     6b4:	00001101 	.word	0x00001101
     6b8:	0000113b 	.word	0x0000113b
     6bc:	000002c5 	.word	0x000002c5
     6c0:	00006fc4 	.word	0x00006fc4
     6c4:	00006fe0 	.word	0x00006fe0
     6c8:	00001137 	.word	0x00001137
     6cc:	00081133 	.word	0x00081133
     6d0:	00005801 	.word	0x00005801
     6d4:	00005a2d 	.word	0x00005a2d
     6d8:	00005ab9 	.word	0x00005ab9
     6dc:	00006f84 	.word	0x00006f84
     6e0:	00000fff 	.word	0x00000fff
     6e4:	00081108 	.word	0x00081108
     6e8:	000059b5 	.word	0x000059b5
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     6ec:	2322      	movs	r3, #34	; 0x22
     6ee:	7413      	strb	r3, [r2, #16]
     6f0:	e760      	b.n	5b4 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     6f2:	2330      	movs	r3, #48	; 0x30
     6f4:	7413      	strb	r3, [r2, #16]
     6f6:	e75d      	b.n	5b4 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     6f8:	a806      	add	r0, sp, #24
     6fa:	4b36      	ldr	r3, [pc, #216]	; (7d4 <sd_mmc_check+0x488>)
     6fc:	4798      	blx	r3
     6fe:	2800      	cmp	r0, #0
     700:	d100      	bne.n	704 <sd_mmc_check+0x3b8>
     702:	e643      	b.n	38c <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     704:	3501      	adds	r5, #1
     706:	b2ad      	uxth	r5, r5
     708:	2d7f      	cmp	r5, #127	; 0x7f
     70a:	d9f5      	bls.n	6f8 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     70c:	2180      	movs	r1, #128	; 0x80
     70e:	0089      	lsls	r1, r1, #2
     710:	4831      	ldr	r0, [pc, #196]	; (7d8 <sd_mmc_check+0x48c>)
     712:	4b32      	ldr	r3, [pc, #200]	; (7dc <sd_mmc_check+0x490>)
     714:	4798      	blx	r3
     716:	2800      	cmp	r0, #0
     718:	d100      	bne.n	71c <sd_mmc_check+0x3d0>
     71a:	e637      	b.n	38c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     71c:	4b30      	ldr	r3, [pc, #192]	; (7e0 <sd_mmc_check+0x494>)
     71e:	4798      	blx	r3
     720:	2800      	cmp	r0, #0
     722:	d100      	bne.n	726 <sd_mmc_check+0x3da>
     724:	e632      	b.n	38c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     726:	4b2f      	ldr	r3, [pc, #188]	; (7e4 <sd_mmc_check+0x498>)
     728:	4798      	blx	r3
     72a:	e65e      	b.n	3ea <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     72c:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     72e:	7e93      	ldrb	r3, [r2, #26]
     730:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     732:	7e51      	ldrb	r1, [r2, #25]
     734:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     736:	430b      	orrs	r3, r1
     738:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     73a:	029b      	lsls	r3, r3, #10
				* 512;
     73c:	085b      	lsrs	r3, r3, #1
     73e:	2180      	movs	r1, #128	; 0x80
     740:	0089      	lsls	r1, r1, #2
     742:	468c      	mov	ip, r1
     744:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     746:	6053      	str	r3, [r2, #4]
     748:	e6cd      	b.n	4e6 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     74a:	4b27      	ldr	r3, [pc, #156]	; (7e8 <sd_mmc_check+0x49c>)
     74c:	681b      	ldr	r3, [r3, #0]
     74e:	2210      	movs	r2, #16
     750:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     752:	4b25      	ldr	r3, [pc, #148]	; (7e8 <sd_mmc_check+0x49c>)
     754:	681b      	ldr	r3, [r3, #0]
     756:	7bdb      	ldrb	r3, [r3, #15]
     758:	2209      	movs	r2, #9
     75a:	4013      	ands	r3, r2
     75c:	2b01      	cmp	r3, #1
     75e:	d000      	beq.n	762 <sd_mmc_check+0x416>
     760:	e638      	b.n	3d4 <sd_mmc_check+0x88>
     762:	e630      	b.n	3c6 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     764:	4b20      	ldr	r3, [pc, #128]	; (7e8 <sd_mmc_check+0x49c>)
     766:	681b      	ldr	r3, [r3, #0]
     768:	221a      	movs	r2, #26
     76a:	741a      	strb	r2, [r3, #16]
     76c:	e7f1      	b.n	752 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     76e:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     770:	789b      	ldrb	r3, [r3, #2]
     772:	09db      	lsrs	r3, r3, #7
     774:	2b01      	cmp	r3, #1
     776:	d104      	bne.n	782 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     778:	4b1b      	ldr	r3, [pc, #108]	; (7e8 <sd_mmc_check+0x49c>)
     77a:	681b      	ldr	r3, [r3, #0]
     77c:	2230      	movs	r2, #48	; 0x30
     77e:	741a      	strb	r2, [r3, #16]
     780:	e7e7      	b.n	752 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     782:	4b19      	ldr	r3, [pc, #100]	; (7e8 <sd_mmc_check+0x49c>)
     784:	681b      	ldr	r3, [r3, #0]
     786:	2220      	movs	r2, #32
     788:	741a      	strb	r2, [r3, #16]
     78a:	e7e2      	b.n	752 <sd_mmc_check+0x406>
	*v2 = 0;
     78c:	2600      	movs	r6, #0
     78e:	e60d      	b.n	3ac <sd_mmc_check+0x60>
     790:	1e73      	subs	r3, r6, #1
     792:	419e      	sbcs	r6, r3
     794:	07b3      	lsls	r3, r6, #30
     796:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     798:	4d14      	ldr	r5, [pc, #80]	; (7ec <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     79a:	4f10      	ldr	r7, [pc, #64]	; (7dc <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     79c:	46b8      	mov	r8, r7
		resp = driver_get_response();
     79e:	4e14      	ldr	r6, [pc, #80]	; (7f0 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     7a0:	2100      	movs	r1, #0
     7a2:	4814      	ldr	r0, [pc, #80]	; (7f4 <sd_mmc_check+0x4a8>)
     7a4:	47b8      	blx	r7
     7a6:	2800      	cmp	r0, #0
     7a8:	d100      	bne.n	7ac <sd_mmc_check+0x460>
     7aa:	e638      	b.n	41e <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     7ac:	9903      	ldr	r1, [sp, #12]
     7ae:	4812      	ldr	r0, [pc, #72]	; (7f8 <sd_mmc_check+0x4ac>)
     7b0:	47c0      	blx	r8
     7b2:	2800      	cmp	r0, #0
     7b4:	d100      	bne.n	7b8 <sd_mmc_check+0x46c>
     7b6:	e632      	b.n	41e <sd_mmc_check+0xd2>
		resp = driver_get_response();
     7b8:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     7ba:	07c3      	lsls	r3, r0, #31
     7bc:	d400      	bmi.n	7c0 <sd_mmc_check+0x474>
     7be:	e628      	b.n	412 <sd_mmc_check+0xc6>
     7c0:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     7c2:	2d00      	cmp	r5, #0
     7c4:	d1ec      	bne.n	7a0 <sd_mmc_check+0x454>
     7c6:	e62a      	b.n	41e <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     7c8:	2209      	movs	r2, #9
     7ca:	4013      	ands	r3, r2
     7cc:	2b01      	cmp	r3, #1
     7ce:	d000      	beq.n	7d2 <sd_mmc_check+0x486>
     7d0:	e609      	b.n	3e6 <sd_mmc_check+0x9a>
     7d2:	e5f8      	b.n	3c6 <sd_mmc_check+0x7a>
     7d4:	000059b5 	.word	0x000059b5
     7d8:	00001110 	.word	0x00001110
     7dc:	00005991 	.word	0x00005991
     7e0:	0000028d 	.word	0x0000028d
     7e4:	00000115 	.word	0x00000115
     7e8:	2000017c 	.word	0x2000017c
     7ec:	00001bef 	.word	0x00001bef
     7f0:	000059a9 	.word	0x000059a9
     7f4:	00001137 	.word	0x00001137
     7f8:	00001129 	.word	0x00001129

000007fc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     7fc:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     7fe:	4b06      	ldr	r3, [pc, #24]	; (818 <sd_mmc_get_type+0x1c>)
     800:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     802:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     804:	2800      	cmp	r0, #0
     806:	d001      	beq.n	80c <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     808:	0018      	movs	r0, r3
     80a:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     80c:	4b03      	ldr	r3, [pc, #12]	; (81c <sd_mmc_get_type+0x20>)
     80e:	4798      	blx	r3
	return sd_mmc_card->type;
     810:	4b03      	ldr	r3, [pc, #12]	; (820 <sd_mmc_get_type+0x24>)
     812:	681b      	ldr	r3, [r3, #0]
     814:	7bdb      	ldrb	r3, [r3, #15]
     816:	e7f7      	b.n	808 <sd_mmc_get_type+0xc>
     818:	00000141 	.word	0x00000141
     81c:	00000311 	.word	0x00000311
     820:	2000017c 	.word	0x2000017c

00000824 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     824:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     826:	4b06      	ldr	r3, [pc, #24]	; (840 <sd_mmc_get_capacity+0x1c>)
     828:	4798      	blx	r3
		return 0;
     82a:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     82c:	2800      	cmp	r0, #0
     82e:	d001      	beq.n	834 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     830:	0018      	movs	r0, r3
     832:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     834:	4b03      	ldr	r3, [pc, #12]	; (844 <sd_mmc_get_capacity+0x20>)
     836:	4798      	blx	r3
	return sd_mmc_card->capacity;
     838:	4b03      	ldr	r3, [pc, #12]	; (848 <sd_mmc_get_capacity+0x24>)
     83a:	681b      	ldr	r3, [r3, #0]
     83c:	685b      	ldr	r3, [r3, #4]
     83e:	e7f7      	b.n	830 <sd_mmc_get_capacity+0xc>
     840:	00000141 	.word	0x00000141
     844:	00000311 	.word	0x00000311
     848:	2000017c 	.word	0x2000017c

0000084c <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     84c:	2000      	movs	r0, #0
     84e:	4770      	bx	lr

00000850 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     850:	b570      	push	{r4, r5, r6, lr}
     852:	b082      	sub	sp, #8
     854:	000e      	movs	r6, r1
     856:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     858:	4b16      	ldr	r3, [pc, #88]	; (8b4 <sd_mmc_init_read_blocks+0x64>)
     85a:	4798      	blx	r3
     85c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     85e:	d002      	beq.n	866 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     860:	0020      	movs	r0, r4
     862:	b002      	add	sp, #8
     864:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     866:	4b14      	ldr	r3, [pc, #80]	; (8b8 <sd_mmc_init_read_blocks+0x68>)
     868:	4798      	blx	r3
     86a:	2800      	cmp	r0, #0
     86c:	d017      	beq.n	89e <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     86e:	2d01      	cmp	r5, #1
     870:	d919      	bls.n	8a6 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     872:	4812      	ldr	r0, [pc, #72]	; (8bc <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     874:	4b12      	ldr	r3, [pc, #72]	; (8c0 <sd_mmc_init_read_blocks+0x70>)
     876:	681b      	ldr	r3, [r3, #0]
     878:	7bdb      	ldrb	r3, [r3, #15]
     87a:	071b      	lsls	r3, r3, #28
     87c:	d400      	bmi.n	880 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     87e:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     880:	2301      	movs	r3, #1
     882:	9300      	str	r3, [sp, #0]
     884:	002b      	movs	r3, r5
     886:	2280      	movs	r2, #128	; 0x80
     888:	0092      	lsls	r2, r2, #2
     88a:	0031      	movs	r1, r6
     88c:	4e0d      	ldr	r6, [pc, #52]	; (8c4 <sd_mmc_init_read_blocks+0x74>)
     88e:	47b0      	blx	r6
     890:	2800      	cmp	r0, #0
     892:	d00a      	beq.n	8aa <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     894:	4b0c      	ldr	r3, [pc, #48]	; (8c8 <sd_mmc_init_read_blocks+0x78>)
     896:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     898:	4b0c      	ldr	r3, [pc, #48]	; (8cc <sd_mmc_init_read_blocks+0x7c>)
     89a:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     89c:	e7e0      	b.n	860 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     89e:	4b0c      	ldr	r3, [pc, #48]	; (8d0 <sd_mmc_init_read_blocks+0x80>)
     8a0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     8a2:	3405      	adds	r4, #5
     8a4:	e7dc      	b.n	860 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     8a6:	480b      	ldr	r0, [pc, #44]	; (8d4 <sd_mmc_init_read_blocks+0x84>)
     8a8:	e7e4      	b.n	874 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     8aa:	4b09      	ldr	r3, [pc, #36]	; (8d0 <sd_mmc_init_read_blocks+0x80>)
     8ac:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     8ae:	2405      	movs	r4, #5
     8b0:	e7d6      	b.n	860 <sd_mmc_init_read_blocks+0x10>
     8b2:	46c0      	nop			; (mov r8, r8)
     8b4:	00000141 	.word	0x00000141
     8b8:	0000028d 	.word	0x0000028d
     8bc:	00101112 	.word	0x00101112
     8c0:	2000017c 	.word	0x2000017c
     8c4:	00005801 	.word	0x00005801
     8c8:	20000180 	.word	0x20000180
     8cc:	20000182 	.word	0x20000182
     8d0:	00000311 	.word	0x00000311
     8d4:	00081111 	.word	0x00081111

000008d8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     8d8:	b510      	push	{r4, lr}
     8da:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     8dc:	4b07      	ldr	r3, [pc, #28]	; (8fc <sd_mmc_start_read_blocks+0x24>)
     8de:	4798      	blx	r3
     8e0:	2800      	cmp	r0, #0
     8e2:	d104      	bne.n	8ee <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     8e4:	2200      	movs	r2, #0
     8e6:	4b06      	ldr	r3, [pc, #24]	; (900 <sd_mmc_start_read_blocks+0x28>)
     8e8:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     8ea:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     8ec:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     8ee:	4a04      	ldr	r2, [pc, #16]	; (900 <sd_mmc_start_read_blocks+0x28>)
     8f0:	8813      	ldrh	r3, [r2, #0]
     8f2:	1b1c      	subs	r4, r3, r4
     8f4:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     8f6:	2000      	movs	r0, #0
     8f8:	e7f8      	b.n	8ec <sd_mmc_start_read_blocks+0x14>
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	00005a2d 	.word	0x00005a2d
     900:	20000180 	.word	0x20000180

00000904 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     904:	b510      	push	{r4, lr}
     906:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     908:	4b14      	ldr	r3, [pc, #80]	; (95c <sd_mmc_wait_end_of_read_blocks+0x58>)
     90a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     90c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     90e:	2800      	cmp	r0, #0
     910:	d101      	bne.n	916 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     912:	0018      	movs	r0, r3
     914:	bd10      	pop	{r4, pc}
	if (abort) {
     916:	2c00      	cmp	r4, #0
     918:	d010      	beq.n	93c <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     91a:	2200      	movs	r2, #0
     91c:	4b10      	ldr	r3, [pc, #64]	; (960 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     91e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     920:	4b10      	ldr	r3, [pc, #64]	; (964 <sd_mmc_wait_end_of_read_blocks+0x60>)
     922:	881b      	ldrh	r3, [r3, #0]
     924:	2b01      	cmp	r3, #1
     926:	d00f      	beq.n	948 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     928:	2100      	movs	r1, #0
     92a:	480f      	ldr	r0, [pc, #60]	; (968 <sd_mmc_wait_end_of_read_blocks+0x64>)
     92c:	4b0f      	ldr	r3, [pc, #60]	; (96c <sd_mmc_wait_end_of_read_blocks+0x68>)
     92e:	4798      	blx	r3
     930:	2800      	cmp	r0, #0
     932:	d00d      	beq.n	950 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     934:	4b0e      	ldr	r3, [pc, #56]	; (970 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     936:	4798      	blx	r3
	return SD_MMC_OK;
     938:	2300      	movs	r3, #0
     93a:	e7ea      	b.n	912 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     93c:	4b08      	ldr	r3, [pc, #32]	; (960 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     93e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     940:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     942:	2a00      	cmp	r2, #0
     944:	d0ec      	beq.n	920 <sd_mmc_wait_end_of_read_blocks+0x1c>
     946:	e7e4      	b.n	912 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     948:	4b09      	ldr	r3, [pc, #36]	; (970 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     94a:	4798      	blx	r3
		return SD_MMC_OK;
     94c:	2300      	movs	r3, #0
     94e:	e7e0      	b.n	912 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     950:	2100      	movs	r1, #0
     952:	4805      	ldr	r0, [pc, #20]	; (968 <sd_mmc_wait_end_of_read_blocks+0x64>)
     954:	4b05      	ldr	r3, [pc, #20]	; (96c <sd_mmc_wait_end_of_read_blocks+0x68>)
     956:	4798      	blx	r3
     958:	e7ec      	b.n	934 <sd_mmc_wait_end_of_read_blocks+0x30>
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	00005ab9 	.word	0x00005ab9
     960:	20000180 	.word	0x20000180
     964:	20000182 	.word	0x20000182
     968:	0000310c 	.word	0x0000310c
     96c:	00005991 	.word	0x00005991
     970:	00000311 	.word	0x00000311

00000974 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     974:	b570      	push	{r4, r5, r6, lr}
     976:	b082      	sub	sp, #8
     978:	000e      	movs	r6, r1
     97a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     97c:	4b11      	ldr	r3, [pc, #68]	; (9c4 <sd_mmc_init_write_blocks+0x50>)
     97e:	4798      	blx	r3
     980:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     982:	d116      	bne.n	9b2 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     984:	2d01      	cmp	r5, #1
     986:	d917      	bls.n	9b8 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     988:	480f      	ldr	r0, [pc, #60]	; (9c8 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     98a:	4b10      	ldr	r3, [pc, #64]	; (9cc <sd_mmc_init_write_blocks+0x58>)
     98c:	681b      	ldr	r3, [r3, #0]
     98e:	7bdb      	ldrb	r3, [r3, #15]
     990:	071b      	lsls	r3, r3, #28
     992:	d400      	bmi.n	996 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     994:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     996:	2301      	movs	r3, #1
     998:	9300      	str	r3, [sp, #0]
     99a:	002b      	movs	r3, r5
     99c:	2280      	movs	r2, #128	; 0x80
     99e:	0092      	lsls	r2, r2, #2
     9a0:	0031      	movs	r1, r6
     9a2:	4e0b      	ldr	r6, [pc, #44]	; (9d0 <sd_mmc_init_write_blocks+0x5c>)
     9a4:	47b0      	blx	r6
     9a6:	2800      	cmp	r0, #0
     9a8:	d008      	beq.n	9bc <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     9aa:	4b0a      	ldr	r3, [pc, #40]	; (9d4 <sd_mmc_init_write_blocks+0x60>)
     9ac:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     9ae:	4b0a      	ldr	r3, [pc, #40]	; (9d8 <sd_mmc_init_write_blocks+0x64>)
     9b0:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     9b2:	0020      	movs	r0, r4
     9b4:	b002      	add	sp, #8
     9b6:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     9b8:	4808      	ldr	r0, [pc, #32]	; (9dc <sd_mmc_init_write_blocks+0x68>)
     9ba:	e7e6      	b.n	98a <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     9bc:	4b08      	ldr	r3, [pc, #32]	; (9e0 <sd_mmc_init_write_blocks+0x6c>)
     9be:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     9c0:	2405      	movs	r4, #5
     9c2:	e7f6      	b.n	9b2 <sd_mmc_init_write_blocks+0x3e>
     9c4:	00000141 	.word	0x00000141
     9c8:	00109119 	.word	0x00109119
     9cc:	2000017c 	.word	0x2000017c
     9d0:	00005801 	.word	0x00005801
     9d4:	20000180 	.word	0x20000180
     9d8:	20000182 	.word	0x20000182
     9dc:	00089118 	.word	0x00089118
     9e0:	00000311 	.word	0x00000311

000009e4 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     9e4:	b510      	push	{r4, lr}
     9e6:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     9e8:	4b07      	ldr	r3, [pc, #28]	; (a08 <sd_mmc_start_write_blocks+0x24>)
     9ea:	4798      	blx	r3
     9ec:	2800      	cmp	r0, #0
     9ee:	d104      	bne.n	9fa <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     9f0:	2200      	movs	r2, #0
     9f2:	4b06      	ldr	r3, [pc, #24]	; (a0c <sd_mmc_start_write_blocks+0x28>)
     9f4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     9f6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     9f8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     9fa:	4a04      	ldr	r2, [pc, #16]	; (a0c <sd_mmc_start_write_blocks+0x28>)
     9fc:	8813      	ldrh	r3, [r2, #0]
     9fe:	1b1c      	subs	r4, r3, r4
     a00:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     a02:	2000      	movs	r0, #0
     a04:	e7f8      	b.n	9f8 <sd_mmc_start_write_blocks+0x14>
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	00005abd 	.word	0x00005abd
     a0c:	20000180 	.word	0x20000180

00000a10 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     a10:	b510      	push	{r4, lr}
     a12:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     a14:	4b0e      	ldr	r3, [pc, #56]	; (a50 <sd_mmc_wait_end_of_write_blocks+0x40>)
     a16:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     a18:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     a1a:	2800      	cmp	r0, #0
     a1c:	d101      	bne.n	a22 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     a1e:	0018      	movs	r0, r3
     a20:	bd10      	pop	{r4, pc}
	if (abort) {
     a22:	2c00      	cmp	r4, #0
     a24:	d00a      	beq.n	a3c <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     a26:	2200      	movs	r2, #0
     a28:	4b0a      	ldr	r3, [pc, #40]	; (a54 <sd_mmc_wait_end_of_write_blocks+0x44>)
     a2a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     a2c:	4b0a      	ldr	r3, [pc, #40]	; (a58 <sd_mmc_wait_end_of_write_blocks+0x48>)
     a2e:	881b      	ldrh	r3, [r3, #0]
     a30:	2b01      	cmp	r3, #1
     a32:	d009      	beq.n	a48 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     a34:	4b09      	ldr	r3, [pc, #36]	; (a5c <sd_mmc_wait_end_of_write_blocks+0x4c>)
     a36:	4798      	blx	r3
	return SD_MMC_OK;
     a38:	2300      	movs	r3, #0
     a3a:	e7f0      	b.n	a1e <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     a3c:	4b05      	ldr	r3, [pc, #20]	; (a54 <sd_mmc_wait_end_of_write_blocks+0x44>)
     a3e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     a40:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     a42:	2a00      	cmp	r2, #0
     a44:	d0f2      	beq.n	a2c <sd_mmc_wait_end_of_write_blocks+0x1c>
     a46:	e7ea      	b.n	a1e <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     a48:	4b04      	ldr	r3, [pc, #16]	; (a5c <sd_mmc_wait_end_of_write_blocks+0x4c>)
     a4a:	4798      	blx	r3
		return SD_MMC_OK;
     a4c:	2300      	movs	r3, #0
     a4e:	e7e6      	b.n	a1e <sd_mmc_wait_end_of_write_blocks+0xe>
     a50:	00005b3d 	.word	0x00005b3d
     a54:	20000180 	.word	0x20000180
     a58:	20000182 	.word	0x20000182
     a5c:	00000311 	.word	0x00000311

00000a60 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
     a60:	2000      	movs	r0, #0
     a62:	4770      	bx	lr

00000a64 <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
     a64:	1e43      	subs	r3, r0, #1
     a66:	4198      	sbcs	r0, r3
     a68:	b2c0      	uxtb	r0, r0
     a6a:	4b03      	ldr	r3, [pc, #12]	; (a78 <udi_msc_trans_ack+0x14>)
     a6c:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
     a6e:	2201      	movs	r2, #1
     a70:	4b02      	ldr	r3, [pc, #8]	; (a7c <udi_msc_trans_ack+0x18>)
     a72:	701a      	strb	r2, [r3, #0]
}
     a74:	4770      	bx	lr
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	200002e8 	.word	0x200002e8
     a7c:	20000044 	.word	0x20000044

00000a80 <udi_msc_cbw_wait>:
{
     a80:	b510      	push	{r4, lr}
     a82:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     a84:	4b08      	ldr	r3, [pc, #32]	; (aa8 <udi_msc_cbw_wait+0x28>)
     a86:	9300      	str	r3, [sp, #0]
     a88:	231f      	movs	r3, #31
     a8a:	4a08      	ldr	r2, [pc, #32]	; (aac <udi_msc_cbw_wait+0x2c>)
     a8c:	2101      	movs	r1, #1
     a8e:	2002      	movs	r0, #2
     a90:	4c07      	ldr	r4, [pc, #28]	; (ab0 <udi_msc_cbw_wait+0x30>)
     a92:	47a0      	blx	r4
     a94:	2800      	cmp	r0, #0
     a96:	d001      	beq.n	a9c <udi_msc_cbw_wait+0x1c>
}
     a98:	b002      	add	sp, #8
     a9a:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
     a9c:	4905      	ldr	r1, [pc, #20]	; (ab4 <udi_msc_cbw_wait+0x34>)
     a9e:	3002      	adds	r0, #2
     aa0:	4b05      	ldr	r3, [pc, #20]	; (ab8 <udi_msc_cbw_wait+0x38>)
     aa2:	4798      	blx	r3
}
     aa4:	e7f8      	b.n	a98 <udi_msc_cbw_wait+0x18>
     aa6:	46c0      	nop			; (mov r8, r8)
     aa8:	00000ea5 	.word	0x00000ea5
     aac:	200001ac 	.word	0x200001ac
     ab0:	00002e21 	.word	0x00002e21
     ab4:	00000a81 	.word	0x00000a81
     ab8:	00002dc9 	.word	0x00002dc9

00000abc <udi_msc_enable>:
{
     abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_msc_b_trans_req = false;
     abe:	2300      	movs	r3, #0
     ac0:	4a13      	ldr	r2, [pc, #76]	; (b10 <udi_msc_enable+0x54>)
     ac2:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
     ac4:	4a13      	ldr	r2, [pc, #76]	; (b14 <udi_msc_enable+0x58>)
     ac6:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
     ac8:	3301      	adds	r3, #1
     aca:	4a13      	ldr	r2, [pc, #76]	; (b18 <udi_msc_enable+0x5c>)
     acc:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
     ace:	4a13      	ldr	r2, [pc, #76]	; (b1c <udi_msc_enable+0x60>)
     ad0:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
     ad2:	4b13      	ldr	r3, [pc, #76]	; (b20 <udi_msc_enable+0x64>)
     ad4:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
     ad6:	2800      	cmp	r0, #0
     ad8:	d105      	bne.n	ae6 <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
     ada:	2200      	movs	r2, #0
     adc:	4b11      	ldr	r3, [pc, #68]	; (b24 <udi_msc_enable+0x68>)
     ade:	701a      	strb	r2, [r3, #0]
		return false; // No lun available, then not authorize to enable interface
     ae0:	2500      	movs	r5, #0
}
     ae2:	0028      	movs	r0, r5
     ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_nb_lun--;
     ae6:	3801      	subs	r0, #1
     ae8:	4b0e      	ldr	r3, [pc, #56]	; (b24 <udi_msc_enable+0x68>)
     aea:	7018      	strb	r0, [r3, #0]
	if (!UDI_MSC_ENABLE_EXT())
     aec:	4b0e      	ldr	r3, [pc, #56]	; (b28 <udi_msc_enable+0x6c>)
     aee:	4798      	blx	r3
     af0:	1e05      	subs	r5, r0, #0
     af2:	d0f6      	beq.n	ae2 <udi_msc_enable+0x26>
     af4:	2400      	movs	r4, #0
		mem_unload(lun, false);
     af6:	4f0d      	ldr	r7, [pc, #52]	; (b2c <udi_msc_enable+0x70>)
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
     af8:	4e0a      	ldr	r6, [pc, #40]	; (b24 <udi_msc_enable+0x68>)
		mem_unload(lun, false);
     afa:	2100      	movs	r1, #0
     afc:	0020      	movs	r0, r4
     afe:	47b8      	blx	r7
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
     b00:	3401      	adds	r4, #1
     b02:	b2e4      	uxtb	r4, r4
     b04:	7833      	ldrb	r3, [r6, #0]
     b06:	42a3      	cmp	r3, r4
     b08:	d2f7      	bcs.n	afa <udi_msc_enable+0x3e>
	udi_msc_cbw_wait();
     b0a:	4b09      	ldr	r3, [pc, #36]	; (b30 <udi_msc_enable+0x74>)
     b0c:	4798      	blx	r3
	return true;
     b0e:	e7e8      	b.n	ae2 <udi_msc_enable+0x26>
     b10:	200001a2 	.word	0x200001a2
     b14:	200001a0 	.word	0x200001a0
     b18:	20000044 	.word	0x20000044
     b1c:	20000045 	.word	0x20000045
     b20:	00005b61 	.word	0x00005b61
     b24:	200001d0 	.word	0x200001d0
     b28:	00003485 	.word	0x00003485
     b2c:	00005b99 	.word	0x00005b99
     b30:	00000a81 	.word	0x00000a81

00000b34 <udi_msc_csw_sent>:
{
     b34:	b510      	push	{r4, lr}
	udi_msc_cbw_wait();
     b36:	4b01      	ldr	r3, [pc, #4]	; (b3c <udi_msc_csw_sent+0x8>)
     b38:	4798      	blx	r3
}
     b3a:	bd10      	pop	{r4, pc}
     b3c:	00000a81 	.word	0x00000a81

00000b40 <udi_msc_csw_send>:
{
     b40:	b510      	push	{r4, lr}
     b42:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     b44:	4b08      	ldr	r3, [pc, #32]	; (b68 <udi_msc_csw_send+0x28>)
     b46:	9300      	str	r3, [sp, #0]
     b48:	230d      	movs	r3, #13
     b4a:	4a08      	ldr	r2, [pc, #32]	; (b6c <udi_msc_csw_send+0x2c>)
     b4c:	2100      	movs	r1, #0
     b4e:	2081      	movs	r0, #129	; 0x81
     b50:	4c07      	ldr	r4, [pc, #28]	; (b70 <udi_msc_csw_send+0x30>)
     b52:	47a0      	blx	r4
     b54:	2800      	cmp	r0, #0
     b56:	d001      	beq.n	b5c <udi_msc_csw_send+0x1c>
}
     b58:	b002      	add	sp, #8
     b5a:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     b5c:	4905      	ldr	r1, [pc, #20]	; (b74 <udi_msc_csw_send+0x34>)
     b5e:	3081      	adds	r0, #129	; 0x81
     b60:	4b05      	ldr	r3, [pc, #20]	; (b78 <udi_msc_csw_send+0x38>)
     b62:	4798      	blx	r3
}
     b64:	e7f8      	b.n	b58 <udi_msc_csw_send+0x18>
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	00000b35 	.word	0x00000b35
     b6c:	20000048 	.word	0x20000048
     b70:	00002e21 	.word	0x00002e21
     b74:	00000b41 	.word	0x00000b41
     b78:	00002dc9 	.word	0x00002dc9

00000b7c <udi_msc_cbw_invalid>:
{
     b7c:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
     b7e:	4b06      	ldr	r3, [pc, #24]	; (b98 <udi_msc_cbw_invalid+0x1c>)
     b80:	781b      	ldrb	r3, [r3, #0]
     b82:	2b00      	cmp	r3, #0
     b84:	d100      	bne.n	b88 <udi_msc_cbw_invalid+0xc>
}
     b86:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_OUT);
     b88:	2002      	movs	r0, #2
     b8a:	4b04      	ldr	r3, [pc, #16]	; (b9c <udi_msc_cbw_invalid+0x20>)
     b8c:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
     b8e:	4904      	ldr	r1, [pc, #16]	; (ba0 <udi_msc_cbw_invalid+0x24>)
     b90:	2002      	movs	r0, #2
     b92:	4b04      	ldr	r3, [pc, #16]	; (ba4 <udi_msc_cbw_invalid+0x28>)
     b94:	4798      	blx	r3
     b96:	e7f6      	b.n	b86 <udi_msc_cbw_invalid+0xa>
     b98:	200001a0 	.word	0x200001a0
     b9c:	00002c55 	.word	0x00002c55
     ba0:	00000b7d 	.word	0x00000b7d
     ba4:	00002dc9 	.word	0x00002dc9

00000ba8 <udi_msc_csw_invalid>:
{
     ba8:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
     baa:	4b06      	ldr	r3, [pc, #24]	; (bc4 <udi_msc_csw_invalid+0x1c>)
     bac:	781b      	ldrb	r3, [r3, #0]
     bae:	2b00      	cmp	r3, #0
     bb0:	d100      	bne.n	bb4 <udi_msc_csw_invalid+0xc>
}
     bb2:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_IN);
     bb4:	2081      	movs	r0, #129	; 0x81
     bb6:	4b04      	ldr	r3, [pc, #16]	; (bc8 <udi_msc_csw_invalid+0x20>)
     bb8:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
     bba:	4904      	ldr	r1, [pc, #16]	; (bcc <udi_msc_csw_invalid+0x24>)
     bbc:	2081      	movs	r0, #129	; 0x81
     bbe:	4b04      	ldr	r3, [pc, #16]	; (bd0 <udi_msc_csw_invalid+0x28>)
     bc0:	4798      	blx	r3
     bc2:	e7f6      	b.n	bb2 <udi_msc_csw_invalid+0xa>
     bc4:	200001a0 	.word	0x200001a0
     bc8:	00002c55 	.word	0x00002c55
     bcc:	00000ba9 	.word	0x00000ba9
     bd0:	00002dc9 	.word	0x00002dc9

00000bd4 <udi_msc_csw_process>:
{
     bd4:	b510      	push	{r4, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
     bd6:	4b0b      	ldr	r3, [pc, #44]	; (c04 <udi_msc_csw_process+0x30>)
     bd8:	689b      	ldr	r3, [r3, #8]
     bda:	2b00      	cmp	r3, #0
     bdc:	d006      	beq.n	bec <udi_msc_csw_process+0x18>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     bde:	4b0a      	ldr	r3, [pc, #40]	; (c08 <udi_msc_csw_process+0x34>)
     be0:	7b1b      	ldrb	r3, [r3, #12]
     be2:	2b7f      	cmp	r3, #127	; 0x7f
     be4:	d809      	bhi.n	bfa <udi_msc_csw_process+0x26>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     be6:	2002      	movs	r0, #2
     be8:	4b08      	ldr	r3, [pc, #32]	; (c0c <udi_msc_csw_process+0x38>)
     bea:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     bec:	4b06      	ldr	r3, [pc, #24]	; (c08 <udi_msc_csw_process+0x34>)
     bee:	685a      	ldr	r2, [r3, #4]
     bf0:	4b04      	ldr	r3, [pc, #16]	; (c04 <udi_msc_csw_process+0x30>)
     bf2:	605a      	str	r2, [r3, #4]
	udi_msc_csw_send();
     bf4:	4b06      	ldr	r3, [pc, #24]	; (c10 <udi_msc_csw_process+0x3c>)
     bf6:	4798      	blx	r3
}
     bf8:	bd10      	pop	{r4, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
     bfa:	2081      	movs	r0, #129	; 0x81
     bfc:	4b03      	ldr	r3, [pc, #12]	; (c0c <udi_msc_csw_process+0x38>)
     bfe:	4798      	blx	r3
     c00:	e7f4      	b.n	bec <udi_msc_csw_process+0x18>
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	20000048 	.word	0x20000048
     c08:	200001ac 	.word	0x200001ac
     c0c:	00002c55 	.word	0x00002c55
     c10:	00000b41 	.word	0x00000b41

00000c14 <udi_msc_clear_sense>:
{
     c14:	b510      	push	{r4, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     c16:	4c05      	ldr	r4, [pc, #20]	; (c2c <udi_msc_clear_sense+0x18>)
     c18:	2212      	movs	r2, #18
     c1a:	2100      	movs	r1, #0
     c1c:	0020      	movs	r0, r4
     c1e:	4b04      	ldr	r3, [pc, #16]	; (c30 <udi_msc_clear_sense+0x1c>)
     c20:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     c22:	23f0      	movs	r3, #240	; 0xf0
     c24:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     c26:	3be6      	subs	r3, #230	; 0xe6
     c28:	71e3      	strb	r3, [r4, #7]
}
     c2a:	bd10      	pop	{r4, pc}
     c2c:	200001d4 	.word	0x200001d4
     c30:	000067bb 	.word	0x000067bb

00000c34 <udi_msc_sense_fail>:
{
     c34:	b570      	push	{r4, r5, r6, lr}
     c36:	0006      	movs	r6, r0
     c38:	000d      	movs	r5, r1
     c3a:	0014      	movs	r4, r2
	udi_msc_clear_sense();
     c3c:	4b08      	ldr	r3, [pc, #32]	; (c60 <udi_msc_sense_fail+0x2c>)
     c3e:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     c40:	2201      	movs	r2, #1
     c42:	4b08      	ldr	r3, [pc, #32]	; (c64 <udi_msc_sense_fail+0x30>)
     c44:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     c46:	4b08      	ldr	r3, [pc, #32]	; (c68 <udi_msc_sense_fail+0x34>)
     c48:	709e      	strb	r6, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
     c4a:	0e22      	lsrs	r2, r4, #24
     c4c:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
     c4e:	0c22      	lsrs	r2, r4, #16
     c50:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
     c52:	0a22      	lsrs	r2, r4, #8
     c54:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
     c56:	719c      	strb	r4, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     c58:	0a2a      	lsrs	r2, r5, #8
     c5a:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
     c5c:	735d      	strb	r5, [r3, #13]
}
     c5e:	bd70      	pop	{r4, r5, r6, pc}
     c60:	00000c15 	.word	0x00000c15
     c64:	20000048 	.word	0x20000048
     c68:	200001d4 	.word	0x200001d4

00000c6c <udi_msc_sense_fail_cdb_invalid>:
{
     c6c:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
     c6e:	2200      	movs	r2, #0
     c70:	2190      	movs	r1, #144	; 0x90
     c72:	0189      	lsls	r1, r1, #6
     c74:	2005      	movs	r0, #5
     c76:	4b01      	ldr	r3, [pc, #4]	; (c7c <udi_msc_sense_fail_cdb_invalid+0x10>)
     c78:	4798      	blx	r3
}
     c7a:	bd10      	pop	{r4, pc}
     c7c:	00000c35 	.word	0x00000c35

00000c80 <udi_msc_cbw_validate>:
{
     c80:	b510      	push	{r4, lr}
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     c82:	4b09      	ldr	r3, [pc, #36]	; (ca8 <udi_msc_cbw_validate+0x28>)
     c84:	7b1b      	ldrb	r3, [r3, #12]
     c86:	4059      	eors	r1, r3
     c88:	b249      	sxtb	r1, r1
     c8a:	2900      	cmp	r1, #0
     c8c:	db04      	blt.n	c98 <udi_msc_cbw_validate+0x18>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     c8e:	4b07      	ldr	r3, [pc, #28]	; (cac <udi_msc_cbw_validate+0x2c>)
     c90:	689a      	ldr	r2, [r3, #8]
	return true;
     c92:	2301      	movs	r3, #1
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     c94:	4282      	cmp	r2, r0
     c96:	d204      	bcs.n	ca2 <udi_msc_cbw_validate+0x22>
		udi_msc_sense_fail_cdb_invalid();
     c98:	4b05      	ldr	r3, [pc, #20]	; (cb0 <udi_msc_cbw_validate+0x30>)
     c9a:	4798      	blx	r3
		udi_msc_csw_process();
     c9c:	4b05      	ldr	r3, [pc, #20]	; (cb4 <udi_msc_cbw_validate+0x34>)
     c9e:	4798      	blx	r3
		return false;
     ca0:	2300      	movs	r3, #0
}
     ca2:	0018      	movs	r0, r3
     ca4:	bd10      	pop	{r4, pc}
     ca6:	46c0      	nop			; (mov r8, r8)
     ca8:	200001ac 	.word	0x200001ac
     cac:	20000048 	.word	0x20000048
     cb0:	00000c6d 	.word	0x00000c6d
     cb4:	00000bd5 	.word	0x00000bd5

00000cb8 <udi_msc_sense_fail_hardware>:
{
     cb8:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
     cba:	2200      	movs	r2, #0
     cbc:	2100      	movs	r1, #0
     cbe:	2004      	movs	r0, #4
     cc0:	4b01      	ldr	r3, [pc, #4]	; (cc8 <udi_msc_sense_fail_hardware+0x10>)
     cc2:	4798      	blx	r3
}
     cc4:	bd10      	pop	{r4, pc}
     cc6:	46c0      	nop			; (mov r8, r8)
     cc8:	00000c35 	.word	0x00000c35

00000ccc <udi_msc_data_send>:
{
     ccc:	b510      	push	{r4, lr}
     cce:	b082      	sub	sp, #8
     cd0:	0002      	movs	r2, r0
     cd2:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
     cd4:	4907      	ldr	r1, [pc, #28]	; (cf4 <udi_msc_data_send+0x28>)
     cd6:	9100      	str	r1, [sp, #0]
     cd8:	2101      	movs	r1, #1
     cda:	2081      	movs	r0, #129	; 0x81
     cdc:	4c06      	ldr	r4, [pc, #24]	; (cf8 <udi_msc_data_send+0x2c>)
     cde:	47a0      	blx	r4
     ce0:	2800      	cmp	r0, #0
     ce2:	d001      	beq.n	ce8 <udi_msc_data_send+0x1c>
}
     ce4:	b002      	add	sp, #8
     ce6:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_hardware();
     ce8:	4b04      	ldr	r3, [pc, #16]	; (cfc <udi_msc_data_send+0x30>)
     cea:	4798      	blx	r3
		udi_msc_csw_process();
     cec:	4b04      	ldr	r3, [pc, #16]	; (d00 <udi_msc_data_send+0x34>)
     cee:	4798      	blx	r3
}
     cf0:	e7f8      	b.n	ce4 <udi_msc_data_send+0x18>
     cf2:	46c0      	nop			; (mov r8, r8)
     cf4:	00000d45 	.word	0x00000d45
     cf8:	00002e21 	.word	0x00002e21
     cfc:	00000cb9 	.word	0x00000cb9
     d00:	00000bd5 	.word	0x00000bd5

00000d04 <udi_msc_sense_fail_busy_or_change>:
{
     d04:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
     d06:	2200      	movs	r2, #0
     d08:	21a0      	movs	r1, #160	; 0xa0
     d0a:	0189      	lsls	r1, r1, #6
     d0c:	2006      	movs	r0, #6
     d0e:	4b01      	ldr	r3, [pc, #4]	; (d14 <udi_msc_sense_fail_busy_or_change+0x10>)
     d10:	4798      	blx	r3
}
     d12:	bd10      	pop	{r4, pc}
     d14:	00000c35 	.word	0x00000c35

00000d18 <udi_msc_sense_fail_not_present>:
{
     d18:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
     d1a:	2200      	movs	r2, #0
     d1c:	21e8      	movs	r1, #232	; 0xe8
     d1e:	0189      	lsls	r1, r1, #6
     d20:	2002      	movs	r0, #2
     d22:	4b01      	ldr	r3, [pc, #4]	; (d28 <udi_msc_sense_fail_not_present+0x10>)
     d24:	4798      	blx	r3
}
     d26:	bd10      	pop	{r4, pc}
     d28:	00000c35 	.word	0x00000c35

00000d2c <udi_msc_sense_pass>:
{
     d2c:	b510      	push	{r4, lr}
	udi_msc_clear_sense();
     d2e:	4b03      	ldr	r3, [pc, #12]	; (d3c <udi_msc_sense_pass+0x10>)
     d30:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
     d32:	2200      	movs	r2, #0
     d34:	4b02      	ldr	r3, [pc, #8]	; (d40 <udi_msc_sense_pass+0x14>)
     d36:	731a      	strb	r2, [r3, #12]
}
     d38:	bd10      	pop	{r4, pc}
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	00000c15 	.word	0x00000c15
     d40:	20000048 	.word	0x20000048

00000d44 <udi_msc_data_sent>:
{
     d44:	b510      	push	{r4, lr}
     d46:	000c      	movs	r4, r1
	if (UDD_EP_TRANSFER_OK != status) {
     d48:	2800      	cmp	r0, #0
     d4a:	d000      	beq.n	d4e <udi_msc_data_sent+0xa>
}
     d4c:	bd10      	pop	{r4, pc}
	udi_msc_sense_pass();
     d4e:	4b04      	ldr	r3, [pc, #16]	; (d60 <udi_msc_data_sent+0x1c>)
     d50:	4798      	blx	r3
	udi_msc_csw.dCSWDataResidue -= nb_sent;
     d52:	4b04      	ldr	r3, [pc, #16]	; (d64 <udi_msc_data_sent+0x20>)
     d54:	689a      	ldr	r2, [r3, #8]
     d56:	1b14      	subs	r4, r2, r4
     d58:	609c      	str	r4, [r3, #8]
	udi_msc_csw_process();
     d5a:	4b03      	ldr	r3, [pc, #12]	; (d68 <udi_msc_data_sent+0x24>)
     d5c:	4798      	blx	r3
     d5e:	e7f5      	b.n	d4c <udi_msc_data_sent+0x8>
     d60:	00000d2d 	.word	0x00000d2d
     d64:	20000048 	.word	0x20000048
     d68:	00000bd5 	.word	0x00000bd5

00000d6c <udi_msc_spc_mode_sense>:
{
     d6c:	b570      	push	{r4, r5, r6, lr}
     d6e:	0005      	movs	r5, r0
	memset(&sense, 0, sizeof(sense));
     d70:	2214      	movs	r2, #20
     d72:	2100      	movs	r1, #0
     d74:	4823      	ldr	r0, [pc, #140]	; (e04 <udi_msc_spc_mode_sense+0x98>)
     d76:	4b24      	ldr	r3, [pc, #144]	; (e08 <udi_msc_spc_mode_sense+0x9c>)
     d78:	4798      	blx	r3
	if (b_sense10) {
     d7a:	2d00      	cmp	r5, #0
     d7c:	d018      	beq.n	db0 <udi_msc_spc_mode_sense+0x44>
		request_lgt = udi_msc_cbw.CDB[8];
     d7e:	4b23      	ldr	r3, [pc, #140]	; (e0c <udi_msc_spc_mode_sense+0xa0>)
     d80:	7dd9      	ldrb	r1, [r3, #23]
		ptr_mode = &sense.s10.sense_data;
     d82:	4a20      	ldr	r2, [pc, #128]	; (e04 <udi_msc_spc_mode_sense+0x98>)
     d84:	3208      	adds	r2, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
     d86:	2408      	movs	r4, #8
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
     d88:	4b20      	ldr	r3, [pc, #128]	; (e0c <udi_msc_spc_mode_sense+0xa0>)
     d8a:	7c58      	ldrb	r0, [r3, #17]
     d8c:	233f      	movs	r3, #63	; 0x3f
     d8e:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
     d90:	2b1c      	cmp	r3, #28
     d92:	d013      	beq.n	dbc <udi_msc_spc_mode_sense+0x50>
			|| (SCSI_MS_MODE_ALL == mode)) {
     d94:	2b3f      	cmp	r3, #63	; 0x3f
     d96:	d011      	beq.n	dbc <udi_msc_spc_mode_sense+0x50>
     d98:	1c20      	adds	r0, r4, #0
     d9a:	428c      	cmp	r4, r1
     d9c:	d900      	bls.n	da0 <udi_msc_spc_mode_sense+0x34>
     d9e:	1c08      	adds	r0, r1, #0
     da0:	b2c6      	uxtb	r6, r0
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
     da2:	2180      	movs	r1, #128	; 0x80
     da4:	0030      	movs	r0, r6
     da6:	4b1a      	ldr	r3, [pc, #104]	; (e10 <udi_msc_spc_mode_sense+0xa4>)
     da8:	4798      	blx	r3
     daa:	2800      	cmp	r0, #0
     dac:	d10f      	bne.n	dce <udi_msc_spc_mode_sense+0x62>
}
     dae:	bd70      	pop	{r4, r5, r6, pc}
		request_lgt = udi_msc_cbw.CDB[4];
     db0:	4b16      	ldr	r3, [pc, #88]	; (e0c <udi_msc_spc_mode_sense+0xa0>)
     db2:	7cd9      	ldrb	r1, [r3, #19]
		ptr_mode = &sense.s6.sense_data;
     db4:	4a13      	ldr	r2, [pc, #76]	; (e04 <udi_msc_spc_mode_sense+0x98>)
     db6:	3204      	adds	r2, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
     db8:	2404      	movs	r4, #4
     dba:	e7e5      	b.n	d88 <udi_msc_spc_mode_sense+0x1c>
		ptr_mode->page_code =
     dbc:	231c      	movs	r3, #28
     dbe:	7013      	strb	r3, [r2, #0]
		ptr_mode->page_length =
     dc0:	3b12      	subs	r3, #18
     dc2:	7053      	strb	r3, [r2, #1]
		ptr_mode->mrie =
     dc4:	3b05      	subs	r3, #5
     dc6:	70d3      	strb	r3, [r2, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
     dc8:	340c      	adds	r4, #12
     dca:	b2e4      	uxtb	r4, r4
     dcc:	e7e4      	b.n	d98 <udi_msc_spc_mode_sense+0x2c>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
     dce:	4b0f      	ldr	r3, [pc, #60]	; (e0c <udi_msc_spc_mode_sense+0xa0>)
     dd0:	7b58      	ldrb	r0, [r3, #13]
     dd2:	4b10      	ldr	r3, [pc, #64]	; (e14 <udi_msc_spc_mode_sense+0xa8>)
     dd4:	4798      	blx	r3
     dd6:	1e43      	subs	r3, r0, #1
     dd8:	4198      	sbcs	r0, r3
     dda:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
     ddc:	2d00      	cmp	r5, #0
     dde:	d00c      	beq.n	dfa <udi_msc_spc_mode_sense+0x8e>
				cpu_to_be16((data_sense_lgt - 2));
     de0:	3c02      	subs	r4, #2
     de2:	b2a4      	uxth	r4, r4
		sense.s10.header.mode_data_length =
     de4:	4a07      	ldr	r2, [pc, #28]	; (e04 <udi_msc_spc_mode_sense+0x98>)
				cpu_to_be16((data_sense_lgt - 2));
     de6:	0a23      	lsrs	r3, r4, #8
     de8:	0224      	lsls	r4, r4, #8
     dea:	431c      	orrs	r4, r3
		sense.s10.header.mode_data_length =
     dec:	8014      	strh	r4, [r2, #0]
		sense.s10.header.device_specific_parameter = wp;
     dee:	70d0      	strb	r0, [r2, #3]
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
     df0:	0031      	movs	r1, r6
     df2:	4804      	ldr	r0, [pc, #16]	; (e04 <udi_msc_spc_mode_sense+0x98>)
     df4:	4b08      	ldr	r3, [pc, #32]	; (e18 <udi_msc_spc_mode_sense+0xac>)
     df6:	4798      	blx	r3
     df8:	e7d9      	b.n	dae <udi_msc_spc_mode_sense+0x42>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
     dfa:	4b02      	ldr	r3, [pc, #8]	; (e04 <udi_msc_spc_mode_sense+0x98>)
     dfc:	3c01      	subs	r4, #1
     dfe:	701c      	strb	r4, [r3, #0]
		sense.s6.header.device_specific_parameter = wp;
     e00:	7098      	strb	r0, [r3, #2]
     e02:	e7f5      	b.n	df0 <udi_msc_spc_mode_sense+0x84>
     e04:	20000188 	.word	0x20000188
     e08:	000067bb 	.word	0x000067bb
     e0c:	200001ac 	.word	0x200001ac
     e10:	00000c81 	.word	0x00000c81
     e14:	00005ba9 	.word	0x00005ba9
     e18:	00000ccd 	.word	0x00000ccd

00000e1c <udi_msc_sbc_trans>:
{
     e1c:	b510      	push	{r4, lr}
     e1e:	1e04      	subs	r4, r0, #0
	if (!b_read) {
     e20:	d01e      	beq.n	e60 <udi_msc_sbc_trans+0x44>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
     e22:	4a17      	ldr	r2, [pc, #92]	; (e80 <udi_msc_sbc_trans+0x64>)
     e24:	4b17      	ldr	r3, [pc, #92]	; (e84 <udi_msc_sbc_trans+0x68>)
     e26:	7c59      	ldrb	r1, [r3, #17]
     e28:	70d1      	strb	r1, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
     e2a:	7c99      	ldrb	r1, [r3, #18]
     e2c:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
     e2e:	7cd9      	ldrb	r1, [r3, #19]
     e30:	7051      	strb	r1, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
     e32:	7d19      	ldrb	r1, [r3, #20]
     e34:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
     e36:	4a14      	ldr	r2, [pc, #80]	; (e88 <udi_msc_sbc_trans+0x6c>)
     e38:	7d99      	ldrb	r1, [r3, #22]
     e3a:	7051      	strb	r1, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
     e3c:	7ddb      	ldrb	r3, [r3, #23]
     e3e:	7013      	strb	r3, [r2, #0]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
     e40:	8810      	ldrh	r0, [r2, #0]
     e42:	0240      	lsls	r0, r0, #9
	if (!udi_msc_cbw_validate(trans_size,
     e44:	0021      	movs	r1, r4
     e46:	1e4b      	subs	r3, r1, #1
     e48:	4199      	sbcs	r1, r3
     e4a:	01c9      	lsls	r1, r1, #7
     e4c:	4b0f      	ldr	r3, [pc, #60]	; (e8c <udi_msc_sbc_trans+0x70>)
     e4e:	4798      	blx	r3
     e50:	2800      	cmp	r0, #0
     e52:	d004      	beq.n	e5e <udi_msc_sbc_trans+0x42>
	udi_msc_b_read = b_read;
     e54:	4b0e      	ldr	r3, [pc, #56]	; (e90 <udi_msc_sbc_trans+0x74>)
     e56:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
     e58:	2201      	movs	r2, #1
     e5a:	4b0e      	ldr	r3, [pc, #56]	; (e94 <udi_msc_sbc_trans+0x78>)
     e5c:	701a      	strb	r2, [r3, #0]
}
     e5e:	bd10      	pop	{r4, pc}
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
     e60:	4b08      	ldr	r3, [pc, #32]	; (e84 <udi_msc_sbc_trans+0x68>)
     e62:	7b58      	ldrb	r0, [r3, #13]
     e64:	4b0c      	ldr	r3, [pc, #48]	; (e98 <udi_msc_sbc_trans+0x7c>)
     e66:	4798      	blx	r3
     e68:	2800      	cmp	r0, #0
     e6a:	d0da      	beq.n	e22 <udi_msc_sbc_trans+0x6>
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
     e6c:	2200      	movs	r2, #0
     e6e:	219c      	movs	r1, #156	; 0x9c
     e70:	0189      	lsls	r1, r1, #6
     e72:	2007      	movs	r0, #7
     e74:	4b09      	ldr	r3, [pc, #36]	; (e9c <udi_msc_sbc_trans+0x80>)
     e76:	4798      	blx	r3
			udi_msc_csw_process();
     e78:	4b09      	ldr	r3, [pc, #36]	; (ea0 <udi_msc_sbc_trans+0x84>)
     e7a:	4798      	blx	r3
			return;
     e7c:	e7ef      	b.n	e5e <udi_msc_sbc_trans+0x42>
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	2000019c 	.word	0x2000019c
     e84:	200001ac 	.word	0x200001ac
     e88:	200001cc 	.word	0x200001cc
     e8c:	00000c81 	.word	0x00000c81
     e90:	200001a1 	.word	0x200001a1
     e94:	200001a2 	.word	0x200001a2
     e98:	00005ba9 	.word	0x00005ba9
     e9c:	00000c35 	.word	0x00000c35
     ea0:	00000bd5 	.word	0x00000bd5

00000ea4 <udi_msc_cbw_received>:
{
     ea4:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EP_TRANSFER_OK != status) {
     ea6:	2800      	cmp	r0, #0
     ea8:	d10d      	bne.n	ec6 <udi_msc_cbw_received+0x22>
	if ((sizeof(udi_msc_cbw) != nb_received)
     eaa:	291f      	cmp	r1, #31
     eac:	d104      	bne.n	eb8 <udi_msc_cbw_received+0x14>
			|| (udi_msc_cbw.dCBWSignature !=
     eae:	4b84      	ldr	r3, [pc, #528]	; (10c0 <udi_msc_cbw_received+0x21c>)
     eb0:	4a84      	ldr	r2, [pc, #528]	; (10c4 <udi_msc_cbw_received+0x220>)
     eb2:	6812      	ldr	r2, [r2, #0]
     eb4:	429a      	cmp	r2, r3
     eb6:	d007      	beq.n	ec8 <udi_msc_cbw_received+0x24>
		udi_msc_b_cbw_invalid = true;
     eb8:	2201      	movs	r2, #1
     eba:	4b83      	ldr	r3, [pc, #524]	; (10c8 <udi_msc_cbw_received+0x224>)
     ebc:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
     ebe:	4b83      	ldr	r3, [pc, #524]	; (10cc <udi_msc_cbw_received+0x228>)
     ec0:	4798      	blx	r3
		udi_msc_csw_invalid();
     ec2:	4b83      	ldr	r3, [pc, #524]	; (10d0 <udi_msc_cbw_received+0x22c>)
     ec4:	4798      	blx	r3
}
     ec6:	bd70      	pop	{r4, r5, r6, pc}
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
     ec8:	4b7e      	ldr	r3, [pc, #504]	; (10c4 <udi_msc_cbw_received+0x220>)
     eca:	7b58      	ldrb	r0, [r3, #13]
     ecc:	220f      	movs	r2, #15
     ece:	4010      	ands	r0, r2
     ed0:	7358      	strb	r0, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
     ed2:	4b80      	ldr	r3, [pc, #512]	; (10d4 <udi_msc_cbw_received+0x230>)
     ed4:	781b      	ldrb	r3, [r3, #0]
     ed6:	4283      	cmp	r3, r0
     ed8:	d30b      	bcc.n	ef2 <udi_msc_cbw_received+0x4e>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
     eda:	4b7a      	ldr	r3, [pc, #488]	; (10c4 <udi_msc_cbw_received+0x220>)
	udi_msc_csw.dCSWDataResidue =
     edc:	4a7e      	ldr	r2, [pc, #504]	; (10d8 <udi_msc_cbw_received+0x234>)
     ede:	6899      	ldr	r1, [r3, #8]
     ee0:	6091      	str	r1, [r2, #8]
	switch (udi_msc_cbw.CDB[0]) {
     ee2:	7bda      	ldrb	r2, [r3, #15]
     ee4:	2a5a      	cmp	r2, #90	; 0x5a
     ee6:	d900      	bls.n	eea <udi_msc_cbw_received+0x46>
     ee8:	e0d2      	b.n	1090 <udi_msc_cbw_received+0x1ec>
     eea:	0093      	lsls	r3, r2, #2
     eec:	4a7b      	ldr	r2, [pc, #492]	; (10dc <udi_msc_cbw_received+0x238>)
     eee:	58d3      	ldr	r3, [r2, r3]
     ef0:	469f      	mov	pc, r3
		udi_msc_sense_fail_cdb_invalid();
     ef2:	4b7b      	ldr	r3, [pc, #492]	; (10e0 <udi_msc_cbw_received+0x23c>)
     ef4:	4798      	blx	r3
		udi_msc_csw_process();
     ef6:	4b7b      	ldr	r3, [pc, #492]	; (10e4 <udi_msc_cbw_received+0x240>)
     ef8:	4798      	blx	r3
		return;
     efa:	e7e4      	b.n	ec6 <udi_msc_cbw_received+0x22>
	uint8_t length = udi_msc_cbw.CDB[4];
     efc:	4b71      	ldr	r3, [pc, #452]	; (10c4 <udi_msc_cbw_received+0x220>)
     efe:	7cda      	ldrb	r2, [r3, #19]
     f00:	1c13      	adds	r3, r2, #0
     f02:	2a12      	cmp	r2, #18
     f04:	d900      	bls.n	f08 <udi_msc_cbw_received+0x64>
     f06:	2312      	movs	r3, #18
     f08:	b2dc      	uxtb	r4, r3
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
     f0a:	2180      	movs	r1, #128	; 0x80
     f0c:	0020      	movs	r0, r4
     f0e:	4b76      	ldr	r3, [pc, #472]	; (10e8 <udi_msc_cbw_received+0x244>)
     f10:	4798      	blx	r3
     f12:	2800      	cmp	r0, #0
     f14:	d0d7      	beq.n	ec6 <udi_msc_cbw_received+0x22>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
     f16:	0021      	movs	r1, r4
     f18:	4874      	ldr	r0, [pc, #464]	; (10ec <udi_msc_cbw_received+0x248>)
     f1a:	4b75      	ldr	r3, [pc, #468]	; (10f0 <udi_msc_cbw_received+0x24c>)
     f1c:	4798      	blx	r3
     f1e:	e7d2      	b.n	ec6 <udi_msc_cbw_received+0x22>
	length = udi_msc_cbw.CDB[4];
     f20:	4b68      	ldr	r3, [pc, #416]	; (10c4 <udi_msc_cbw_received+0x220>)
     f22:	7cdb      	ldrb	r3, [r3, #19]
     f24:	1c1a      	adds	r2, r3, #0
     f26:	2b24      	cmp	r3, #36	; 0x24
     f28:	d900      	bls.n	f2c <udi_msc_cbw_received+0x88>
     f2a:	2224      	movs	r2, #36	; 0x24
     f2c:	b2d4      	uxtb	r4, r2
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
     f2e:	2180      	movs	r1, #128	; 0x80
     f30:	0020      	movs	r0, r4
     f32:	4b6d      	ldr	r3, [pc, #436]	; (10e8 <udi_msc_cbw_received+0x244>)
     f34:	4798      	blx	r3
     f36:	2800      	cmp	r0, #0
     f38:	d0c5      	beq.n	ec6 <udi_msc_cbw_received+0x22>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
     f3a:	4b62      	ldr	r3, [pc, #392]	; (10c4 <udi_msc_cbw_received+0x220>)
     f3c:	7c1b      	ldrb	r3, [r3, #16]
     f3e:	079b      	lsls	r3, r3, #30
     f40:	d103      	bne.n	f4a <udi_msc_cbw_received+0xa6>
			|| (0 != udi_msc_cbw.CDB[2])) {
     f42:	4b60      	ldr	r3, [pc, #384]	; (10c4 <udi_msc_cbw_received+0x220>)
     f44:	7c5d      	ldrb	r5, [r3, #17]
     f46:	2d00      	cmp	r5, #0
     f48:	d004      	beq.n	f54 <udi_msc_cbw_received+0xb0>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
     f4a:	4b65      	ldr	r3, [pc, #404]	; (10e0 <udi_msc_cbw_received+0x23c>)
     f4c:	4798      	blx	r3
		udi_msc_csw_process();
     f4e:	4b65      	ldr	r3, [pc, #404]	; (10e4 <udi_msc_cbw_received+0x240>)
     f50:	4798      	blx	r3
     f52:	e7b8      	b.n	ec6 <udi_msc_cbw_received+0x22>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
     f54:	4b5b      	ldr	r3, [pc, #364]	; (10c4 <udi_msc_cbw_received+0x220>)
     f56:	7b58      	ldrb	r0, [r3, #13]
     f58:	4b66      	ldr	r3, [pc, #408]	; (10f4 <udi_msc_cbw_received+0x250>)
     f5a:	4798      	blx	r3
     f5c:	2380      	movs	r3, #128	; 0x80
     f5e:	2800      	cmp	r0, #0
     f60:	d100      	bne.n	f64 <udi_msc_cbw_received+0xc0>
     f62:	002b      	movs	r3, r5
     f64:	4e64      	ldr	r6, [pc, #400]	; (10f8 <udi_msc_cbw_received+0x254>)
     f66:	7073      	strb	r3, [r6, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
     f68:	4b56      	ldr	r3, [pc, #344]	; (10c4 <udi_msc_cbw_received+0x220>)
     f6a:	7b58      	ldrb	r0, [r3, #13]
     f6c:	4b63      	ldr	r3, [pc, #396]	; (10fc <udi_msc_cbw_received+0x258>)
     f6e:	4798      	blx	r3
     f70:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
     f72:	0030      	movs	r0, r6
     f74:	3010      	adds	r0, #16
     f76:	3101      	adds	r1, #1
     f78:	2210      	movs	r2, #16
     f7a:	4b61      	ldr	r3, [pc, #388]	; (1100 <udi_msc_cbw_received+0x25c>)
     f7c:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
     f7e:	7c33      	ldrb	r3, [r6, #16]
     f80:	2b00      	cmp	r3, #0
     f82:	d100      	bne.n	f86 <udi_msc_cbw_received+0xe2>
     f84:	e08e      	b.n	10a4 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     f86:	2b22      	cmp	r3, #34	; 0x22
     f88:	d100      	bne.n	f8c <udi_msc_cbw_received+0xe8>
     f8a:	e08a      	b.n	10a2 <udi_msc_cbw_received+0x1fe>
     f8c:	495a      	ldr	r1, [pc, #360]	; (10f8 <udi_msc_cbw_received+0x254>)
		i++;
     f8e:	2301      	movs	r3, #1
		if ((0 == udi_msc_inquiry_data.product_id[i])
     f90:	7c4a      	ldrb	r2, [r1, #17]
     f92:	2a00      	cmp	r2, #0
     f94:	d100      	bne.n	f98 <udi_msc_cbw_received+0xf4>
     f96:	e085      	b.n	10a4 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     f98:	2a22      	cmp	r2, #34	; 0x22
     f9a:	d100      	bne.n	f9e <udi_msc_cbw_received+0xfa>
     f9c:	e082      	b.n	10a4 <udi_msc_cbw_received+0x200>
		i++;
     f9e:	3301      	adds	r3, #1
     fa0:	b2db      	uxtb	r3, r3
     fa2:	3101      	adds	r1, #1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     fa4:	2b10      	cmp	r3, #16
     fa6:	d1f3      	bne.n	f90 <udi_msc_cbw_received+0xec>
     fa8:	e084      	b.n	10b4 <udi_msc_cbw_received+0x210>
		udi_msc_spc_mode_sense(false);
     faa:	2000      	movs	r0, #0
     fac:	4b55      	ldr	r3, [pc, #340]	; (1104 <udi_msc_cbw_received+0x260>)
     fae:	4798      	blx	r3
		break;
     fb0:	e789      	b.n	ec6 <udi_msc_cbw_received+0x22>
		udi_msc_spc_mode_sense(true);
     fb2:	2001      	movs	r0, #1
     fb4:	4b53      	ldr	r3, [pc, #332]	; (1104 <udi_msc_cbw_received+0x260>)
     fb6:	4798      	blx	r3
		break;
     fb8:	e785      	b.n	ec6 <udi_msc_cbw_received+0x22>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
     fba:	4b53      	ldr	r3, [pc, #332]	; (1108 <udi_msc_cbw_received+0x264>)
     fbc:	4798      	blx	r3
     fbe:	2802      	cmp	r0, #2
     fc0:	d009      	beq.n	fd6 <udi_msc_cbw_received+0x132>
     fc2:	2803      	cmp	r0, #3
     fc4:	d004      	beq.n	fd0 <udi_msc_cbw_received+0x12c>
     fc6:	2800      	cmp	r0, #0
     fc8:	d008      	beq.n	fdc <udi_msc_cbw_received+0x138>
		udi_msc_sense_fail_hardware();
     fca:	4b50      	ldr	r3, [pc, #320]	; (110c <udi_msc_cbw_received+0x268>)
     fcc:	4798      	blx	r3
     fce:	e007      	b.n	fe0 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_busy_or_change();
     fd0:	4b4f      	ldr	r3, [pc, #316]	; (1110 <udi_msc_cbw_received+0x26c>)
     fd2:	4798      	blx	r3
     fd4:	e004      	b.n	fe0 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_not_present();
     fd6:	4b4f      	ldr	r3, [pc, #316]	; (1114 <udi_msc_cbw_received+0x270>)
     fd8:	4798      	blx	r3
     fda:	e001      	b.n	fe0 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_pass();
     fdc:	4b4e      	ldr	r3, [pc, #312]	; (1118 <udi_msc_cbw_received+0x274>)
     fde:	4798      	blx	r3
	udi_msc_csw_process();
     fe0:	4b40      	ldr	r3, [pc, #256]	; (10e4 <udi_msc_cbw_received+0x240>)
     fe2:	4798      	blx	r3
     fe4:	e76f      	b.n	ec6 <udi_msc_cbw_received+0x22>
	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
     fe6:	2180      	movs	r1, #128	; 0x80
     fe8:	2008      	movs	r0, #8
     fea:	4b3f      	ldr	r3, [pc, #252]	; (10e8 <udi_msc_cbw_received+0x244>)
     fec:	4798      	blx	r3
     fee:	2800      	cmp	r0, #0
     ff0:	d100      	bne.n	ff4 <udi_msc_cbw_received+0x150>
     ff2:	e768      	b.n	ec6 <udi_msc_cbw_received+0x22>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
     ff4:	4b33      	ldr	r3, [pc, #204]	; (10c4 <udi_msc_cbw_received+0x220>)
     ff6:	7b58      	ldrb	r0, [r3, #13]
     ff8:	4948      	ldr	r1, [pc, #288]	; (111c <udi_msc_cbw_received+0x278>)
     ffa:	4b49      	ldr	r3, [pc, #292]	; (1120 <udi_msc_cbw_received+0x27c>)
     ffc:	4798      	blx	r3
     ffe:	2802      	cmp	r0, #2
    1000:	d00d      	beq.n	101e <udi_msc_cbw_received+0x17a>
    1002:	2803      	cmp	r0, #3
    1004:	d006      	beq.n	1014 <udi_msc_cbw_received+0x170>
    1006:	2800      	cmp	r0, #0
    1008:	d00e      	beq.n	1028 <udi_msc_cbw_received+0x184>
		udi_msc_sense_fail_hardware();
    100a:	4b40      	ldr	r3, [pc, #256]	; (110c <udi_msc_cbw_received+0x268>)
    100c:	4798      	blx	r3
		udi_msc_csw_process();
    100e:	4b35      	ldr	r3, [pc, #212]	; (10e4 <udi_msc_cbw_received+0x240>)
    1010:	4798      	blx	r3
    1012:	e758      	b.n	ec6 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_busy_or_change();
    1014:	4b3e      	ldr	r3, [pc, #248]	; (1110 <udi_msc_cbw_received+0x26c>)
    1016:	4798      	blx	r3
		udi_msc_csw_process();
    1018:	4b32      	ldr	r3, [pc, #200]	; (10e4 <udi_msc_cbw_received+0x240>)
    101a:	4798      	blx	r3
    101c:	e753      	b.n	ec6 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_not_present();
    101e:	4b3d      	ldr	r3, [pc, #244]	; (1114 <udi_msc_cbw_received+0x270>)
    1020:	4798      	blx	r3
		udi_msc_csw_process();
    1022:	4b30      	ldr	r3, [pc, #192]	; (10e4 <udi_msc_cbw_received+0x240>)
    1024:	4798      	blx	r3
    1026:	e74e      	b.n	ec6 <udi_msc_cbw_received+0x22>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    1028:	483c      	ldr	r0, [pc, #240]	; (111c <udi_msc_cbw_received+0x278>)
    102a:	2380      	movs	r3, #128	; 0x80
    102c:	029b      	lsls	r3, r3, #10
    102e:	6043      	str	r3, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    1030:	6803      	ldr	r3, [r0, #0]
    1032:	ba1b      	rev	r3, r3
    1034:	6003      	str	r3, [r0, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    1036:	2108      	movs	r1, #8
    1038:	4b2d      	ldr	r3, [pc, #180]	; (10f0 <udi_msc_cbw_received+0x24c>)
    103a:	4798      	blx	r3
    103c:	e743      	b.n	ec6 <udi_msc_cbw_received+0x22>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    103e:	4b21      	ldr	r3, [pc, #132]	; (10c4 <udi_msc_cbw_received+0x220>)
    1040:	7cdb      	ldrb	r3, [r3, #19]
	if (loej) {
    1042:	079a      	lsls	r2, r3, #30
    1044:	d404      	bmi.n	1050 <udi_msc_cbw_received+0x1ac>
	udi_msc_sense_pass();
    1046:	4b34      	ldr	r3, [pc, #208]	; (1118 <udi_msc_cbw_received+0x274>)
    1048:	4798      	blx	r3
	udi_msc_csw_process();
    104a:	4b26      	ldr	r3, [pc, #152]	; (10e4 <udi_msc_cbw_received+0x240>)
    104c:	4798      	blx	r3
    104e:	e73a      	b.n	ec6 <udi_msc_cbw_received+0x22>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    1050:	2101      	movs	r1, #1
    1052:	404b      	eors	r3, r1
    1054:	2101      	movs	r1, #1
    1056:	4019      	ands	r1, r3
    1058:	4b32      	ldr	r3, [pc, #200]	; (1124 <udi_msc_cbw_received+0x280>)
    105a:	4798      	blx	r3
    105c:	e7f3      	b.n	1046 <udi_msc_cbw_received+0x1a2>
	uint8_t prevent = udi_msc_cbw.CDB[4];
    105e:	4b19      	ldr	r3, [pc, #100]	; (10c4 <udi_msc_cbw_received+0x220>)
	if (0 == prevent) {
    1060:	7cdb      	ldrb	r3, [r3, #19]
    1062:	2b00      	cmp	r3, #0
    1064:	d004      	beq.n	1070 <udi_msc_cbw_received+0x1cc>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    1066:	4b1e      	ldr	r3, [pc, #120]	; (10e0 <udi_msc_cbw_received+0x23c>)
    1068:	4798      	blx	r3
	udi_msc_csw_process();
    106a:	4b1e      	ldr	r3, [pc, #120]	; (10e4 <udi_msc_cbw_received+0x240>)
    106c:	4798      	blx	r3
    106e:	e72a      	b.n	ec6 <udi_msc_cbw_received+0x22>
		udi_msc_sense_pass();
    1070:	4b29      	ldr	r3, [pc, #164]	; (1118 <udi_msc_cbw_received+0x274>)
    1072:	4798      	blx	r3
    1074:	e7f9      	b.n	106a <udi_msc_cbw_received+0x1c6>
		udi_msc_sense_pass();
    1076:	4b28      	ldr	r3, [pc, #160]	; (1118 <udi_msc_cbw_received+0x274>)
    1078:	4798      	blx	r3
		udi_msc_csw_process();
    107a:	4b1a      	ldr	r3, [pc, #104]	; (10e4 <udi_msc_cbw_received+0x240>)
    107c:	4798      	blx	r3
		break;
    107e:	e722      	b.n	ec6 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(true);
    1080:	2001      	movs	r0, #1
    1082:	4b29      	ldr	r3, [pc, #164]	; (1128 <udi_msc_cbw_received+0x284>)
    1084:	4798      	blx	r3
		break;
    1086:	e71e      	b.n	ec6 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(false);
    1088:	2000      	movs	r0, #0
    108a:	4b27      	ldr	r3, [pc, #156]	; (1128 <udi_msc_cbw_received+0x284>)
    108c:	4798      	blx	r3
		break;
    108e:	e71a      	b.n	ec6 <udi_msc_cbw_received+0x22>
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    1090:	2200      	movs	r2, #0
    1092:	2180      	movs	r1, #128	; 0x80
    1094:	0189      	lsls	r1, r1, #6
    1096:	2005      	movs	r0, #5
    1098:	4b24      	ldr	r3, [pc, #144]	; (112c <udi_msc_cbw_received+0x288>)
    109a:	4798      	blx	r3
		udi_msc_csw_process();
    109c:	4b11      	ldr	r3, [pc, #68]	; (10e4 <udi_msc_cbw_received+0x240>)
    109e:	4798      	blx	r3
		break;
    10a0:	e711      	b.n	ec6 <udi_msc_cbw_received+0x22>
	i = 0;
    10a2:	002b      	movs	r3, r5
		udi_msc_inquiry_data.product_id[i] = ' ';
    10a4:	4814      	ldr	r0, [pc, #80]	; (10f8 <udi_msc_cbw_received+0x254>)
    10a6:	2120      	movs	r1, #32
    10a8:	18c2      	adds	r2, r0, r3
    10aa:	7411      	strb	r1, [r2, #16]
		i++;
    10ac:	3301      	adds	r3, #1
    10ae:	b2db      	uxtb	r3, r3
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    10b0:	2b10      	cmp	r3, #16
    10b2:	d1f9      	bne.n	10a8 <udi_msc_cbw_received+0x204>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    10b4:	0021      	movs	r1, r4
    10b6:	4810      	ldr	r0, [pc, #64]	; (10f8 <udi_msc_cbw_received+0x254>)
    10b8:	4b0d      	ldr	r3, [pc, #52]	; (10f0 <udi_msc_cbw_received+0x24c>)
    10ba:	4798      	blx	r3
    10bc:	e703      	b.n	ec6 <udi_msc_cbw_received+0x22>
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	43425355 	.word	0x43425355
    10c4:	200001ac 	.word	0x200001ac
    10c8:	200001a0 	.word	0x200001a0
    10cc:	00000b7d 	.word	0x00000b7d
    10d0:	00000ba9 	.word	0x00000ba9
    10d4:	200001d0 	.word	0x200001d0
    10d8:	20000048 	.word	0x20000048
    10dc:	00007020 	.word	0x00007020
    10e0:	00000c6d 	.word	0x00000c6d
    10e4:	00000bd5 	.word	0x00000bd5
    10e8:	00000c81 	.word	0x00000c81
    10ec:	200001d4 	.word	0x200001d4
    10f0:	00000ccd 	.word	0x00000ccd
    10f4:	00005bc1 	.word	0x00005bc1
    10f8:	20000058 	.word	0x20000058
    10fc:	00005bd9 	.word	0x00005bd9
    1100:	000067a9 	.word	0x000067a9
    1104:	00000d6d 	.word	0x00000d6d
    1108:	00005b65 	.word	0x00005b65
    110c:	00000cb9 	.word	0x00000cb9
    1110:	00000d05 	.word	0x00000d05
    1114:	00000d19 	.word	0x00000d19
    1118:	00000d2d 	.word	0x00000d2d
    111c:	200001a4 	.word	0x200001a4
    1120:	00005b7d 	.word	0x00005b7d
    1124:	00005b99 	.word	0x00005b99
    1128:	00000e1d 	.word	0x00000e1d
    112c:	00000c35 	.word	0x00000c35

00001130 <udi_msc_disable>:
{
    1130:	b510      	push	{r4, lr}
	udi_msc_b_trans_req = false;
    1132:	2200      	movs	r2, #0
    1134:	4b04      	ldr	r3, [pc, #16]	; (1148 <udi_msc_disable+0x18>)
    1136:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    1138:	2301      	movs	r3, #1
    113a:	4a04      	ldr	r2, [pc, #16]	; (114c <udi_msc_disable+0x1c>)
    113c:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    113e:	4a04      	ldr	r2, [pc, #16]	; (1150 <udi_msc_disable+0x20>)
    1140:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
    1142:	4b04      	ldr	r3, [pc, #16]	; (1154 <udi_msc_disable+0x24>)
    1144:	4798      	blx	r3
}
    1146:	bd10      	pop	{r4, pc}
    1148:	200001a2 	.word	0x200001a2
    114c:	20000044 	.word	0x20000044
    1150:	20000045 	.word	0x20000045
    1154:	00003495 	.word	0x00003495

00001158 <udi_msc_setup>:
{
    1158:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    115a:	4b20      	ldr	r3, [pc, #128]	; (11dc <udi_msc_setup+0x84>)
    115c:	781a      	ldrb	r2, [r3, #0]
    115e:	b253      	sxtb	r3, r2
    1160:	2b00      	cmp	r3, #0
    1162:	db05      	blt.n	1170 <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1164:	2360      	movs	r3, #96	; 0x60
    1166:	4013      	ands	r3, r2
	return false;	// Not supported request
    1168:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    116a:	2b20      	cmp	r3, #32
    116c:	d018      	beq.n	11a0 <udi_msc_setup+0x48>
}
    116e:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1170:	2360      	movs	r3, #96	; 0x60
    1172:	4013      	ands	r3, r2
	return false;	// Not supported request
    1174:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1176:	2b20      	cmp	r3, #32
    1178:	d1f9      	bne.n	116e <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    117a:	4b18      	ldr	r3, [pc, #96]	; (11dc <udi_msc_setup+0x84>)
    117c:	785b      	ldrb	r3, [r3, #1]
    117e:	2bfe      	cmp	r3, #254	; 0xfe
    1180:	d127      	bne.n	11d2 <udi_msc_setup+0x7a>
				if (1 != udd_g_ctrlreq.req.wLength)
    1182:	4b16      	ldr	r3, [pc, #88]	; (11dc <udi_msc_setup+0x84>)
    1184:	88db      	ldrh	r3, [r3, #6]
    1186:	2b01      	cmp	r3, #1
    1188:	d1f1      	bne.n	116e <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    118a:	4b14      	ldr	r3, [pc, #80]	; (11dc <udi_msc_setup+0x84>)
    118c:	885b      	ldrh	r3, [r3, #2]
    118e:	2b00      	cmp	r3, #0
    1190:	d1ed      	bne.n	116e <udi_msc_setup+0x16>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    1192:	4b12      	ldr	r3, [pc, #72]	; (11dc <udi_msc_setup+0x84>)
    1194:	4a12      	ldr	r2, [pc, #72]	; (11e0 <udi_msc_setup+0x88>)
    1196:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    1198:	2201      	movs	r2, #1
    119a:	819a      	strh	r2, [r3, #12]
				return true;
    119c:	3001      	adds	r0, #1
    119e:	e7e6      	b.n	116e <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    11a0:	4b0e      	ldr	r3, [pc, #56]	; (11dc <udi_msc_setup+0x84>)
    11a2:	785b      	ldrb	r3, [r3, #1]
    11a4:	2bff      	cmp	r3, #255	; 0xff
    11a6:	d116      	bne.n	11d6 <udi_msc_setup+0x7e>
				if (0 != udd_g_ctrlreq.req.wLength)
    11a8:	4b0c      	ldr	r3, [pc, #48]	; (11dc <udi_msc_setup+0x84>)
    11aa:	88db      	ldrh	r3, [r3, #6]
    11ac:	2b00      	cmp	r3, #0
    11ae:	d1de      	bne.n	116e <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    11b0:	4b0a      	ldr	r3, [pc, #40]	; (11dc <udi_msc_setup+0x84>)
    11b2:	885b      	ldrh	r3, [r3, #2]
    11b4:	2b00      	cmp	r3, #0
    11b6:	d1da      	bne.n	116e <udi_msc_setup+0x16>
				udi_msc_b_cbw_invalid = false;
    11b8:	4a0a      	ldr	r2, [pc, #40]	; (11e4 <udi_msc_setup+0x8c>)
    11ba:	7013      	strb	r3, [r2, #0]
				udi_msc_b_trans_req = false;
    11bc:	4a0a      	ldr	r2, [pc, #40]	; (11e8 <udi_msc_setup+0x90>)
    11be:	7013      	strb	r3, [r2, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
    11c0:	3002      	adds	r0, #2
    11c2:	4c0a      	ldr	r4, [pc, #40]	; (11ec <udi_msc_setup+0x94>)
    11c4:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
    11c6:	2081      	movs	r0, #129	; 0x81
    11c8:	47a0      	blx	r4
				udi_msc_cbw_wait();
    11ca:	4b09      	ldr	r3, [pc, #36]	; (11f0 <udi_msc_setup+0x98>)
    11cc:	4798      	blx	r3
				return true;
    11ce:	2001      	movs	r0, #1
    11d0:	e7cd      	b.n	116e <udi_msc_setup+0x16>
	return false;	// Not supported request
    11d2:	2000      	movs	r0, #0
    11d4:	e7cb      	b.n	116e <udi_msc_setup+0x16>
    11d6:	2000      	movs	r0, #0
    11d8:	e7c9      	b.n	116e <udi_msc_setup+0x16>
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	2000052c 	.word	0x2000052c
    11e0:	200001d0 	.word	0x200001d0
    11e4:	200001a0 	.word	0x200001a0
    11e8:	200001a2 	.word	0x200001a2
    11ec:	00002a95 	.word	0x00002a95
    11f0:	00000a81 	.word	0x00000a81

000011f4 <udi_msc_process_trans>:
{
    11f4:	b510      	push	{r4, lr}
	if (!udi_msc_b_trans_req)
    11f6:	4b1e      	ldr	r3, [pc, #120]	; (1270 <udi_msc_process_trans+0x7c>)
    11f8:	781c      	ldrb	r4, [r3, #0]
    11fa:	2c00      	cmp	r4, #0
    11fc:	d030      	beq.n	1260 <udi_msc_process_trans+0x6c>
	udi_msc_b_trans_req = false;
    11fe:	2300      	movs	r3, #0
    1200:	4a1b      	ldr	r2, [pc, #108]	; (1270 <udi_msc_process_trans+0x7c>)
    1202:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = false;
    1204:	4a1b      	ldr	r2, [pc, #108]	; (1274 <udi_msc_process_trans+0x80>)
    1206:	7013      	strb	r3, [r2, #0]
	if (udi_msc_b_read) {
    1208:	4b1b      	ldr	r3, [pc, #108]	; (1278 <udi_msc_process_trans+0x84>)
    120a:	781b      	ldrb	r3, [r3, #0]
    120c:	2b00      	cmp	r3, #0
    120e:	d015      	beq.n	123c <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    1210:	4b1a      	ldr	r3, [pc, #104]	; (127c <udi_msc_process_trans+0x88>)
    1212:	881a      	ldrh	r2, [r3, #0]
    1214:	4b1a      	ldr	r3, [pc, #104]	; (1280 <udi_msc_process_trans+0x8c>)
    1216:	6819      	ldr	r1, [r3, #0]
    1218:	4b1a      	ldr	r3, [pc, #104]	; (1284 <udi_msc_process_trans+0x90>)
    121a:	7b58      	ldrb	r0, [r3, #13]
    121c:	4b1a      	ldr	r3, [pc, #104]	; (1288 <udi_msc_process_trans+0x94>)
    121e:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
    1220:	4b14      	ldr	r3, [pc, #80]	; (1274 <udi_msc_process_trans+0x80>)
    1222:	781b      	ldrb	r3, [r3, #0]
    1224:	b2db      	uxtb	r3, r3
    1226:	2b00      	cmp	r3, #0
    1228:	d111      	bne.n	124e <udi_msc_process_trans+0x5a>
	switch (status) {
    122a:	2802      	cmp	r0, #2
    122c:	d01d      	beq.n	126a <udi_msc_process_trans+0x76>
    122e:	2803      	cmp	r0, #3
    1230:	d018      	beq.n	1264 <udi_msc_process_trans+0x70>
    1232:	2800      	cmp	r0, #0
    1234:	d010      	beq.n	1258 <udi_msc_process_trans+0x64>
		udi_msc_sense_fail_hardware();
    1236:	4b15      	ldr	r3, [pc, #84]	; (128c <udi_msc_process_trans+0x98>)
    1238:	4798      	blx	r3
		break;
    123a:	e00f      	b.n	125c <udi_msc_process_trans+0x68>
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    123c:	4b0f      	ldr	r3, [pc, #60]	; (127c <udi_msc_process_trans+0x88>)
    123e:	881a      	ldrh	r2, [r3, #0]
    1240:	4b0f      	ldr	r3, [pc, #60]	; (1280 <udi_msc_process_trans+0x8c>)
    1242:	6819      	ldr	r1, [r3, #0]
    1244:	4b0f      	ldr	r3, [pc, #60]	; (1284 <udi_msc_process_trans+0x90>)
    1246:	7b58      	ldrb	r0, [r3, #13]
    1248:	4b11      	ldr	r3, [pc, #68]	; (1290 <udi_msc_process_trans+0x9c>)
    124a:	4798      	blx	r3
    124c:	e7e8      	b.n	1220 <udi_msc_process_trans+0x2c>
		udi_msc_b_reset_trans = false;
    124e:	2100      	movs	r1, #0
    1250:	4a08      	ldr	r2, [pc, #32]	; (1274 <udi_msc_process_trans+0x80>)
    1252:	7011      	strb	r1, [r2, #0]
		return true;
    1254:	001c      	movs	r4, r3
    1256:	e003      	b.n	1260 <udi_msc_process_trans+0x6c>
		udi_msc_sense_pass();
    1258:	4b0e      	ldr	r3, [pc, #56]	; (1294 <udi_msc_process_trans+0xa0>)
    125a:	4798      	blx	r3
	udi_msc_csw_process();
    125c:	4b0e      	ldr	r3, [pc, #56]	; (1298 <udi_msc_process_trans+0xa4>)
    125e:	4798      	blx	r3
}
    1260:	0020      	movs	r0, r4
    1262:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_busy_or_change();
    1264:	4b0d      	ldr	r3, [pc, #52]	; (129c <udi_msc_process_trans+0xa8>)
    1266:	4798      	blx	r3
		break;
    1268:	e7f8      	b.n	125c <udi_msc_process_trans+0x68>
		udi_msc_sense_fail_not_present();
    126a:	4b0d      	ldr	r3, [pc, #52]	; (12a0 <udi_msc_process_trans+0xac>)
    126c:	4798      	blx	r3
		break;
    126e:	e7f5      	b.n	125c <udi_msc_process_trans+0x68>
    1270:	200001a2 	.word	0x200001a2
    1274:	20000045 	.word	0x20000045
    1278:	200001a1 	.word	0x200001a1
    127c:	200001cc 	.word	0x200001cc
    1280:	2000019c 	.word	0x2000019c
    1284:	200001ac 	.word	0x200001ac
    1288:	00005be9 	.word	0x00005be9
    128c:	00000cb9 	.word	0x00000cb9
    1290:	00005c1d 	.word	0x00005c1d
    1294:	00000d2d 	.word	0x00000d2d
    1298:	00000bd5 	.word	0x00000bd5
    129c:	00000d05 	.word	0x00000d05
    12a0:	00000d19 	.word	0x00000d19

000012a4 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
    12a4:	b530      	push	{r4, r5, lr}
    12a6:	b083      	sub	sp, #12
    12a8:	0005      	movs	r5, r0
    12aa:	0014      	movs	r4, r2
	if (!udi_msc_b_ack_trans)
    12ac:	4a1d      	ldr	r2, [pc, #116]	; (1324 <udi_msc_trans_block+0x80>)
    12ae:	7810      	ldrb	r0, [r2, #0]
    12b0:	b2c0      	uxtb	r0, r0
    12b2:	2800      	cmp	r0, #0
    12b4:	d013      	beq.n	12de <udi_msc_trans_block+0x3a>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
    12b6:	2000      	movs	r0, #0
    12b8:	7010      	strb	r0, [r2, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    12ba:	3081      	adds	r0, #129	; 0x81
    12bc:	2d00      	cmp	r5, #0
    12be:	d100      	bne.n	12c2 <udi_msc_trans_block+0x1e>
    12c0:	387f      	subs	r0, #127	; 0x7f
    12c2:	2b00      	cmp	r3, #0
    12c4:	d00d      	beq.n	12e2 <udi_msc_trans_block+0x3e>
    12c6:	9300      	str	r3, [sp, #0]
    12c8:	0023      	movs	r3, r4
    12ca:	000a      	movs	r2, r1
    12cc:	2100      	movs	r1, #0
    12ce:	4d16      	ldr	r5, [pc, #88]	; (1328 <udi_msc_trans_block+0x84>)
    12d0:	47a8      	blx	r5
    12d2:	2800      	cmp	r0, #0
    12d4:	d020      	beq.n	1318 <udi_msc_trans_block+0x74>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
    12d6:	4b15      	ldr	r3, [pc, #84]	; (132c <udi_msc_trans_block+0x88>)
    12d8:	689a      	ldr	r2, [r3, #8]
    12da:	1b14      	subs	r4, r2, r4
    12dc:	609c      	str	r4, [r3, #8]
	return true;
}
    12de:	b003      	add	sp, #12
    12e0:	bd30      	pop	{r4, r5, pc}
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    12e2:	4b13      	ldr	r3, [pc, #76]	; (1330 <udi_msc_trans_block+0x8c>)
    12e4:	9300      	str	r3, [sp, #0]
    12e6:	0023      	movs	r3, r4
    12e8:	000a      	movs	r2, r1
    12ea:	2100      	movs	r1, #0
    12ec:	4d0e      	ldr	r5, [pc, #56]	; (1328 <udi_msc_trans_block+0x84>)
    12ee:	47a8      	blx	r5
    12f0:	2800      	cmp	r0, #0
    12f2:	d011      	beq.n	1318 <udi_msc_trans_block+0x74>
		while (!udi_msc_b_ack_trans);
    12f4:	4a0b      	ldr	r2, [pc, #44]	; (1324 <udi_msc_trans_block+0x80>)
    12f6:	7813      	ldrb	r3, [r2, #0]
    12f8:	2b00      	cmp	r3, #0
    12fa:	d0fc      	beq.n	12f6 <udi_msc_trans_block+0x52>
		if (udi_msc_b_abort_trans) {
    12fc:	4b0d      	ldr	r3, [pc, #52]	; (1334 <udi_msc_trans_block+0x90>)
    12fe:	781b      	ldrb	r3, [r3, #0]
			return false;
    1300:	2000      	movs	r0, #0
		if (udi_msc_b_abort_trans) {
    1302:	2b00      	cmp	r3, #0
    1304:	d1eb      	bne.n	12de <udi_msc_trans_block+0x3a>
		udi_msc_csw.dCSWDataResidue -= block_size;
    1306:	4b09      	ldr	r3, [pc, #36]	; (132c <udi_msc_trans_block+0x88>)
    1308:	689a      	ldr	r2, [r3, #8]
    130a:	1b14      	subs	r4, r2, r4
    130c:	609c      	str	r4, [r3, #8]
		return (!udi_msc_b_abort_trans);
    130e:	4b09      	ldr	r3, [pc, #36]	; (1334 <udi_msc_trans_block+0x90>)
    1310:	7818      	ldrb	r0, [r3, #0]
    1312:	2301      	movs	r3, #1
    1314:	4058      	eors	r0, r3
    1316:	e7e2      	b.n	12de <udi_msc_trans_block+0x3a>
		udi_msc_b_ack_trans = true;
    1318:	2201      	movs	r2, #1
    131a:	4b02      	ldr	r3, [pc, #8]	; (1324 <udi_msc_trans_block+0x80>)
    131c:	701a      	strb	r2, [r3, #0]
		return false;
    131e:	2000      	movs	r0, #0
    1320:	e7dd      	b.n	12de <udi_msc_trans_block+0x3a>
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	20000044 	.word	0x20000044
    1328:	00002e21 	.word	0x00002e21
    132c:	20000048 	.word	0x20000048
    1330:	00000a65 	.word	0x00000a65
    1334:	200002e8 	.word	0x200002e8

00001338 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1338:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    133a:	4b11      	ldr	r3, [pc, #68]	; (1380 <udc_next_desc_in_iface+0x48>)
    133c:	681b      	ldr	r3, [r3, #0]
    133e:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1340:	7894      	ldrb	r4, [r2, #2]
    1342:	78d3      	ldrb	r3, [r2, #3]
    1344:	021b      	lsls	r3, r3, #8
    1346:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1348:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    134a:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    134c:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    134e:	4290      	cmp	r0, r2
    1350:	d210      	bcs.n	1374 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1352:	7843      	ldrb	r3, [r0, #1]
    1354:	2b04      	cmp	r3, #4
    1356:	d00f      	beq.n	1378 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1358:	428b      	cmp	r3, r1
    135a:	d00a      	beq.n	1372 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    135c:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    135e:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    1360:	4290      	cmp	r0, r2
    1362:	d205      	bcs.n	1370 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1364:	7843      	ldrb	r3, [r0, #1]
    1366:	2b04      	cmp	r3, #4
    1368:	d008      	beq.n	137c <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    136a:	428b      	cmp	r3, r1
    136c:	d1f6      	bne.n	135c <udc_next_desc_in_iface+0x24>
    136e:	e000      	b.n	1372 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    1370:	2000      	movs	r0, #0
}
    1372:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    1374:	2000      	movs	r0, #0
    1376:	e7fc      	b.n	1372 <udc_next_desc_in_iface+0x3a>
    1378:	2000      	movs	r0, #0
    137a:	e7fa      	b.n	1372 <udc_next_desc_in_iface+0x3a>
    137c:	2000      	movs	r0, #0
    137e:	e7f8      	b.n	1372 <udc_next_desc_in_iface+0x3a>
    1380:	200001f4 	.word	0x200001f4

00001384 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    1384:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1386:	4b03      	ldr	r3, [pc, #12]	; (1394 <udc_valid_address+0x10>)
    1388:	885b      	ldrh	r3, [r3, #2]
    138a:	207f      	movs	r0, #127	; 0x7f
    138c:	4018      	ands	r0, r3
    138e:	4b02      	ldr	r3, [pc, #8]	; (1398 <udc_valid_address+0x14>)
    1390:	4798      	blx	r3
}
    1392:	bd10      	pop	{r4, pc}
    1394:	2000052c 	.word	0x2000052c
    1398:	00002ff9 	.word	0x00002ff9

0000139c <udc_update_iface_desc>:
{
    139c:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    139e:	4b19      	ldr	r3, [pc, #100]	; (1404 <udc_update_iface_desc+0x68>)
    13a0:	781b      	ldrb	r3, [r3, #0]
		return false;
    13a2:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    13a4:	2b00      	cmp	r3, #0
    13a6:	d029      	beq.n	13fc <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    13a8:	4b17      	ldr	r3, [pc, #92]	; (1408 <udc_update_iface_desc+0x6c>)
    13aa:	681b      	ldr	r3, [r3, #0]
    13ac:	681b      	ldr	r3, [r3, #0]
    13ae:	791c      	ldrb	r4, [r3, #4]
    13b0:	4284      	cmp	r4, r0
    13b2:	d923      	bls.n	13fc <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    13b4:	4a15      	ldr	r2, [pc, #84]	; (140c <udc_update_iface_desc+0x70>)
    13b6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    13b8:	789a      	ldrb	r2, [r3, #2]
    13ba:	78dc      	ldrb	r4, [r3, #3]
    13bc:	0224      	lsls	r4, r4, #8
    13be:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    13c0:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    13c2:	42a3      	cmp	r3, r4
    13c4:	d21c      	bcs.n	1400 <udc_update_iface_desc+0x64>
    13c6:	2500      	movs	r5, #0
    13c8:	2601      	movs	r6, #1
    13ca:	e007      	b.n	13dc <udc_update_iface_desc+0x40>
    13cc:	4a0f      	ldr	r2, [pc, #60]	; (140c <udc_update_iface_desc+0x70>)
    13ce:	6013      	str	r3, [r2, #0]
    13d0:	e00f      	b.n	13f2 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    13d2:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    13d4:	189b      	adds	r3, r3, r2
    13d6:	0035      	movs	r5, r6
	while (ptr_end_desc >
    13d8:	42a3      	cmp	r3, r4
    13da:	d20c      	bcs.n	13f6 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    13dc:	785a      	ldrb	r2, [r3, #1]
    13de:	2a04      	cmp	r2, #4
    13e0:	d1f7      	bne.n	13d2 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    13e2:	789a      	ldrb	r2, [r3, #2]
    13e4:	4282      	cmp	r2, r0
    13e6:	d1f4      	bne.n	13d2 <udc_update_iface_desc+0x36>
    13e8:	78da      	ldrb	r2, [r3, #3]
    13ea:	428a      	cmp	r2, r1
    13ec:	d1f1      	bne.n	13d2 <udc_update_iface_desc+0x36>
    13ee:	2d00      	cmp	r5, #0
    13f0:	d1ec      	bne.n	13cc <udc_update_iface_desc+0x30>
				return true; // Interface found
    13f2:	2201      	movs	r2, #1
    13f4:	e002      	b.n	13fc <udc_update_iface_desc+0x60>
    13f6:	4a05      	ldr	r2, [pc, #20]	; (140c <udc_update_iface_desc+0x70>)
    13f8:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    13fa:	2200      	movs	r2, #0
}
    13fc:	0010      	movs	r0, r2
    13fe:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    1400:	2200      	movs	r2, #0
    1402:	e7fb      	b.n	13fc <udc_update_iface_desc+0x60>
    1404:	200001f0 	.word	0x200001f0
    1408:	200001f4 	.word	0x200001f4
    140c:	200001f8 	.word	0x200001f8

00001410 <udc_iface_disable>:
{
    1410:	b5f0      	push	{r4, r5, r6, r7, lr}
    1412:	46c6      	mov	lr, r8
    1414:	b500      	push	{lr}
    1416:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1418:	2100      	movs	r1, #0
    141a:	4b13      	ldr	r3, [pc, #76]	; (1468 <udc_iface_disable+0x58>)
    141c:	4798      	blx	r3
    141e:	1e05      	subs	r5, r0, #0
    1420:	d103      	bne.n	142a <udc_iface_disable+0x1a>
}
    1422:	0028      	movs	r0, r5
    1424:	bc04      	pop	{r2}
    1426:	4690      	mov	r8, r2
    1428:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    142a:	4b10      	ldr	r3, [pc, #64]	; (146c <udc_iface_disable+0x5c>)
    142c:	681b      	ldr	r3, [r3, #0]
    142e:	685b      	ldr	r3, [r3, #4]
    1430:	00a2      	lsls	r2, r4, #2
    1432:	58d3      	ldr	r3, [r2, r3]
    1434:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1436:	68db      	ldr	r3, [r3, #12]
    1438:	4798      	blx	r3
    143a:	0001      	movs	r1, r0
    143c:	0020      	movs	r0, r4
    143e:	4b0a      	ldr	r3, [pc, #40]	; (1468 <udc_iface_disable+0x58>)
    1440:	4798      	blx	r3
    1442:	1e05      	subs	r5, r0, #0
    1444:	d0ed      	beq.n	1422 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1446:	4b0a      	ldr	r3, [pc, #40]	; (1470 <udc_iface_disable+0x60>)
    1448:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    144a:	4e0a      	ldr	r6, [pc, #40]	; (1474 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    144c:	4f0a      	ldr	r7, [pc, #40]	; (1478 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    144e:	2105      	movs	r1, #5
    1450:	0020      	movs	r0, r4
    1452:	47b0      	blx	r6
    1454:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    1456:	d002      	beq.n	145e <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    1458:	7880      	ldrb	r0, [r0, #2]
    145a:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    145c:	e7f7      	b.n	144e <udc_iface_disable+0x3e>
	udi_api->disable();
    145e:	4643      	mov	r3, r8
    1460:	685b      	ldr	r3, [r3, #4]
    1462:	4798      	blx	r3
	return true;
    1464:	e7dd      	b.n	1422 <udc_iface_disable+0x12>
    1466:	46c0      	nop			; (mov r8, r8)
    1468:	0000139d 	.word	0x0000139d
    146c:	200001f4 	.word	0x200001f4
    1470:	200001f8 	.word	0x200001f8
    1474:	00001339 	.word	0x00001339
    1478:	00002ae1 	.word	0x00002ae1

0000147c <udc_iface_enable>:
{
    147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    147e:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    1480:	4b0f      	ldr	r3, [pc, #60]	; (14c0 <udc_iface_enable+0x44>)
    1482:	4798      	blx	r3
    1484:	2800      	cmp	r0, #0
    1486:	d019      	beq.n	14bc <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1488:	4b0e      	ldr	r3, [pc, #56]	; (14c4 <udc_iface_enable+0x48>)
    148a:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    148c:	4e0e      	ldr	r6, [pc, #56]	; (14c8 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    148e:	4f0f      	ldr	r7, [pc, #60]	; (14cc <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1490:	2105      	movs	r1, #5
    1492:	0020      	movs	r0, r4
    1494:	47b0      	blx	r6
    1496:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    1498:	d009      	beq.n	14ae <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    149a:	7903      	ldrb	r3, [r0, #4]
    149c:	7942      	ldrb	r2, [r0, #5]
    149e:	0212      	lsls	r2, r2, #8
    14a0:	431a      	orrs	r2, r3
    14a2:	78c1      	ldrb	r1, [r0, #3]
    14a4:	7880      	ldrb	r0, [r0, #2]
    14a6:	47b8      	blx	r7
    14a8:	2800      	cmp	r0, #0
    14aa:	d1f1      	bne.n	1490 <udc_iface_enable+0x14>
    14ac:	e006      	b.n	14bc <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    14ae:	4b08      	ldr	r3, [pc, #32]	; (14d0 <udc_iface_enable+0x54>)
    14b0:	681b      	ldr	r3, [r3, #0]
    14b2:	685b      	ldr	r3, [r3, #4]
    14b4:	00ad      	lsls	r5, r5, #2
    14b6:	58eb      	ldr	r3, [r5, r3]
    14b8:	681b      	ldr	r3, [r3, #0]
    14ba:	4798      	blx	r3
}
    14bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14be:	46c0      	nop			; (mov r8, r8)
    14c0:	0000139d 	.word	0x0000139d
    14c4:	200001f8 	.word	0x200001f8
    14c8:	00001339 	.word	0x00001339
    14cc:	00002b39 	.word	0x00002b39
    14d0:	200001f4 	.word	0x200001f4

000014d4 <udc_start>:
{
    14d4:	b510      	push	{r4, lr}
	udd_enable();
    14d6:	4b01      	ldr	r3, [pc, #4]	; (14dc <udc_start+0x8>)
    14d8:	4798      	blx	r3
}
    14da:	bd10      	pop	{r4, pc}
    14dc:	00003105 	.word	0x00003105

000014e0 <udc_reset>:
{
    14e0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    14e2:	4b0e      	ldr	r3, [pc, #56]	; (151c <udc_reset+0x3c>)
    14e4:	781b      	ldrb	r3, [r3, #0]
    14e6:	2b00      	cmp	r3, #0
    14e8:	d011      	beq.n	150e <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14ea:	4b0d      	ldr	r3, [pc, #52]	; (1520 <udc_reset+0x40>)
    14ec:	681b      	ldr	r3, [r3, #0]
    14ee:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    14f0:	791b      	ldrb	r3, [r3, #4]
    14f2:	2b00      	cmp	r3, #0
    14f4:	d00b      	beq.n	150e <udc_reset+0x2e>
    14f6:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    14f8:	4e0a      	ldr	r6, [pc, #40]	; (1524 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14fa:	4d09      	ldr	r5, [pc, #36]	; (1520 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    14fc:	0020      	movs	r0, r4
    14fe:	47b0      	blx	r6
				iface_num++) {
    1500:	3401      	adds	r4, #1
    1502:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1504:	682b      	ldr	r3, [r5, #0]
    1506:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1508:	791b      	ldrb	r3, [r3, #4]
    150a:	42a3      	cmp	r3, r4
    150c:	d8f6      	bhi.n	14fc <udc_reset+0x1c>
	udc_num_configuration = 0;
    150e:	2200      	movs	r2, #0
    1510:	4b02      	ldr	r3, [pc, #8]	; (151c <udc_reset+0x3c>)
    1512:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    1514:	3201      	adds	r2, #1
    1516:	4b04      	ldr	r3, [pc, #16]	; (1528 <udc_reset+0x48>)
    1518:	801a      	strh	r2, [r3, #0]
}
    151a:	bd70      	pop	{r4, r5, r6, pc}
    151c:	200001f0 	.word	0x200001f0
    1520:	200001f4 	.word	0x200001f4
    1524:	00001411 	.word	0x00001411
    1528:	200001e6 	.word	0x200001e6

0000152c <udc_sof_notify>:
{
    152c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    152e:	4b0e      	ldr	r3, [pc, #56]	; (1568 <udc_sof_notify+0x3c>)
    1530:	781b      	ldrb	r3, [r3, #0]
    1532:	2b00      	cmp	r3, #0
    1534:	d017      	beq.n	1566 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1536:	4b0d      	ldr	r3, [pc, #52]	; (156c <udc_sof_notify+0x40>)
    1538:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    153a:	681a      	ldr	r2, [r3, #0]
    153c:	7912      	ldrb	r2, [r2, #4]
    153e:	2a00      	cmp	r2, #0
    1540:	d011      	beq.n	1566 <udc_sof_notify+0x3a>
    1542:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1544:	4d09      	ldr	r5, [pc, #36]	; (156c <udc_sof_notify+0x40>)
    1546:	e006      	b.n	1556 <udc_sof_notify+0x2a>
				iface_num++) {
    1548:	3401      	adds	r4, #1
    154a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    154c:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    154e:	681a      	ldr	r2, [r3, #0]
    1550:	7912      	ldrb	r2, [r2, #4]
    1552:	42a2      	cmp	r2, r4
    1554:	d907      	bls.n	1566 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1556:	685b      	ldr	r3, [r3, #4]
    1558:	00a2      	lsls	r2, r4, #2
    155a:	58d3      	ldr	r3, [r2, r3]
    155c:	691b      	ldr	r3, [r3, #16]
    155e:	2b00      	cmp	r3, #0
    1560:	d0f2      	beq.n	1548 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1562:	4798      	blx	r3
    1564:	e7f0      	b.n	1548 <udc_sof_notify+0x1c>
}
    1566:	bd70      	pop	{r4, r5, r6, pc}
    1568:	200001f0 	.word	0x200001f0
    156c:	200001f4 	.word	0x200001f4

00001570 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1572:	4bac      	ldr	r3, [pc, #688]	; (1824 <udc_process_setup+0x2b4>)
    1574:	2200      	movs	r2, #0
    1576:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1578:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    157a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    157c:	781b      	ldrb	r3, [r3, #0]
    157e:	b25a      	sxtb	r2, r3
    1580:	2a00      	cmp	r2, #0
    1582:	db13      	blt.n	15ac <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1584:	2260      	movs	r2, #96	; 0x60
    1586:	421a      	tst	r2, r3
    1588:	d100      	bne.n	158c <udc_process_setup+0x1c>
    158a:	e0da      	b.n	1742 <udc_process_setup+0x1d2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    158c:	4ba5      	ldr	r3, [pc, #660]	; (1824 <udc_process_setup+0x2b4>)
    158e:	781a      	ldrb	r2, [r3, #0]
    1590:	231f      	movs	r3, #31
    1592:	4013      	ands	r3, r2
    1594:	2b01      	cmp	r3, #1
    1596:	d100      	bne.n	159a <udc_process_setup+0x2a>
    1598:	e176      	b.n	1888 <udc_process_setup+0x318>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    159a:	4ba2      	ldr	r3, [pc, #648]	; (1824 <udc_process_setup+0x2b4>)
    159c:	781a      	ldrb	r2, [r3, #0]
    159e:	231f      	movs	r3, #31
    15a0:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    15a2:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    15a4:	2b02      	cmp	r3, #2
    15a6:	d100      	bne.n	15aa <udc_process_setup+0x3a>
    15a8:	e1cc      	b.n	1944 <udc_process_setup+0x3d4>
#endif
}
    15aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    15ac:	4a9d      	ldr	r2, [pc, #628]	; (1824 <udc_process_setup+0x2b4>)
    15ae:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    15b0:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    15b2:	2a00      	cmp	r2, #0
    15b4:	d0f9      	beq.n	15aa <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    15b6:	2160      	movs	r1, #96	; 0x60
    15b8:	4219      	tst	r1, r3
    15ba:	d1e7      	bne.n	158c <udc_process_setup+0x1c>
    15bc:	211f      	movs	r1, #31
    15be:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    15c0:	d108      	bne.n	15d4 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    15c2:	4998      	ldr	r1, [pc, #608]	; (1824 <udc_process_setup+0x2b4>)
    15c4:	7849      	ldrb	r1, [r1, #1]
    15c6:	2906      	cmp	r1, #6
    15c8:	d023      	beq.n	1612 <udc_process_setup+0xa2>
    15ca:	2908      	cmp	r1, #8
    15cc:	d100      	bne.n	15d0 <udc_process_setup+0x60>
    15ce:	e087      	b.n	16e0 <udc_process_setup+0x170>
    15d0:	2900      	cmp	r1, #0
    15d2:	d017      	beq.n	1604 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    15d4:	2b01      	cmp	r3, #1
    15d6:	d100      	bne.n	15da <udc_process_setup+0x6a>
    15d8:	e08a      	b.n	16f0 <udc_process_setup+0x180>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    15da:	2b02      	cmp	r3, #2
    15dc:	d1d6      	bne.n	158c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    15de:	4b91      	ldr	r3, [pc, #580]	; (1824 <udc_process_setup+0x2b4>)
    15e0:	785b      	ldrb	r3, [r3, #1]
	return false;
    15e2:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    15e4:	2b00      	cmp	r3, #0
    15e6:	d000      	beq.n	15ea <udc_process_setup+0x7a>
    15e8:	e1a8      	b.n	193c <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    15ea:	2a02      	cmp	r2, #2
    15ec:	d1d5      	bne.n	159a <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    15ee:	4b8d      	ldr	r3, [pc, #564]	; (1824 <udc_process_setup+0x2b4>)
    15f0:	7918      	ldrb	r0, [r3, #4]
    15f2:	4b8d      	ldr	r3, [pc, #564]	; (1828 <udc_process_setup+0x2b8>)
    15f4:	4798      	blx	r3
    15f6:	4b8d      	ldr	r3, [pc, #564]	; (182c <udc_process_setup+0x2bc>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    15f8:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    15fa:	2102      	movs	r1, #2
    15fc:	0018      	movs	r0, r3
    15fe:	4b8c      	ldr	r3, [pc, #560]	; (1830 <udc_process_setup+0x2c0>)
    1600:	4798      	blx	r3
    1602:	e0ff      	b.n	1804 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1604:	2a02      	cmp	r2, #2
    1606:	d1c8      	bne.n	159a <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1608:	3102      	adds	r1, #2
    160a:	488a      	ldr	r0, [pc, #552]	; (1834 <udc_process_setup+0x2c4>)
    160c:	4b88      	ldr	r3, [pc, #544]	; (1830 <udc_process_setup+0x2c0>)
    160e:	4798      	blx	r3
    1610:	e0f8      	b.n	1804 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1612:	4b84      	ldr	r3, [pc, #528]	; (1824 <udc_process_setup+0x2b4>)
    1614:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1616:	0a13      	lsrs	r3, r2, #8
    1618:	2b02      	cmp	r3, #2
    161a:	d023      	beq.n	1664 <udc_process_setup+0xf4>
    161c:	b2d9      	uxtb	r1, r3
    161e:	2902      	cmp	r1, #2
    1620:	d90f      	bls.n	1642 <udc_process_setup+0xd2>
    1622:	2b03      	cmp	r3, #3
    1624:	d034      	beq.n	1690 <udc_process_setup+0x120>
    1626:	2b0f      	cmp	r3, #15
    1628:	d000      	beq.n	162c <udc_process_setup+0xbc>
    162a:	e184      	b.n	1936 <udc_process_setup+0x3c6>
		if (udc_config.conf_bos == NULL) {
    162c:	4b82      	ldr	r3, [pc, #520]	; (1838 <udc_process_setup+0x2c8>)
    162e:	6898      	ldr	r0, [r3, #8]
    1630:	2800      	cmp	r0, #0
    1632:	d0b2      	beq.n	159a <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1634:	7883      	ldrb	r3, [r0, #2]
    1636:	78c1      	ldrb	r1, [r0, #3]
    1638:	0209      	lsls	r1, r1, #8
    163a:	4319      	orrs	r1, r3
    163c:	4b7c      	ldr	r3, [pc, #496]	; (1830 <udc_process_setup+0x2c0>)
    163e:	4798      	blx	r3
    1640:	e007      	b.n	1652 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1642:	2b01      	cmp	r3, #1
    1644:	d000      	beq.n	1648 <udc_process_setup+0xd8>
    1646:	e176      	b.n	1936 <udc_process_setup+0x3c6>
				(uint8_t *) udc_config.confdev_lsfs,
    1648:	4b7b      	ldr	r3, [pc, #492]	; (1838 <udc_process_setup+0x2c8>)
    164a:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    164c:	7801      	ldrb	r1, [r0, #0]
    164e:	4b78      	ldr	r3, [pc, #480]	; (1830 <udc_process_setup+0x2c0>)
    1650:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1652:	4b74      	ldr	r3, [pc, #464]	; (1824 <udc_process_setup+0x2b4>)
    1654:	88da      	ldrh	r2, [r3, #6]
    1656:	899b      	ldrh	r3, [r3, #12]
    1658:	4293      	cmp	r3, r2
    165a:	d800      	bhi.n	165e <udc_process_setup+0xee>
    165c:	e0d2      	b.n	1804 <udc_process_setup+0x294>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    165e:	4b71      	ldr	r3, [pc, #452]	; (1824 <udc_process_setup+0x2b4>)
    1660:	819a      	strh	r2, [r3, #12]
    1662:	e0cf      	b.n	1804 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1664:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    1666:	4b74      	ldr	r3, [pc, #464]	; (1838 <udc_process_setup+0x2c8>)
    1668:	681b      	ldr	r3, [r3, #0]
    166a:	7c5b      	ldrb	r3, [r3, #17]
    166c:	4293      	cmp	r3, r2
    166e:	d800      	bhi.n	1672 <udc_process_setup+0x102>
    1670:	e793      	b.n	159a <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1672:	4b71      	ldr	r3, [pc, #452]	; (1838 <udc_process_setup+0x2c8>)
    1674:	685b      	ldr	r3, [r3, #4]
    1676:	00d2      	lsls	r2, r2, #3
    1678:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    167a:	7883      	ldrb	r3, [r0, #2]
    167c:	78c1      	ldrb	r1, [r0, #3]
    167e:	0209      	lsls	r1, r1, #8
    1680:	4319      	orrs	r1, r3
    1682:	4b6b      	ldr	r3, [pc, #428]	; (1830 <udc_process_setup+0x2c0>)
    1684:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1686:	4b67      	ldr	r3, [pc, #412]	; (1824 <udc_process_setup+0x2b4>)
    1688:	689b      	ldr	r3, [r3, #8]
    168a:	2202      	movs	r2, #2
    168c:	705a      	strb	r2, [r3, #1]
    168e:	e7e0      	b.n	1652 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1690:	23ff      	movs	r3, #255	; 0xff
    1692:	401a      	ands	r2, r3
    1694:	2a01      	cmp	r2, #1
    1696:	d020      	beq.n	16da <udc_process_setup+0x16a>
    1698:	2a00      	cmp	r2, #0
    169a:	d019      	beq.n	16d0 <udc_process_setup+0x160>
    169c:	2a02      	cmp	r2, #2
    169e:	d100      	bne.n	16a2 <udc_process_setup+0x132>
    16a0:	e178      	b.n	1994 <udc_process_setup+0x424>
    16a2:	2a03      	cmp	r2, #3
    16a4:	d000      	beq.n	16a8 <udc_process_setup+0x138>
    16a6:	e771      	b.n	158c <udc_process_setup+0x1c>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    16a8:	210c      	movs	r1, #12
		str = udc_get_string_serial_name();
    16aa:	4c64      	ldr	r4, [pc, #400]	; (183c <udc_process_setup+0x2cc>)
    16ac:	4a64      	ldr	r2, [pc, #400]	; (1840 <udc_process_setup+0x2d0>)
    16ae:	3202      	adds	r2, #2
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    16b0:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    16b2:	5ce0      	ldrb	r0, [r4, r3]
    16b4:	8010      	strh	r0, [r2, #0]
    16b6:	3301      	adds	r3, #1
    16b8:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    16ba:	b2d8      	uxtb	r0, r3
    16bc:	4281      	cmp	r1, r0
    16be:	d8f8      	bhi.n	16b2 <udc_process_setup+0x142>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    16c0:	0049      	lsls	r1, r1, #1
    16c2:	3102      	adds	r1, #2
    16c4:	485e      	ldr	r0, [pc, #376]	; (1840 <udc_process_setup+0x2d0>)
    16c6:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    16c8:	b289      	uxth	r1, r1
    16ca:	4b59      	ldr	r3, [pc, #356]	; (1830 <udc_process_setup+0x2c0>)
    16cc:	4798      	blx	r3
    16ce:	e7c0      	b.n	1652 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    16d0:	2104      	movs	r1, #4
    16d2:	485c      	ldr	r0, [pc, #368]	; (1844 <udc_process_setup+0x2d4>)
    16d4:	4b56      	ldr	r3, [pc, #344]	; (1830 <udc_process_setup+0x2c0>)
    16d6:	4798      	blx	r3
    16d8:	e7bb      	b.n	1652 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    16da:	4c5b      	ldr	r4, [pc, #364]	; (1848 <udc_process_setup+0x2d8>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    16dc:	2109      	movs	r1, #9
    16de:	e7e5      	b.n	16ac <udc_process_setup+0x13c>
	if (udd_g_ctrlreq.req.wLength != 1) {
    16e0:	2a01      	cmp	r2, #1
    16e2:	d000      	beq.n	16e6 <udc_process_setup+0x176>
    16e4:	e759      	b.n	159a <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    16e6:	2101      	movs	r1, #1
    16e8:	4858      	ldr	r0, [pc, #352]	; (184c <udc_process_setup+0x2dc>)
    16ea:	4b51      	ldr	r3, [pc, #324]	; (1830 <udc_process_setup+0x2c0>)
    16ec:	4798      	blx	r3
    16ee:	e089      	b.n	1804 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    16f0:	494c      	ldr	r1, [pc, #304]	; (1824 <udc_process_setup+0x2b4>)
    16f2:	7849      	ldrb	r1, [r1, #1]
    16f4:	290a      	cmp	r1, #10
    16f6:	d000      	beq.n	16fa <udc_process_setup+0x18a>
    16f8:	e76f      	b.n	15da <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    16fa:	2a01      	cmp	r2, #1
    16fc:	d000      	beq.n	1700 <udc_process_setup+0x190>
    16fe:	e0c3      	b.n	1888 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    1700:	4b52      	ldr	r3, [pc, #328]	; (184c <udc_process_setup+0x2dc>)
    1702:	781b      	ldrb	r3, [r3, #0]
    1704:	2b00      	cmp	r3, #0
    1706:	d100      	bne.n	170a <udc_process_setup+0x19a>
    1708:	e0be      	b.n	1888 <udc_process_setup+0x318>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    170a:	4b46      	ldr	r3, [pc, #280]	; (1824 <udc_process_setup+0x2b4>)
    170c:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    170e:	4b50      	ldr	r3, [pc, #320]	; (1850 <udc_process_setup+0x2e0>)
    1710:	681d      	ldr	r5, [r3, #0]
    1712:	682b      	ldr	r3, [r5, #0]
    1714:	791b      	ldrb	r3, [r3, #4]
    1716:	42a3      	cmp	r3, r4
    1718:	d800      	bhi.n	171c <udc_process_setup+0x1ac>
    171a:	e0b5      	b.n	1888 <udc_process_setup+0x318>
	if (!udc_update_iface_desc(iface_num, 0)) {
    171c:	2100      	movs	r1, #0
    171e:	0020      	movs	r0, r4
    1720:	4b4c      	ldr	r3, [pc, #304]	; (1854 <udc_process_setup+0x2e4>)
    1722:	4798      	blx	r3
    1724:	2800      	cmp	r0, #0
    1726:	d100      	bne.n	172a <udc_process_setup+0x1ba>
    1728:	e730      	b.n	158c <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    172a:	686b      	ldr	r3, [r5, #4]
    172c:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    172e:	58e3      	ldr	r3, [r4, r3]
    1730:	68db      	ldr	r3, [r3, #12]
    1732:	4798      	blx	r3
    1734:	4b48      	ldr	r3, [pc, #288]	; (1858 <udc_process_setup+0x2e8>)
    1736:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    1738:	2101      	movs	r1, #1
    173a:	0018      	movs	r0, r3
    173c:	4b3c      	ldr	r3, [pc, #240]	; (1830 <udc_process_setup+0x2c0>)
    173e:	4798      	blx	r3
    1740:	e060      	b.n	1804 <udc_process_setup+0x294>
    1742:	221f      	movs	r2, #31
    1744:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1746:	d15f      	bne.n	1808 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
    1748:	4a36      	ldr	r2, [pc, #216]	; (1824 <udc_process_setup+0x2b4>)
    174a:	7852      	ldrb	r2, [r2, #1]
    174c:	2a03      	cmp	r2, #3
    174e:	d100      	bne.n	1752 <udc_process_setup+0x1e2>
    1750:	e0f3      	b.n	193a <udc_process_setup+0x3ca>
    1752:	b2d1      	uxtb	r1, r2
    1754:	2903      	cmp	r1, #3
    1756:	d93b      	bls.n	17d0 <udc_process_setup+0x260>
    1758:	2a05      	cmp	r2, #5
    175a:	d04b      	beq.n	17f4 <udc_process_setup+0x284>
    175c:	2a09      	cmp	r2, #9
    175e:	d153      	bne.n	1808 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1760:	4b30      	ldr	r3, [pc, #192]	; (1824 <udc_process_setup+0x2b4>)
    1762:	88db      	ldrh	r3, [r3, #6]
    1764:	2b00      	cmp	r3, #0
    1766:	d000      	beq.n	176a <udc_process_setup+0x1fa>
    1768:	e717      	b.n	159a <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    176a:	4b3c      	ldr	r3, [pc, #240]	; (185c <udc_process_setup+0x2ec>)
    176c:	4798      	blx	r3
    176e:	2800      	cmp	r0, #0
    1770:	d100      	bne.n	1774 <udc_process_setup+0x204>
    1772:	e70b      	b.n	158c <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1774:	4b2b      	ldr	r3, [pc, #172]	; (1824 <udc_process_setup+0x2b4>)
    1776:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1778:	4b2f      	ldr	r3, [pc, #188]	; (1838 <udc_process_setup+0x2c8>)
    177a:	681b      	ldr	r3, [r3, #0]
    177c:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    177e:	429a      	cmp	r2, r3
    1780:	dd00      	ble.n	1784 <udc_process_setup+0x214>
    1782:	e703      	b.n	158c <udc_process_setup+0x1c>
	udc_reset();
    1784:	4b36      	ldr	r3, [pc, #216]	; (1860 <udc_process_setup+0x2f0>)
    1786:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1788:	4b26      	ldr	r3, [pc, #152]	; (1824 <udc_process_setup+0x2b4>)
    178a:	789b      	ldrb	r3, [r3, #2]
    178c:	4a2f      	ldr	r2, [pc, #188]	; (184c <udc_process_setup+0x2dc>)
    178e:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    1790:	2b00      	cmp	r3, #0
    1792:	d037      	beq.n	1804 <udc_process_setup+0x294>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1794:	4a33      	ldr	r2, [pc, #204]	; (1864 <udc_process_setup+0x2f4>)
    1796:	4694      	mov	ip, r2
    1798:	4463      	add	r3, ip
    179a:	00db      	lsls	r3, r3, #3
    179c:	4a26      	ldr	r2, [pc, #152]	; (1838 <udc_process_setup+0x2c8>)
    179e:	6852      	ldr	r2, [r2, #4]
    17a0:	18d3      	adds	r3, r2, r3
    17a2:	4a2b      	ldr	r2, [pc, #172]	; (1850 <udc_process_setup+0x2e0>)
    17a4:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    17a6:	681b      	ldr	r3, [r3, #0]
    17a8:	791b      	ldrb	r3, [r3, #4]
    17aa:	2b00      	cmp	r3, #0
    17ac:	d02a      	beq.n	1804 <udc_process_setup+0x294>
    17ae:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    17b0:	4d2d      	ldr	r5, [pc, #180]	; (1868 <udc_process_setup+0x2f8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    17b2:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    17b4:	2100      	movs	r1, #0
    17b6:	0020      	movs	r0, r4
    17b8:	47a8      	blx	r5
    17ba:	2800      	cmp	r0, #0
    17bc:	d100      	bne.n	17c0 <udc_process_setup+0x250>
    17be:	e6e5      	b.n	158c <udc_process_setup+0x1c>
			iface_num++) {
    17c0:	3401      	adds	r4, #1
    17c2:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    17c4:	6833      	ldr	r3, [r6, #0]
    17c6:	681b      	ldr	r3, [r3, #0]
    17c8:	791b      	ldrb	r3, [r3, #4]
    17ca:	42a3      	cmp	r3, r4
    17cc:	d8f2      	bhi.n	17b4 <udc_process_setup+0x244>
    17ce:	e019      	b.n	1804 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    17d0:	2a01      	cmp	r2, #1
    17d2:	d119      	bne.n	1808 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    17d4:	4b13      	ldr	r3, [pc, #76]	; (1824 <udc_process_setup+0x2b4>)
    17d6:	88db      	ldrh	r3, [r3, #6]
    17d8:	2b00      	cmp	r3, #0
    17da:	d000      	beq.n	17de <udc_process_setup+0x26e>
    17dc:	e6dd      	b.n	159a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    17de:	4b11      	ldr	r3, [pc, #68]	; (1824 <udc_process_setup+0x2b4>)
    17e0:	885b      	ldrh	r3, [r3, #2]
    17e2:	2b01      	cmp	r3, #1
    17e4:	d000      	beq.n	17e8 <udc_process_setup+0x278>
    17e6:	e6d8      	b.n	159a <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    17e8:	4a12      	ldr	r2, [pc, #72]	; (1834 <udc_process_setup+0x2c4>)
    17ea:	8813      	ldrh	r3, [r2, #0]
    17ec:	2102      	movs	r1, #2
    17ee:	438b      	bics	r3, r1
    17f0:	8013      	strh	r3, [r2, #0]
    17f2:	e007      	b.n	1804 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength) {
    17f4:	4b0b      	ldr	r3, [pc, #44]	; (1824 <udc_process_setup+0x2b4>)
    17f6:	88db      	ldrh	r3, [r3, #6]
    17f8:	2b00      	cmp	r3, #0
    17fa:	d000      	beq.n	17fe <udc_process_setup+0x28e>
    17fc:	e6cd      	b.n	159a <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    17fe:	4a1b      	ldr	r2, [pc, #108]	; (186c <udc_process_setup+0x2fc>)
    1800:	4b08      	ldr	r3, [pc, #32]	; (1824 <udc_process_setup+0x2b4>)
    1802:	611a      	str	r2, [r3, #16]
			return true;
    1804:	2001      	movs	r0, #1
    1806:	e6d0      	b.n	15aa <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1808:	2b01      	cmp	r3, #1
    180a:	d031      	beq.n	1870 <udc_process_setup+0x300>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    180c:	2b02      	cmp	r3, #2
    180e:	d000      	beq.n	1812 <udc_process_setup+0x2a2>
    1810:	e6bc      	b.n	158c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1812:	4b04      	ldr	r3, [pc, #16]	; (1824 <udc_process_setup+0x2b4>)
    1814:	785b      	ldrb	r3, [r3, #1]
    1816:	2b01      	cmp	r3, #1
    1818:	d06c      	beq.n	18f4 <udc_process_setup+0x384>
    181a:	2b03      	cmp	r3, #3
    181c:	d100      	bne.n	1820 <udc_process_setup+0x2b0>
    181e:	e078      	b.n	1912 <udc_process_setup+0x3a2>
	return false;
    1820:	2000      	movs	r0, #0
    1822:	e08b      	b.n	193c <udc_process_setup+0x3cc>
    1824:	2000052c 	.word	0x2000052c
    1828:	00002c41 	.word	0x00002c41
    182c:	200001e8 	.word	0x200001e8
    1830:	00003019 	.word	0x00003019
    1834:	200001e6 	.word	0x200001e6
    1838:	200000ac 	.word	0x200000ac
    183c:	0000718c 	.word	0x0000718c
    1840:	2000007c 	.word	0x2000007c
    1844:	20000098 	.word	0x20000098
    1848:	2000009c 	.word	0x2000009c
    184c:	200001f0 	.word	0x200001f0
    1850:	200001f4 	.word	0x200001f4
    1854:	0000139d 	.word	0x0000139d
    1858:	200001ec 	.word	0x200001ec
    185c:	00003009 	.word	0x00003009
    1860:	000014e1 	.word	0x000014e1
    1864:	1fffffff 	.word	0x1fffffff
    1868:	0000147d 	.word	0x0000147d
    186c:	00001385 	.word	0x00001385
			switch (udd_g_ctrlreq.req.bRequest) {
    1870:	4a4a      	ldr	r2, [pc, #296]	; (199c <udc_process_setup+0x42c>)
    1872:	7852      	ldrb	r2, [r2, #1]
    1874:	2a0b      	cmp	r2, #11
    1876:	d1c9      	bne.n	180c <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
    1878:	4b48      	ldr	r3, [pc, #288]	; (199c <udc_process_setup+0x42c>)
    187a:	88db      	ldrh	r3, [r3, #6]
    187c:	2b00      	cmp	r3, #0
    187e:	d103      	bne.n	1888 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    1880:	4b47      	ldr	r3, [pc, #284]	; (19a0 <udc_process_setup+0x430>)
    1882:	781b      	ldrb	r3, [r3, #0]
    1884:	2b00      	cmp	r3, #0
    1886:	d127      	bne.n	18d8 <udc_process_setup+0x368>
	if (0 == udc_num_configuration) {
    1888:	4b45      	ldr	r3, [pc, #276]	; (19a0 <udc_process_setup+0x430>)
    188a:	781b      	ldrb	r3, [r3, #0]
	return false;
    188c:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    188e:	2b00      	cmp	r3, #0
    1890:	d100      	bne.n	1894 <udc_process_setup+0x324>
    1892:	e68a      	b.n	15aa <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1894:	4b41      	ldr	r3, [pc, #260]	; (199c <udc_process_setup+0x42c>)
    1896:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1898:	4b42      	ldr	r3, [pc, #264]	; (19a4 <udc_process_setup+0x434>)
    189a:	681d      	ldr	r5, [r3, #0]
    189c:	682b      	ldr	r3, [r5, #0]
    189e:	791b      	ldrb	r3, [r3, #4]
    18a0:	42a3      	cmp	r3, r4
    18a2:	d800      	bhi.n	18a6 <udc_process_setup+0x336>
    18a4:	e681      	b.n	15aa <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    18a6:	2100      	movs	r1, #0
    18a8:	0020      	movs	r0, r4
    18aa:	4b3f      	ldr	r3, [pc, #252]	; (19a8 <udc_process_setup+0x438>)
    18ac:	4798      	blx	r3
    18ae:	2800      	cmp	r0, #0
    18b0:	d100      	bne.n	18b4 <udc_process_setup+0x344>
    18b2:	e672      	b.n	159a <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    18b4:	686b      	ldr	r3, [r5, #4]
    18b6:	00a2      	lsls	r2, r4, #2
    18b8:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    18ba:	68eb      	ldr	r3, [r5, #12]
    18bc:	4798      	blx	r3
    18be:	0001      	movs	r1, r0
    18c0:	0020      	movs	r0, r4
    18c2:	4b39      	ldr	r3, [pc, #228]	; (19a8 <udc_process_setup+0x438>)
    18c4:	4798      	blx	r3
    18c6:	2800      	cmp	r0, #0
    18c8:	d100      	bne.n	18cc <udc_process_setup+0x35c>
    18ca:	e666      	b.n	159a <udc_process_setup+0x2a>
	return udi_api->setup();
    18cc:	68ab      	ldr	r3, [r5, #8]
    18ce:	4798      	blx	r3
		if (udc_req_iface()) {
    18d0:	2800      	cmp	r0, #0
    18d2:	d000      	beq.n	18d6 <udc_process_setup+0x366>
    18d4:	e669      	b.n	15aa <udc_process_setup+0x3a>
    18d6:	e660      	b.n	159a <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18d8:	4b30      	ldr	r3, [pc, #192]	; (199c <udc_process_setup+0x42c>)
    18da:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    18dc:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    18de:	0028      	movs	r0, r5
    18e0:	4b32      	ldr	r3, [pc, #200]	; (19ac <udc_process_setup+0x43c>)
    18e2:	4798      	blx	r3
    18e4:	2800      	cmp	r0, #0
    18e6:	d100      	bne.n	18ea <udc_process_setup+0x37a>
    18e8:	e650      	b.n	158c <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    18ea:	b2e1      	uxtb	r1, r4
    18ec:	0028      	movs	r0, r5
    18ee:	4b30      	ldr	r3, [pc, #192]	; (19b0 <udc_process_setup+0x440>)
    18f0:	4798      	blx	r3
    18f2:	e023      	b.n	193c <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
    18f4:	4b29      	ldr	r3, [pc, #164]	; (199c <udc_process_setup+0x42c>)
    18f6:	88db      	ldrh	r3, [r3, #6]
    18f8:	2b00      	cmp	r3, #0
    18fa:	d000      	beq.n	18fe <udc_process_setup+0x38e>
    18fc:	e64d      	b.n	159a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    18fe:	4b27      	ldr	r3, [pc, #156]	; (199c <udc_process_setup+0x42c>)
    1900:	885b      	ldrh	r3, [r3, #2]
    1902:	2b00      	cmp	r3, #0
    1904:	d000      	beq.n	1908 <udc_process_setup+0x398>
    1906:	e648      	b.n	159a <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1908:	4b24      	ldr	r3, [pc, #144]	; (199c <udc_process_setup+0x42c>)
    190a:	7918      	ldrb	r0, [r3, #4]
    190c:	4b29      	ldr	r3, [pc, #164]	; (19b4 <udc_process_setup+0x444>)
    190e:	4798      	blx	r3
    1910:	e014      	b.n	193c <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
    1912:	4b22      	ldr	r3, [pc, #136]	; (199c <udc_process_setup+0x42c>)
    1914:	88db      	ldrh	r3, [r3, #6]
    1916:	2b00      	cmp	r3, #0
    1918:	d000      	beq.n	191c <udc_process_setup+0x3ac>
    191a:	e63e      	b.n	159a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    191c:	4b1f      	ldr	r3, [pc, #124]	; (199c <udc_process_setup+0x42c>)
    191e:	885b      	ldrh	r3, [r3, #2]
    1920:	2b00      	cmp	r3, #0
    1922:	d000      	beq.n	1926 <udc_process_setup+0x3b6>
    1924:	e639      	b.n	159a <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1926:	4c1d      	ldr	r4, [pc, #116]	; (199c <udc_process_setup+0x42c>)
    1928:	7920      	ldrb	r0, [r4, #4]
    192a:	4b23      	ldr	r3, [pc, #140]	; (19b8 <udc_process_setup+0x448>)
    192c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    192e:	7920      	ldrb	r0, [r4, #4]
    1930:	4b22      	ldr	r3, [pc, #136]	; (19bc <udc_process_setup+0x44c>)
    1932:	4798      	blx	r3
    1934:	e002      	b.n	193c <udc_process_setup+0x3cc>
		return false;
    1936:	2000      	movs	r0, #0
    1938:	e000      	b.n	193c <udc_process_setup+0x3cc>
				return udc_req_std_dev_set_feature();
    193a:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    193c:	2800      	cmp	r0, #0
    193e:	d000      	beq.n	1942 <udc_process_setup+0x3d2>
    1940:	e633      	b.n	15aa <udc_process_setup+0x3a>
    1942:	e623      	b.n	158c <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    1944:	4b16      	ldr	r3, [pc, #88]	; (19a0 <udc_process_setup+0x430>)
    1946:	781b      	ldrb	r3, [r3, #0]
    1948:	2b00      	cmp	r3, #0
    194a:	d100      	bne.n	194e <udc_process_setup+0x3de>
    194c:	e62d      	b.n	15aa <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    194e:	4b15      	ldr	r3, [pc, #84]	; (19a4 <udc_process_setup+0x434>)
    1950:	681b      	ldr	r3, [r3, #0]
    1952:	681a      	ldr	r2, [r3, #0]
    1954:	7912      	ldrb	r2, [r2, #4]
    1956:	2a00      	cmp	r2, #0
    1958:	d01a      	beq.n	1990 <udc_process_setup+0x420>
    195a:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    195c:	4e12      	ldr	r6, [pc, #72]	; (19a8 <udc_process_setup+0x438>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    195e:	4f11      	ldr	r7, [pc, #68]	; (19a4 <udc_process_setup+0x434>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1960:	685b      	ldr	r3, [r3, #4]
    1962:	00aa      	lsls	r2, r5, #2
    1964:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1966:	68e3      	ldr	r3, [r4, #12]
    1968:	4798      	blx	r3
    196a:	0001      	movs	r1, r0
    196c:	0028      	movs	r0, r5
    196e:	47b0      	blx	r6
    1970:	2800      	cmp	r0, #0
    1972:	d100      	bne.n	1976 <udc_process_setup+0x406>
    1974:	e619      	b.n	15aa <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    1976:	68a3      	ldr	r3, [r4, #8]
    1978:	4798      	blx	r3
    197a:	2800      	cmp	r0, #0
    197c:	d000      	beq.n	1980 <udc_process_setup+0x410>
    197e:	e614      	b.n	15aa <udc_process_setup+0x3a>
			iface_num++) {
    1980:	3501      	adds	r5, #1
    1982:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1984:	683b      	ldr	r3, [r7, #0]
    1986:	681a      	ldr	r2, [r3, #0]
    1988:	7912      	ldrb	r2, [r2, #4]
    198a:	42aa      	cmp	r2, r5
    198c:	d8e8      	bhi.n	1960 <udc_process_setup+0x3f0>
    198e:	e60c      	b.n	15aa <udc_process_setup+0x3a>
	return false;
    1990:	2000      	movs	r0, #0
    1992:	e60a      	b.n	15aa <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1994:	2103      	movs	r1, #3
		str = udc_string_product_name;
    1996:	4c0a      	ldr	r4, [pc, #40]	; (19c0 <udc_process_setup+0x450>)
    1998:	e688      	b.n	16ac <udc_process_setup+0x13c>
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	2000052c 	.word	0x2000052c
    19a0:	200001f0 	.word	0x200001f0
    19a4:	200001f4 	.word	0x200001f4
    19a8:	0000139d 	.word	0x0000139d
    19ac:	00001411 	.word	0x00001411
    19b0:	0000147d 	.word	0x0000147d
    19b4:	00002d85 	.word	0x00002d85
    19b8:	00002a95 	.word	0x00002a95
    19bc:	00002c55 	.word	0x00002c55
    19c0:	200000a8 	.word	0x200000a8

000019c4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    19c4:	4a04      	ldr	r2, [pc, #16]	; (19d8 <_extint_enable+0x14>)
    19c6:	7813      	ldrb	r3, [r2, #0]
    19c8:	2102      	movs	r1, #2
    19ca:	430b      	orrs	r3, r1
    19cc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    19ce:	7853      	ldrb	r3, [r2, #1]
    19d0:	b25b      	sxtb	r3, r3
    19d2:	2b00      	cmp	r3, #0
    19d4:	dbfb      	blt.n	19ce <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    19d6:	4770      	bx	lr
    19d8:	40001800 	.word	0x40001800

000019dc <_system_extint_init>:
{
    19dc:	b500      	push	{lr}
    19de:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    19e0:	4a12      	ldr	r2, [pc, #72]	; (1a2c <_system_extint_init+0x50>)
    19e2:	6993      	ldr	r3, [r2, #24]
    19e4:	2140      	movs	r1, #64	; 0x40
    19e6:	430b      	orrs	r3, r1
    19e8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    19ea:	a901      	add	r1, sp, #4
    19ec:	2300      	movs	r3, #0
    19ee:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    19f0:	2005      	movs	r0, #5
    19f2:	4b0f      	ldr	r3, [pc, #60]	; (1a30 <_system_extint_init+0x54>)
    19f4:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    19f6:	2005      	movs	r0, #5
    19f8:	4b0e      	ldr	r3, [pc, #56]	; (1a34 <_system_extint_init+0x58>)
    19fa:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    19fc:	4a0e      	ldr	r2, [pc, #56]	; (1a38 <_system_extint_init+0x5c>)
    19fe:	7813      	ldrb	r3, [r2, #0]
    1a00:	2101      	movs	r1, #1
    1a02:	430b      	orrs	r3, r1
    1a04:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1a06:	7853      	ldrb	r3, [r2, #1]
    1a08:	b25b      	sxtb	r3, r3
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	dbfb      	blt.n	1a06 <_system_extint_init+0x2a>
    1a0e:	4b0b      	ldr	r3, [pc, #44]	; (1a3c <_system_extint_init+0x60>)
    1a10:	0019      	movs	r1, r3
    1a12:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1a14:	2200      	movs	r2, #0
    1a16:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1a18:	4299      	cmp	r1, r3
    1a1a:	d1fc      	bne.n	1a16 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1a1c:	2210      	movs	r2, #16
    1a1e:	4b08      	ldr	r3, [pc, #32]	; (1a40 <_system_extint_init+0x64>)
    1a20:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1a22:	4b08      	ldr	r3, [pc, #32]	; (1a44 <_system_extint_init+0x68>)
    1a24:	4798      	blx	r3
}
    1a26:	b003      	add	sp, #12
    1a28:	bd00      	pop	{pc}
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	40000400 	.word	0x40000400
    1a30:	00005f55 	.word	0x00005f55
    1a34:	00005ec9 	.word	0x00005ec9
    1a38:	40001800 	.word	0x40001800
    1a3c:	200002ec 	.word	0x200002ec
    1a40:	e000e100 	.word	0xe000e100
    1a44:	000019c5 	.word	0x000019c5

00001a48 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    1a48:	2300      	movs	r3, #0
    1a4a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    1a4c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1a4e:	2201      	movs	r2, #1
    1a50:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    1a52:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    1a54:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1a56:	3302      	adds	r3, #2
    1a58:	72c3      	strb	r3, [r0, #11]
}
    1a5a:	4770      	bx	lr

00001a5c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a5e:	b083      	sub	sp, #12
    1a60:	0005      	movs	r5, r0
    1a62:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1a64:	a901      	add	r1, sp, #4
    1a66:	2300      	movs	r3, #0
    1a68:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1a6a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    1a6c:	7923      	ldrb	r3, [r4, #4]
    1a6e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1a70:	7a23      	ldrb	r3, [r4, #8]
    1a72:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1a74:	7820      	ldrb	r0, [r4, #0]
    1a76:	4b15      	ldr	r3, [pc, #84]	; (1acc <extint_chan_set_config+0x70>)
    1a78:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1a7a:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    1a7c:	2d1f      	cmp	r5, #31
    1a7e:	d800      	bhi.n	1a82 <extint_chan_set_config+0x26>
		return eics[eic_index];
    1a80:	4813      	ldr	r0, [pc, #76]	; (1ad0 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    1a82:	2207      	movs	r2, #7
    1a84:	402a      	ands	r2, r5
    1a86:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    1a88:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    1a8a:	7aa3      	ldrb	r3, [r4, #10]
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	d001      	beq.n	1a94 <extint_chan_set_config+0x38>
    1a90:	2308      	movs	r3, #8
    1a92:	431f      	orrs	r7, r3
    1a94:	08eb      	lsrs	r3, r5, #3
    1a96:	009b      	lsls	r3, r3, #2
    1a98:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    1a9a:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1a9c:	260f      	movs	r6, #15
    1a9e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    1aa0:	43b1      	bics	r1, r6
			(new_config << config_pos);
    1aa2:	4097      	lsls	r7, r2
    1aa4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1aa6:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    1aa8:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    1aaa:	7a63      	ldrb	r3, [r4, #9]
    1aac:	2b00      	cmp	r3, #0
    1aae:	d106      	bne.n	1abe <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    1ab0:	6943      	ldr	r3, [r0, #20]
    1ab2:	2201      	movs	r2, #1
    1ab4:	40aa      	lsls	r2, r5
    1ab6:	4393      	bics	r3, r2
    1ab8:	6143      	str	r3, [r0, #20]
	}
}
    1aba:	b003      	add	sp, #12
    1abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    1abe:	6942      	ldr	r2, [r0, #20]
    1ac0:	2301      	movs	r3, #1
    1ac2:	40ab      	lsls	r3, r5
    1ac4:	4313      	orrs	r3, r2
    1ac6:	6143      	str	r3, [r0, #20]
    1ac8:	e7f7      	b.n	1aba <extint_chan_set_config+0x5e>
    1aca:	46c0      	nop			; (mov r8, r8)
    1acc:	0000604d 	.word	0x0000604d
    1ad0:	40001800 	.word	0x40001800

00001ad4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1ad4:	4770      	bx	lr
	...

00001ad8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1ada:	4b0a      	ldr	r3, [pc, #40]	; (1b04 <_sercom_set_handler+0x2c>)
    1adc:	781b      	ldrb	r3, [r3, #0]
    1ade:	2b00      	cmp	r3, #0
    1ae0:	d10c      	bne.n	1afc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1ae2:	4f09      	ldr	r7, [pc, #36]	; (1b08 <_sercom_set_handler+0x30>)
    1ae4:	4e09      	ldr	r6, [pc, #36]	; (1b0c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1ae6:	4d0a      	ldr	r5, [pc, #40]	; (1b10 <_sercom_set_handler+0x38>)
    1ae8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1aea:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1aec:	195a      	adds	r2, r3, r5
    1aee:	6014      	str	r4, [r2, #0]
    1af0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1af2:	2b18      	cmp	r3, #24
    1af4:	d1f9      	bne.n	1aea <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1af6:	2201      	movs	r2, #1
    1af8:	4b02      	ldr	r3, [pc, #8]	; (1b04 <_sercom_set_handler+0x2c>)
    1afa:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1afc:	0080      	lsls	r0, r0, #2
    1afe:	4b02      	ldr	r3, [pc, #8]	; (1b08 <_sercom_set_handler+0x30>)
    1b00:	50c1      	str	r1, [r0, r3]
}
    1b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b04:	200001fc 	.word	0x200001fc
    1b08:	20000200 	.word	0x20000200
    1b0c:	00001ad5 	.word	0x00001ad5
    1b10:	2000032c 	.word	0x2000032c

00001b14 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1b14:	b500      	push	{lr}
    1b16:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1b18:	2309      	movs	r3, #9
    1b1a:	466a      	mov	r2, sp
    1b1c:	7013      	strb	r3, [r2, #0]
    1b1e:	3301      	adds	r3, #1
    1b20:	7053      	strb	r3, [r2, #1]
    1b22:	3301      	adds	r3, #1
    1b24:	7093      	strb	r3, [r2, #2]
    1b26:	3301      	adds	r3, #1
    1b28:	70d3      	strb	r3, [r2, #3]
    1b2a:	3301      	adds	r3, #1
    1b2c:	7113      	strb	r3, [r2, #4]
    1b2e:	3301      	adds	r3, #1
    1b30:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1b32:	4b03      	ldr	r3, [pc, #12]	; (1b40 <_sercom_get_interrupt_vector+0x2c>)
    1b34:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1b36:	466b      	mov	r3, sp
    1b38:	5618      	ldrsb	r0, [r3, r0]
}
    1b3a:	b003      	add	sp, #12
    1b3c:	bd00      	pop	{pc}
    1b3e:	46c0      	nop			; (mov r8, r8)
    1b40:	00004a39 	.word	0x00004a39

00001b44 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1b44:	b510      	push	{r4, lr}
    1b46:	4b02      	ldr	r3, [pc, #8]	; (1b50 <SERCOM0_Handler+0xc>)
    1b48:	681b      	ldr	r3, [r3, #0]
    1b4a:	2000      	movs	r0, #0
    1b4c:	4798      	blx	r3
    1b4e:	bd10      	pop	{r4, pc}
    1b50:	20000200 	.word	0x20000200

00001b54 <SERCOM1_Handler>:
    1b54:	b510      	push	{r4, lr}
    1b56:	4b02      	ldr	r3, [pc, #8]	; (1b60 <SERCOM1_Handler+0xc>)
    1b58:	685b      	ldr	r3, [r3, #4]
    1b5a:	2001      	movs	r0, #1
    1b5c:	4798      	blx	r3
    1b5e:	bd10      	pop	{r4, pc}
    1b60:	20000200 	.word	0x20000200

00001b64 <SERCOM2_Handler>:
    1b64:	b510      	push	{r4, lr}
    1b66:	4b02      	ldr	r3, [pc, #8]	; (1b70 <SERCOM2_Handler+0xc>)
    1b68:	689b      	ldr	r3, [r3, #8]
    1b6a:	2002      	movs	r0, #2
    1b6c:	4798      	blx	r3
    1b6e:	bd10      	pop	{r4, pc}
    1b70:	20000200 	.word	0x20000200

00001b74 <SERCOM3_Handler>:
    1b74:	b510      	push	{r4, lr}
    1b76:	4b02      	ldr	r3, [pc, #8]	; (1b80 <SERCOM3_Handler+0xc>)
    1b78:	68db      	ldr	r3, [r3, #12]
    1b7a:	2003      	movs	r0, #3
    1b7c:	4798      	blx	r3
    1b7e:	bd10      	pop	{r4, pc}
    1b80:	20000200 	.word	0x20000200

00001b84 <SERCOM4_Handler>:
    1b84:	b510      	push	{r4, lr}
    1b86:	4b02      	ldr	r3, [pc, #8]	; (1b90 <SERCOM4_Handler+0xc>)
    1b88:	691b      	ldr	r3, [r3, #16]
    1b8a:	2004      	movs	r0, #4
    1b8c:	4798      	blx	r3
    1b8e:	bd10      	pop	{r4, pc}
    1b90:	20000200 	.word	0x20000200

00001b94 <SERCOM5_Handler>:
    1b94:	b510      	push	{r4, lr}
    1b96:	4b02      	ldr	r3, [pc, #8]	; (1ba0 <SERCOM5_Handler+0xc>)
    1b98:	695b      	ldr	r3, [r3, #20]
    1b9a:	2005      	movs	r0, #5
    1b9c:	4798      	blx	r3
    1b9e:	bd10      	pop	{r4, pc}
    1ba0:	20000200 	.word	0x20000200

00001ba4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ba6:	46de      	mov	lr, fp
    1ba8:	4657      	mov	r7, sl
    1baa:	464e      	mov	r6, r9
    1bac:	4645      	mov	r5, r8
    1bae:	b5e0      	push	{r5, r6, r7, lr}
    1bb0:	b091      	sub	sp, #68	; 0x44
    1bb2:	0005      	movs	r5, r0
    1bb4:	000c      	movs	r4, r1
    1bb6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1bb8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1bba:	0008      	movs	r0, r1
    1bbc:	4bbc      	ldr	r3, [pc, #752]	; (1eb0 <usart_init+0x30c>)
    1bbe:	4798      	blx	r3
    1bc0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1bc2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1bc4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1bc6:	07db      	lsls	r3, r3, #31
    1bc8:	d506      	bpl.n	1bd8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1bca:	b011      	add	sp, #68	; 0x44
    1bcc:	bc3c      	pop	{r2, r3, r4, r5}
    1bce:	4690      	mov	r8, r2
    1bd0:	4699      	mov	r9, r3
    1bd2:	46a2      	mov	sl, r4
    1bd4:	46ab      	mov	fp, r5
    1bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1bd8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1bda:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1bdc:	079b      	lsls	r3, r3, #30
    1bde:	d4f4      	bmi.n	1bca <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1be0:	49b4      	ldr	r1, [pc, #720]	; (1eb4 <usart_init+0x310>)
    1be2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1be4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1be6:	2301      	movs	r3, #1
    1be8:	40bb      	lsls	r3, r7
    1bea:	4303      	orrs	r3, r0
    1bec:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1bee:	a90f      	add	r1, sp, #60	; 0x3c
    1bf0:	272d      	movs	r7, #45	; 0x2d
    1bf2:	5df3      	ldrb	r3, [r6, r7]
    1bf4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1bf6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1bf8:	b2d3      	uxtb	r3, r2
    1bfa:	9302      	str	r3, [sp, #8]
    1bfc:	0018      	movs	r0, r3
    1bfe:	4bae      	ldr	r3, [pc, #696]	; (1eb8 <usart_init+0x314>)
    1c00:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1c02:	9802      	ldr	r0, [sp, #8]
    1c04:	4bad      	ldr	r3, [pc, #692]	; (1ebc <usart_init+0x318>)
    1c06:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1c08:	5df0      	ldrb	r0, [r6, r7]
    1c0a:	2100      	movs	r1, #0
    1c0c:	4bac      	ldr	r3, [pc, #688]	; (1ec0 <usart_init+0x31c>)
    1c0e:	4798      	blx	r3
	module->character_size = config->character_size;
    1c10:	7af3      	ldrb	r3, [r6, #11]
    1c12:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1c14:	2324      	movs	r3, #36	; 0x24
    1c16:	5cf3      	ldrb	r3, [r6, r3]
    1c18:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1c1a:	2325      	movs	r3, #37	; 0x25
    1c1c:	5cf3      	ldrb	r3, [r6, r3]
    1c1e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1c20:	7ef3      	ldrb	r3, [r6, #27]
    1c22:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1c24:	7f33      	ldrb	r3, [r6, #28]
    1c26:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c28:	682b      	ldr	r3, [r5, #0]
    1c2a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1c2c:	0018      	movs	r0, r3
    1c2e:	4ba0      	ldr	r3, [pc, #640]	; (1eb0 <usart_init+0x30c>)
    1c30:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1c32:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1c34:	2200      	movs	r2, #0
    1c36:	230e      	movs	r3, #14
    1c38:	a906      	add	r1, sp, #24
    1c3a:	468c      	mov	ip, r1
    1c3c:	4463      	add	r3, ip
    1c3e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1c40:	8a32      	ldrh	r2, [r6, #16]
    1c42:	9202      	str	r2, [sp, #8]
    1c44:	2380      	movs	r3, #128	; 0x80
    1c46:	01db      	lsls	r3, r3, #7
    1c48:	429a      	cmp	r2, r3
    1c4a:	d100      	bne.n	1c4e <usart_init+0xaa>
    1c4c:	e09e      	b.n	1d8c <usart_init+0x1e8>
    1c4e:	d90f      	bls.n	1c70 <usart_init+0xcc>
    1c50:	23c0      	movs	r3, #192	; 0xc0
    1c52:	01db      	lsls	r3, r3, #7
    1c54:	9a02      	ldr	r2, [sp, #8]
    1c56:	429a      	cmp	r2, r3
    1c58:	d100      	bne.n	1c5c <usart_init+0xb8>
    1c5a:	e092      	b.n	1d82 <usart_init+0x1de>
    1c5c:	2380      	movs	r3, #128	; 0x80
    1c5e:	021b      	lsls	r3, r3, #8
    1c60:	429a      	cmp	r2, r3
    1c62:	d000      	beq.n	1c66 <usart_init+0xc2>
    1c64:	e11f      	b.n	1ea6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1c66:	2303      	movs	r3, #3
    1c68:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1c6a:	2300      	movs	r3, #0
    1c6c:	9307      	str	r3, [sp, #28]
    1c6e:	e008      	b.n	1c82 <usart_init+0xde>
	switch (config->sample_rate) {
    1c70:	2380      	movs	r3, #128	; 0x80
    1c72:	019b      	lsls	r3, r3, #6
    1c74:	429a      	cmp	r2, r3
    1c76:	d000      	beq.n	1c7a <usart_init+0xd6>
    1c78:	e115      	b.n	1ea6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1c7a:	2310      	movs	r3, #16
    1c7c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1c7e:	3b0f      	subs	r3, #15
    1c80:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1c82:	6833      	ldr	r3, [r6, #0]
    1c84:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1c86:	68f3      	ldr	r3, [r6, #12]
    1c88:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1c8a:	6973      	ldr	r3, [r6, #20]
    1c8c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1c8e:	7e33      	ldrb	r3, [r6, #24]
    1c90:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1c92:	2326      	movs	r3, #38	; 0x26
    1c94:	5cf3      	ldrb	r3, [r6, r3]
    1c96:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1c98:	6873      	ldr	r3, [r6, #4]
    1c9a:	4699      	mov	r9, r3
	switch (transfer_mode)
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	d100      	bne.n	1ca2 <usart_init+0xfe>
    1ca0:	e0a0      	b.n	1de4 <usart_init+0x240>
    1ca2:	2380      	movs	r3, #128	; 0x80
    1ca4:	055b      	lsls	r3, r3, #21
    1ca6:	4599      	cmp	r9, r3
    1ca8:	d100      	bne.n	1cac <usart_init+0x108>
    1caa:	e084      	b.n	1db6 <usart_init+0x212>
	if(config->encoding_format_enable) {
    1cac:	7e73      	ldrb	r3, [r6, #25]
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d002      	beq.n	1cb8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1cb2:	7eb3      	ldrb	r3, [r6, #26]
    1cb4:	4642      	mov	r2, r8
    1cb6:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1cb8:	682a      	ldr	r2, [r5, #0]
    1cba:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1cbc:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d1fc      	bne.n	1cbc <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1cc2:	330e      	adds	r3, #14
    1cc4:	aa06      	add	r2, sp, #24
    1cc6:	4694      	mov	ip, r2
    1cc8:	4463      	add	r3, ip
    1cca:	881b      	ldrh	r3, [r3, #0]
    1ccc:	4642      	mov	r2, r8
    1cce:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1cd0:	9b05      	ldr	r3, [sp, #20]
    1cd2:	9a03      	ldr	r2, [sp, #12]
    1cd4:	4313      	orrs	r3, r2
    1cd6:	9a04      	ldr	r2, [sp, #16]
    1cd8:	4313      	orrs	r3, r2
    1cda:	464a      	mov	r2, r9
    1cdc:	4313      	orrs	r3, r2
    1cde:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1ce0:	465b      	mov	r3, fp
    1ce2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1ce4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1ce6:	4653      	mov	r3, sl
    1ce8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1cea:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1cec:	2327      	movs	r3, #39	; 0x27
    1cee:	5cf3      	ldrb	r3, [r6, r3]
    1cf0:	2b00      	cmp	r3, #0
    1cf2:	d101      	bne.n	1cf8 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1cf4:	3304      	adds	r3, #4
    1cf6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1cf8:	7e73      	ldrb	r3, [r6, #25]
    1cfa:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1cfc:	7f32      	ldrb	r2, [r6, #28]
    1cfe:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1d00:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1d02:	7f72      	ldrb	r2, [r6, #29]
    1d04:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1d06:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1d08:	2224      	movs	r2, #36	; 0x24
    1d0a:	5cb2      	ldrb	r2, [r6, r2]
    1d0c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1d0e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1d10:	2225      	movs	r2, #37	; 0x25
    1d12:	5cb2      	ldrb	r2, [r6, r2]
    1d14:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1d16:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1d18:	7ab1      	ldrb	r1, [r6, #10]
    1d1a:	7af2      	ldrb	r2, [r6, #11]
    1d1c:	4311      	orrs	r1, r2
    1d1e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1d20:	8933      	ldrh	r3, [r6, #8]
    1d22:	2bff      	cmp	r3, #255	; 0xff
    1d24:	d100      	bne.n	1d28 <usart_init+0x184>
    1d26:	e081      	b.n	1e2c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1d28:	2280      	movs	r2, #128	; 0x80
    1d2a:	0452      	lsls	r2, r2, #17
    1d2c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1d2e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1d30:	232c      	movs	r3, #44	; 0x2c
    1d32:	5cf3      	ldrb	r3, [r6, r3]
    1d34:	2b00      	cmp	r3, #0
    1d36:	d103      	bne.n	1d40 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1d38:	4b62      	ldr	r3, [pc, #392]	; (1ec4 <usart_init+0x320>)
    1d3a:	789b      	ldrb	r3, [r3, #2]
    1d3c:	079b      	lsls	r3, r3, #30
    1d3e:	d501      	bpl.n	1d44 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1d40:	2380      	movs	r3, #128	; 0x80
    1d42:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d44:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1d46:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d1fc      	bne.n	1d46 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1d4c:	4643      	mov	r3, r8
    1d4e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d50:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1d52:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1d54:	2b00      	cmp	r3, #0
    1d56:	d1fc      	bne.n	1d52 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    1d58:	4643      	mov	r3, r8
    1d5a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1d5c:	ab0e      	add	r3, sp, #56	; 0x38
    1d5e:	2280      	movs	r2, #128	; 0x80
    1d60:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1d62:	2200      	movs	r2, #0
    1d64:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1d66:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1d68:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1d6a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1d6c:	930a      	str	r3, [sp, #40]	; 0x28
    1d6e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1d70:	930b      	str	r3, [sp, #44]	; 0x2c
    1d72:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1d74:	930c      	str	r3, [sp, #48]	; 0x30
    1d76:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1d78:	9302      	str	r3, [sp, #8]
    1d7a:	930d      	str	r3, [sp, #52]	; 0x34
    1d7c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1d7e:	ae0a      	add	r6, sp, #40	; 0x28
    1d80:	e063      	b.n	1e4a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1d82:	2308      	movs	r3, #8
    1d84:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1d86:	3b07      	subs	r3, #7
    1d88:	9307      	str	r3, [sp, #28]
    1d8a:	e77a      	b.n	1c82 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1d8c:	6833      	ldr	r3, [r6, #0]
    1d8e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1d90:	68f3      	ldr	r3, [r6, #12]
    1d92:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1d94:	6973      	ldr	r3, [r6, #20]
    1d96:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1d98:	7e33      	ldrb	r3, [r6, #24]
    1d9a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1d9c:	2326      	movs	r3, #38	; 0x26
    1d9e:	5cf3      	ldrb	r3, [r6, r3]
    1da0:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1da2:	6873      	ldr	r3, [r6, #4]
    1da4:	4699      	mov	r9, r3
	switch (transfer_mode)
    1da6:	2b00      	cmp	r3, #0
    1da8:	d018      	beq.n	1ddc <usart_init+0x238>
    1daa:	2380      	movs	r3, #128	; 0x80
    1dac:	055b      	lsls	r3, r3, #21
    1dae:	4599      	cmp	r9, r3
    1db0:	d001      	beq.n	1db6 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1db2:	2000      	movs	r0, #0
    1db4:	e025      	b.n	1e02 <usart_init+0x25e>
			if (!config->use_external_clock) {
    1db6:	2327      	movs	r3, #39	; 0x27
    1db8:	5cf3      	ldrb	r3, [r6, r3]
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d000      	beq.n	1dc0 <usart_init+0x21c>
    1dbe:	e775      	b.n	1cac <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1dc0:	6a33      	ldr	r3, [r6, #32]
    1dc2:	001f      	movs	r7, r3
    1dc4:	b2c0      	uxtb	r0, r0
    1dc6:	4b40      	ldr	r3, [pc, #256]	; (1ec8 <usart_init+0x324>)
    1dc8:	4798      	blx	r3
    1dca:	0001      	movs	r1, r0
    1dcc:	220e      	movs	r2, #14
    1dce:	ab06      	add	r3, sp, #24
    1dd0:	469c      	mov	ip, r3
    1dd2:	4462      	add	r2, ip
    1dd4:	0038      	movs	r0, r7
    1dd6:	4b3d      	ldr	r3, [pc, #244]	; (1ecc <usart_init+0x328>)
    1dd8:	4798      	blx	r3
    1dda:	e012      	b.n	1e02 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1ddc:	2308      	movs	r3, #8
    1dde:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1de0:	2300      	movs	r3, #0
    1de2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1de4:	2327      	movs	r3, #39	; 0x27
    1de6:	5cf3      	ldrb	r3, [r6, r3]
    1de8:	2b00      	cmp	r3, #0
    1dea:	d00e      	beq.n	1e0a <usart_init+0x266>
				status_code =
    1dec:	9b06      	ldr	r3, [sp, #24]
    1dee:	9300      	str	r3, [sp, #0]
    1df0:	9b07      	ldr	r3, [sp, #28]
    1df2:	220e      	movs	r2, #14
    1df4:	a906      	add	r1, sp, #24
    1df6:	468c      	mov	ip, r1
    1df8:	4462      	add	r2, ip
    1dfa:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1dfc:	6a30      	ldr	r0, [r6, #32]
    1dfe:	4f34      	ldr	r7, [pc, #208]	; (1ed0 <usart_init+0x32c>)
    1e00:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1e02:	2800      	cmp	r0, #0
    1e04:	d000      	beq.n	1e08 <usart_init+0x264>
    1e06:	e6e0      	b.n	1bca <usart_init+0x26>
    1e08:	e750      	b.n	1cac <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1e0a:	6a33      	ldr	r3, [r6, #32]
    1e0c:	001f      	movs	r7, r3
    1e0e:	b2c0      	uxtb	r0, r0
    1e10:	4b2d      	ldr	r3, [pc, #180]	; (1ec8 <usart_init+0x324>)
    1e12:	4798      	blx	r3
    1e14:	0001      	movs	r1, r0
				status_code =
    1e16:	9b06      	ldr	r3, [sp, #24]
    1e18:	9300      	str	r3, [sp, #0]
    1e1a:	9b07      	ldr	r3, [sp, #28]
    1e1c:	220e      	movs	r2, #14
    1e1e:	a806      	add	r0, sp, #24
    1e20:	4684      	mov	ip, r0
    1e22:	4462      	add	r2, ip
    1e24:	0038      	movs	r0, r7
    1e26:	4f2a      	ldr	r7, [pc, #168]	; (1ed0 <usart_init+0x32c>)
    1e28:	47b8      	blx	r7
    1e2a:	e7ea      	b.n	1e02 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    1e2c:	7ef3      	ldrb	r3, [r6, #27]
    1e2e:	2b00      	cmp	r3, #0
    1e30:	d100      	bne.n	1e34 <usart_init+0x290>
    1e32:	e77d      	b.n	1d30 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1e34:	2380      	movs	r3, #128	; 0x80
    1e36:	04db      	lsls	r3, r3, #19
    1e38:	431f      	orrs	r7, r3
    1e3a:	e779      	b.n	1d30 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1e3c:	0020      	movs	r0, r4
    1e3e:	4b25      	ldr	r3, [pc, #148]	; (1ed4 <usart_init+0x330>)
    1e40:	4798      	blx	r3
    1e42:	e007      	b.n	1e54 <usart_init+0x2b0>
    1e44:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1e46:	2f04      	cmp	r7, #4
    1e48:	d00d      	beq.n	1e66 <usart_init+0x2c2>
    1e4a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1e4c:	00bb      	lsls	r3, r7, #2
    1e4e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1e50:	2800      	cmp	r0, #0
    1e52:	d0f3      	beq.n	1e3c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1e54:	1c43      	adds	r3, r0, #1
    1e56:	d0f5      	beq.n	1e44 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1e58:	a90e      	add	r1, sp, #56	; 0x38
    1e5a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1e5c:	0c00      	lsrs	r0, r0, #16
    1e5e:	b2c0      	uxtb	r0, r0
    1e60:	4b1d      	ldr	r3, [pc, #116]	; (1ed8 <usart_init+0x334>)
    1e62:	4798      	blx	r3
    1e64:	e7ee      	b.n	1e44 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    1e66:	2300      	movs	r3, #0
    1e68:	60eb      	str	r3, [r5, #12]
    1e6a:	612b      	str	r3, [r5, #16]
    1e6c:	616b      	str	r3, [r5, #20]
    1e6e:	61ab      	str	r3, [r5, #24]
    1e70:	61eb      	str	r3, [r5, #28]
    1e72:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1e74:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1e76:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1e78:	2200      	movs	r2, #0
    1e7a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1e7c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1e7e:	3330      	adds	r3, #48	; 0x30
    1e80:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1e82:	3301      	adds	r3, #1
    1e84:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1e86:	3301      	adds	r3, #1
    1e88:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1e8a:	3301      	adds	r3, #1
    1e8c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1e8e:	6828      	ldr	r0, [r5, #0]
    1e90:	4b07      	ldr	r3, [pc, #28]	; (1eb0 <usart_init+0x30c>)
    1e92:	4798      	blx	r3
    1e94:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1e96:	4911      	ldr	r1, [pc, #68]	; (1edc <usart_init+0x338>)
    1e98:	4b11      	ldr	r3, [pc, #68]	; (1ee0 <usart_init+0x33c>)
    1e9a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1e9c:	00a4      	lsls	r4, r4, #2
    1e9e:	4b11      	ldr	r3, [pc, #68]	; (1ee4 <usart_init+0x340>)
    1ea0:	50e5      	str	r5, [r4, r3]
	return status_code;
    1ea2:	2000      	movs	r0, #0
    1ea4:	e691      	b.n	1bca <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1ea6:	2310      	movs	r3, #16
    1ea8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1eaa:	2300      	movs	r3, #0
    1eac:	9307      	str	r3, [sp, #28]
    1eae:	e6e8      	b.n	1c82 <usart_init+0xde>
    1eb0:	00004a39 	.word	0x00004a39
    1eb4:	40000400 	.word	0x40000400
    1eb8:	00005f55 	.word	0x00005f55
    1ebc:	00005ec9 	.word	0x00005ec9
    1ec0:	00004875 	.word	0x00004875
    1ec4:	41002000 	.word	0x41002000
    1ec8:	00005f71 	.word	0x00005f71
    1ecc:	000047b7 	.word	0x000047b7
    1ed0:	000047e1 	.word	0x000047e1
    1ed4:	000048c1 	.word	0x000048c1
    1ed8:	0000604d 	.word	0x0000604d
    1edc:	00001f85 	.word	0x00001f85
    1ee0:	00001ad9 	.word	0x00001ad9
    1ee4:	2000032c 	.word	0x2000032c

00001ee8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1ee8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1eea:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1eec:	2a00      	cmp	r2, #0
    1eee:	d101      	bne.n	1ef4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1ef0:	0018      	movs	r0, r3
    1ef2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1ef4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1ef6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1ef8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1efa:	2a00      	cmp	r2, #0
    1efc:	d1f8      	bne.n	1ef0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1efe:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1f00:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1f02:	2a00      	cmp	r2, #0
    1f04:	d1fc      	bne.n	1f00 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1f06:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1f08:	2102      	movs	r1, #2
    1f0a:	7e1a      	ldrb	r2, [r3, #24]
    1f0c:	420a      	tst	r2, r1
    1f0e:	d0fc      	beq.n	1f0a <usart_write_wait+0x22>
	return STATUS_OK;
    1f10:	2300      	movs	r3, #0
    1f12:	e7ed      	b.n	1ef0 <usart_write_wait+0x8>

00001f14 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1f14:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1f16:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1f18:	2a00      	cmp	r2, #0
    1f1a:	d101      	bne.n	1f20 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1f1c:	0018      	movs	r0, r3
    1f1e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1f20:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1f22:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1f24:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1f26:	2a00      	cmp	r2, #0
    1f28:	d1f8      	bne.n	1f1c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f2a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1f2c:	7e10      	ldrb	r0, [r2, #24]
    1f2e:	0740      	lsls	r0, r0, #29
    1f30:	d5f4      	bpl.n	1f1c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1f32:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1f34:	2b00      	cmp	r3, #0
    1f36:	d1fc      	bne.n	1f32 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1f38:	8b53      	ldrh	r3, [r2, #26]
    1f3a:	b2db      	uxtb	r3, r3
	if (error_code) {
    1f3c:	0698      	lsls	r0, r3, #26
    1f3e:	d01d      	beq.n	1f7c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1f40:	0798      	lsls	r0, r3, #30
    1f42:	d503      	bpl.n	1f4c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1f44:	2302      	movs	r3, #2
    1f46:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1f48:	3318      	adds	r3, #24
    1f4a:	e7e7      	b.n	1f1c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1f4c:	0758      	lsls	r0, r3, #29
    1f4e:	d503      	bpl.n	1f58 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1f50:	2304      	movs	r3, #4
    1f52:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1f54:	331a      	adds	r3, #26
    1f56:	e7e1      	b.n	1f1c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1f58:	07d8      	lsls	r0, r3, #31
    1f5a:	d503      	bpl.n	1f64 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1f5c:	2301      	movs	r3, #1
    1f5e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1f60:	3312      	adds	r3, #18
    1f62:	e7db      	b.n	1f1c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1f64:	06d8      	lsls	r0, r3, #27
    1f66:	d503      	bpl.n	1f70 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1f68:	2310      	movs	r3, #16
    1f6a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1f6c:	3332      	adds	r3, #50	; 0x32
    1f6e:	e7d5      	b.n	1f1c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1f70:	069b      	lsls	r3, r3, #26
    1f72:	d503      	bpl.n	1f7c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1f74:	2320      	movs	r3, #32
    1f76:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1f78:	3321      	adds	r3, #33	; 0x21
    1f7a:	e7cf      	b.n	1f1c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1f7c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1f7e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1f80:	2300      	movs	r3, #0
    1f82:	e7cb      	b.n	1f1c <usart_read_wait+0x8>

00001f84 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1f86:	0080      	lsls	r0, r0, #2
    1f88:	4b62      	ldr	r3, [pc, #392]	; (2114 <STACK_SIZE+0x114>)
    1f8a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1f8c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1f8e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1f90:	2b00      	cmp	r3, #0
    1f92:	d1fc      	bne.n	1f8e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1f94:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1f96:	7da6      	ldrb	r6, [r4, #22]
    1f98:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1f9a:	2330      	movs	r3, #48	; 0x30
    1f9c:	5ceb      	ldrb	r3, [r5, r3]
    1f9e:	2231      	movs	r2, #49	; 0x31
    1fa0:	5caf      	ldrb	r7, [r5, r2]
    1fa2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1fa4:	07f3      	lsls	r3, r6, #31
    1fa6:	d522      	bpl.n	1fee <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1fa8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1faa:	b29b      	uxth	r3, r3
    1fac:	2b00      	cmp	r3, #0
    1fae:	d01c      	beq.n	1fea <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1fb0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1fb2:	7813      	ldrb	r3, [r2, #0]
    1fb4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1fb6:	1c51      	adds	r1, r2, #1
    1fb8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1fba:	7969      	ldrb	r1, [r5, #5]
    1fbc:	2901      	cmp	r1, #1
    1fbe:	d00e      	beq.n	1fde <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1fc0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1fc2:	05db      	lsls	r3, r3, #23
    1fc4:	0ddb      	lsrs	r3, r3, #23
    1fc6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1fc8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1fca:	3b01      	subs	r3, #1
    1fcc:	b29b      	uxth	r3, r3
    1fce:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	d10c      	bne.n	1fee <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1fd4:	3301      	adds	r3, #1
    1fd6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1fd8:	3301      	adds	r3, #1
    1fda:	75a3      	strb	r3, [r4, #22]
    1fdc:	e007      	b.n	1fee <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1fde:	7851      	ldrb	r1, [r2, #1]
    1fe0:	0209      	lsls	r1, r1, #8
    1fe2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1fe4:	3202      	adds	r2, #2
    1fe6:	62aa      	str	r2, [r5, #40]	; 0x28
    1fe8:	e7eb      	b.n	1fc2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1fea:	2301      	movs	r3, #1
    1fec:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1fee:	07b3      	lsls	r3, r6, #30
    1ff0:	d506      	bpl.n	2000 <STACK_SIZE>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1ff2:	2302      	movs	r3, #2
    1ff4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1ff6:	2200      	movs	r2, #0
    1ff8:	3331      	adds	r3, #49	; 0x31
    1ffa:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1ffc:	07fb      	lsls	r3, r7, #31
    1ffe:	d41a      	bmi.n	2036 <STACK_SIZE+0x36>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2000:	0773      	lsls	r3, r6, #29
    2002:	d565      	bpl.n	20d0 <STACK_SIZE+0xd0>

		if (module->remaining_rx_buffer_length) {
    2004:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2006:	b29b      	uxth	r3, r3
    2008:	2b00      	cmp	r3, #0
    200a:	d05f      	beq.n	20cc <STACK_SIZE+0xcc>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    200c:	8b63      	ldrh	r3, [r4, #26]
    200e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2010:	071a      	lsls	r2, r3, #28
    2012:	d414      	bmi.n	203e <STACK_SIZE+0x3e>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2014:	223f      	movs	r2, #63	; 0x3f
    2016:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2018:	2b00      	cmp	r3, #0
    201a:	d034      	beq.n	2086 <STACK_SIZE+0x86>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    201c:	079a      	lsls	r2, r3, #30
    201e:	d511      	bpl.n	2044 <STACK_SIZE+0x44>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2020:	221a      	movs	r2, #26
    2022:	2332      	movs	r3, #50	; 0x32
    2024:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2026:	3b30      	subs	r3, #48	; 0x30
    2028:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    202a:	077b      	lsls	r3, r7, #29
    202c:	d550      	bpl.n	20d0 <STACK_SIZE+0xd0>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    202e:	0028      	movs	r0, r5
    2030:	696b      	ldr	r3, [r5, #20]
    2032:	4798      	blx	r3
    2034:	e04c      	b.n	20d0 <STACK_SIZE+0xd0>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2036:	0028      	movs	r0, r5
    2038:	68eb      	ldr	r3, [r5, #12]
    203a:	4798      	blx	r3
    203c:	e7e0      	b.n	2000 <STACK_SIZE>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    203e:	2237      	movs	r2, #55	; 0x37
    2040:	4013      	ands	r3, r2
    2042:	e7e9      	b.n	2018 <STACK_SIZE+0x18>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2044:	075a      	lsls	r2, r3, #29
    2046:	d505      	bpl.n	2054 <STACK_SIZE+0x54>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2048:	221e      	movs	r2, #30
    204a:	2332      	movs	r3, #50	; 0x32
    204c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    204e:	3b2e      	subs	r3, #46	; 0x2e
    2050:	8363      	strh	r3, [r4, #26]
    2052:	e7ea      	b.n	202a <STACK_SIZE+0x2a>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2054:	07da      	lsls	r2, r3, #31
    2056:	d505      	bpl.n	2064 <STACK_SIZE+0x64>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2058:	2213      	movs	r2, #19
    205a:	2332      	movs	r3, #50	; 0x32
    205c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    205e:	3b31      	subs	r3, #49	; 0x31
    2060:	8363      	strh	r3, [r4, #26]
    2062:	e7e2      	b.n	202a <STACK_SIZE+0x2a>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2064:	06da      	lsls	r2, r3, #27
    2066:	d505      	bpl.n	2074 <STACK_SIZE+0x74>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2068:	2242      	movs	r2, #66	; 0x42
    206a:	2332      	movs	r3, #50	; 0x32
    206c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    206e:	3b22      	subs	r3, #34	; 0x22
    2070:	8363      	strh	r3, [r4, #26]
    2072:	e7da      	b.n	202a <STACK_SIZE+0x2a>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2074:	2220      	movs	r2, #32
    2076:	421a      	tst	r2, r3
    2078:	d0d7      	beq.n	202a <STACK_SIZE+0x2a>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    207a:	3221      	adds	r2, #33	; 0x21
    207c:	2332      	movs	r3, #50	; 0x32
    207e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2080:	3b12      	subs	r3, #18
    2082:	8363      	strh	r3, [r4, #26]
    2084:	e7d1      	b.n	202a <STACK_SIZE+0x2a>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2086:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2088:	05db      	lsls	r3, r3, #23
    208a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    208c:	b2da      	uxtb	r2, r3
    208e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2090:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2092:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2094:	1c51      	adds	r1, r2, #1
    2096:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2098:	7969      	ldrb	r1, [r5, #5]
    209a:	2901      	cmp	r1, #1
    209c:	d010      	beq.n	20c0 <STACK_SIZE+0xc0>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    209e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    20a0:	3b01      	subs	r3, #1
    20a2:	b29b      	uxth	r3, r3
    20a4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    20a6:	2b00      	cmp	r3, #0
    20a8:	d112      	bne.n	20d0 <STACK_SIZE+0xd0>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    20aa:	3304      	adds	r3, #4
    20ac:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    20ae:	2200      	movs	r2, #0
    20b0:	332e      	adds	r3, #46	; 0x2e
    20b2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    20b4:	07bb      	lsls	r3, r7, #30
    20b6:	d50b      	bpl.n	20d0 <STACK_SIZE+0xd0>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    20b8:	0028      	movs	r0, r5
    20ba:	692b      	ldr	r3, [r5, #16]
    20bc:	4798      	blx	r3
    20be:	e007      	b.n	20d0 <STACK_SIZE+0xd0>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    20c0:	0a1b      	lsrs	r3, r3, #8
    20c2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    20c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    20c6:	3301      	adds	r3, #1
    20c8:	626b      	str	r3, [r5, #36]	; 0x24
    20ca:	e7e8      	b.n	209e <STACK_SIZE+0x9e>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    20cc:	2304      	movs	r3, #4
    20ce:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    20d0:	06f3      	lsls	r3, r6, #27
    20d2:	d504      	bpl.n	20de <STACK_SIZE+0xde>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    20d4:	2310      	movs	r3, #16
    20d6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    20d8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    20da:	06fb      	lsls	r3, r7, #27
    20dc:	d40e      	bmi.n	20fc <STACK_SIZE+0xfc>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    20de:	06b3      	lsls	r3, r6, #26
    20e0:	d504      	bpl.n	20ec <STACK_SIZE+0xec>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    20e2:	2320      	movs	r3, #32
    20e4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    20e6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    20e8:	073b      	lsls	r3, r7, #28
    20ea:	d40b      	bmi.n	2104 <STACK_SIZE+0x104>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    20ec:	0733      	lsls	r3, r6, #28
    20ee:	d504      	bpl.n	20fa <STACK_SIZE+0xfa>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    20f0:	2308      	movs	r3, #8
    20f2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    20f4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    20f6:	06bb      	lsls	r3, r7, #26
    20f8:	d408      	bmi.n	210c <STACK_SIZE+0x10c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    20fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    20fc:	0028      	movs	r0, r5
    20fe:	69eb      	ldr	r3, [r5, #28]
    2100:	4798      	blx	r3
    2102:	e7ec      	b.n	20de <STACK_SIZE+0xde>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2104:	0028      	movs	r0, r5
    2106:	69ab      	ldr	r3, [r5, #24]
    2108:	4798      	blx	r3
    210a:	e7ef      	b.n	20ec <STACK_SIZE+0xec>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    210c:	6a2b      	ldr	r3, [r5, #32]
    210e:	0028      	movs	r0, r5
    2110:	4798      	blx	r3
}
    2112:	e7f2      	b.n	20fa <STACK_SIZE+0xfa>
    2114:	2000032c 	.word	0x2000032c

00002118 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2118:	b510      	push	{r4, lr}
	switch (clock_source) {
    211a:	2808      	cmp	r0, #8
    211c:	d803      	bhi.n	2126 <system_clock_source_get_hz+0xe>
    211e:	0080      	lsls	r0, r0, #2
    2120:	4b1e      	ldr	r3, [pc, #120]	; (219c <system_clock_source_get_hz+0x84>)
    2122:	581b      	ldr	r3, [r3, r0]
    2124:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2126:	2000      	movs	r0, #0
    2128:	e036      	b.n	2198 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
    212a:	4b1d      	ldr	r3, [pc, #116]	; (21a0 <system_clock_source_get_hz+0x88>)
    212c:	6918      	ldr	r0, [r3, #16]
    212e:	e033      	b.n	2198 <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2130:	4b1c      	ldr	r3, [pc, #112]	; (21a4 <system_clock_source_get_hz+0x8c>)
    2132:	6a1b      	ldr	r3, [r3, #32]
    2134:	059b      	lsls	r3, r3, #22
    2136:	0f9b      	lsrs	r3, r3, #30
    2138:	481b      	ldr	r0, [pc, #108]	; (21a8 <system_clock_source_get_hz+0x90>)
    213a:	40d8      	lsrs	r0, r3
    213c:	e02c      	b.n	2198 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
    213e:	4b18      	ldr	r3, [pc, #96]	; (21a0 <system_clock_source_get_hz+0x88>)
    2140:	6958      	ldr	r0, [r3, #20]
    2142:	e029      	b.n	2198 <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2144:	4b16      	ldr	r3, [pc, #88]	; (21a0 <system_clock_source_get_hz+0x88>)
    2146:	681b      	ldr	r3, [r3, #0]
			return 0;
    2148:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    214a:	079b      	lsls	r3, r3, #30
    214c:	d524      	bpl.n	2198 <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    214e:	4915      	ldr	r1, [pc, #84]	; (21a4 <system_clock_source_get_hz+0x8c>)
    2150:	2210      	movs	r2, #16
    2152:	68cb      	ldr	r3, [r1, #12]
    2154:	421a      	tst	r2, r3
    2156:	d0fc      	beq.n	2152 <system_clock_source_get_hz+0x3a>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2158:	4b11      	ldr	r3, [pc, #68]	; (21a0 <system_clock_source_get_hz+0x88>)
    215a:	681b      	ldr	r3, [r3, #0]
    215c:	075b      	lsls	r3, r3, #29
    215e:	d401      	bmi.n	2164 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2160:	4812      	ldr	r0, [pc, #72]	; (21ac <system_clock_source_get_hz+0x94>)
    2162:	e019      	b.n	2198 <system_clock_source_get_hz+0x80>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2164:	4b0e      	ldr	r3, [pc, #56]	; (21a0 <system_clock_source_get_hz+0x88>)
    2166:	681b      	ldr	r3, [r3, #0]
    2168:	069b      	lsls	r3, r3, #26
    216a:	d501      	bpl.n	2170 <system_clock_source_get_hz+0x58>
		return 48000000UL;
    216c:	480f      	ldr	r0, [pc, #60]	; (21ac <system_clock_source_get_hz+0x94>)
    216e:	e013      	b.n	2198 <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2170:	2000      	movs	r0, #0
    2172:	4b0f      	ldr	r3, [pc, #60]	; (21b0 <system_clock_source_get_hz+0x98>)
    2174:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2176:	4b0a      	ldr	r3, [pc, #40]	; (21a0 <system_clock_source_get_hz+0x88>)
    2178:	689b      	ldr	r3, [r3, #8]
    217a:	041b      	lsls	r3, r3, #16
    217c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    217e:	4358      	muls	r0, r3
    2180:	e00a      	b.n	2198 <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2182:	2350      	movs	r3, #80	; 0x50
    2184:	4a07      	ldr	r2, [pc, #28]	; (21a4 <system_clock_source_get_hz+0x8c>)
    2186:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2188:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    218a:	075b      	lsls	r3, r3, #29
    218c:	d504      	bpl.n	2198 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
    218e:	4b04      	ldr	r3, [pc, #16]	; (21a0 <system_clock_source_get_hz+0x88>)
    2190:	68d8      	ldr	r0, [r3, #12]
    2192:	e001      	b.n	2198 <system_clock_source_get_hz+0x80>
		return 32768UL;
    2194:	2080      	movs	r0, #128	; 0x80
    2196:	0200      	lsls	r0, r0, #8
	}
}
    2198:	bd10      	pop	{r4, pc}
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	0000719c 	.word	0x0000719c
    21a0:	20000218 	.word	0x20000218
    21a4:	40000800 	.word	0x40000800
    21a8:	007a1200 	.word	0x007a1200
    21ac:	02dc6c00 	.word	0x02dc6c00
    21b0:	00005f71 	.word	0x00005f71

000021b4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    21b4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    21b6:	490c      	ldr	r1, [pc, #48]	; (21e8 <system_clock_source_osc8m_set_config+0x34>)
    21b8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    21ba:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    21bc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    21be:	7840      	ldrb	r0, [r0, #1]
    21c0:	2201      	movs	r2, #1
    21c2:	4010      	ands	r0, r2
    21c4:	0180      	lsls	r0, r0, #6
    21c6:	2640      	movs	r6, #64	; 0x40
    21c8:	43b3      	bics	r3, r6
    21ca:	4303      	orrs	r3, r0
    21cc:	402a      	ands	r2, r5
    21ce:	01d2      	lsls	r2, r2, #7
    21d0:	2080      	movs	r0, #128	; 0x80
    21d2:	4383      	bics	r3, r0
    21d4:	4313      	orrs	r3, r2
    21d6:	2203      	movs	r2, #3
    21d8:	4022      	ands	r2, r4
    21da:	0212      	lsls	r2, r2, #8
    21dc:	4803      	ldr	r0, [pc, #12]	; (21ec <system_clock_source_osc8m_set_config+0x38>)
    21de:	4003      	ands	r3, r0
    21e0:	4313      	orrs	r3, r2
    21e2:	620b      	str	r3, [r1, #32]
}
    21e4:	bd70      	pop	{r4, r5, r6, pc}
    21e6:	46c0      	nop			; (mov r8, r8)
    21e8:	40000800 	.word	0x40000800
    21ec:	fffffcff 	.word	0xfffffcff

000021f0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    21f0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    21f2:	7a03      	ldrb	r3, [r0, #8]
    21f4:	069b      	lsls	r3, r3, #26
    21f6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    21f8:	8942      	ldrh	r2, [r0, #10]
    21fa:	0592      	lsls	r2, r2, #22
    21fc:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    21fe:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2200:	4918      	ldr	r1, [pc, #96]	; (2264 <system_clock_source_dfll_set_config+0x74>)
    2202:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2204:	7983      	ldrb	r3, [r0, #6]
    2206:	79c2      	ldrb	r2, [r0, #7]
    2208:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    220a:	8842      	ldrh	r2, [r0, #2]
    220c:	8884      	ldrh	r4, [r0, #4]
    220e:	4322      	orrs	r2, r4
    2210:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2212:	7842      	ldrb	r2, [r0, #1]
    2214:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2216:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2218:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    221a:	7803      	ldrb	r3, [r0, #0]
    221c:	2b04      	cmp	r3, #4
    221e:	d011      	beq.n	2244 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2220:	2b20      	cmp	r3, #32
    2222:	d10e      	bne.n	2242 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2224:	7b03      	ldrb	r3, [r0, #12]
    2226:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2228:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    222a:	4313      	orrs	r3, r2
    222c:	89c2      	ldrh	r2, [r0, #14]
    222e:	0412      	lsls	r2, r2, #16
    2230:	490d      	ldr	r1, [pc, #52]	; (2268 <system_clock_source_dfll_set_config+0x78>)
    2232:	400a      	ands	r2, r1
    2234:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2236:	4a0b      	ldr	r2, [pc, #44]	; (2264 <system_clock_source_dfll_set_config+0x74>)
    2238:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    223a:	6811      	ldr	r1, [r2, #0]
    223c:	4b0b      	ldr	r3, [pc, #44]	; (226c <system_clock_source_dfll_set_config+0x7c>)
    223e:	430b      	orrs	r3, r1
    2240:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2242:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2244:	7b03      	ldrb	r3, [r0, #12]
    2246:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2248:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    224a:	4313      	orrs	r3, r2
    224c:	89c2      	ldrh	r2, [r0, #14]
    224e:	0412      	lsls	r2, r2, #16
    2250:	4905      	ldr	r1, [pc, #20]	; (2268 <system_clock_source_dfll_set_config+0x78>)
    2252:	400a      	ands	r2, r1
    2254:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2256:	4a03      	ldr	r2, [pc, #12]	; (2264 <system_clock_source_dfll_set_config+0x74>)
    2258:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    225a:	6813      	ldr	r3, [r2, #0]
    225c:	2104      	movs	r1, #4
    225e:	430b      	orrs	r3, r1
    2260:	6013      	str	r3, [r2, #0]
    2262:	e7ee      	b.n	2242 <system_clock_source_dfll_set_config+0x52>
    2264:	20000218 	.word	0x20000218
    2268:	03ff0000 	.word	0x03ff0000
    226c:	00000424 	.word	0x00000424

00002270 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2270:	2808      	cmp	r0, #8
    2272:	d803      	bhi.n	227c <system_clock_source_enable+0xc>
    2274:	0080      	lsls	r0, r0, #2
    2276:	4b25      	ldr	r3, [pc, #148]	; (230c <system_clock_source_enable+0x9c>)
    2278:	581b      	ldr	r3, [r3, r0]
    227a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    227c:	2017      	movs	r0, #23
    227e:	e044      	b.n	230a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2280:	4a23      	ldr	r2, [pc, #140]	; (2310 <system_clock_source_enable+0xa0>)
    2282:	6a13      	ldr	r3, [r2, #32]
    2284:	2102      	movs	r1, #2
    2286:	430b      	orrs	r3, r1
    2288:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    228a:	2000      	movs	r0, #0
    228c:	e03d      	b.n	230a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    228e:	4a20      	ldr	r2, [pc, #128]	; (2310 <system_clock_source_enable+0xa0>)
    2290:	6993      	ldr	r3, [r2, #24]
    2292:	2102      	movs	r1, #2
    2294:	430b      	orrs	r3, r1
    2296:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2298:	2000      	movs	r0, #0
		break;
    229a:	e036      	b.n	230a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    229c:	4a1c      	ldr	r2, [pc, #112]	; (2310 <system_clock_source_enable+0xa0>)
    229e:	8a13      	ldrh	r3, [r2, #16]
    22a0:	2102      	movs	r1, #2
    22a2:	430b      	orrs	r3, r1
    22a4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    22a6:	2000      	movs	r0, #0
		break;
    22a8:	e02f      	b.n	230a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    22aa:	4a19      	ldr	r2, [pc, #100]	; (2310 <system_clock_source_enable+0xa0>)
    22ac:	8a93      	ldrh	r3, [r2, #20]
    22ae:	2102      	movs	r1, #2
    22b0:	430b      	orrs	r3, r1
    22b2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    22b4:	2000      	movs	r0, #0
		break;
    22b6:	e028      	b.n	230a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    22b8:	4916      	ldr	r1, [pc, #88]	; (2314 <system_clock_source_enable+0xa4>)
    22ba:	680b      	ldr	r3, [r1, #0]
    22bc:	2202      	movs	r2, #2
    22be:	4313      	orrs	r3, r2
    22c0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    22c2:	4b13      	ldr	r3, [pc, #76]	; (2310 <system_clock_source_enable+0xa0>)
    22c4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    22c6:	0019      	movs	r1, r3
    22c8:	320e      	adds	r2, #14
    22ca:	68cb      	ldr	r3, [r1, #12]
    22cc:	421a      	tst	r2, r3
    22ce:	d0fc      	beq.n	22ca <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    22d0:	4a10      	ldr	r2, [pc, #64]	; (2314 <system_clock_source_enable+0xa4>)
    22d2:	6891      	ldr	r1, [r2, #8]
    22d4:	4b0e      	ldr	r3, [pc, #56]	; (2310 <system_clock_source_enable+0xa0>)
    22d6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    22d8:	6852      	ldr	r2, [r2, #4]
    22da:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    22dc:	2200      	movs	r2, #0
    22de:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    22e0:	0019      	movs	r1, r3
    22e2:	3210      	adds	r2, #16
    22e4:	68cb      	ldr	r3, [r1, #12]
    22e6:	421a      	tst	r2, r3
    22e8:	d0fc      	beq.n	22e4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    22ea:	4b0a      	ldr	r3, [pc, #40]	; (2314 <system_clock_source_enable+0xa4>)
    22ec:	681b      	ldr	r3, [r3, #0]
    22ee:	b29b      	uxth	r3, r3
    22f0:	4a07      	ldr	r2, [pc, #28]	; (2310 <system_clock_source_enable+0xa0>)
    22f2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    22f4:	2000      	movs	r0, #0
    22f6:	e008      	b.n	230a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    22f8:	4905      	ldr	r1, [pc, #20]	; (2310 <system_clock_source_enable+0xa0>)
    22fa:	2244      	movs	r2, #68	; 0x44
    22fc:	5c8b      	ldrb	r3, [r1, r2]
    22fe:	2002      	movs	r0, #2
    2300:	4303      	orrs	r3, r0
    2302:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2304:	2000      	movs	r0, #0
		break;
    2306:	e000      	b.n	230a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2308:	2000      	movs	r0, #0
}
    230a:	4770      	bx	lr
    230c:	000071c0 	.word	0x000071c0
    2310:	40000800 	.word	0x40000800
    2314:	20000218 	.word	0x20000218

00002318 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2318:	b530      	push	{r4, r5, lr}
    231a:	b08b      	sub	sp, #44	; 0x2c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    231c:	22c2      	movs	r2, #194	; 0xc2
    231e:	00d2      	lsls	r2, r2, #3
    2320:	4b30      	ldr	r3, [pc, #192]	; (23e4 <system_clock_init+0xcc>)
    2322:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2324:	4a30      	ldr	r2, [pc, #192]	; (23e8 <system_clock_init+0xd0>)
    2326:	6853      	ldr	r3, [r2, #4]
    2328:	211e      	movs	r1, #30
    232a:	438b      	bics	r3, r1
    232c:	391a      	subs	r1, #26
    232e:	430b      	orrs	r3, r1
    2330:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2332:	2201      	movs	r2, #1
    2334:	ab01      	add	r3, sp, #4
    2336:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2338:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    233a:	4d2c      	ldr	r5, [pc, #176]	; (23ec <system_clock_init+0xd4>)
    233c:	b2e0      	uxtb	r0, r4
    233e:	a901      	add	r1, sp, #4
    2340:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2342:	3401      	adds	r4, #1
    2344:	2c25      	cmp	r4, #37	; 0x25
    2346:	d1f9      	bne.n	233c <system_clock_init+0x24>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2348:	ab05      	add	r3, sp, #20
    234a:	2200      	movs	r2, #0
    234c:	2100      	movs	r1, #0
    234e:	8059      	strh	r1, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2350:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2352:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2354:	3120      	adds	r1, #32
    2356:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2358:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    235a:	4b25      	ldr	r3, [pc, #148]	; (23f0 <system_clock_init+0xd8>)
    235c:	681b      	ldr	r3, [r3, #0]
    235e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2360:	2b3f      	cmp	r3, #63	; 0x3f
    2362:	d03c      	beq.n	23de <system_clock_init+0xc6>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2364:	a805      	add	r0, sp, #20
    2366:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2368:	2307      	movs	r3, #7
    236a:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    236c:	3303      	adds	r3, #3
    236e:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    2370:	4b20      	ldr	r3, [pc, #128]	; (23f4 <system_clock_init+0xdc>)
    2372:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    2374:	3bff      	subs	r3, #255	; 0xff
    2376:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    2378:	4b1f      	ldr	r3, [pc, #124]	; (23f8 <system_clock_init+0xe0>)
    237a:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    237c:	4b1f      	ldr	r3, [pc, #124]	; (23fc <system_clock_init+0xe4>)
    237e:	4798      	blx	r3
	config->run_in_standby  = false;
    2380:	a804      	add	r0, sp, #16
    2382:	2300      	movs	r3, #0
    2384:	7043      	strb	r3, [r0, #1]
	config->on_demand       = true;
    2386:	2201      	movs	r2, #1
    2388:	7082      	strb	r2, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    238a:	7003      	strb	r3, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    238c:	4b1c      	ldr	r3, [pc, #112]	; (2400 <system_clock_init+0xe8>)
    238e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2390:	2006      	movs	r0, #6
    2392:	4c1c      	ldr	r4, [pc, #112]	; (2404 <system_clock_init+0xec>)
    2394:	47a0      	blx	r4


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2396:	4b1c      	ldr	r3, [pc, #112]	; (2408 <system_clock_init+0xf0>)
    2398:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    239a:	2007      	movs	r0, #7
    239c:	47a0      	blx	r4
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    239e:	4911      	ldr	r1, [pc, #68]	; (23e4 <system_clock_init+0xcc>)
    23a0:	2210      	movs	r2, #16
    23a2:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    23a4:	421a      	tst	r2, r3
    23a6:	d0fc      	beq.n	23a2 <system_clock_init+0x8a>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    23a8:	4a0e      	ldr	r2, [pc, #56]	; (23e4 <system_clock_init+0xcc>)
    23aa:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    23ac:	2180      	movs	r1, #128	; 0x80
    23ae:	430b      	orrs	r3, r1
    23b0:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    23b2:	4a16      	ldr	r2, [pc, #88]	; (240c <system_clock_init+0xf4>)
    23b4:	2300      	movs	r3, #0
    23b6:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    23b8:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    23ba:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    23bc:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    23be:	a901      	add	r1, sp, #4
    23c0:	2201      	movs	r2, #1
    23c2:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    23c4:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    23c6:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    23c8:	3307      	adds	r3, #7
    23ca:	700b      	strb	r3, [r1, #0]
    23cc:	720a      	strb	r2, [r1, #8]
    23ce:	2000      	movs	r0, #0
    23d0:	4b0f      	ldr	r3, [pc, #60]	; (2410 <system_clock_init+0xf8>)
    23d2:	4798      	blx	r3
    23d4:	2000      	movs	r0, #0
    23d6:	4b0f      	ldr	r3, [pc, #60]	; (2414 <system_clock_init+0xfc>)
    23d8:	4798      	blx	r3
#endif
}
    23da:	b00b      	add	sp, #44	; 0x2c
    23dc:	bd30      	pop	{r4, r5, pc}
		coarse = 0x1f;
    23de:	3b20      	subs	r3, #32
    23e0:	e7c0      	b.n	2364 <system_clock_init+0x4c>
    23e2:	46c0      	nop			; (mov r8, r8)
    23e4:	40000800 	.word	0x40000800
    23e8:	41004000 	.word	0x41004000
    23ec:	00005f55 	.word	0x00005f55
    23f0:	00806024 	.word	0x00806024
    23f4:	000001ff 	.word	0x000001ff
    23f8:	ffffbb80 	.word	0xffffbb80
    23fc:	000021f1 	.word	0x000021f1
    2400:	000021b5 	.word	0x000021b5
    2404:	00002271 	.word	0x00002271
    2408:	00005d1d 	.word	0x00005d1d
    240c:	40000400 	.word	0x40000400
    2410:	00005d41 	.word	0x00005d41
    2414:	00005df9 	.word	0x00005df9

00002418 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    2418:	b510      	push	{r4, lr}
    241a:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    241c:	ab03      	add	r3, sp, #12
    241e:	2200      	movs	r2, #0
    2420:	701a      	strb	r2, [r3, #0]
    2422:	3203      	adds	r2, #3
    2424:	705a      	strb	r2, [r3, #1]
    2426:	3a01      	subs	r2, #1
    2428:	709a      	strb	r2, [r3, #2]
    242a:	3a01      	subs	r2, #1
    242c:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    242e:	4b27      	ldr	r3, [pc, #156]	; (24cc <udd_sleep_mode+0xb4>)
    2430:	781b      	ldrb	r3, [r3, #0]
    2432:	4283      	cmp	r3, r0
    2434:	d007      	beq.n	2446 <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    2436:	2800      	cmp	r0, #0
    2438:	d107      	bne.n	244a <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    243a:	4b24      	ldr	r3, [pc, #144]	; (24cc <udd_sleep_mode+0xb4>)
    243c:	781b      	ldrb	r3, [r3, #0]
    243e:	2b00      	cmp	r3, #0
    2440:	d123      	bne.n	248a <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    2442:	4b22      	ldr	r3, [pc, #136]	; (24cc <udd_sleep_mode+0xb4>)
    2444:	7018      	strb	r0, [r3, #0]
}
    2446:	b004      	add	sp, #16
    2448:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    244a:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    244c:	5c1b      	ldrb	r3, [r3, r0]
    244e:	4a20      	ldr	r2, [pc, #128]	; (24d0 <udd_sleep_mode+0xb8>)
    2450:	5cd2      	ldrb	r2, [r2, r3]
    2452:	2aff      	cmp	r2, #255	; 0xff
    2454:	d100      	bne.n	2458 <udd_sleep_mode+0x40>
    2456:	e7fe      	b.n	2456 <udd_sleep_mode+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2458:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    245c:	4251      	negs	r1, r2
    245e:	414a      	adcs	r2, r1
    2460:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2462:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2464:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2468:	2100      	movs	r1, #0
    246a:	4a1a      	ldr	r2, [pc, #104]	; (24d4 <udd_sleep_mode+0xbc>)
    246c:	7011      	strb	r1, [r2, #0]
	return flags;
    246e:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2470:	4917      	ldr	r1, [pc, #92]	; (24d0 <udd_sleep_mode+0xb8>)
    2472:	5cca      	ldrb	r2, [r1, r3]
    2474:	3201      	adds	r2, #1
    2476:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2478:	2c00      	cmp	r4, #0
    247a:	d0de      	beq.n	243a <udd_sleep_mode+0x22>
		cpu_irq_enable();
    247c:	2201      	movs	r2, #1
    247e:	4b15      	ldr	r3, [pc, #84]	; (24d4 <udd_sleep_mode+0xbc>)
    2480:	701a      	strb	r2, [r3, #0]
    2482:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2486:	b662      	cpsie	i
    2488:	e7d7      	b.n	243a <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    248a:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    248c:	5cd3      	ldrb	r3, [r2, r3]
    248e:	4a10      	ldr	r2, [pc, #64]	; (24d0 <udd_sleep_mode+0xb8>)
    2490:	5cd2      	ldrb	r2, [r2, r3]
    2492:	2a00      	cmp	r2, #0
    2494:	d100      	bne.n	2498 <udd_sleep_mode+0x80>
    2496:	e7fe      	b.n	2496 <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2498:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    249c:	4251      	negs	r1, r2
    249e:	414a      	adcs	r2, r1
    24a0:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    24a2:	b672      	cpsid	i
    24a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    24a8:	2100      	movs	r1, #0
    24aa:	4a0a      	ldr	r2, [pc, #40]	; (24d4 <udd_sleep_mode+0xbc>)
    24ac:	7011      	strb	r1, [r2, #0]
	return flags;
    24ae:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    24b0:	4907      	ldr	r1, [pc, #28]	; (24d0 <udd_sleep_mode+0xb8>)
    24b2:	5cca      	ldrb	r2, [r1, r3]
    24b4:	3a01      	subs	r2, #1
    24b6:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    24b8:	2c00      	cmp	r4, #0
    24ba:	d0c2      	beq.n	2442 <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    24bc:	2201      	movs	r2, #1
    24be:	4b05      	ldr	r3, [pc, #20]	; (24d4 <udd_sleep_mode+0xbc>)
    24c0:	701a      	strb	r2, [r3, #0]
    24c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    24c6:	b662      	cpsie	i
    24c8:	e7bb      	b.n	2442 <udd_sleep_mode+0x2a>
    24ca:	46c0      	nop			; (mov r8, r8)
    24cc:	20000288 	.word	0x20000288
    24d0:	20000ad8 	.word	0x20000ad8
    24d4:	200000f9 	.word	0x200000f9

000024d8 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    24d8:	0643      	lsls	r3, r0, #25
    24da:	d00b      	beq.n	24f4 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    24dc:	230f      	movs	r3, #15
    24de:	4003      	ands	r3, r0
    24e0:	005b      	lsls	r3, r3, #1
    24e2:	09c0      	lsrs	r0, r0, #7
    24e4:	1818      	adds	r0, r3, r0
    24e6:	3802      	subs	r0, #2
    24e8:	0083      	lsls	r3, r0, #2
    24ea:	1818      	adds	r0, r3, r0
    24ec:	0080      	lsls	r0, r0, #2
    24ee:	4b02      	ldr	r3, [pc, #8]	; (24f8 <udd_ep_get_job+0x20>)
    24f0:	1818      	adds	r0, r3, r0
	}
}
    24f2:	4770      	bx	lr
		return NULL;
    24f4:	2000      	movs	r0, #0
    24f6:	e7fc      	b.n	24f2 <udd_ep_get_job+0x1a>
    24f8:	20000238 	.word	0x20000238

000024fc <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    24fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    24fe:	46d6      	mov	lr, sl
    2500:	464f      	mov	r7, r9
    2502:	4646      	mov	r6, r8
    2504:	b5c0      	push	{r6, r7, lr}
    2506:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    2508:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    250a:	b26b      	sxtb	r3, r5
    250c:	2b00      	cmp	r3, #0
    250e:	db26      	blt.n	255e <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    2510:	0028      	movs	r0, r5
    2512:	4b5e      	ldr	r3, [pc, #376]	; (268c <udd_ep_transfer_process+0x190>)
    2514:	4798      	blx	r3
    2516:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2518:	270f      	movs	r7, #15
    251a:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    251c:	8a03      	ldrh	r3, [r0, #16]
    251e:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    2520:	464b      	mov	r3, r9
    2522:	881b      	ldrh	r3, [r3, #0]
    2524:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    2526:	7c83      	ldrb	r3, [r0, #18]
    2528:	075b      	lsls	r3, r3, #29
    252a:	d46a      	bmi.n	2602 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    252c:	68e3      	ldr	r3, [r4, #12]
    252e:	4453      	add	r3, sl
    2530:	001e      	movs	r6, r3
    2532:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    2534:	68a3      	ldr	r3, [r4, #8]
    2536:	429e      	cmp	r6, r3
    2538:	d800      	bhi.n	253c <udd_ep_transfer_process+0x40>
    253a:	e074      	b.n	2626 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    253c:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    253e:	7ca3      	ldrb	r3, [r4, #18]
    2540:	2201      	movs	r2, #1
    2542:	4393      	bics	r3, r2
    2544:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    2546:	6823      	ldr	r3, [r4, #0]
    2548:	2b00      	cmp	r3, #0
    254a:	d003      	beq.n	2554 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    254c:	68e1      	ldr	r1, [r4, #12]
    254e:	002a      	movs	r2, r5
    2550:	2000      	movs	r0, #0
    2552:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    2554:	bc1c      	pop	{r2, r3, r4}
    2556:	4690      	mov	r8, r2
    2558:	4699      	mov	r9, r3
    255a:	46a2      	mov	sl, r4
    255c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    255e:	0028      	movs	r0, r5
    2560:	4b4a      	ldr	r3, [pc, #296]	; (268c <udd_ep_transfer_process+0x190>)
    2562:	4798      	blx	r3
    2564:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2566:	270f      	movs	r7, #15
    2568:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    256a:	8a03      	ldrh	r3, [r0, #16]
    256c:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    256e:	464b      	mov	r3, r9
    2570:	885e      	ldrh	r6, [r3, #2]
    2572:	68c3      	ldr	r3, [r0, #12]
    2574:	469c      	mov	ip, r3
    2576:	4466      	add	r6, ip
    2578:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    257a:	6881      	ldr	r1, [r0, #8]
    257c:	428e      	cmp	r6, r1
    257e:	d025      	beq.n	25cc <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2580:	1b8d      	subs	r5, r1, r6
    2582:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2584:	4b42      	ldr	r3, [pc, #264]	; (2690 <udd_ep_transfer_process+0x194>)
    2586:	429d      	cmp	r5, r3
    2588:	d906      	bls.n	2598 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    258a:	001d      	movs	r5, r3
    258c:	4641      	mov	r1, r8
    258e:	0018      	movs	r0, r3
    2590:	4b40      	ldr	r3, [pc, #256]	; (2694 <udd_ep_transfer_process+0x198>)
    2592:	4798      	blx	r3
    2594:	1a6d      	subs	r5, r5, r1
    2596:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    2598:	7ca2      	ldrb	r2, [r4, #18]
    259a:	2300      	movs	r3, #0
    259c:	0792      	lsls	r2, r2, #30
    259e:	d507      	bpl.n	25b0 <udd_ep_transfer_process+0xb4>
    25a0:	4641      	mov	r1, r8
    25a2:	0028      	movs	r0, r5
    25a4:	4b3c      	ldr	r3, [pc, #240]	; (2698 <udd_ep_transfer_process+0x19c>)
    25a6:	4798      	blx	r3
    25a8:	b289      	uxth	r1, r1
    25aa:	424b      	negs	r3, r1
    25ac:	414b      	adcs	r3, r1
    25ae:	b2db      	uxtb	r3, r3
    25b0:	005b      	lsls	r3, r3, #1
    25b2:	7ca2      	ldrb	r2, [r4, #18]
    25b4:	2102      	movs	r1, #2
    25b6:	438a      	bics	r2, r1
    25b8:	4313      	orrs	r3, r2
    25ba:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    25bc:	6862      	ldr	r2, [r4, #4]
    25be:	1992      	adds	r2, r2, r6
    25c0:	002b      	movs	r3, r5
    25c2:	0039      	movs	r1, r7
    25c4:	4835      	ldr	r0, [pc, #212]	; (269c <udd_ep_transfer_process+0x1a0>)
    25c6:	4c36      	ldr	r4, [pc, #216]	; (26a0 <udd_ep_transfer_process+0x1a4>)
    25c8:	47a0      	blx	r4
    25ca:	e7c3      	b.n	2554 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    25cc:	7c83      	ldrb	r3, [r0, #18]
    25ce:	079b      	lsls	r3, r3, #30
    25d0:	d40b      	bmi.n	25ea <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    25d2:	7c83      	ldrb	r3, [r0, #18]
    25d4:	2201      	movs	r2, #1
    25d6:	4393      	bics	r3, r2
    25d8:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    25da:	6803      	ldr	r3, [r0, #0]
    25dc:	2b00      	cmp	r3, #0
    25de:	d0b9      	beq.n	2554 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    25e0:	002a      	movs	r2, r5
    25e2:	0031      	movs	r1, r6
    25e4:	2000      	movs	r0, #0
    25e6:	4798      	blx	r3
    25e8:	e7b4      	b.n	2554 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    25ea:	7c83      	ldrb	r3, [r0, #18]
    25ec:	2202      	movs	r2, #2
    25ee:	4393      	bics	r3, r2
    25f0:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    25f2:	6842      	ldr	r2, [r0, #4]
    25f4:	1992      	adds	r2, r2, r6
    25f6:	2300      	movs	r3, #0
    25f8:	0039      	movs	r1, r7
    25fa:	4828      	ldr	r0, [pc, #160]	; (269c <udd_ep_transfer_process+0x1a0>)
    25fc:	4c28      	ldr	r4, [pc, #160]	; (26a0 <udd_ep_transfer_process+0x1a4>)
    25fe:	47a0      	blx	r4
    2600:	e7a8      	b.n	2554 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    2602:	6843      	ldr	r3, [r0, #4]
    2604:	68c2      	ldr	r2, [r0, #12]
    2606:	4694      	mov	ip, r2
    2608:	4463      	add	r3, ip
    260a:	001e      	movs	r6, r3
    260c:	4641      	mov	r1, r8
    260e:	6880      	ldr	r0, [r0, #8]
    2610:	4b21      	ldr	r3, [pc, #132]	; (2698 <udd_ep_transfer_process+0x19c>)
    2612:	4798      	blx	r3
    2614:	000a      	movs	r2, r1
    2616:	1e7b      	subs	r3, r7, #1
    2618:	019b      	lsls	r3, r3, #6
    261a:	4922      	ldr	r1, [pc, #136]	; (26a4 <udd_ep_transfer_process+0x1a8>)
    261c:	1859      	adds	r1, r3, r1
    261e:	0030      	movs	r0, r6
    2620:	4b21      	ldr	r3, [pc, #132]	; (26a8 <udd_ep_transfer_process+0x1ac>)
    2622:	4798      	blx	r3
    2624:	e782      	b.n	252c <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    2626:	464a      	mov	r2, r9
    2628:	8892      	ldrh	r2, [r2, #4]
    262a:	4552      	cmp	r2, sl
    262c:	d000      	beq.n	2630 <udd_ep_transfer_process+0x134>
    262e:	e786      	b.n	253e <udd_ep_transfer_process+0x42>
    2630:	429e      	cmp	r6, r3
    2632:	d100      	bne.n	2636 <udd_ep_transfer_process+0x13a>
    2634:	e783      	b.n	253e <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2636:	1b9b      	subs	r3, r3, r6
    2638:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    263a:	4b15      	ldr	r3, [pc, #84]	; (2690 <udd_ep_transfer_process+0x194>)
    263c:	429d      	cmp	r5, r3
    263e:	d916      	bls.n	266e <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    2640:	001d      	movs	r5, r3
    2642:	4641      	mov	r1, r8
    2644:	0018      	movs	r0, r3
    2646:	4b13      	ldr	r3, [pc, #76]	; (2694 <udd_ep_transfer_process+0x198>)
    2648:	4798      	blx	r3
    264a:	1a6b      	subs	r3, r5, r1
    264c:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    264e:	4598      	cmp	r8, r3
    2650:	d914      	bls.n	267c <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    2652:	7ca3      	ldrb	r3, [r4, #18]
    2654:	2204      	movs	r2, #4
    2656:	4313      	orrs	r3, r2
    2658:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    265a:	1e7a      	subs	r2, r7, #1
    265c:	0192      	lsls	r2, r2, #6
    265e:	4b11      	ldr	r3, [pc, #68]	; (26a4 <udd_ep_transfer_process+0x1a8>)
    2660:	18d2      	adds	r2, r2, r3
    2662:	4643      	mov	r3, r8
    2664:	0039      	movs	r1, r7
    2666:	480d      	ldr	r0, [pc, #52]	; (269c <udd_ep_transfer_process+0x1a0>)
    2668:	4c10      	ldr	r4, [pc, #64]	; (26ac <udd_ep_transfer_process+0x1b0>)
    266a:	47a0      	blx	r4
    266c:	e772      	b.n	2554 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    266e:	4641      	mov	r1, r8
    2670:	0028      	movs	r0, r5
    2672:	4b09      	ldr	r3, [pc, #36]	; (2698 <udd_ep_transfer_process+0x19c>)
    2674:	4798      	blx	r3
    2676:	1a6b      	subs	r3, r5, r1
    2678:	b29b      	uxth	r3, r3
    267a:	e7e8      	b.n	264e <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    267c:	6862      	ldr	r2, [r4, #4]
    267e:	1992      	adds	r2, r2, r6
    2680:	0039      	movs	r1, r7
    2682:	4806      	ldr	r0, [pc, #24]	; (269c <udd_ep_transfer_process+0x1a0>)
    2684:	4c09      	ldr	r4, [pc, #36]	; (26ac <udd_ep_transfer_process+0x1b0>)
    2686:	47a0      	blx	r4
    2688:	e764      	b.n	2554 <udd_ep_transfer_process+0x58>
    268a:	46c0      	nop			; (mov r8, r8)
    268c:	000024d9 	.word	0x000024d9
    2690:	00001fff 	.word	0x00001fff
    2694:	000064ad 	.word	0x000064ad
    2698:	000062d9 	.word	0x000062d9
    269c:	200003c4 	.word	0x200003c4
    26a0:	00003d7d 	.word	0x00003d7d
    26a4:	20000344 	.word	0x20000344
    26a8:	000067a9 	.word	0x000067a9
    26ac:	00003dd1 	.word	0x00003dd1

000026b0 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    26b0:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    26b2:	2205      	movs	r2, #5
    26b4:	4b05      	ldr	r3, [pc, #20]	; (26cc <udd_ctrl_stall_data+0x1c>)
    26b6:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    26b8:	4c05      	ldr	r4, [pc, #20]	; (26d0 <udd_ctrl_stall_data+0x20>)
    26ba:	2180      	movs	r1, #128	; 0x80
    26bc:	0020      	movs	r0, r4
    26be:	4b05      	ldr	r3, [pc, #20]	; (26d4 <udd_ctrl_stall_data+0x24>)
    26c0:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    26c2:	2100      	movs	r1, #0
    26c4:	0020      	movs	r0, r4
    26c6:	4b04      	ldr	r3, [pc, #16]	; (26d8 <udd_ctrl_stall_data+0x28>)
    26c8:	4798      	blx	r3
}
    26ca:	bd10      	pop	{r4, pc}
    26cc:	20000236 	.word	0x20000236
    26d0:	200003c4 	.word	0x200003c4
    26d4:	00003cd1 	.word	0x00003cd1
    26d8:	00003cf7 	.word	0x00003cf7

000026dc <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    26dc:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    26de:	4c08      	ldr	r4, [pc, #32]	; (2700 <_usb_device_lpm_suspend+0x24>)
    26e0:	2106      	movs	r1, #6
    26e2:	0020      	movs	r0, r4
    26e4:	4d07      	ldr	r5, [pc, #28]	; (2704 <_usb_device_lpm_suspend+0x28>)
    26e6:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    26e8:	2104      	movs	r1, #4
    26ea:	0020      	movs	r0, r4
    26ec:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    26ee:	2102      	movs	r1, #2
    26f0:	0020      	movs	r0, r4
    26f2:	4b05      	ldr	r3, [pc, #20]	; (2708 <_usb_device_lpm_suspend+0x2c>)
    26f4:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    26f6:	2002      	movs	r0, #2
    26f8:	4b04      	ldr	r3, [pc, #16]	; (270c <_usb_device_lpm_suspend+0x30>)
    26fa:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    26fc:	bd70      	pop	{r4, r5, r6, pc}
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	200003c4 	.word	0x200003c4
    2704:	000037e5 	.word	0x000037e5
    2708:	000037c5 	.word	0x000037c5
    270c:	00002419 	.word	0x00002419

00002710 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    2710:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2712:	4b13      	ldr	r3, [pc, #76]	; (2760 <_usb_on_wakeup+0x50>)
    2714:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2716:	069b      	lsls	r3, r3, #26
    2718:	d41c      	bmi.n	2754 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    271a:	4911      	ldr	r1, [pc, #68]	; (2760 <_usb_on_wakeup+0x50>)
    271c:	22d0      	movs	r2, #208	; 0xd0
    271e:	68cb      	ldr	r3, [r1, #12]
    2720:	4013      	ands	r3, r2
    2722:	2bd0      	cmp	r3, #208	; 0xd0
    2724:	d1fb      	bne.n	271e <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2726:	4c0f      	ldr	r4, [pc, #60]	; (2764 <_usb_on_wakeup+0x54>)
    2728:	2102      	movs	r1, #2
    272a:	0020      	movs	r0, r4
    272c:	4b0e      	ldr	r3, [pc, #56]	; (2768 <_usb_on_wakeup+0x58>)
    272e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2730:	2104      	movs	r1, #4
    2732:	0020      	movs	r0, r4
    2734:	4d0d      	ldr	r5, [pc, #52]	; (276c <_usb_on_wakeup+0x5c>)
    2736:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    2738:	4a0d      	ldr	r2, [pc, #52]	; (2770 <_usb_on_wakeup+0x60>)
    273a:	2106      	movs	r1, #6
    273c:	0020      	movs	r0, r4
    273e:	4b0d      	ldr	r3, [pc, #52]	; (2774 <_usb_on_wakeup+0x64>)
    2740:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2742:	2106      	movs	r1, #6
    2744:	0020      	movs	r0, r4
    2746:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    2748:	2003      	movs	r0, #3
    274a:	4b0b      	ldr	r3, [pc, #44]	; (2778 <_usb_on_wakeup+0x68>)
    274c:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    274e:	4b0b      	ldr	r3, [pc, #44]	; (277c <_usb_on_wakeup+0x6c>)
    2750:	4798      	blx	r3
#endif
}
    2752:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    2754:	4902      	ldr	r1, [pc, #8]	; (2760 <_usb_on_wakeup+0x50>)
    2756:	2210      	movs	r2, #16
    2758:	68cb      	ldr	r3, [r1, #12]
    275a:	421a      	tst	r2, r3
    275c:	d0fc      	beq.n	2758 <_usb_on_wakeup+0x48>
    275e:	e7e2      	b.n	2726 <_usb_on_wakeup+0x16>
    2760:	40000800 	.word	0x40000800
    2764:	200003c4 	.word	0x200003c4
    2768:	000037e5 	.word	0x000037e5
    276c:	000037c5 	.word	0x000037c5
    2770:	000026dd 	.word	0x000026dd
    2774:	000037a1 	.word	0x000037a1
    2778:	00002419 	.word	0x00002419
    277c:	00003455 	.word	0x00003455

00002780 <_usb_on_bus_reset>:
{
    2780:	b530      	push	{r4, r5, lr}
    2782:	b083      	sub	sp, #12
    2784:	0004      	movs	r4, r0
	udc_reset();
    2786:	4b1e      	ldr	r3, [pc, #120]	; (2800 <_usb_on_bus_reset+0x80>)
    2788:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    278a:	2380      	movs	r3, #128	; 0x80
    278c:	6822      	ldr	r2, [r4, #0]
    278e:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    2790:	ad01      	add	r5, sp, #4
    2792:	0028      	movs	r0, r5
    2794:	4b1b      	ldr	r3, [pc, #108]	; (2804 <_usb_on_bus_reset+0x84>)
    2796:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    2798:	2303      	movs	r3, #3
    279a:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    279c:	0029      	movs	r1, r5
    279e:	0020      	movs	r0, r4
    27a0:	4b19      	ldr	r3, [pc, #100]	; (2808 <_usb_on_bus_reset+0x88>)
    27a2:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    27a4:	4919      	ldr	r1, [pc, #100]	; (280c <_usb_on_bus_reset+0x8c>)
    27a6:	0020      	movs	r0, r4
    27a8:	4b19      	ldr	r3, [pc, #100]	; (2810 <_usb_on_bus_reset+0x90>)
    27aa:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    27ac:	4b19      	ldr	r3, [pc, #100]	; (2814 <_usb_on_bus_reset+0x94>)
    27ae:	2202      	movs	r2, #2
    27b0:	2100      	movs	r1, #0
    27b2:	0020      	movs	r0, r4
    27b4:	4d18      	ldr	r5, [pc, #96]	; (2818 <_usb_on_bus_reset+0x98>)
    27b6:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    27b8:	4b18      	ldr	r3, [pc, #96]	; (281c <_usb_on_bus_reset+0x9c>)
    27ba:	2200      	movs	r2, #0
    27bc:	2100      	movs	r1, #0
    27be:	0020      	movs	r0, r4
    27c0:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    27c2:	4b17      	ldr	r3, [pc, #92]	; (2820 <_usb_on_bus_reset+0xa0>)
    27c4:	2201      	movs	r2, #1
    27c6:	2100      	movs	r1, #0
    27c8:	0020      	movs	r0, r4
    27ca:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    27cc:	2202      	movs	r2, #2
    27ce:	2100      	movs	r1, #0
    27d0:	0020      	movs	r0, r4
    27d2:	4d14      	ldr	r5, [pc, #80]	; (2824 <_usb_on_bus_reset+0xa4>)
    27d4:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    27d6:	2200      	movs	r2, #0
    27d8:	2100      	movs	r1, #0
    27da:	0020      	movs	r0, r4
    27dc:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    27de:	2201      	movs	r2, #1
    27e0:	2100      	movs	r1, #0
    27e2:	0020      	movs	r0, r4
    27e4:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    27e6:	6821      	ldr	r1, [r4, #0]
    27e8:	890b      	ldrh	r3, [r1, #8]
    27ea:	4a0f      	ldr	r2, [pc, #60]	; (2828 <_usb_on_bus_reset+0xa8>)
    27ec:	401a      	ands	r2, r3
    27ee:	2380      	movs	r3, #128	; 0x80
    27f0:	00db      	lsls	r3, r3, #3
    27f2:	4313      	orrs	r3, r2
    27f4:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    27f6:	2200      	movs	r2, #0
    27f8:	4b0c      	ldr	r3, [pc, #48]	; (282c <_usb_on_bus_reset+0xac>)
    27fa:	701a      	strb	r2, [r3, #0]
}
    27fc:	b003      	add	sp, #12
    27fe:	bd30      	pop	{r4, r5, pc}
    2800:	000014e1 	.word	0x000014e1
    2804:	000039f1 	.word	0x000039f1
    2808:	00003a01 	.word	0x00003a01
    280c:	20000544 	.word	0x20000544
    2810:	00003e21 	.word	0x00003e21
    2814:	00002969 	.word	0x00002969
    2818:	00003801 	.word	0x00003801
    281c:	00002c85 	.word	0x00002c85
    2820:	0000286d 	.word	0x0000286d
    2824:	00003851 	.word	0x00003851
    2828:	fffff3ff 	.word	0xfffff3ff
    282c:	20000236 	.word	0x20000236

00002830 <udd_ctrl_send_zlp_in>:
{
    2830:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    2832:	2203      	movs	r2, #3
    2834:	4b07      	ldr	r3, [pc, #28]	; (2854 <udd_ctrl_send_zlp_in+0x24>)
    2836:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2838:	4c07      	ldr	r4, [pc, #28]	; (2858 <udd_ctrl_send_zlp_in+0x28>)
    283a:	4908      	ldr	r1, [pc, #32]	; (285c <udd_ctrl_send_zlp_in+0x2c>)
    283c:	0020      	movs	r0, r4
    283e:	4b08      	ldr	r3, [pc, #32]	; (2860 <udd_ctrl_send_zlp_in+0x30>)
    2840:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    2842:	4b08      	ldr	r3, [pc, #32]	; (2864 <udd_ctrl_send_zlp_in+0x34>)
    2844:	689a      	ldr	r2, [r3, #8]
    2846:	2300      	movs	r3, #0
    2848:	2100      	movs	r1, #0
    284a:	0020      	movs	r0, r4
    284c:	4c06      	ldr	r4, [pc, #24]	; (2868 <udd_ctrl_send_zlp_in+0x38>)
    284e:	47a0      	blx	r4
}
    2850:	bd10      	pop	{r4, pc}
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	20000236 	.word	0x20000236
    2858:	200003c4 	.word	0x200003c4
    285c:	20000544 	.word	0x20000544
    2860:	00003e21 	.word	0x00003e21
    2864:	2000052c 	.word	0x2000052c
    2868:	00003d7d 	.word	0x00003d7d

0000286c <_usb_ep0_on_tansfer_fail>:
{
    286c:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    286e:	7989      	ldrb	r1, [r1, #6]
    2870:	b24b      	sxtb	r3, r1
    2872:	2b00      	cmp	r3, #0
    2874:	db06      	blt.n	2884 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2876:	4b0e      	ldr	r3, [pc, #56]	; (28b0 <_usb_ep0_on_tansfer_fail+0x44>)
    2878:	781b      	ldrb	r3, [r3, #0]
    287a:	2b02      	cmp	r3, #2
    287c:	d00f      	beq.n	289e <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    287e:	2b03      	cmp	r3, #3
    2880:	d011      	beq.n	28a6 <_usb_ep0_on_tansfer_fail+0x3a>
}
    2882:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2884:	4b0a      	ldr	r3, [pc, #40]	; (28b0 <_usb_ep0_on_tansfer_fail+0x44>)
    2886:	781b      	ldrb	r3, [r3, #0]
    2888:	2b01      	cmp	r3, #1
    288a:	d005      	beq.n	2898 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    288c:	2b04      	cmp	r3, #4
    288e:	d1f8      	bne.n	2882 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2890:	4808      	ldr	r0, [pc, #32]	; (28b4 <_usb_ep0_on_tansfer_fail+0x48>)
    2892:	4b09      	ldr	r3, [pc, #36]	; (28b8 <_usb_ep0_on_tansfer_fail+0x4c>)
    2894:	4798      	blx	r3
    2896:	e7f4      	b.n	2882 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    2898:	4b08      	ldr	r3, [pc, #32]	; (28bc <_usb_ep0_on_tansfer_fail+0x50>)
    289a:	4798      	blx	r3
    289c:	e7f1      	b.n	2882 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    289e:	2204      	movs	r2, #4
    28a0:	4b03      	ldr	r3, [pc, #12]	; (28b0 <_usb_ep0_on_tansfer_fail+0x44>)
    28a2:	701a      	strb	r2, [r3, #0]
    28a4:	e7ed      	b.n	2882 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    28a6:	4803      	ldr	r0, [pc, #12]	; (28b4 <_usb_ep0_on_tansfer_fail+0x48>)
    28a8:	4b03      	ldr	r3, [pc, #12]	; (28b8 <_usb_ep0_on_tansfer_fail+0x4c>)
    28aa:	4798      	blx	r3
}
    28ac:	e7e9      	b.n	2882 <_usb_ep0_on_tansfer_fail+0x16>
    28ae:	46c0      	nop			; (mov r8, r8)
    28b0:	20000236 	.word	0x20000236
    28b4:	200003c4 	.word	0x200003c4
    28b8:	00003cd1 	.word	0x00003cd1
    28bc:	00002831 	.word	0x00002831

000028c0 <udd_ctrl_in_sent>:
{
    28c0:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    28c2:	4b20      	ldr	r3, [pc, #128]	; (2944 <udd_ctrl_in_sent+0x84>)
    28c4:	881b      	ldrh	r3, [r3, #0]
    28c6:	4a20      	ldr	r2, [pc, #128]	; (2948 <udd_ctrl_in_sent+0x88>)
    28c8:	8994      	ldrh	r4, [r2, #12]
    28ca:	1ae4      	subs	r4, r4, r3
    28cc:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    28ce:	2c00      	cmp	r4, #0
    28d0:	d118      	bne.n	2904 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    28d2:	4a1e      	ldr	r2, [pc, #120]	; (294c <udd_ctrl_in_sent+0x8c>)
    28d4:	8811      	ldrh	r1, [r2, #0]
    28d6:	185b      	adds	r3, r3, r1
    28d8:	b29b      	uxth	r3, r3
    28da:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    28dc:	4a1a      	ldr	r2, [pc, #104]	; (2948 <udd_ctrl_in_sent+0x88>)
    28de:	88d2      	ldrh	r2, [r2, #6]
    28e0:	429a      	cmp	r2, r3
    28e2:	d023      	beq.n	292c <udd_ctrl_in_sent+0x6c>
    28e4:	4b1a      	ldr	r3, [pc, #104]	; (2950 <udd_ctrl_in_sent+0x90>)
    28e6:	781b      	ldrb	r3, [r3, #0]
    28e8:	2b00      	cmp	r3, #0
    28ea:	d11f      	bne.n	292c <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    28ec:	4b16      	ldr	r3, [pc, #88]	; (2948 <udd_ctrl_in_sent+0x88>)
    28ee:	695b      	ldr	r3, [r3, #20]
    28f0:	2b00      	cmp	r3, #0
    28f2:	d023      	beq.n	293c <udd_ctrl_in_sent+0x7c>
    28f4:	4798      	blx	r3
    28f6:	2800      	cmp	r0, #0
    28f8:	d020      	beq.n	293c <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    28fa:	2200      	movs	r2, #0
    28fc:	4b11      	ldr	r3, [pc, #68]	; (2944 <udd_ctrl_in_sent+0x84>)
    28fe:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    2900:	4b11      	ldr	r3, [pc, #68]	; (2948 <udd_ctrl_in_sent+0x88>)
    2902:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    2904:	2c3f      	cmp	r4, #63	; 0x3f
    2906:	d919      	bls.n	293c <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    2908:	2200      	movs	r2, #0
    290a:	4b11      	ldr	r3, [pc, #68]	; (2950 <udd_ctrl_in_sent+0x90>)
    290c:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    290e:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    2910:	4d0c      	ldr	r5, [pc, #48]	; (2944 <udd_ctrl_in_sent+0x84>)
    2912:	882b      	ldrh	r3, [r5, #0]
    2914:	4a0c      	ldr	r2, [pc, #48]	; (2948 <udd_ctrl_in_sent+0x88>)
    2916:	6892      	ldr	r2, [r2, #8]
    2918:	18d2      	adds	r2, r2, r3
    291a:	0023      	movs	r3, r4
    291c:	2100      	movs	r1, #0
    291e:	480d      	ldr	r0, [pc, #52]	; (2954 <udd_ctrl_in_sent+0x94>)
    2920:	4e0d      	ldr	r6, [pc, #52]	; (2958 <udd_ctrl_in_sent+0x98>)
    2922:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    2924:	882b      	ldrh	r3, [r5, #0]
    2926:	18e4      	adds	r4, r4, r3
    2928:	802c      	strh	r4, [r5, #0]
}
    292a:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    292c:	2204      	movs	r2, #4
    292e:	4b0b      	ldr	r3, [pc, #44]	; (295c <udd_ctrl_in_sent+0x9c>)
    2930:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2932:	490b      	ldr	r1, [pc, #44]	; (2960 <udd_ctrl_in_sent+0xa0>)
    2934:	4807      	ldr	r0, [pc, #28]	; (2954 <udd_ctrl_in_sent+0x94>)
    2936:	4b0b      	ldr	r3, [pc, #44]	; (2964 <udd_ctrl_in_sent+0xa4>)
    2938:	4798      	blx	r3
			return;
    293a:	e7f6      	b.n	292a <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    293c:	2201      	movs	r2, #1
    293e:	4b04      	ldr	r3, [pc, #16]	; (2950 <udd_ctrl_in_sent+0x90>)
    2940:	701a      	strb	r2, [r3, #0]
    2942:	e7e5      	b.n	2910 <udd_ctrl_in_sent+0x50>
    2944:	20000232 	.word	0x20000232
    2948:	2000052c 	.word	0x2000052c
    294c:	20000234 	.word	0x20000234
    2950:	20000230 	.word	0x20000230
    2954:	200003c4 	.word	0x200003c4
    2958:	00003d7d 	.word	0x00003d7d
    295c:	20000236 	.word	0x20000236
    2960:	20000544 	.word	0x20000544
    2964:	00003e21 	.word	0x00003e21

00002968 <_usb_ep0_on_setup>:
{
    2968:	b510      	push	{r4, lr}
    296a:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    296c:	4b2c      	ldr	r3, [pc, #176]	; (2a20 <_usb_ep0_on_setup+0xb8>)
    296e:	781b      	ldrb	r3, [r3, #0]
    2970:	2b00      	cmp	r3, #0
    2972:	d007      	beq.n	2984 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    2974:	4b2b      	ldr	r3, [pc, #172]	; (2a24 <_usb_ep0_on_setup+0xbc>)
    2976:	691b      	ldr	r3, [r3, #16]
    2978:	2b00      	cmp	r3, #0
    297a:	d000      	beq.n	297e <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    297c:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    297e:	2200      	movs	r2, #0
    2980:	4b27      	ldr	r3, [pc, #156]	; (2a20 <_usb_ep0_on_setup+0xb8>)
    2982:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    2984:	8823      	ldrh	r3, [r4, #0]
    2986:	2b08      	cmp	r3, #8
    2988:	d002      	beq.n	2990 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    298a:	4b27      	ldr	r3, [pc, #156]	; (2a28 <_usb_ep0_on_setup+0xc0>)
    298c:	4798      	blx	r3
}
    298e:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    2990:	4a24      	ldr	r2, [pc, #144]	; (2a24 <_usb_ep0_on_setup+0xbc>)
    2992:	4b26      	ldr	r3, [pc, #152]	; (2a2c <_usb_ep0_on_setup+0xc4>)
    2994:	7819      	ldrb	r1, [r3, #0]
    2996:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    2998:	7859      	ldrb	r1, [r3, #1]
    299a:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    299c:	78d8      	ldrb	r0, [r3, #3]
    299e:	0200      	lsls	r0, r0, #8
    29a0:	7899      	ldrb	r1, [r3, #2]
    29a2:	1809      	adds	r1, r1, r0
    29a4:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    29a6:	7958      	ldrb	r0, [r3, #5]
    29a8:	0200      	lsls	r0, r0, #8
    29aa:	7919      	ldrb	r1, [r3, #4]
    29ac:	1809      	adds	r1, r1, r0
    29ae:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    29b0:	79d9      	ldrb	r1, [r3, #7]
    29b2:	0209      	lsls	r1, r1, #8
    29b4:	799b      	ldrb	r3, [r3, #6]
    29b6:	185b      	adds	r3, r3, r1
    29b8:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    29ba:	4b1d      	ldr	r3, [pc, #116]	; (2a30 <_usb_ep0_on_setup+0xc8>)
    29bc:	4798      	blx	r3
    29be:	2800      	cmp	r0, #0
    29c0:	d016      	beq.n	29f0 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    29c2:	4b18      	ldr	r3, [pc, #96]	; (2a24 <_usb_ep0_on_setup+0xbc>)
    29c4:	781b      	ldrb	r3, [r3, #0]
    29c6:	2b7f      	cmp	r3, #127	; 0x7f
    29c8:	d815      	bhi.n	29f6 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    29ca:	4b16      	ldr	r3, [pc, #88]	; (2a24 <_usb_ep0_on_setup+0xbc>)
    29cc:	88db      	ldrh	r3, [r3, #6]
    29ce:	2b00      	cmp	r3, #0
    29d0:	d022      	beq.n	2a18 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    29d2:	2300      	movs	r3, #0
    29d4:	4a17      	ldr	r2, [pc, #92]	; (2a34 <_usb_ep0_on_setup+0xcc>)
    29d6:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    29d8:	4a17      	ldr	r2, [pc, #92]	; (2a38 <_usb_ep0_on_setup+0xd0>)
    29da:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    29dc:	2201      	movs	r2, #1
    29de:	4b10      	ldr	r3, [pc, #64]	; (2a20 <_usb_ep0_on_setup+0xb8>)
    29e0:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    29e2:	2340      	movs	r3, #64	; 0x40
    29e4:	4a11      	ldr	r2, [pc, #68]	; (2a2c <_usb_ep0_on_setup+0xc4>)
    29e6:	2100      	movs	r1, #0
    29e8:	4814      	ldr	r0, [pc, #80]	; (2a3c <_usb_ep0_on_setup+0xd4>)
    29ea:	4c15      	ldr	r4, [pc, #84]	; (2a40 <_usb_ep0_on_setup+0xd8>)
    29ec:	47a0      	blx	r4
    29ee:	e7ce      	b.n	298e <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    29f0:	4b0d      	ldr	r3, [pc, #52]	; (2a28 <_usb_ep0_on_setup+0xc0>)
    29f2:	4798      	blx	r3
			return;
    29f4:	e7cb      	b.n	298e <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    29f6:	2300      	movs	r3, #0
    29f8:	4a0e      	ldr	r2, [pc, #56]	; (2a34 <_usb_ep0_on_setup+0xcc>)
    29fa:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    29fc:	4a0e      	ldr	r2, [pc, #56]	; (2a38 <_usb_ep0_on_setup+0xd0>)
    29fe:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    2a00:	2202      	movs	r2, #2
    2a02:	4b07      	ldr	r3, [pc, #28]	; (2a20 <_usb_ep0_on_setup+0xb8>)
    2a04:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2a06:	2340      	movs	r3, #64	; 0x40
    2a08:	4a08      	ldr	r2, [pc, #32]	; (2a2c <_usb_ep0_on_setup+0xc4>)
    2a0a:	2100      	movs	r1, #0
    2a0c:	480b      	ldr	r0, [pc, #44]	; (2a3c <_usb_ep0_on_setup+0xd4>)
    2a0e:	4c0c      	ldr	r4, [pc, #48]	; (2a40 <_usb_ep0_on_setup+0xd8>)
    2a10:	47a0      	blx	r4
			udd_ctrl_in_sent();
    2a12:	4b0c      	ldr	r3, [pc, #48]	; (2a44 <_usb_ep0_on_setup+0xdc>)
    2a14:	4798      	blx	r3
    2a16:	e7ba      	b.n	298e <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    2a18:	4b0b      	ldr	r3, [pc, #44]	; (2a48 <_usb_ep0_on_setup+0xe0>)
    2a1a:	4798      	blx	r3
				return;
    2a1c:	e7b7      	b.n	298e <_usb_ep0_on_setup+0x26>
    2a1e:	46c0      	nop			; (mov r8, r8)
    2a20:	20000236 	.word	0x20000236
    2a24:	2000052c 	.word	0x2000052c
    2a28:	000026b1 	.word	0x000026b1
    2a2c:	20000544 	.word	0x20000544
    2a30:	00001571 	.word	0x00001571
    2a34:	20000234 	.word	0x20000234
    2a38:	20000232 	.word	0x20000232
    2a3c:	200003c4 	.word	0x200003c4
    2a40:	00003dd1 	.word	0x00003dd1
    2a44:	000028c1 	.word	0x000028c1
    2a48:	00002831 	.word	0x00002831

00002a4c <_usb_on_sof_notify>:
{
    2a4c:	b510      	push	{r4, lr}
	udc_sof_notify();
    2a4e:	4b02      	ldr	r3, [pc, #8]	; (2a58 <_usb_on_sof_notify+0xc>)
    2a50:	4798      	blx	r3
	UDC_SOF_EVENT();
    2a52:	4b02      	ldr	r3, [pc, #8]	; (2a5c <_usb_on_sof_notify+0x10>)
    2a54:	4798      	blx	r3
}
    2a56:	bd10      	pop	{r4, pc}
    2a58:	0000152d 	.word	0x0000152d
    2a5c:	00003461 	.word	0x00003461

00002a60 <_usb_on_suspend>:
{
    2a60:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2a62:	4c07      	ldr	r4, [pc, #28]	; (2a80 <_usb_on_suspend+0x20>)
    2a64:	2104      	movs	r1, #4
    2a66:	0020      	movs	r0, r4
    2a68:	4b06      	ldr	r3, [pc, #24]	; (2a84 <_usb_on_suspend+0x24>)
    2a6a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2a6c:	2102      	movs	r1, #2
    2a6e:	0020      	movs	r0, r4
    2a70:	4b05      	ldr	r3, [pc, #20]	; (2a88 <_usb_on_suspend+0x28>)
    2a72:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    2a74:	2001      	movs	r0, #1
    2a76:	4b05      	ldr	r3, [pc, #20]	; (2a8c <_usb_on_suspend+0x2c>)
    2a78:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    2a7a:	4b05      	ldr	r3, [pc, #20]	; (2a90 <_usb_on_suspend+0x30>)
    2a7c:	4798      	blx	r3
}
    2a7e:	bd10      	pop	{r4, pc}
    2a80:	200003c4 	.word	0x200003c4
    2a84:	000037e5 	.word	0x000037e5
    2a88:	000037c5 	.word	0x000037c5
    2a8c:	00002419 	.word	0x00002419
    2a90:	00003449 	.word	0x00003449

00002a94 <udd_ep_abort>:
{
    2a94:	b510      	push	{r4, lr}
    2a96:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    2a98:	0001      	movs	r1, r0
    2a9a:	480a      	ldr	r0, [pc, #40]	; (2ac4 <udd_ep_abort+0x30>)
    2a9c:	4b0a      	ldr	r3, [pc, #40]	; (2ac8 <udd_ep_abort+0x34>)
    2a9e:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    2aa0:	0020      	movs	r0, r4
    2aa2:	4b0a      	ldr	r3, [pc, #40]	; (2acc <udd_ep_abort+0x38>)
    2aa4:	4798      	blx	r3
	if (!ptr_job->busy) {
    2aa6:	7c83      	ldrb	r3, [r0, #18]
    2aa8:	07db      	lsls	r3, r3, #31
    2aaa:	d50a      	bpl.n	2ac2 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    2aac:	7c83      	ldrb	r3, [r0, #18]
    2aae:	2201      	movs	r2, #1
    2ab0:	4393      	bics	r3, r2
    2ab2:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2ab4:	6803      	ldr	r3, [r0, #0]
    2ab6:	2b00      	cmp	r3, #0
    2ab8:	d003      	beq.n	2ac2 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    2aba:	68c1      	ldr	r1, [r0, #12]
    2abc:	0022      	movs	r2, r4
    2abe:	2001      	movs	r0, #1
    2ac0:	4798      	blx	r3
}
    2ac2:	bd10      	pop	{r4, pc}
    2ac4:	200003c4 	.word	0x200003c4
    2ac8:	00003c71 	.word	0x00003c71
    2acc:	000024d9 	.word	0x000024d9

00002ad0 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    2ad0:	4b02      	ldr	r3, [pc, #8]	; (2adc <udd_get_frame_number+0xc>)
    2ad2:	681b      	ldr	r3, [r3, #0]
    2ad4:	8a18      	ldrh	r0, [r3, #16]
    2ad6:	0480      	lsls	r0, r0, #18
    2ad8:	0d40      	lsrs	r0, r0, #21
}
    2ada:	4770      	bx	lr
    2adc:	200003c4 	.word	0x200003c4

00002ae0 <udd_ep_free>:
{
    2ae0:	b570      	push	{r4, r5, r6, lr}
    2ae2:	b082      	sub	sp, #8
    2ae4:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    2ae6:	ad01      	add	r5, sp, #4
    2ae8:	0028      	movs	r0, r5
    2aea:	4b0d      	ldr	r3, [pc, #52]	; (2b20 <udd_ep_free+0x40>)
    2aec:	4798      	blx	r3
	udd_ep_abort(ep);
    2aee:	0020      	movs	r0, r4
    2af0:	4b0c      	ldr	r3, [pc, #48]	; (2b24 <udd_ep_free+0x44>)
    2af2:	4798      	blx	r3
	config_ep.ep_address = ep;
    2af4:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    2af6:	2300      	movs	r3, #0
    2af8:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    2afa:	4e0b      	ldr	r6, [pc, #44]	; (2b28 <udd_ep_free+0x48>)
    2afc:	0029      	movs	r1, r5
    2afe:	0030      	movs	r0, r6
    2b00:	4b0a      	ldr	r3, [pc, #40]	; (2b2c <udd_ep_free+0x4c>)
    2b02:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2b04:	210f      	movs	r1, #15
    2b06:	4021      	ands	r1, r4
    2b08:	2200      	movs	r2, #0
    2b0a:	0030      	movs	r0, r6
    2b0c:	4b08      	ldr	r3, [pc, #32]	; (2b30 <udd_ep_free+0x50>)
    2b0e:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2b10:	2200      	movs	r2, #0
    2b12:	0021      	movs	r1, r4
    2b14:	0030      	movs	r0, r6
    2b16:	4b07      	ldr	r3, [pc, #28]	; (2b34 <udd_ep_free+0x54>)
    2b18:	4798      	blx	r3
}
    2b1a:	b002      	add	sp, #8
    2b1c:	bd70      	pop	{r4, r5, r6, pc}
    2b1e:	46c0      	nop			; (mov r8, r8)
    2b20:	000039f1 	.word	0x000039f1
    2b24:	00002a95 	.word	0x00002a95
    2b28:	200003c4 	.word	0x200003c4
    2b2c:	00003a01 	.word	0x00003a01
    2b30:	00003829 	.word	0x00003829
    2b34:	00003921 	.word	0x00003921

00002b38 <udd_ep_alloc>:
{
    2b38:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b3a:	b083      	sub	sp, #12
    2b3c:	0005      	movs	r5, r0
    2b3e:	000f      	movs	r7, r1
    2b40:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    2b42:	ae01      	add	r6, sp, #4
    2b44:	0030      	movs	r0, r6
    2b46:	4b36      	ldr	r3, [pc, #216]	; (2c20 <udd_ep_alloc+0xe8>)
    2b48:	4798      	blx	r3
	config_ep.ep_address = ep;
    2b4a:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    2b4c:	2c08      	cmp	r4, #8
    2b4e:	d813      	bhi.n	2b78 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    2b50:	2200      	movs	r2, #0
    2b52:	ab01      	add	r3, sp, #4
    2b54:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    2b56:	0028      	movs	r0, r5
    2b58:	4b32      	ldr	r3, [pc, #200]	; (2c24 <udd_ep_alloc+0xec>)
    2b5a:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    2b5c:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    2b5e:	2103      	movs	r1, #3
    2b60:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    2b62:	2901      	cmp	r1, #1
    2b64:	d038      	beq.n	2bd8 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    2b66:	2902      	cmp	r1, #2
    2b68:	d043      	beq.n	2bf2 <udd_ep_alloc+0xba>
		return false;
    2b6a:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    2b6c:	2903      	cmp	r1, #3
    2b6e:	d13d      	bne.n	2bec <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    2b70:	2204      	movs	r2, #4
    2b72:	ab01      	add	r3, sp, #4
    2b74:	70da      	strb	r2, [r3, #3]
    2b76:	e032      	b.n	2bde <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    2b78:	2c10      	cmp	r4, #16
    2b7a:	d803      	bhi.n	2b84 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    2b7c:	2201      	movs	r2, #1
    2b7e:	ab01      	add	r3, sp, #4
    2b80:	705a      	strb	r2, [r3, #1]
    2b82:	e7e8      	b.n	2b56 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    2b84:	2c20      	cmp	r4, #32
    2b86:	d803      	bhi.n	2b90 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    2b88:	2202      	movs	r2, #2
    2b8a:	ab01      	add	r3, sp, #4
    2b8c:	705a      	strb	r2, [r3, #1]
    2b8e:	e7e2      	b.n	2b56 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    2b90:	2c40      	cmp	r4, #64	; 0x40
    2b92:	d803      	bhi.n	2b9c <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    2b94:	2203      	movs	r2, #3
    2b96:	ab01      	add	r3, sp, #4
    2b98:	705a      	strb	r2, [r3, #1]
    2b9a:	e7dc      	b.n	2b56 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    2b9c:	2c80      	cmp	r4, #128	; 0x80
    2b9e:	d803      	bhi.n	2ba8 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    2ba0:	2204      	movs	r2, #4
    2ba2:	ab01      	add	r3, sp, #4
    2ba4:	705a      	strb	r2, [r3, #1]
    2ba6:	e7d6      	b.n	2b56 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    2ba8:	2380      	movs	r3, #128	; 0x80
    2baa:	005b      	lsls	r3, r3, #1
    2bac:	429c      	cmp	r4, r3
    2bae:	d803      	bhi.n	2bb8 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    2bb0:	2205      	movs	r2, #5
    2bb2:	ab01      	add	r3, sp, #4
    2bb4:	705a      	strb	r2, [r3, #1]
    2bb6:	e7ce      	b.n	2b56 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    2bb8:	2380      	movs	r3, #128	; 0x80
    2bba:	009b      	lsls	r3, r3, #2
    2bbc:	429c      	cmp	r4, r3
    2bbe:	d803      	bhi.n	2bc8 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    2bc0:	2206      	movs	r2, #6
    2bc2:	ab01      	add	r3, sp, #4
    2bc4:	705a      	strb	r2, [r3, #1]
    2bc6:	e7c6      	b.n	2b56 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    2bc8:	4a17      	ldr	r2, [pc, #92]	; (2c28 <udd_ep_alloc+0xf0>)
		return false;
    2bca:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    2bcc:	4294      	cmp	r4, r2
    2bce:	d80d      	bhi.n	2bec <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    2bd0:	2207      	movs	r2, #7
    2bd2:	ab01      	add	r3, sp, #4
    2bd4:	705a      	strb	r2, [r3, #1]
    2bd6:	e7be      	b.n	2b56 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    2bd8:	2202      	movs	r2, #2
    2bda:	ab01      	add	r3, sp, #4
    2bdc:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2bde:	a901      	add	r1, sp, #4
    2be0:	4812      	ldr	r0, [pc, #72]	; (2c2c <udd_ep_alloc+0xf4>)
    2be2:	4b13      	ldr	r3, [pc, #76]	; (2c30 <udd_ep_alloc+0xf8>)
    2be4:	4798      	blx	r3
		return false;
    2be6:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2be8:	2800      	cmp	r0, #0
    2bea:	d006      	beq.n	2bfa <udd_ep_alloc+0xc2>
}
    2bec:	0018      	movs	r0, r3
    2bee:	b003      	add	sp, #12
    2bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    2bf2:	2203      	movs	r2, #3
    2bf4:	ab01      	add	r3, sp, #4
    2bf6:	70da      	strb	r2, [r3, #3]
    2bf8:	e7f1      	b.n	2bde <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    2bfa:	210f      	movs	r1, #15
    2bfc:	4029      	ands	r1, r5
    2bfe:	4c0b      	ldr	r4, [pc, #44]	; (2c2c <udd_ep_alloc+0xf4>)
    2c00:	4b0c      	ldr	r3, [pc, #48]	; (2c34 <udd_ep_alloc+0xfc>)
    2c02:	2200      	movs	r2, #0
    2c04:	0020      	movs	r0, r4
    2c06:	4e0c      	ldr	r6, [pc, #48]	; (2c38 <udd_ep_alloc+0x100>)
    2c08:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2c0a:	2200      	movs	r2, #0
    2c0c:	0029      	movs	r1, r5
    2c0e:	0020      	movs	r0, r4
    2c10:	4e0a      	ldr	r6, [pc, #40]	; (2c3c <udd_ep_alloc+0x104>)
    2c12:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2c14:	2201      	movs	r2, #1
    2c16:	0029      	movs	r1, r5
    2c18:	0020      	movs	r0, r4
    2c1a:	47b0      	blx	r6
	return true;
    2c1c:	2301      	movs	r3, #1
    2c1e:	e7e5      	b.n	2bec <udd_ep_alloc+0xb4>
    2c20:	000039f1 	.word	0x000039f1
    2c24:	000024d9 	.word	0x000024d9
    2c28:	000003ff 	.word	0x000003ff
    2c2c:	200003c4 	.word	0x200003c4
    2c30:	00003a01 	.word	0x00003a01
    2c34:	000024fd 	.word	0x000024fd
    2c38:	00003801 	.word	0x00003801
    2c3c:	00003851 	.word	0x00003851

00002c40 <udd_ep_is_halted>:
{
    2c40:	b510      	push	{r4, lr}
    2c42:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    2c44:	4801      	ldr	r0, [pc, #4]	; (2c4c <udd_ep_is_halted+0xc>)
    2c46:	4b02      	ldr	r3, [pc, #8]	; (2c50 <udd_ep_is_halted+0x10>)
    2c48:	4798      	blx	r3
}
    2c4a:	bd10      	pop	{r4, pc}
    2c4c:	200003c4 	.word	0x200003c4
    2c50:	00003ca7 	.word	0x00003ca7

00002c54 <udd_ep_set_halt>:
{
    2c54:	b510      	push	{r4, lr}
    2c56:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2c58:	230f      	movs	r3, #15
    2c5a:	4003      	ands	r3, r0
		return false;
    2c5c:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2c5e:	2b02      	cmp	r3, #2
    2c60:	d900      	bls.n	2c64 <udd_ep_set_halt+0x10>
}
    2c62:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    2c64:	0021      	movs	r1, r4
    2c66:	4804      	ldr	r0, [pc, #16]	; (2c78 <udd_ep_set_halt+0x24>)
    2c68:	4b04      	ldr	r3, [pc, #16]	; (2c7c <udd_ep_set_halt+0x28>)
    2c6a:	4798      	blx	r3
	udd_ep_abort(ep);
    2c6c:	0020      	movs	r0, r4
    2c6e:	4b04      	ldr	r3, [pc, #16]	; (2c80 <udd_ep_set_halt+0x2c>)
    2c70:	4798      	blx	r3
	return true;
    2c72:	2001      	movs	r0, #1
    2c74:	e7f5      	b.n	2c62 <udd_ep_set_halt+0xe>
    2c76:	46c0      	nop			; (mov r8, r8)
    2c78:	200003c4 	.word	0x200003c4
    2c7c:	00003cd1 	.word	0x00003cd1
    2c80:	00002a95 	.word	0x00002a95

00002c84 <_usb_ep0_on_tansfer_ok>:
{
    2c84:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    2c86:	4b34      	ldr	r3, [pc, #208]	; (2d58 <_usb_ep0_on_tansfer_ok+0xd4>)
    2c88:	781b      	ldrb	r3, [r3, #0]
    2c8a:	2b01      	cmp	r3, #1
    2c8c:	d00a      	beq.n	2ca4 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    2c8e:	2b02      	cmp	r3, #2
    2c90:	d05f      	beq.n	2d52 <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    2c92:	4b32      	ldr	r3, [pc, #200]	; (2d5c <_usb_ep0_on_tansfer_ok+0xd8>)
    2c94:	691b      	ldr	r3, [r3, #16]
    2c96:	2b00      	cmp	r3, #0
    2c98:	d000      	beq.n	2c9c <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    2c9a:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    2c9c:	2200      	movs	r2, #0
    2c9e:	4b2e      	ldr	r3, [pc, #184]	; (2d58 <_usb_ep0_on_tansfer_ok+0xd4>)
    2ca0:	701a      	strb	r2, [r3, #0]
}
    2ca2:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    2ca4:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2ca6:	4b2d      	ldr	r3, [pc, #180]	; (2d5c <_usb_ep0_on_tansfer_ok+0xd8>)
    2ca8:	899b      	ldrh	r3, [r3, #12]
    2caa:	4a2d      	ldr	r2, [pc, #180]	; (2d60 <_usb_ep0_on_tansfer_ok+0xdc>)
    2cac:	8814      	ldrh	r4, [r2, #0]
    2cae:	1962      	adds	r2, r4, r5
    2cb0:	4293      	cmp	r3, r2
    2cb2:	da01      	bge.n	2cb8 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2cb4:	1b1d      	subs	r5, r3, r4
    2cb6:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    2cb8:	4b28      	ldr	r3, [pc, #160]	; (2d5c <_usb_ep0_on_tansfer_ok+0xd8>)
    2cba:	6898      	ldr	r0, [r3, #8]
    2cbc:	1900      	adds	r0, r0, r4
    2cbe:	002a      	movs	r2, r5
    2cc0:	4928      	ldr	r1, [pc, #160]	; (2d64 <_usb_ep0_on_tansfer_ok+0xe0>)
    2cc2:	4b29      	ldr	r3, [pc, #164]	; (2d68 <_usb_ep0_on_tansfer_ok+0xe4>)
    2cc4:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    2cc6:	1964      	adds	r4, r4, r5
    2cc8:	b2a4      	uxth	r4, r4
    2cca:	4b25      	ldr	r3, [pc, #148]	; (2d60 <_usb_ep0_on_tansfer_ok+0xdc>)
    2ccc:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2cce:	2d40      	cmp	r5, #64	; 0x40
    2cd0:	d00a      	beq.n	2ce8 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2cd2:	4b22      	ldr	r3, [pc, #136]	; (2d5c <_usb_ep0_on_tansfer_ok+0xd8>)
    2cd4:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2cd6:	695b      	ldr	r3, [r3, #20]
    2cd8:	2b00      	cmp	r3, #0
    2cda:	d002      	beq.n	2ce2 <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    2cdc:	4798      	blx	r3
    2cde:	2800      	cmp	r0, #0
    2ce0:	d014      	beq.n	2d0c <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    2ce2:	4b22      	ldr	r3, [pc, #136]	; (2d6c <_usb_ep0_on_tansfer_ok+0xe8>)
    2ce4:	4798      	blx	r3
    2ce6:	e7dc      	b.n	2ca2 <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    2ce8:	4b1c      	ldr	r3, [pc, #112]	; (2d5c <_usb_ep0_on_tansfer_ok+0xd8>)
    2cea:	88da      	ldrh	r2, [r3, #6]
    2cec:	4b20      	ldr	r3, [pc, #128]	; (2d70 <_usb_ep0_on_tansfer_ok+0xec>)
    2cee:	881b      	ldrh	r3, [r3, #0]
    2cf0:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2cf2:	429a      	cmp	r2, r3
    2cf4:	dded      	ble.n	2cd2 <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2cf6:	4b19      	ldr	r3, [pc, #100]	; (2d5c <_usb_ep0_on_tansfer_ok+0xd8>)
    2cf8:	899b      	ldrh	r3, [r3, #12]
    2cfa:	42a3      	cmp	r3, r4
    2cfc:	d00c      	beq.n	2d18 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2cfe:	2340      	movs	r3, #64	; 0x40
    2d00:	4a18      	ldr	r2, [pc, #96]	; (2d64 <_usb_ep0_on_tansfer_ok+0xe0>)
    2d02:	2100      	movs	r1, #0
    2d04:	481b      	ldr	r0, [pc, #108]	; (2d74 <_usb_ep0_on_tansfer_ok+0xf0>)
    2d06:	4c1c      	ldr	r4, [pc, #112]	; (2d78 <_usb_ep0_on_tansfer_ok+0xf4>)
    2d08:	47a0      	blx	r4
    2d0a:	e7ca      	b.n	2ca2 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2d0c:	2205      	movs	r2, #5
    2d0e:	4b12      	ldr	r3, [pc, #72]	; (2d58 <_usb_ep0_on_tansfer_ok+0xd4>)
    2d10:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    2d12:	4b1a      	ldr	r3, [pc, #104]	; (2d7c <_usb_ep0_on_tansfer_ok+0xf8>)
    2d14:	4798      	blx	r3
    2d16:	e7c4      	b.n	2ca2 <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    2d18:	4b10      	ldr	r3, [pc, #64]	; (2d5c <_usb_ep0_on_tansfer_ok+0xd8>)
    2d1a:	695b      	ldr	r3, [r3, #20]
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d00b      	beq.n	2d38 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    2d20:	4798      	blx	r3
    2d22:	2800      	cmp	r0, #0
    2d24:	d00f      	beq.n	2d46 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2d26:	4912      	ldr	r1, [pc, #72]	; (2d70 <_usb_ep0_on_tansfer_ok+0xec>)
    2d28:	4a0d      	ldr	r2, [pc, #52]	; (2d60 <_usb_ep0_on_tansfer_ok+0xdc>)
    2d2a:	880b      	ldrh	r3, [r1, #0]
    2d2c:	8810      	ldrh	r0, [r2, #0]
    2d2e:	181b      	adds	r3, r3, r0
    2d30:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    2d32:	2300      	movs	r3, #0
    2d34:	8013      	strh	r3, [r2, #0]
    2d36:	e7e2      	b.n	2cfe <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2d38:	2205      	movs	r2, #5
    2d3a:	4b07      	ldr	r3, [pc, #28]	; (2d58 <_usb_ep0_on_tansfer_ok+0xd4>)
    2d3c:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2d3e:	2000      	movs	r0, #0
    2d40:	4b0e      	ldr	r3, [pc, #56]	; (2d7c <_usb_ep0_on_tansfer_ok+0xf8>)
    2d42:	4798      	blx	r3
    2d44:	e7ad      	b.n	2ca2 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2d46:	2205      	movs	r2, #5
    2d48:	4b03      	ldr	r3, [pc, #12]	; (2d58 <_usb_ep0_on_tansfer_ok+0xd4>)
    2d4a:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2d4c:	4b0b      	ldr	r3, [pc, #44]	; (2d7c <_usb_ep0_on_tansfer_ok+0xf8>)
    2d4e:	4798      	blx	r3
    2d50:	e7a7      	b.n	2ca2 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    2d52:	4b0b      	ldr	r3, [pc, #44]	; (2d80 <_usb_ep0_on_tansfer_ok+0xfc>)
    2d54:	4798      	blx	r3
    2d56:	e7a4      	b.n	2ca2 <_usb_ep0_on_tansfer_ok+0x1e>
    2d58:	20000236 	.word	0x20000236
    2d5c:	2000052c 	.word	0x2000052c
    2d60:	20000232 	.word	0x20000232
    2d64:	20000544 	.word	0x20000544
    2d68:	000067a9 	.word	0x000067a9
    2d6c:	00002831 	.word	0x00002831
    2d70:	20000234 	.word	0x20000234
    2d74:	200003c4 	.word	0x200003c4
    2d78:	00003dd1 	.word	0x00003dd1
    2d7c:	00002c55 	.word	0x00002c55
    2d80:	000028c1 	.word	0x000028c1

00002d84 <udd_ep_clear_halt>:
{
    2d84:	b570      	push	{r4, r5, r6, lr}
    2d86:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2d88:	230f      	movs	r3, #15
    2d8a:	4003      	ands	r3, r0
		return false;
    2d8c:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2d8e:	2b02      	cmp	r3, #2
    2d90:	d900      	bls.n	2d94 <udd_ep_clear_halt+0x10>
}
    2d92:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    2d94:	0020      	movs	r0, r4
    2d96:	4b09      	ldr	r3, [pc, #36]	; (2dbc <udd_ep_clear_halt+0x38>)
    2d98:	4798      	blx	r3
    2d9a:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    2d9c:	0021      	movs	r1, r4
    2d9e:	4808      	ldr	r0, [pc, #32]	; (2dc0 <udd_ep_clear_halt+0x3c>)
    2da0:	4b08      	ldr	r3, [pc, #32]	; (2dc4 <udd_ep_clear_halt+0x40>)
    2da2:	4798      	blx	r3
	if (ptr_job->busy == true) {
    2da4:	7cab      	ldrb	r3, [r5, #18]
	return true;
    2da6:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    2da8:	07db      	lsls	r3, r3, #31
    2daa:	d5f2      	bpl.n	2d92 <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    2dac:	7cab      	ldrb	r3, [r5, #18]
    2dae:	2201      	movs	r2, #1
    2db0:	4393      	bics	r3, r2
    2db2:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    2db4:	682b      	ldr	r3, [r5, #0]
    2db6:	4798      	blx	r3
	return true;
    2db8:	2001      	movs	r0, #1
    2dba:	e7ea      	b.n	2d92 <udd_ep_clear_halt+0xe>
    2dbc:	000024d9 	.word	0x000024d9
    2dc0:	200003c4 	.word	0x200003c4
    2dc4:	00003cf7 	.word	0x00003cf7

00002dc8 <udd_ep_wait_stall_clear>:
{
    2dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dca:	0004      	movs	r4, r0
    2dcc:	000d      	movs	r5, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    2dce:	230f      	movs	r3, #15
    2dd0:	4003      	ands	r3, r0
		return false;
    2dd2:	2600      	movs	r6, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2dd4:	2b02      	cmp	r3, #2
    2dd6:	d805      	bhi.n	2de4 <udd_ep_wait_stall_clear+0x1c>
	ptr_job = udd_ep_get_job(ep);
    2dd8:	4b0d      	ldr	r3, [pc, #52]	; (2e10 <udd_ep_wait_stall_clear+0x48>)
    2dda:	4798      	blx	r3
    2ddc:	0007      	movs	r7, r0
	if (ptr_job->busy == true) {
    2dde:	7c83      	ldrb	r3, [r0, #18]
    2de0:	07db      	lsls	r3, r3, #31
    2de2:	d501      	bpl.n	2de8 <udd_ep_wait_stall_clear+0x20>
}
    2de4:	0030      	movs	r0, r6
    2de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    2de8:	0021      	movs	r1, r4
    2dea:	480a      	ldr	r0, [pc, #40]	; (2e14 <udd_ep_wait_stall_clear+0x4c>)
    2dec:	4b0a      	ldr	r3, [pc, #40]	; (2e18 <udd_ep_wait_stall_clear+0x50>)
    2dee:	4798      	blx	r3
    2df0:	1e06      	subs	r6, r0, #0
    2df2:	d005      	beq.n	2e00 <udd_ep_wait_stall_clear+0x38>
		ptr_job->busy = true;
    2df4:	7cbb      	ldrb	r3, [r7, #18]
    2df6:	2201      	movs	r2, #1
    2df8:	4313      	orrs	r3, r2
    2dfa:	74bb      	strb	r3, [r7, #18]
		ptr_job->call_nohalt = callback;
    2dfc:	603d      	str	r5, [r7, #0]
		return true;
    2dfe:	e7f1      	b.n	2de4 <udd_ep_wait_stall_clear+0x1c>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    2e00:	0021      	movs	r1, r4
    2e02:	4804      	ldr	r0, [pc, #16]	; (2e14 <udd_ep_wait_stall_clear+0x4c>)
    2e04:	4b05      	ldr	r3, [pc, #20]	; (2e1c <udd_ep_wait_stall_clear+0x54>)
    2e06:	4798      	blx	r3
    2e08:	1e06      	subs	r6, r0, #0
    2e0a:	d0eb      	beq.n	2de4 <udd_ep_wait_stall_clear+0x1c>
		callback(); /* Endpoint not halted then call directly callback */
    2e0c:	47a8      	blx	r5
		return true;
    2e0e:	e7e9      	b.n	2de4 <udd_ep_wait_stall_clear+0x1c>
    2e10:	000024d9 	.word	0x000024d9
    2e14:	200003c4 	.word	0x200003c4
    2e18:	00003ca7 	.word	0x00003ca7
    2e1c:	00003c45 	.word	0x00003c45

00002e20 <udd_ep_run>:
{
    2e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e22:	b087      	sub	sp, #28
    2e24:	0005      	movs	r5, r0
    2e26:	9103      	str	r1, [sp, #12]
    2e28:	9202      	str	r2, [sp, #8]
    2e2a:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    2e2c:	260f      	movs	r6, #15
    2e2e:	4006      	ands	r6, r0
		return false;
    2e30:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2e32:	2e02      	cmp	r6, #2
    2e34:	d902      	bls.n	2e3c <udd_ep_run+0x1c>
}
    2e36:	0020      	movs	r0, r4
    2e38:	b007      	add	sp, #28
    2e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2e3c:	4b64      	ldr	r3, [pc, #400]	; (2fd0 <udd_ep_run+0x1b0>)
    2e3e:	4798      	blx	r3
    2e40:	1e04      	subs	r4, r0, #0
    2e42:	d000      	beq.n	2e46 <udd_ep_run+0x26>
    2e44:	e0bd      	b.n	2fc2 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    2e46:	0028      	movs	r0, r5
    2e48:	4b62      	ldr	r3, [pc, #392]	; (2fd4 <udd_ep_run+0x1b4>)
    2e4a:	4798      	blx	r3
    2e4c:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2e4e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2e52:	425a      	negs	r2, r3
    2e54:	4153      	adcs	r3, r2
    2e56:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    2e58:	b672      	cpsid	i
    2e5a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2e5e:	2200      	movs	r2, #0
    2e60:	4b5d      	ldr	r3, [pc, #372]	; (2fd8 <udd_ep_run+0x1b8>)
    2e62:	701a      	strb	r2, [r3, #0]
	return flags;
    2e64:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    2e66:	7c83      	ldrb	r3, [r0, #18]
    2e68:	07db      	lsls	r3, r3, #31
    2e6a:	d508      	bpl.n	2e7e <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    2e6c:	2a00      	cmp	r2, #0
    2e6e:	d0e2      	beq.n	2e36 <udd_ep_run+0x16>
		cpu_irq_enable();
    2e70:	2201      	movs	r2, #1
    2e72:	4b59      	ldr	r3, [pc, #356]	; (2fd8 <udd_ep_run+0x1b8>)
    2e74:	701a      	strb	r2, [r3, #0]
    2e76:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2e7a:	b662      	cpsie	i
    2e7c:	e7db      	b.n	2e36 <udd_ep_run+0x16>
	ptr_job->busy = true;
    2e7e:	7c83      	ldrb	r3, [r0, #18]
    2e80:	2101      	movs	r1, #1
    2e82:	430b      	orrs	r3, r1
    2e84:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    2e86:	2a00      	cmp	r2, #0
    2e88:	d005      	beq.n	2e96 <udd_ep_run+0x76>
		cpu_irq_enable();
    2e8a:	2201      	movs	r2, #1
    2e8c:	4b52      	ldr	r3, [pc, #328]	; (2fd8 <udd_ep_run+0x1b8>)
    2e8e:	701a      	strb	r2, [r3, #0]
    2e90:	f3bf 8f5f 	dmb	sy
    2e94:	b662      	cpsie	i
	ptr_job->buf = buf;
    2e96:	9b02      	ldr	r3, [sp, #8]
    2e98:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    2e9a:	9b01      	ldr	r3, [sp, #4]
    2e9c:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    2e9e:	2300      	movs	r3, #0
    2ea0:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    2ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2ea4:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    2ea6:	2301      	movs	r3, #1
    2ea8:	9a03      	ldr	r2, [sp, #12]
    2eaa:	4013      	ands	r3, r2
    2eac:	005a      	lsls	r2, r3, #1
    2eae:	7cbb      	ldrb	r3, [r7, #18]
    2eb0:	2102      	movs	r1, #2
    2eb2:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    2eb4:	4313      	orrs	r3, r2
    2eb6:	2204      	movs	r2, #4
    2eb8:	4393      	bics	r3, r2
    2eba:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    2ebc:	b26b      	sxtb	r3, r5
    2ebe:	2b00      	cmp	r3, #0
    2ec0:	db20      	blt.n	2f04 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    2ec2:	9b01      	ldr	r3, [sp, #4]
    2ec4:	2b00      	cmp	r3, #0
    2ec6:	d06f      	beq.n	2fa8 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    2ec8:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2eca:	4b44      	ldr	r3, [pc, #272]	; (2fdc <udd_ep_run+0x1bc>)
    2ecc:	429c      	cmp	r4, r3
    2ece:	d95a      	bls.n	2f86 <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2ed0:	8a39      	ldrh	r1, [r7, #16]
    2ed2:	001c      	movs	r4, r3
    2ed4:	0018      	movs	r0, r3
    2ed6:	4b42      	ldr	r3, [pc, #264]	; (2fe0 <udd_ep_run+0x1c0>)
    2ed8:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    2eda:	1a63      	subs	r3, r4, r1
    2edc:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    2ede:	8a3b      	ldrh	r3, [r7, #16]
    2ee0:	429a      	cmp	r2, r3
    2ee2:	d257      	bcs.n	2f94 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    2ee4:	7cba      	ldrb	r2, [r7, #18]
    2ee6:	2104      	movs	r1, #4
    2ee8:	430a      	orrs	r2, r1
    2eea:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    2eec:	1e72      	subs	r2, r6, #1
    2eee:	0192      	lsls	r2, r2, #6
    2ef0:	493c      	ldr	r1, [pc, #240]	; (2fe4 <udd_ep_run+0x1c4>)
    2ef2:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2ef4:	0031      	movs	r1, r6
    2ef6:	483c      	ldr	r0, [pc, #240]	; (2fe8 <udd_ep_run+0x1c8>)
    2ef8:	4c3c      	ldr	r4, [pc, #240]	; (2fec <udd_ep_run+0x1cc>)
    2efa:	47a0      	blx	r4
				return (STATUS_OK ==
    2efc:	4244      	negs	r4, r0
    2efe:	4144      	adcs	r4, r0
    2f00:	b2e4      	uxtb	r4, r4
    2f02:	e798      	b.n	2e36 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    2f04:	9b01      	ldr	r3, [sp, #4]
    2f06:	2b00      	cmp	r3, #0
    2f08:	d027      	beq.n	2f5a <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    2f0a:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2f0c:	4b33      	ldr	r3, [pc, #204]	; (2fdc <udd_ep_run+0x1bc>)
    2f0e:	429d      	cmp	r5, r3
    2f10:	d906      	bls.n	2f20 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2f12:	8a39      	ldrh	r1, [r7, #16]
    2f14:	001d      	movs	r5, r3
    2f16:	0018      	movs	r0, r3
    2f18:	4b31      	ldr	r3, [pc, #196]	; (2fe0 <udd_ep_run+0x1c0>)
    2f1a:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    2f1c:	1a6b      	subs	r3, r5, r1
    2f1e:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    2f20:	7cbb      	ldrb	r3, [r7, #18]
    2f22:	079b      	lsls	r3, r3, #30
    2f24:	d507      	bpl.n	2f36 <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    2f26:	8a39      	ldrh	r1, [r7, #16]
    2f28:	0028      	movs	r0, r5
    2f2a:	4b31      	ldr	r3, [pc, #196]	; (2ff0 <udd_ep_run+0x1d0>)
    2f2c:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    2f2e:	b289      	uxth	r1, r1
    2f30:	424c      	negs	r4, r1
    2f32:	414c      	adcs	r4, r1
    2f34:	b2e4      	uxtb	r4, r4
    2f36:	2001      	movs	r0, #1
    2f38:	4020      	ands	r0, r4
    2f3a:	0040      	lsls	r0, r0, #1
    2f3c:	7cbc      	ldrb	r4, [r7, #18]
    2f3e:	2302      	movs	r3, #2
    2f40:	439c      	bics	r4, r3
    2f42:	4304      	orrs	r4, r0
    2f44:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    2f46:	002b      	movs	r3, r5
    2f48:	9a02      	ldr	r2, [sp, #8]
    2f4a:	0031      	movs	r1, r6
    2f4c:	4826      	ldr	r0, [pc, #152]	; (2fe8 <udd_ep_run+0x1c8>)
    2f4e:	4c29      	ldr	r4, [pc, #164]	; (2ff4 <udd_ep_run+0x1d4>)
    2f50:	47a0      	blx	r4
		return (STATUS_OK ==
    2f52:	4244      	negs	r4, r0
    2f54:	4144      	adcs	r4, r0
    2f56:	b2e4      	uxtb	r4, r4
    2f58:	e76d      	b.n	2e36 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    2f5a:	7cbb      	ldrb	r3, [r7, #18]
    2f5c:	079b      	lsls	r3, r3, #30
    2f5e:	d505      	bpl.n	2f6c <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    2f60:	7cbb      	ldrb	r3, [r7, #18]
    2f62:	2202      	movs	r2, #2
    2f64:	4393      	bics	r3, r2
    2f66:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    2f68:	2500      	movs	r5, #0
    2f6a:	e7ec      	b.n	2f46 <udd_ep_run+0x126>
			ptr_job->busy = false;
    2f6c:	7cbb      	ldrb	r3, [r7, #18]
    2f6e:	2201      	movs	r2, #1
    2f70:	4393      	bics	r3, r2
    2f72:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    2f74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2f76:	2b00      	cmp	r3, #0
    2f78:	d025      	beq.n	2fc6 <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    2f7a:	002a      	movs	r2, r5
    2f7c:	2100      	movs	r1, #0
    2f7e:	2000      	movs	r0, #0
    2f80:	4798      	blx	r3
			return true;
    2f82:	2401      	movs	r4, #1
    2f84:	e757      	b.n	2e36 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    2f86:	8a39      	ldrh	r1, [r7, #16]
    2f88:	0020      	movs	r0, r4
    2f8a:	4b19      	ldr	r3, [pc, #100]	; (2ff0 <udd_ep_run+0x1d0>)
    2f8c:	4798      	blx	r3
    2f8e:	1a63      	subs	r3, r4, r1
    2f90:	b29a      	uxth	r2, r3
    2f92:	e7a4      	b.n	2ede <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2f94:	0013      	movs	r3, r2
    2f96:	9a02      	ldr	r2, [sp, #8]
    2f98:	0031      	movs	r1, r6
    2f9a:	4813      	ldr	r0, [pc, #76]	; (2fe8 <udd_ep_run+0x1c8>)
    2f9c:	4c13      	ldr	r4, [pc, #76]	; (2fec <udd_ep_run+0x1cc>)
    2f9e:	47a0      	blx	r4
				return (STATUS_OK ==
    2fa0:	4244      	negs	r4, r0
    2fa2:	4144      	adcs	r4, r0
    2fa4:	b2e4      	uxtb	r4, r4
    2fa6:	e746      	b.n	2e36 <udd_ep_run+0x16>
			ptr_job->busy = false;
    2fa8:	7cbb      	ldrb	r3, [r7, #18]
    2faa:	2201      	movs	r2, #1
    2fac:	4393      	bics	r3, r2
    2fae:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    2fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2fb2:	2b00      	cmp	r3, #0
    2fb4:	d009      	beq.n	2fca <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    2fb6:	002a      	movs	r2, r5
    2fb8:	2100      	movs	r1, #0
    2fba:	2000      	movs	r0, #0
    2fbc:	4798      	blx	r3
			return true;
    2fbe:	2401      	movs	r4, #1
    2fc0:	e739      	b.n	2e36 <udd_ep_run+0x16>
		return false;
    2fc2:	2400      	movs	r4, #0
    2fc4:	e737      	b.n	2e36 <udd_ep_run+0x16>
			return true;
    2fc6:	2401      	movs	r4, #1
    2fc8:	e735      	b.n	2e36 <udd_ep_run+0x16>
			return true;
    2fca:	2401      	movs	r4, #1
    2fcc:	e733      	b.n	2e36 <udd_ep_run+0x16>
    2fce:	46c0      	nop			; (mov r8, r8)
    2fd0:	00002c41 	.word	0x00002c41
    2fd4:	000024d9 	.word	0x000024d9
    2fd8:	200000f9 	.word	0x200000f9
    2fdc:	00001fff 	.word	0x00001fff
    2fe0:	000064ad 	.word	0x000064ad
    2fe4:	20000344 	.word	0x20000344
    2fe8:	200003c4 	.word	0x200003c4
    2fec:	00003dd1 	.word	0x00003dd1
    2ff0:	000062d9 	.word	0x000062d9
    2ff4:	00003d7d 	.word	0x00003d7d

00002ff8 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    2ff8:	4b02      	ldr	r3, [pc, #8]	; (3004 <udd_set_address+0xc>)
    2ffa:	681b      	ldr	r3, [r3, #0]
    2ffc:	2280      	movs	r2, #128	; 0x80
    2ffe:	4310      	orrs	r0, r2
    3000:	7298      	strb	r0, [r3, #10]
}
    3002:	4770      	bx	lr
    3004:	200003c4 	.word	0x200003c4

00003008 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    3008:	4b02      	ldr	r3, [pc, #8]	; (3014 <udd_getaddress+0xc>)
    300a:	681b      	ldr	r3, [r3, #0]
    300c:	7a98      	ldrb	r0, [r3, #10]
    300e:	0640      	lsls	r0, r0, #25
    3010:	0e40      	lsrs	r0, r0, #25
}
    3012:	4770      	bx	lr
    3014:	200003c4 	.word	0x200003c4

00003018 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    3018:	4b01      	ldr	r3, [pc, #4]	; (3020 <udd_set_setup_payload+0x8>)
    301a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    301c:	8199      	strh	r1, [r3, #12]
}
    301e:	4770      	bx	lr
    3020:	2000052c 	.word	0x2000052c

00003024 <udd_detach>:

void udd_detach(void)
{
    3024:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    3026:	4b05      	ldr	r3, [pc, #20]	; (303c <udd_detach+0x18>)
    3028:	681a      	ldr	r2, [r3, #0]
    302a:	8913      	ldrh	r3, [r2, #8]
    302c:	2101      	movs	r1, #1
    302e:	430b      	orrs	r3, r1
    3030:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    3032:	2001      	movs	r0, #1
    3034:	4b02      	ldr	r3, [pc, #8]	; (3040 <udd_detach+0x1c>)
    3036:	4798      	blx	r3
}
    3038:	bd10      	pop	{r4, pc}
    303a:	46c0      	nop			; (mov r8, r8)
    303c:	200003c4 	.word	0x200003c4
    3040:	00002419 	.word	0x00002419

00003044 <udd_attach>:

void udd_attach(void)
{
    3044:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    3046:	2003      	movs	r0, #3
    3048:	4b16      	ldr	r3, [pc, #88]	; (30a4 <udd_attach+0x60>)
    304a:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    304c:	4c16      	ldr	r4, [pc, #88]	; (30a8 <udd_attach+0x64>)
    304e:	6822      	ldr	r2, [r4, #0]
    3050:	8913      	ldrh	r3, [r2, #8]
    3052:	2101      	movs	r1, #1
    3054:	438b      	bics	r3, r1
    3056:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    3058:	4a14      	ldr	r2, [pc, #80]	; (30ac <udd_attach+0x68>)
    305a:	3103      	adds	r1, #3
    305c:	0020      	movs	r0, r4
    305e:	4e14      	ldr	r6, [pc, #80]	; (30b0 <udd_attach+0x6c>)
    3060:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    3062:	4a14      	ldr	r2, [pc, #80]	; (30b4 <udd_attach+0x70>)
    3064:	2100      	movs	r1, #0
    3066:	0020      	movs	r0, r4
    3068:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    306a:	4a13      	ldr	r2, [pc, #76]	; (30b8 <udd_attach+0x74>)
    306c:	2101      	movs	r1, #1
    306e:	0020      	movs	r0, r4
    3070:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    3072:	4a12      	ldr	r2, [pc, #72]	; (30bc <udd_attach+0x78>)
    3074:	2102      	movs	r1, #2
    3076:	0020      	movs	r0, r4
    3078:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    307a:	2104      	movs	r1, #4
    307c:	0020      	movs	r0, r4
    307e:	4d10      	ldr	r5, [pc, #64]	; (30c0 <udd_attach+0x7c>)
    3080:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3082:	2100      	movs	r1, #0
    3084:	0020      	movs	r0, r4
    3086:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    3088:	2101      	movs	r1, #1
    308a:	0020      	movs	r0, r4
    308c:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    308e:	2102      	movs	r1, #2
    3090:	0020      	movs	r0, r4
    3092:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3094:	4a0b      	ldr	r2, [pc, #44]	; (30c4 <udd_attach+0x80>)
    3096:	2106      	movs	r1, #6
    3098:	0020      	movs	r0, r4
    309a:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    309c:	2106      	movs	r1, #6
    309e:	0020      	movs	r0, r4
    30a0:	47a8      	blx	r5
#endif
}
    30a2:	bd70      	pop	{r4, r5, r6, pc}
    30a4:	00002419 	.word	0x00002419
    30a8:	200003c4 	.word	0x200003c4
    30ac:	00002a61 	.word	0x00002a61
    30b0:	000037a1 	.word	0x000037a1
    30b4:	00002a4d 	.word	0x00002a4d
    30b8:	00002781 	.word	0x00002781
    30bc:	00002711 	.word	0x00002711
    30c0:	000037c5 	.word	0x000037c5
    30c4:	000026dd 	.word	0x000026dd

000030c8 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    30c8:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    30ca:	2100      	movs	r1, #0
    30cc:	200e      	movs	r0, #14
    30ce:	4b08      	ldr	r3, [pc, #32]	; (30f0 <_uhd_vbus_handler+0x28>)
    30d0:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    30d2:	4b08      	ldr	r3, [pc, #32]	; (30f4 <_uhd_vbus_handler+0x2c>)
    30d4:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    30d6:	045b      	lsls	r3, r3, #17
    30d8:	d406      	bmi.n	30e8 <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    30da:	4b07      	ldr	r3, [pc, #28]	; (30f8 <_uhd_vbus_handler+0x30>)
    30dc:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    30de:	2100      	movs	r1, #0
    30e0:	200e      	movs	r0, #14
    30e2:	4b06      	ldr	r3, [pc, #24]	; (30fc <_uhd_vbus_handler+0x34>)
    30e4:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    30e6:	bd10      	pop	{r4, pc}
		udd_attach();
    30e8:	4b05      	ldr	r3, [pc, #20]	; (3100 <_uhd_vbus_handler+0x38>)
    30ea:	4798      	blx	r3
    30ec:	e7f7      	b.n	30de <_uhd_vbus_handler+0x16>
    30ee:	46c0      	nop			; (mov r8, r8)
    30f0:	00004689 	.word	0x00004689
    30f4:	41004400 	.word	0x41004400
    30f8:	00003025 	.word	0x00003025
    30fc:	00004669 	.word	0x00004669
    3100:	00003045 	.word	0x00003045

00003104 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    3104:	b570      	push	{r4, r5, r6, lr}
    3106:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3108:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    310c:	425a      	negs	r2, r3
    310e:	4153      	adcs	r3, r2
    3110:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3112:	b672      	cpsid	i
    3114:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3118:	2600      	movs	r6, #0
    311a:	4b29      	ldr	r3, [pc, #164]	; (31c0 <udd_enable+0xbc>)
    311c:	701e      	strb	r6, [r3, #0]
	return flags;
    311e:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    3120:	ac05      	add	r4, sp, #20
    3122:	0020      	movs	r0, r4
    3124:	4b27      	ldr	r3, [pc, #156]	; (31c4 <udd_enable+0xc0>)
    3126:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    3128:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    312a:	4e27      	ldr	r6, [pc, #156]	; (31c8 <udd_enable+0xc4>)
    312c:	0022      	movs	r2, r4
    312e:	4927      	ldr	r1, [pc, #156]	; (31cc <udd_enable+0xc8>)
    3130:	0030      	movs	r0, r6
    3132:	4b27      	ldr	r3, [pc, #156]	; (31d0 <udd_enable+0xcc>)
    3134:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    3136:	0030      	movs	r0, r6
    3138:	4b26      	ldr	r3, [pc, #152]	; (31d4 <udd_enable+0xd0>)
    313a:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    313c:	4b26      	ldr	r3, [pc, #152]	; (31d8 <udd_enable+0xd4>)
    313e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3140:	069b      	lsls	r3, r3, #26
    3142:	d434      	bmi.n	31ae <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3144:	4924      	ldr	r1, [pc, #144]	; (31d8 <udd_enable+0xd4>)
    3146:	22d0      	movs	r2, #208	; 0xd0
    3148:	68cb      	ldr	r3, [r1, #12]
    314a:	4013      	ands	r3, r2
    314c:	2bd0      	cmp	r3, #208	; 0xd0
    314e:	d1fb      	bne.n	3148 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    3150:	2001      	movs	r0, #1
    3152:	4b22      	ldr	r3, [pc, #136]	; (31dc <udd_enable+0xd8>)
    3154:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    3156:	ac02      	add	r4, sp, #8
    3158:	0020      	movs	r0, r4
    315a:	4b21      	ldr	r3, [pc, #132]	; (31e0 <udd_enable+0xdc>)
    315c:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    315e:	230e      	movs	r3, #14
    3160:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    3162:	2300      	movs	r3, #0
    3164:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    3166:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    3168:	3303      	adds	r3, #3
    316a:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    316c:	3b02      	subs	r3, #2
    316e:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3170:	2100      	movs	r1, #0
    3172:	200e      	movs	r0, #14
    3174:	4b1b      	ldr	r3, [pc, #108]	; (31e4 <udd_enable+0xe0>)
    3176:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    3178:	0021      	movs	r1, r4
    317a:	200e      	movs	r0, #14
    317c:	4b1a      	ldr	r3, [pc, #104]	; (31e8 <udd_enable+0xe4>)
    317e:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    3180:	2200      	movs	r2, #0
    3182:	210e      	movs	r1, #14
    3184:	4819      	ldr	r0, [pc, #100]	; (31ec <udd_enable+0xe8>)
    3186:	4b1a      	ldr	r3, [pc, #104]	; (31f0 <udd_enable+0xec>)
    3188:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    318a:	2100      	movs	r1, #0
    318c:	200e      	movs	r0, #14
    318e:	4b19      	ldr	r3, [pc, #100]	; (31f4 <udd_enable+0xf0>)
    3190:	4798      	blx	r3
    3192:	4b19      	ldr	r3, [pc, #100]	; (31f8 <udd_enable+0xf4>)
    3194:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    3196:	045b      	lsls	r3, r3, #17
    3198:	d40f      	bmi.n	31ba <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    319a:	2d00      	cmp	r5, #0
    319c:	d005      	beq.n	31aa <udd_enable+0xa6>
		cpu_irq_enable();
    319e:	2201      	movs	r2, #1
    31a0:	4b07      	ldr	r3, [pc, #28]	; (31c0 <udd_enable+0xbc>)
    31a2:	701a      	strb	r2, [r3, #0]
    31a4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    31a8:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    31aa:	b006      	add	sp, #24
    31ac:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    31ae:	490a      	ldr	r1, [pc, #40]	; (31d8 <udd_enable+0xd4>)
    31b0:	2210      	movs	r2, #16
    31b2:	68cb      	ldr	r3, [r1, #12]
    31b4:	421a      	tst	r2, r3
    31b6:	d0fc      	beq.n	31b2 <udd_enable+0xae>
    31b8:	e7ca      	b.n	3150 <udd_enable+0x4c>
		_uhd_vbus_handler();
    31ba:	4b0c      	ldr	r3, [pc, #48]	; (31ec <udd_enable+0xe8>)
    31bc:	4798      	blx	r3
    31be:	e7ec      	b.n	319a <udd_enable+0x96>
    31c0:	200000f9 	.word	0x200000f9
    31c4:	0000442d 	.word	0x0000442d
    31c8:	200003c4 	.word	0x200003c4
    31cc:	41005000 	.word	0x41005000
    31d0:	0000443d 	.word	0x0000443d
    31d4:	00003e51 	.word	0x00003e51
    31d8:	40000800 	.word	0x40000800
    31dc:	00002419 	.word	0x00002419
    31e0:	00001a49 	.word	0x00001a49
    31e4:	00004689 	.word	0x00004689
    31e8:	00001a5d 	.word	0x00001a5d
    31ec:	000030c9 	.word	0x000030c9
    31f0:	0000463d 	.word	0x0000463d
    31f4:	00004669 	.word	0x00004669
    31f8:	41004400 	.word	0x41004400

000031fc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    31fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    31fe:	46c6      	mov	lr, r8
    3200:	b500      	push	{lr}
    3202:	000c      	movs	r4, r1
    3204:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    3206:	2800      	cmp	r0, #0
    3208:	d10f      	bne.n	322a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    320a:	2a00      	cmp	r2, #0
    320c:	dd11      	ble.n	3232 <_read+0x36>
    320e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3210:	4e09      	ldr	r6, [pc, #36]	; (3238 <_read+0x3c>)
    3212:	4d0a      	ldr	r5, [pc, #40]	; (323c <_read+0x40>)
    3214:	6830      	ldr	r0, [r6, #0]
    3216:	0021      	movs	r1, r4
    3218:	682b      	ldr	r3, [r5, #0]
    321a:	4798      	blx	r3
		ptr++;
    321c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    321e:	42bc      	cmp	r4, r7
    3220:	d1f8      	bne.n	3214 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    3222:	4640      	mov	r0, r8
    3224:	bc04      	pop	{r2}
    3226:	4690      	mov	r8, r2
    3228:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    322a:	2301      	movs	r3, #1
    322c:	425b      	negs	r3, r3
    322e:	4698      	mov	r8, r3
    3230:	e7f7      	b.n	3222 <_read+0x26>
	for (; len > 0; --len) {
    3232:	4680      	mov	r8, r0
    3234:	e7f5      	b.n	3222 <_read+0x26>
    3236:	46c0      	nop			; (mov r8, r8)
    3238:	2000058c 	.word	0x2000058c
    323c:	20000584 	.word	0x20000584

00003240 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3240:	b5f0      	push	{r4, r5, r6, r7, lr}
    3242:	46c6      	mov	lr, r8
    3244:	b500      	push	{lr}
    3246:	000e      	movs	r6, r1
    3248:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    324a:	3801      	subs	r0, #1
    324c:	2802      	cmp	r0, #2
    324e:	d810      	bhi.n	3272 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3250:	2a00      	cmp	r2, #0
    3252:	d011      	beq.n	3278 <_write+0x38>
    3254:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3256:	4b0c      	ldr	r3, [pc, #48]	; (3288 <_write+0x48>)
    3258:	4698      	mov	r8, r3
    325a:	4f0c      	ldr	r7, [pc, #48]	; (328c <_write+0x4c>)
    325c:	4643      	mov	r3, r8
    325e:	6818      	ldr	r0, [r3, #0]
    3260:	5d31      	ldrb	r1, [r6, r4]
    3262:	683b      	ldr	r3, [r7, #0]
    3264:	4798      	blx	r3
    3266:	2800      	cmp	r0, #0
    3268:	db08      	blt.n	327c <_write+0x3c>
			return -1;
		}
		++nChars;
    326a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    326c:	42a5      	cmp	r5, r4
    326e:	d1f5      	bne.n	325c <_write+0x1c>
    3270:	e006      	b.n	3280 <_write+0x40>
		return -1;
    3272:	2401      	movs	r4, #1
    3274:	4264      	negs	r4, r4
    3276:	e003      	b.n	3280 <_write+0x40>
	for (; len != 0; --len) {
    3278:	0014      	movs	r4, r2
    327a:	e001      	b.n	3280 <_write+0x40>
			return -1;
    327c:	2401      	movs	r4, #1
    327e:	4264      	negs	r4, r4
	}
	return nChars;
}
    3280:	0020      	movs	r0, r4
    3282:	bc04      	pop	{r2}
    3284:	4690      	mov	r8, r2
    3286:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3288:	2000058c 	.word	0x2000058c
    328c:	20000588 	.word	0x20000588

00003290 <main>:


/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    3290:	b570      	push	{r4, r5, r6, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
    3292:	2101      	movs	r1, #1
    3294:	4b5c      	ldr	r3, [pc, #368]	; (3408 <main+0x178>)
    3296:	7019      	strb	r1, [r3, #0]
    3298:	f3bf 8f5f 	dmb	sy
    329c:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    329e:	4b5b      	ldr	r3, [pc, #364]	; (340c <main+0x17c>)
    32a0:	2200      	movs	r2, #0
    32a2:	701a      	strb	r2, [r3, #0]
    32a4:	705a      	strb	r2, [r3, #1]
    32a6:	709a      	strb	r2, [r3, #2]
    32a8:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    32aa:	7119      	strb	r1, [r3, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	system_init();
    32ac:	4b58      	ldr	r3, [pc, #352]	; (3410 <main+0x180>)
    32ae:	4798      	blx	r3
	ui_lb_init();
    32b0:	4b58      	ldr	r3, [pc, #352]	; (3414 <main+0x184>)
    32b2:	4798      	blx	r3
	ui_powerdown();
    32b4:	4b58      	ldr	r3, [pc, #352]	; (3418 <main+0x188>)
    32b6:	4798      	blx	r3
	ui_cdc_init();
    32b8:	4b58      	ldr	r3, [pc, #352]	; (341c <main+0x18c>)
    32ba:	4798      	blx	r3
	sd_mmc_init();
    32bc:	4b58      	ldr	r3, [pc, #352]	; (3420 <main+0x190>)
    32be:	4798      	blx	r3

	memories_initialization();
    32c0:	4b58      	ldr	r3, [pc, #352]	; (3424 <main+0x194>)
    32c2:	4798      	blx	r3

	ui_configure_callback();
    32c4:	4b58      	ldr	r3, [pc, #352]	; (3428 <main+0x198>)
    32c6:	4798      	blx	r3
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    32c8:	4b58      	ldr	r3, [pc, #352]	; (342c <main+0x19c>)
    32ca:	4798      	blx	r3

	/* The main loop manages only the power mode
	 * because the USB management & button detection
	 * are done by interrupt */
	while (true) {
		if (main_b_msc_enable) {
    32cc:	4c58      	ldr	r4, [pc, #352]	; (3430 <main+0x1a0>)
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    32ce:	4e4e      	ldr	r6, [pc, #312]	; (3408 <main+0x178>)
	while (!(*lock_ptr)) {
    32d0:	4d4e      	ldr	r5, [pc, #312]	; (340c <main+0x17c>)
    32d2:	e057      	b.n	3384 <main+0xf4>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    32d4:	0019      	movs	r1, r3
		lock_ptr++;
    32d6:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    32d8:	1c4b      	adds	r3, r1, #1
    32da:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    32dc:	7810      	ldrb	r0, [r2, #0]
    32de:	2800      	cmp	r0, #0
    32e0:	d0f8      	beq.n	32d4 <main+0x44>

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    32e2:	2b00      	cmp	r3, #0
    32e4:	d106      	bne.n	32f4 <main+0x64>
		cpu_irq_enable();
    32e6:	2201      	movs	r2, #1
    32e8:	4b47      	ldr	r3, [pc, #284]	; (3408 <main+0x178>)
    32ea:	701a      	strb	r2, [r3, #0]
    32ec:	f3bf 8f5f 	dmb	sy
    32f0:	b662      	cpsie	i
    32f2:	e047      	b.n	3384 <main+0xf4>
  __ASM volatile ("cpsid i" : : : "memory");
    32f4:	b672      	cpsid	i
    32f6:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    32fa:	2200      	movs	r2, #0
    32fc:	4b42      	ldr	r3, [pc, #264]	; (3408 <main+0x178>)
    32fe:	701a      	strb	r2, [r3, #0]
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    3300:	4b4c      	ldr	r3, [pc, #304]	; (3434 <main+0x1a4>)
    3302:	699b      	ldr	r3, [r3, #24]

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    3304:	051b      	lsls	r3, r3, #20
    3306:	0f1b      	lsrs	r3, r3, #28
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    3308:	2b02      	cmp	r3, #2
    330a:	d805      	bhi.n	3318 <main+0x88>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    330c:	4a4a      	ldr	r2, [pc, #296]	; (3438 <main+0x1a8>)
    330e:	6850      	ldr	r0, [r2, #4]
    3310:	23c0      	movs	r3, #192	; 0xc0
    3312:	009b      	lsls	r3, r3, #2
    3314:	4303      	orrs	r3, r0
    3316:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    3318:	2902      	cmp	r1, #2
    331a:	d90b      	bls.n	3334 <main+0xa4>
    331c:	2903      	cmp	r1, #3
    331e:	d011      	beq.n	3344 <main+0xb4>

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    3320:	2201      	movs	r2, #1
    3322:	4b39      	ldr	r3, [pc, #228]	; (3408 <main+0x178>)
    3324:	701a      	strb	r2, [r3, #0]
    3326:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    332a:	b662      	cpsie	i
  __ASM volatile ("dsb");
    332c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    3330:	bf30      	wfi
    3332:	e027      	b.n	3384 <main+0xf4>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3334:	4a41      	ldr	r2, [pc, #260]	; (343c <main+0x1ac>)
    3336:	6913      	ldr	r3, [r2, #16]
    3338:	2004      	movs	r0, #4
    333a:	4383      	bics	r3, r0
    333c:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    333e:	4b40      	ldr	r3, [pc, #256]	; (3440 <main+0x1b0>)
    3340:	7059      	strb	r1, [r3, #1]
    3342:	e7ed      	b.n	3320 <main+0x90>
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    3344:	4a3d      	ldr	r2, [pc, #244]	; (343c <main+0x1ac>)
    3346:	6913      	ldr	r3, [r2, #16]
    3348:	2104      	movs	r1, #4
    334a:	430b      	orrs	r3, r1
    334c:	6113      	str	r3, [r2, #16]
    334e:	e7e7      	b.n	3320 <main+0x90>
  __ASM volatile ("cpsid i" : : : "memory");
    3350:	b672      	cpsid	i
  __ASM volatile ("dmb");
    3352:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3356:	2300      	movs	r3, #0
    3358:	7033      	strb	r3, [r6, #0]
	while (!(*lock_ptr)) {
    335a:	782b      	ldrb	r3, [r5, #0]
    335c:	2b00      	cmp	r3, #0
    335e:	d10b      	bne.n	3378 <main+0xe8>
    3360:	2100      	movs	r1, #0
    3362:	4a2a      	ldr	r2, [pc, #168]	; (340c <main+0x17c>)
    3364:	e000      	b.n	3368 <main+0xd8>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3366:	0019      	movs	r1, r3
		lock_ptr++;
    3368:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    336a:	1c4b      	adds	r3, r1, #1
    336c:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    336e:	7810      	ldrb	r0, [r2, #0]
    3370:	2800      	cmp	r0, #0
    3372:	d0f8      	beq.n	3366 <main+0xd6>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3374:	2b00      	cmp	r3, #0
    3376:	d119      	bne.n	33ac <main+0x11c>
		cpu_irq_enable();
    3378:	2201      	movs	r2, #1
    337a:	4b23      	ldr	r3, [pc, #140]	; (3408 <main+0x178>)
    337c:	701a      	strb	r2, [r3, #0]
    337e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3382:	b662      	cpsie	i
    3384:	7823      	ldrb	r3, [r4, #0]
    3386:	2b00      	cmp	r3, #0
    3388:	d0e2      	beq.n	3350 <main+0xc0>
			if (!udi_msc_process_trans()) {
    338a:	4b2e      	ldr	r3, [pc, #184]	; (3444 <main+0x1b4>)
    338c:	4798      	blx	r3
    338e:	2800      	cmp	r0, #0
    3390:	d1f8      	bne.n	3384 <main+0xf4>
  __ASM volatile ("cpsid i" : : : "memory");
    3392:	b672      	cpsid	i
    3394:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3398:	2200      	movs	r2, #0
    339a:	4b1b      	ldr	r3, [pc, #108]	; (3408 <main+0x178>)
    339c:	701a      	strb	r2, [r3, #0]
	while (!(*lock_ptr)) {
    339e:	4b1b      	ldr	r3, [pc, #108]	; (340c <main+0x17c>)
    33a0:	781b      	ldrb	r3, [r3, #0]
    33a2:	2b00      	cmp	r3, #0
    33a4:	d19f      	bne.n	32e6 <main+0x56>
    33a6:	2100      	movs	r1, #0
    33a8:	4a18      	ldr	r2, [pc, #96]	; (340c <main+0x17c>)
    33aa:	e794      	b.n	32d6 <main+0x46>
    33ac:	b672      	cpsid	i
    33ae:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    33b2:	2200      	movs	r2, #0
    33b4:	4b14      	ldr	r3, [pc, #80]	; (3408 <main+0x178>)
    33b6:	701a      	strb	r2, [r3, #0]
	uint32_t rev = DSU->DID.reg;
    33b8:	4b1e      	ldr	r3, [pc, #120]	; (3434 <main+0x1a4>)
    33ba:	699b      	ldr	r3, [r3, #24]
	rev = rev >> DSU_DID_REVISION_Pos;
    33bc:	051b      	lsls	r3, r3, #20
    33be:	0f1b      	lsrs	r3, r3, #28
	if (rev < _SYSTEM_MCU_REVISION_D) {
    33c0:	2b02      	cmp	r3, #2
    33c2:	d805      	bhi.n	33d0 <main+0x140>
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    33c4:	4a1c      	ldr	r2, [pc, #112]	; (3438 <main+0x1a8>)
    33c6:	6850      	ldr	r0, [r2, #4]
    33c8:	23c0      	movs	r3, #192	; 0xc0
    33ca:	009b      	lsls	r3, r3, #2
    33cc:	4303      	orrs	r3, r0
    33ce:	6053      	str	r3, [r2, #4]
	switch (sleep_mode) {
    33d0:	2902      	cmp	r1, #2
    33d2:	d90b      	bls.n	33ec <main+0x15c>
    33d4:	2903      	cmp	r1, #3
    33d6:	d011      	beq.n	33fc <main+0x16c>
	cpu_irq_enable();
    33d8:	2201      	movs	r2, #1
    33da:	4b0b      	ldr	r3, [pc, #44]	; (3408 <main+0x178>)
    33dc:	701a      	strb	r2, [r3, #0]
    33de:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    33e2:	b662      	cpsie	i
  __ASM volatile ("dsb");
    33e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    33e8:	bf30      	wfi
    33ea:	e7cb      	b.n	3384 <main+0xf4>
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    33ec:	4a13      	ldr	r2, [pc, #76]	; (343c <main+0x1ac>)
    33ee:	6913      	ldr	r3, [r2, #16]
    33f0:	2004      	movs	r0, #4
    33f2:	4383      	bics	r3, r0
    33f4:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    33f6:	4b12      	ldr	r3, [pc, #72]	; (3440 <main+0x1b0>)
    33f8:	7059      	strb	r1, [r3, #1]
    33fa:	e7ed      	b.n	33d8 <main+0x148>
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    33fc:	4a0f      	ldr	r2, [pc, #60]	; (343c <main+0x1ac>)
    33fe:	6913      	ldr	r3, [r2, #16]
    3400:	2104      	movs	r1, #4
    3402:	430b      	orrs	r3, r1
    3404:	6113      	str	r3, [r2, #16]
    3406:	e7e7      	b.n	33d8 <main+0x148>
    3408:	200000f9 	.word	0x200000f9
    340c:	20000ad8 	.word	0x20000ad8
    3410:	00006081 	.word	0x00006081
    3414:	0000366d 	.word	0x0000366d
    3418:	00003755 	.word	0x00003755
    341c:	00003579 	.word	0x00003579
    3420:	0000032d 	.word	0x0000032d
    3424:	000034a1 	.word	0x000034a1
    3428:	0000370d 	.word	0x0000370d
    342c:	000014d5 	.word	0x000014d5
    3430:	20000289 	.word	0x20000289
    3434:	41002000 	.word	0x41002000
    3438:	41004000 	.word	0x41004000
    343c:	e000ed00 	.word	0xe000ed00
    3440:	40000400 	.word	0x40000400
    3444:	000011f5 	.word	0x000011f5

00003448 <main_suspend_action>:
		}
	}
}

void main_suspend_action(void)
{
    3448:	b510      	push	{r4, lr}
	ui_powerdown();
    344a:	4b01      	ldr	r3, [pc, #4]	; (3450 <main_suspend_action+0x8>)
    344c:	4798      	blx	r3
}
    344e:	bd10      	pop	{r4, pc}
    3450:	00003755 	.word	0x00003755

00003454 <main_resume_action>:

void main_resume_action(void)
{
    3454:	b510      	push	{r4, lr}
	ui_wakeup();
    3456:	4b01      	ldr	r3, [pc, #4]	; (345c <main_resume_action+0x8>)
    3458:	4798      	blx	r3
}
    345a:	bd10      	pop	{r4, pc}
    345c:	00003765 	.word	0x00003765

00003460 <main_sof_action>:

void main_sof_action(void)
{
    3460:	b510      	push	{r4, lr}
	if (!main_b_msc_enable)
    3462:	4b05      	ldr	r3, [pc, #20]	; (3478 <main_sof_action+0x18>)
    3464:	781b      	ldrb	r3, [r3, #0]
    3466:	2b00      	cmp	r3, #0
    3468:	d100      	bne.n	346c <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    346a:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    346c:	4b03      	ldr	r3, [pc, #12]	; (347c <main_sof_action+0x1c>)
    346e:	4798      	blx	r3
    3470:	4b03      	ldr	r3, [pc, #12]	; (3480 <main_sof_action+0x20>)
    3472:	4798      	blx	r3
    3474:	e7f9      	b.n	346a <main_sof_action+0xa>
    3476:	46c0      	nop			; (mov r8, r8)
    3478:	20000289 	.word	0x20000289
    347c:	00002ad1 	.word	0x00002ad1
    3480:	0000377d 	.word	0x0000377d

00003484 <main_msc_enable>:

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
    3484:	2201      	movs	r2, #1
    3486:	4b02      	ldr	r3, [pc, #8]	; (3490 <main_msc_enable+0xc>)
    3488:	701a      	strb	r2, [r3, #0]
	return true;
}
    348a:	2001      	movs	r0, #1
    348c:	4770      	bx	lr
    348e:	46c0      	nop			; (mov r8, r8)
    3490:	20000289 	.word	0x20000289

00003494 <main_msc_disable>:

void main_msc_disable(void)
{
	main_b_msc_enable = false;
    3494:	2200      	movs	r2, #0
    3496:	4b01      	ldr	r3, [pc, #4]	; (349c <main_msc_disable+0x8>)
    3498:	701a      	strb	r2, [r3, #0]
}
    349a:	4770      	bx	lr
    349c:	20000289 	.word	0x20000289

000034a0 <memories_initialization>:
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    34a0:	4770      	bx	lr
	...

000034a4 <ui_button1_callback>:
    34a4:	4b0b      	ldr	r3, [pc, #44]	; (34d4 <ui_button1_callback+0x30>)
    34a6:	6a1b      	ldr	r3, [r3, #32]
}

void ui_button1_callback(void)
{
	bool press_state = !port_pin_get_input_level(UI_BUT_1_PIN);
	if(press_state) {
    34a8:	00db      	lsls	r3, r3, #3
    34aa:	d40a      	bmi.n	34c2 <ui_button1_callback+0x1e>
		if(recording_on) {
    34ac:	4b0a      	ldr	r3, [pc, #40]	; (34d8 <ui_button1_callback+0x34>)
    34ae:	781b      	ldrb	r3, [r3, #0]
    34b0:	2b00      	cmp	r3, #0
    34b2:	d107      	bne.n	34c4 <ui_button1_callback+0x20>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    34b4:	2280      	movs	r2, #128	; 0x80
    34b6:	0152      	lsls	r2, r2, #5
    34b8:	4b06      	ldr	r3, [pc, #24]	; (34d4 <ui_button1_callback+0x30>)
    34ba:	615a      	str	r2, [r3, #20]
			port_pin_set_output_level(UI_LED_1_PIN, UI_LED_INACTIVE);
			recording_on = false;
		}
		else {
			port_pin_set_output_level(UI_LED_1_PIN, UI_LED_ACTIVE);
			recording_on = true;
    34bc:	2201      	movs	r2, #1
    34be:	4b06      	ldr	r3, [pc, #24]	; (34d8 <ui_button1_callback+0x34>)
    34c0:	701a      	strb	r2, [r3, #0]
		}
	}
}
    34c2:	4770      	bx	lr
		port_base->OUTSET.reg = pin_mask;
    34c4:	2280      	movs	r2, #128	; 0x80
    34c6:	0152      	lsls	r2, r2, #5
    34c8:	4b02      	ldr	r3, [pc, #8]	; (34d4 <ui_button1_callback+0x30>)
    34ca:	619a      	str	r2, [r3, #24]
			recording_on = false;
    34cc:	2200      	movs	r2, #0
    34ce:	4b02      	ldr	r3, [pc, #8]	; (34d8 <ui_button1_callback+0x34>)
    34d0:	701a      	strb	r2, [r3, #0]
    34d2:	e7f6      	b.n	34c2 <ui_button1_callback+0x1e>
    34d4:	41004400 	.word	0x41004400
    34d8:	2000028b 	.word	0x2000028b

000034dc <ui_button2_callback>:
	return (port_base->IN.reg & pin_mask);
    34dc:	4b06      	ldr	r3, [pc, #24]	; (34f8 <ui_button2_callback+0x1c>)
    34de:	6a1b      	ldr	r3, [r3, #32]
	if (level) {
    34e0:	075b      	lsls	r3, r3, #29
    34e2:	d404      	bmi.n	34ee <ui_button2_callback+0x12>
		port_base->OUTCLR.reg = pin_mask;
    34e4:	2280      	movs	r2, #128	; 0x80
    34e6:	0192      	lsls	r2, r2, #6
    34e8:	4b03      	ldr	r3, [pc, #12]	; (34f8 <ui_button2_callback+0x1c>)
    34ea:	615a      	str	r2, [r3, #20]

void ui_button2_callback(void)
{
	bool pin_state = port_pin_get_input_level(UI_BUT_2_PIN);
	port_pin_set_output_level(UI_LED_2_PIN, pin_state);
}
    34ec:	4770      	bx	lr
		port_base->OUTSET.reg = pin_mask;
    34ee:	2280      	movs	r2, #128	; 0x80
    34f0:	0192      	lsls	r2, r2, #6
    34f2:	4b01      	ldr	r3, [pc, #4]	; (34f8 <ui_button2_callback+0x1c>)
    34f4:	619a      	str	r2, [r3, #24]
    34f6:	e7f9      	b.n	34ec <ui_button2_callback+0x10>
    34f8:	41004400 	.word	0x41004400

000034fc <ui_button3_callback>:
	return (port_base->IN.reg & pin_mask);
    34fc:	4b0b      	ldr	r3, [pc, #44]	; (352c <ui_button3_callback+0x30>)
    34fe:	6a1b      	ldr	r3, [r3, #32]

void ui_button3_callback(void)
{
	bool press_state = !port_pin_get_input_level(UI_BUT_3_PIN);
	if(press_state) {
    3500:	071b      	lsls	r3, r3, #28
    3502:	d40a      	bmi.n	351a <ui_button3_callback+0x1e>
		if(monitoring_on) {
    3504:	4b0a      	ldr	r3, [pc, #40]	; (3530 <ui_button3_callback+0x34>)
    3506:	781b      	ldrb	r3, [r3, #0]
    3508:	2b00      	cmp	r3, #0
    350a:	d107      	bne.n	351c <ui_button3_callback+0x20>
		port_base->OUTCLR.reg = pin_mask;
    350c:	2280      	movs	r2, #128	; 0x80
    350e:	0212      	lsls	r2, r2, #8
    3510:	4b06      	ldr	r3, [pc, #24]	; (352c <ui_button3_callback+0x30>)
    3512:	615a      	str	r2, [r3, #20]
			port_pin_set_output_level(UI_LED_3_PIN, UI_LED_INACTIVE);
			monitoring_on = false;
		}
		else {
			port_pin_set_output_level(UI_LED_3_PIN, UI_LED_ACTIVE);
			monitoring_on = true;
    3514:	2201      	movs	r2, #1
    3516:	4b06      	ldr	r3, [pc, #24]	; (3530 <ui_button3_callback+0x34>)
    3518:	701a      	strb	r2, [r3, #0]
		}
	}
}
    351a:	4770      	bx	lr
		port_base->OUTSET.reg = pin_mask;
    351c:	2280      	movs	r2, #128	; 0x80
    351e:	0212      	lsls	r2, r2, #8
    3520:	4b02      	ldr	r3, [pc, #8]	; (352c <ui_button3_callback+0x30>)
    3522:	619a      	str	r2, [r3, #24]
			monitoring_on = false;
    3524:	2200      	movs	r2, #0
    3526:	4b02      	ldr	r3, [pc, #8]	; (3530 <ui_button3_callback+0x34>)
    3528:	701a      	strb	r2, [r3, #0]
    352a:	e7f6      	b.n	351a <ui_button3_callback+0x1e>
    352c:	41004400 	.word	0x41004400
    3530:	2000028a 	.word	0x2000028a

00003534 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3534:	b570      	push	{r4, r5, r6, lr}
    3536:	b082      	sub	sp, #8
    3538:	0005      	movs	r5, r0
    353a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    353c:	2200      	movs	r2, #0
    353e:	466b      	mov	r3, sp
    3540:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3542:	4c06      	ldr	r4, [pc, #24]	; (355c <usart_serial_getchar+0x28>)
    3544:	466b      	mov	r3, sp
    3546:	1d99      	adds	r1, r3, #6
    3548:	0028      	movs	r0, r5
    354a:	47a0      	blx	r4
    354c:	2800      	cmp	r0, #0
    354e:	d1f9      	bne.n	3544 <usart_serial_getchar+0x10>

	*c = temp;
    3550:	466b      	mov	r3, sp
    3552:	3306      	adds	r3, #6
    3554:	881b      	ldrh	r3, [r3, #0]
    3556:	7033      	strb	r3, [r6, #0]
}
    3558:	b002      	add	sp, #8
    355a:	bd70      	pop	{r4, r5, r6, pc}
    355c:	00001f15 	.word	0x00001f15

00003560 <usart_serial_putchar>:
{
    3560:	b570      	push	{r4, r5, r6, lr}
    3562:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3564:	b28c      	uxth	r4, r1
    3566:	4e03      	ldr	r6, [pc, #12]	; (3574 <usart_serial_putchar+0x14>)
    3568:	0021      	movs	r1, r4
    356a:	0028      	movs	r0, r5
    356c:	47b0      	blx	r6
    356e:	2800      	cmp	r0, #0
    3570:	d1fa      	bne.n	3568 <usart_serial_putchar+0x8>
}
    3572:	bd70      	pop	{r4, r5, r6, pc}
    3574:	00001ee9 	.word	0x00001ee9

00003578 <ui_cdc_init>:
{
    3578:	b5f0      	push	{r4, r5, r6, r7, lr}
    357a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    357c:	2380      	movs	r3, #128	; 0x80
    357e:	05db      	lsls	r3, r3, #23
    3580:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3582:	2300      	movs	r3, #0
    3584:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3586:	22ff      	movs	r2, #255	; 0xff
    3588:	4669      	mov	r1, sp
    358a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    358c:	2200      	movs	r2, #0
    358e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3590:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3592:	2401      	movs	r4, #1
    3594:	2124      	movs	r1, #36	; 0x24
    3596:	4668      	mov	r0, sp
    3598:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    359a:	3101      	adds	r1, #1
    359c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    359e:	3101      	adds	r1, #1
    35a0:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    35a2:	3101      	adds	r1, #1
    35a4:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    35a6:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    35a8:	3105      	adds	r1, #5
    35aa:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    35ac:	3101      	adds	r1, #1
    35ae:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    35b0:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    35b2:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    35b4:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    35b6:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    35b8:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    35ba:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    35bc:	2313      	movs	r3, #19
    35be:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    35c0:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = UI_CDC_MUX_SETTING;
    35c2:	2380      	movs	r3, #128	; 0x80
    35c4:	035b      	lsls	r3, r3, #13
    35c6:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = UI_CDC_PINMUX_PAD0;
    35c8:	4b1a      	ldr	r3, [pc, #104]	; (3634 <ui_cdc_init+0xbc>)
    35ca:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = UI_CDC_PINMUX_PAD1;
    35cc:	4b1a      	ldr	r3, [pc, #104]	; (3638 <ui_cdc_init+0xc0>)
    35ce:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = UI_CDC_PINMUX_PAD2;
    35d0:	2301      	movs	r3, #1
    35d2:	425b      	negs	r3, r3
    35d4:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = UI_CDC_PINMUX_PAD3;
    35d6:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_CDC_BAUDRATE;
    35d8:	23e1      	movs	r3, #225	; 0xe1
    35da:	025b      	lsls	r3, r3, #9
    35dc:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    35de:	4d17      	ldr	r5, [pc, #92]	; (363c <ui_cdc_init+0xc4>)
    35e0:	4b17      	ldr	r3, [pc, #92]	; (3640 <ui_cdc_init+0xc8>)
    35e2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    35e4:	4a17      	ldr	r2, [pc, #92]	; (3644 <ui_cdc_init+0xcc>)
    35e6:	4b18      	ldr	r3, [pc, #96]	; (3648 <ui_cdc_init+0xd0>)
    35e8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    35ea:	4a18      	ldr	r2, [pc, #96]	; (364c <ui_cdc_init+0xd4>)
    35ec:	4b18      	ldr	r3, [pc, #96]	; (3650 <ui_cdc_init+0xd8>)
    35ee:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    35f0:	466a      	mov	r2, sp
    35f2:	4918      	ldr	r1, [pc, #96]	; (3654 <ui_cdc_init+0xdc>)
    35f4:	0028      	movs	r0, r5
    35f6:	4b18      	ldr	r3, [pc, #96]	; (3658 <ui_cdc_init+0xe0>)
    35f8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    35fa:	4f18      	ldr	r7, [pc, #96]	; (365c <ui_cdc_init+0xe4>)
    35fc:	683b      	ldr	r3, [r7, #0]
    35fe:	6898      	ldr	r0, [r3, #8]
    3600:	2100      	movs	r1, #0
    3602:	4e17      	ldr	r6, [pc, #92]	; (3660 <ui_cdc_init+0xe8>)
    3604:	47b0      	blx	r6
	setbuf(stdin, NULL);
    3606:	683b      	ldr	r3, [r7, #0]
    3608:	6858      	ldr	r0, [r3, #4]
    360a:	2100      	movs	r1, #0
    360c:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    360e:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3610:	0030      	movs	r0, r6
    3612:	4b14      	ldr	r3, [pc, #80]	; (3664 <ui_cdc_init+0xec>)
    3614:	4798      	blx	r3
    3616:	231f      	movs	r3, #31
    3618:	4018      	ands	r0, r3
    361a:	4084      	lsls	r4, r0
    361c:	4b12      	ldr	r3, [pc, #72]	; (3668 <ui_cdc_init+0xf0>)
    361e:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3620:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3622:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3624:	2b00      	cmp	r3, #0
    3626:	d1fc      	bne.n	3622 <ui_cdc_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3628:	6833      	ldr	r3, [r6, #0]
    362a:	2202      	movs	r2, #2
    362c:	4313      	orrs	r3, r2
    362e:	6033      	str	r3, [r6, #0]
}
    3630:	b011      	add	sp, #68	; 0x44
    3632:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3634:	00160002 	.word	0x00160002
    3638:	00170002 	.word	0x00170002
    363c:	2000059c 	.word	0x2000059c
    3640:	2000058c 	.word	0x2000058c
    3644:	00003561 	.word	0x00003561
    3648:	20000588 	.word	0x20000588
    364c:	00003535 	.word	0x00003535
    3650:	20000584 	.word	0x20000584
    3654:	42001400 	.word	0x42001400
    3658:	00001ba5 	.word	0x00001ba5
    365c:	200000fc 	.word	0x200000fc
    3660:	000067cb 	.word	0x000067cb
    3664:	00001b15 	.word	0x00001b15
    3668:	e000e100 	.word	0xe000e100

0000366c <ui_lb_init>:
{
    366c:	b5f0      	push	{r4, r5, r6, r7, lr}
    366e:	46c6      	mov	lr, r8
    3670:	b500      	push	{lr}
    3672:	b084      	sub	sp, #16
	config->input_pull = PORT_PIN_PULL_UP;
    3674:	ac03      	add	r4, sp, #12
    3676:	2501      	movs	r5, #1
    3678:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    367a:	2600      	movs	r6, #0
    367c:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    367e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(UI_LED_1_PIN, &pin_conf);
    3680:	0021      	movs	r1, r4
    3682:	200c      	movs	r0, #12
    3684:	4b1c      	ldr	r3, [pc, #112]	; (36f8 <ui_lb_init+0x8c>)
    3686:	4698      	mov	r8, r3
    3688:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    368a:	4f1c      	ldr	r7, [pc, #112]	; (36fc <ui_lb_init+0x90>)
    368c:	2380      	movs	r3, #128	; 0x80
    368e:	015b      	lsls	r3, r3, #5
    3690:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_2_PIN, &pin_conf);
    3692:	0021      	movs	r1, r4
    3694:	200d      	movs	r0, #13
    3696:	47c0      	blx	r8
    3698:	2380      	movs	r3, #128	; 0x80
    369a:	019b      	lsls	r3, r3, #6
    369c:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_3_PIN, &pin_conf);
    369e:	0021      	movs	r1, r4
    36a0:	200f      	movs	r0, #15
    36a2:	47c0      	blx	r8
    36a4:	2380      	movs	r3, #128	; 0x80
    36a6:	021b      	lsls	r3, r3, #8
    36a8:	61bb      	str	r3, [r7, #24]
	extint_chan_get_config_defaults(&config_extint_chan);
    36aa:	4668      	mov	r0, sp
    36ac:	4b14      	ldr	r3, [pc, #80]	; (3700 <ui_lb_init+0x94>)
    36ae:	4798      	blx	r3
	config_extint_chan.gpio_pin = UI_BUT_1_EIC_PIN;
    36b0:	231c      	movs	r3, #28
    36b2:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_1_EIC_MUX;
    36b4:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    36b6:	466b      	mov	r3, sp
    36b8:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    36ba:	2403      	movs	r4, #3
    36bc:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_1_EIC_LINE, &config_extint_chan);
    36be:	4669      	mov	r1, sp
    36c0:	2008      	movs	r0, #8
    36c2:	4f10      	ldr	r7, [pc, #64]	; (3704 <ui_lb_init+0x98>)
    36c4:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_2_EIC_PIN;
    36c6:	2302      	movs	r3, #2
    36c8:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_2_EIC_MUX;
    36ca:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    36cc:	466b      	mov	r3, sp
    36ce:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    36d0:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_2_EIC_LINE, &config_extint_chan);
    36d2:	4669      	mov	r1, sp
    36d4:	2002      	movs	r0, #2
    36d6:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_3_EIC_PIN;
    36d8:	9400      	str	r4, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_3_EIC_MUX;
    36da:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    36dc:	466b      	mov	r3, sp
    36de:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    36e0:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_3_EIC_LINE, &config_extint_chan);
    36e2:	4669      	mov	r1, sp
    36e4:	2003      	movs	r0, #3
    36e6:	47b8      	blx	r7
		port_base->OUTCLR.reg = pin_mask;
    36e8:	2280      	movs	r2, #128	; 0x80
    36ea:	05d2      	lsls	r2, r2, #23
    36ec:	4b06      	ldr	r3, [pc, #24]	; (3708 <ui_lb_init+0x9c>)
    36ee:	615a      	str	r2, [r3, #20]
}
    36f0:	b004      	add	sp, #16
    36f2:	bc04      	pop	{r2}
    36f4:	4690      	mov	r8, r2
    36f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36f8:	00005cf9 	.word	0x00005cf9
    36fc:	41004400 	.word	0x41004400
    3700:	00001a49 	.word	0x00001a49
    3704:	00001a5d 	.word	0x00001a5d
    3708:	41004480 	.word	0x41004480

0000370c <ui_configure_callback>:
{
    370c:	b510      	push	{r4, lr}
	extint_register_callback(ui_button1_callback, UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    370e:	2200      	movs	r2, #0
    3710:	2108      	movs	r1, #8
    3712:	480b      	ldr	r0, [pc, #44]	; (3740 <ui_configure_callback+0x34>)
    3714:	4c0b      	ldr	r4, [pc, #44]	; (3744 <ui_configure_callback+0x38>)
    3716:	47a0      	blx	r4
	extint_register_callback(ui_button2_callback, UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3718:	2200      	movs	r2, #0
    371a:	2102      	movs	r1, #2
    371c:	480a      	ldr	r0, [pc, #40]	; (3748 <ui_configure_callback+0x3c>)
    371e:	47a0      	blx	r4
	extint_register_callback(ui_button3_callback, UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3720:	2200      	movs	r2, #0
    3722:	2103      	movs	r1, #3
    3724:	4809      	ldr	r0, [pc, #36]	; (374c <ui_configure_callback+0x40>)
    3726:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3728:	2100      	movs	r1, #0
    372a:	2008      	movs	r0, #8
    372c:	4c08      	ldr	r4, [pc, #32]	; (3750 <ui_configure_callback+0x44>)
    372e:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3730:	2100      	movs	r1, #0
    3732:	2002      	movs	r0, #2
    3734:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3736:	2100      	movs	r1, #0
    3738:	2003      	movs	r0, #3
    373a:	47a0      	blx	r4
}
    373c:	bd10      	pop	{r4, pc}
    373e:	46c0      	nop			; (mov r8, r8)
    3740:	000034a5 	.word	0x000034a5
    3744:	0000463d 	.word	0x0000463d
    3748:	000034dd 	.word	0x000034dd
    374c:	000034fd 	.word	0x000034fd
    3750:	00004669 	.word	0x00004669

00003754 <ui_powerdown>:
		port_base->OUTSET.reg = pin_mask;
    3754:	2280      	movs	r2, #128	; 0x80
    3756:	05d2      	lsls	r2, r2, #23
    3758:	4b01      	ldr	r3, [pc, #4]	; (3760 <ui_powerdown+0xc>)
    375a:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    375c:	4770      	bx	lr
    375e:	46c0      	nop			; (mov r8, r8)
    3760:	41004480 	.word	0x41004480

00003764 <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
    3764:	2280      	movs	r2, #128	; 0x80
    3766:	05d2      	lsls	r2, r2, #23
    3768:	4b01      	ldr	r3, [pc, #4]	; (3770 <ui_wakeup+0xc>)
    376a:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    376c:	4770      	bx	lr
    376e:	46c0      	nop			; (mov r8, r8)
    3770:	41004480 	.word	0x41004480

00003774 <ui_start_read>:

void ui_start_read(void)
{
}
    3774:	4770      	bx	lr

00003776 <ui_stop_read>:

void ui_stop_read(void)
{
}
    3776:	4770      	bx	lr

00003778 <ui_start_write>:

void ui_start_write(void)
{
}
    3778:	4770      	bx	lr

0000377a <ui_stop_write>:

void ui_stop_write(void)
{
}
    377a:	4770      	bx	lr

0000377c <ui_process>:

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
    377c:	2800      	cmp	r0, #0
    377e:	d104      	bne.n	378a <ui_process+0xe>
    3780:	2280      	movs	r2, #128	; 0x80
    3782:	05d2      	lsls	r2, r2, #23
    3784:	4b05      	ldr	r3, [pc, #20]	; (379c <ui_process+0x20>)
    3786:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if (1000 == framenumber) {
		LED_Off(LED_0_PIN);
	}
}
    3788:	4770      	bx	lr
	if (1000 == framenumber) {
    378a:	23fa      	movs	r3, #250	; 0xfa
    378c:	009b      	lsls	r3, r3, #2
    378e:	4298      	cmp	r0, r3
    3790:	d1fa      	bne.n	3788 <ui_process+0xc>
		port_base->OUTSET.reg = pin_mask;
    3792:	2280      	movs	r2, #128	; 0x80
    3794:	05d2      	lsls	r2, r2, #23
    3796:	4b01      	ldr	r3, [pc, #4]	; (379c <ui_process+0x20>)
    3798:	619a      	str	r2, [r3, #24]
}
    379a:	e7f5      	b.n	3788 <ui_process+0xc>
    379c:	41004480 	.word	0x41004480

000037a0 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    37a0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    37a2:	000b      	movs	r3, r1
    37a4:	332e      	adds	r3, #46	; 0x2e
    37a6:	009b      	lsls	r3, r3, #2
    37a8:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    37aa:	22aa      	movs	r2, #170	; 0xaa
    37ac:	0052      	lsls	r2, r2, #1
    37ae:	0049      	lsls	r1, r1, #1
    37b0:	5a83      	ldrh	r3, [r0, r2]
    37b2:	4c03      	ldr	r4, [pc, #12]	; (37c0 <usb_device_register_callback+0x20>)
    37b4:	5b09      	ldrh	r1, [r1, r4]
    37b6:	430b      	orrs	r3, r1
    37b8:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    37ba:	2000      	movs	r0, #0
    37bc:	bd10      	pop	{r4, pc}
    37be:	46c0      	nop			; (mov r8, r8)
    37c0:	000071f8 	.word	0x000071f8

000037c4 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    37c4:	0049      	lsls	r1, r1, #1
    37c6:	4b06      	ldr	r3, [pc, #24]	; (37e0 <usb_device_enable_callback+0x1c>)
    37c8:	5acb      	ldrh	r3, [r1, r3]
    37ca:	6802      	ldr	r2, [r0, #0]
    37cc:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    37ce:	21ab      	movs	r1, #171	; 0xab
    37d0:	0049      	lsls	r1, r1, #1
    37d2:	5a42      	ldrh	r2, [r0, r1]
    37d4:	431a      	orrs	r2, r3
    37d6:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    37d8:	6802      	ldr	r2, [r0, #0]
    37da:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    37dc:	2000      	movs	r0, #0
    37de:	4770      	bx	lr
    37e0:	000071f8 	.word	0x000071f8

000037e4 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    37e4:	0049      	lsls	r1, r1, #1
    37e6:	4b05      	ldr	r3, [pc, #20]	; (37fc <usb_device_disable_callback+0x18>)
    37e8:	5aca      	ldrh	r2, [r1, r3]
    37ea:	21ab      	movs	r1, #171	; 0xab
    37ec:	0049      	lsls	r1, r1, #1
    37ee:	5a43      	ldrh	r3, [r0, r1]
    37f0:	4393      	bics	r3, r2
    37f2:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    37f4:	6803      	ldr	r3, [r0, #0]
    37f6:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    37f8:	2000      	movs	r0, #0
    37fa:	4770      	bx	lr
    37fc:	000071f8 	.word	0x000071f8

00003800 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    3800:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    3802:	008c      	lsls	r4, r1, #2
    3804:	18a4      	adds	r4, r4, r2
    3806:	3434      	adds	r4, #52	; 0x34
    3808:	00a4      	lsls	r4, r4, #2
    380a:	1904      	adds	r4, r0, r4
    380c:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    380e:	1840      	adds	r0, r0, r1
    3810:	3059      	adds	r0, #89	; 0x59
    3812:	30ff      	adds	r0, #255	; 0xff
    3814:	7803      	ldrb	r3, [r0, #0]
    3816:	4903      	ldr	r1, [pc, #12]	; (3824 <usb_device_endpoint_register_callback+0x24>)
    3818:	5c8a      	ldrb	r2, [r1, r2]
    381a:	4313      	orrs	r3, r2
    381c:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    381e:	2000      	movs	r0, #0
    3820:	bd10      	pop	{r4, pc}
    3822:	46c0      	nop			; (mov r8, r8)
    3824:	00007208 	.word	0x00007208

00003828 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    3828:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    382a:	008b      	lsls	r3, r1, #2
    382c:	189b      	adds	r3, r3, r2
    382e:	3334      	adds	r3, #52	; 0x34
    3830:	009b      	lsls	r3, r3, #2
    3832:	18c3      	adds	r3, r0, r3
    3834:	2400      	movs	r4, #0
    3836:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3838:	1840      	adds	r0, r0, r1
    383a:	3059      	adds	r0, #89	; 0x59
    383c:	30ff      	adds	r0, #255	; 0xff
    383e:	4b03      	ldr	r3, [pc, #12]	; (384c <usb_device_endpoint_unregister_callback+0x24>)
    3840:	5c9a      	ldrb	r2, [r3, r2]
    3842:	7803      	ldrb	r3, [r0, #0]
    3844:	4393      	bics	r3, r2
    3846:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    3848:	2000      	movs	r0, #0
    384a:	bd10      	pop	{r4, pc}
    384c:	00007208 	.word	0x00007208

00003850 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3850:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3852:	230f      	movs	r3, #15
    3854:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3856:	18c4      	adds	r4, r0, r3
    3858:	3461      	adds	r4, #97	; 0x61
    385a:	34ff      	adds	r4, #255	; 0xff
    385c:	7825      	ldrb	r5, [r4, #0]
    385e:	4e2f      	ldr	r6, [pc, #188]	; (391c <usb_device_endpoint_enable_callback+0xcc>)
    3860:	5cb6      	ldrb	r6, [r6, r2]
    3862:	4335      	orrs	r5, r6
    3864:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3866:	2a00      	cmp	r2, #0
    3868:	d129      	bne.n	38be <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    386a:	2b00      	cmp	r3, #0
    386c:	d112      	bne.n	3894 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    386e:	2503      	movs	r5, #3
    3870:	240a      	movs	r4, #10
    3872:	34ff      	adds	r4, #255	; 0xff
    3874:	6806      	ldr	r6, [r0, #0]
    3876:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3878:	2a03      	cmp	r2, #3
    387a:	d109      	bne.n	3890 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    387c:	b249      	sxtb	r1, r1
    387e:	2900      	cmp	r1, #0
    3880:	db44      	blt.n	390c <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    3882:	6802      	ldr	r2, [r0, #0]
    3884:	015b      	lsls	r3, r3, #5
    3886:	18d3      	adds	r3, r2, r3
    3888:	330a      	adds	r3, #10
    388a:	33ff      	adds	r3, #255	; 0xff
    388c:	2220      	movs	r2, #32
    388e:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3890:	2000      	movs	r0, #0
    3892:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3894:	b24c      	sxtb	r4, r1
    3896:	2c00      	cmp	r4, #0
    3898:	db08      	blt.n	38ac <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    389a:	015c      	lsls	r4, r3, #5
    389c:	6805      	ldr	r5, [r0, #0]
    389e:	46ac      	mov	ip, r5
    38a0:	4464      	add	r4, ip
    38a2:	340a      	adds	r4, #10
    38a4:	34ff      	adds	r4, #255	; 0xff
    38a6:	2501      	movs	r5, #1
    38a8:	7025      	strb	r5, [r4, #0]
    38aa:	e7e5      	b.n	3878 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    38ac:	015c      	lsls	r4, r3, #5
    38ae:	6805      	ldr	r5, [r0, #0]
    38b0:	46ac      	mov	ip, r5
    38b2:	4464      	add	r4, ip
    38b4:	340a      	adds	r4, #10
    38b6:	34ff      	adds	r4, #255	; 0xff
    38b8:	2502      	movs	r5, #2
    38ba:	7025      	strb	r5, [r4, #0]
    38bc:	e7dc      	b.n	3878 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    38be:	2a01      	cmp	r2, #1
    38c0:	d11a      	bne.n	38f8 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    38c2:	2b00      	cmp	r3, #0
    38c4:	d105      	bne.n	38d2 <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    38c6:	6802      	ldr	r2, [r0, #0]
    38c8:	210c      	movs	r1, #12
    38ca:	230a      	movs	r3, #10
    38cc:	33ff      	adds	r3, #255	; 0xff
    38ce:	54d1      	strb	r1, [r2, r3]
    38d0:	e7de      	b.n	3890 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    38d2:	b249      	sxtb	r1, r1
    38d4:	2900      	cmp	r1, #0
    38d6:	db07      	blt.n	38e8 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    38d8:	6802      	ldr	r2, [r0, #0]
    38da:	015b      	lsls	r3, r3, #5
    38dc:	18d3      	adds	r3, r2, r3
    38de:	330a      	adds	r3, #10
    38e0:	33ff      	adds	r3, #255	; 0xff
    38e2:	2204      	movs	r2, #4
    38e4:	701a      	strb	r2, [r3, #0]
    38e6:	e7d3      	b.n	3890 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    38e8:	6802      	ldr	r2, [r0, #0]
    38ea:	015b      	lsls	r3, r3, #5
    38ec:	18d3      	adds	r3, r2, r3
    38ee:	330a      	adds	r3, #10
    38f0:	33ff      	adds	r3, #255	; 0xff
    38f2:	2208      	movs	r2, #8
    38f4:	701a      	strb	r2, [r3, #0]
    38f6:	e7cb      	b.n	3890 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    38f8:	2a02      	cmp	r2, #2
    38fa:	d1bd      	bne.n	3878 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    38fc:	6802      	ldr	r2, [r0, #0]
    38fe:	015b      	lsls	r3, r3, #5
    3900:	18d3      	adds	r3, r2, r3
    3902:	330a      	adds	r3, #10
    3904:	33ff      	adds	r3, #255	; 0xff
    3906:	2210      	movs	r2, #16
    3908:	701a      	strb	r2, [r3, #0]
    390a:	e7c1      	b.n	3890 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    390c:	6802      	ldr	r2, [r0, #0]
    390e:	015b      	lsls	r3, r3, #5
    3910:	18d3      	adds	r3, r2, r3
    3912:	330a      	adds	r3, #10
    3914:	33ff      	adds	r3, #255	; 0xff
    3916:	2240      	movs	r2, #64	; 0x40
    3918:	701a      	strb	r2, [r3, #0]
    391a:	e7b9      	b.n	3890 <usb_device_endpoint_enable_callback+0x40>
    391c:	00007208 	.word	0x00007208

00003920 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3920:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3922:	230f      	movs	r3, #15
    3924:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3926:	18c4      	adds	r4, r0, r3
    3928:	3461      	adds	r4, #97	; 0x61
    392a:	34ff      	adds	r4, #255	; 0xff
    392c:	4d2f      	ldr	r5, [pc, #188]	; (39ec <usb_device_endpoint_disable_callback+0xcc>)
    392e:	5cae      	ldrb	r6, [r5, r2]
    3930:	7825      	ldrb	r5, [r4, #0]
    3932:	43b5      	bics	r5, r6
    3934:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3936:	2a00      	cmp	r2, #0
    3938:	d129      	bne.n	398e <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    393a:	2b00      	cmp	r3, #0
    393c:	d112      	bne.n	3964 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    393e:	2503      	movs	r5, #3
    3940:	2484      	movs	r4, #132	; 0x84
    3942:	0064      	lsls	r4, r4, #1
    3944:	6806      	ldr	r6, [r0, #0]
    3946:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3948:	2a03      	cmp	r2, #3
    394a:	d109      	bne.n	3960 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    394c:	b249      	sxtb	r1, r1
    394e:	2900      	cmp	r1, #0
    3950:	db44      	blt.n	39dc <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    3952:	6802      	ldr	r2, [r0, #0]
    3954:	015b      	lsls	r3, r3, #5
    3956:	18d3      	adds	r3, r2, r3
    3958:	3309      	adds	r3, #9
    395a:	33ff      	adds	r3, #255	; 0xff
    395c:	2220      	movs	r2, #32
    395e:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3960:	2000      	movs	r0, #0
    3962:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3964:	b24c      	sxtb	r4, r1
    3966:	2c00      	cmp	r4, #0
    3968:	db08      	blt.n	397c <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    396a:	015c      	lsls	r4, r3, #5
    396c:	6805      	ldr	r5, [r0, #0]
    396e:	46ac      	mov	ip, r5
    3970:	4464      	add	r4, ip
    3972:	3409      	adds	r4, #9
    3974:	34ff      	adds	r4, #255	; 0xff
    3976:	2501      	movs	r5, #1
    3978:	7025      	strb	r5, [r4, #0]
    397a:	e7e5      	b.n	3948 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    397c:	015c      	lsls	r4, r3, #5
    397e:	6805      	ldr	r5, [r0, #0]
    3980:	46ac      	mov	ip, r5
    3982:	4464      	add	r4, ip
    3984:	3409      	adds	r4, #9
    3986:	34ff      	adds	r4, #255	; 0xff
    3988:	2502      	movs	r5, #2
    398a:	7025      	strb	r5, [r4, #0]
    398c:	e7dc      	b.n	3948 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    398e:	2a01      	cmp	r2, #1
    3990:	d11a      	bne.n	39c8 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    3992:	2b00      	cmp	r3, #0
    3994:	d105      	bne.n	39a2 <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    3996:	6802      	ldr	r2, [r0, #0]
    3998:	210c      	movs	r1, #12
    399a:	3309      	adds	r3, #9
    399c:	33ff      	adds	r3, #255	; 0xff
    399e:	54d1      	strb	r1, [r2, r3]
    39a0:	e7de      	b.n	3960 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    39a2:	b249      	sxtb	r1, r1
    39a4:	2900      	cmp	r1, #0
    39a6:	db07      	blt.n	39b8 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    39a8:	6802      	ldr	r2, [r0, #0]
    39aa:	015b      	lsls	r3, r3, #5
    39ac:	18d3      	adds	r3, r2, r3
    39ae:	3309      	adds	r3, #9
    39b0:	33ff      	adds	r3, #255	; 0xff
    39b2:	2204      	movs	r2, #4
    39b4:	701a      	strb	r2, [r3, #0]
    39b6:	e7d3      	b.n	3960 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    39b8:	6802      	ldr	r2, [r0, #0]
    39ba:	015b      	lsls	r3, r3, #5
    39bc:	18d3      	adds	r3, r2, r3
    39be:	3309      	adds	r3, #9
    39c0:	33ff      	adds	r3, #255	; 0xff
    39c2:	2208      	movs	r2, #8
    39c4:	701a      	strb	r2, [r3, #0]
    39c6:	e7cb      	b.n	3960 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    39c8:	2a02      	cmp	r2, #2
    39ca:	d1bd      	bne.n	3948 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    39cc:	6802      	ldr	r2, [r0, #0]
    39ce:	015b      	lsls	r3, r3, #5
    39d0:	18d3      	adds	r3, r2, r3
    39d2:	3309      	adds	r3, #9
    39d4:	33ff      	adds	r3, #255	; 0xff
    39d6:	2210      	movs	r2, #16
    39d8:	701a      	strb	r2, [r3, #0]
    39da:	e7c1      	b.n	3960 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    39dc:	6802      	ldr	r2, [r0, #0]
    39de:	015b      	lsls	r3, r3, #5
    39e0:	18d3      	adds	r3, r2, r3
    39e2:	3309      	adds	r3, #9
    39e4:	33ff      	adds	r3, #255	; 0xff
    39e6:	2240      	movs	r2, #64	; 0x40
    39e8:	701a      	strb	r2, [r3, #0]
    39ea:	e7b9      	b.n	3960 <usb_device_endpoint_disable_callback+0x40>
    39ec:	00007208 	.word	0x00007208

000039f0 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    39f0:	2300      	movs	r3, #0
    39f2:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    39f4:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    39f6:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    39f8:	3301      	adds	r3, #1
    39fa:	70c3      	strb	r3, [r0, #3]
}
    39fc:	4770      	bx	lr
	...

00003a00 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    3a00:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    3a02:	780c      	ldrb	r4, [r1, #0]
    3a04:	230f      	movs	r3, #15
    3a06:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3a08:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    3a0a:	78ca      	ldrb	r2, [r1, #3]
    3a0c:	2a04      	cmp	r2, #4
    3a0e:	d870      	bhi.n	3af2 <usb_device_endpoint_set_config+0xf2>
    3a10:	0092      	lsls	r2, r2, #2
    3a12:	4d89      	ldr	r5, [pc, #548]	; (3c38 <usb_device_endpoint_set_config+0x238>)
    3a14:	58aa      	ldr	r2, [r5, r2]
    3a16:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    3a18:	6802      	ldr	r2, [r0, #0]
    3a1a:	3308      	adds	r3, #8
    3a1c:	015b      	lsls	r3, r3, #5
    3a1e:	2100      	movs	r1, #0
    3a20:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    3a22:	2200      	movs	r2, #0
    3a24:	e082      	b.n	3b2c <usb_device_endpoint_set_config+0x12c>
    3a26:	015c      	lsls	r4, r3, #5
    3a28:	6802      	ldr	r2, [r0, #0]
    3a2a:	4694      	mov	ip, r2
    3a2c:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3a2e:	2280      	movs	r2, #128	; 0x80
    3a30:	0052      	lsls	r2, r2, #1
    3a32:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    3a34:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3a36:	076d      	lsls	r5, r5, #29
    3a38:	d178      	bne.n	3b2c <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    3a3a:	32e4      	adds	r2, #228	; 0xe4
    3a3c:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3a3e:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    3a40:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3a42:	422e      	tst	r6, r5
    3a44:	d172      	bne.n	3b2c <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    3a46:	3d5f      	subs	r5, #95	; 0x5f
    3a48:	32e4      	adds	r2, #228	; 0xe4
    3a4a:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3a4c:	001a      	movs	r2, r3
    3a4e:	3208      	adds	r2, #8
    3a50:	0152      	lsls	r2, r2, #5
    3a52:	6804      	ldr	r4, [r0, #0]
    3a54:	18a4      	adds	r4, r4, r2
    3a56:	352f      	adds	r5, #47	; 0x2f
    3a58:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3a5a:	6800      	ldr	r0, [r0, #0]
    3a5c:	1882      	adds	r2, r0, r2
    3a5e:	2080      	movs	r0, #128	; 0x80
    3a60:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    3a62:	788a      	ldrb	r2, [r1, #2]
    3a64:	2a00      	cmp	r2, #0
    3a66:	d01f      	beq.n	3aa8 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3a68:	0158      	lsls	r0, r3, #5
    3a6a:	4a74      	ldr	r2, [pc, #464]	; (3c3c <usb_device_endpoint_set_config+0x23c>)
    3a6c:	1812      	adds	r2, r2, r0
    3a6e:	6854      	ldr	r4, [r2, #4]
    3a70:	2080      	movs	r0, #128	; 0x80
    3a72:	0600      	lsls	r0, r0, #24
    3a74:	4304      	orrs	r4, r0
    3a76:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3a78:	6954      	ldr	r4, [r2, #20]
    3a7a:	4320      	orrs	r0, r4
    3a7c:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3a7e:	2507      	movs	r5, #7
    3a80:	784c      	ldrb	r4, [r1, #1]
    3a82:	015a      	lsls	r2, r3, #5
    3a84:	4b6d      	ldr	r3, [pc, #436]	; (3c3c <usb_device_endpoint_set_config+0x23c>)
    3a86:	189b      	adds	r3, r3, r2
    3a88:	6858      	ldr	r0, [r3, #4]
    3a8a:	402c      	ands	r4, r5
    3a8c:	0724      	lsls	r4, r4, #28
    3a8e:	4e6c      	ldr	r6, [pc, #432]	; (3c40 <usb_device_endpoint_set_config+0x240>)
    3a90:	4030      	ands	r0, r6
    3a92:	4320      	orrs	r0, r4
    3a94:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3a96:	7849      	ldrb	r1, [r1, #1]
    3a98:	695a      	ldr	r2, [r3, #20]
    3a9a:	4029      	ands	r1, r5
    3a9c:	0709      	lsls	r1, r1, #28
    3a9e:	4032      	ands	r2, r6
    3aa0:	430a      	orrs	r2, r1
    3aa2:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    3aa4:	2200      	movs	r2, #0
    3aa6:	e041      	b.n	3b2c <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3aa8:	0158      	lsls	r0, r3, #5
    3aaa:	4a64      	ldr	r2, [pc, #400]	; (3c3c <usb_device_endpoint_set_config+0x23c>)
    3aac:	1812      	adds	r2, r2, r0
    3aae:	6850      	ldr	r0, [r2, #4]
    3ab0:	0040      	lsls	r0, r0, #1
    3ab2:	0840      	lsrs	r0, r0, #1
    3ab4:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3ab6:	6950      	ldr	r0, [r2, #20]
    3ab8:	0040      	lsls	r0, r0, #1
    3aba:	0840      	lsrs	r0, r0, #1
    3abc:	6150      	str	r0, [r2, #20]
    3abe:	e7de      	b.n	3a7e <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    3ac0:	2c00      	cmp	r4, #0
    3ac2:	db35      	blt.n	3b30 <usb_device_endpoint_set_config+0x130>
    3ac4:	015d      	lsls	r5, r3, #5
    3ac6:	6802      	ldr	r2, [r0, #0]
    3ac8:	4694      	mov	ip, r2
    3aca:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3acc:	2280      	movs	r2, #128	; 0x80
    3ace:	0052      	lsls	r2, r2, #1
    3ad0:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    3ad2:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3ad4:	0776      	lsls	r6, r6, #29
    3ad6:	d129      	bne.n	3b2c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    3ad8:	2680      	movs	r6, #128	; 0x80
    3ada:	0076      	lsls	r6, r6, #1
    3adc:	5daa      	ldrb	r2, [r5, r6]
    3ade:	2702      	movs	r7, #2
    3ae0:	433a      	orrs	r2, r7
    3ae2:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3ae4:	6802      	ldr	r2, [r0, #0]
    3ae6:	0018      	movs	r0, r3
    3ae8:	3008      	adds	r0, #8
    3aea:	0140      	lsls	r0, r0, #5
    3aec:	1812      	adds	r2, r2, r0
    3aee:	2040      	movs	r0, #64	; 0x40
    3af0:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3af2:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3af4:	784f      	ldrb	r7, [r1, #1]
    3af6:	005d      	lsls	r5, r3, #1
    3af8:	18ad      	adds	r5, r5, r2
    3afa:	012d      	lsls	r5, r5, #4
    3afc:	4e4f      	ldr	r6, [pc, #316]	; (3c3c <usb_device_endpoint_set_config+0x23c>)
    3afe:	1975      	adds	r5, r6, r5
    3b00:	6868      	ldr	r0, [r5, #4]
    3b02:	2407      	movs	r4, #7
    3b04:	403c      	ands	r4, r7
    3b06:	0724      	lsls	r4, r4, #28
    3b08:	4e4d      	ldr	r6, [pc, #308]	; (3c40 <usb_device_endpoint_set_config+0x240>)
    3b0a:	4030      	ands	r0, r6
    3b0c:	4320      	orrs	r0, r4
    3b0e:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    3b10:	7889      	ldrb	r1, [r1, #2]
    3b12:	2900      	cmp	r1, #0
    3b14:	d000      	beq.n	3b18 <usb_device_endpoint_set_config+0x118>
    3b16:	e088      	b.n	3c2a <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3b18:	005b      	lsls	r3, r3, #1
    3b1a:	189b      	adds	r3, r3, r2
    3b1c:	011b      	lsls	r3, r3, #4
    3b1e:	4a47      	ldr	r2, [pc, #284]	; (3c3c <usb_device_endpoint_set_config+0x23c>)
    3b20:	18d3      	adds	r3, r2, r3
    3b22:	685a      	ldr	r2, [r3, #4]
    3b24:	0052      	lsls	r2, r2, #1
    3b26:	0852      	lsrs	r2, r2, #1
    3b28:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    3b2a:	2200      	movs	r2, #0
}
    3b2c:	0010      	movs	r0, r2
    3b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b30:	015d      	lsls	r5, r3, #5
    3b32:	6802      	ldr	r2, [r0, #0]
    3b34:	4694      	mov	ip, r2
    3b36:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3b38:	2280      	movs	r2, #128	; 0x80
    3b3a:	0052      	lsls	r2, r2, #1
    3b3c:	5caf      	ldrb	r7, [r5, r2]
    3b3e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3b40:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3b42:	4237      	tst	r7, r6
    3b44:	d1f2      	bne.n	3b2c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    3b46:	3690      	adds	r6, #144	; 0x90
    3b48:	5daa      	ldrb	r2, [r5, r6]
    3b4a:	2720      	movs	r7, #32
    3b4c:	433a      	orrs	r2, r7
    3b4e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3b50:	6802      	ldr	r2, [r0, #0]
    3b52:	0018      	movs	r0, r3
    3b54:	3008      	adds	r0, #8
    3b56:	0140      	lsls	r0, r0, #5
    3b58:	1812      	adds	r2, r2, r0
    3b5a:	2080      	movs	r0, #128	; 0x80
    3b5c:	7110      	strb	r0, [r2, #4]
    3b5e:	e7c8      	b.n	3af2 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    3b60:	2c00      	cmp	r4, #0
    3b62:	db17      	blt.n	3b94 <usb_device_endpoint_set_config+0x194>
    3b64:	015d      	lsls	r5, r3, #5
    3b66:	6802      	ldr	r2, [r0, #0]
    3b68:	4694      	mov	ip, r2
    3b6a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3b6c:	2280      	movs	r2, #128	; 0x80
    3b6e:	0052      	lsls	r2, r2, #1
    3b70:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    3b72:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3b74:	0776      	lsls	r6, r6, #29
    3b76:	d1d9      	bne.n	3b2c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    3b78:	2680      	movs	r6, #128	; 0x80
    3b7a:	0076      	lsls	r6, r6, #1
    3b7c:	5daa      	ldrb	r2, [r5, r6]
    3b7e:	2703      	movs	r7, #3
    3b80:	433a      	orrs	r2, r7
    3b82:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3b84:	6802      	ldr	r2, [r0, #0]
    3b86:	0018      	movs	r0, r3
    3b88:	3008      	adds	r0, #8
    3b8a:	0140      	lsls	r0, r0, #5
    3b8c:	1812      	adds	r2, r2, r0
    3b8e:	2040      	movs	r0, #64	; 0x40
    3b90:	7150      	strb	r0, [r2, #5]
    3b92:	e7ae      	b.n	3af2 <usb_device_endpoint_set_config+0xf2>
    3b94:	015d      	lsls	r5, r3, #5
    3b96:	6802      	ldr	r2, [r0, #0]
    3b98:	4694      	mov	ip, r2
    3b9a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3b9c:	2280      	movs	r2, #128	; 0x80
    3b9e:	0052      	lsls	r2, r2, #1
    3ba0:	5caf      	ldrb	r7, [r5, r2]
    3ba2:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3ba4:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3ba6:	4237      	tst	r7, r6
    3ba8:	d1c0      	bne.n	3b2c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    3baa:	3690      	adds	r6, #144	; 0x90
    3bac:	5daa      	ldrb	r2, [r5, r6]
    3bae:	2730      	movs	r7, #48	; 0x30
    3bb0:	433a      	orrs	r2, r7
    3bb2:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3bb4:	6802      	ldr	r2, [r0, #0]
    3bb6:	0018      	movs	r0, r3
    3bb8:	3008      	adds	r0, #8
    3bba:	0140      	lsls	r0, r0, #5
    3bbc:	1812      	adds	r2, r2, r0
    3bbe:	2080      	movs	r0, #128	; 0x80
    3bc0:	7110      	strb	r0, [r2, #4]
    3bc2:	e796      	b.n	3af2 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    3bc4:	2c00      	cmp	r4, #0
    3bc6:	db17      	blt.n	3bf8 <usb_device_endpoint_set_config+0x1f8>
    3bc8:	015d      	lsls	r5, r3, #5
    3bca:	6802      	ldr	r2, [r0, #0]
    3bcc:	4694      	mov	ip, r2
    3bce:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3bd0:	2280      	movs	r2, #128	; 0x80
    3bd2:	0052      	lsls	r2, r2, #1
    3bd4:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    3bd6:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3bd8:	0776      	lsls	r6, r6, #29
    3bda:	d1a7      	bne.n	3b2c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    3bdc:	2680      	movs	r6, #128	; 0x80
    3bde:	0076      	lsls	r6, r6, #1
    3be0:	5daa      	ldrb	r2, [r5, r6]
    3be2:	2704      	movs	r7, #4
    3be4:	433a      	orrs	r2, r7
    3be6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3be8:	6802      	ldr	r2, [r0, #0]
    3bea:	0018      	movs	r0, r3
    3bec:	3008      	adds	r0, #8
    3bee:	0140      	lsls	r0, r0, #5
    3bf0:	1812      	adds	r2, r2, r0
    3bf2:	2040      	movs	r0, #64	; 0x40
    3bf4:	7150      	strb	r0, [r2, #5]
    3bf6:	e77c      	b.n	3af2 <usb_device_endpoint_set_config+0xf2>
    3bf8:	015d      	lsls	r5, r3, #5
    3bfa:	6802      	ldr	r2, [r0, #0]
    3bfc:	4694      	mov	ip, r2
    3bfe:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3c00:	2280      	movs	r2, #128	; 0x80
    3c02:	0052      	lsls	r2, r2, #1
    3c04:	5caf      	ldrb	r7, [r5, r2]
    3c06:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3c08:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3c0a:	4237      	tst	r7, r6
    3c0c:	d000      	beq.n	3c10 <usb_device_endpoint_set_config+0x210>
    3c0e:	e78d      	b.n	3b2c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    3c10:	3690      	adds	r6, #144	; 0x90
    3c12:	5daa      	ldrb	r2, [r5, r6]
    3c14:	2740      	movs	r7, #64	; 0x40
    3c16:	433a      	orrs	r2, r7
    3c18:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3c1a:	6802      	ldr	r2, [r0, #0]
    3c1c:	0018      	movs	r0, r3
    3c1e:	3008      	adds	r0, #8
    3c20:	0140      	lsls	r0, r0, #5
    3c22:	1812      	adds	r2, r2, r0
    3c24:	2080      	movs	r0, #128	; 0x80
    3c26:	7110      	strb	r0, [r2, #4]
    3c28:	e763      	b.n	3af2 <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3c2a:	6869      	ldr	r1, [r5, #4]
    3c2c:	2380      	movs	r3, #128	; 0x80
    3c2e:	061b      	lsls	r3, r3, #24
    3c30:	430b      	orrs	r3, r1
    3c32:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    3c34:	2200      	movs	r2, #0
    3c36:	e779      	b.n	3b2c <usb_device_endpoint_set_config+0x12c>
    3c38:	000071e4 	.word	0x000071e4
    3c3c:	200005d4 	.word	0x200005d4
    3c40:	8fffffff 	.word	0x8fffffff

00003c44 <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3c44:	230f      	movs	r3, #15
    3c46:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    3c48:	b249      	sxtb	r1, r1
    3c4a:	2900      	cmp	r1, #0
    3c4c:	db09      	blt.n	3c62 <usb_device_endpoint_is_configured+0x1e>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    3c4e:	6802      	ldr	r2, [r0, #0]
    3c50:	3308      	adds	r3, #8
    3c52:	015b      	lsls	r3, r3, #5
    3c54:	5c98      	ldrb	r0, [r3, r2]
    3c56:	0740      	lsls	r0, r0, #29
    3c58:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    3c5a:	1e43      	subs	r3, r0, #1
    3c5c:	4198      	sbcs	r0, r3
    3c5e:	b2c0      	uxtb	r0, r0
}
    3c60:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    3c62:	6802      	ldr	r2, [r0, #0]
    3c64:	3308      	adds	r3, #8
    3c66:	015b      	lsls	r3, r3, #5
    3c68:	5c98      	ldrb	r0, [r3, r2]
    3c6a:	0640      	lsls	r0, r0, #25
    3c6c:	0f40      	lsrs	r0, r0, #29
    3c6e:	e7f4      	b.n	3c5a <usb_device_endpoint_is_configured+0x16>

00003c70 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    3c70:	230f      	movs	r3, #15
    3c72:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    3c74:	b249      	sxtb	r1, r1
    3c76:	2900      	cmp	r1, #0
    3c78:	db0a      	blt.n	3c90 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3c7a:	3308      	adds	r3, #8
    3c7c:	015b      	lsls	r3, r3, #5
    3c7e:	6802      	ldr	r2, [r0, #0]
    3c80:	18d2      	adds	r2, r2, r3
    3c82:	2140      	movs	r1, #64	; 0x40
    3c84:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    3c86:	6802      	ldr	r2, [r0, #0]
    3c88:	18d3      	adds	r3, r2, r3
    3c8a:	2201      	movs	r2, #1
    3c8c:	71da      	strb	r2, [r3, #7]
	}
}
    3c8e:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3c90:	3308      	adds	r3, #8
    3c92:	015b      	lsls	r3, r3, #5
    3c94:	6802      	ldr	r2, [r0, #0]
    3c96:	18d2      	adds	r2, r2, r3
    3c98:	2180      	movs	r1, #128	; 0x80
    3c9a:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    3c9c:	6802      	ldr	r2, [r0, #0]
    3c9e:	18d3      	adds	r3, r2, r3
    3ca0:	2202      	movs	r2, #2
    3ca2:	71da      	strb	r2, [r3, #7]
    3ca4:	e7f3      	b.n	3c8e <usb_device_endpoint_abort_job+0x1e>

00003ca6 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3ca6:	230f      	movs	r3, #15
    3ca8:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    3caa:	b249      	sxtb	r1, r1
    3cac:	2900      	cmp	r1, #0
    3cae:	db07      	blt.n	3cc0 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    3cb0:	6802      	ldr	r2, [r0, #0]
    3cb2:	3308      	adds	r3, #8
    3cb4:	015b      	lsls	r3, r3, #5
    3cb6:	18d3      	adds	r3, r2, r3
    3cb8:	7998      	ldrb	r0, [r3, #6]
    3cba:	06c0      	lsls	r0, r0, #27
    3cbc:	0fc0      	lsrs	r0, r0, #31
	}
}
    3cbe:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    3cc0:	6802      	ldr	r2, [r0, #0]
    3cc2:	3308      	adds	r3, #8
    3cc4:	015b      	lsls	r3, r3, #5
    3cc6:	18d3      	adds	r3, r2, r3
    3cc8:	7998      	ldrb	r0, [r3, #6]
    3cca:	0680      	lsls	r0, r0, #26
    3ccc:	0fc0      	lsrs	r0, r0, #31
    3cce:	e7f6      	b.n	3cbe <usb_device_endpoint_is_halted+0x18>

00003cd0 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3cd0:	230f      	movs	r3, #15
    3cd2:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    3cd4:	b249      	sxtb	r1, r1
    3cd6:	2900      	cmp	r1, #0
    3cd8:	db06      	blt.n	3ce8 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    3cda:	6802      	ldr	r2, [r0, #0]
    3cdc:	3308      	adds	r3, #8
    3cde:	015b      	lsls	r3, r3, #5
    3ce0:	18d3      	adds	r3, r2, r3
    3ce2:	2210      	movs	r2, #16
    3ce4:	715a      	strb	r2, [r3, #5]
	}
}
    3ce6:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    3ce8:	6802      	ldr	r2, [r0, #0]
    3cea:	3308      	adds	r3, #8
    3cec:	015b      	lsls	r3, r3, #5
    3cee:	18d3      	adds	r3, r2, r3
    3cf0:	2220      	movs	r2, #32
    3cf2:	715a      	strb	r2, [r3, #5]
    3cf4:	e7f7      	b.n	3ce6 <usb_device_endpoint_set_halt+0x16>

00003cf6 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    3cf6:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3cf8:	230f      	movs	r3, #15
    3cfa:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    3cfc:	b249      	sxtb	r1, r1
    3cfe:	2900      	cmp	r1, #0
    3d00:	db1d      	blt.n	3d3e <usb_device_endpoint_clear_halt+0x48>
    3d02:	0159      	lsls	r1, r3, #5
    3d04:	6802      	ldr	r2, [r0, #0]
    3d06:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    3d08:	2483      	movs	r4, #131	; 0x83
    3d0a:	0064      	lsls	r4, r4, #1
    3d0c:	5d14      	ldrb	r4, [r2, r4]
    3d0e:	06e4      	lsls	r4, r4, #27
    3d10:	d514      	bpl.n	3d3c <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    3d12:	2510      	movs	r5, #16
    3d14:	2482      	movs	r4, #130	; 0x82
    3d16:	0064      	lsls	r4, r4, #1
    3d18:	5515      	strb	r5, [r2, r4]
    3d1a:	6802      	ldr	r2, [r0, #0]
    3d1c:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3d1e:	2108      	movs	r1, #8
    3d20:	31ff      	adds	r1, #255	; 0xff
    3d22:	5c51      	ldrb	r1, [r2, r1]
    3d24:	0689      	lsls	r1, r1, #26
    3d26:	d509      	bpl.n	3d3c <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3d28:	3ce4      	subs	r4, #228	; 0xe4
    3d2a:	2108      	movs	r1, #8
    3d2c:	31ff      	adds	r1, #255	; 0xff
    3d2e:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    3d30:	6802      	ldr	r2, [r0, #0]
    3d32:	3308      	adds	r3, #8
    3d34:	015b      	lsls	r3, r3, #5
    3d36:	18d3      	adds	r3, r2, r3
    3d38:	2201      	movs	r2, #1
    3d3a:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    3d3c:	bd30      	pop	{r4, r5, pc}
    3d3e:	0159      	lsls	r1, r3, #5
    3d40:	6802      	ldr	r2, [r0, #0]
    3d42:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    3d44:	2483      	movs	r4, #131	; 0x83
    3d46:	0064      	lsls	r4, r4, #1
    3d48:	5d14      	ldrb	r4, [r2, r4]
    3d4a:	06a4      	lsls	r4, r4, #26
    3d4c:	d5f6      	bpl.n	3d3c <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    3d4e:	2520      	movs	r5, #32
    3d50:	2482      	movs	r4, #130	; 0x82
    3d52:	0064      	lsls	r4, r4, #1
    3d54:	5515      	strb	r5, [r2, r4]
    3d56:	6802      	ldr	r2, [r0, #0]
    3d58:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    3d5a:	2108      	movs	r1, #8
    3d5c:	31ff      	adds	r1, #255	; 0xff
    3d5e:	5c51      	ldrb	r1, [r2, r1]
    3d60:	0649      	lsls	r1, r1, #25
    3d62:	d5eb      	bpl.n	3d3c <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3d64:	3cc4      	subs	r4, #196	; 0xc4
    3d66:	2108      	movs	r1, #8
    3d68:	31ff      	adds	r1, #255	; 0xff
    3d6a:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    3d6c:	6802      	ldr	r2, [r0, #0]
    3d6e:	3308      	adds	r3, #8
    3d70:	015b      	lsls	r3, r3, #5
    3d72:	18d3      	adds	r3, r2, r3
    3d74:	2202      	movs	r2, #2
    3d76:	711a      	strb	r2, [r3, #4]
    3d78:	e7e0      	b.n	3d3c <usb_device_endpoint_clear_halt+0x46>
	...

00003d7c <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    3d7c:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    3d7e:	000c      	movs	r4, r1
    3d80:	3408      	adds	r4, #8
    3d82:	0164      	lsls	r4, r4, #5
    3d84:	6805      	ldr	r5, [r0, #0]
    3d86:	5d64      	ldrb	r4, [r4, r5]
    3d88:	0664      	lsls	r4, r4, #25
    3d8a:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    3d8c:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    3d8e:	2c00      	cmp	r4, #0
    3d90:	d101      	bne.n	3d96 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    3d92:	0028      	movs	r0, r5
    3d94:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    3d96:	014c      	lsls	r4, r1, #5
    3d98:	4d0b      	ldr	r5, [pc, #44]	; (3dc8 <usb_device_endpoint_write_buffer_job+0x4c>)
    3d9a:	192d      	adds	r5, r5, r4
    3d9c:	002c      	movs	r4, r5
    3d9e:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3da0:	696a      	ldr	r2, [r5, #20]
    3da2:	4d0a      	ldr	r5, [pc, #40]	; (3dcc <usb_device_endpoint_write_buffer_job+0x50>)
    3da4:	402a      	ands	r2, r5
    3da6:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    3da8:	6962      	ldr	r2, [r4, #20]
    3daa:	049b      	lsls	r3, r3, #18
    3dac:	0c9b      	lsrs	r3, r3, #18
    3dae:	0b92      	lsrs	r2, r2, #14
    3db0:	0392      	lsls	r2, r2, #14
    3db2:	4313      	orrs	r3, r2
    3db4:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    3db6:	6803      	ldr	r3, [r0, #0]
    3db8:	3108      	adds	r1, #8
    3dba:	0149      	lsls	r1, r1, #5
    3dbc:	1859      	adds	r1, r3, r1
    3dbe:	2380      	movs	r3, #128	; 0x80
    3dc0:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    3dc2:	2500      	movs	r5, #0
    3dc4:	e7e5      	b.n	3d92 <usb_device_endpoint_write_buffer_job+0x16>
    3dc6:	46c0      	nop			; (mov r8, r8)
    3dc8:	200005d4 	.word	0x200005d4
    3dcc:	f0003fff 	.word	0xf0003fff

00003dd0 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    3dd0:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    3dd2:	000c      	movs	r4, r1
    3dd4:	3408      	adds	r4, #8
    3dd6:	0164      	lsls	r4, r4, #5
    3dd8:	6805      	ldr	r5, [r0, #0]
    3dda:	5d64      	ldrb	r4, [r4, r5]
    3ddc:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    3dde:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    3de0:	2c00      	cmp	r4, #0
    3de2:	d101      	bne.n	3de8 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    3de4:	0028      	movs	r0, r5
    3de6:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    3de8:	4c0b      	ldr	r4, [pc, #44]	; (3e18 <usb_device_endpoint_read_buffer_job+0x48>)
    3dea:	014d      	lsls	r5, r1, #5
    3dec:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    3dee:	1962      	adds	r2, r4, r5
    3df0:	6854      	ldr	r4, [r2, #4]
    3df2:	049b      	lsls	r3, r3, #18
    3df4:	091b      	lsrs	r3, r3, #4
    3df6:	4d09      	ldr	r5, [pc, #36]	; (3e1c <usb_device_endpoint_read_buffer_job+0x4c>)
    3df8:	402c      	ands	r4, r5
    3dfa:	4323      	orrs	r3, r4
    3dfc:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3dfe:	6853      	ldr	r3, [r2, #4]
    3e00:	0b9b      	lsrs	r3, r3, #14
    3e02:	039b      	lsls	r3, r3, #14
    3e04:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3e06:	6803      	ldr	r3, [r0, #0]
    3e08:	3108      	adds	r1, #8
    3e0a:	0149      	lsls	r1, r1, #5
    3e0c:	1859      	adds	r1, r3, r1
    3e0e:	2340      	movs	r3, #64	; 0x40
    3e10:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    3e12:	2500      	movs	r5, #0
    3e14:	e7e6      	b.n	3de4 <usb_device_endpoint_read_buffer_job+0x14>
    3e16:	46c0      	nop			; (mov r8, r8)
    3e18:	200005d4 	.word	0x200005d4
    3e1c:	f0003fff 	.word	0xf0003fff

00003e20 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    3e20:	4b09      	ldr	r3, [pc, #36]	; (3e48 <usb_device_endpoint_setup_buffer_job+0x28>)
    3e22:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    3e24:	685a      	ldr	r2, [r3, #4]
    3e26:	4909      	ldr	r1, [pc, #36]	; (3e4c <usb_device_endpoint_setup_buffer_job+0x2c>)
    3e28:	4011      	ands	r1, r2
    3e2a:	2280      	movs	r2, #128	; 0x80
    3e2c:	0292      	lsls	r2, r2, #10
    3e2e:	430a      	orrs	r2, r1
    3e30:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3e32:	685a      	ldr	r2, [r3, #4]
    3e34:	0b92      	lsrs	r2, r2, #14
    3e36:	0392      	lsls	r2, r2, #14
    3e38:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3e3a:	6802      	ldr	r2, [r0, #0]
    3e3c:	2140      	movs	r1, #64	; 0x40
    3e3e:	2382      	movs	r3, #130	; 0x82
    3e40:	005b      	lsls	r3, r3, #1
    3e42:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    3e44:	2000      	movs	r0, #0
    3e46:	4770      	bx	lr
    3e48:	200005d4 	.word	0x200005d4
    3e4c:	f0003fff 	.word	0xf0003fff

00003e50 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    3e50:	6802      	ldr	r2, [r0, #0]
    3e52:	7813      	ldrb	r3, [r2, #0]
    3e54:	2102      	movs	r1, #2
    3e56:	430b      	orrs	r3, r1
    3e58:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    3e5a:	6802      	ldr	r2, [r0, #0]
    3e5c:	7893      	ldrb	r3, [r2, #2]
    3e5e:	2b02      	cmp	r3, #2
    3e60:	d0fc      	beq.n	3e5c <usb_enable+0xc>
}
    3e62:	4770      	bx	lr

00003e64 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    3e64:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e66:	46de      	mov	lr, fp
    3e68:	4657      	mov	r7, sl
    3e6a:	464e      	mov	r6, r9
    3e6c:	4645      	mov	r5, r8
    3e6e:	b5e0      	push	{r5, r6, r7, lr}
    3e70:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    3e72:	4bc2      	ldr	r3, [pc, #776]	; (417c <USB_Handler+0x318>)
    3e74:	681f      	ldr	r7, [r3, #0]
    3e76:	683d      	ldr	r5, [r7, #0]
    3e78:	782b      	ldrb	r3, [r5, #0]
    3e7a:	09db      	lsrs	r3, r3, #7
    3e7c:	d114      	bne.n	3ea8 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    3e7e:	8c2e      	ldrh	r6, [r5, #32]
    3e80:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    3e82:	2e00      	cmp	r6, #0
    3e84:	d000      	beq.n	3e88 <USB_Handler+0x24>
    3e86:	e1a9      	b.n	41dc <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    3e88:	8bae      	ldrh	r6, [r5, #28]
    3e8a:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    3e8c:	23ab      	movs	r3, #171	; 0xab
    3e8e:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    3e90:	5afb      	ldrh	r3, [r7, r3]
    3e92:	22aa      	movs	r2, #170	; 0xaa
    3e94:	0052      	lsls	r2, r2, #1
    3e96:	5abd      	ldrh	r5, [r7, r2]
    3e98:	401d      	ands	r5, r3
    3e9a:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3e9c:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    3e9e:	4fb8      	ldr	r7, [pc, #736]	; (4180 <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3ea0:	4bb6      	ldr	r3, [pc, #728]	; (417c <USB_Handler+0x318>)
    3ea2:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3ea4:	4698      	mov	r8, r3
    3ea6:	e184      	b.n	41b2 <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    3ea8:	8c2b      	ldrh	r3, [r5, #32]
    3eaa:	b29b      	uxth	r3, r3
    3eac:	2b00      	cmp	r3, #0
    3eae:	d100      	bne.n	3eb2 <USB_Handler+0x4e>
    3eb0:	e0de      	b.n	4070 <USB_Handler+0x20c>
    3eb2:	8c28      	ldrh	r0, [r5, #32]
    3eb4:	b280      	uxth	r0, r0
    3eb6:	4bb3      	ldr	r3, [pc, #716]	; (4184 <USB_Handler+0x320>)
    3eb8:	4798      	blx	r3
    3eba:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    3ebc:	281f      	cmp	r0, #31
    3ebe:	d900      	bls.n	3ec2 <USB_Handler+0x5e>
    3ec0:	e0d6      	b.n	4070 <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    3ec2:	0003      	movs	r3, r0
    3ec4:	3308      	adds	r3, #8
    3ec6:	015b      	lsls	r3, r3, #5
    3ec8:	18ed      	adds	r5, r5, r3
    3eca:	79ed      	ldrb	r5, [r5, #7]
    3ecc:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    3ece:	07ab      	lsls	r3, r5, #30
    3ed0:	d041      	beq.n	3f56 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3ed2:	4aad      	ldr	r2, [pc, #692]	; (4188 <USB_Handler+0x324>)
    3ed4:	2301      	movs	r3, #1
    3ed6:	4083      	lsls	r3, r0
    3ed8:	6811      	ldr	r1, [r2, #0]
    3eda:	4399      	bics	r1, r3
    3edc:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3ede:	0003      	movs	r3, r0
    3ee0:	3308      	adds	r3, #8
    3ee2:	015b      	lsls	r3, r3, #5
    3ee4:	683a      	ldr	r2, [r7, #0]
    3ee6:	4694      	mov	ip, r2
    3ee8:	4463      	add	r3, ip
    3eea:	2203      	movs	r2, #3
    3eec:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3eee:	183b      	adds	r3, r7, r0
    3ef0:	33ae      	adds	r3, #174	; 0xae
    3ef2:	781b      	ldrb	r3, [r3, #0]
    3ef4:	07db      	lsls	r3, r3, #31
    3ef6:	d52e      	bpl.n	3f56 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    3ef8:	4ba4      	ldr	r3, [pc, #656]	; (418c <USB_Handler+0x328>)
    3efa:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    3efc:	683a      	ldr	r2, [r7, #0]
    3efe:	0003      	movs	r3, r0
    3f00:	3308      	adds	r3, #8
    3f02:	015b      	lsls	r3, r3, #5
    3f04:	5c9b      	ldrb	r3, [r3, r2]
    3f06:	079b      	lsls	r3, r3, #30
    3f08:	0f9b      	lsrs	r3, r3, #30
    3f0a:	2b01      	cmp	r3, #1
    3f0c:	d100      	bne.n	3f10 <USB_Handler+0xac>
    3f0e:	e081      	b.n	4014 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3f10:	0142      	lsls	r2, r0, #5
    3f12:	4b9f      	ldr	r3, [pc, #636]	; (4190 <USB_Handler+0x32c>)
    3f14:	189b      	adds	r3, r3, r2
    3f16:	685a      	ldr	r2, [r3, #4]
    3f18:	0112      	lsls	r2, r2, #4
    3f1a:	0c92      	lsrs	r2, r2, #18
    3f1c:	b290      	uxth	r0, r2
    3f1e:	499b      	ldr	r1, [pc, #620]	; (418c <USB_Handler+0x328>)
    3f20:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3f22:	685a      	ldr	r2, [r3, #4]
    3f24:	0492      	lsls	r2, r2, #18
    3f26:	0c92      	lsrs	r2, r2, #18
    3f28:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3f2a:	685a      	ldr	r2, [r3, #4]
    3f2c:	4999      	ldr	r1, [pc, #612]	; (4194 <USB_Handler+0x330>)
    3f2e:	400a      	ands	r2, r1
    3f30:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    3f32:	2800      	cmp	r0, #0
    3f34:	d107      	bne.n	3f46 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3f36:	0162      	lsls	r2, r4, #5
    3f38:	4b95      	ldr	r3, [pc, #596]	; (4190 <USB_Handler+0x32c>)
    3f3a:	189b      	adds	r3, r3, r2
    3f3c:	685b      	ldr	r3, [r3, #4]
    3f3e:	049b      	lsls	r3, r3, #18
    3f40:	0c9b      	lsrs	r3, r3, #18
    3f42:	4a92      	ldr	r2, [pc, #584]	; (418c <USB_Handler+0x328>)
    3f44:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    3f46:	4b8d      	ldr	r3, [pc, #564]	; (417c <USB_Handler+0x318>)
    3f48:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    3f4a:	1ca3      	adds	r3, r4, #2
    3f4c:	011b      	lsls	r3, r3, #4
    3f4e:	18c3      	adds	r3, r0, r3
    3f50:	685b      	ldr	r3, [r3, #4]
    3f52:	498e      	ldr	r1, [pc, #568]	; (418c <USB_Handler+0x328>)
    3f54:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    3f56:	076b      	lsls	r3, r5, #29
    3f58:	d50e      	bpl.n	3f78 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3f5a:	4a8b      	ldr	r2, [pc, #556]	; (4188 <USB_Handler+0x324>)
    3f5c:	2301      	movs	r3, #1
    3f5e:	40a3      	lsls	r3, r4
    3f60:	6811      	ldr	r1, [r2, #0]
    3f62:	4399      	bics	r1, r3
    3f64:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3f66:	4b85      	ldr	r3, [pc, #532]	; (417c <USB_Handler+0x318>)
    3f68:	681b      	ldr	r3, [r3, #0]
    3f6a:	681b      	ldr	r3, [r3, #0]
    3f6c:	0022      	movs	r2, r4
    3f6e:	3208      	adds	r2, #8
    3f70:	0152      	lsls	r2, r2, #5
    3f72:	189b      	adds	r3, r3, r2
    3f74:	2204      	movs	r2, #4
    3f76:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    3f78:	072b      	lsls	r3, r5, #28
    3f7a:	d514      	bpl.n	3fa6 <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3f7c:	4a82      	ldr	r2, [pc, #520]	; (4188 <USB_Handler+0x324>)
    3f7e:	2301      	movs	r3, #1
    3f80:	40a3      	lsls	r3, r4
    3f82:	6811      	ldr	r1, [r2, #0]
    3f84:	4399      	bics	r1, r3
    3f86:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3f88:	4b7c      	ldr	r3, [pc, #496]	; (417c <USB_Handler+0x318>)
    3f8a:	6818      	ldr	r0, [r3, #0]
    3f8c:	0023      	movs	r3, r4
    3f8e:	3308      	adds	r3, #8
    3f90:	015b      	lsls	r3, r3, #5
    3f92:	6802      	ldr	r2, [r0, #0]
    3f94:	4694      	mov	ip, r2
    3f96:	4463      	add	r3, ip
    3f98:	2208      	movs	r2, #8
    3f9a:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3f9c:	1903      	adds	r3, r0, r4
    3f9e:	33ae      	adds	r3, #174	; 0xae
    3fa0:	781b      	ldrb	r3, [r3, #0]
    3fa2:	079b      	lsls	r3, r3, #30
    3fa4:	d447      	bmi.n	4036 <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    3fa6:	06eb      	lsls	r3, r5, #27
    3fa8:	d514      	bpl.n	3fd4 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3faa:	4a77      	ldr	r2, [pc, #476]	; (4188 <USB_Handler+0x324>)
    3fac:	2301      	movs	r3, #1
    3fae:	40a3      	lsls	r3, r4
    3fb0:	6811      	ldr	r1, [r2, #0]
    3fb2:	4399      	bics	r1, r3
    3fb4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3fb6:	4b71      	ldr	r3, [pc, #452]	; (417c <USB_Handler+0x318>)
    3fb8:	6818      	ldr	r0, [r3, #0]
    3fba:	0023      	movs	r3, r4
    3fbc:	3308      	adds	r3, #8
    3fbe:	015b      	lsls	r3, r3, #5
    3fc0:	6802      	ldr	r2, [r0, #0]
    3fc2:	4694      	mov	ip, r2
    3fc4:	4463      	add	r3, ip
    3fc6:	2210      	movs	r2, #16
    3fc8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3fca:	1903      	adds	r3, r0, r4
    3fcc:	33ae      	adds	r3, #174	; 0xae
    3fce:	781b      	ldrb	r3, [r3, #0]
    3fd0:	075b      	lsls	r3, r3, #29
    3fd2:	d43e      	bmi.n	4052 <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    3fd4:	06ab      	lsls	r3, r5, #26
    3fd6:	d400      	bmi.n	3fda <USB_Handler+0x176>
    3fd8:	e0b0      	b.n	413c <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3fda:	4a6b      	ldr	r2, [pc, #428]	; (4188 <USB_Handler+0x324>)
    3fdc:	2301      	movs	r3, #1
    3fde:	40a3      	lsls	r3, r4
    3fe0:	6811      	ldr	r1, [r2, #0]
    3fe2:	4399      	bics	r1, r3
    3fe4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3fe6:	4b65      	ldr	r3, [pc, #404]	; (417c <USB_Handler+0x318>)
    3fe8:	6818      	ldr	r0, [r3, #0]
    3fea:	0023      	movs	r3, r4
    3fec:	3308      	adds	r3, #8
    3fee:	015b      	lsls	r3, r3, #5
    3ff0:	6802      	ldr	r2, [r0, #0]
    3ff2:	4694      	mov	ip, r2
    3ff4:	4463      	add	r3, ip
    3ff6:	2220      	movs	r2, #32
    3ff8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3ffa:	1903      	adds	r3, r0, r4
    3ffc:	33ae      	adds	r3, #174	; 0xae
    3ffe:	781b      	ldrb	r3, [r3, #0]
    4000:	071b      	lsls	r3, r3, #28
    4002:	d400      	bmi.n	4006 <USB_Handler+0x1a2>
    4004:	e09a      	b.n	413c <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    4006:	4961      	ldr	r1, [pc, #388]	; (418c <USB_Handler+0x328>)
    4008:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    400a:	0124      	lsls	r4, r4, #4
    400c:	1904      	adds	r4, r0, r4
    400e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4010:	4798      	blx	r3
    4012:	e093      	b.n	413c <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4014:	0142      	lsls	r2, r0, #5
    4016:	4b5e      	ldr	r3, [pc, #376]	; (4190 <USB_Handler+0x32c>)
    4018:	189b      	adds	r3, r3, r2
    401a:	685a      	ldr	r2, [r3, #4]
    401c:	0492      	lsls	r2, r2, #18
    401e:	0c92      	lsrs	r2, r2, #18
    4020:	495a      	ldr	r1, [pc, #360]	; (418c <USB_Handler+0x328>)
    4022:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4024:	685a      	ldr	r2, [r3, #4]
    4026:	0112      	lsls	r2, r2, #4
    4028:	0c92      	lsrs	r2, r2, #18
    402a:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    402c:	685a      	ldr	r2, [r3, #4]
    402e:	0b92      	lsrs	r2, r2, #14
    4030:	0392      	lsls	r2, r2, #14
    4032:	605a      	str	r2, [r3, #4]
    4034:	e787      	b.n	3f46 <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    4036:	4955      	ldr	r1, [pc, #340]	; (418c <USB_Handler+0x328>)
    4038:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    403a:	0162      	lsls	r2, r4, #5
    403c:	4b54      	ldr	r3, [pc, #336]	; (4190 <USB_Handler+0x32c>)
    403e:	189b      	adds	r3, r3, r2
    4040:	89db      	ldrh	r3, [r3, #14]
    4042:	221f      	movs	r2, #31
    4044:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    4046:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    4048:	0123      	lsls	r3, r4, #4
    404a:	18c3      	adds	r3, r0, r3
    404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    404e:	4798      	blx	r3
    4050:	e7a9      	b.n	3fa6 <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    4052:	494e      	ldr	r1, [pc, #312]	; (418c <USB_Handler+0x328>)
    4054:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4056:	0162      	lsls	r2, r4, #5
    4058:	4b4d      	ldr	r3, [pc, #308]	; (4190 <USB_Handler+0x32c>)
    405a:	189b      	adds	r3, r3, r2
    405c:	685b      	ldr	r3, [r3, #4]
    405e:	011b      	lsls	r3, r3, #4
    4060:	0c9b      	lsrs	r3, r3, #18
    4062:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    4064:	0123      	lsls	r3, r4, #4
    4066:	18c3      	adds	r3, r0, r3
    4068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    406a:	2100      	movs	r1, #0
    406c:	4798      	blx	r3
    406e:	e7b1      	b.n	3fd4 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    4070:	8bac      	ldrh	r4, [r5, #28]
    4072:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    4074:	0763      	lsls	r3, r4, #29
    4076:	d505      	bpl.n	4084 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    4078:	2304      	movs	r3, #4
    407a:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    407c:	33a1      	adds	r3, #161	; 0xa1
    407e:	5cfb      	ldrb	r3, [r7, r3]
    4080:	07db      	lsls	r3, r3, #31
    4082:	d462      	bmi.n	414a <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    4084:	0723      	lsls	r3, r4, #28
    4086:	d50b      	bpl.n	40a0 <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    4088:	2200      	movs	r2, #0
    408a:	4b3f      	ldr	r3, [pc, #252]	; (4188 <USB_Handler+0x324>)
    408c:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    408e:	4b3b      	ldr	r3, [pc, #236]	; (417c <USB_Handler+0x318>)
    4090:	6818      	ldr	r0, [r3, #0]
    4092:	2308      	movs	r3, #8
    4094:	6802      	ldr	r2, [r0, #0]
    4096:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    4098:	339d      	adds	r3, #157	; 0x9d
    409a:	5cc3      	ldrb	r3, [r0, r3]
    409c:	079b      	lsls	r3, r3, #30
    409e:	d458      	bmi.n	4152 <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    40a0:	0663      	lsls	r3, r4, #25
    40a2:	d508      	bpl.n	40b6 <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    40a4:	4b35      	ldr	r3, [pc, #212]	; (417c <USB_Handler+0x318>)
    40a6:	6818      	ldr	r0, [r3, #0]
    40a8:	2340      	movs	r3, #64	; 0x40
    40aa:	6802      	ldr	r2, [r0, #0]
    40ac:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    40ae:	3365      	adds	r3, #101	; 0x65
    40b0:	5cc3      	ldrb	r3, [r0, r3]
    40b2:	06db      	lsls	r3, r3, #27
    40b4:	d450      	bmi.n	4158 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    40b6:	06a3      	lsls	r3, r4, #26
    40b8:	d508      	bpl.n	40cc <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    40ba:	4b30      	ldr	r3, [pc, #192]	; (417c <USB_Handler+0x318>)
    40bc:	6818      	ldr	r0, [r3, #0]
    40be:	2320      	movs	r3, #32
    40c0:	6802      	ldr	r2, [r0, #0]
    40c2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    40c4:	3385      	adds	r3, #133	; 0x85
    40c6:	5cc3      	ldrb	r3, [r0, r3]
    40c8:	071b      	lsls	r3, r3, #28
    40ca:	d448      	bmi.n	415e <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    40cc:	06e3      	lsls	r3, r4, #27
    40ce:	d508      	bpl.n	40e2 <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    40d0:	4b2a      	ldr	r3, [pc, #168]	; (417c <USB_Handler+0x318>)
    40d2:	6818      	ldr	r0, [r3, #0]
    40d4:	2310      	movs	r3, #16
    40d6:	6802      	ldr	r2, [r0, #0]
    40d8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    40da:	3395      	adds	r3, #149	; 0x95
    40dc:	5cc3      	ldrb	r3, [r0, r3]
    40de:	075b      	lsls	r3, r3, #29
    40e0:	d440      	bmi.n	4164 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    40e2:	0623      	lsls	r3, r4, #24
    40e4:	d50b      	bpl.n	40fe <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    40e6:	2200      	movs	r2, #0
    40e8:	4b27      	ldr	r3, [pc, #156]	; (4188 <USB_Handler+0x324>)
    40ea:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    40ec:	4b23      	ldr	r3, [pc, #140]	; (417c <USB_Handler+0x318>)
    40ee:	6818      	ldr	r0, [r3, #0]
    40f0:	2380      	movs	r3, #128	; 0x80
    40f2:	6802      	ldr	r2, [r0, #0]
    40f4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    40f6:	3325      	adds	r3, #37	; 0x25
    40f8:	5cc3      	ldrb	r3, [r0, r3]
    40fa:	069b      	lsls	r3, r3, #26
    40fc:	d435      	bmi.n	416a <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    40fe:	05e3      	lsls	r3, r4, #23
    4100:	d50c      	bpl.n	411c <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    4102:	2200      	movs	r2, #0
    4104:	4b20      	ldr	r3, [pc, #128]	; (4188 <USB_Handler+0x324>)
    4106:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    4108:	4b1c      	ldr	r3, [pc, #112]	; (417c <USB_Handler+0x318>)
    410a:	6818      	ldr	r0, [r3, #0]
    410c:	2380      	movs	r3, #128	; 0x80
    410e:	005b      	lsls	r3, r3, #1
    4110:	6802      	ldr	r2, [r0, #0]
    4112:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    4114:	3b5b      	subs	r3, #91	; 0x5b
    4116:	5cc3      	ldrb	r3, [r0, r3]
    4118:	065b      	lsls	r3, r3, #25
    411a:	d429      	bmi.n	4170 <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    411c:	05a3      	lsls	r3, r4, #22
    411e:	d50d      	bpl.n	413c <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    4120:	2200      	movs	r2, #0
    4122:	4b19      	ldr	r3, [pc, #100]	; (4188 <USB_Handler+0x324>)
    4124:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    4126:	4b15      	ldr	r3, [pc, #84]	; (417c <USB_Handler+0x318>)
    4128:	6818      	ldr	r0, [r3, #0]
    412a:	2380      	movs	r3, #128	; 0x80
    412c:	009b      	lsls	r3, r3, #2
    412e:	6802      	ldr	r2, [r0, #0]
    4130:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    4132:	3b5c      	subs	r3, #92	; 0x5c
    4134:	3bff      	subs	r3, #255	; 0xff
    4136:	5cc3      	ldrb	r3, [r0, r3]
    4138:	2b7f      	cmp	r3, #127	; 0x7f
    413a:	d81c      	bhi.n	4176 <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    413c:	b003      	add	sp, #12
    413e:	bc3c      	pop	{r2, r3, r4, r5}
    4140:	4690      	mov	r8, r2
    4142:	4699      	mov	r9, r3
    4144:	46a2      	mov	sl, r4
    4146:	46ab      	mov	fp, r5
    4148:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	0038      	movs	r0, r7
    414e:	4798      	blx	r3
    4150:	e798      	b.n	4084 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    4152:	6883      	ldr	r3, [r0, #8]
    4154:	4798      	blx	r3
    4156:	e7a3      	b.n	40a0 <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    4158:	6943      	ldr	r3, [r0, #20]
    415a:	4798      	blx	r3
    415c:	e7ab      	b.n	40b6 <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    415e:	6903      	ldr	r3, [r0, #16]
    4160:	4798      	blx	r3
    4162:	e7b3      	b.n	40cc <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    4164:	68c3      	ldr	r3, [r0, #12]
    4166:	4798      	blx	r3
    4168:	e7bb      	b.n	40e2 <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    416a:	6983      	ldr	r3, [r0, #24]
    416c:	4798      	blx	r3
    416e:	e7c6      	b.n	40fe <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    4170:	69c3      	ldr	r3, [r0, #28]
    4172:	4798      	blx	r3
    4174:	e7d2      	b.n	411c <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    4176:	6a03      	ldr	r3, [r0, #32]
    4178:	4798      	blx	r3
    417a:	e7df      	b.n	413c <USB_Handler+0x2d8>
    417c:	2000028c 	.word	0x2000028c
    4180:	000071f8 	.word	0x000071f8
    4184:	000064f5 	.word	0x000064f5
    4188:	2000029c 	.word	0x2000029c
    418c:	200002a0 	.word	0x200002a0
    4190:	200005d4 	.word	0x200005d4
    4194:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4198:	0023      	movs	r3, r4
    419a:	332e      	adds	r3, #46	; 0x2e
    419c:	009b      	lsls	r3, r3, #2
    419e:	4642      	mov	r2, r8
    41a0:	6812      	ldr	r2, [r2, #0]
    41a2:	589b      	ldr	r3, [r3, r2]
    41a4:	499e      	ldr	r1, [pc, #632]	; (4420 <USB_Handler+0x5bc>)
    41a6:	4642      	mov	r2, r8
    41a8:	6810      	ldr	r0, [r2, #0]
    41aa:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    41ac:	3401      	adds	r4, #1
    41ae:	2c07      	cmp	r4, #7
    41b0:	d0c4      	beq.n	413c <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    41b2:	0063      	lsls	r3, r4, #1
    41b4:	5bdb      	ldrh	r3, [r3, r7]
    41b6:	4233      	tst	r3, r6
    41b8:	d003      	beq.n	41c2 <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    41ba:	464a      	mov	r2, r9
    41bc:	6812      	ldr	r2, [r2, #0]
    41be:	6812      	ldr	r2, [r2, #0]
    41c0:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    41c2:	422b      	tst	r3, r5
    41c4:	d0f2      	beq.n	41ac <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    41c6:	2c06      	cmp	r4, #6
    41c8:	d1e6      	bne.n	4198 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    41ca:	4b96      	ldr	r3, [pc, #600]	; (4424 <USB_Handler+0x5c0>)
    41cc:	891b      	ldrh	r3, [r3, #8]
    41ce:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    41d0:	2280      	movs	r2, #128	; 0x80
    41d2:	0052      	lsls	r2, r2, #1
    41d4:	4013      	ands	r3, r2
    41d6:	4a92      	ldr	r2, [pc, #584]	; (4420 <USB_Handler+0x5bc>)
    41d8:	6013      	str	r3, [r2, #0]
    41da:	e7dd      	b.n	4198 <USB_Handler+0x334>
    41dc:	003c      	movs	r4, r7
    41de:	3459      	adds	r4, #89	; 0x59
    41e0:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    41e2:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    41e4:	2201      	movs	r2, #1
    41e6:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    41e8:	325f      	adds	r2, #95	; 0x5f
    41ea:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    41ec:	3a50      	subs	r2, #80	; 0x50
    41ee:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    41f0:	3a0d      	subs	r2, #13
    41f2:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    41f4:	46b8      	mov	r8, r7
    41f6:	002f      	movs	r7, r5
    41f8:	e0b9      	b.n	436e <USB_Handler+0x50a>
    41fa:	002a      	movs	r2, r5
    41fc:	003d      	movs	r5, r7
    41fe:	4647      	mov	r7, r8
    4200:	4690      	mov	r8, r2
    4202:	015b      	lsls	r3, r3, #5
    4204:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    4206:	2308      	movs	r3, #8
    4208:	33ff      	adds	r3, #255	; 0xff
    420a:	5ceb      	ldrb	r3, [r5, r3]
    420c:	065b      	lsls	r3, r3, #25
    420e:	d516      	bpl.n	423e <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4210:	2240      	movs	r2, #64	; 0x40
    4212:	2308      	movs	r3, #8
    4214:	33ff      	adds	r3, #255	; 0xff
    4216:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4218:	3b88      	subs	r3, #136	; 0x88
    421a:	3bff      	subs	r3, #255	; 0xff
    421c:	4642      	mov	r2, r8
    421e:	4313      	orrs	r3, r2
    4220:	4a81      	ldr	r2, [pc, #516]	; (4428 <USB_Handler+0x5c4>)
    4222:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4224:	2360      	movs	r3, #96	; 0x60
    4226:	420b      	tst	r3, r1
    4228:	d100      	bne.n	422c <USB_Handler+0x3c8>
    422a:	e787      	b.n	413c <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    422c:	9b01      	ldr	r3, [sp, #4]
    422e:	011b      	lsls	r3, r3, #4
    4230:	18fb      	adds	r3, r7, r3
    4232:	33e0      	adds	r3, #224	; 0xe0
    4234:	681b      	ldr	r3, [r3, #0]
    4236:	497c      	ldr	r1, [pc, #496]	; (4428 <USB_Handler+0x5c4>)
    4238:	0038      	movs	r0, r7
    423a:	4798      	blx	r3
    423c:	e77e      	b.n	413c <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    423e:	2308      	movs	r3, #8
    4240:	33ff      	adds	r3, #255	; 0xff
    4242:	5ceb      	ldrb	r3, [r5, r3]
    4244:	069b      	lsls	r3, r3, #26
    4246:	d5ed      	bpl.n	4224 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4248:	2220      	movs	r2, #32
    424a:	2308      	movs	r3, #8
    424c:	33ff      	adds	r3, #255	; 0xff
    424e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4250:	4b75      	ldr	r3, [pc, #468]	; (4428 <USB_Handler+0x5c4>)
    4252:	4642      	mov	r2, r8
    4254:	719a      	strb	r2, [r3, #6]
    4256:	e7e5      	b.n	4224 <USB_Handler+0x3c0>
    4258:	003d      	movs	r5, r7
    425a:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    425c:	9a01      	ldr	r2, [sp, #4]
    425e:	0013      	movs	r3, r2
    4260:	3308      	adds	r3, #8
    4262:	015b      	lsls	r3, r3, #5
    4264:	18ed      	adds	r5, r5, r3
    4266:	2310      	movs	r3, #16
    4268:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    426a:	18bb      	adds	r3, r7, r2
    426c:	3361      	adds	r3, #97	; 0x61
    426e:	33ff      	adds	r3, #255	; 0xff
    4270:	781b      	ldrb	r3, [r3, #0]
    4272:	06db      	lsls	r3, r3, #27
    4274:	d400      	bmi.n	4278 <USB_Handler+0x414>
    4276:	e761      	b.n	413c <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4278:	0010      	movs	r0, r2
    427a:	0152      	lsls	r2, r2, #5
    427c:	4b69      	ldr	r3, [pc, #420]	; (4424 <USB_Handler+0x5c0>)
    427e:	189b      	adds	r3, r3, r2
    4280:	685b      	ldr	r3, [r3, #4]
    4282:	049b      	lsls	r3, r3, #18
    4284:	0c9b      	lsrs	r3, r3, #18
    4286:	4968      	ldr	r1, [pc, #416]	; (4428 <USB_Handler+0x5c4>)
    4288:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    428a:	0103      	lsls	r3, r0, #4
    428c:	18fb      	adds	r3, r7, r3
    428e:	33dc      	adds	r3, #220	; 0xdc
    4290:	681b      	ldr	r3, [r3, #0]
    4292:	4640      	mov	r0, r8
    4294:	4798      	blx	r3
    4296:	e751      	b.n	413c <USB_Handler+0x2d8>
    4298:	002a      	movs	r2, r5
    429a:	003d      	movs	r5, r7
    429c:	4647      	mov	r7, r8
    429e:	4690      	mov	r8, r2
    42a0:	015b      	lsls	r3, r3, #5
    42a2:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    42a4:	2308      	movs	r3, #8
    42a6:	33ff      	adds	r3, #255	; 0xff
    42a8:	5ceb      	ldrb	r3, [r5, r3]
    42aa:	079b      	lsls	r3, r3, #30
    42ac:	d51e      	bpl.n	42ec <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    42ae:	2202      	movs	r2, #2
    42b0:	2308      	movs	r3, #8
    42b2:	33ff      	adds	r3, #255	; 0xff
    42b4:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    42b6:	485c      	ldr	r0, [pc, #368]	; (4428 <USB_Handler+0x5c4>)
    42b8:	3b88      	subs	r3, #136	; 0x88
    42ba:	3bff      	subs	r3, #255	; 0xff
    42bc:	4642      	mov	r2, r8
    42be:	4313      	orrs	r3, r2
    42c0:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    42c2:	9b01      	ldr	r3, [sp, #4]
    42c4:	015a      	lsls	r2, r3, #5
    42c6:	4b57      	ldr	r3, [pc, #348]	; (4424 <USB_Handler+0x5c0>)
    42c8:	189b      	adds	r3, r3, r2
    42ca:	3310      	adds	r3, #16
    42cc:	685b      	ldr	r3, [r3, #4]
    42ce:	049b      	lsls	r3, r3, #18
    42d0:	0c9b      	lsrs	r3, r3, #18
    42d2:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    42d4:	078b      	lsls	r3, r1, #30
    42d6:	d100      	bne.n	42da <USB_Handler+0x476>
    42d8:	e730      	b.n	413c <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    42da:	9b01      	ldr	r3, [sp, #4]
    42dc:	330d      	adds	r3, #13
    42de:	011b      	lsls	r3, r3, #4
    42e0:	18fb      	adds	r3, r7, r3
    42e2:	685b      	ldr	r3, [r3, #4]
    42e4:	4950      	ldr	r1, [pc, #320]	; (4428 <USB_Handler+0x5c4>)
    42e6:	0038      	movs	r0, r7
    42e8:	4798      	blx	r3
    42ea:	e727      	b.n	413c <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    42ec:	2308      	movs	r3, #8
    42ee:	33ff      	adds	r3, #255	; 0xff
    42f0:	5ceb      	ldrb	r3, [r5, r3]
    42f2:	07db      	lsls	r3, r3, #31
    42f4:	d5ee      	bpl.n	42d4 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    42f6:	2201      	movs	r2, #1
    42f8:	2308      	movs	r3, #8
    42fa:	33ff      	adds	r3, #255	; 0xff
    42fc:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    42fe:	484a      	ldr	r0, [pc, #296]	; (4428 <USB_Handler+0x5c4>)
    4300:	4643      	mov	r3, r8
    4302:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4304:	9b01      	ldr	r3, [sp, #4]
    4306:	015b      	lsls	r3, r3, #5
    4308:	4a46      	ldr	r2, [pc, #280]	; (4424 <USB_Handler+0x5c0>)
    430a:	18d2      	adds	r2, r2, r3
    430c:	6853      	ldr	r3, [r2, #4]
    430e:	049b      	lsls	r3, r3, #18
    4310:	0c9b      	lsrs	r3, r3, #18
    4312:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    4314:	6853      	ldr	r3, [r2, #4]
    4316:	011b      	lsls	r3, r3, #4
    4318:	0c9b      	lsrs	r3, r3, #18
    431a:	8083      	strh	r3, [r0, #4]
    431c:	e7da      	b.n	42d4 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    431e:	2208      	movs	r2, #8
    4320:	32ff      	adds	r2, #255	; 0xff
    4322:	5c9a      	ldrb	r2, [r3, r2]
    4324:	0752      	lsls	r2, r2, #29
    4326:	d56e      	bpl.n	4406 <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    4328:	2004      	movs	r0, #4
    432a:	2208      	movs	r2, #8
    432c:	32ff      	adds	r2, #255	; 0xff
    432e:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4330:	9801      	ldr	r0, [sp, #4]
    4332:	0142      	lsls	r2, r0, #5
    4334:	4b3b      	ldr	r3, [pc, #236]	; (4424 <USB_Handler+0x5c0>)
    4336:	189b      	adds	r3, r3, r2
    4338:	7a9b      	ldrb	r3, [r3, #10]
    433a:	079b      	lsls	r3, r3, #30
    433c:	d505      	bpl.n	434a <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    433e:	4b39      	ldr	r3, [pc, #228]	; (4424 <USB_Handler+0x5c0>)
    4340:	189b      	adds	r3, r3, r2
    4342:	7a9a      	ldrb	r2, [r3, #10]
    4344:	2002      	movs	r0, #2
    4346:	4382      	bics	r2, r0
    4348:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    434a:	4b37      	ldr	r3, [pc, #220]	; (4428 <USB_Handler+0x5c4>)
    434c:	4642      	mov	r2, r8
    434e:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4350:	9b01      	ldr	r3, [sp, #4]
    4352:	3308      	adds	r3, #8
    4354:	015b      	lsls	r3, r3, #5
    4356:	683a      	ldr	r2, [r7, #0]
    4358:	4694      	mov	ip, r2
    435a:	4463      	add	r3, ip
    435c:	79db      	ldrb	r3, [r3, #7]
    435e:	07db      	lsls	r3, r3, #31
    4360:	d551      	bpl.n	4406 <USB_Handler+0x5a2>
    4362:	e6eb      	b.n	413c <USB_Handler+0x2d8>
    4364:	3301      	adds	r3, #1
    4366:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4368:	2b08      	cmp	r3, #8
    436a:	d100      	bne.n	436e <USB_Handler+0x50a>
    436c:	e6e6      	b.n	413c <USB_Handler+0x2d8>
    436e:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    4370:	9301      	str	r3, [sp, #4]
    4372:	0032      	movs	r2, r6
    4374:	411a      	asrs	r2, r3
    4376:	4661      	mov	r1, ip
    4378:	4211      	tst	r1, r2
    437a:	d0f3      	beq.n	4364 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    437c:	001a      	movs	r2, r3
    437e:	3208      	adds	r2, #8
    4380:	0152      	lsls	r2, r2, #5
    4382:	18ba      	adds	r2, r7, r2
    4384:	79d2      	ldrb	r2, [r2, #7]
    4386:	b2d2      	uxtb	r2, r2
    4388:	7a21      	ldrb	r1, [r4, #8]
    438a:	4011      	ands	r1, r2
    438c:	7820      	ldrb	r0, [r4, #0]
    438e:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4390:	4648      	mov	r0, r9
    4392:	4210      	tst	r0, r2
    4394:	d000      	beq.n	4398 <USB_Handler+0x534>
    4396:	e730      	b.n	41fa <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4398:	4650      	mov	r0, sl
    439a:	4210      	tst	r0, r2
    439c:	d000      	beq.n	43a0 <USB_Handler+0x53c>
    439e:	e75b      	b.n	4258 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    43a0:	4658      	mov	r0, fp
    43a2:	4210      	tst	r0, r2
    43a4:	d000      	beq.n	43a8 <USB_Handler+0x544>
    43a6:	e777      	b.n	4298 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    43a8:	200c      	movs	r0, #12
    43aa:	4210      	tst	r0, r2
    43ac:	d0da      	beq.n	4364 <USB_Handler+0x500>
    43ae:	002a      	movs	r2, r5
    43b0:	003d      	movs	r5, r7
    43b2:	4647      	mov	r7, r8
    43b4:	4690      	mov	r8, r2
    43b6:	015b      	lsls	r3, r3, #5
    43b8:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    43ba:	2208      	movs	r2, #8
    43bc:	32ff      	adds	r2, #255	; 0xff
    43be:	5c9a      	ldrb	r2, [r3, r2]
    43c0:	0712      	lsls	r2, r2, #28
    43c2:	d5ac      	bpl.n	431e <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    43c4:	3804      	subs	r0, #4
    43c6:	2208      	movs	r2, #8
    43c8:	32ff      	adds	r2, #255	; 0xff
    43ca:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    43cc:	9801      	ldr	r0, [sp, #4]
    43ce:	0142      	lsls	r2, r0, #5
    43d0:	4b14      	ldr	r3, [pc, #80]	; (4424 <USB_Handler+0x5c0>)
    43d2:	189b      	adds	r3, r3, r2
    43d4:	7e9b      	ldrb	r3, [r3, #26]
    43d6:	079b      	lsls	r3, r3, #30
    43d8:	d505      	bpl.n	43e6 <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    43da:	4b12      	ldr	r3, [pc, #72]	; (4424 <USB_Handler+0x5c0>)
    43dc:	189b      	adds	r3, r3, r2
    43de:	7e9a      	ldrb	r2, [r3, #26]
    43e0:	2002      	movs	r0, #2
    43e2:	4382      	bics	r2, r0
    43e4:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    43e6:	2380      	movs	r3, #128	; 0x80
    43e8:	425b      	negs	r3, r3
    43ea:	4642      	mov	r2, r8
    43ec:	4313      	orrs	r3, r2
    43ee:	4a0e      	ldr	r2, [pc, #56]	; (4428 <USB_Handler+0x5c4>)
    43f0:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    43f2:	9b01      	ldr	r3, [sp, #4]
    43f4:	3308      	adds	r3, #8
    43f6:	015b      	lsls	r3, r3, #5
    43f8:	683a      	ldr	r2, [r7, #0]
    43fa:	4694      	mov	ip, r2
    43fc:	4463      	add	r3, ip
    43fe:	79db      	ldrb	r3, [r3, #7]
    4400:	079b      	lsls	r3, r3, #30
    4402:	d500      	bpl.n	4406 <USB_Handler+0x5a2>
    4404:	e69a      	b.n	413c <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4406:	230c      	movs	r3, #12
    4408:	420b      	tst	r3, r1
    440a:	d100      	bne.n	440e <USB_Handler+0x5aa>
    440c:	e696      	b.n	413c <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    440e:	9b01      	ldr	r3, [sp, #4]
    4410:	011b      	lsls	r3, r3, #4
    4412:	18fb      	adds	r3, r7, r3
    4414:	33d8      	adds	r3, #216	; 0xd8
    4416:	681b      	ldr	r3, [r3, #0]
    4418:	4903      	ldr	r1, [pc, #12]	; (4428 <USB_Handler+0x5c4>)
    441a:	0038      	movs	r0, r7
    441c:	4798      	blx	r3
    441e:	e68d      	b.n	413c <USB_Handler+0x2d8>
    4420:	20000290 	.word	0x20000290
    4424:	200005d4 	.word	0x200005d4
    4428:	20000294 	.word	0x20000294

0000442c <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    442c:	2200      	movs	r2, #0
    442e:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    4430:	2301      	movs	r3, #1
    4432:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    4434:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    4436:	70c3      	strb	r3, [r0, #3]
}
    4438:	4770      	bx	lr
	...

0000443c <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    443c:	b5f0      	push	{r4, r5, r6, r7, lr}
    443e:	46ce      	mov	lr, r9
    4440:	4647      	mov	r7, r8
    4442:	b580      	push	{r7, lr}
    4444:	b083      	sub	sp, #12
    4446:	0004      	movs	r4, r0
    4448:	000d      	movs	r5, r1
    444a:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    444c:	2300      	movs	r3, #0
    444e:	4a6e      	ldr	r2, [pc, #440]	; (4608 <usb_init+0x1cc>)
    4450:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    4452:	4a6e      	ldr	r2, [pc, #440]	; (460c <usb_init+0x1d0>)
    4454:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    4456:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    4458:	496d      	ldr	r1, [pc, #436]	; (4610 <usb_init+0x1d4>)
    445a:	69ca      	ldr	r2, [r1, #28]
    445c:	2020      	movs	r0, #32
    445e:	4302      	orrs	r2, r0
    4460:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4462:	af01      	add	r7, sp, #4
    4464:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4466:	2201      	movs	r2, #1
    4468:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    446a:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    446c:	3306      	adds	r3, #6
    446e:	4699      	mov	r9, r3
    4470:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    4472:	0039      	movs	r1, r7
    4474:	3808      	subs	r0, #8
    4476:	4b67      	ldr	r3, [pc, #412]	; (4614 <usb_init+0x1d8>)
    4478:	4698      	mov	r8, r3
    447a:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    447c:	464b      	mov	r3, r9
    447e:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    4480:	0039      	movs	r1, r7
    4482:	2019      	movs	r0, #25
    4484:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    4486:	78b3      	ldrb	r3, [r6, #2]
    4488:	466a      	mov	r2, sp
    448a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    448c:	4669      	mov	r1, sp
    448e:	2006      	movs	r0, #6
    4490:	4b61      	ldr	r3, [pc, #388]	; (4618 <usb_init+0x1dc>)
    4492:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    4494:	2006      	movs	r0, #6
    4496:	4b61      	ldr	r3, [pc, #388]	; (461c <usb_init+0x1e0>)
    4498:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    449a:	782b      	ldrb	r3, [r5, #0]
    449c:	2201      	movs	r2, #1
    449e:	4313      	orrs	r3, r2
    44a0:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    44a2:	78ab      	ldrb	r3, [r5, #2]
    44a4:	07db      	lsls	r3, r3, #31
    44a6:	d4fc      	bmi.n	44a2 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    44a8:	4a5d      	ldr	r2, [pc, #372]	; (4620 <usb_init+0x1e4>)
    44aa:	78d3      	ldrb	r3, [r2, #3]
    44ac:	2103      	movs	r1, #3
    44ae:	438b      	bics	r3, r1
    44b0:	2102      	movs	r1, #2
    44b2:	430b      	orrs	r3, r1
    44b4:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    44b6:	78d3      	ldrb	r3, [r2, #3]
    44b8:	210c      	movs	r1, #12
    44ba:	438b      	bics	r3, r1
    44bc:	2108      	movs	r1, #8
    44be:	430b      	orrs	r3, r1
    44c0:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    44c2:	4b58      	ldr	r3, [pc, #352]	; (4624 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    44c4:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    44c6:	039b      	lsls	r3, r3, #14
    44c8:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    44ca:	2b1f      	cmp	r3, #31
    44cc:	d100      	bne.n	44d0 <usb_init+0x94>
    44ce:	e08f      	b.n	45f0 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    44d0:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    44d2:	019b      	lsls	r3, r3, #6
    44d4:	4954      	ldr	r1, [pc, #336]	; (4628 <usb_init+0x1ec>)
    44d6:	400a      	ands	r2, r1
    44d8:	4313      	orrs	r3, r2
    44da:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    44dc:	4b51      	ldr	r3, [pc, #324]	; (4624 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    44de:	681b      	ldr	r3, [r3, #0]
    44e0:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    44e2:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    44e4:	2b1f      	cmp	r3, #31
    44e6:	d100      	bne.n	44ea <usb_init+0xae>
    44e8:	e084      	b.n	45f4 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    44ea:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    44ec:	211f      	movs	r1, #31
    44ee:	438a      	bics	r2, r1
    44f0:	4313      	orrs	r3, r2
    44f2:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    44f4:	4b4b      	ldr	r3, [pc, #300]	; (4624 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    44f6:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    44f8:	019b      	lsls	r3, r3, #6
    44fa:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    44fc:	2b07      	cmp	r3, #7
    44fe:	d100      	bne.n	4502 <usb_init+0xc6>
    4500:	e07a      	b.n	45f8 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    4502:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4504:	031b      	lsls	r3, r3, #12
    4506:	4949      	ldr	r1, [pc, #292]	; (462c <usb_init+0x1f0>)
    4508:	400a      	ands	r2, r1
    450a:	4313      	orrs	r3, r2
    450c:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    450e:	7832      	ldrb	r2, [r6, #0]
    4510:	7829      	ldrb	r1, [r5, #0]
    4512:	01d2      	lsls	r2, r2, #7
    4514:	237f      	movs	r3, #127	; 0x7f
    4516:	400b      	ands	r3, r1
    4518:	4313      	orrs	r3, r2
    451a:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    451c:	7871      	ldrb	r1, [r6, #1]
    451e:	782b      	ldrb	r3, [r5, #0]
    4520:	2201      	movs	r2, #1
    4522:	400a      	ands	r2, r1
    4524:	0092      	lsls	r2, r2, #2
    4526:	2104      	movs	r1, #4
    4528:	438b      	bics	r3, r1
    452a:	4313      	orrs	r3, r2
    452c:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    452e:	4b40      	ldr	r3, [pc, #256]	; (4630 <usb_init+0x1f4>)
    4530:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    4532:	78f3      	ldrb	r3, [r6, #3]
    4534:	2b01      	cmp	r3, #1
    4536:	d061      	beq.n	45fc <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    4538:	2b00      	cmp	r3, #0
    453a:	d106      	bne.n	454a <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    453c:	6822      	ldr	r2, [r4, #0]
    453e:	8913      	ldrh	r3, [r2, #8]
    4540:	210c      	movs	r1, #12
    4542:	438b      	bics	r3, r1
    4544:	2104      	movs	r1, #4
    4546:	430b      	orrs	r3, r1
    4548:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    454a:	2280      	movs	r2, #128	; 0x80
    454c:	0052      	lsls	r2, r2, #1
    454e:	2100      	movs	r1, #0
    4550:	4837      	ldr	r0, [pc, #220]	; (4630 <usb_init+0x1f4>)
    4552:	4b38      	ldr	r3, [pc, #224]	; (4634 <usb_init+0x1f8>)
    4554:	4798      	blx	r3
    4556:	1d23      	adds	r3, r4, #4
    4558:	0021      	movs	r1, r4
    455a:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    455c:	2200      	movs	r2, #0
    455e:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    4560:	428b      	cmp	r3, r1
    4562:	d1fc      	bne.n	455e <usb_init+0x122>
    4564:	0021      	movs	r1, r4
    4566:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    4568:	2200      	movs	r2, #0
    456a:	601a      	str	r2, [r3, #0]
    456c:	605a      	str	r2, [r3, #4]
    456e:	609a      	str	r2, [r3, #8]
    4570:	60da      	str	r2, [r3, #12]
    4572:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4574:	428b      	cmp	r3, r1
    4576:	d1f8      	bne.n	456a <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    4578:	2300      	movs	r3, #0
    457a:	22a4      	movs	r2, #164	; 0xa4
    457c:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    457e:	3201      	adds	r2, #1
    4580:	54a3      	strb	r3, [r4, r2]
    4582:	0023      	movs	r3, r4
    4584:	33a6      	adds	r3, #166	; 0xa6
    4586:	0021      	movs	r1, r4
    4588:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    458a:	2200      	movs	r2, #0
    458c:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    458e:	721a      	strb	r2, [r3, #8]
    4590:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4592:	4299      	cmp	r1, r3
    4594:	d1fa      	bne.n	458c <usb_init+0x150>
    4596:	0023      	movs	r3, r4
    4598:	33b8      	adds	r3, #184	; 0xb8
    459a:	0021      	movs	r1, r4
    459c:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    459e:	2200      	movs	r2, #0
    45a0:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    45a2:	428b      	cmp	r3, r1
    45a4:	d1fc      	bne.n	45a0 <usb_init+0x164>
    45a6:	0021      	movs	r1, r4
    45a8:	3155      	adds	r1, #85	; 0x55
    45aa:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    45ac:	2200      	movs	r2, #0
    45ae:	601a      	str	r2, [r3, #0]
    45b0:	605a      	str	r2, [r3, #4]
    45b2:	609a      	str	r2, [r3, #8]
    45b4:	60da      	str	r2, [r3, #12]
    45b6:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    45b8:	428b      	cmp	r3, r1
    45ba:	d1f8      	bne.n	45ae <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    45bc:	2300      	movs	r3, #0
    45be:	22aa      	movs	r2, #170	; 0xaa
    45c0:	0052      	lsls	r2, r2, #1
    45c2:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    45c4:	3202      	adds	r2, #2
    45c6:	52a3      	strh	r3, [r4, r2]
    45c8:	0023      	movs	r3, r4
    45ca:	3359      	adds	r3, #89	; 0x59
    45cc:	33ff      	adds	r3, #255	; 0xff
    45ce:	3461      	adds	r4, #97	; 0x61
    45d0:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    45d2:	2200      	movs	r2, #0
    45d4:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    45d6:	721a      	strb	r2, [r3, #8]
    45d8:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    45da:	42a3      	cmp	r3, r4
    45dc:	d1fa      	bne.n	45d4 <usb_init+0x198>
    45de:	2280      	movs	r2, #128	; 0x80
    45e0:	4b15      	ldr	r3, [pc, #84]	; (4638 <usb_init+0x1fc>)
    45e2:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    45e4:	2000      	movs	r0, #0
    45e6:	b003      	add	sp, #12
    45e8:	bc0c      	pop	{r2, r3}
    45ea:	4690      	mov	r8, r2
    45ec:	4699      	mov	r9, r3
    45ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    45f0:	3b1a      	subs	r3, #26
    45f2:	e76d      	b.n	44d0 <usb_init+0x94>
		pad_transp = 29;
    45f4:	3b02      	subs	r3, #2
    45f6:	e778      	b.n	44ea <usb_init+0xae>
		pad_trim = 3;
    45f8:	3b04      	subs	r3, #4
    45fa:	e782      	b.n	4502 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    45fc:	6822      	ldr	r2, [r4, #0]
    45fe:	8913      	ldrh	r3, [r2, #8]
    4600:	3108      	adds	r1, #8
    4602:	438b      	bics	r3, r1
    4604:	8113      	strh	r3, [r2, #8]
    4606:	e7a0      	b.n	454a <usb_init+0x10e>
    4608:	2000029c 	.word	0x2000029c
    460c:	2000028c 	.word	0x2000028c
    4610:	40000400 	.word	0x40000400
    4614:	0000604d 	.word	0x0000604d
    4618:	00005f55 	.word	0x00005f55
    461c:	00005ec9 	.word	0x00005ec9
    4620:	41005000 	.word	0x41005000
    4624:	00806024 	.word	0x00806024
    4628:	fffff83f 	.word	0xfffff83f
    462c:	ffff8fff 	.word	0xffff8fff
    4630:	200005d4 	.word	0x200005d4
    4634:	000067bb 	.word	0x000067bb
    4638:	e000e100 	.word	0xe000e100

0000463c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    463c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    463e:	2a00      	cmp	r2, #0
    4640:	d001      	beq.n	4646 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4642:	0018      	movs	r0, r3
    4644:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4646:	008b      	lsls	r3, r1, #2
    4648:	4a06      	ldr	r2, [pc, #24]	; (4664 <extint_register_callback+0x28>)
    464a:	589b      	ldr	r3, [r3, r2]
    464c:	2b00      	cmp	r3, #0
    464e:	d003      	beq.n	4658 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4650:	4283      	cmp	r3, r0
    4652:	d005      	beq.n	4660 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4654:	231d      	movs	r3, #29
    4656:	e7f4      	b.n	4642 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4658:	0089      	lsls	r1, r1, #2
    465a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    465c:	2300      	movs	r3, #0
    465e:	e7f0      	b.n	4642 <extint_register_callback+0x6>
		return STATUS_OK;
    4660:	2300      	movs	r3, #0
    4662:	e7ee      	b.n	4642 <extint_register_callback+0x6>
    4664:	200002ec 	.word	0x200002ec

00004668 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4668:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    466a:	2900      	cmp	r1, #0
    466c:	d001      	beq.n	4672 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    466e:	0018      	movs	r0, r3
    4670:	4770      	bx	lr
		return NULL;
    4672:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4674:	281f      	cmp	r0, #31
    4676:	d800      	bhi.n	467a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4678:	4a02      	ldr	r2, [pc, #8]	; (4684 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    467a:	2301      	movs	r3, #1
    467c:	4083      	lsls	r3, r0
    467e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    4680:	2300      	movs	r3, #0
    4682:	e7f4      	b.n	466e <extint_chan_enable_callback+0x6>
    4684:	40001800 	.word	0x40001800

00004688 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4688:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    468a:	2900      	cmp	r1, #0
    468c:	d001      	beq.n	4692 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    468e:	0018      	movs	r0, r3
    4690:	4770      	bx	lr
		return NULL;
    4692:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4694:	281f      	cmp	r0, #31
    4696:	d800      	bhi.n	469a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    4698:	4a02      	ldr	r2, [pc, #8]	; (46a4 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    469a:	2301      	movs	r3, #1
    469c:	4083      	lsls	r3, r0
    469e:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    46a0:	2300      	movs	r3, #0
    46a2:	e7f4      	b.n	468e <extint_chan_disable_callback+0x6>
    46a4:	40001800 	.word	0x40001800

000046a8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    46a8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    46aa:	2200      	movs	r2, #0
    46ac:	4b10      	ldr	r3, [pc, #64]	; (46f0 <EIC_Handler+0x48>)
    46ae:	701a      	strb	r2, [r3, #0]
    46b0:	2300      	movs	r3, #0
    46b2:	4910      	ldr	r1, [pc, #64]	; (46f4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    46b4:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    46b6:	4e10      	ldr	r6, [pc, #64]	; (46f8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    46b8:	4c0d      	ldr	r4, [pc, #52]	; (46f0 <EIC_Handler+0x48>)
    46ba:	e00a      	b.n	46d2 <EIC_Handler+0x2a>
		return eics[eic_index];
    46bc:	490d      	ldr	r1, [pc, #52]	; (46f4 <EIC_Handler+0x4c>)
    46be:	e008      	b.n	46d2 <EIC_Handler+0x2a>
    46c0:	7823      	ldrb	r3, [r4, #0]
    46c2:	3301      	adds	r3, #1
    46c4:	b2db      	uxtb	r3, r3
    46c6:	7023      	strb	r3, [r4, #0]
    46c8:	2b0f      	cmp	r3, #15
    46ca:	d810      	bhi.n	46ee <EIC_Handler+0x46>
		return NULL;
    46cc:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    46ce:	2b1f      	cmp	r3, #31
    46d0:	d9f4      	bls.n	46bc <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    46d2:	0028      	movs	r0, r5
    46d4:	4018      	ands	r0, r3
    46d6:	2201      	movs	r2, #1
    46d8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    46da:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    46dc:	4210      	tst	r0, r2
    46de:	d0ef      	beq.n	46c0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    46e0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    46e2:	009b      	lsls	r3, r3, #2
    46e4:	599b      	ldr	r3, [r3, r6]
    46e6:	2b00      	cmp	r3, #0
    46e8:	d0ea      	beq.n	46c0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    46ea:	4798      	blx	r3
    46ec:	e7e8      	b.n	46c0 <EIC_Handler+0x18>
			}
		}
	}
}
    46ee:	bd70      	pop	{r4, r5, r6, pc}
    46f0:	200006d4 	.word	0x200006d4
    46f4:	40001800 	.word	0x40001800
    46f8:	200002ec 	.word	0x200002ec

000046fc <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    46fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    46fe:	46de      	mov	lr, fp
    4700:	4657      	mov	r7, sl
    4702:	464e      	mov	r6, r9
    4704:	4645      	mov	r5, r8
    4706:	b5e0      	push	{r5, r6, r7, lr}
    4708:	b087      	sub	sp, #28
    470a:	4680      	mov	r8, r0
    470c:	9104      	str	r1, [sp, #16]
    470e:	0016      	movs	r6, r2
    4710:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4712:	2200      	movs	r2, #0
    4714:	2300      	movs	r3, #0
    4716:	2100      	movs	r1, #0
    4718:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    471a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    471c:	2001      	movs	r0, #1
    471e:	0021      	movs	r1, r4
    4720:	9600      	str	r6, [sp, #0]
    4722:	9701      	str	r7, [sp, #4]
    4724:	465c      	mov	r4, fp
    4726:	9403      	str	r4, [sp, #12]
    4728:	4644      	mov	r4, r8
    472a:	9405      	str	r4, [sp, #20]
    472c:	e013      	b.n	4756 <long_division+0x5a>
    472e:	2420      	movs	r4, #32
    4730:	1a64      	subs	r4, r4, r1
    4732:	0005      	movs	r5, r0
    4734:	40e5      	lsrs	r5, r4
    4736:	46a8      	mov	r8, r5
    4738:	e014      	b.n	4764 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    473a:	9c00      	ldr	r4, [sp, #0]
    473c:	9d01      	ldr	r5, [sp, #4]
    473e:	1b12      	subs	r2, r2, r4
    4740:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    4742:	465c      	mov	r4, fp
    4744:	464d      	mov	r5, r9
    4746:	432c      	orrs	r4, r5
    4748:	46a3      	mov	fp, r4
    474a:	9c03      	ldr	r4, [sp, #12]
    474c:	4645      	mov	r5, r8
    474e:	432c      	orrs	r4, r5
    4750:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    4752:	3901      	subs	r1, #1
    4754:	d325      	bcc.n	47a2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    4756:	2420      	movs	r4, #32
    4758:	4264      	negs	r4, r4
    475a:	190c      	adds	r4, r1, r4
    475c:	d4e7      	bmi.n	472e <long_division+0x32>
    475e:	0005      	movs	r5, r0
    4760:	40a5      	lsls	r5, r4
    4762:	46a8      	mov	r8, r5
    4764:	0004      	movs	r4, r0
    4766:	408c      	lsls	r4, r1
    4768:	46a1      	mov	r9, r4
		r = r << 1;
    476a:	1892      	adds	r2, r2, r2
    476c:	415b      	adcs	r3, r3
    476e:	0014      	movs	r4, r2
    4770:	001d      	movs	r5, r3
		if (n & bit_shift) {
    4772:	9e05      	ldr	r6, [sp, #20]
    4774:	464f      	mov	r7, r9
    4776:	403e      	ands	r6, r7
    4778:	46b4      	mov	ip, r6
    477a:	9e04      	ldr	r6, [sp, #16]
    477c:	4647      	mov	r7, r8
    477e:	403e      	ands	r6, r7
    4780:	46b2      	mov	sl, r6
    4782:	4666      	mov	r6, ip
    4784:	4657      	mov	r7, sl
    4786:	433e      	orrs	r6, r7
    4788:	d003      	beq.n	4792 <long_division+0x96>
			r |= 0x01;
    478a:	0006      	movs	r6, r0
    478c:	4326      	orrs	r6, r4
    478e:	0032      	movs	r2, r6
    4790:	002b      	movs	r3, r5
		if (r >= d) {
    4792:	9c00      	ldr	r4, [sp, #0]
    4794:	9d01      	ldr	r5, [sp, #4]
    4796:	429d      	cmp	r5, r3
    4798:	d8db      	bhi.n	4752 <long_division+0x56>
    479a:	d1ce      	bne.n	473a <long_division+0x3e>
    479c:	4294      	cmp	r4, r2
    479e:	d8d8      	bhi.n	4752 <long_division+0x56>
    47a0:	e7cb      	b.n	473a <long_division+0x3e>
    47a2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    47a4:	4658      	mov	r0, fp
    47a6:	0019      	movs	r1, r3
    47a8:	b007      	add	sp, #28
    47aa:	bc3c      	pop	{r2, r3, r4, r5}
    47ac:	4690      	mov	r8, r2
    47ae:	4699      	mov	r9, r3
    47b0:	46a2      	mov	sl, r4
    47b2:	46ab      	mov	fp, r5
    47b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000047b6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    47b6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    47b8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    47ba:	2340      	movs	r3, #64	; 0x40
    47bc:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    47be:	4281      	cmp	r1, r0
    47c0:	d202      	bcs.n	47c8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    47c2:	0018      	movs	r0, r3
    47c4:	bd10      	pop	{r4, pc}
		baud_calculated++;
    47c6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    47c8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    47ca:	1c63      	adds	r3, r4, #1
    47cc:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    47ce:	4288      	cmp	r0, r1
    47d0:	d9f9      	bls.n	47c6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    47d2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    47d4:	2cff      	cmp	r4, #255	; 0xff
    47d6:	d8f4      	bhi.n	47c2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    47d8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    47da:	2300      	movs	r3, #0
    47dc:	e7f1      	b.n	47c2 <_sercom_get_sync_baud_val+0xc>
	...

000047e0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    47e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    47e2:	b083      	sub	sp, #12
    47e4:	000f      	movs	r7, r1
    47e6:	0016      	movs	r6, r2
    47e8:	aa08      	add	r2, sp, #32
    47ea:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    47ec:	0004      	movs	r4, r0
    47ee:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    47f0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    47f2:	42bc      	cmp	r4, r7
    47f4:	d902      	bls.n	47fc <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    47f6:	0010      	movs	r0, r2
    47f8:	b003      	add	sp, #12
    47fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    47fc:	2b00      	cmp	r3, #0
    47fe:	d114      	bne.n	482a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4800:	0002      	movs	r2, r0
    4802:	0008      	movs	r0, r1
    4804:	2100      	movs	r1, #0
    4806:	4c19      	ldr	r4, [pc, #100]	; (486c <_sercom_get_async_baud_val+0x8c>)
    4808:	47a0      	blx	r4
    480a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    480c:	003a      	movs	r2, r7
    480e:	2300      	movs	r3, #0
    4810:	2000      	movs	r0, #0
    4812:	4c17      	ldr	r4, [pc, #92]	; (4870 <_sercom_get_async_baud_val+0x90>)
    4814:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4816:	2200      	movs	r2, #0
    4818:	2301      	movs	r3, #1
    481a:	1a12      	subs	r2, r2, r0
    481c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    481e:	0c12      	lsrs	r2, r2, #16
    4820:	041b      	lsls	r3, r3, #16
    4822:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4824:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    4826:	2200      	movs	r2, #0
    4828:	e7e5      	b.n	47f6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    482a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    482c:	2b01      	cmp	r3, #1
    482e:	d1f9      	bne.n	4824 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    4830:	000a      	movs	r2, r1
    4832:	2300      	movs	r3, #0
    4834:	2100      	movs	r1, #0
    4836:	4c0d      	ldr	r4, [pc, #52]	; (486c <_sercom_get_async_baud_val+0x8c>)
    4838:	47a0      	blx	r4
    483a:	0002      	movs	r2, r0
    483c:	000b      	movs	r3, r1
    483e:	9200      	str	r2, [sp, #0]
    4840:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    4842:	0038      	movs	r0, r7
    4844:	2100      	movs	r1, #0
    4846:	4c0a      	ldr	r4, [pc, #40]	; (4870 <_sercom_get_async_baud_val+0x90>)
    4848:	47a0      	blx	r4
    484a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    484c:	2380      	movs	r3, #128	; 0x80
    484e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4850:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    4852:	4298      	cmp	r0, r3
    4854:	d8cf      	bhi.n	47f6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    4856:	0f79      	lsrs	r1, r7, #29
    4858:	00f8      	lsls	r0, r7, #3
    485a:	9a00      	ldr	r2, [sp, #0]
    485c:	9b01      	ldr	r3, [sp, #4]
    485e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    4860:	00ea      	lsls	r2, r5, #3
    4862:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    4864:	b2d2      	uxtb	r2, r2
    4866:	0352      	lsls	r2, r2, #13
    4868:	432a      	orrs	r2, r5
    486a:	e7db      	b.n	4824 <_sercom_get_async_baud_val+0x44>
    486c:	00006575 	.word	0x00006575
    4870:	000046fd 	.word	0x000046fd

00004874 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4874:	b510      	push	{r4, lr}
    4876:	b082      	sub	sp, #8
    4878:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    487a:	4b0e      	ldr	r3, [pc, #56]	; (48b4 <sercom_set_gclk_generator+0x40>)
    487c:	781b      	ldrb	r3, [r3, #0]
    487e:	2b00      	cmp	r3, #0
    4880:	d007      	beq.n	4892 <sercom_set_gclk_generator+0x1e>
    4882:	2900      	cmp	r1, #0
    4884:	d105      	bne.n	4892 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4886:	4b0b      	ldr	r3, [pc, #44]	; (48b4 <sercom_set_gclk_generator+0x40>)
    4888:	785b      	ldrb	r3, [r3, #1]
    488a:	4283      	cmp	r3, r0
    488c:	d010      	beq.n	48b0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    488e:	201d      	movs	r0, #29
    4890:	e00c      	b.n	48ac <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    4892:	a901      	add	r1, sp, #4
    4894:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4896:	2013      	movs	r0, #19
    4898:	4b07      	ldr	r3, [pc, #28]	; (48b8 <sercom_set_gclk_generator+0x44>)
    489a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    489c:	2013      	movs	r0, #19
    489e:	4b07      	ldr	r3, [pc, #28]	; (48bc <sercom_set_gclk_generator+0x48>)
    48a0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    48a2:	4b04      	ldr	r3, [pc, #16]	; (48b4 <sercom_set_gclk_generator+0x40>)
    48a4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    48a6:	2201      	movs	r2, #1
    48a8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    48aa:	2000      	movs	r0, #0
}
    48ac:	b002      	add	sp, #8
    48ae:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    48b0:	2000      	movs	r0, #0
    48b2:	e7fb      	b.n	48ac <sercom_set_gclk_generator+0x38>
    48b4:	200002a8 	.word	0x200002a8
    48b8:	00005f55 	.word	0x00005f55
    48bc:	00005ec9 	.word	0x00005ec9

000048c0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    48c0:	4b40      	ldr	r3, [pc, #256]	; (49c4 <_sercom_get_default_pad+0x104>)
    48c2:	4298      	cmp	r0, r3
    48c4:	d031      	beq.n	492a <_sercom_get_default_pad+0x6a>
    48c6:	d90a      	bls.n	48de <_sercom_get_default_pad+0x1e>
    48c8:	4b3f      	ldr	r3, [pc, #252]	; (49c8 <_sercom_get_default_pad+0x108>)
    48ca:	4298      	cmp	r0, r3
    48cc:	d04d      	beq.n	496a <_sercom_get_default_pad+0xaa>
    48ce:	4b3f      	ldr	r3, [pc, #252]	; (49cc <_sercom_get_default_pad+0x10c>)
    48d0:	4298      	cmp	r0, r3
    48d2:	d05a      	beq.n	498a <_sercom_get_default_pad+0xca>
    48d4:	4b3e      	ldr	r3, [pc, #248]	; (49d0 <_sercom_get_default_pad+0x110>)
    48d6:	4298      	cmp	r0, r3
    48d8:	d037      	beq.n	494a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    48da:	2000      	movs	r0, #0
}
    48dc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    48de:	4b3d      	ldr	r3, [pc, #244]	; (49d4 <_sercom_get_default_pad+0x114>)
    48e0:	4298      	cmp	r0, r3
    48e2:	d00c      	beq.n	48fe <_sercom_get_default_pad+0x3e>
    48e4:	4b3c      	ldr	r3, [pc, #240]	; (49d8 <_sercom_get_default_pad+0x118>)
    48e6:	4298      	cmp	r0, r3
    48e8:	d1f7      	bne.n	48da <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    48ea:	2901      	cmp	r1, #1
    48ec:	d017      	beq.n	491e <_sercom_get_default_pad+0x5e>
    48ee:	2900      	cmp	r1, #0
    48f0:	d05d      	beq.n	49ae <_sercom_get_default_pad+0xee>
    48f2:	2902      	cmp	r1, #2
    48f4:	d015      	beq.n	4922 <_sercom_get_default_pad+0x62>
    48f6:	2903      	cmp	r1, #3
    48f8:	d015      	beq.n	4926 <_sercom_get_default_pad+0x66>
	return 0;
    48fa:	2000      	movs	r0, #0
    48fc:	e7ee      	b.n	48dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    48fe:	2901      	cmp	r1, #1
    4900:	d007      	beq.n	4912 <_sercom_get_default_pad+0x52>
    4902:	2900      	cmp	r1, #0
    4904:	d051      	beq.n	49aa <_sercom_get_default_pad+0xea>
    4906:	2902      	cmp	r1, #2
    4908:	d005      	beq.n	4916 <_sercom_get_default_pad+0x56>
    490a:	2903      	cmp	r1, #3
    490c:	d005      	beq.n	491a <_sercom_get_default_pad+0x5a>
	return 0;
    490e:	2000      	movs	r0, #0
    4910:	e7e4      	b.n	48dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4912:	4832      	ldr	r0, [pc, #200]	; (49dc <_sercom_get_default_pad+0x11c>)
    4914:	e7e2      	b.n	48dc <_sercom_get_default_pad+0x1c>
    4916:	4832      	ldr	r0, [pc, #200]	; (49e0 <_sercom_get_default_pad+0x120>)
    4918:	e7e0      	b.n	48dc <_sercom_get_default_pad+0x1c>
    491a:	4832      	ldr	r0, [pc, #200]	; (49e4 <_sercom_get_default_pad+0x124>)
    491c:	e7de      	b.n	48dc <_sercom_get_default_pad+0x1c>
    491e:	4832      	ldr	r0, [pc, #200]	; (49e8 <_sercom_get_default_pad+0x128>)
    4920:	e7dc      	b.n	48dc <_sercom_get_default_pad+0x1c>
    4922:	4832      	ldr	r0, [pc, #200]	; (49ec <_sercom_get_default_pad+0x12c>)
    4924:	e7da      	b.n	48dc <_sercom_get_default_pad+0x1c>
    4926:	4832      	ldr	r0, [pc, #200]	; (49f0 <_sercom_get_default_pad+0x130>)
    4928:	e7d8      	b.n	48dc <_sercom_get_default_pad+0x1c>
    492a:	2901      	cmp	r1, #1
    492c:	d007      	beq.n	493e <_sercom_get_default_pad+0x7e>
    492e:	2900      	cmp	r1, #0
    4930:	d03f      	beq.n	49b2 <_sercom_get_default_pad+0xf2>
    4932:	2902      	cmp	r1, #2
    4934:	d005      	beq.n	4942 <_sercom_get_default_pad+0x82>
    4936:	2903      	cmp	r1, #3
    4938:	d005      	beq.n	4946 <_sercom_get_default_pad+0x86>
	return 0;
    493a:	2000      	movs	r0, #0
    493c:	e7ce      	b.n	48dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    493e:	482d      	ldr	r0, [pc, #180]	; (49f4 <_sercom_get_default_pad+0x134>)
    4940:	e7cc      	b.n	48dc <_sercom_get_default_pad+0x1c>
    4942:	482d      	ldr	r0, [pc, #180]	; (49f8 <_sercom_get_default_pad+0x138>)
    4944:	e7ca      	b.n	48dc <_sercom_get_default_pad+0x1c>
    4946:	482d      	ldr	r0, [pc, #180]	; (49fc <_sercom_get_default_pad+0x13c>)
    4948:	e7c8      	b.n	48dc <_sercom_get_default_pad+0x1c>
    494a:	2901      	cmp	r1, #1
    494c:	d007      	beq.n	495e <_sercom_get_default_pad+0x9e>
    494e:	2900      	cmp	r1, #0
    4950:	d031      	beq.n	49b6 <_sercom_get_default_pad+0xf6>
    4952:	2902      	cmp	r1, #2
    4954:	d005      	beq.n	4962 <_sercom_get_default_pad+0xa2>
    4956:	2903      	cmp	r1, #3
    4958:	d005      	beq.n	4966 <_sercom_get_default_pad+0xa6>
	return 0;
    495a:	2000      	movs	r0, #0
    495c:	e7be      	b.n	48dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    495e:	4828      	ldr	r0, [pc, #160]	; (4a00 <_sercom_get_default_pad+0x140>)
    4960:	e7bc      	b.n	48dc <_sercom_get_default_pad+0x1c>
    4962:	4828      	ldr	r0, [pc, #160]	; (4a04 <_sercom_get_default_pad+0x144>)
    4964:	e7ba      	b.n	48dc <_sercom_get_default_pad+0x1c>
    4966:	4828      	ldr	r0, [pc, #160]	; (4a08 <_sercom_get_default_pad+0x148>)
    4968:	e7b8      	b.n	48dc <_sercom_get_default_pad+0x1c>
    496a:	2901      	cmp	r1, #1
    496c:	d007      	beq.n	497e <_sercom_get_default_pad+0xbe>
    496e:	2900      	cmp	r1, #0
    4970:	d023      	beq.n	49ba <_sercom_get_default_pad+0xfa>
    4972:	2902      	cmp	r1, #2
    4974:	d005      	beq.n	4982 <_sercom_get_default_pad+0xc2>
    4976:	2903      	cmp	r1, #3
    4978:	d005      	beq.n	4986 <_sercom_get_default_pad+0xc6>
	return 0;
    497a:	2000      	movs	r0, #0
    497c:	e7ae      	b.n	48dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    497e:	4823      	ldr	r0, [pc, #140]	; (4a0c <_sercom_get_default_pad+0x14c>)
    4980:	e7ac      	b.n	48dc <_sercom_get_default_pad+0x1c>
    4982:	4823      	ldr	r0, [pc, #140]	; (4a10 <_sercom_get_default_pad+0x150>)
    4984:	e7aa      	b.n	48dc <_sercom_get_default_pad+0x1c>
    4986:	4823      	ldr	r0, [pc, #140]	; (4a14 <_sercom_get_default_pad+0x154>)
    4988:	e7a8      	b.n	48dc <_sercom_get_default_pad+0x1c>
    498a:	2901      	cmp	r1, #1
    498c:	d007      	beq.n	499e <_sercom_get_default_pad+0xde>
    498e:	2900      	cmp	r1, #0
    4990:	d015      	beq.n	49be <_sercom_get_default_pad+0xfe>
    4992:	2902      	cmp	r1, #2
    4994:	d005      	beq.n	49a2 <_sercom_get_default_pad+0xe2>
    4996:	2903      	cmp	r1, #3
    4998:	d005      	beq.n	49a6 <_sercom_get_default_pad+0xe6>
	return 0;
    499a:	2000      	movs	r0, #0
    499c:	e79e      	b.n	48dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    499e:	481e      	ldr	r0, [pc, #120]	; (4a18 <_sercom_get_default_pad+0x158>)
    49a0:	e79c      	b.n	48dc <_sercom_get_default_pad+0x1c>
    49a2:	481e      	ldr	r0, [pc, #120]	; (4a1c <_sercom_get_default_pad+0x15c>)
    49a4:	e79a      	b.n	48dc <_sercom_get_default_pad+0x1c>
    49a6:	481e      	ldr	r0, [pc, #120]	; (4a20 <_sercom_get_default_pad+0x160>)
    49a8:	e798      	b.n	48dc <_sercom_get_default_pad+0x1c>
    49aa:	481e      	ldr	r0, [pc, #120]	; (4a24 <_sercom_get_default_pad+0x164>)
    49ac:	e796      	b.n	48dc <_sercom_get_default_pad+0x1c>
    49ae:	2003      	movs	r0, #3
    49b0:	e794      	b.n	48dc <_sercom_get_default_pad+0x1c>
    49b2:	481d      	ldr	r0, [pc, #116]	; (4a28 <_sercom_get_default_pad+0x168>)
    49b4:	e792      	b.n	48dc <_sercom_get_default_pad+0x1c>
    49b6:	481d      	ldr	r0, [pc, #116]	; (4a2c <_sercom_get_default_pad+0x16c>)
    49b8:	e790      	b.n	48dc <_sercom_get_default_pad+0x1c>
    49ba:	481d      	ldr	r0, [pc, #116]	; (4a30 <_sercom_get_default_pad+0x170>)
    49bc:	e78e      	b.n	48dc <_sercom_get_default_pad+0x1c>
    49be:	481d      	ldr	r0, [pc, #116]	; (4a34 <_sercom_get_default_pad+0x174>)
    49c0:	e78c      	b.n	48dc <_sercom_get_default_pad+0x1c>
    49c2:	46c0      	nop			; (mov r8, r8)
    49c4:	42001000 	.word	0x42001000
    49c8:	42001800 	.word	0x42001800
    49cc:	42001c00 	.word	0x42001c00
    49d0:	42001400 	.word	0x42001400
    49d4:	42000800 	.word	0x42000800
    49d8:	42000c00 	.word	0x42000c00
    49dc:	00050003 	.word	0x00050003
    49e0:	00060003 	.word	0x00060003
    49e4:	00070003 	.word	0x00070003
    49e8:	00010003 	.word	0x00010003
    49ec:	001e0003 	.word	0x001e0003
    49f0:	001f0003 	.word	0x001f0003
    49f4:	00090003 	.word	0x00090003
    49f8:	000a0003 	.word	0x000a0003
    49fc:	000b0003 	.word	0x000b0003
    4a00:	00110003 	.word	0x00110003
    4a04:	00120003 	.word	0x00120003
    4a08:	00130003 	.word	0x00130003
    4a0c:	000d0003 	.word	0x000d0003
    4a10:	000e0003 	.word	0x000e0003
    4a14:	000f0003 	.word	0x000f0003
    4a18:	00170003 	.word	0x00170003
    4a1c:	00180003 	.word	0x00180003
    4a20:	00190003 	.word	0x00190003
    4a24:	00040003 	.word	0x00040003
    4a28:	00080003 	.word	0x00080003
    4a2c:	00100003 	.word	0x00100003
    4a30:	000c0003 	.word	0x000c0003
    4a34:	00160003 	.word	0x00160003

00004a38 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4a38:	b530      	push	{r4, r5, lr}
    4a3a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4a3c:	4b0b      	ldr	r3, [pc, #44]	; (4a6c <_sercom_get_sercom_inst_index+0x34>)
    4a3e:	466a      	mov	r2, sp
    4a40:	cb32      	ldmia	r3!, {r1, r4, r5}
    4a42:	c232      	stmia	r2!, {r1, r4, r5}
    4a44:	cb32      	ldmia	r3!, {r1, r4, r5}
    4a46:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4a48:	9b00      	ldr	r3, [sp, #0]
    4a4a:	4283      	cmp	r3, r0
    4a4c:	d00b      	beq.n	4a66 <_sercom_get_sercom_inst_index+0x2e>
    4a4e:	2301      	movs	r3, #1
    4a50:	009a      	lsls	r2, r3, #2
    4a52:	4669      	mov	r1, sp
    4a54:	5852      	ldr	r2, [r2, r1]
    4a56:	4282      	cmp	r2, r0
    4a58:	d006      	beq.n	4a68 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4a5a:	3301      	adds	r3, #1
    4a5c:	2b06      	cmp	r3, #6
    4a5e:	d1f7      	bne.n	4a50 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4a60:	2000      	movs	r0, #0
}
    4a62:	b007      	add	sp, #28
    4a64:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4a66:	2300      	movs	r3, #0
			return i;
    4a68:	b2d8      	uxtb	r0, r3
    4a6a:	e7fa      	b.n	4a62 <_sercom_get_sercom_inst_index+0x2a>
    4a6c:	0000720c 	.word	0x0000720c

00004a70 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    4a70:	b570      	push	{r4, r5, r6, lr}
    4a72:	b082      	sub	sp, #8
    4a74:	0006      	movs	r6, r0
    4a76:	000d      	movs	r5, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    4a78:	2200      	movs	r2, #0
    4a7a:	466b      	mov	r3, sp
    4a7c:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4a7e:	6804      	ldr	r4, [r0, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    4a80:	69e3      	ldr	r3, [r4, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    4a82:	2b00      	cmp	r3, #0
    4a84:	d1fc      	bne.n	4a80 <spi_set_baudrate+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    4a86:	338f      	adds	r3, #143	; 0x8f
    4a88:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4a8a:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4a8c:	6823      	ldr	r3, [r4, #0]
    4a8e:	2202      	movs	r2, #2
    4a90:	4393      	bics	r3, r2
    4a92:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4a94:	6830      	ldr	r0, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    4a96:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    4a98:	2b00      	cmp	r3, #0
    4a9a:	d1fc      	bne.n	4a96 <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4a9c:	4b12      	ldr	r3, [pc, #72]	; (4ae8 <spi_set_baudrate+0x78>)
    4a9e:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4aa0:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4aa2:	b2c0      	uxtb	r0, r0
    4aa4:	4b11      	ldr	r3, [pc, #68]	; (4aec <spi_set_baudrate+0x7c>)
    4aa6:	4798      	blx	r3
    4aa8:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    4aaa:	466b      	mov	r3, sp
    4aac:	1d9a      	adds	r2, r3, #6
    4aae:	0028      	movs	r0, r5
    4ab0:	4b0f      	ldr	r3, [pc, #60]	; (4af0 <spi_set_baudrate+0x80>)
    4ab2:	4798      	blx	r3
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    4ab4:	2800      	cmp	r0, #0
    4ab6:	d002      	beq.n	4abe <spi_set_baudrate+0x4e>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    4ab8:	2017      	movs	r0, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    4aba:	b002      	add	sp, #8
    4abc:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    4abe:	466b      	mov	r3, sp
    4ac0:	3306      	adds	r3, #6
    4ac2:	781b      	ldrb	r3, [r3, #0]
    4ac4:	7323      	strb	r3, [r4, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4ac6:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    4ac8:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    4aca:	2a00      	cmp	r2, #0
    4acc:	d1fc      	bne.n	4ac8 <spi_set_baudrate+0x58>
    4ace:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    4ad0:	2a00      	cmp	r2, #0
    4ad2:	d1fc      	bne.n	4ace <spi_set_baudrate+0x5e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4ad4:	681a      	ldr	r2, [r3, #0]
    4ad6:	2102      	movs	r1, #2
    4ad8:	430a      	orrs	r2, r1
    4ada:	601a      	str	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4adc:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    4ade:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4ae0:	2b00      	cmp	r3, #0
    4ae2:	d1fc      	bne.n	4ade <spi_set_baudrate+0x6e>
    4ae4:	e7e9      	b.n	4aba <spi_set_baudrate+0x4a>
    4ae6:	46c0      	nop			; (mov r8, r8)
    4ae8:	00004a39 	.word	0x00004a39
    4aec:	00005f71 	.word	0x00005f71
    4af0:	000047b7 	.word	0x000047b7

00004af4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4af6:	46d6      	mov	lr, sl
    4af8:	464f      	mov	r7, r9
    4afa:	b580      	push	{r7, lr}
    4afc:	b08b      	sub	sp, #44	; 0x2c
    4afe:	4681      	mov	r9, r0
    4b00:	000f      	movs	r7, r1
    4b02:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4b04:	0003      	movs	r3, r0
    4b06:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4b08:	680b      	ldr	r3, [r1, #0]
    4b0a:	079b      	lsls	r3, r3, #30
    4b0c:	d409      	bmi.n	4b22 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4b0e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    4b10:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4b12:	07db      	lsls	r3, r3, #31
    4b14:	d400      	bmi.n	4b18 <spi_init+0x24>
    4b16:	e0b1      	b.n	4c7c <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    4b18:	b00b      	add	sp, #44	; 0x2c
    4b1a:	bc0c      	pop	{r2, r3}
    4b1c:	4691      	mov	r9, r2
    4b1e:	469a      	mov	sl, r3
    4b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    4b22:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4b24:	9305      	str	r3, [sp, #20]
    4b26:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4b28:	9306      	str	r3, [sp, #24]
    4b2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    4b2c:	9307      	str	r3, [sp, #28]
    4b2e:	6b53      	ldr	r3, [r2, #52]	; 0x34
    4b30:	9308      	str	r3, [sp, #32]
    4b32:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4b34:	ab05      	add	r3, sp, #20
    4b36:	9301      	str	r3, [sp, #4]
    4b38:	e00a      	b.n	4b50 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4b3a:	0038      	movs	r0, r7
    4b3c:	4baf      	ldr	r3, [pc, #700]	; (4dfc <spi_init+0x308>)
    4b3e:	4798      	blx	r3
    4b40:	e00c      	b.n	4b5c <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    4b42:	230f      	movs	r3, #15
    4b44:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    4b46:	4281      	cmp	r1, r0
    4b48:	d12d      	bne.n	4ba6 <spi_init+0xb2>
    4b4a:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4b4c:	2e04      	cmp	r6, #4
    4b4e:	d02f      	beq.n	4bb0 <spi_init+0xbc>
    4b50:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4b52:	00b3      	lsls	r3, r6, #2
    4b54:	9a01      	ldr	r2, [sp, #4]
    4b56:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    4b58:	2800      	cmp	r0, #0
    4b5a:	d0ee      	beq.n	4b3a <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    4b5c:	1c43      	adds	r3, r0, #1
    4b5e:	d0f4      	beq.n	4b4a <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    4b60:	0401      	lsls	r1, r0, #16
    4b62:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    4b64:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    4b66:	b2c3      	uxtb	r3, r0
    4b68:	469c      	mov	ip, r3
		return NULL;
    4b6a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4b6c:	0602      	lsls	r2, r0, #24
    4b6e:	d405      	bmi.n	4b7c <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    4b70:	4663      	mov	r3, ip
    4b72:	095b      	lsrs	r3, r3, #5
    4b74:	01db      	lsls	r3, r3, #7
    4b76:	4aa2      	ldr	r2, [pc, #648]	; (4e00 <spi_init+0x30c>)
    4b78:	4692      	mov	sl, r2
    4b7a:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    4b7c:	221f      	movs	r2, #31
    4b7e:	4660      	mov	r0, ip
    4b80:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    4b82:	1898      	adds	r0, r3, r2
    4b84:	3040      	adds	r0, #64	; 0x40
    4b86:	7800      	ldrb	r0, [r0, #0]
    4b88:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    4b8a:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    4b8c:	4655      	mov	r5, sl
    4b8e:	07ed      	lsls	r5, r5, #31
    4b90:	d5d9      	bpl.n	4b46 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    4b92:	0852      	lsrs	r2, r2, #1
    4b94:	189b      	adds	r3, r3, r2
    4b96:	3330      	adds	r3, #48	; 0x30
    4b98:	7818      	ldrb	r0, [r3, #0]
    4b9a:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    4b9c:	4663      	mov	r3, ip
    4b9e:	07db      	lsls	r3, r3, #31
    4ba0:	d5cf      	bpl.n	4b42 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    4ba2:	0900      	lsrs	r0, r0, #4
    4ba4:	e7cf      	b.n	4b46 <spi_init+0x52>
			module->hw = NULL;
    4ba6:	2300      	movs	r3, #0
    4ba8:	464a      	mov	r2, r9
    4baa:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    4bac:	201c      	movs	r0, #28
    4bae:	e7b3      	b.n	4b18 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    4bb0:	2013      	movs	r0, #19
    4bb2:	4b94      	ldr	r3, [pc, #592]	; (4e04 <spi_init+0x310>)
    4bb4:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    4bb6:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    4bb8:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    4bba:	2a01      	cmp	r2, #1
    4bbc:	d016      	beq.n	4bec <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
    4bbe:	7821      	ldrb	r1, [r4, #0]
    4bc0:	2900      	cmp	r1, #0
    4bc2:	d127      	bne.n	4c14 <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
    4bc4:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    4bc6:	7fe2      	ldrb	r2, [r4, #31]
    4bc8:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    4bca:	7fa0      	ldrb	r0, [r4, #30]
    4bcc:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    4bce:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    4bd0:	429a      	cmp	r2, r3
    4bd2:	d1a1      	bne.n	4b18 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    4bd4:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    4bd6:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    4bd8:	3004      	adds	r0, #4
    4bda:	5c20      	ldrb	r0, [r4, r0]
    4bdc:	2800      	cmp	r0, #0
    4bde:	d001      	beq.n	4be4 <spi_init+0xf0>
    4be0:	2040      	movs	r0, #64	; 0x40
    4be2:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    4be4:	2008      	movs	r0, #8
    4be6:	4303      	orrs	r3, r0
    4be8:	431d      	orrs	r5, r3
    4bea:	e014      	b.n	4c16 <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
    4bec:	aa04      	add	r2, sp, #16
    4bee:	0001      	movs	r1, r0
    4bf0:	69a0      	ldr	r0, [r4, #24]
    4bf2:	4b85      	ldr	r3, [pc, #532]	; (4e08 <spi_init+0x314>)
    4bf4:	4798      	blx	r3
    4bf6:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    4bf8:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    4bfa:	2b00      	cmp	r3, #0
    4bfc:	d000      	beq.n	4c00 <spi_init+0x10c>
    4bfe:	e78b      	b.n	4b18 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    4c00:	7b3b      	ldrb	r3, [r7, #12]
    4c02:	b2db      	uxtb	r3, r3
    4c04:	aa04      	add	r2, sp, #16
    4c06:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    4c08:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    4c0a:	429a      	cmp	r2, r3
    4c0c:	d000      	beq.n	4c10 <spi_init+0x11c>
    4c0e:	e783      	b.n	4b18 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    4c10:	350c      	adds	r5, #12
    4c12:	e7d4      	b.n	4bbe <spi_init+0xca>
	uint32_t ctrlb = 0;
    4c14:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    4c16:	6863      	ldr	r3, [r4, #4]
    4c18:	68a0      	ldr	r0, [r4, #8]
    4c1a:	4303      	orrs	r3, r0
    4c1c:	68e0      	ldr	r0, [r4, #12]
    4c1e:	4303      	orrs	r3, r0
    4c20:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    4c22:	7c20      	ldrb	r0, [r4, #16]
    4c24:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    4c26:	7c60      	ldrb	r0, [r4, #17]
    4c28:	2800      	cmp	r0, #0
    4c2a:	d001      	beq.n	4c30 <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4c2c:	2080      	movs	r0, #128	; 0x80
    4c2e:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    4c30:	7ca0      	ldrb	r0, [r4, #18]
    4c32:	2800      	cmp	r0, #0
    4c34:	d002      	beq.n	4c3c <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4c36:	2080      	movs	r0, #128	; 0x80
    4c38:	0280      	lsls	r0, r0, #10
    4c3a:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    4c3c:	7ce0      	ldrb	r0, [r4, #19]
    4c3e:	2800      	cmp	r0, #0
    4c40:	d002      	beq.n	4c48 <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4c42:	2080      	movs	r0, #128	; 0x80
    4c44:	0080      	lsls	r0, r0, #2
    4c46:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    4c48:	7d20      	ldrb	r0, [r4, #20]
    4c4a:	2800      	cmp	r0, #0
    4c4c:	d002      	beq.n	4c54 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4c4e:	2080      	movs	r0, #128	; 0x80
    4c50:	0180      	lsls	r0, r0, #6
    4c52:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    4c54:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    4c56:	2502      	movs	r5, #2
    4c58:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    4c5a:	4283      	cmp	r3, r0
    4c5c:	d004      	beq.n	4c68 <spi_init+0x174>
	module->hw = NULL;
    4c5e:	2300      	movs	r3, #0
    4c60:	464a      	mov	r2, r9
    4c62:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    4c64:	201c      	movs	r0, #28
    4c66:	e757      	b.n	4b18 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    4c68:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    4c6a:	4293      	cmp	r3, r2
    4c6c:	d1f7      	bne.n	4c5e <spi_init+0x16a>
		module->mode           = config->mode;
    4c6e:	464b      	mov	r3, r9
    4c70:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
    4c72:	7c23      	ldrb	r3, [r4, #16]
    4c74:	464a      	mov	r2, r9
    4c76:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    4c78:	2000      	movs	r0, #0
    4c7a:	e74d      	b.n	4b18 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4c7c:	0008      	movs	r0, r1
    4c7e:	4b63      	ldr	r3, [pc, #396]	; (4e0c <spi_init+0x318>)
    4c80:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    4c82:	4a63      	ldr	r2, [pc, #396]	; (4e10 <spi_init+0x31c>)
    4c84:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4c86:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4c88:	2301      	movs	r3, #1
    4c8a:	40ab      	lsls	r3, r5
    4c8c:	430b      	orrs	r3, r1
    4c8e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4c90:	a909      	add	r1, sp, #36	; 0x24
    4c92:	2624      	movs	r6, #36	; 0x24
    4c94:	5da3      	ldrb	r3, [r4, r6]
    4c96:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4c98:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4c9a:	b2c5      	uxtb	r5, r0
    4c9c:	0028      	movs	r0, r5
    4c9e:	4b5d      	ldr	r3, [pc, #372]	; (4e14 <spi_init+0x320>)
    4ca0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4ca2:	0028      	movs	r0, r5
    4ca4:	4b5c      	ldr	r3, [pc, #368]	; (4e18 <spi_init+0x324>)
    4ca6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4ca8:	5da0      	ldrb	r0, [r4, r6]
    4caa:	2100      	movs	r1, #0
    4cac:	4b5b      	ldr	r3, [pc, #364]	; (4e1c <spi_init+0x328>)
    4cae:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    4cb0:	7823      	ldrb	r3, [r4, #0]
    4cb2:	2b01      	cmp	r3, #1
    4cb4:	d020      	beq.n	4cf8 <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
    4cb6:	7823      	ldrb	r3, [r4, #0]
    4cb8:	2b00      	cmp	r3, #0
    4cba:	d103      	bne.n	4cc4 <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    4cbc:	683b      	ldr	r3, [r7, #0]
    4cbe:	2208      	movs	r2, #8
    4cc0:	4313      	orrs	r3, r2
    4cc2:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4cc4:	464b      	mov	r3, r9
    4cc6:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4cc8:	ab04      	add	r3, sp, #16
    4cca:	2280      	movs	r2, #128	; 0x80
    4ccc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4cce:	2200      	movs	r2, #0
    4cd0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4cd2:	2101      	movs	r1, #1
    4cd4:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    4cd6:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    4cd8:	7823      	ldrb	r3, [r4, #0]
    4cda:	2b00      	cmp	r3, #0
    4cdc:	d101      	bne.n	4ce2 <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4cde:	ab04      	add	r3, sp, #16
    4ce0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4ce2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4ce4:	9305      	str	r3, [sp, #20]
    4ce6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4ce8:	9306      	str	r3, [sp, #24]
    4cea:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4cec:	9307      	str	r3, [sp, #28]
    4cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4cf0:	9308      	str	r3, [sp, #32]
    4cf2:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4cf4:	ad05      	add	r5, sp, #20
    4cf6:	e011      	b.n	4d1c <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4cf8:	683b      	ldr	r3, [r7, #0]
    4cfa:	220c      	movs	r2, #12
    4cfc:	4313      	orrs	r3, r2
    4cfe:	603b      	str	r3, [r7, #0]
    4d00:	e7d9      	b.n	4cb6 <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4d02:	0030      	movs	r0, r6
    4d04:	4b3d      	ldr	r3, [pc, #244]	; (4dfc <spi_init+0x308>)
    4d06:	4798      	blx	r3
    4d08:	e00d      	b.n	4d26 <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4d0a:	a904      	add	r1, sp, #16
    4d0c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4d0e:	0c00      	lsrs	r0, r0, #16
    4d10:	b2c0      	uxtb	r0, r0
    4d12:	4b43      	ldr	r3, [pc, #268]	; (4e20 <spi_init+0x32c>)
    4d14:	4798      	blx	r3
    4d16:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4d18:	2f04      	cmp	r7, #4
    4d1a:	d007      	beq.n	4d2c <spi_init+0x238>
    4d1c:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4d1e:	00bb      	lsls	r3, r7, #2
    4d20:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    4d22:	2800      	cmp	r0, #0
    4d24:	d0ed      	beq.n	4d02 <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
    4d26:	1c43      	adds	r3, r0, #1
    4d28:	d1ef      	bne.n	4d0a <spi_init+0x216>
    4d2a:	e7f4      	b.n	4d16 <spi_init+0x222>
	module->mode             = config->mode;
    4d2c:	7823      	ldrb	r3, [r4, #0]
    4d2e:	464a      	mov	r2, r9
    4d30:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    4d32:	7c23      	ldrb	r3, [r4, #16]
    4d34:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    4d36:	7ca3      	ldrb	r3, [r4, #18]
    4d38:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    4d3a:	7d23      	ldrb	r3, [r4, #20]
    4d3c:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    4d3e:	2200      	movs	r2, #0
    4d40:	ab02      	add	r3, sp, #8
    4d42:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    4d44:	7823      	ldrb	r3, [r4, #0]
    4d46:	2b01      	cmp	r3, #1
    4d48:	d012      	beq.n	4d70 <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
    4d4a:	7823      	ldrb	r3, [r4, #0]
    4d4c:	2b00      	cmp	r3, #0
    4d4e:	d127      	bne.n	4da0 <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
    4d50:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    4d52:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    4d54:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    4d56:	7fe1      	ldrb	r1, [r4, #31]
    4d58:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    4d5a:	7fa5      	ldrb	r5, [r4, #30]
    4d5c:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    4d5e:	4319      	orrs	r1, r3
    4d60:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    4d62:	2320      	movs	r3, #32
    4d64:	5ce3      	ldrb	r3, [r4, r3]
    4d66:	2b00      	cmp	r3, #0
    4d68:	d01c      	beq.n	4da4 <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    4d6a:	2340      	movs	r3, #64	; 0x40
    4d6c:	431a      	orrs	r2, r3
    4d6e:	e019      	b.n	4da4 <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4d70:	464b      	mov	r3, r9
    4d72:	6818      	ldr	r0, [r3, #0]
    4d74:	4b25      	ldr	r3, [pc, #148]	; (4e0c <spi_init+0x318>)
    4d76:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4d78:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4d7a:	b2c0      	uxtb	r0, r0
    4d7c:	4b21      	ldr	r3, [pc, #132]	; (4e04 <spi_init+0x310>)
    4d7e:	4798      	blx	r3
    4d80:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    4d82:	ab02      	add	r3, sp, #8
    4d84:	1d9a      	adds	r2, r3, #6
    4d86:	69a0      	ldr	r0, [r4, #24]
    4d88:	4b1f      	ldr	r3, [pc, #124]	; (4e08 <spi_init+0x314>)
    4d8a:	4798      	blx	r3
    4d8c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    4d8e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    4d90:	2b00      	cmp	r3, #0
    4d92:	d000      	beq.n	4d96 <spi_init+0x2a2>
    4d94:	e6c0      	b.n	4b18 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    4d96:	ab02      	add	r3, sp, #8
    4d98:	3306      	adds	r3, #6
    4d9a:	781b      	ldrb	r3, [r3, #0]
    4d9c:	7333      	strb	r3, [r6, #12]
    4d9e:	e7d4      	b.n	4d4a <spi_init+0x256>
	uint32_t ctrlb = 0;
    4da0:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    4da2:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    4da4:	6863      	ldr	r3, [r4, #4]
    4da6:	68a1      	ldr	r1, [r4, #8]
    4da8:	430b      	orrs	r3, r1
    4daa:	68e1      	ldr	r1, [r4, #12]
    4dac:	430b      	orrs	r3, r1
    4dae:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    4db0:	7c21      	ldrb	r1, [r4, #16]
    4db2:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    4db4:	7c61      	ldrb	r1, [r4, #17]
    4db6:	2900      	cmp	r1, #0
    4db8:	d103      	bne.n	4dc2 <spi_init+0x2ce>
    4dba:	491a      	ldr	r1, [pc, #104]	; (4e24 <spi_init+0x330>)
    4dbc:	7889      	ldrb	r1, [r1, #2]
    4dbe:	0789      	lsls	r1, r1, #30
    4dc0:	d501      	bpl.n	4dc6 <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4dc2:	2180      	movs	r1, #128	; 0x80
    4dc4:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    4dc6:	7ca1      	ldrb	r1, [r4, #18]
    4dc8:	2900      	cmp	r1, #0
    4dca:	d002      	beq.n	4dd2 <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4dcc:	2180      	movs	r1, #128	; 0x80
    4dce:	0289      	lsls	r1, r1, #10
    4dd0:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    4dd2:	7ce1      	ldrb	r1, [r4, #19]
    4dd4:	2900      	cmp	r1, #0
    4dd6:	d002      	beq.n	4dde <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4dd8:	2180      	movs	r1, #128	; 0x80
    4dda:	0089      	lsls	r1, r1, #2
    4ddc:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    4dde:	7d21      	ldrb	r1, [r4, #20]
    4de0:	2900      	cmp	r1, #0
    4de2:	d002      	beq.n	4dea <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4de4:	2180      	movs	r1, #128	; 0x80
    4de6:	0189      	lsls	r1, r1, #6
    4de8:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    4dea:	6831      	ldr	r1, [r6, #0]
    4dec:	430b      	orrs	r3, r1
    4dee:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    4df0:	6873      	ldr	r3, [r6, #4]
    4df2:	431a      	orrs	r2, r3
    4df4:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    4df6:	2000      	movs	r0, #0
    4df8:	e68e      	b.n	4b18 <spi_init+0x24>
    4dfa:	46c0      	nop			; (mov r8, r8)
    4dfc:	000048c1 	.word	0x000048c1
    4e00:	41004400 	.word	0x41004400
    4e04:	00005f71 	.word	0x00005f71
    4e08:	000047b7 	.word	0x000047b7
    4e0c:	00004a39 	.word	0x00004a39
    4e10:	40000400 	.word	0x40000400
    4e14:	00005f55 	.word	0x00005f55
    4e18:	00005ec9 	.word	0x00005ec9
    4e1c:	00004875 	.word	0x00004875
    4e20:	0000604d 	.word	0x0000604d
    4e24:	41002000 	.word	0x41002000

00004e28 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    4e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e2a:	46d6      	mov	lr, sl
    4e2c:	464f      	mov	r7, r9
    4e2e:	4646      	mov	r6, r8
    4e30:	b5c0      	push	{r6, r7, lr}
    4e32:	b082      	sub	sp, #8
    4e34:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    4e36:	2717      	movs	r7, #23
	if (length == 0) {
    4e38:	2a00      	cmp	r2, #0
    4e3a:	d073      	beq.n	4f24 <spi_read_buffer_wait+0xfc>
	}

	if (!(module->receiver_enabled)) {
    4e3c:	79c1      	ldrb	r1, [r0, #7]
		return STATUS_ERR_DENIED;
    4e3e:	3705      	adds	r7, #5
	if (!(module->receiver_enabled)) {
    4e40:	2900      	cmp	r1, #0
    4e42:	d06f      	beq.n	4f24 <spi_read_buffer_wait+0xfc>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    4e44:	7941      	ldrb	r1, [r0, #5]
    4e46:	2900      	cmp	r1, #0
    4e48:	d103      	bne.n	4e52 <spi_read_buffer_wait+0x2a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4e4a:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4e4c:	7e0c      	ldrb	r4, [r1, #24]
    4e4e:	07a4      	lsls	r4, r4, #30
    4e50:	d40b      	bmi.n	4e6a <spi_read_buffer_wait+0x42>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    4e52:	3a01      	subs	r2, #1
    4e54:	b294      	uxth	r4, r2
    4e56:	2500      	movs	r5, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    4e58:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    4e5a:	2102      	movs	r1, #2
    4e5c:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    4e5e:	2601      	movs	r6, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4e60:	05db      	lsls	r3, r3, #23
    4e62:	0ddb      	lsrs	r3, r3, #23
    4e64:	469a      	mov	sl, r3
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    4e66:	46c4      	mov	ip, r8
    4e68:	e037      	b.n	4eda <spi_read_buffer_wait+0xb2>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4e6a:	2402      	movs	r4, #2
    4e6c:	760c      	strb	r4, [r1, #24]
    4e6e:	e7f0      	b.n	4e52 <spi_read_buffer_wait+0x2a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4e70:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4e72:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    4e74:	4233      	tst	r3, r6
    4e76:	d0fc      	beq.n	4e72 <spi_read_buffer_wait+0x4a>
    4e78:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    4e7a:	4233      	tst	r3, r6
    4e7c:	d009      	beq.n	4e92 <spi_read_buffer_wait+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4e7e:	4653      	mov	r3, sl
    4e80:	628b      	str	r3, [r1, #40]	; 0x28
    4e82:	e02d      	b.n	4ee0 <spi_read_buffer_wait+0xb8>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4e84:	7e3b      	ldrb	r3, [r7, #24]
			if (spi_is_write_complete(module)) {
    4e86:	4649      	mov	r1, r9
    4e88:	420b      	tst	r3, r1
    4e8a:	d138      	bne.n	4efe <spi_read_buffer_wait+0xd6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4e8c:	7e3b      	ldrb	r3, [r7, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    4e8e:	4213      	tst	r3, r2
    4e90:	d045      	beq.n	4f1e <spi_read_buffer_wait+0xf6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4e92:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4e94:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    4e96:	4213      	tst	r3, r2
    4e98:	d0fc      	beq.n	4e94 <spi_read_buffer_wait+0x6c>
    4e9a:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    4e9c:	4213      	tst	r3, r2
    4e9e:	d040      	beq.n	4f22 <spi_read_buffer_wait+0xfa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4ea0:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    4ea2:	2700      	movs	r7, #0
    4ea4:	9701      	str	r7, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4ea6:	4213      	tst	r3, r2
    4ea8:	d002      	beq.n	4eb0 <spi_read_buffer_wait+0x88>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4eaa:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    4eac:	231e      	movs	r3, #30
    4eae:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4eb0:	7983      	ldrb	r3, [r0, #6]
    4eb2:	2b01      	cmp	r3, #1
    4eb4:	d027      	beq.n	4f06 <spi_read_buffer_wait+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4eb6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    4eb8:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    4eba:	9901      	ldr	r1, [sp, #4]
    4ebc:	2900      	cmp	r1, #0
    4ebe:	d138      	bne.n	4f32 <spi_read_buffer_wait+0x10a>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    4ec0:	1c6f      	adds	r7, r5, #1
    4ec2:	b2bf      	uxth	r7, r7
    4ec4:	4661      	mov	r1, ip
    4ec6:	554b      	strb	r3, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4ec8:	7981      	ldrb	r1, [r0, #6]
    4eca:	2901      	cmp	r1, #1
    4ecc:	d01f      	beq.n	4f0e <spi_read_buffer_wait+0xe6>
		rx_data[rx_pos++] = received_data;
    4ece:	003d      	movs	r5, r7
	while (length--) {
    4ed0:	3c01      	subs	r4, #1
    4ed2:	b2a4      	uxth	r4, r4
    4ed4:	4918      	ldr	r1, [pc, #96]	; (4f38 <spi_read_buffer_wait+0x110>)
    4ed6:	428c      	cmp	r4, r1
    4ed8:	d01f      	beq.n	4f1a <spi_read_buffer_wait+0xf2>
		if (module->mode == SPI_MODE_MASTER) {
    4eda:	7943      	ldrb	r3, [r0, #5]
    4edc:	2b01      	cmp	r3, #1
    4ede:	d0c7      	beq.n	4e70 <spi_read_buffer_wait+0x48>
		if (module->mode == SPI_MODE_SLAVE) {
    4ee0:	7943      	ldrb	r3, [r0, #5]
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	d1d5      	bne.n	4e92 <spi_read_buffer_wait+0x6a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4ee6:	6807      	ldr	r7, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4ee8:	7e3b      	ldrb	r3, [r7, #24]
				if (spi_is_ready_to_read(module)) {
    4eea:	4213      	tst	r3, r2
    4eec:	d1ca      	bne.n	4e84 <spi_read_buffer_wait+0x5c>
    4eee:	4b13      	ldr	r3, [pc, #76]	; (4f3c <spi_read_buffer_wait+0x114>)
    4ef0:	7e39      	ldrb	r1, [r7, #24]
    4ef2:	4211      	tst	r1, r2
    4ef4:	d1c6      	bne.n	4e84 <spi_read_buffer_wait+0x5c>
    4ef6:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    4ef8:	2b00      	cmp	r3, #0
    4efa:	d1f9      	bne.n	4ef0 <spi_read_buffer_wait+0xc8>
    4efc:	e7c2      	b.n	4e84 <spi_read_buffer_wait+0x5c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4efe:	2302      	movs	r3, #2
    4f00:	763b      	strb	r3, [r7, #24]
				return STATUS_ABORTED;
    4f02:	2704      	movs	r7, #4
    4f04:	e00e      	b.n	4f24 <spi_read_buffer_wait+0xfc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4f06:	6a89      	ldr	r1, [r1, #40]	; 0x28
    4f08:	05c9      	lsls	r1, r1, #23
    4f0a:	0dcb      	lsrs	r3, r1, #23
    4f0c:	e7d5      	b.n	4eba <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
    4f0e:	3502      	adds	r5, #2
    4f10:	b2ad      	uxth	r5, r5
    4f12:	0a19      	lsrs	r1, r3, #8
    4f14:	4663      	mov	r3, ip
    4f16:	55d9      	strb	r1, [r3, r7]
    4f18:	e7da      	b.n	4ed0 <spi_read_buffer_wait+0xa8>
    4f1a:	9f01      	ldr	r7, [sp, #4]
    4f1c:	e002      	b.n	4f24 <spi_read_buffer_wait+0xfc>
				return STATUS_ERR_TIMEOUT;
    4f1e:	2712      	movs	r7, #18
    4f20:	e000      	b.n	4f24 <spi_read_buffer_wait+0xfc>
		return STATUS_ERR_IO;
    4f22:	2710      	movs	r7, #16
		}
	}

	return STATUS_OK;
}
    4f24:	0038      	movs	r0, r7
    4f26:	b002      	add	sp, #8
    4f28:	bc1c      	pop	{r2, r3, r4}
    4f2a:	4690      	mov	r8, r2
    4f2c:	4699      	mov	r9, r3
    4f2e:	46a2      	mov	sl, r4
    4f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f32:	9f01      	ldr	r7, [sp, #4]
    4f34:	e7f6      	b.n	4f24 <spi_read_buffer_wait+0xfc>
    4f36:	46c0      	nop			; (mov r8, r8)
    4f38:	0000ffff 	.word	0x0000ffff
    4f3c:	00002710 	.word	0x00002710

00004f40 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4f40:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4f42:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    4f44:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    4f46:	2c01      	cmp	r4, #1
    4f48:	d001      	beq.n	4f4e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    4f4a:	0018      	movs	r0, r3
    4f4c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    4f4e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    4f50:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    4f52:	2c00      	cmp	r4, #0
    4f54:	d1f9      	bne.n	4f4a <spi_select_slave+0xa>
		if (select) {
    4f56:	2a00      	cmp	r2, #0
    4f58:	d058      	beq.n	500c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    4f5a:	784b      	ldrb	r3, [r1, #1]
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	d044      	beq.n	4fea <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4f60:	6803      	ldr	r3, [r0, #0]
    4f62:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    4f64:	07db      	lsls	r3, r3, #31
    4f66:	d410      	bmi.n	4f8a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    4f68:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4f6a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4f6c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4f6e:	2900      	cmp	r1, #0
    4f70:	d104      	bne.n	4f7c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    4f72:	0953      	lsrs	r3, r2, #5
    4f74:	01db      	lsls	r3, r3, #7
    4f76:	492e      	ldr	r1, [pc, #184]	; (5030 <spi_select_slave+0xf0>)
    4f78:	468c      	mov	ip, r1
    4f7a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4f7c:	211f      	movs	r1, #31
    4f7e:	4011      	ands	r1, r2
    4f80:	2201      	movs	r2, #1
    4f82:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4f84:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    4f86:	2305      	movs	r3, #5
    4f88:	e7df      	b.n	4f4a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4f8a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4f8c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    4f8e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4f90:	2c00      	cmp	r4, #0
    4f92:	d104      	bne.n	4f9e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    4f94:	0953      	lsrs	r3, r2, #5
    4f96:	01db      	lsls	r3, r3, #7
    4f98:	4c25      	ldr	r4, [pc, #148]	; (5030 <spi_select_slave+0xf0>)
    4f9a:	46a4      	mov	ip, r4
    4f9c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4f9e:	241f      	movs	r4, #31
    4fa0:	4014      	ands	r4, r2
    4fa2:	2201      	movs	r2, #1
    4fa4:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    4fa6:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4fa8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4faa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4fac:	07d2      	lsls	r2, r2, #31
    4fae:	d501      	bpl.n	4fb4 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4fb0:	788a      	ldrb	r2, [r1, #2]
    4fb2:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    4fb4:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    4fb6:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    4fb8:	2a00      	cmp	r2, #0
    4fba:	d1c6      	bne.n	4f4a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4fbc:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    4fbe:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4fc0:	7e13      	ldrb	r3, [r2, #24]
    4fc2:	420b      	tst	r3, r1
    4fc4:	d0fc      	beq.n	4fc0 <spi_select_slave+0x80>
    4fc6:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    4fc8:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    4fca:	0749      	lsls	r1, r1, #29
    4fcc:	d5bd      	bpl.n	4f4a <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4fce:	8b53      	ldrh	r3, [r2, #26]
    4fd0:	075b      	lsls	r3, r3, #29
    4fd2:	d501      	bpl.n	4fd8 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4fd4:	2304      	movs	r3, #4
    4fd6:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4fd8:	7983      	ldrb	r3, [r0, #6]
    4fda:	2b01      	cmp	r3, #1
    4fdc:	d002      	beq.n	4fe4 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4fde:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4fe0:	2300      	movs	r3, #0
    4fe2:	e7b2      	b.n	4f4a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4fe4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4fe6:	2300      	movs	r3, #0
    4fe8:	e7af      	b.n	4f4a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4fea:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4fec:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4fee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4ff0:	2900      	cmp	r1, #0
    4ff2:	d104      	bne.n	4ffe <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    4ff4:	0953      	lsrs	r3, r2, #5
    4ff6:	01db      	lsls	r3, r3, #7
    4ff8:	490d      	ldr	r1, [pc, #52]	; (5030 <spi_select_slave+0xf0>)
    4ffa:	468c      	mov	ip, r1
    4ffc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4ffe:	211f      	movs	r1, #31
    5000:	4011      	ands	r1, r2
    5002:	2201      	movs	r2, #1
    5004:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5006:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    5008:	2300      	movs	r3, #0
    500a:	e79e      	b.n	4f4a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    500c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    500e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5010:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5012:	2900      	cmp	r1, #0
    5014:	d104      	bne.n	5020 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    5016:	0953      	lsrs	r3, r2, #5
    5018:	01db      	lsls	r3, r3, #7
    501a:	4905      	ldr	r1, [pc, #20]	; (5030 <spi_select_slave+0xf0>)
    501c:	468c      	mov	ip, r1
    501e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5020:	211f      	movs	r1, #31
    5022:	4011      	ands	r1, r2
    5024:	2201      	movs	r2, #1
    5026:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5028:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    502a:	2300      	movs	r3, #0
    502c:	e78d      	b.n	4f4a <spi_select_slave+0xa>
    502e:	46c0      	nop			; (mov r8, r8)
    5030:	41004400 	.word	0x41004400

00005034 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    5034:	b5f0      	push	{r4, r5, r6, r7, lr}
    5036:	46de      	mov	lr, fp
    5038:	4657      	mov	r7, sl
    503a:	464e      	mov	r6, r9
    503c:	4645      	mov	r5, r8
    503e:	b5e0      	push	{r5, r6, r7, lr}
    5040:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5042:	2317      	movs	r3, #23
	if (length == 0) {
    5044:	2a00      	cmp	r2, #0
    5046:	d107      	bne.n	5058 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    5048:	0018      	movs	r0, r3
    504a:	b003      	add	sp, #12
    504c:	bc3c      	pop	{r2, r3, r4, r5}
    504e:	4690      	mov	r8, r2
    5050:	4699      	mov	r9, r3
    5052:	46a2      	mov	sl, r4
    5054:	46ab      	mov	fp, r5
    5056:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    5058:	7943      	ldrb	r3, [r0, #5]
    505a:	2b00      	cmp	r3, #0
    505c:	d103      	bne.n	5066 <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    505e:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5060:	7e1c      	ldrb	r4, [r3, #24]
    5062:	07a4      	lsls	r4, r4, #30
    5064:	d40a      	bmi.n	507c <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
    5066:	4693      	mov	fp, r2
    5068:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    506a:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    506c:	2502      	movs	r5, #2
    506e:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    5070:	3502      	adds	r5, #2
    5072:	46a8      	mov	r8, r5
    5074:	3a01      	subs	r2, #1
    5076:	b292      	uxth	r2, r2
    5078:	468a      	mov	sl, r1
    507a:	e023      	b.n	50c4 <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    507c:	2402      	movs	r4, #2
    507e:	761c      	strb	r4, [r3, #24]
    5080:	e7f1      	b.n	5066 <spi_write_buffer_wait+0x32>
    5082:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    5084:	4661      	mov	r1, ip
    5086:	420d      	tst	r5, r1
    5088:	d12e      	bne.n	50e8 <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    508a:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    508c:	421d      	tst	r5, r3
    508e:	d100      	bne.n	5092 <spi_write_buffer_wait+0x5e>
    5090:	e0c2      	b.n	5218 <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5092:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5094:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    5096:	421d      	tst	r5, r3
    5098:	d0fc      	beq.n	5094 <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
    509a:	1c67      	adds	r7, r4, #1
    509c:	b2bf      	uxth	r7, r7
    509e:	4651      	mov	r1, sl
    50a0:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    50a2:	7981      	ldrb	r1, [r0, #6]
    50a4:	2901      	cmp	r1, #1
    50a6:	d023      	beq.n	50f0 <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    50a8:	b2ad      	uxth	r5, r5
    50aa:	003c      	movs	r4, r7
    50ac:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    50ae:	421f      	tst	r7, r3
    50b0:	d002      	beq.n	50b8 <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    50b2:	05ed      	lsls	r5, r5, #23
    50b4:	0ded      	lsrs	r5, r5, #23
    50b6:	62b5      	str	r5, [r6, #40]	; 0x28
    50b8:	1e55      	subs	r5, r2, #1
    50ba:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    50bc:	79c6      	ldrb	r6, [r0, #7]
    50be:	2e00      	cmp	r6, #0
    50c0:	d11d      	bne.n	50fe <spi_write_buffer_wait+0xca>
    50c2:	002a      	movs	r2, r5
	while (length--) {
    50c4:	4d59      	ldr	r5, [pc, #356]	; (522c <spi_write_buffer_wait+0x1f8>)
    50c6:	42aa      	cmp	r2, r5
    50c8:	d070      	beq.n	51ac <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
    50ca:	7945      	ldrb	r5, [r0, #5]
    50cc:	2d00      	cmp	r5, #0
    50ce:	d1e0      	bne.n	5092 <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    50d0:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    50d2:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    50d4:	421d      	tst	r5, r3
    50d6:	d1d4      	bne.n	5082 <spi_write_buffer_wait+0x4e>
    50d8:	4d55      	ldr	r5, [pc, #340]	; (5230 <spi_write_buffer_wait+0x1fc>)
    50da:	7e37      	ldrb	r7, [r6, #24]
    50dc:	421f      	tst	r7, r3
    50de:	d1d0      	bne.n	5082 <spi_write_buffer_wait+0x4e>
    50e0:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    50e2:	2d00      	cmp	r5, #0
    50e4:	d1f9      	bne.n	50da <spi_write_buffer_wait+0xa6>
    50e6:	e7cc      	b.n	5082 <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    50e8:	2302      	movs	r3, #2
    50ea:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    50ec:	3302      	adds	r3, #2
    50ee:	e7ab      	b.n	5048 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    50f0:	3402      	adds	r4, #2
    50f2:	b2a4      	uxth	r4, r4
    50f4:	4651      	mov	r1, sl
    50f6:	5dcf      	ldrb	r7, [r1, r7]
    50f8:	023f      	lsls	r7, r7, #8
    50fa:	433d      	orrs	r5, r7
    50fc:	e7d6      	b.n	50ac <spi_write_buffer_wait+0x78>
    50fe:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    5100:	7945      	ldrb	r5, [r0, #5]
    5102:	2d00      	cmp	r5, #0
    5104:	d137      	bne.n	5176 <spi_write_buffer_wait+0x142>
    5106:	4d4b      	ldr	r5, [pc, #300]	; (5234 <spi_write_buffer_wait+0x200>)
    5108:	9101      	str	r1, [sp, #4]
    510a:	e012      	b.n	5132 <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
    510c:	3402      	adds	r4, #2
    510e:	b2a4      	uxth	r4, r4
    5110:	4649      	mov	r1, r9
    5112:	9f01      	ldr	r7, [sp, #4]
    5114:	5c79      	ldrb	r1, [r7, r1]
    5116:	0209      	lsls	r1, r1, #8
    5118:	9f00      	ldr	r7, [sp, #0]
    511a:	430f      	orrs	r7, r1
    511c:	e01b      	b.n	5156 <spi_write_buffer_wait+0x122>
						length--;
    511e:	3a01      	subs	r2, #1
    5120:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    5122:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5124:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    5126:	4641      	mov	r1, r8
    5128:	420f      	tst	r7, r1
    512a:	d11b      	bne.n	5164 <spi_write_buffer_wait+0x130>
    512c:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    512e:	2d00      	cmp	r5, #0
    5130:	d018      	beq.n	5164 <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
    5132:	2a00      	cmp	r2, #0
    5134:	d0f5      	beq.n	5122 <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5136:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5138:	7e37      	ldrb	r7, [r6, #24]
    513a:	421f      	tst	r7, r3
    513c:	d0f1      	beq.n	5122 <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    513e:	1c67      	adds	r7, r4, #1
    5140:	b2b9      	uxth	r1, r7
    5142:	4689      	mov	r9, r1
    5144:	9901      	ldr	r1, [sp, #4]
    5146:	5d09      	ldrb	r1, [r1, r4]
    5148:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    514a:	7981      	ldrb	r1, [r0, #6]
    514c:	2901      	cmp	r1, #1
    514e:	d0dd      	beq.n	510c <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
    5150:	4669      	mov	r1, sp
    5152:	880f      	ldrh	r7, [r1, #0]
    5154:	464c      	mov	r4, r9
    5156:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    5158:	4219      	tst	r1, r3
    515a:	d0e0      	beq.n	511e <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    515c:	05ff      	lsls	r7, r7, #23
    515e:	0dff      	lsrs	r7, r7, #23
    5160:	62b7      	str	r7, [r6, #40]	; 0x28
    5162:	e7dc      	b.n	511e <spi_write_buffer_wait+0xea>
    5164:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5166:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    5168:	4667      	mov	r7, ip
    516a:	423d      	tst	r5, r7
    516c:	d118      	bne.n	51a0 <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    516e:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    5170:	4646      	mov	r6, r8
    5172:	4235      	tst	r5, r6
    5174:	d052      	beq.n	521c <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5176:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5178:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    517a:	4647      	mov	r7, r8
    517c:	423d      	tst	r5, r7
    517e:	d0fb      	beq.n	5178 <spi_write_buffer_wait+0x144>
    5180:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    5182:	423d      	tst	r5, r7
    5184:	d007      	beq.n	5196 <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5186:	8b75      	ldrh	r5, [r6, #26]
    5188:	423d      	tst	r5, r7
    518a:	d000      	beq.n	518e <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    518c:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    518e:	7985      	ldrb	r5, [r0, #6]
    5190:	2d01      	cmp	r5, #1
    5192:	d009      	beq.n	51a8 <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5194:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    5196:	465d      	mov	r5, fp
    5198:	3d01      	subs	r5, #1
    519a:	b2ad      	uxth	r5, r5
    519c:	46ab      	mov	fp, r5
    519e:	e769      	b.n	5074 <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    51a0:	2302      	movs	r3, #2
    51a2:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    51a4:	3302      	adds	r3, #2
    51a6:	e74f      	b.n	5048 <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    51a8:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    51aa:	e7f4      	b.n	5196 <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
    51ac:	7943      	ldrb	r3, [r0, #5]
    51ae:	2b01      	cmp	r3, #1
    51b0:	d00b      	beq.n	51ca <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
    51b2:	2b00      	cmp	r3, #0
    51b4:	d134      	bne.n	5220 <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
    51b6:	79c2      	ldrb	r2, [r0, #7]
    51b8:	2a00      	cmp	r2, #0
    51ba:	d100      	bne.n	51be <spi_write_buffer_wait+0x18a>
    51bc:	e744      	b.n	5048 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    51be:	2404      	movs	r4, #4
			while (flush_length) {
    51c0:	465b      	mov	r3, fp
    51c2:	465d      	mov	r5, fp
    51c4:	2b00      	cmp	r3, #0
    51c6:	d119      	bne.n	51fc <spi_write_buffer_wait+0x1c8>
    51c8:	e73e      	b.n	5048 <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    51ca:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    51cc:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    51ce:	7e0b      	ldrb	r3, [r1, #24]
    51d0:	4213      	tst	r3, r2
    51d2:	d0fc      	beq.n	51ce <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    51d4:	2300      	movs	r3, #0
    51d6:	e737      	b.n	5048 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    51d8:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    51da:	4223      	tst	r3, r4
    51dc:	d022      	beq.n	5224 <spi_write_buffer_wait+0x1f0>
    51de:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    51e0:	4223      	tst	r3, r4
    51e2:	d007      	beq.n	51f4 <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    51e4:	8b4b      	ldrh	r3, [r1, #26]
    51e6:	4223      	tst	r3, r4
    51e8:	d000      	beq.n	51ec <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    51ea:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    51ec:	7983      	ldrb	r3, [r0, #6]
    51ee:	2b01      	cmp	r3, #1
    51f0:	d010      	beq.n	5214 <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    51f2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    51f4:	3d01      	subs	r5, #1
    51f6:	b2ad      	uxth	r5, r5
			while (flush_length) {
    51f8:	2d00      	cmp	r5, #0
    51fa:	d015      	beq.n	5228 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    51fc:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    51fe:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    5200:	4223      	tst	r3, r4
    5202:	d1e9      	bne.n	51d8 <spi_write_buffer_wait+0x1a4>
    5204:	4b0a      	ldr	r3, [pc, #40]	; (5230 <spi_write_buffer_wait+0x1fc>)
    5206:	7e0a      	ldrb	r2, [r1, #24]
    5208:	4222      	tst	r2, r4
    520a:	d1e5      	bne.n	51d8 <spi_write_buffer_wait+0x1a4>
    520c:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    520e:	2b00      	cmp	r3, #0
    5210:	d1f9      	bne.n	5206 <spi_write_buffer_wait+0x1d2>
    5212:	e7e1      	b.n	51d8 <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5214:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    5216:	e7ed      	b.n	51f4 <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    5218:	2312      	movs	r3, #18
    521a:	e715      	b.n	5048 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    521c:	2312      	movs	r3, #18
    521e:	e713      	b.n	5048 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    5220:	2300      	movs	r3, #0
    5222:	e711      	b.n	5048 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    5224:	2312      	movs	r3, #18
    5226:	e70f      	b.n	5048 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    5228:	2300      	movs	r3, #0
    522a:	e70d      	b.n	5048 <spi_write_buffer_wait+0x14>
    522c:	0000ffff 	.word	0x0000ffff
    5230:	00002710 	.word	0x00002710
    5234:	00002711 	.word	0x00002711

00005238 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    5238:	b510      	push	{r4, lr}
    523a:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    523c:	4b0f      	ldr	r3, [pc, #60]	; (527c <sd_mmc_test_unit_ready+0x44>)
    523e:	4798      	blx	r3
    5240:	2801      	cmp	r0, #1
    5242:	d019      	beq.n	5278 <sd_mmc_test_unit_ready+0x40>
    5244:	2800      	cmp	r0, #0
    5246:	d003      	beq.n	5250 <sd_mmc_test_unit_ready+0x18>
    5248:	2802      	cmp	r0, #2
    524a:	d010      	beq.n	526e <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    524c:	2001      	movs	r0, #1
	}
}
    524e:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    5250:	4b0b      	ldr	r3, [pc, #44]	; (5280 <sd_mmc_test_unit_ready+0x48>)
    5252:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    5254:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    5256:	2b00      	cmp	r3, #0
    5258:	d1f9      	bne.n	524e <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    525a:	0020      	movs	r0, r4
    525c:	4b09      	ldr	r3, [pc, #36]	; (5284 <sd_mmc_test_unit_ready+0x4c>)
    525e:	4798      	blx	r3
    5260:	0003      	movs	r3, r0
    5262:	2003      	movs	r0, #3
    5264:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    5266:	4243      	negs	r3, r0
    5268:	4158      	adcs	r0, r3
    526a:	0040      	lsls	r0, r0, #1
    526c:	e7ef      	b.n	524e <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    526e:	2200      	movs	r2, #0
    5270:	4b03      	ldr	r3, [pc, #12]	; (5280 <sd_mmc_test_unit_ready+0x48>)
    5272:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    5274:	2002      	movs	r0, #2
    5276:	e7ea      	b.n	524e <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    5278:	2003      	movs	r0, #3
    527a:	e7e8      	b.n	524e <sd_mmc_test_unit_ready+0x16>
    527c:	0000034d 	.word	0x0000034d
    5280:	200002ac 	.word	0x200002ac
    5284:	000007fd 	.word	0x000007fd

00005288 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    5288:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    528a:	2000      	movs	r0, #0
    528c:	4b01      	ldr	r3, [pc, #4]	; (5294 <sd_mmc_test_unit_ready_0+0xc>)
    528e:	4798      	blx	r3
}
    5290:	bd10      	pop	{r4, pc}
    5292:	46c0      	nop			; (mov r8, r8)
    5294:	00005239 	.word	0x00005239

00005298 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    5298:	b570      	push	{r4, r5, r6, lr}
    529a:	0004      	movs	r4, r0
    529c:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    529e:	4b04      	ldr	r3, [pc, #16]	; (52b0 <sd_mmc_read_capacity+0x18>)
    52a0:	4798      	blx	r3
    52a2:	0040      	lsls	r0, r0, #1
    52a4:	3801      	subs	r0, #1
    52a6:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    52a8:	0020      	movs	r0, r4
    52aa:	4b02      	ldr	r3, [pc, #8]	; (52b4 <sd_mmc_read_capacity+0x1c>)
    52ac:	4798      	blx	r3
}
    52ae:	bd70      	pop	{r4, r5, r6, pc}
    52b0:	00000825 	.word	0x00000825
    52b4:	00005239 	.word	0x00005239

000052b8 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    52b8:	b510      	push	{r4, lr}
    52ba:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    52bc:	2000      	movs	r0, #0
    52be:	4b01      	ldr	r3, [pc, #4]	; (52c4 <sd_mmc_read_capacity_0+0xc>)
    52c0:	4798      	blx	r3
}
    52c2:	bd10      	pop	{r4, pc}
    52c4:	00005299 	.word	0x00005299

000052c8 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    52c8:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    52ca:	2000      	movs	r0, #0
    52cc:	4b01      	ldr	r3, [pc, #4]	; (52d4 <sd_mmc_wr_protect_0+0xc>)
    52ce:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    52d0:	bd10      	pop	{r4, pc}
    52d2:	46c0      	nop			; (mov r8, r8)
    52d4:	0000084d 	.word	0x0000084d

000052d8 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
    52d8:	2001      	movs	r0, #1
    52da:	4770      	bx	lr

000052dc <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    52dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52de:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
    52e0:	4b24      	ldr	r3, [pc, #144]	; (5374 <sd_mmc_usb_read_10+0x98>)
    52e2:	4798      	blx	r3
    52e4:	2800      	cmp	r0, #0
    52e6:	d004      	beq.n	52f2 <sd_mmc_usb_read_10+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    52e8:	3802      	subs	r0, #2
    52ea:	4243      	negs	r3, r0
    52ec:	4158      	adcs	r0, r3
    52ee:	3001      	adds	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
    52f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nb_step = nb_sector + 1;
    52f2:	3401      	adds	r4, #1
    52f4:	b2a2      	uxth	r2, r4
	bool b_first_step = true;
    52f6:	2701      	movs	r7, #1
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    52f8:	4e1f      	ldr	r6, [pc, #124]	; (5378 <sd_mmc_usb_read_10+0x9c>)
	while (nb_step--) {
    52fa:	e008      	b.n	530e <sd_mmc_usb_read_10+0x32>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    52fc:	481f      	ldr	r0, [pc, #124]	; (537c <sd_mmc_usb_read_10+0xa0>)
    52fe:	e010      	b.n	5322 <sd_mmc_usb_read_10+0x46>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    5300:	2000      	movs	r0, #0
    5302:	4b1f      	ldr	r3, [pc, #124]	; (5380 <sd_mmc_usb_read_10+0xa4>)
    5304:	4798      	blx	r3
    5306:	2800      	cmp	r0, #0
    5308:	d126      	bne.n	5358 <sd_mmc_usb_read_10+0x7c>
    530a:	2700      	movs	r7, #0
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    530c:	0022      	movs	r2, r4
	while (nb_step--) {
    530e:	1e54      	subs	r4, r2, #1
    5310:	b2a4      	uxth	r4, r4
    5312:	2a00      	cmp	r2, #0
    5314:	d01c      	beq.n	5350 <sd_mmc_usb_read_10+0x74>
		if (nb_step) { // Skip last step
    5316:	2c00      	cmp	r4, #0
    5318:	d020      	beq.n	535c <sd_mmc_usb_read_10+0x80>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    531a:	2501      	movs	r5, #1
    531c:	4025      	ands	r5, r4
    531e:	d0ed      	beq.n	52fc <sd_mmc_usb_read_10+0x20>
    5320:	4818      	ldr	r0, [pc, #96]	; (5384 <sd_mmc_usb_read_10+0xa8>)
    5322:	2101      	movs	r1, #1
    5324:	47b0      	blx	r6
    5326:	2800      	cmp	r0, #0
    5328:	d114      	bne.n	5354 <sd_mmc_usb_read_10+0x78>
		if (!b_first_step) { // Skip first step
    532a:	2f00      	cmp	r7, #0
    532c:	d1e8      	bne.n	5300 <sd_mmc_usb_read_10+0x24>
			if (!udi_msc_trans_block(true,
    532e:	4915      	ldr	r1, [pc, #84]	; (5384 <sd_mmc_usb_read_10+0xa8>)
    5330:	2d00      	cmp	r5, #0
    5332:	d000      	beq.n	5336 <sd_mmc_usb_read_10+0x5a>
    5334:	4911      	ldr	r1, [pc, #68]	; (537c <sd_mmc_usb_read_10+0xa0>)
    5336:	2300      	movs	r3, #0
    5338:	2280      	movs	r2, #128	; 0x80
    533a:	0092      	lsls	r2, r2, #2
    533c:	2001      	movs	r0, #1
    533e:	4d12      	ldr	r5, [pc, #72]	; (5388 <sd_mmc_usb_read_10+0xac>)
    5340:	47a8      	blx	r5
    5342:	2800      	cmp	r0, #0
    5344:	d1dc      	bne.n	5300 <sd_mmc_usb_read_10+0x24>
					sd_mmc_wait_end_of_read_blocks(true);
    5346:	2001      	movs	r0, #1
    5348:	4b0d      	ldr	r3, [pc, #52]	; (5380 <sd_mmc_usb_read_10+0xa4>)
    534a:	4798      	blx	r3
				return CTRL_FAIL;
    534c:	2001      	movs	r0, #1
    534e:	e7cf      	b.n	52f0 <sd_mmc_usb_read_10+0x14>
	return CTRL_GOOD;
    5350:	2000      	movs	r0, #0
    5352:	e7cd      	b.n	52f0 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    5354:	2001      	movs	r0, #1
    5356:	e7cb      	b.n	52f0 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    5358:	2001      	movs	r0, #1
    535a:	e7c9      	b.n	52f0 <sd_mmc_usb_read_10+0x14>
		if (!b_first_step) { // Skip first step
    535c:	2f00      	cmp	r7, #0
    535e:	d1d4      	bne.n	530a <sd_mmc_usb_read_10+0x2e>
			if (!udi_msc_trans_block(true,
    5360:	2300      	movs	r3, #0
    5362:	2280      	movs	r2, #128	; 0x80
    5364:	0092      	lsls	r2, r2, #2
    5366:	4907      	ldr	r1, [pc, #28]	; (5384 <sd_mmc_usb_read_10+0xa8>)
    5368:	2001      	movs	r0, #1
    536a:	4d07      	ldr	r5, [pc, #28]	; (5388 <sd_mmc_usb_read_10+0xac>)
    536c:	47a8      	blx	r5
    536e:	2800      	cmp	r0, #0
    5370:	d1cb      	bne.n	530a <sd_mmc_usb_read_10+0x2e>
    5372:	e7e8      	b.n	5346 <sd_mmc_usb_read_10+0x6a>
    5374:	00000851 	.word	0x00000851
    5378:	000008d9 	.word	0x000008d9
    537c:	200008d8 	.word	0x200008d8
    5380:	00000905 	.word	0x00000905
    5384:	200006d8 	.word	0x200006d8
    5388:	000012a5 	.word	0x000012a5

0000538c <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
    538c:	b510      	push	{r4, lr}
    538e:	000a      	movs	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
    5390:	0001      	movs	r1, r0
    5392:	2000      	movs	r0, #0
    5394:	4b01      	ldr	r3, [pc, #4]	; (539c <sd_mmc_usb_read_10_0+0x10>)
    5396:	4798      	blx	r3
}
    5398:	bd10      	pop	{r4, pc}
    539a:	46c0      	nop			; (mov r8, r8)
    539c:	000052dd 	.word	0x000052dd

000053a0 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    53a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53a2:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
    53a4:	4b20      	ldr	r3, [pc, #128]	; (5428 <sd_mmc_usb_write_10+0x88>)
    53a6:	4798      	blx	r3
    53a8:	2800      	cmp	r0, #0
    53aa:	d00d      	beq.n	53c8 <sd_mmc_usb_write_10+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    53ac:	3802      	subs	r0, #2
    53ae:	4243      	negs	r3, r0
    53b0:	4158      	adcs	r0, r3
    53b2:	3001      	adds	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
    53b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    53b6:	481d      	ldr	r0, [pc, #116]	; (542c <sd_mmc_usb_write_10+0x8c>)
    53b8:	e01b      	b.n	53f2 <sd_mmc_usb_write_10+0x52>
				return CTRL_FAIL;
    53ba:	3001      	adds	r0, #1
				if (!b_first_step) {
    53bc:	2d00      	cmp	r5, #0
    53be:	d1f9      	bne.n	53b4 <sd_mmc_usb_write_10+0x14>
					sd_mmc_wait_end_of_write_blocks(true);
    53c0:	4b1b      	ldr	r3, [pc, #108]	; (5430 <sd_mmc_usb_write_10+0x90>)
    53c2:	4798      	blx	r3
				return CTRL_FAIL;
    53c4:	2001      	movs	r0, #1
    53c6:	e7f5      	b.n	53b4 <sd_mmc_usb_write_10+0x14>
	bool b_first_step = true;
    53c8:	2501      	movs	r5, #1
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    53ca:	4f19      	ldr	r7, [pc, #100]	; (5430 <sd_mmc_usb_write_10+0x90>)
			if (!udi_msc_trans_block(false,
    53cc:	4e19      	ldr	r6, [pc, #100]	; (5434 <sd_mmc_usb_write_10+0x94>)
    53ce:	e008      	b.n	53e2 <sd_mmc_usb_write_10+0x42>
	return CTRL_GOOD;
    53d0:	2000      	movs	r0, #0
    53d2:	e7ef      	b.n	53b4 <sd_mmc_usb_write_10+0x14>
				return CTRL_FAIL;
    53d4:	2001      	movs	r0, #1
    53d6:	e7ed      	b.n	53b4 <sd_mmc_usb_write_10+0x14>
		if (nb_step) { // Skip last step
    53d8:	2c00      	cmp	r4, #0
    53da:	d111      	bne.n	5400 <sd_mmc_usb_write_10+0x60>
    53dc:	3c01      	subs	r4, #1
    53de:	b2a4      	uxth	r4, r4
    53e0:	2500      	movs	r5, #0
	while (nb_step--) {
    53e2:	4b15      	ldr	r3, [pc, #84]	; (5438 <sd_mmc_usb_write_10+0x98>)
    53e4:	429c      	cmp	r4, r3
    53e6:	d0f3      	beq.n	53d0 <sd_mmc_usb_write_10+0x30>
		if (!b_first_step) { // Skip first step
    53e8:	2d00      	cmp	r5, #0
    53ea:	d1f5      	bne.n	53d8 <sd_mmc_usb_write_10+0x38>
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    53ec:	07e3      	lsls	r3, r4, #31
    53ee:	d5e2      	bpl.n	53b6 <sd_mmc_usb_write_10+0x16>
    53f0:	4812      	ldr	r0, [pc, #72]	; (543c <sd_mmc_usb_write_10+0x9c>)
    53f2:	2101      	movs	r1, #1
    53f4:	4b12      	ldr	r3, [pc, #72]	; (5440 <sd_mmc_usb_write_10+0xa0>)
    53f6:	4798      	blx	r3
    53f8:	2800      	cmp	r0, #0
    53fa:	d1eb      	bne.n	53d4 <sd_mmc_usb_write_10+0x34>
		if (nb_step) { // Skip last step
    53fc:	2c00      	cmp	r4, #0
    53fe:	d00c      	beq.n	541a <sd_mmc_usb_write_10+0x7a>
			if (!udi_msc_trans_block(false,
    5400:	490e      	ldr	r1, [pc, #56]	; (543c <sd_mmc_usb_write_10+0x9c>)
    5402:	07e3      	lsls	r3, r4, #31
    5404:	d500      	bpl.n	5408 <sd_mmc_usb_write_10+0x68>
    5406:	4909      	ldr	r1, [pc, #36]	; (542c <sd_mmc_usb_write_10+0x8c>)
    5408:	2300      	movs	r3, #0
    540a:	2280      	movs	r2, #128	; 0x80
    540c:	0092      	lsls	r2, r2, #2
    540e:	2000      	movs	r0, #0
    5410:	47b0      	blx	r6
    5412:	2800      	cmp	r0, #0
    5414:	d0d1      	beq.n	53ba <sd_mmc_usb_write_10+0x1a>
		if (!b_first_step) { // Skip first step
    5416:	2d00      	cmp	r5, #0
    5418:	d1e0      	bne.n	53dc <sd_mmc_usb_write_10+0x3c>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    541a:	2000      	movs	r0, #0
    541c:	47b8      	blx	r7
    541e:	2800      	cmp	r0, #0
    5420:	d0dc      	beq.n	53dc <sd_mmc_usb_write_10+0x3c>
				return CTRL_FAIL;
    5422:	2001      	movs	r0, #1
    5424:	e7c6      	b.n	53b4 <sd_mmc_usb_write_10+0x14>
    5426:	46c0      	nop			; (mov r8, r8)
    5428:	00000975 	.word	0x00000975
    542c:	200008d8 	.word	0x200008d8
    5430:	00000a11 	.word	0x00000a11
    5434:	000012a5 	.word	0x000012a5
    5438:	0000ffff 	.word	0x0000ffff
    543c:	200006d8 	.word	0x200006d8
    5440:	000009e5 	.word	0x000009e5

00005444 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
    5444:	b510      	push	{r4, lr}
    5446:	000a      	movs	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
    5448:	0001      	movs	r1, r0
    544a:	2000      	movs	r0, #0
    544c:	4b01      	ldr	r3, [pc, #4]	; (5454 <sd_mmc_usb_write_10_0+0x10>)
    544e:	4798      	blx	r3
}
    5450:	bd10      	pop	{r4, pc}
    5452:	46c0      	nop			; (mov r8, r8)
    5454:	000053a1 	.word	0x000053a1

00005458 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    5458:	b500      	push	{lr}
    545a:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    545c:	466b      	mov	r3, sp
    545e:	1dd9      	adds	r1, r3, #7
    5460:	23ff      	movs	r3, #255	; 0xff
    5462:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    5464:	2201      	movs	r2, #1
    5466:	480b      	ldr	r0, [pc, #44]	; (5494 <sd_mmc_spi_start_write_block+0x3c>)
    5468:	4b0b      	ldr	r3, [pc, #44]	; (5498 <sd_mmc_spi_start_write_block+0x40>)
    546a:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    546c:	4b0b      	ldr	r3, [pc, #44]	; (549c <sd_mmc_spi_start_write_block+0x44>)
    546e:	881b      	ldrh	r3, [r3, #0]
    5470:	2b01      	cmp	r3, #1
    5472:	d00a      	beq.n	548a <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    5474:	22fc      	movs	r2, #252	; 0xfc
    5476:	466b      	mov	r3, sp
    5478:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    547a:	2201      	movs	r2, #1
    547c:	466b      	mov	r3, sp
    547e:	1d99      	adds	r1, r3, #6
    5480:	4804      	ldr	r0, [pc, #16]	; (5494 <sd_mmc_spi_start_write_block+0x3c>)
    5482:	4b05      	ldr	r3, [pc, #20]	; (5498 <sd_mmc_spi_start_write_block+0x40>)
    5484:	4798      	blx	r3
}
    5486:	b003      	add	sp, #12
    5488:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    548a:	22fe      	movs	r2, #254	; 0xfe
    548c:	466b      	mov	r3, sp
    548e:	719a      	strb	r2, [r3, #6]
    5490:	e7f3      	b.n	547a <sd_mmc_spi_start_write_block+0x22>
    5492:	46c0      	nop			; (mov r8, r8)
    5494:	200002b0 	.word	0x200002b0
    5498:	00005035 	.word	0x00005035
    549c:	200002c4 	.word	0x200002c4

000054a0 <sd_mmc_spi_wait_busy>:
{
    54a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    54a2:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    54a4:	466b      	mov	r3, sp
    54a6:	1ddc      	adds	r4, r3, #7
    54a8:	23ff      	movs	r3, #255	; 0xff
    54aa:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    54ac:	4e12      	ldr	r6, [pc, #72]	; (54f8 <sd_mmc_spi_wait_busy+0x58>)
    54ae:	2201      	movs	r2, #1
    54b0:	0021      	movs	r1, r4
    54b2:	0030      	movs	r0, r6
    54b4:	4d11      	ldr	r5, [pc, #68]	; (54fc <sd_mmc_spi_wait_busy+0x5c>)
    54b6:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    54b8:	23ff      	movs	r3, #255	; 0xff
    54ba:	2201      	movs	r2, #1
    54bc:	0021      	movs	r1, r4
    54be:	0030      	movs	r0, r6
    54c0:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    54c2:	23ff      	movs	r3, #255	; 0xff
    54c4:	2201      	movs	r2, #1
    54c6:	0021      	movs	r1, r4
    54c8:	0030      	movs	r0, r6
    54ca:	47a8      	blx	r5
    54cc:	4c0c      	ldr	r4, [pc, #48]	; (5500 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    54ce:	466b      	mov	r3, sp
    54d0:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    54d2:	4e09      	ldr	r6, [pc, #36]	; (54f8 <sd_mmc_spi_wait_busy+0x58>)
    54d4:	4f09      	ldr	r7, [pc, #36]	; (54fc <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    54d6:	782b      	ldrb	r3, [r5, #0]
    54d8:	2bff      	cmp	r3, #255	; 0xff
    54da:	d009      	beq.n	54f0 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    54dc:	23ff      	movs	r3, #255	; 0xff
    54de:	2201      	movs	r2, #1
    54e0:	0029      	movs	r1, r5
    54e2:	0030      	movs	r0, r6
    54e4:	47b8      	blx	r7
    54e6:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    54e8:	2c00      	cmp	r4, #0
    54ea:	d1f4      	bne.n	54d6 <sd_mmc_spi_wait_busy+0x36>
			return false;
    54ec:	2000      	movs	r0, #0
    54ee:	e000      	b.n	54f2 <sd_mmc_spi_wait_busy+0x52>
	return true;
    54f0:	2001      	movs	r0, #1
}
    54f2:	b003      	add	sp, #12
    54f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54f6:	46c0      	nop			; (mov r8, r8)
    54f8:	200002b0 	.word	0x200002b0
    54fc:	00004e29 	.word	0x00004e29
    5500:	00030d40 	.word	0x00030d40

00005504 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    5504:	b570      	push	{r4, r5, r6, lr}
    5506:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    5508:	4b14      	ldr	r3, [pc, #80]	; (555c <sd_mmc_spi_stop_multiwrite_block+0x58>)
    550a:	881c      	ldrh	r4, [r3, #0]
    550c:	2c01      	cmp	r4, #1
    550e:	d023      	beq.n	5558 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    5510:	4b13      	ldr	r3, [pc, #76]	; (5560 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    5512:	8819      	ldrh	r1, [r3, #0]
    5514:	4b13      	ldr	r3, [pc, #76]	; (5564 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    5516:	6818      	ldr	r0, [r3, #0]
    5518:	4b13      	ldr	r3, [pc, #76]	; (5568 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    551a:	4798      	blx	r3
		return true; // It is not the End of multi write
    551c:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    551e:	4284      	cmp	r4, r0
    5520:	d902      	bls.n	5528 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    5522:	0018      	movs	r0, r3
    5524:	b002      	add	sp, #8
    5526:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    5528:	466b      	mov	r3, sp
    552a:	1ddc      	adds	r4, r3, #7
    552c:	23ff      	movs	r3, #255	; 0xff
    552e:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    5530:	4e0e      	ldr	r6, [pc, #56]	; (556c <sd_mmc_spi_stop_multiwrite_block+0x68>)
    5532:	2201      	movs	r2, #1
    5534:	0021      	movs	r1, r4
    5536:	0030      	movs	r0, r6
    5538:	4d0d      	ldr	r5, [pc, #52]	; (5570 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    553a:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    553c:	23fd      	movs	r3, #253	; 0xfd
    553e:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    5540:	2201      	movs	r2, #1
    5542:	0021      	movs	r1, r4
    5544:	0030      	movs	r0, r6
    5546:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    5548:	4b0a      	ldr	r3, [pc, #40]	; (5574 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    554a:	4798      	blx	r3
    554c:	1e03      	subs	r3, r0, #0
    554e:	d1e8      	bne.n	5522 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    5550:	2105      	movs	r1, #5
    5552:	4a09      	ldr	r2, [pc, #36]	; (5578 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    5554:	7011      	strb	r1, [r2, #0]
		return false;
    5556:	e7e4      	b.n	5522 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    5558:	2301      	movs	r3, #1
    555a:	e7e2      	b.n	5522 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    555c:	200002c4 	.word	0x200002c4
    5560:	200002bc 	.word	0x200002bc
    5564:	200002cc 	.word	0x200002cc
    5568:	000061cd 	.word	0x000061cd
    556c:	200002b0 	.word	0x200002b0
    5570:	00005035 	.word	0x00005035
    5574:	000054a1 	.word	0x000054a1
    5578:	200002c3 	.word	0x200002c3

0000557c <sd_mmc_spi_start_read_block>:
{
    557c:	b5f0      	push	{r4, r5, r6, r7, lr}
    557e:	b083      	sub	sp, #12
	token = 0;
    5580:	2200      	movs	r2, #0
    5582:	466b      	mov	r3, sp
    5584:	71da      	strb	r2, [r3, #7]
    5586:	4c14      	ldr	r4, [pc, #80]	; (55d8 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    5588:	466b      	mov	r3, sp
    558a:	1ddd      	adds	r5, r3, #7
    558c:	4e13      	ldr	r6, [pc, #76]	; (55dc <sd_mmc_spi_start_read_block+0x60>)
    558e:	4f14      	ldr	r7, [pc, #80]	; (55e0 <sd_mmc_spi_start_read_block+0x64>)
    5590:	23ff      	movs	r3, #255	; 0xff
    5592:	2201      	movs	r2, #1
    5594:	0029      	movs	r1, r5
    5596:	0030      	movs	r0, r6
    5598:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    559a:	782b      	ldrb	r3, [r5, #0]
    559c:	220f      	movs	r2, #15
    559e:	0019      	movs	r1, r3
    55a0:	4391      	bics	r1, r2
    55a2:	1e0a      	subs	r2, r1, #0
    55a4:	d009      	beq.n	55ba <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    55a6:	2bfe      	cmp	r3, #254	; 0xfe
    55a8:	d013      	beq.n	55d2 <sd_mmc_spi_start_read_block+0x56>
    55aa:	3c01      	subs	r4, #1
		if (i-- == 0) {
    55ac:	2c00      	cmp	r4, #0
    55ae:	d1ef      	bne.n	5590 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    55b0:	2204      	movs	r2, #4
    55b2:	4b0c      	ldr	r3, [pc, #48]	; (55e4 <sd_mmc_spi_start_read_block+0x68>)
    55b4:	701a      	strb	r2, [r3, #0]
			return false;
    55b6:	2000      	movs	r0, #0
    55b8:	e00c      	b.n	55d4 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    55ba:	075b      	lsls	r3, r3, #29
    55bc:	d004      	beq.n	55c8 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    55be:	3207      	adds	r2, #7
    55c0:	4b08      	ldr	r3, [pc, #32]	; (55e4 <sd_mmc_spi_start_read_block+0x68>)
    55c2:	701a      	strb	r2, [r3, #0]
			return false;
    55c4:	2000      	movs	r0, #0
    55c6:	e005      	b.n	55d4 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    55c8:	220b      	movs	r2, #11
    55ca:	4b06      	ldr	r3, [pc, #24]	; (55e4 <sd_mmc_spi_start_read_block+0x68>)
    55cc:	701a      	strb	r2, [r3, #0]
			return false;
    55ce:	2000      	movs	r0, #0
    55d0:	e000      	b.n	55d4 <sd_mmc_spi_start_read_block+0x58>
	return true;
    55d2:	2001      	movs	r0, #1
}
    55d4:	b003      	add	sp, #12
    55d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55d8:	0007a120 	.word	0x0007a120
    55dc:	200002b0 	.word	0x200002b0
    55e0:	00004e29 	.word	0x00004e29
    55e4:	200002c3 	.word	0x200002c3

000055e8 <sd_mmc_spi_stop_write_block>:
{
    55e8:	b530      	push	{r4, r5, lr}
    55ea:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    55ec:	a901      	add	r1, sp, #4
    55ee:	2301      	movs	r3, #1
    55f0:	425b      	negs	r3, r3
    55f2:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    55f4:	4d14      	ldr	r5, [pc, #80]	; (5648 <sd_mmc_spi_stop_write_block+0x60>)
    55f6:	2202      	movs	r2, #2
    55f8:	0028      	movs	r0, r5
    55fa:	4b14      	ldr	r3, [pc, #80]	; (564c <sd_mmc_spi_stop_write_block+0x64>)
    55fc:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    55fe:	466b      	mov	r3, sp
    5600:	1ddc      	adds	r4, r3, #7
    5602:	23ff      	movs	r3, #255	; 0xff
    5604:	2201      	movs	r2, #1
    5606:	0021      	movs	r1, r4
    5608:	0028      	movs	r0, r5
    560a:	4d11      	ldr	r5, [pc, #68]	; (5650 <sd_mmc_spi_stop_write_block+0x68>)
    560c:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    560e:	7822      	ldrb	r2, [r4, #0]
    5610:	2311      	movs	r3, #17
    5612:	4013      	ands	r3, r2
    5614:	2b01      	cmp	r3, #1
    5616:	d005      	beq.n	5624 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    5618:	2201      	movs	r2, #1
    561a:	4b0e      	ldr	r3, [pc, #56]	; (5654 <sd_mmc_spi_stop_write_block+0x6c>)
    561c:	701a      	strb	r2, [r3, #0]
		return false;
    561e:	2000      	movs	r0, #0
}
    5620:	b003      	add	sp, #12
    5622:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    5624:	231e      	movs	r3, #30
    5626:	401a      	ands	r2, r3
    5628:	2a04      	cmp	r2, #4
    562a:	d00b      	beq.n	5644 <sd_mmc_spi_stop_write_block+0x5c>
    562c:	2a0a      	cmp	r2, #10
    562e:	d104      	bne.n	563a <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    5630:	3a02      	subs	r2, #2
    5632:	4b08      	ldr	r3, [pc, #32]	; (5654 <sd_mmc_spi_stop_write_block+0x6c>)
    5634:	701a      	strb	r2, [r3, #0]
		return false;
    5636:	2000      	movs	r0, #0
    5638:	e7f2      	b.n	5620 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    563a:	220a      	movs	r2, #10
    563c:	4b05      	ldr	r3, [pc, #20]	; (5654 <sd_mmc_spi_stop_write_block+0x6c>)
    563e:	701a      	strb	r2, [r3, #0]
		return false;
    5640:	2000      	movs	r0, #0
    5642:	e7ed      	b.n	5620 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    5644:	2001      	movs	r0, #1
    5646:	e7eb      	b.n	5620 <sd_mmc_spi_stop_write_block+0x38>
    5648:	200002b0 	.word	0x200002b0
    564c:	00005035 	.word	0x00005035
    5650:	00004e29 	.word	0x00004e29
    5654:	200002c3 	.word	0x200002c3

00005658 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    5658:	b570      	push	{r4, r5, r6, lr}
    565a:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    565c:	2500      	movs	r5, #0
    565e:	4b2c      	ldr	r3, [pc, #176]	; (5710 <sd_mmc_spi_init+0xb8>)
    5660:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    5662:	a90f      	add	r1, sp, #60	; 0x3c
    5664:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5666:	2601      	movs	r6, #1
    5668:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    566a:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
    566c:	2025      	movs	r0, #37	; 0x25
    566e:	4b29      	ldr	r3, [pc, #164]	; (5714 <sd_mmc_spi_init+0xbc>)
    5670:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    5672:	ac01      	add	r4, sp, #4
    5674:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5676:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5678:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    567a:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    567c:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    567e:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    5680:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    5682:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    5684:	2324      	movs	r3, #36	; 0x24
    5686:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5688:	220c      	movs	r2, #12
    568a:	2100      	movs	r1, #0
    568c:	a807      	add	r0, sp, #28
    568e:	4b22      	ldr	r3, [pc, #136]	; (5718 <sd_mmc_spi_init+0xc0>)
    5690:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    5692:	2380      	movs	r3, #128	; 0x80
    5694:	025b      	lsls	r3, r3, #9
    5696:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    5698:	4b20      	ldr	r3, [pc, #128]	; (571c <sd_mmc_spi_init+0xc4>)
    569a:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    569c:	4b20      	ldr	r3, [pc, #128]	; (5720 <sd_mmc_spi_init+0xc8>)
    569e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    56a0:	4b20      	ldr	r3, [pc, #128]	; (5724 <sd_mmc_spi_init+0xcc>)
    56a2:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    56a4:	4b20      	ldr	r3, [pc, #128]	; (5728 <sd_mmc_spi_init+0xd0>)
    56a6:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    56a8:	4b20      	ldr	r3, [pc, #128]	; (572c <sd_mmc_spi_init+0xd4>)
    56aa:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    56ac:	4d20      	ldr	r5, [pc, #128]	; (5730 <sd_mmc_spi_init+0xd8>)
    56ae:	0022      	movs	r2, r4
    56b0:	4920      	ldr	r1, [pc, #128]	; (5734 <sd_mmc_spi_init+0xdc>)
    56b2:	0028      	movs	r0, r5
    56b4:	4b20      	ldr	r3, [pc, #128]	; (5738 <sd_mmc_spi_init+0xe0>)
    56b6:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    56b8:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    56ba:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    56bc:	2b00      	cmp	r3, #0
    56be:	d1fc      	bne.n	56ba <sd_mmc_spi_init+0x62>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    56c0:	6813      	ldr	r3, [r2, #0]
    56c2:	2102      	movs	r1, #2
    56c4:	430b      	orrs	r3, r1
    56c6:	6013      	str	r3, [r2, #0]
	config->address_enabled = false;
    56c8:	4a1c      	ldr	r2, [pc, #112]	; (573c <sd_mmc_spi_init+0xe4>)
    56ca:	2300      	movs	r3, #0
    56cc:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    56ce:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    56d0:	491b      	ldr	r1, [pc, #108]	; (5740 <sd_mmc_spi_init+0xe8>)
    56d2:	7808      	ldrb	r0, [r1, #0]
    56d4:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    56d6:	4c1b      	ldr	r4, [pc, #108]	; (5744 <sd_mmc_spi_init+0xec>)
    56d8:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    56da:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    56dc:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    56de:	2201      	movs	r2, #1
    56e0:	4669      	mov	r1, sp
    56e2:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    56e4:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    56e6:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    56e8:	4b0a      	ldr	r3, [pc, #40]	; (5714 <sd_mmc_spi_init+0xbc>)
    56ea:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    56ec:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    56ee:	09d1      	lsrs	r1, r2, #7
		return NULL;
    56f0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    56f2:	2900      	cmp	r1, #0
    56f4:	d104      	bne.n	5700 <sd_mmc_spi_init+0xa8>
		return &(ports[port_index]->Group[group_index]);
    56f6:	0953      	lsrs	r3, r2, #5
    56f8:	01db      	lsls	r3, r3, #7
    56fa:	4913      	ldr	r1, [pc, #76]	; (5748 <sd_mmc_spi_init+0xf0>)
    56fc:	468c      	mov	ip, r1
    56fe:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5700:	211f      	movs	r1, #31
    5702:	4011      	ands	r1, r2
    5704:	2201      	movs	r2, #1
    5706:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5708:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    570a:	b010      	add	sp, #64	; 0x40
    570c:	bd70      	pop	{r4, r5, r6, pc}
    570e:	46c0      	nop			; (mov r8, r8)
    5710:	200002c3 	.word	0x200002c3
    5714:	00005cf9 	.word	0x00005cf9
    5718:	000067bb 	.word	0x000067bb
    571c:	00040003 	.word	0x00040003
    5720:	00050003 	.word	0x00050003
    5724:	00060003 	.word	0x00060003
    5728:	00070003 	.word	0x00070003
    572c:	00061a80 	.word	0x00061a80
    5730:	200002b0 	.word	0x200002b0
    5734:	42000800 	.word	0x42000800
    5738:	00004af5 	.word	0x00004af5
    573c:	200002d0 	.word	0x200002d0
    5740:	200000f8 	.word	0x200000f8
    5744:	200002c0 	.word	0x200002c0
    5748:	41004400 	.word	0x41004400

0000574c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    574e:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5750:	2200      	movs	r2, #0
    5752:	4b0d      	ldr	r3, [pc, #52]	; (5788 <sd_mmc_spi_select_device+0x3c>)
    5754:	701a      	strb	r2, [r3, #0]
    5756:	000c      	movs	r4, r1
    5758:	4b0c      	ldr	r3, [pc, #48]	; (578c <sd_mmc_spi_select_device+0x40>)
    575a:	4299      	cmp	r1, r3
    575c:	d900      	bls.n	5760 <sd_mmc_spi_select_device+0x14>
    575e:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    5760:	4d0b      	ldr	r5, [pc, #44]	; (5790 <sd_mmc_spi_select_device+0x44>)
    5762:	4e0c      	ldr	r6, [pc, #48]	; (5794 <sd_mmc_spi_select_device+0x48>)
    5764:	e001      	b.n	576a <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    5766:	08e3      	lsrs	r3, r4, #3
    5768:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    576a:	0021      	movs	r1, r4
    576c:	0028      	movs	r0, r5
    576e:	47b0      	blx	r6
    5770:	2817      	cmp	r0, #23
    5772:	d0f8      	beq.n	5766 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    5774:	0079      	lsls	r1, r7, #1
    5776:	19cf      	adds	r7, r1, r7
    5778:	4907      	ldr	r1, [pc, #28]	; (5798 <sd_mmc_spi_select_device+0x4c>)
    577a:	19c9      	adds	r1, r1, r7
    577c:	2201      	movs	r2, #1
    577e:	4804      	ldr	r0, [pc, #16]	; (5790 <sd_mmc_spi_select_device+0x44>)
    5780:	4b06      	ldr	r3, [pc, #24]	; (579c <sd_mmc_spi_select_device+0x50>)
    5782:	4798      	blx	r3
}
    5784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5786:	46c0      	nop			; (mov r8, r8)
    5788:	200002c3 	.word	0x200002c3
    578c:	003d0900 	.word	0x003d0900
    5790:	200002b0 	.word	0x200002b0
    5794:	00004a71 	.word	0x00004a71
    5798:	200002c0 	.word	0x200002c0
    579c:	00004f41 	.word	0x00004f41

000057a0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    57a0:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    57a2:	2200      	movs	r2, #0
    57a4:	4b04      	ldr	r3, [pc, #16]	; (57b8 <sd_mmc_spi_deselect_device+0x18>)
    57a6:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    57a8:	0041      	lsls	r1, r0, #1
    57aa:	1808      	adds	r0, r1, r0
    57ac:	4903      	ldr	r1, [pc, #12]	; (57bc <sd_mmc_spi_deselect_device+0x1c>)
    57ae:	1809      	adds	r1, r1, r0
    57b0:	4803      	ldr	r0, [pc, #12]	; (57c0 <sd_mmc_spi_deselect_device+0x20>)
    57b2:	4b04      	ldr	r3, [pc, #16]	; (57c4 <sd_mmc_spi_deselect_device+0x24>)
    57b4:	4798      	blx	r3
}
    57b6:	bd10      	pop	{r4, pc}
    57b8:	200002c3 	.word	0x200002c3
    57bc:	200002c0 	.word	0x200002c0
    57c0:	200002b0 	.word	0x200002b0
    57c4:	00004f41 	.word	0x00004f41

000057c8 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    57c8:	b570      	push	{r4, r5, r6, lr}
    57ca:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    57cc:	22ff      	movs	r2, #255	; 0xff
    57ce:	466b      	mov	r3, sp
    57d0:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    57d2:	2200      	movs	r2, #0
    57d4:	4b07      	ldr	r3, [pc, #28]	; (57f4 <sd_mmc_spi_send_clock+0x2c>)
    57d6:	701a      	strb	r2, [r3, #0]
    57d8:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    57da:	4e07      	ldr	r6, [pc, #28]	; (57f8 <sd_mmc_spi_send_clock+0x30>)
    57dc:	4d07      	ldr	r5, [pc, #28]	; (57fc <sd_mmc_spi_send_clock+0x34>)
    57de:	2201      	movs	r2, #1
    57e0:	466b      	mov	r3, sp
    57e2:	1dd9      	adds	r1, r3, #7
    57e4:	0030      	movs	r0, r6
    57e6:	47a8      	blx	r5
    57e8:	3c01      	subs	r4, #1
    57ea:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    57ec:	2c00      	cmp	r4, #0
    57ee:	d1f6      	bne.n	57de <sd_mmc_spi_send_clock+0x16>
	}
}
    57f0:	b002      	add	sp, #8
    57f2:	bd70      	pop	{r4, r5, r6, pc}
    57f4:	200002c3 	.word	0x200002c3
    57f8:	200002b0 	.word	0x200002b0
    57fc:	00005035 	.word	0x00005035

00005800 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    5800:	b5f0      	push	{r4, r5, r6, r7, lr}
    5802:	46c6      	mov	lr, r8
    5804:	b500      	push	{lr}
    5806:	b086      	sub	sp, #24
    5808:	4680      	mov	r8, r0
    580a:	9200      	str	r2, [sp, #0]
    580c:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    580e:	22ff      	movs	r2, #255	; 0xff
    5810:	230f      	movs	r3, #15
    5812:	a802      	add	r0, sp, #8
    5814:	4684      	mov	ip, r0
    5816:	4463      	add	r3, ip
    5818:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    581a:	2200      	movs	r2, #0
    581c:	4b53      	ldr	r3, [pc, #332]	; (596c <sd_mmc_spi_adtc_start+0x16c>)
    581e:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    5820:	ab04      	add	r3, sp, #16
    5822:	323f      	adds	r2, #63	; 0x3f
    5824:	4640      	mov	r0, r8
    5826:	4002      	ands	r2, r0
    5828:	2040      	movs	r0, #64	; 0x40
    582a:	4302      	orrs	r2, r0
    582c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    582e:	0e0a      	lsrs	r2, r1, #24
    5830:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    5832:	0c0a      	lsrs	r2, r1, #16
    5834:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    5836:	0a0a      	lsrs	r2, r1, #8
    5838:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    583a:	7119      	strb	r1, [r3, #4]
    583c:	2700      	movs	r7, #0
	crc = 0;
    583e:	2300      	movs	r3, #0
		value = *buf++;
    5840:	a904      	add	r1, sp, #16
    5842:	2208      	movs	r2, #8
				crc ^= 0x09;
    5844:	2409      	movs	r4, #9
    5846:	e011      	b.n	586c <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    5848:	0076      	lsls	r6, r6, #1
    584a:	b2f6      	uxtb	r6, r6
    584c:	3801      	subs	r0, #1
    584e:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    5850:	2800      	cmp	r0, #0
    5852:	d008      	beq.n	5866 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    5854:	005b      	lsls	r3, r3, #1
    5856:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    5858:	001d      	movs	r5, r3
    585a:	4075      	eors	r5, r6
    585c:	062d      	lsls	r5, r5, #24
    585e:	d5f3      	bpl.n	5848 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    5860:	4063      	eors	r3, r4
    5862:	b2db      	uxtb	r3, r3
    5864:	e7f0      	b.n	5848 <sd_mmc_spi_adtc_start+0x48>
    5866:	3701      	adds	r7, #1
	while (size--) {
    5868:	2f05      	cmp	r7, #5
    586a:	d002      	beq.n	5872 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    586c:	5c7e      	ldrb	r6, [r7, r1]
    586e:	0010      	movs	r0, r2
    5870:	e7f0      	b.n	5854 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    5872:	005b      	lsls	r3, r3, #1
    5874:	2201      	movs	r2, #1
    5876:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    5878:	ac04      	add	r4, sp, #16
    587a:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    587c:	4e3c      	ldr	r6, [pc, #240]	; (5970 <sd_mmc_spi_adtc_start+0x170>)
    587e:	2201      	movs	r2, #1
    5880:	210f      	movs	r1, #15
    5882:	ab02      	add	r3, sp, #8
    5884:	469c      	mov	ip, r3
    5886:	4461      	add	r1, ip
    5888:	0030      	movs	r0, r6
    588a:	4f3a      	ldr	r7, [pc, #232]	; (5974 <sd_mmc_spi_adtc_start+0x174>)
    588c:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    588e:	2206      	movs	r2, #6
    5890:	0021      	movs	r1, r4
    5892:	0030      	movs	r0, r6
    5894:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    5896:	ab02      	add	r3, sp, #8
    5898:	1dd9      	adds	r1, r3, #7
    589a:	23ff      	movs	r3, #255	; 0xff
    589c:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    589e:	2201      	movs	r2, #1
    58a0:	0030      	movs	r0, r6
    58a2:	4e35      	ldr	r6, [pc, #212]	; (5978 <sd_mmc_spi_adtc_start+0x178>)
    58a4:	47b0      	blx	r6
    58a6:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    58a8:	ab02      	add	r3, sp, #8
    58aa:	1dde      	adds	r6, r3, #7
    58ac:	4f30      	ldr	r7, [pc, #192]	; (5970 <sd_mmc_spi_adtc_start+0x170>)
    58ae:	4d32      	ldr	r5, [pc, #200]	; (5978 <sd_mmc_spi_adtc_start+0x178>)
    58b0:	23ff      	movs	r3, #255	; 0xff
    58b2:	2201      	movs	r2, #1
    58b4:	0031      	movs	r1, r6
    58b6:	0038      	movs	r0, r7
    58b8:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    58ba:	7833      	ldrb	r3, [r6, #0]
    58bc:	b25a      	sxtb	r2, r3
    58be:	2a00      	cmp	r2, #0
    58c0:	da0b      	bge.n	58da <sd_mmc_spi_adtc_start+0xda>
    58c2:	3c01      	subs	r4, #1
    58c4:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    58c6:	2c00      	cmp	r4, #0
    58c8:	d1f2      	bne.n	58b0 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    58ca:	2202      	movs	r2, #2
    58cc:	4b27      	ldr	r3, [pc, #156]	; (596c <sd_mmc_spi_adtc_start+0x16c>)
    58ce:	701a      	strb	r2, [r3, #0]
			return false;
    58d0:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    58d2:	b006      	add	sp, #24
    58d4:	bc04      	pop	{r2}
    58d6:	4690      	mov	r8, r2
    58d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    58da:	4a28      	ldr	r2, [pc, #160]	; (597c <sd_mmc_spi_adtc_start+0x17c>)
    58dc:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    58de:	071a      	lsls	r2, r3, #28
    58e0:	d41a      	bmi.n	5918 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    58e2:	075a      	lsls	r2, r3, #29
    58e4:	d41d      	bmi.n	5922 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    58e6:	2201      	movs	r2, #1
    58e8:	4393      	bics	r3, r2
    58ea:	d11f      	bne.n	592c <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    58ec:	4643      	mov	r3, r8
    58ee:	049b      	lsls	r3, r3, #18
    58f0:	d420      	bmi.n	5934 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    58f2:	4643      	mov	r3, r8
    58f4:	059b      	lsls	r3, r3, #22
    58f6:	d425      	bmi.n	5944 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    58f8:	4643      	mov	r3, r8
    58fa:	055b      	lsls	r3, r3, #21
    58fc:	d42b      	bmi.n	5956 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    58fe:	4b20      	ldr	r3, [pc, #128]	; (5980 <sd_mmc_spi_adtc_start+0x180>)
    5900:	466a      	mov	r2, sp
    5902:	8812      	ldrh	r2, [r2, #0]
    5904:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    5906:	4b1f      	ldr	r3, [pc, #124]	; (5984 <sd_mmc_spi_adtc_start+0x184>)
    5908:	466a      	mov	r2, sp
    590a:	8892      	ldrh	r2, [r2, #4]
    590c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    590e:	2200      	movs	r2, #0
    5910:	4b1d      	ldr	r3, [pc, #116]	; (5988 <sd_mmc_spi_adtc_start+0x188>)
    5912:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    5914:	2001      	movs	r0, #1
    5916:	e7dc      	b.n	58d2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    5918:	2206      	movs	r2, #6
    591a:	4b14      	ldr	r3, [pc, #80]	; (596c <sd_mmc_spi_adtc_start+0x16c>)
    591c:	701a      	strb	r2, [r3, #0]
		return false;
    591e:	2000      	movs	r0, #0
    5920:	e7d7      	b.n	58d2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    5922:	2209      	movs	r2, #9
    5924:	4b11      	ldr	r3, [pc, #68]	; (596c <sd_mmc_spi_adtc_start+0x16c>)
    5926:	701a      	strb	r2, [r3, #0]
		return false;
    5928:	2000      	movs	r0, #0
    592a:	e7d2      	b.n	58d2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    592c:	4b0f      	ldr	r3, [pc, #60]	; (596c <sd_mmc_spi_adtc_start+0x16c>)
    592e:	701a      	strb	r2, [r3, #0]
		return false;
    5930:	2000      	movs	r0, #0
    5932:	e7ce      	b.n	58d2 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    5934:	4b15      	ldr	r3, [pc, #84]	; (598c <sd_mmc_spi_adtc_start+0x18c>)
    5936:	4798      	blx	r3
    5938:	2800      	cmp	r0, #0
    593a:	d1da      	bne.n	58f2 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    593c:	2203      	movs	r2, #3
    593e:	4b0b      	ldr	r3, [pc, #44]	; (596c <sd_mmc_spi_adtc_start+0x16c>)
    5940:	701a      	strb	r2, [r3, #0]
			return false;
    5942:	e7c6      	b.n	58d2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    5944:	490d      	ldr	r1, [pc, #52]	; (597c <sd_mmc_spi_adtc_start+0x17c>)
    5946:	2300      	movs	r3, #0
    5948:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    594a:	33ff      	adds	r3, #255	; 0xff
    594c:	2201      	movs	r2, #1
    594e:	4808      	ldr	r0, [pc, #32]	; (5970 <sd_mmc_spi_adtc_start+0x170>)
    5950:	4e09      	ldr	r6, [pc, #36]	; (5978 <sd_mmc_spi_adtc_start+0x178>)
    5952:	47b0      	blx	r6
    5954:	e7d0      	b.n	58f8 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    5956:	4e09      	ldr	r6, [pc, #36]	; (597c <sd_mmc_spi_adtc_start+0x17c>)
    5958:	23ff      	movs	r3, #255	; 0xff
    595a:	2204      	movs	r2, #4
    595c:	0031      	movs	r1, r6
    595e:	4804      	ldr	r0, [pc, #16]	; (5970 <sd_mmc_spi_adtc_start+0x170>)
    5960:	4f05      	ldr	r7, [pc, #20]	; (5978 <sd_mmc_spi_adtc_start+0x178>)
    5962:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    5964:	6833      	ldr	r3, [r6, #0]
    5966:	ba1b      	rev	r3, r3
    5968:	6033      	str	r3, [r6, #0]
    596a:	e7c8      	b.n	58fe <sd_mmc_spi_adtc_start+0xfe>
    596c:	200002c3 	.word	0x200002c3
    5970:	200002b0 	.word	0x200002b0
    5974:	00005035 	.word	0x00005035
    5978:	00004e29 	.word	0x00004e29
    597c:	200002c8 	.word	0x200002c8
    5980:	200002bc 	.word	0x200002bc
    5984:	200002c4 	.word	0x200002c4
    5988:	200002cc 	.word	0x200002cc
    598c:	000054a1 	.word	0x000054a1

00005990 <sd_mmc_spi_send_cmd>:
{
    5990:	b510      	push	{r4, lr}
    5992:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    5994:	2300      	movs	r3, #0
    5996:	9300      	str	r3, [sp, #0]
    5998:	2200      	movs	r2, #0
    599a:	4c02      	ldr	r4, [pc, #8]	; (59a4 <sd_mmc_spi_send_cmd+0x14>)
    599c:	47a0      	blx	r4
}
    599e:	b002      	add	sp, #8
    59a0:	bd10      	pop	{r4, pc}
    59a2:	46c0      	nop			; (mov r8, r8)
    59a4:	00005801 	.word	0x00005801

000059a8 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    59a8:	4b01      	ldr	r3, [pc, #4]	; (59b0 <sd_mmc_spi_get_response+0x8>)
    59aa:	6818      	ldr	r0, [r3, #0]
}
    59ac:	4770      	bx	lr
    59ae:	46c0      	nop			; (mov r8, r8)
    59b0:	200002c8 	.word	0x200002c8

000059b4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    59b4:	b510      	push	{r4, lr}
    59b6:	b084      	sub	sp, #16
    59b8:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    59ba:	2200      	movs	r2, #0
    59bc:	4b14      	ldr	r3, [pc, #80]	; (5a10 <sd_mmc_spi_read_word+0x5c>)
    59be:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    59c0:	4b14      	ldr	r3, [pc, #80]	; (5a14 <sd_mmc_spi_read_word+0x60>)
    59c2:	8819      	ldrh	r1, [r3, #0]
    59c4:	4b14      	ldr	r3, [pc, #80]	; (5a18 <sd_mmc_spi_read_word+0x64>)
    59c6:	6818      	ldr	r0, [r3, #0]
    59c8:	4b14      	ldr	r3, [pc, #80]	; (5a1c <sd_mmc_spi_read_word+0x68>)
    59ca:	4798      	blx	r3
    59cc:	2900      	cmp	r1, #0
    59ce:	d103      	bne.n	59d8 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    59d0:	4b13      	ldr	r3, [pc, #76]	; (5a20 <sd_mmc_spi_read_word+0x6c>)
    59d2:	4798      	blx	r3
    59d4:	2800      	cmp	r0, #0
    59d6:	d010      	beq.n	59fa <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    59d8:	23ff      	movs	r3, #255	; 0xff
    59da:	2204      	movs	r2, #4
    59dc:	a901      	add	r1, sp, #4
    59de:	4811      	ldr	r0, [pc, #68]	; (5a24 <sd_mmc_spi_read_word+0x70>)
    59e0:	4c11      	ldr	r4, [pc, #68]	; (5a28 <sd_mmc_spi_read_word+0x74>)
    59e2:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    59e4:	4b0c      	ldr	r3, [pc, #48]	; (5a18 <sd_mmc_spi_read_word+0x64>)
    59e6:	681a      	ldr	r2, [r3, #0]
    59e8:	1d10      	adds	r0, r2, #4
    59ea:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    59ec:	4b09      	ldr	r3, [pc, #36]	; (5a14 <sd_mmc_spi_read_word+0x60>)
    59ee:	8819      	ldrh	r1, [r3, #0]
    59f0:	4b0a      	ldr	r3, [pc, #40]	; (5a1c <sd_mmc_spi_read_word+0x68>)
    59f2:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    59f4:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    59f6:	2900      	cmp	r1, #0
    59f8:	d001      	beq.n	59fe <sd_mmc_spi_read_word+0x4a>
}
    59fa:	b004      	add	sp, #16
    59fc:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    59fe:	23ff      	movs	r3, #255	; 0xff
    5a00:	2202      	movs	r2, #2
    5a02:	a903      	add	r1, sp, #12
    5a04:	4807      	ldr	r0, [pc, #28]	; (5a24 <sd_mmc_spi_read_word+0x70>)
    5a06:	4c08      	ldr	r4, [pc, #32]	; (5a28 <sd_mmc_spi_read_word+0x74>)
    5a08:	47a0      	blx	r4
	return true;
    5a0a:	2001      	movs	r0, #1
    5a0c:	e7f5      	b.n	59fa <sd_mmc_spi_read_word+0x46>
    5a0e:	46c0      	nop			; (mov r8, r8)
    5a10:	200002c3 	.word	0x200002c3
    5a14:	200002bc 	.word	0x200002bc
    5a18:	200002cc 	.word	0x200002cc
    5a1c:	000062d9 	.word	0x000062d9
    5a20:	0000557d 	.word	0x0000557d
    5a24:	200002b0 	.word	0x200002b0
    5a28:	00004e29 	.word	0x00004e29

00005a2c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    5a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a2e:	46de      	mov	lr, fp
    5a30:	4657      	mov	r7, sl
    5a32:	4646      	mov	r6, r8
    5a34:	b5c0      	push	{r6, r7, lr}
    5a36:	b082      	sub	sp, #8
    5a38:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5a3a:	2200      	movs	r2, #0
    5a3c:	4b17      	ldr	r3, [pc, #92]	; (5a9c <sd_mmc_spi_start_read_blocks+0x70>)
    5a3e:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    5a40:	1e4c      	subs	r4, r1, #1
    5a42:	b2a4      	uxth	r4, r4
    5a44:	2900      	cmp	r1, #0
    5a46:	d026      	beq.n	5a96 <sd_mmc_spi_start_read_blocks+0x6a>
    5a48:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    5a4a:	4b15      	ldr	r3, [pc, #84]	; (5aa0 <sd_mmc_spi_start_read_blocks+0x74>)
    5a4c:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    5a4e:	4f15      	ldr	r7, [pc, #84]	; (5aa4 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    5a50:	47d0      	blx	sl
    5a52:	4680      	mov	r8, r0
    5a54:	2800      	cmp	r0, #0
    5a56:	d017      	beq.n	5a88 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    5a58:	883a      	ldrh	r2, [r7, #0]
    5a5a:	465b      	mov	r3, fp
    5a5c:	1999      	adds	r1, r3, r6
    5a5e:	23ff      	movs	r3, #255	; 0xff
    5a60:	4811      	ldr	r0, [pc, #68]	; (5aa8 <sd_mmc_spi_start_read_blocks+0x7c>)
    5a62:	4d12      	ldr	r5, [pc, #72]	; (5aac <sd_mmc_spi_start_read_blocks+0x80>)
    5a64:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    5a66:	883b      	ldrh	r3, [r7, #0]
    5a68:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    5a6a:	4a11      	ldr	r2, [pc, #68]	; (5ab0 <sd_mmc_spi_start_read_blocks+0x84>)
    5a6c:	6811      	ldr	r1, [r2, #0]
    5a6e:	468c      	mov	ip, r1
    5a70:	4463      	add	r3, ip
    5a72:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    5a74:	23ff      	movs	r3, #255	; 0xff
    5a76:	2202      	movs	r2, #2
    5a78:	a901      	add	r1, sp, #4
    5a7a:	480b      	ldr	r0, [pc, #44]	; (5aa8 <sd_mmc_spi_start_read_blocks+0x7c>)
    5a7c:	47a8      	blx	r5
	while (nb_block--) {
    5a7e:	3c01      	subs	r4, #1
    5a80:	b2a4      	uxth	r4, r4
    5a82:	4b0c      	ldr	r3, [pc, #48]	; (5ab4 <sd_mmc_spi_start_read_blocks+0x88>)
    5a84:	429c      	cmp	r4, r3
    5a86:	d1e3      	bne.n	5a50 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    5a88:	4640      	mov	r0, r8
    5a8a:	b002      	add	sp, #8
    5a8c:	bc1c      	pop	{r2, r3, r4}
    5a8e:	4690      	mov	r8, r2
    5a90:	469a      	mov	sl, r3
    5a92:	46a3      	mov	fp, r4
    5a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    5a96:	2301      	movs	r3, #1
    5a98:	4698      	mov	r8, r3
    5a9a:	e7f5      	b.n	5a88 <sd_mmc_spi_start_read_blocks+0x5c>
    5a9c:	200002c3 	.word	0x200002c3
    5aa0:	0000557d 	.word	0x0000557d
    5aa4:	200002bc 	.word	0x200002bc
    5aa8:	200002b0 	.word	0x200002b0
    5aac:	00004e29 	.word	0x00004e29
    5ab0:	200002cc 	.word	0x200002cc
    5ab4:	0000ffff 	.word	0x0000ffff

00005ab8 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    5ab8:	2001      	movs	r0, #1
    5aba:	4770      	bx	lr

00005abc <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    5abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5abe:	46c6      	mov	lr, r8
    5ac0:	b500      	push	{lr}
    5ac2:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5ac4:	2200      	movs	r2, #0
    5ac6:	4b15      	ldr	r3, [pc, #84]	; (5b1c <sd_mmc_spi_start_write_blocks+0x60>)
    5ac8:	701a      	strb	r2, [r3, #0]
	pos = 0;
    5aca:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    5acc:	4f14      	ldr	r7, [pc, #80]	; (5b20 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    5ace:	4e15      	ldr	r6, [pc, #84]	; (5b24 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    5ad0:	e000      	b.n	5ad4 <sd_mmc_spi_start_write_blocks+0x18>
{
    5ad2:	0021      	movs	r1, r4
	while (nb_block--) {
    5ad4:	1e4c      	subs	r4, r1, #1
    5ad6:	b2a4      	uxth	r4, r4
    5ad8:	2900      	cmp	r1, #0
    5ada:	d01b      	beq.n	5b14 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    5adc:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    5ade:	8832      	ldrh	r2, [r6, #0]
    5ae0:	4643      	mov	r3, r8
    5ae2:	1959      	adds	r1, r3, r5
    5ae4:	4810      	ldr	r0, [pc, #64]	; (5b28 <sd_mmc_spi_start_write_blocks+0x6c>)
    5ae6:	4b11      	ldr	r3, [pc, #68]	; (5b2c <sd_mmc_spi_start_write_blocks+0x70>)
    5ae8:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    5aea:	8833      	ldrh	r3, [r6, #0]
    5aec:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    5aee:	4a10      	ldr	r2, [pc, #64]	; (5b30 <sd_mmc_spi_start_write_blocks+0x74>)
    5af0:	6811      	ldr	r1, [r2, #0]
    5af2:	468c      	mov	ip, r1
    5af4:	4463      	add	r3, ip
    5af6:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    5af8:	4b0e      	ldr	r3, [pc, #56]	; (5b34 <sd_mmc_spi_start_write_blocks+0x78>)
    5afa:	4798      	blx	r3
    5afc:	2800      	cmp	r0, #0
    5afe:	d00a      	beq.n	5b16 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    5b00:	2c00      	cmp	r4, #0
    5b02:	d0e6      	beq.n	5ad2 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    5b04:	4b0c      	ldr	r3, [pc, #48]	; (5b38 <sd_mmc_spi_start_write_blocks+0x7c>)
    5b06:	4798      	blx	r3
    5b08:	2800      	cmp	r0, #0
    5b0a:	d1e2      	bne.n	5ad2 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    5b0c:	2205      	movs	r2, #5
    5b0e:	4b03      	ldr	r3, [pc, #12]	; (5b1c <sd_mmc_spi_start_write_blocks+0x60>)
    5b10:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    5b12:	e000      	b.n	5b16 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    5b14:	2001      	movs	r0, #1
}
    5b16:	bc04      	pop	{r2}
    5b18:	4690      	mov	r8, r2
    5b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b1c:	200002c3 	.word	0x200002c3
    5b20:	00005459 	.word	0x00005459
    5b24:	200002bc 	.word	0x200002bc
    5b28:	200002b0 	.word	0x200002b0
    5b2c:	00005035 	.word	0x00005035
    5b30:	200002cc 	.word	0x200002cc
    5b34:	000055e9 	.word	0x000055e9
    5b38:	000054a1 	.word	0x000054a1

00005b3c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    5b3c:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    5b3e:	4b05      	ldr	r3, [pc, #20]	; (5b54 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    5b40:	4798      	blx	r3
    5b42:	2800      	cmp	r0, #0
    5b44:	d103      	bne.n	5b4e <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    5b46:	2205      	movs	r2, #5
    5b48:	4b03      	ldr	r3, [pc, #12]	; (5b58 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    5b4a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    5b4c:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    5b4e:	4b03      	ldr	r3, [pc, #12]	; (5b5c <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    5b50:	4798      	blx	r3
    5b52:	e7fb      	b.n	5b4c <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    5b54:	000054a1 	.word	0x000054a1
    5b58:	200002c3 	.word	0x200002c3
    5b5c:	00005505 	.word	0x00005505

00005b60 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
    5b60:	2001      	movs	r0, #1
    5b62:	4770      	bx	lr

00005b64 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    5b64:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    5b66:	2301      	movs	r3, #1
    5b68:	2800      	cmp	r0, #0
    5b6a:	d001      	beq.n	5b70 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    5b6c:	0018      	movs	r0, r3
    5b6e:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    5b70:	4b01      	ldr	r3, [pc, #4]	; (5b78 <mem_test_unit_ready+0x14>)
    5b72:	4798      	blx	r3
    5b74:	0003      	movs	r3, r0
    5b76:	e7f9      	b.n	5b6c <mem_test_unit_ready+0x8>
    5b78:	00005289 	.word	0x00005289

00005b7c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    5b7c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    5b7e:	2301      	movs	r3, #1
    5b80:	2800      	cmp	r0, #0
    5b82:	d001      	beq.n	5b88 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    5b84:	0018      	movs	r0, r3
    5b86:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    5b88:	0008      	movs	r0, r1
    5b8a:	4b02      	ldr	r3, [pc, #8]	; (5b94 <mem_read_capacity+0x18>)
    5b8c:	4798      	blx	r3
    5b8e:	0003      	movs	r3, r0
    5b90:	e7f8      	b.n	5b84 <mem_read_capacity+0x8>
    5b92:	46c0      	nop			; (mov r8, r8)
    5b94:	000052b9 	.word	0x000052b9

00005b98 <mem_unload>:
  return sector_size;
}


bool mem_unload(U8 lun, bool unload)
{
    5b98:	0003      	movs	r3, r0

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    5b9a:	2000      	movs	r0, #0
    5b9c:	2b00      	cmp	r3, #0
    5b9e:	d101      	bne.n	5ba4 <mem_unload+0xc>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
    5ba0:	3001      	adds	r0, #1
    5ba2:	4048      	eors	r0, r1
#endif

  Ctrl_access_unlock();

  return unloaded;
}
    5ba4:	4770      	bx	lr
	...

00005ba8 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    5ba8:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    5baa:	2301      	movs	r3, #1
    5bac:	2800      	cmp	r0, #0
    5bae:	d001      	beq.n	5bb4 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    5bb0:	0018      	movs	r0, r3
    5bb2:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    5bb4:	4b01      	ldr	r3, [pc, #4]	; (5bbc <mem_wr_protect+0x14>)
    5bb6:	4798      	blx	r3
    5bb8:	0003      	movs	r3, r0
    5bba:	e7f9      	b.n	5bb0 <mem_wr_protect+0x8>
    5bbc:	000052c9 	.word	0x000052c9

00005bc0 <mem_removal>:


bool mem_removal(U8 lun)
{
    5bc0:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    5bc2:	2301      	movs	r3, #1
    5bc4:	2800      	cmp	r0, #0
    5bc6:	d001      	beq.n	5bcc <mem_removal+0xc>
#endif

  Ctrl_access_unlock();

  return removal;
}
    5bc8:	0018      	movs	r0, r3
    5bca:	bd10      	pop	{r4, pc}
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    5bcc:	4b01      	ldr	r3, [pc, #4]	; (5bd4 <mem_removal+0x14>)
    5bce:	4798      	blx	r3
    5bd0:	0003      	movs	r3, r0
    5bd2:	e7f9      	b.n	5bc8 <mem_removal+0x8>
    5bd4:	000052d9 	.word	0x000052d9

00005bd8 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    5bd8:	2800      	cmp	r0, #0
    5bda:	d101      	bne.n	5be0 <mem_name+0x8>
    5bdc:	4801      	ldr	r0, [pc, #4]	; (5be4 <mem_name+0xc>)
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    5bde:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
    5be0:	2000      	movs	r0, #0
    5be2:	e7fc      	b.n	5bde <mem_name+0x6>
    5be4:	00007224 	.word	0x00007224

00005be8 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
    5be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bea:	0005      	movs	r5, r0
    5bec:	000e      	movs	r6, r1
    5bee:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
    5bf0:	4b07      	ldr	r3, [pc, #28]	; (5c10 <memory_2_usb+0x28>)
    5bf2:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    5bf4:	2401      	movs	r4, #1
    5bf6:	2d00      	cmp	r5, #0
    5bf8:	d003      	beq.n	5c02 <memory_2_usb+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
    5bfa:	4b06      	ldr	r3, [pc, #24]	; (5c14 <memory_2_usb+0x2c>)
    5bfc:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    5bfe:	0020      	movs	r0, r4
    5c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    5c02:	0039      	movs	r1, r7
    5c04:	0030      	movs	r0, r6
    5c06:	4b04      	ldr	r3, [pc, #16]	; (5c18 <memory_2_usb+0x30>)
    5c08:	4798      	blx	r3
    5c0a:	0004      	movs	r4, r0
    5c0c:	e7f5      	b.n	5bfa <memory_2_usb+0x12>
    5c0e:	46c0      	nop			; (mov r8, r8)
    5c10:	00003775 	.word	0x00003775
    5c14:	00003777 	.word	0x00003777
    5c18:	0000538d 	.word	0x0000538d

00005c1c <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
    5c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c1e:	0005      	movs	r5, r0
    5c20:	000e      	movs	r6, r1
    5c22:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
    5c24:	4b07      	ldr	r3, [pc, #28]	; (5c44 <usb_2_memory+0x28>)
    5c26:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    5c28:	2401      	movs	r4, #1
    5c2a:	2d00      	cmp	r5, #0
    5c2c:	d003      	beq.n	5c36 <usb_2_memory+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
    5c2e:	4b06      	ldr	r3, [pc, #24]	; (5c48 <usb_2_memory+0x2c>)
    5c30:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    5c32:	0020      	movs	r0, r4
    5c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    5c36:	0039      	movs	r1, r7
    5c38:	0030      	movs	r0, r6
    5c3a:	4b04      	ldr	r3, [pc, #16]	; (5c4c <usb_2_memory+0x30>)
    5c3c:	4798      	blx	r3
    5c3e:	0004      	movs	r4, r0
    5c40:	e7f5      	b.n	5c2e <usb_2_memory+0x12>
    5c42:	46c0      	nop			; (mov r8, r8)
    5c44:	00003779 	.word	0x00003779
    5c48:	0000377b 	.word	0x0000377b
    5c4c:	00005445 	.word	0x00005445

00005c50 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    5c50:	4b0c      	ldr	r3, [pc, #48]	; (5c84 <cpu_irq_enter_critical+0x34>)
    5c52:	681b      	ldr	r3, [r3, #0]
    5c54:	2b00      	cmp	r3, #0
    5c56:	d106      	bne.n	5c66 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5c58:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    5c5c:	2b00      	cmp	r3, #0
    5c5e:	d007      	beq.n	5c70 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    5c60:	2200      	movs	r2, #0
    5c62:	4b09      	ldr	r3, [pc, #36]	; (5c88 <cpu_irq_enter_critical+0x38>)
    5c64:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    5c66:	4a07      	ldr	r2, [pc, #28]	; (5c84 <cpu_irq_enter_critical+0x34>)
    5c68:	6813      	ldr	r3, [r2, #0]
    5c6a:	3301      	adds	r3, #1
    5c6c:	6013      	str	r3, [r2, #0]
}
    5c6e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    5c70:	b672      	cpsid	i
  __ASM volatile ("dmb");
    5c72:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    5c76:	2200      	movs	r2, #0
    5c78:	4b04      	ldr	r3, [pc, #16]	; (5c8c <cpu_irq_enter_critical+0x3c>)
    5c7a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    5c7c:	3201      	adds	r2, #1
    5c7e:	4b02      	ldr	r3, [pc, #8]	; (5c88 <cpu_irq_enter_critical+0x38>)
    5c80:	701a      	strb	r2, [r3, #0]
    5c82:	e7f0      	b.n	5c66 <cpu_irq_enter_critical+0x16>
    5c84:	200002d4 	.word	0x200002d4
    5c88:	200002d8 	.word	0x200002d8
    5c8c:	200000f9 	.word	0x200000f9

00005c90 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    5c90:	4b08      	ldr	r3, [pc, #32]	; (5cb4 <cpu_irq_leave_critical+0x24>)
    5c92:	681a      	ldr	r2, [r3, #0]
    5c94:	3a01      	subs	r2, #1
    5c96:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    5c98:	681b      	ldr	r3, [r3, #0]
    5c9a:	2b00      	cmp	r3, #0
    5c9c:	d109      	bne.n	5cb2 <cpu_irq_leave_critical+0x22>
    5c9e:	4b06      	ldr	r3, [pc, #24]	; (5cb8 <cpu_irq_leave_critical+0x28>)
    5ca0:	781b      	ldrb	r3, [r3, #0]
    5ca2:	2b00      	cmp	r3, #0
    5ca4:	d005      	beq.n	5cb2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    5ca6:	2201      	movs	r2, #1
    5ca8:	4b04      	ldr	r3, [pc, #16]	; (5cbc <cpu_irq_leave_critical+0x2c>)
    5caa:	701a      	strb	r2, [r3, #0]
    5cac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5cb0:	b662      	cpsie	i
	}
}
    5cb2:	4770      	bx	lr
    5cb4:	200002d4 	.word	0x200002d4
    5cb8:	200002d8 	.word	0x200002d8
    5cbc:	200000f9 	.word	0x200000f9

00005cc0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    5cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cc2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    5cc4:	ac01      	add	r4, sp, #4
    5cc6:	2501      	movs	r5, #1
    5cc8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    5cca:	2700      	movs	r7, #0
    5ccc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    5cce:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    5cd0:	0021      	movs	r1, r4
    5cd2:	203e      	movs	r0, #62	; 0x3e
    5cd4:	4e06      	ldr	r6, [pc, #24]	; (5cf0 <system_board_init+0x30>)
    5cd6:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    5cd8:	2280      	movs	r2, #128	; 0x80
    5cda:	05d2      	lsls	r2, r2, #23
    5cdc:	4b05      	ldr	r3, [pc, #20]	; (5cf4 <system_board_init+0x34>)
    5cde:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    5ce0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    5ce2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    5ce4:	0021      	movs	r1, r4
    5ce6:	200f      	movs	r0, #15
    5ce8:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    5cea:	b003      	add	sp, #12
    5cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cee:	46c0      	nop			; (mov r8, r8)
    5cf0:	00005cf9 	.word	0x00005cf9
    5cf4:	41004480 	.word	0x41004480

00005cf8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    5cf8:	b500      	push	{lr}
    5cfa:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5cfc:	ab01      	add	r3, sp, #4
    5cfe:	2280      	movs	r2, #128	; 0x80
    5d00:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    5d02:	780a      	ldrb	r2, [r1, #0]
    5d04:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    5d06:	784a      	ldrb	r2, [r1, #1]
    5d08:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    5d0a:	788a      	ldrb	r2, [r1, #2]
    5d0c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    5d0e:	0019      	movs	r1, r3
    5d10:	4b01      	ldr	r3, [pc, #4]	; (5d18 <port_pin_set_config+0x20>)
    5d12:	4798      	blx	r3
}
    5d14:	b003      	add	sp, #12
    5d16:	bd00      	pop	{pc}
    5d18:	0000604d 	.word	0x0000604d

00005d1c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    5d1c:	4a06      	ldr	r2, [pc, #24]	; (5d38 <system_gclk_init+0x1c>)
    5d1e:	6993      	ldr	r3, [r2, #24]
    5d20:	2108      	movs	r1, #8
    5d22:	430b      	orrs	r3, r1
    5d24:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5d26:	2201      	movs	r2, #1
    5d28:	4b04      	ldr	r3, [pc, #16]	; (5d3c <system_gclk_init+0x20>)
    5d2a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5d2c:	0019      	movs	r1, r3
    5d2e:	780b      	ldrb	r3, [r1, #0]
    5d30:	4213      	tst	r3, r2
    5d32:	d1fc      	bne.n	5d2e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    5d34:	4770      	bx	lr
    5d36:	46c0      	nop			; (mov r8, r8)
    5d38:	40000400 	.word	0x40000400
    5d3c:	40000c00 	.word	0x40000c00

00005d40 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5d40:	b570      	push	{r4, r5, r6, lr}
    5d42:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    5d44:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5d46:	780d      	ldrb	r5, [r1, #0]
    5d48:	022d      	lsls	r5, r5, #8
    5d4a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5d4c:	784b      	ldrb	r3, [r1, #1]
    5d4e:	2b00      	cmp	r3, #0
    5d50:	d002      	beq.n	5d58 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5d52:	2380      	movs	r3, #128	; 0x80
    5d54:	02db      	lsls	r3, r3, #11
    5d56:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5d58:	7a4b      	ldrb	r3, [r1, #9]
    5d5a:	2b00      	cmp	r3, #0
    5d5c:	d002      	beq.n	5d64 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5d5e:	2380      	movs	r3, #128	; 0x80
    5d60:	031b      	lsls	r3, r3, #12
    5d62:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5d64:	6848      	ldr	r0, [r1, #4]
    5d66:	2801      	cmp	r0, #1
    5d68:	d910      	bls.n	5d8c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5d6a:	1e43      	subs	r3, r0, #1
    5d6c:	4218      	tst	r0, r3
    5d6e:	d134      	bne.n	5dda <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5d70:	2802      	cmp	r0, #2
    5d72:	d930      	bls.n	5dd6 <system_gclk_gen_set_config+0x96>
    5d74:	2302      	movs	r3, #2
    5d76:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    5d78:	3201      	adds	r2, #1
						mask <<= 1) {
    5d7a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    5d7c:	4298      	cmp	r0, r3
    5d7e:	d8fb      	bhi.n	5d78 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5d80:	0212      	lsls	r2, r2, #8
    5d82:	4332      	orrs	r2, r6
    5d84:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5d86:	2380      	movs	r3, #128	; 0x80
    5d88:	035b      	lsls	r3, r3, #13
    5d8a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5d8c:	7a0b      	ldrb	r3, [r1, #8]
    5d8e:	2b00      	cmp	r3, #0
    5d90:	d002      	beq.n	5d98 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5d92:	2380      	movs	r3, #128	; 0x80
    5d94:	039b      	lsls	r3, r3, #14
    5d96:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5d98:	4a13      	ldr	r2, [pc, #76]	; (5de8 <system_gclk_gen_set_config+0xa8>)
    5d9a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    5d9c:	b25b      	sxtb	r3, r3
    5d9e:	2b00      	cmp	r3, #0
    5da0:	dbfb      	blt.n	5d9a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    5da2:	4b12      	ldr	r3, [pc, #72]	; (5dec <system_gclk_gen_set_config+0xac>)
    5da4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5da6:	4b12      	ldr	r3, [pc, #72]	; (5df0 <system_gclk_gen_set_config+0xb0>)
    5da8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5daa:	4a0f      	ldr	r2, [pc, #60]	; (5de8 <system_gclk_gen_set_config+0xa8>)
    5dac:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5dae:	b25b      	sxtb	r3, r3
    5db0:	2b00      	cmp	r3, #0
    5db2:	dbfb      	blt.n	5dac <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5db4:	4b0c      	ldr	r3, [pc, #48]	; (5de8 <system_gclk_gen_set_config+0xa8>)
    5db6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5db8:	001a      	movs	r2, r3
    5dba:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    5dbc:	b25b      	sxtb	r3, r3
    5dbe:	2b00      	cmp	r3, #0
    5dc0:	dbfb      	blt.n	5dba <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5dc2:	4a09      	ldr	r2, [pc, #36]	; (5de8 <system_gclk_gen_set_config+0xa8>)
    5dc4:	6853      	ldr	r3, [r2, #4]
    5dc6:	2180      	movs	r1, #128	; 0x80
    5dc8:	0249      	lsls	r1, r1, #9
    5dca:	400b      	ands	r3, r1
    5dcc:	431d      	orrs	r5, r3
    5dce:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    5dd0:	4b08      	ldr	r3, [pc, #32]	; (5df4 <system_gclk_gen_set_config+0xb4>)
    5dd2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5dd4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    5dd6:	2200      	movs	r2, #0
    5dd8:	e7d2      	b.n	5d80 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5dda:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    5ddc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5dde:	2380      	movs	r3, #128	; 0x80
    5de0:	029b      	lsls	r3, r3, #10
    5de2:	431d      	orrs	r5, r3
    5de4:	e7d2      	b.n	5d8c <system_gclk_gen_set_config+0x4c>
    5de6:	46c0      	nop			; (mov r8, r8)
    5de8:	40000c00 	.word	0x40000c00
    5dec:	00005c51 	.word	0x00005c51
    5df0:	40000c08 	.word	0x40000c08
    5df4:	00005c91 	.word	0x00005c91

00005df8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5df8:	b510      	push	{r4, lr}
    5dfa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5dfc:	4a0b      	ldr	r2, [pc, #44]	; (5e2c <system_gclk_gen_enable+0x34>)
    5dfe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5e00:	b25b      	sxtb	r3, r3
    5e02:	2b00      	cmp	r3, #0
    5e04:	dbfb      	blt.n	5dfe <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    5e06:	4b0a      	ldr	r3, [pc, #40]	; (5e30 <system_gclk_gen_enable+0x38>)
    5e08:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5e0a:	4b0a      	ldr	r3, [pc, #40]	; (5e34 <system_gclk_gen_enable+0x3c>)
    5e0c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5e0e:	4a07      	ldr	r2, [pc, #28]	; (5e2c <system_gclk_gen_enable+0x34>)
    5e10:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5e12:	b25b      	sxtb	r3, r3
    5e14:	2b00      	cmp	r3, #0
    5e16:	dbfb      	blt.n	5e10 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    5e18:	4a04      	ldr	r2, [pc, #16]	; (5e2c <system_gclk_gen_enable+0x34>)
    5e1a:	6851      	ldr	r1, [r2, #4]
    5e1c:	2380      	movs	r3, #128	; 0x80
    5e1e:	025b      	lsls	r3, r3, #9
    5e20:	430b      	orrs	r3, r1
    5e22:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    5e24:	4b04      	ldr	r3, [pc, #16]	; (5e38 <system_gclk_gen_enable+0x40>)
    5e26:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5e28:	bd10      	pop	{r4, pc}
    5e2a:	46c0      	nop			; (mov r8, r8)
    5e2c:	40000c00 	.word	0x40000c00
    5e30:	00005c51 	.word	0x00005c51
    5e34:	40000c04 	.word	0x40000c04
    5e38:	00005c91 	.word	0x00005c91

00005e3c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5e3c:	b570      	push	{r4, r5, r6, lr}
    5e3e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5e40:	4a1a      	ldr	r2, [pc, #104]	; (5eac <system_gclk_gen_get_hz+0x70>)
    5e42:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5e44:	b25b      	sxtb	r3, r3
    5e46:	2b00      	cmp	r3, #0
    5e48:	dbfb      	blt.n	5e42 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    5e4a:	4b19      	ldr	r3, [pc, #100]	; (5eb0 <system_gclk_gen_get_hz+0x74>)
    5e4c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5e4e:	4b19      	ldr	r3, [pc, #100]	; (5eb4 <system_gclk_gen_get_hz+0x78>)
    5e50:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5e52:	4a16      	ldr	r2, [pc, #88]	; (5eac <system_gclk_gen_get_hz+0x70>)
    5e54:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5e56:	b25b      	sxtb	r3, r3
    5e58:	2b00      	cmp	r3, #0
    5e5a:	dbfb      	blt.n	5e54 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5e5c:	4e13      	ldr	r6, [pc, #76]	; (5eac <system_gclk_gen_get_hz+0x70>)
    5e5e:	6870      	ldr	r0, [r6, #4]
    5e60:	04c0      	lsls	r0, r0, #19
    5e62:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5e64:	4b14      	ldr	r3, [pc, #80]	; (5eb8 <system_gclk_gen_get_hz+0x7c>)
    5e66:	4798      	blx	r3
    5e68:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5e6a:	4b12      	ldr	r3, [pc, #72]	; (5eb4 <system_gclk_gen_get_hz+0x78>)
    5e6c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5e6e:	6876      	ldr	r6, [r6, #4]
    5e70:	02f6      	lsls	r6, r6, #11
    5e72:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5e74:	4b11      	ldr	r3, [pc, #68]	; (5ebc <system_gclk_gen_get_hz+0x80>)
    5e76:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5e78:	4a0c      	ldr	r2, [pc, #48]	; (5eac <system_gclk_gen_get_hz+0x70>)
    5e7a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5e7c:	b25b      	sxtb	r3, r3
    5e7e:	2b00      	cmp	r3, #0
    5e80:	dbfb      	blt.n	5e7a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    5e82:	4b0a      	ldr	r3, [pc, #40]	; (5eac <system_gclk_gen_get_hz+0x70>)
    5e84:	689c      	ldr	r4, [r3, #8]
    5e86:	0224      	lsls	r4, r4, #8
    5e88:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    5e8a:	4b0d      	ldr	r3, [pc, #52]	; (5ec0 <system_gclk_gen_get_hz+0x84>)
    5e8c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5e8e:	2e00      	cmp	r6, #0
    5e90:	d107      	bne.n	5ea2 <system_gclk_gen_get_hz+0x66>
    5e92:	2c01      	cmp	r4, #1
    5e94:	d907      	bls.n	5ea6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    5e96:	0021      	movs	r1, r4
    5e98:	0028      	movs	r0, r5
    5e9a:	4b0a      	ldr	r3, [pc, #40]	; (5ec4 <system_gclk_gen_get_hz+0x88>)
    5e9c:	4798      	blx	r3
    5e9e:	0005      	movs	r5, r0
    5ea0:	e001      	b.n	5ea6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    5ea2:	3401      	adds	r4, #1
    5ea4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    5ea6:	0028      	movs	r0, r5
    5ea8:	bd70      	pop	{r4, r5, r6, pc}
    5eaa:	46c0      	nop			; (mov r8, r8)
    5eac:	40000c00 	.word	0x40000c00
    5eb0:	00005c51 	.word	0x00005c51
    5eb4:	40000c04 	.word	0x40000c04
    5eb8:	00002119 	.word	0x00002119
    5ebc:	40000c08 	.word	0x40000c08
    5ec0:	00005c91 	.word	0x00005c91
    5ec4:	000061cd 	.word	0x000061cd

00005ec8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5ec8:	b510      	push	{r4, lr}
    5eca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5ecc:	4b06      	ldr	r3, [pc, #24]	; (5ee8 <system_gclk_chan_enable+0x20>)
    5ece:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5ed0:	4b06      	ldr	r3, [pc, #24]	; (5eec <system_gclk_chan_enable+0x24>)
    5ed2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5ed4:	4a06      	ldr	r2, [pc, #24]	; (5ef0 <system_gclk_chan_enable+0x28>)
    5ed6:	8853      	ldrh	r3, [r2, #2]
    5ed8:	2180      	movs	r1, #128	; 0x80
    5eda:	01c9      	lsls	r1, r1, #7
    5edc:	430b      	orrs	r3, r1
    5ede:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    5ee0:	4b04      	ldr	r3, [pc, #16]	; (5ef4 <system_gclk_chan_enable+0x2c>)
    5ee2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5ee4:	bd10      	pop	{r4, pc}
    5ee6:	46c0      	nop			; (mov r8, r8)
    5ee8:	00005c51 	.word	0x00005c51
    5eec:	40000c02 	.word	0x40000c02
    5ef0:	40000c00 	.word	0x40000c00
    5ef4:	00005c91 	.word	0x00005c91

00005ef8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5ef8:	b510      	push	{r4, lr}
    5efa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5efc:	4b0f      	ldr	r3, [pc, #60]	; (5f3c <system_gclk_chan_disable+0x44>)
    5efe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5f00:	4b0f      	ldr	r3, [pc, #60]	; (5f40 <system_gclk_chan_disable+0x48>)
    5f02:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5f04:	4a0f      	ldr	r2, [pc, #60]	; (5f44 <system_gclk_chan_disable+0x4c>)
    5f06:	8853      	ldrh	r3, [r2, #2]
    5f08:	051b      	lsls	r3, r3, #20
    5f0a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    5f0c:	8853      	ldrh	r3, [r2, #2]
    5f0e:	490e      	ldr	r1, [pc, #56]	; (5f48 <system_gclk_chan_disable+0x50>)
    5f10:	400b      	ands	r3, r1
    5f12:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5f14:	8853      	ldrh	r3, [r2, #2]
    5f16:	490d      	ldr	r1, [pc, #52]	; (5f4c <system_gclk_chan_disable+0x54>)
    5f18:	400b      	ands	r3, r1
    5f1a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5f1c:	0011      	movs	r1, r2
    5f1e:	2280      	movs	r2, #128	; 0x80
    5f20:	01d2      	lsls	r2, r2, #7
    5f22:	884b      	ldrh	r3, [r1, #2]
    5f24:	4213      	tst	r3, r2
    5f26:	d1fc      	bne.n	5f22 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    5f28:	4906      	ldr	r1, [pc, #24]	; (5f44 <system_gclk_chan_disable+0x4c>)
    5f2a:	884a      	ldrh	r2, [r1, #2]
    5f2c:	0203      	lsls	r3, r0, #8
    5f2e:	4806      	ldr	r0, [pc, #24]	; (5f48 <system_gclk_chan_disable+0x50>)
    5f30:	4002      	ands	r2, r0
    5f32:	4313      	orrs	r3, r2
    5f34:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    5f36:	4b06      	ldr	r3, [pc, #24]	; (5f50 <system_gclk_chan_disable+0x58>)
    5f38:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5f3a:	bd10      	pop	{r4, pc}
    5f3c:	00005c51 	.word	0x00005c51
    5f40:	40000c02 	.word	0x40000c02
    5f44:	40000c00 	.word	0x40000c00
    5f48:	fffff0ff 	.word	0xfffff0ff
    5f4c:	ffffbfff 	.word	0xffffbfff
    5f50:	00005c91 	.word	0x00005c91

00005f54 <system_gclk_chan_set_config>:
{
    5f54:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    5f56:	780c      	ldrb	r4, [r1, #0]
    5f58:	0224      	lsls	r4, r4, #8
    5f5a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    5f5c:	4b02      	ldr	r3, [pc, #8]	; (5f68 <system_gclk_chan_set_config+0x14>)
    5f5e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    5f60:	b2a4      	uxth	r4, r4
    5f62:	4b02      	ldr	r3, [pc, #8]	; (5f6c <system_gclk_chan_set_config+0x18>)
    5f64:	805c      	strh	r4, [r3, #2]
}
    5f66:	bd10      	pop	{r4, pc}
    5f68:	00005ef9 	.word	0x00005ef9
    5f6c:	40000c00 	.word	0x40000c00

00005f70 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5f70:	b510      	push	{r4, lr}
    5f72:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5f74:	4b06      	ldr	r3, [pc, #24]	; (5f90 <system_gclk_chan_get_hz+0x20>)
    5f76:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5f78:	4b06      	ldr	r3, [pc, #24]	; (5f94 <system_gclk_chan_get_hz+0x24>)
    5f7a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5f7c:	4b06      	ldr	r3, [pc, #24]	; (5f98 <system_gclk_chan_get_hz+0x28>)
    5f7e:	885c      	ldrh	r4, [r3, #2]
    5f80:	0524      	lsls	r4, r4, #20
    5f82:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    5f84:	4b05      	ldr	r3, [pc, #20]	; (5f9c <system_gclk_chan_get_hz+0x2c>)
    5f86:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5f88:	0020      	movs	r0, r4
    5f8a:	4b05      	ldr	r3, [pc, #20]	; (5fa0 <system_gclk_chan_get_hz+0x30>)
    5f8c:	4798      	blx	r3
}
    5f8e:	bd10      	pop	{r4, pc}
    5f90:	00005c51 	.word	0x00005c51
    5f94:	40000c02 	.word	0x40000c02
    5f98:	40000c00 	.word	0x40000c00
    5f9c:	00005c91 	.word	0x00005c91
    5fa0:	00005e3d 	.word	0x00005e3d

00005fa4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5fa4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5fa6:	78d3      	ldrb	r3, [r2, #3]
    5fa8:	2b00      	cmp	r3, #0
    5faa:	d135      	bne.n	6018 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5fac:	7813      	ldrb	r3, [r2, #0]
    5fae:	2b80      	cmp	r3, #128	; 0x80
    5fb0:	d029      	beq.n	6006 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    5fb2:	061b      	lsls	r3, r3, #24
    5fb4:	2480      	movs	r4, #128	; 0x80
    5fb6:	0264      	lsls	r4, r4, #9
    5fb8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5fba:	7854      	ldrb	r4, [r2, #1]
    5fbc:	2502      	movs	r5, #2
    5fbe:	43ac      	bics	r4, r5
    5fc0:	d106      	bne.n	5fd0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5fc2:	7894      	ldrb	r4, [r2, #2]
    5fc4:	2c00      	cmp	r4, #0
    5fc6:	d120      	bne.n	600a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    5fc8:	2480      	movs	r4, #128	; 0x80
    5fca:	02a4      	lsls	r4, r4, #10
    5fcc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5fce:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5fd0:	7854      	ldrb	r4, [r2, #1]
    5fd2:	3c01      	subs	r4, #1
    5fd4:	2c01      	cmp	r4, #1
    5fd6:	d91c      	bls.n	6012 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5fd8:	040d      	lsls	r5, r1, #16
    5fda:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5fdc:	24a0      	movs	r4, #160	; 0xa0
    5fde:	05e4      	lsls	r4, r4, #23
    5fe0:	432c      	orrs	r4, r5
    5fe2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5fe4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5fe6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5fe8:	24d0      	movs	r4, #208	; 0xd0
    5fea:	0624      	lsls	r4, r4, #24
    5fec:	432c      	orrs	r4, r5
    5fee:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5ff0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5ff2:	78d4      	ldrb	r4, [r2, #3]
    5ff4:	2c00      	cmp	r4, #0
    5ff6:	d122      	bne.n	603e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5ff8:	035b      	lsls	r3, r3, #13
    5ffa:	d51c      	bpl.n	6036 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5ffc:	7893      	ldrb	r3, [r2, #2]
    5ffe:	2b01      	cmp	r3, #1
    6000:	d01e      	beq.n	6040 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    6002:	6141      	str	r1, [r0, #20]
    6004:	e017      	b.n	6036 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    6006:	2300      	movs	r3, #0
    6008:	e7d7      	b.n	5fba <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    600a:	24c0      	movs	r4, #192	; 0xc0
    600c:	02e4      	lsls	r4, r4, #11
    600e:	4323      	orrs	r3, r4
    6010:	e7dd      	b.n	5fce <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6012:	4c0d      	ldr	r4, [pc, #52]	; (6048 <_system_pinmux_config+0xa4>)
    6014:	4023      	ands	r3, r4
    6016:	e7df      	b.n	5fd8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    6018:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    601a:	040c      	lsls	r4, r1, #16
    601c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    601e:	23a0      	movs	r3, #160	; 0xa0
    6020:	05db      	lsls	r3, r3, #23
    6022:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6024:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6026:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6028:	23d0      	movs	r3, #208	; 0xd0
    602a:	061b      	lsls	r3, r3, #24
    602c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    602e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6030:	78d3      	ldrb	r3, [r2, #3]
    6032:	2b00      	cmp	r3, #0
    6034:	d103      	bne.n	603e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6036:	7853      	ldrb	r3, [r2, #1]
    6038:	3b01      	subs	r3, #1
    603a:	2b01      	cmp	r3, #1
    603c:	d902      	bls.n	6044 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    603e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6040:	6181      	str	r1, [r0, #24]
    6042:	e7f8      	b.n	6036 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    6044:	6081      	str	r1, [r0, #8]
}
    6046:	e7fa      	b.n	603e <_system_pinmux_config+0x9a>
    6048:	fffbffff 	.word	0xfffbffff

0000604c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    604c:	b510      	push	{r4, lr}
    604e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    6050:	09c1      	lsrs	r1, r0, #7
		return NULL;
    6052:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6054:	2900      	cmp	r1, #0
    6056:	d104      	bne.n	6062 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    6058:	0943      	lsrs	r3, r0, #5
    605a:	01db      	lsls	r3, r3, #7
    605c:	4905      	ldr	r1, [pc, #20]	; (6074 <system_pinmux_pin_set_config+0x28>)
    605e:	468c      	mov	ip, r1
    6060:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6062:	241f      	movs	r4, #31
    6064:	4020      	ands	r0, r4
    6066:	2101      	movs	r1, #1
    6068:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    606a:	0018      	movs	r0, r3
    606c:	4b02      	ldr	r3, [pc, #8]	; (6078 <system_pinmux_pin_set_config+0x2c>)
    606e:	4798      	blx	r3
}
    6070:	bd10      	pop	{r4, pc}
    6072:	46c0      	nop			; (mov r8, r8)
    6074:	41004400 	.word	0x41004400
    6078:	00005fa5 	.word	0x00005fa5

0000607c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    607c:	4770      	bx	lr
	...

00006080 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6080:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6082:	4b05      	ldr	r3, [pc, #20]	; (6098 <system_init+0x18>)
    6084:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6086:	4b05      	ldr	r3, [pc, #20]	; (609c <system_init+0x1c>)
    6088:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    608a:	4b05      	ldr	r3, [pc, #20]	; (60a0 <system_init+0x20>)
    608c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    608e:	4b05      	ldr	r3, [pc, #20]	; (60a4 <system_init+0x24>)
    6090:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6092:	4b05      	ldr	r3, [pc, #20]	; (60a8 <system_init+0x28>)
    6094:	4798      	blx	r3
}
    6096:	bd10      	pop	{r4, pc}
    6098:	00002319 	.word	0x00002319
    609c:	00005cc1 	.word	0x00005cc1
    60a0:	0000607d 	.word	0x0000607d
    60a4:	000019dd 	.word	0x000019dd
    60a8:	0000607d 	.word	0x0000607d

000060ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    60ac:	e7fe      	b.n	60ac <Dummy_Handler>
	...

000060b0 <Reset_Handler>:
{
    60b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    60b2:	4a2a      	ldr	r2, [pc, #168]	; (615c <Reset_Handler+0xac>)
    60b4:	4b2a      	ldr	r3, [pc, #168]	; (6160 <Reset_Handler+0xb0>)
    60b6:	429a      	cmp	r2, r3
    60b8:	d011      	beq.n	60de <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    60ba:	001a      	movs	r2, r3
    60bc:	4b29      	ldr	r3, [pc, #164]	; (6164 <Reset_Handler+0xb4>)
    60be:	429a      	cmp	r2, r3
    60c0:	d20d      	bcs.n	60de <Reset_Handler+0x2e>
    60c2:	4a29      	ldr	r2, [pc, #164]	; (6168 <Reset_Handler+0xb8>)
    60c4:	3303      	adds	r3, #3
    60c6:	1a9b      	subs	r3, r3, r2
    60c8:	089b      	lsrs	r3, r3, #2
    60ca:	3301      	adds	r3, #1
    60cc:	009b      	lsls	r3, r3, #2
    60ce:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    60d0:	4823      	ldr	r0, [pc, #140]	; (6160 <Reset_Handler+0xb0>)
    60d2:	4922      	ldr	r1, [pc, #136]	; (615c <Reset_Handler+0xac>)
    60d4:	588c      	ldr	r4, [r1, r2]
    60d6:	5084      	str	r4, [r0, r2]
    60d8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    60da:	429a      	cmp	r2, r3
    60dc:	d1fa      	bne.n	60d4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    60de:	4a23      	ldr	r2, [pc, #140]	; (616c <Reset_Handler+0xbc>)
    60e0:	4b23      	ldr	r3, [pc, #140]	; (6170 <Reset_Handler+0xc0>)
    60e2:	429a      	cmp	r2, r3
    60e4:	d20a      	bcs.n	60fc <Reset_Handler+0x4c>
    60e6:	43d3      	mvns	r3, r2
    60e8:	4921      	ldr	r1, [pc, #132]	; (6170 <Reset_Handler+0xc0>)
    60ea:	185b      	adds	r3, r3, r1
    60ec:	2103      	movs	r1, #3
    60ee:	438b      	bics	r3, r1
    60f0:	3304      	adds	r3, #4
    60f2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    60f4:	2100      	movs	r1, #0
    60f6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    60f8:	4293      	cmp	r3, r2
    60fa:	d1fc      	bne.n	60f6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    60fc:	4a1d      	ldr	r2, [pc, #116]	; (6174 <Reset_Handler+0xc4>)
    60fe:	21ff      	movs	r1, #255	; 0xff
    6100:	4b1d      	ldr	r3, [pc, #116]	; (6178 <Reset_Handler+0xc8>)
    6102:	438b      	bics	r3, r1
    6104:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6106:	39fd      	subs	r1, #253	; 0xfd
    6108:	2390      	movs	r3, #144	; 0x90
    610a:	005b      	lsls	r3, r3, #1
    610c:	4a1b      	ldr	r2, [pc, #108]	; (617c <Reset_Handler+0xcc>)
    610e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6110:	4a1b      	ldr	r2, [pc, #108]	; (6180 <Reset_Handler+0xd0>)
    6112:	78d3      	ldrb	r3, [r2, #3]
    6114:	2503      	movs	r5, #3
    6116:	43ab      	bics	r3, r5
    6118:	2402      	movs	r4, #2
    611a:	4323      	orrs	r3, r4
    611c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    611e:	78d3      	ldrb	r3, [r2, #3]
    6120:	270c      	movs	r7, #12
    6122:	43bb      	bics	r3, r7
    6124:	2608      	movs	r6, #8
    6126:	4333      	orrs	r3, r6
    6128:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    612a:	4b16      	ldr	r3, [pc, #88]	; (6184 <Reset_Handler+0xd4>)
    612c:	7b98      	ldrb	r0, [r3, #14]
    612e:	2230      	movs	r2, #48	; 0x30
    6130:	4390      	bics	r0, r2
    6132:	2220      	movs	r2, #32
    6134:	4310      	orrs	r0, r2
    6136:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6138:	7b99      	ldrb	r1, [r3, #14]
    613a:	43b9      	bics	r1, r7
    613c:	4331      	orrs	r1, r6
    613e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6140:	7b9a      	ldrb	r2, [r3, #14]
    6142:	43aa      	bics	r2, r5
    6144:	4322      	orrs	r2, r4
    6146:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6148:	4a0f      	ldr	r2, [pc, #60]	; (6188 <Reset_Handler+0xd8>)
    614a:	6853      	ldr	r3, [r2, #4]
    614c:	2180      	movs	r1, #128	; 0x80
    614e:	430b      	orrs	r3, r1
    6150:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    6152:	4b0e      	ldr	r3, [pc, #56]	; (618c <Reset_Handler+0xdc>)
    6154:	4798      	blx	r3
        main();
    6156:	4b0e      	ldr	r3, [pc, #56]	; (6190 <Reset_Handler+0xe0>)
    6158:	4798      	blx	r3
    615a:	e7fe      	b.n	615a <Reset_Handler+0xaa>
    615c:	000072c8 	.word	0x000072c8
    6160:	20000000 	.word	0x20000000
    6164:	20000160 	.word	0x20000160
    6168:	20000004 	.word	0x20000004
    616c:	20000160 	.word	0x20000160
    6170:	20000ae4 	.word	0x20000ae4
    6174:	e000ed00 	.word	0xe000ed00
    6178:	00000000 	.word	0x00000000
    617c:	41007000 	.word	0x41007000
    6180:	41005000 	.word	0x41005000
    6184:	41004800 	.word	0x41004800
    6188:	41004000 	.word	0x41004000
    618c:	00006761 	.word	0x00006761
    6190:	00003291 	.word	0x00003291

00006194 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6194:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6196:	4a06      	ldr	r2, [pc, #24]	; (61b0 <_sbrk+0x1c>)
    6198:	6812      	ldr	r2, [r2, #0]
    619a:	2a00      	cmp	r2, #0
    619c:	d004      	beq.n	61a8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    619e:	4a04      	ldr	r2, [pc, #16]	; (61b0 <_sbrk+0x1c>)
    61a0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    61a2:	18c3      	adds	r3, r0, r3
    61a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    61a6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    61a8:	4902      	ldr	r1, [pc, #8]	; (61b4 <_sbrk+0x20>)
    61aa:	4a01      	ldr	r2, [pc, #4]	; (61b0 <_sbrk+0x1c>)
    61ac:	6011      	str	r1, [r2, #0]
    61ae:	e7f6      	b.n	619e <_sbrk+0xa>
    61b0:	200002dc 	.word	0x200002dc
    61b4:	20002ae8 	.word	0x20002ae8

000061b8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    61b8:	2001      	movs	r0, #1
    61ba:	4240      	negs	r0, r0
    61bc:	4770      	bx	lr

000061be <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    61be:	2380      	movs	r3, #128	; 0x80
    61c0:	019b      	lsls	r3, r3, #6
    61c2:	604b      	str	r3, [r1, #4]

	return 0;
}
    61c4:	2000      	movs	r0, #0
    61c6:	4770      	bx	lr

000061c8 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    61c8:	2000      	movs	r0, #0
    61ca:	4770      	bx	lr

000061cc <__udivsi3>:
    61cc:	2200      	movs	r2, #0
    61ce:	0843      	lsrs	r3, r0, #1
    61d0:	428b      	cmp	r3, r1
    61d2:	d374      	bcc.n	62be <__udivsi3+0xf2>
    61d4:	0903      	lsrs	r3, r0, #4
    61d6:	428b      	cmp	r3, r1
    61d8:	d35f      	bcc.n	629a <__udivsi3+0xce>
    61da:	0a03      	lsrs	r3, r0, #8
    61dc:	428b      	cmp	r3, r1
    61de:	d344      	bcc.n	626a <__udivsi3+0x9e>
    61e0:	0b03      	lsrs	r3, r0, #12
    61e2:	428b      	cmp	r3, r1
    61e4:	d328      	bcc.n	6238 <__udivsi3+0x6c>
    61e6:	0c03      	lsrs	r3, r0, #16
    61e8:	428b      	cmp	r3, r1
    61ea:	d30d      	bcc.n	6208 <__udivsi3+0x3c>
    61ec:	22ff      	movs	r2, #255	; 0xff
    61ee:	0209      	lsls	r1, r1, #8
    61f0:	ba12      	rev	r2, r2
    61f2:	0c03      	lsrs	r3, r0, #16
    61f4:	428b      	cmp	r3, r1
    61f6:	d302      	bcc.n	61fe <__udivsi3+0x32>
    61f8:	1212      	asrs	r2, r2, #8
    61fa:	0209      	lsls	r1, r1, #8
    61fc:	d065      	beq.n	62ca <__udivsi3+0xfe>
    61fe:	0b03      	lsrs	r3, r0, #12
    6200:	428b      	cmp	r3, r1
    6202:	d319      	bcc.n	6238 <__udivsi3+0x6c>
    6204:	e000      	b.n	6208 <__udivsi3+0x3c>
    6206:	0a09      	lsrs	r1, r1, #8
    6208:	0bc3      	lsrs	r3, r0, #15
    620a:	428b      	cmp	r3, r1
    620c:	d301      	bcc.n	6212 <__udivsi3+0x46>
    620e:	03cb      	lsls	r3, r1, #15
    6210:	1ac0      	subs	r0, r0, r3
    6212:	4152      	adcs	r2, r2
    6214:	0b83      	lsrs	r3, r0, #14
    6216:	428b      	cmp	r3, r1
    6218:	d301      	bcc.n	621e <__udivsi3+0x52>
    621a:	038b      	lsls	r3, r1, #14
    621c:	1ac0      	subs	r0, r0, r3
    621e:	4152      	adcs	r2, r2
    6220:	0b43      	lsrs	r3, r0, #13
    6222:	428b      	cmp	r3, r1
    6224:	d301      	bcc.n	622a <__udivsi3+0x5e>
    6226:	034b      	lsls	r3, r1, #13
    6228:	1ac0      	subs	r0, r0, r3
    622a:	4152      	adcs	r2, r2
    622c:	0b03      	lsrs	r3, r0, #12
    622e:	428b      	cmp	r3, r1
    6230:	d301      	bcc.n	6236 <__udivsi3+0x6a>
    6232:	030b      	lsls	r3, r1, #12
    6234:	1ac0      	subs	r0, r0, r3
    6236:	4152      	adcs	r2, r2
    6238:	0ac3      	lsrs	r3, r0, #11
    623a:	428b      	cmp	r3, r1
    623c:	d301      	bcc.n	6242 <__udivsi3+0x76>
    623e:	02cb      	lsls	r3, r1, #11
    6240:	1ac0      	subs	r0, r0, r3
    6242:	4152      	adcs	r2, r2
    6244:	0a83      	lsrs	r3, r0, #10
    6246:	428b      	cmp	r3, r1
    6248:	d301      	bcc.n	624e <__udivsi3+0x82>
    624a:	028b      	lsls	r3, r1, #10
    624c:	1ac0      	subs	r0, r0, r3
    624e:	4152      	adcs	r2, r2
    6250:	0a43      	lsrs	r3, r0, #9
    6252:	428b      	cmp	r3, r1
    6254:	d301      	bcc.n	625a <__udivsi3+0x8e>
    6256:	024b      	lsls	r3, r1, #9
    6258:	1ac0      	subs	r0, r0, r3
    625a:	4152      	adcs	r2, r2
    625c:	0a03      	lsrs	r3, r0, #8
    625e:	428b      	cmp	r3, r1
    6260:	d301      	bcc.n	6266 <__udivsi3+0x9a>
    6262:	020b      	lsls	r3, r1, #8
    6264:	1ac0      	subs	r0, r0, r3
    6266:	4152      	adcs	r2, r2
    6268:	d2cd      	bcs.n	6206 <__udivsi3+0x3a>
    626a:	09c3      	lsrs	r3, r0, #7
    626c:	428b      	cmp	r3, r1
    626e:	d301      	bcc.n	6274 <__udivsi3+0xa8>
    6270:	01cb      	lsls	r3, r1, #7
    6272:	1ac0      	subs	r0, r0, r3
    6274:	4152      	adcs	r2, r2
    6276:	0983      	lsrs	r3, r0, #6
    6278:	428b      	cmp	r3, r1
    627a:	d301      	bcc.n	6280 <__udivsi3+0xb4>
    627c:	018b      	lsls	r3, r1, #6
    627e:	1ac0      	subs	r0, r0, r3
    6280:	4152      	adcs	r2, r2
    6282:	0943      	lsrs	r3, r0, #5
    6284:	428b      	cmp	r3, r1
    6286:	d301      	bcc.n	628c <__udivsi3+0xc0>
    6288:	014b      	lsls	r3, r1, #5
    628a:	1ac0      	subs	r0, r0, r3
    628c:	4152      	adcs	r2, r2
    628e:	0903      	lsrs	r3, r0, #4
    6290:	428b      	cmp	r3, r1
    6292:	d301      	bcc.n	6298 <__udivsi3+0xcc>
    6294:	010b      	lsls	r3, r1, #4
    6296:	1ac0      	subs	r0, r0, r3
    6298:	4152      	adcs	r2, r2
    629a:	08c3      	lsrs	r3, r0, #3
    629c:	428b      	cmp	r3, r1
    629e:	d301      	bcc.n	62a4 <__udivsi3+0xd8>
    62a0:	00cb      	lsls	r3, r1, #3
    62a2:	1ac0      	subs	r0, r0, r3
    62a4:	4152      	adcs	r2, r2
    62a6:	0883      	lsrs	r3, r0, #2
    62a8:	428b      	cmp	r3, r1
    62aa:	d301      	bcc.n	62b0 <__udivsi3+0xe4>
    62ac:	008b      	lsls	r3, r1, #2
    62ae:	1ac0      	subs	r0, r0, r3
    62b0:	4152      	adcs	r2, r2
    62b2:	0843      	lsrs	r3, r0, #1
    62b4:	428b      	cmp	r3, r1
    62b6:	d301      	bcc.n	62bc <__udivsi3+0xf0>
    62b8:	004b      	lsls	r3, r1, #1
    62ba:	1ac0      	subs	r0, r0, r3
    62bc:	4152      	adcs	r2, r2
    62be:	1a41      	subs	r1, r0, r1
    62c0:	d200      	bcs.n	62c4 <__udivsi3+0xf8>
    62c2:	4601      	mov	r1, r0
    62c4:	4152      	adcs	r2, r2
    62c6:	4610      	mov	r0, r2
    62c8:	4770      	bx	lr
    62ca:	e7ff      	b.n	62cc <__udivsi3+0x100>
    62cc:	b501      	push	{r0, lr}
    62ce:	2000      	movs	r0, #0
    62d0:	f000 f8f0 	bl	64b4 <__aeabi_idiv0>
    62d4:	bd02      	pop	{r1, pc}
    62d6:	46c0      	nop			; (mov r8, r8)

000062d8 <__aeabi_uidivmod>:
    62d8:	2900      	cmp	r1, #0
    62da:	d0f7      	beq.n	62cc <__udivsi3+0x100>
    62dc:	e776      	b.n	61cc <__udivsi3>
    62de:	4770      	bx	lr

000062e0 <__divsi3>:
    62e0:	4603      	mov	r3, r0
    62e2:	430b      	orrs	r3, r1
    62e4:	d47f      	bmi.n	63e6 <__divsi3+0x106>
    62e6:	2200      	movs	r2, #0
    62e8:	0843      	lsrs	r3, r0, #1
    62ea:	428b      	cmp	r3, r1
    62ec:	d374      	bcc.n	63d8 <__divsi3+0xf8>
    62ee:	0903      	lsrs	r3, r0, #4
    62f0:	428b      	cmp	r3, r1
    62f2:	d35f      	bcc.n	63b4 <__divsi3+0xd4>
    62f4:	0a03      	lsrs	r3, r0, #8
    62f6:	428b      	cmp	r3, r1
    62f8:	d344      	bcc.n	6384 <__divsi3+0xa4>
    62fa:	0b03      	lsrs	r3, r0, #12
    62fc:	428b      	cmp	r3, r1
    62fe:	d328      	bcc.n	6352 <__divsi3+0x72>
    6300:	0c03      	lsrs	r3, r0, #16
    6302:	428b      	cmp	r3, r1
    6304:	d30d      	bcc.n	6322 <__divsi3+0x42>
    6306:	22ff      	movs	r2, #255	; 0xff
    6308:	0209      	lsls	r1, r1, #8
    630a:	ba12      	rev	r2, r2
    630c:	0c03      	lsrs	r3, r0, #16
    630e:	428b      	cmp	r3, r1
    6310:	d302      	bcc.n	6318 <__divsi3+0x38>
    6312:	1212      	asrs	r2, r2, #8
    6314:	0209      	lsls	r1, r1, #8
    6316:	d065      	beq.n	63e4 <__divsi3+0x104>
    6318:	0b03      	lsrs	r3, r0, #12
    631a:	428b      	cmp	r3, r1
    631c:	d319      	bcc.n	6352 <__divsi3+0x72>
    631e:	e000      	b.n	6322 <__divsi3+0x42>
    6320:	0a09      	lsrs	r1, r1, #8
    6322:	0bc3      	lsrs	r3, r0, #15
    6324:	428b      	cmp	r3, r1
    6326:	d301      	bcc.n	632c <__divsi3+0x4c>
    6328:	03cb      	lsls	r3, r1, #15
    632a:	1ac0      	subs	r0, r0, r3
    632c:	4152      	adcs	r2, r2
    632e:	0b83      	lsrs	r3, r0, #14
    6330:	428b      	cmp	r3, r1
    6332:	d301      	bcc.n	6338 <__divsi3+0x58>
    6334:	038b      	lsls	r3, r1, #14
    6336:	1ac0      	subs	r0, r0, r3
    6338:	4152      	adcs	r2, r2
    633a:	0b43      	lsrs	r3, r0, #13
    633c:	428b      	cmp	r3, r1
    633e:	d301      	bcc.n	6344 <__divsi3+0x64>
    6340:	034b      	lsls	r3, r1, #13
    6342:	1ac0      	subs	r0, r0, r3
    6344:	4152      	adcs	r2, r2
    6346:	0b03      	lsrs	r3, r0, #12
    6348:	428b      	cmp	r3, r1
    634a:	d301      	bcc.n	6350 <__divsi3+0x70>
    634c:	030b      	lsls	r3, r1, #12
    634e:	1ac0      	subs	r0, r0, r3
    6350:	4152      	adcs	r2, r2
    6352:	0ac3      	lsrs	r3, r0, #11
    6354:	428b      	cmp	r3, r1
    6356:	d301      	bcc.n	635c <__divsi3+0x7c>
    6358:	02cb      	lsls	r3, r1, #11
    635a:	1ac0      	subs	r0, r0, r3
    635c:	4152      	adcs	r2, r2
    635e:	0a83      	lsrs	r3, r0, #10
    6360:	428b      	cmp	r3, r1
    6362:	d301      	bcc.n	6368 <__divsi3+0x88>
    6364:	028b      	lsls	r3, r1, #10
    6366:	1ac0      	subs	r0, r0, r3
    6368:	4152      	adcs	r2, r2
    636a:	0a43      	lsrs	r3, r0, #9
    636c:	428b      	cmp	r3, r1
    636e:	d301      	bcc.n	6374 <__divsi3+0x94>
    6370:	024b      	lsls	r3, r1, #9
    6372:	1ac0      	subs	r0, r0, r3
    6374:	4152      	adcs	r2, r2
    6376:	0a03      	lsrs	r3, r0, #8
    6378:	428b      	cmp	r3, r1
    637a:	d301      	bcc.n	6380 <__divsi3+0xa0>
    637c:	020b      	lsls	r3, r1, #8
    637e:	1ac0      	subs	r0, r0, r3
    6380:	4152      	adcs	r2, r2
    6382:	d2cd      	bcs.n	6320 <__divsi3+0x40>
    6384:	09c3      	lsrs	r3, r0, #7
    6386:	428b      	cmp	r3, r1
    6388:	d301      	bcc.n	638e <__divsi3+0xae>
    638a:	01cb      	lsls	r3, r1, #7
    638c:	1ac0      	subs	r0, r0, r3
    638e:	4152      	adcs	r2, r2
    6390:	0983      	lsrs	r3, r0, #6
    6392:	428b      	cmp	r3, r1
    6394:	d301      	bcc.n	639a <__divsi3+0xba>
    6396:	018b      	lsls	r3, r1, #6
    6398:	1ac0      	subs	r0, r0, r3
    639a:	4152      	adcs	r2, r2
    639c:	0943      	lsrs	r3, r0, #5
    639e:	428b      	cmp	r3, r1
    63a0:	d301      	bcc.n	63a6 <__divsi3+0xc6>
    63a2:	014b      	lsls	r3, r1, #5
    63a4:	1ac0      	subs	r0, r0, r3
    63a6:	4152      	adcs	r2, r2
    63a8:	0903      	lsrs	r3, r0, #4
    63aa:	428b      	cmp	r3, r1
    63ac:	d301      	bcc.n	63b2 <__divsi3+0xd2>
    63ae:	010b      	lsls	r3, r1, #4
    63b0:	1ac0      	subs	r0, r0, r3
    63b2:	4152      	adcs	r2, r2
    63b4:	08c3      	lsrs	r3, r0, #3
    63b6:	428b      	cmp	r3, r1
    63b8:	d301      	bcc.n	63be <__divsi3+0xde>
    63ba:	00cb      	lsls	r3, r1, #3
    63bc:	1ac0      	subs	r0, r0, r3
    63be:	4152      	adcs	r2, r2
    63c0:	0883      	lsrs	r3, r0, #2
    63c2:	428b      	cmp	r3, r1
    63c4:	d301      	bcc.n	63ca <__divsi3+0xea>
    63c6:	008b      	lsls	r3, r1, #2
    63c8:	1ac0      	subs	r0, r0, r3
    63ca:	4152      	adcs	r2, r2
    63cc:	0843      	lsrs	r3, r0, #1
    63ce:	428b      	cmp	r3, r1
    63d0:	d301      	bcc.n	63d6 <__divsi3+0xf6>
    63d2:	004b      	lsls	r3, r1, #1
    63d4:	1ac0      	subs	r0, r0, r3
    63d6:	4152      	adcs	r2, r2
    63d8:	1a41      	subs	r1, r0, r1
    63da:	d200      	bcs.n	63de <__divsi3+0xfe>
    63dc:	4601      	mov	r1, r0
    63de:	4152      	adcs	r2, r2
    63e0:	4610      	mov	r0, r2
    63e2:	4770      	bx	lr
    63e4:	e05d      	b.n	64a2 <__divsi3+0x1c2>
    63e6:	0fca      	lsrs	r2, r1, #31
    63e8:	d000      	beq.n	63ec <__divsi3+0x10c>
    63ea:	4249      	negs	r1, r1
    63ec:	1003      	asrs	r3, r0, #32
    63ee:	d300      	bcc.n	63f2 <__divsi3+0x112>
    63f0:	4240      	negs	r0, r0
    63f2:	4053      	eors	r3, r2
    63f4:	2200      	movs	r2, #0
    63f6:	469c      	mov	ip, r3
    63f8:	0903      	lsrs	r3, r0, #4
    63fa:	428b      	cmp	r3, r1
    63fc:	d32d      	bcc.n	645a <__divsi3+0x17a>
    63fe:	0a03      	lsrs	r3, r0, #8
    6400:	428b      	cmp	r3, r1
    6402:	d312      	bcc.n	642a <__divsi3+0x14a>
    6404:	22fc      	movs	r2, #252	; 0xfc
    6406:	0189      	lsls	r1, r1, #6
    6408:	ba12      	rev	r2, r2
    640a:	0a03      	lsrs	r3, r0, #8
    640c:	428b      	cmp	r3, r1
    640e:	d30c      	bcc.n	642a <__divsi3+0x14a>
    6410:	0189      	lsls	r1, r1, #6
    6412:	1192      	asrs	r2, r2, #6
    6414:	428b      	cmp	r3, r1
    6416:	d308      	bcc.n	642a <__divsi3+0x14a>
    6418:	0189      	lsls	r1, r1, #6
    641a:	1192      	asrs	r2, r2, #6
    641c:	428b      	cmp	r3, r1
    641e:	d304      	bcc.n	642a <__divsi3+0x14a>
    6420:	0189      	lsls	r1, r1, #6
    6422:	d03a      	beq.n	649a <__divsi3+0x1ba>
    6424:	1192      	asrs	r2, r2, #6
    6426:	e000      	b.n	642a <__divsi3+0x14a>
    6428:	0989      	lsrs	r1, r1, #6
    642a:	09c3      	lsrs	r3, r0, #7
    642c:	428b      	cmp	r3, r1
    642e:	d301      	bcc.n	6434 <__divsi3+0x154>
    6430:	01cb      	lsls	r3, r1, #7
    6432:	1ac0      	subs	r0, r0, r3
    6434:	4152      	adcs	r2, r2
    6436:	0983      	lsrs	r3, r0, #6
    6438:	428b      	cmp	r3, r1
    643a:	d301      	bcc.n	6440 <__divsi3+0x160>
    643c:	018b      	lsls	r3, r1, #6
    643e:	1ac0      	subs	r0, r0, r3
    6440:	4152      	adcs	r2, r2
    6442:	0943      	lsrs	r3, r0, #5
    6444:	428b      	cmp	r3, r1
    6446:	d301      	bcc.n	644c <__divsi3+0x16c>
    6448:	014b      	lsls	r3, r1, #5
    644a:	1ac0      	subs	r0, r0, r3
    644c:	4152      	adcs	r2, r2
    644e:	0903      	lsrs	r3, r0, #4
    6450:	428b      	cmp	r3, r1
    6452:	d301      	bcc.n	6458 <__divsi3+0x178>
    6454:	010b      	lsls	r3, r1, #4
    6456:	1ac0      	subs	r0, r0, r3
    6458:	4152      	adcs	r2, r2
    645a:	08c3      	lsrs	r3, r0, #3
    645c:	428b      	cmp	r3, r1
    645e:	d301      	bcc.n	6464 <__divsi3+0x184>
    6460:	00cb      	lsls	r3, r1, #3
    6462:	1ac0      	subs	r0, r0, r3
    6464:	4152      	adcs	r2, r2
    6466:	0883      	lsrs	r3, r0, #2
    6468:	428b      	cmp	r3, r1
    646a:	d301      	bcc.n	6470 <__divsi3+0x190>
    646c:	008b      	lsls	r3, r1, #2
    646e:	1ac0      	subs	r0, r0, r3
    6470:	4152      	adcs	r2, r2
    6472:	d2d9      	bcs.n	6428 <__divsi3+0x148>
    6474:	0843      	lsrs	r3, r0, #1
    6476:	428b      	cmp	r3, r1
    6478:	d301      	bcc.n	647e <__divsi3+0x19e>
    647a:	004b      	lsls	r3, r1, #1
    647c:	1ac0      	subs	r0, r0, r3
    647e:	4152      	adcs	r2, r2
    6480:	1a41      	subs	r1, r0, r1
    6482:	d200      	bcs.n	6486 <__divsi3+0x1a6>
    6484:	4601      	mov	r1, r0
    6486:	4663      	mov	r3, ip
    6488:	4152      	adcs	r2, r2
    648a:	105b      	asrs	r3, r3, #1
    648c:	4610      	mov	r0, r2
    648e:	d301      	bcc.n	6494 <__divsi3+0x1b4>
    6490:	4240      	negs	r0, r0
    6492:	2b00      	cmp	r3, #0
    6494:	d500      	bpl.n	6498 <__divsi3+0x1b8>
    6496:	4249      	negs	r1, r1
    6498:	4770      	bx	lr
    649a:	4663      	mov	r3, ip
    649c:	105b      	asrs	r3, r3, #1
    649e:	d300      	bcc.n	64a2 <__divsi3+0x1c2>
    64a0:	4240      	negs	r0, r0
    64a2:	b501      	push	{r0, lr}
    64a4:	2000      	movs	r0, #0
    64a6:	f000 f805 	bl	64b4 <__aeabi_idiv0>
    64aa:	bd02      	pop	{r1, pc}

000064ac <__aeabi_idivmod>:
    64ac:	2900      	cmp	r1, #0
    64ae:	d0f8      	beq.n	64a2 <__divsi3+0x1c2>
    64b0:	e716      	b.n	62e0 <__divsi3>
    64b2:	4770      	bx	lr

000064b4 <__aeabi_idiv0>:
    64b4:	4770      	bx	lr
    64b6:	46c0      	nop			; (mov r8, r8)

000064b8 <__clzsi2>:
    64b8:	211c      	movs	r1, #28
    64ba:	2301      	movs	r3, #1
    64bc:	041b      	lsls	r3, r3, #16
    64be:	4298      	cmp	r0, r3
    64c0:	d301      	bcc.n	64c6 <__clzsi2+0xe>
    64c2:	0c00      	lsrs	r0, r0, #16
    64c4:	3910      	subs	r1, #16
    64c6:	0a1b      	lsrs	r3, r3, #8
    64c8:	4298      	cmp	r0, r3
    64ca:	d301      	bcc.n	64d0 <__clzsi2+0x18>
    64cc:	0a00      	lsrs	r0, r0, #8
    64ce:	3908      	subs	r1, #8
    64d0:	091b      	lsrs	r3, r3, #4
    64d2:	4298      	cmp	r0, r3
    64d4:	d301      	bcc.n	64da <__clzsi2+0x22>
    64d6:	0900      	lsrs	r0, r0, #4
    64d8:	3904      	subs	r1, #4
    64da:	a202      	add	r2, pc, #8	; (adr r2, 64e4 <__clzsi2+0x2c>)
    64dc:	5c10      	ldrb	r0, [r2, r0]
    64de:	1840      	adds	r0, r0, r1
    64e0:	4770      	bx	lr
    64e2:	46c0      	nop			; (mov r8, r8)
    64e4:	02020304 	.word	0x02020304
    64e8:	01010101 	.word	0x01010101
	...

000064f4 <__ctzsi2>:
    64f4:	4241      	negs	r1, r0
    64f6:	4008      	ands	r0, r1
    64f8:	211c      	movs	r1, #28
    64fa:	2301      	movs	r3, #1
    64fc:	041b      	lsls	r3, r3, #16
    64fe:	4298      	cmp	r0, r3
    6500:	d301      	bcc.n	6506 <__ctzsi2+0x12>
    6502:	0c00      	lsrs	r0, r0, #16
    6504:	3910      	subs	r1, #16
    6506:	0a1b      	lsrs	r3, r3, #8
    6508:	4298      	cmp	r0, r3
    650a:	d301      	bcc.n	6510 <__ctzsi2+0x1c>
    650c:	0a00      	lsrs	r0, r0, #8
    650e:	3908      	subs	r1, #8
    6510:	091b      	lsrs	r3, r3, #4
    6512:	4298      	cmp	r0, r3
    6514:	d301      	bcc.n	651a <__ctzsi2+0x26>
    6516:	0900      	lsrs	r0, r0, #4
    6518:	3904      	subs	r1, #4
    651a:	a202      	add	r2, pc, #8	; (adr r2, 6524 <__ctzsi2+0x30>)
    651c:	5c10      	ldrb	r0, [r2, r0]
    651e:	1a40      	subs	r0, r0, r1
    6520:	4770      	bx	lr
    6522:	46c0      	nop			; (mov r8, r8)
    6524:	1d1d1c1b 	.word	0x1d1d1c1b
    6528:	1e1e1e1e 	.word	0x1e1e1e1e
    652c:	1f1f1f1f 	.word	0x1f1f1f1f
    6530:	1f1f1f1f 	.word	0x1f1f1f1f

00006534 <__aeabi_uldivmod>:
    6534:	2b00      	cmp	r3, #0
    6536:	d111      	bne.n	655c <__aeabi_uldivmod+0x28>
    6538:	2a00      	cmp	r2, #0
    653a:	d10f      	bne.n	655c <__aeabi_uldivmod+0x28>
    653c:	2900      	cmp	r1, #0
    653e:	d100      	bne.n	6542 <__aeabi_uldivmod+0xe>
    6540:	2800      	cmp	r0, #0
    6542:	d002      	beq.n	654a <__aeabi_uldivmod+0x16>
    6544:	2100      	movs	r1, #0
    6546:	43c9      	mvns	r1, r1
    6548:	1c08      	adds	r0, r1, #0
    654a:	b407      	push	{r0, r1, r2}
    654c:	4802      	ldr	r0, [pc, #8]	; (6558 <__aeabi_uldivmod+0x24>)
    654e:	a102      	add	r1, pc, #8	; (adr r1, 6558 <__aeabi_uldivmod+0x24>)
    6550:	1840      	adds	r0, r0, r1
    6552:	9002      	str	r0, [sp, #8]
    6554:	bd03      	pop	{r0, r1, pc}
    6556:	46c0      	nop			; (mov r8, r8)
    6558:	ffffff5d 	.word	0xffffff5d
    655c:	b403      	push	{r0, r1}
    655e:	4668      	mov	r0, sp
    6560:	b501      	push	{r0, lr}
    6562:	9802      	ldr	r0, [sp, #8]
    6564:	f000 f830 	bl	65c8 <__udivmoddi4>
    6568:	9b01      	ldr	r3, [sp, #4]
    656a:	469e      	mov	lr, r3
    656c:	b002      	add	sp, #8
    656e:	bc0c      	pop	{r2, r3}
    6570:	4770      	bx	lr
    6572:	46c0      	nop			; (mov r8, r8)

00006574 <__aeabi_lmul>:
    6574:	b5f0      	push	{r4, r5, r6, r7, lr}
    6576:	46ce      	mov	lr, r9
    6578:	4647      	mov	r7, r8
    657a:	0415      	lsls	r5, r2, #16
    657c:	0c2d      	lsrs	r5, r5, #16
    657e:	002e      	movs	r6, r5
    6580:	b580      	push	{r7, lr}
    6582:	0407      	lsls	r7, r0, #16
    6584:	0c14      	lsrs	r4, r2, #16
    6586:	0c3f      	lsrs	r7, r7, #16
    6588:	4699      	mov	r9, r3
    658a:	0c03      	lsrs	r3, r0, #16
    658c:	437e      	muls	r6, r7
    658e:	435d      	muls	r5, r3
    6590:	4367      	muls	r7, r4
    6592:	4363      	muls	r3, r4
    6594:	197f      	adds	r7, r7, r5
    6596:	0c34      	lsrs	r4, r6, #16
    6598:	19e4      	adds	r4, r4, r7
    659a:	469c      	mov	ip, r3
    659c:	42a5      	cmp	r5, r4
    659e:	d903      	bls.n	65a8 <__aeabi_lmul+0x34>
    65a0:	2380      	movs	r3, #128	; 0x80
    65a2:	025b      	lsls	r3, r3, #9
    65a4:	4698      	mov	r8, r3
    65a6:	44c4      	add	ip, r8
    65a8:	464b      	mov	r3, r9
    65aa:	4351      	muls	r1, r2
    65ac:	4343      	muls	r3, r0
    65ae:	0436      	lsls	r6, r6, #16
    65b0:	0c36      	lsrs	r6, r6, #16
    65b2:	0c25      	lsrs	r5, r4, #16
    65b4:	0424      	lsls	r4, r4, #16
    65b6:	4465      	add	r5, ip
    65b8:	19a4      	adds	r4, r4, r6
    65ba:	1859      	adds	r1, r3, r1
    65bc:	1949      	adds	r1, r1, r5
    65be:	0020      	movs	r0, r4
    65c0:	bc0c      	pop	{r2, r3}
    65c2:	4690      	mov	r8, r2
    65c4:	4699      	mov	r9, r3
    65c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000065c8 <__udivmoddi4>:
    65c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    65ca:	4657      	mov	r7, sl
    65cc:	464e      	mov	r6, r9
    65ce:	4645      	mov	r5, r8
    65d0:	46de      	mov	lr, fp
    65d2:	b5e0      	push	{r5, r6, r7, lr}
    65d4:	0004      	movs	r4, r0
    65d6:	b083      	sub	sp, #12
    65d8:	000d      	movs	r5, r1
    65da:	4692      	mov	sl, r2
    65dc:	4699      	mov	r9, r3
    65de:	428b      	cmp	r3, r1
    65e0:	d82f      	bhi.n	6642 <__udivmoddi4+0x7a>
    65e2:	d02c      	beq.n	663e <__udivmoddi4+0x76>
    65e4:	4649      	mov	r1, r9
    65e6:	4650      	mov	r0, sl
    65e8:	f000 f8ae 	bl	6748 <__clzdi2>
    65ec:	0029      	movs	r1, r5
    65ee:	0006      	movs	r6, r0
    65f0:	0020      	movs	r0, r4
    65f2:	f000 f8a9 	bl	6748 <__clzdi2>
    65f6:	1a33      	subs	r3, r6, r0
    65f8:	4698      	mov	r8, r3
    65fa:	3b20      	subs	r3, #32
    65fc:	469b      	mov	fp, r3
    65fe:	d500      	bpl.n	6602 <__udivmoddi4+0x3a>
    6600:	e074      	b.n	66ec <__udivmoddi4+0x124>
    6602:	4653      	mov	r3, sl
    6604:	465a      	mov	r2, fp
    6606:	4093      	lsls	r3, r2
    6608:	001f      	movs	r7, r3
    660a:	4653      	mov	r3, sl
    660c:	4642      	mov	r2, r8
    660e:	4093      	lsls	r3, r2
    6610:	001e      	movs	r6, r3
    6612:	42af      	cmp	r7, r5
    6614:	d829      	bhi.n	666a <__udivmoddi4+0xa2>
    6616:	d026      	beq.n	6666 <__udivmoddi4+0x9e>
    6618:	465b      	mov	r3, fp
    661a:	1ba4      	subs	r4, r4, r6
    661c:	41bd      	sbcs	r5, r7
    661e:	2b00      	cmp	r3, #0
    6620:	da00      	bge.n	6624 <__udivmoddi4+0x5c>
    6622:	e079      	b.n	6718 <__udivmoddi4+0x150>
    6624:	2200      	movs	r2, #0
    6626:	2300      	movs	r3, #0
    6628:	9200      	str	r2, [sp, #0]
    662a:	9301      	str	r3, [sp, #4]
    662c:	2301      	movs	r3, #1
    662e:	465a      	mov	r2, fp
    6630:	4093      	lsls	r3, r2
    6632:	9301      	str	r3, [sp, #4]
    6634:	2301      	movs	r3, #1
    6636:	4642      	mov	r2, r8
    6638:	4093      	lsls	r3, r2
    663a:	9300      	str	r3, [sp, #0]
    663c:	e019      	b.n	6672 <__udivmoddi4+0xaa>
    663e:	4282      	cmp	r2, r0
    6640:	d9d0      	bls.n	65e4 <__udivmoddi4+0x1c>
    6642:	2200      	movs	r2, #0
    6644:	2300      	movs	r3, #0
    6646:	9200      	str	r2, [sp, #0]
    6648:	9301      	str	r3, [sp, #4]
    664a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    664c:	2b00      	cmp	r3, #0
    664e:	d001      	beq.n	6654 <__udivmoddi4+0x8c>
    6650:	601c      	str	r4, [r3, #0]
    6652:	605d      	str	r5, [r3, #4]
    6654:	9800      	ldr	r0, [sp, #0]
    6656:	9901      	ldr	r1, [sp, #4]
    6658:	b003      	add	sp, #12
    665a:	bc3c      	pop	{r2, r3, r4, r5}
    665c:	4690      	mov	r8, r2
    665e:	4699      	mov	r9, r3
    6660:	46a2      	mov	sl, r4
    6662:	46ab      	mov	fp, r5
    6664:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6666:	42a3      	cmp	r3, r4
    6668:	d9d6      	bls.n	6618 <__udivmoddi4+0x50>
    666a:	2200      	movs	r2, #0
    666c:	2300      	movs	r3, #0
    666e:	9200      	str	r2, [sp, #0]
    6670:	9301      	str	r3, [sp, #4]
    6672:	4643      	mov	r3, r8
    6674:	2b00      	cmp	r3, #0
    6676:	d0e8      	beq.n	664a <__udivmoddi4+0x82>
    6678:	07fb      	lsls	r3, r7, #31
    667a:	0872      	lsrs	r2, r6, #1
    667c:	431a      	orrs	r2, r3
    667e:	4646      	mov	r6, r8
    6680:	087b      	lsrs	r3, r7, #1
    6682:	e00e      	b.n	66a2 <__udivmoddi4+0xda>
    6684:	42ab      	cmp	r3, r5
    6686:	d101      	bne.n	668c <__udivmoddi4+0xc4>
    6688:	42a2      	cmp	r2, r4
    668a:	d80c      	bhi.n	66a6 <__udivmoddi4+0xde>
    668c:	1aa4      	subs	r4, r4, r2
    668e:	419d      	sbcs	r5, r3
    6690:	2001      	movs	r0, #1
    6692:	1924      	adds	r4, r4, r4
    6694:	416d      	adcs	r5, r5
    6696:	2100      	movs	r1, #0
    6698:	3e01      	subs	r6, #1
    669a:	1824      	adds	r4, r4, r0
    669c:	414d      	adcs	r5, r1
    669e:	2e00      	cmp	r6, #0
    66a0:	d006      	beq.n	66b0 <__udivmoddi4+0xe8>
    66a2:	42ab      	cmp	r3, r5
    66a4:	d9ee      	bls.n	6684 <__udivmoddi4+0xbc>
    66a6:	3e01      	subs	r6, #1
    66a8:	1924      	adds	r4, r4, r4
    66aa:	416d      	adcs	r5, r5
    66ac:	2e00      	cmp	r6, #0
    66ae:	d1f8      	bne.n	66a2 <__udivmoddi4+0xda>
    66b0:	465b      	mov	r3, fp
    66b2:	9800      	ldr	r0, [sp, #0]
    66b4:	9901      	ldr	r1, [sp, #4]
    66b6:	1900      	adds	r0, r0, r4
    66b8:	4169      	adcs	r1, r5
    66ba:	2b00      	cmp	r3, #0
    66bc:	db22      	blt.n	6704 <__udivmoddi4+0x13c>
    66be:	002b      	movs	r3, r5
    66c0:	465a      	mov	r2, fp
    66c2:	40d3      	lsrs	r3, r2
    66c4:	002a      	movs	r2, r5
    66c6:	4644      	mov	r4, r8
    66c8:	40e2      	lsrs	r2, r4
    66ca:	001c      	movs	r4, r3
    66cc:	465b      	mov	r3, fp
    66ce:	0015      	movs	r5, r2
    66d0:	2b00      	cmp	r3, #0
    66d2:	db2c      	blt.n	672e <__udivmoddi4+0x166>
    66d4:	0026      	movs	r6, r4
    66d6:	409e      	lsls	r6, r3
    66d8:	0033      	movs	r3, r6
    66da:	0026      	movs	r6, r4
    66dc:	4647      	mov	r7, r8
    66de:	40be      	lsls	r6, r7
    66e0:	0032      	movs	r2, r6
    66e2:	1a80      	subs	r0, r0, r2
    66e4:	4199      	sbcs	r1, r3
    66e6:	9000      	str	r0, [sp, #0]
    66e8:	9101      	str	r1, [sp, #4]
    66ea:	e7ae      	b.n	664a <__udivmoddi4+0x82>
    66ec:	4642      	mov	r2, r8
    66ee:	2320      	movs	r3, #32
    66f0:	1a9b      	subs	r3, r3, r2
    66f2:	4652      	mov	r2, sl
    66f4:	40da      	lsrs	r2, r3
    66f6:	4641      	mov	r1, r8
    66f8:	0013      	movs	r3, r2
    66fa:	464a      	mov	r2, r9
    66fc:	408a      	lsls	r2, r1
    66fe:	0017      	movs	r7, r2
    6700:	431f      	orrs	r7, r3
    6702:	e782      	b.n	660a <__udivmoddi4+0x42>
    6704:	4642      	mov	r2, r8
    6706:	2320      	movs	r3, #32
    6708:	1a9b      	subs	r3, r3, r2
    670a:	002a      	movs	r2, r5
    670c:	4646      	mov	r6, r8
    670e:	409a      	lsls	r2, r3
    6710:	0023      	movs	r3, r4
    6712:	40f3      	lsrs	r3, r6
    6714:	4313      	orrs	r3, r2
    6716:	e7d5      	b.n	66c4 <__udivmoddi4+0xfc>
    6718:	4642      	mov	r2, r8
    671a:	2320      	movs	r3, #32
    671c:	2100      	movs	r1, #0
    671e:	1a9b      	subs	r3, r3, r2
    6720:	2200      	movs	r2, #0
    6722:	9100      	str	r1, [sp, #0]
    6724:	9201      	str	r2, [sp, #4]
    6726:	2201      	movs	r2, #1
    6728:	40da      	lsrs	r2, r3
    672a:	9201      	str	r2, [sp, #4]
    672c:	e782      	b.n	6634 <__udivmoddi4+0x6c>
    672e:	4642      	mov	r2, r8
    6730:	2320      	movs	r3, #32
    6732:	0026      	movs	r6, r4
    6734:	1a9b      	subs	r3, r3, r2
    6736:	40de      	lsrs	r6, r3
    6738:	002f      	movs	r7, r5
    673a:	46b4      	mov	ip, r6
    673c:	4097      	lsls	r7, r2
    673e:	4666      	mov	r6, ip
    6740:	003b      	movs	r3, r7
    6742:	4333      	orrs	r3, r6
    6744:	e7c9      	b.n	66da <__udivmoddi4+0x112>
    6746:	46c0      	nop			; (mov r8, r8)

00006748 <__clzdi2>:
    6748:	b510      	push	{r4, lr}
    674a:	2900      	cmp	r1, #0
    674c:	d103      	bne.n	6756 <__clzdi2+0xe>
    674e:	f7ff feb3 	bl	64b8 <__clzsi2>
    6752:	3020      	adds	r0, #32
    6754:	e002      	b.n	675c <__clzdi2+0x14>
    6756:	1c08      	adds	r0, r1, #0
    6758:	f7ff feae 	bl	64b8 <__clzsi2>
    675c:	bd10      	pop	{r4, pc}
    675e:	46c0      	nop			; (mov r8, r8)

00006760 <__libc_init_array>:
    6760:	b570      	push	{r4, r5, r6, lr}
    6762:	2600      	movs	r6, #0
    6764:	4d0c      	ldr	r5, [pc, #48]	; (6798 <__libc_init_array+0x38>)
    6766:	4c0d      	ldr	r4, [pc, #52]	; (679c <__libc_init_array+0x3c>)
    6768:	1b64      	subs	r4, r4, r5
    676a:	10a4      	asrs	r4, r4, #2
    676c:	42a6      	cmp	r6, r4
    676e:	d109      	bne.n	6784 <__libc_init_array+0x24>
    6770:	2600      	movs	r6, #0
    6772:	f000 fd95 	bl	72a0 <_init>
    6776:	4d0a      	ldr	r5, [pc, #40]	; (67a0 <__libc_init_array+0x40>)
    6778:	4c0a      	ldr	r4, [pc, #40]	; (67a4 <__libc_init_array+0x44>)
    677a:	1b64      	subs	r4, r4, r5
    677c:	10a4      	asrs	r4, r4, #2
    677e:	42a6      	cmp	r6, r4
    6780:	d105      	bne.n	678e <__libc_init_array+0x2e>
    6782:	bd70      	pop	{r4, r5, r6, pc}
    6784:	00b3      	lsls	r3, r6, #2
    6786:	58eb      	ldr	r3, [r5, r3]
    6788:	4798      	blx	r3
    678a:	3601      	adds	r6, #1
    678c:	e7ee      	b.n	676c <__libc_init_array+0xc>
    678e:	00b3      	lsls	r3, r6, #2
    6790:	58eb      	ldr	r3, [r5, r3]
    6792:	4798      	blx	r3
    6794:	3601      	adds	r6, #1
    6796:	e7f2      	b.n	677e <__libc_init_array+0x1e>
    6798:	000072ac 	.word	0x000072ac
    679c:	000072ac 	.word	0x000072ac
    67a0:	000072ac 	.word	0x000072ac
    67a4:	000072b0 	.word	0x000072b0

000067a8 <memcpy>:
    67a8:	2300      	movs	r3, #0
    67aa:	b510      	push	{r4, lr}
    67ac:	429a      	cmp	r2, r3
    67ae:	d100      	bne.n	67b2 <memcpy+0xa>
    67b0:	bd10      	pop	{r4, pc}
    67b2:	5ccc      	ldrb	r4, [r1, r3]
    67b4:	54c4      	strb	r4, [r0, r3]
    67b6:	3301      	adds	r3, #1
    67b8:	e7f8      	b.n	67ac <memcpy+0x4>

000067ba <memset>:
    67ba:	0003      	movs	r3, r0
    67bc:	1882      	adds	r2, r0, r2
    67be:	4293      	cmp	r3, r2
    67c0:	d100      	bne.n	67c4 <memset+0xa>
    67c2:	4770      	bx	lr
    67c4:	7019      	strb	r1, [r3, #0]
    67c6:	3301      	adds	r3, #1
    67c8:	e7f9      	b.n	67be <memset+0x4>

000067ca <setbuf>:
    67ca:	424a      	negs	r2, r1
    67cc:	414a      	adcs	r2, r1
    67ce:	2380      	movs	r3, #128	; 0x80
    67d0:	b510      	push	{r4, lr}
    67d2:	0052      	lsls	r2, r2, #1
    67d4:	00db      	lsls	r3, r3, #3
    67d6:	f000 f801 	bl	67dc <setvbuf>
    67da:	bd10      	pop	{r4, pc}

000067dc <setvbuf>:
    67dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    67de:	001d      	movs	r5, r3
    67e0:	4b4f      	ldr	r3, [pc, #316]	; (6920 <setvbuf+0x144>)
    67e2:	b085      	sub	sp, #20
    67e4:	681e      	ldr	r6, [r3, #0]
    67e6:	0004      	movs	r4, r0
    67e8:	000f      	movs	r7, r1
    67ea:	9200      	str	r2, [sp, #0]
    67ec:	2e00      	cmp	r6, #0
    67ee:	d005      	beq.n	67fc <setvbuf+0x20>
    67f0:	69b3      	ldr	r3, [r6, #24]
    67f2:	2b00      	cmp	r3, #0
    67f4:	d102      	bne.n	67fc <setvbuf+0x20>
    67f6:	0030      	movs	r0, r6
    67f8:	f000 f994 	bl	6b24 <__sinit>
    67fc:	4b49      	ldr	r3, [pc, #292]	; (6924 <setvbuf+0x148>)
    67fe:	429c      	cmp	r4, r3
    6800:	d150      	bne.n	68a4 <setvbuf+0xc8>
    6802:	6874      	ldr	r4, [r6, #4]
    6804:	9b00      	ldr	r3, [sp, #0]
    6806:	2b02      	cmp	r3, #2
    6808:	d005      	beq.n	6816 <setvbuf+0x3a>
    680a:	2b01      	cmp	r3, #1
    680c:	d900      	bls.n	6810 <setvbuf+0x34>
    680e:	e084      	b.n	691a <setvbuf+0x13e>
    6810:	2d00      	cmp	r5, #0
    6812:	da00      	bge.n	6816 <setvbuf+0x3a>
    6814:	e081      	b.n	691a <setvbuf+0x13e>
    6816:	0021      	movs	r1, r4
    6818:	0030      	movs	r0, r6
    681a:	f000 f915 	bl	6a48 <_fflush_r>
    681e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6820:	2900      	cmp	r1, #0
    6822:	d008      	beq.n	6836 <setvbuf+0x5a>
    6824:	0023      	movs	r3, r4
    6826:	3344      	adds	r3, #68	; 0x44
    6828:	4299      	cmp	r1, r3
    682a:	d002      	beq.n	6832 <setvbuf+0x56>
    682c:	0030      	movs	r0, r6
    682e:	f000 fa41 	bl	6cb4 <_free_r>
    6832:	2300      	movs	r3, #0
    6834:	6363      	str	r3, [r4, #52]	; 0x34
    6836:	2300      	movs	r3, #0
    6838:	61a3      	str	r3, [r4, #24]
    683a:	6063      	str	r3, [r4, #4]
    683c:	89a3      	ldrh	r3, [r4, #12]
    683e:	061b      	lsls	r3, r3, #24
    6840:	d503      	bpl.n	684a <setvbuf+0x6e>
    6842:	6921      	ldr	r1, [r4, #16]
    6844:	0030      	movs	r0, r6
    6846:	f000 fa35 	bl	6cb4 <_free_r>
    684a:	89a3      	ldrh	r3, [r4, #12]
    684c:	4a36      	ldr	r2, [pc, #216]	; (6928 <setvbuf+0x14c>)
    684e:	4013      	ands	r3, r2
    6850:	81a3      	strh	r3, [r4, #12]
    6852:	9b00      	ldr	r3, [sp, #0]
    6854:	2b02      	cmp	r3, #2
    6856:	d05a      	beq.n	690e <setvbuf+0x132>
    6858:	ab03      	add	r3, sp, #12
    685a:	aa02      	add	r2, sp, #8
    685c:	0021      	movs	r1, r4
    685e:	0030      	movs	r0, r6
    6860:	f000 f9f6 	bl	6c50 <__swhatbuf_r>
    6864:	89a3      	ldrh	r3, [r4, #12]
    6866:	4318      	orrs	r0, r3
    6868:	81a0      	strh	r0, [r4, #12]
    686a:	2d00      	cmp	r5, #0
    686c:	d124      	bne.n	68b8 <setvbuf+0xdc>
    686e:	9d02      	ldr	r5, [sp, #8]
    6870:	0028      	movs	r0, r5
    6872:	f000 fa15 	bl	6ca0 <malloc>
    6876:	9501      	str	r5, [sp, #4]
    6878:	1e07      	subs	r7, r0, #0
    687a:	d142      	bne.n	6902 <setvbuf+0x126>
    687c:	9b02      	ldr	r3, [sp, #8]
    687e:	9301      	str	r3, [sp, #4]
    6880:	42ab      	cmp	r3, r5
    6882:	d139      	bne.n	68f8 <setvbuf+0x11c>
    6884:	2001      	movs	r0, #1
    6886:	4240      	negs	r0, r0
    6888:	2302      	movs	r3, #2
    688a:	89a2      	ldrh	r2, [r4, #12]
    688c:	4313      	orrs	r3, r2
    688e:	81a3      	strh	r3, [r4, #12]
    6890:	2300      	movs	r3, #0
    6892:	60a3      	str	r3, [r4, #8]
    6894:	0023      	movs	r3, r4
    6896:	3347      	adds	r3, #71	; 0x47
    6898:	6023      	str	r3, [r4, #0]
    689a:	6123      	str	r3, [r4, #16]
    689c:	2301      	movs	r3, #1
    689e:	6163      	str	r3, [r4, #20]
    68a0:	b005      	add	sp, #20
    68a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68a4:	4b21      	ldr	r3, [pc, #132]	; (692c <setvbuf+0x150>)
    68a6:	429c      	cmp	r4, r3
    68a8:	d101      	bne.n	68ae <setvbuf+0xd2>
    68aa:	68b4      	ldr	r4, [r6, #8]
    68ac:	e7aa      	b.n	6804 <setvbuf+0x28>
    68ae:	4b20      	ldr	r3, [pc, #128]	; (6930 <setvbuf+0x154>)
    68b0:	429c      	cmp	r4, r3
    68b2:	d1a7      	bne.n	6804 <setvbuf+0x28>
    68b4:	68f4      	ldr	r4, [r6, #12]
    68b6:	e7a5      	b.n	6804 <setvbuf+0x28>
    68b8:	2f00      	cmp	r7, #0
    68ba:	d0d9      	beq.n	6870 <setvbuf+0x94>
    68bc:	69b3      	ldr	r3, [r6, #24]
    68be:	2b00      	cmp	r3, #0
    68c0:	d102      	bne.n	68c8 <setvbuf+0xec>
    68c2:	0030      	movs	r0, r6
    68c4:	f000 f92e 	bl	6b24 <__sinit>
    68c8:	9b00      	ldr	r3, [sp, #0]
    68ca:	2b01      	cmp	r3, #1
    68cc:	d103      	bne.n	68d6 <setvbuf+0xfa>
    68ce:	89a3      	ldrh	r3, [r4, #12]
    68d0:	9a00      	ldr	r2, [sp, #0]
    68d2:	431a      	orrs	r2, r3
    68d4:	81a2      	strh	r2, [r4, #12]
    68d6:	2008      	movs	r0, #8
    68d8:	89a3      	ldrh	r3, [r4, #12]
    68da:	6027      	str	r7, [r4, #0]
    68dc:	6127      	str	r7, [r4, #16]
    68de:	6165      	str	r5, [r4, #20]
    68e0:	4018      	ands	r0, r3
    68e2:	d018      	beq.n	6916 <setvbuf+0x13a>
    68e4:	2001      	movs	r0, #1
    68e6:	4018      	ands	r0, r3
    68e8:	2300      	movs	r3, #0
    68ea:	4298      	cmp	r0, r3
    68ec:	d011      	beq.n	6912 <setvbuf+0x136>
    68ee:	426d      	negs	r5, r5
    68f0:	60a3      	str	r3, [r4, #8]
    68f2:	61a5      	str	r5, [r4, #24]
    68f4:	0018      	movs	r0, r3
    68f6:	e7d3      	b.n	68a0 <setvbuf+0xc4>
    68f8:	9801      	ldr	r0, [sp, #4]
    68fa:	f000 f9d1 	bl	6ca0 <malloc>
    68fe:	1e07      	subs	r7, r0, #0
    6900:	d0c0      	beq.n	6884 <setvbuf+0xa8>
    6902:	2380      	movs	r3, #128	; 0x80
    6904:	89a2      	ldrh	r2, [r4, #12]
    6906:	9d01      	ldr	r5, [sp, #4]
    6908:	4313      	orrs	r3, r2
    690a:	81a3      	strh	r3, [r4, #12]
    690c:	e7d6      	b.n	68bc <setvbuf+0xe0>
    690e:	2000      	movs	r0, #0
    6910:	e7ba      	b.n	6888 <setvbuf+0xac>
    6912:	60a5      	str	r5, [r4, #8]
    6914:	e7c4      	b.n	68a0 <setvbuf+0xc4>
    6916:	60a0      	str	r0, [r4, #8]
    6918:	e7c2      	b.n	68a0 <setvbuf+0xc4>
    691a:	2001      	movs	r0, #1
    691c:	4240      	negs	r0, r0
    691e:	e7bf      	b.n	68a0 <setvbuf+0xc4>
    6920:	200000fc 	.word	0x200000fc
    6924:	00007260 	.word	0x00007260
    6928:	fffff35c 	.word	0xfffff35c
    692c:	00007280 	.word	0x00007280
    6930:	00007240 	.word	0x00007240

00006934 <__sflush_r>:
    6934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6936:	898a      	ldrh	r2, [r1, #12]
    6938:	0005      	movs	r5, r0
    693a:	000c      	movs	r4, r1
    693c:	0713      	lsls	r3, r2, #28
    693e:	d460      	bmi.n	6a02 <__sflush_r+0xce>
    6940:	684b      	ldr	r3, [r1, #4]
    6942:	2b00      	cmp	r3, #0
    6944:	dc04      	bgt.n	6950 <__sflush_r+0x1c>
    6946:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6948:	2b00      	cmp	r3, #0
    694a:	dc01      	bgt.n	6950 <__sflush_r+0x1c>
    694c:	2000      	movs	r0, #0
    694e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6950:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6952:	2f00      	cmp	r7, #0
    6954:	d0fa      	beq.n	694c <__sflush_r+0x18>
    6956:	2300      	movs	r3, #0
    6958:	682e      	ldr	r6, [r5, #0]
    695a:	602b      	str	r3, [r5, #0]
    695c:	2380      	movs	r3, #128	; 0x80
    695e:	015b      	lsls	r3, r3, #5
    6960:	401a      	ands	r2, r3
    6962:	d034      	beq.n	69ce <__sflush_r+0x9a>
    6964:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6966:	89a3      	ldrh	r3, [r4, #12]
    6968:	075b      	lsls	r3, r3, #29
    696a:	d506      	bpl.n	697a <__sflush_r+0x46>
    696c:	6863      	ldr	r3, [r4, #4]
    696e:	1ac0      	subs	r0, r0, r3
    6970:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6972:	2b00      	cmp	r3, #0
    6974:	d001      	beq.n	697a <__sflush_r+0x46>
    6976:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6978:	1ac0      	subs	r0, r0, r3
    697a:	0002      	movs	r2, r0
    697c:	6a21      	ldr	r1, [r4, #32]
    697e:	2300      	movs	r3, #0
    6980:	0028      	movs	r0, r5
    6982:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6984:	47b8      	blx	r7
    6986:	89a1      	ldrh	r1, [r4, #12]
    6988:	1c43      	adds	r3, r0, #1
    698a:	d106      	bne.n	699a <__sflush_r+0x66>
    698c:	682b      	ldr	r3, [r5, #0]
    698e:	2b1d      	cmp	r3, #29
    6990:	d831      	bhi.n	69f6 <__sflush_r+0xc2>
    6992:	4a2c      	ldr	r2, [pc, #176]	; (6a44 <__sflush_r+0x110>)
    6994:	40da      	lsrs	r2, r3
    6996:	07d3      	lsls	r3, r2, #31
    6998:	d52d      	bpl.n	69f6 <__sflush_r+0xc2>
    699a:	2300      	movs	r3, #0
    699c:	6063      	str	r3, [r4, #4]
    699e:	6923      	ldr	r3, [r4, #16]
    69a0:	6023      	str	r3, [r4, #0]
    69a2:	04cb      	lsls	r3, r1, #19
    69a4:	d505      	bpl.n	69b2 <__sflush_r+0x7e>
    69a6:	1c43      	adds	r3, r0, #1
    69a8:	d102      	bne.n	69b0 <__sflush_r+0x7c>
    69aa:	682b      	ldr	r3, [r5, #0]
    69ac:	2b00      	cmp	r3, #0
    69ae:	d100      	bne.n	69b2 <__sflush_r+0x7e>
    69b0:	6560      	str	r0, [r4, #84]	; 0x54
    69b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    69b4:	602e      	str	r6, [r5, #0]
    69b6:	2900      	cmp	r1, #0
    69b8:	d0c8      	beq.n	694c <__sflush_r+0x18>
    69ba:	0023      	movs	r3, r4
    69bc:	3344      	adds	r3, #68	; 0x44
    69be:	4299      	cmp	r1, r3
    69c0:	d002      	beq.n	69c8 <__sflush_r+0x94>
    69c2:	0028      	movs	r0, r5
    69c4:	f000 f976 	bl	6cb4 <_free_r>
    69c8:	2000      	movs	r0, #0
    69ca:	6360      	str	r0, [r4, #52]	; 0x34
    69cc:	e7bf      	b.n	694e <__sflush_r+0x1a>
    69ce:	2301      	movs	r3, #1
    69d0:	6a21      	ldr	r1, [r4, #32]
    69d2:	0028      	movs	r0, r5
    69d4:	47b8      	blx	r7
    69d6:	1c43      	adds	r3, r0, #1
    69d8:	d1c5      	bne.n	6966 <__sflush_r+0x32>
    69da:	682b      	ldr	r3, [r5, #0]
    69dc:	2b00      	cmp	r3, #0
    69de:	d0c2      	beq.n	6966 <__sflush_r+0x32>
    69e0:	2b1d      	cmp	r3, #29
    69e2:	d001      	beq.n	69e8 <__sflush_r+0xb4>
    69e4:	2b16      	cmp	r3, #22
    69e6:	d101      	bne.n	69ec <__sflush_r+0xb8>
    69e8:	602e      	str	r6, [r5, #0]
    69ea:	e7af      	b.n	694c <__sflush_r+0x18>
    69ec:	2340      	movs	r3, #64	; 0x40
    69ee:	89a2      	ldrh	r2, [r4, #12]
    69f0:	4313      	orrs	r3, r2
    69f2:	81a3      	strh	r3, [r4, #12]
    69f4:	e7ab      	b.n	694e <__sflush_r+0x1a>
    69f6:	2340      	movs	r3, #64	; 0x40
    69f8:	430b      	orrs	r3, r1
    69fa:	2001      	movs	r0, #1
    69fc:	81a3      	strh	r3, [r4, #12]
    69fe:	4240      	negs	r0, r0
    6a00:	e7a5      	b.n	694e <__sflush_r+0x1a>
    6a02:	690f      	ldr	r7, [r1, #16]
    6a04:	2f00      	cmp	r7, #0
    6a06:	d0a1      	beq.n	694c <__sflush_r+0x18>
    6a08:	680b      	ldr	r3, [r1, #0]
    6a0a:	600f      	str	r7, [r1, #0]
    6a0c:	1bdb      	subs	r3, r3, r7
    6a0e:	9301      	str	r3, [sp, #4]
    6a10:	2300      	movs	r3, #0
    6a12:	0792      	lsls	r2, r2, #30
    6a14:	d100      	bne.n	6a18 <__sflush_r+0xe4>
    6a16:	694b      	ldr	r3, [r1, #20]
    6a18:	60a3      	str	r3, [r4, #8]
    6a1a:	9b01      	ldr	r3, [sp, #4]
    6a1c:	2b00      	cmp	r3, #0
    6a1e:	dc00      	bgt.n	6a22 <__sflush_r+0xee>
    6a20:	e794      	b.n	694c <__sflush_r+0x18>
    6a22:	9b01      	ldr	r3, [sp, #4]
    6a24:	003a      	movs	r2, r7
    6a26:	6a21      	ldr	r1, [r4, #32]
    6a28:	0028      	movs	r0, r5
    6a2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6a2c:	47b0      	blx	r6
    6a2e:	2800      	cmp	r0, #0
    6a30:	dc03      	bgt.n	6a3a <__sflush_r+0x106>
    6a32:	2340      	movs	r3, #64	; 0x40
    6a34:	89a2      	ldrh	r2, [r4, #12]
    6a36:	4313      	orrs	r3, r2
    6a38:	e7df      	b.n	69fa <__sflush_r+0xc6>
    6a3a:	9b01      	ldr	r3, [sp, #4]
    6a3c:	183f      	adds	r7, r7, r0
    6a3e:	1a1b      	subs	r3, r3, r0
    6a40:	9301      	str	r3, [sp, #4]
    6a42:	e7ea      	b.n	6a1a <__sflush_r+0xe6>
    6a44:	20400001 	.word	0x20400001

00006a48 <_fflush_r>:
    6a48:	690b      	ldr	r3, [r1, #16]
    6a4a:	b570      	push	{r4, r5, r6, lr}
    6a4c:	0005      	movs	r5, r0
    6a4e:	000c      	movs	r4, r1
    6a50:	2b00      	cmp	r3, #0
    6a52:	d101      	bne.n	6a58 <_fflush_r+0x10>
    6a54:	2000      	movs	r0, #0
    6a56:	bd70      	pop	{r4, r5, r6, pc}
    6a58:	2800      	cmp	r0, #0
    6a5a:	d004      	beq.n	6a66 <_fflush_r+0x1e>
    6a5c:	6983      	ldr	r3, [r0, #24]
    6a5e:	2b00      	cmp	r3, #0
    6a60:	d101      	bne.n	6a66 <_fflush_r+0x1e>
    6a62:	f000 f85f 	bl	6b24 <__sinit>
    6a66:	4b0b      	ldr	r3, [pc, #44]	; (6a94 <_fflush_r+0x4c>)
    6a68:	429c      	cmp	r4, r3
    6a6a:	d109      	bne.n	6a80 <_fflush_r+0x38>
    6a6c:	686c      	ldr	r4, [r5, #4]
    6a6e:	220c      	movs	r2, #12
    6a70:	5ea3      	ldrsh	r3, [r4, r2]
    6a72:	2b00      	cmp	r3, #0
    6a74:	d0ee      	beq.n	6a54 <_fflush_r+0xc>
    6a76:	0021      	movs	r1, r4
    6a78:	0028      	movs	r0, r5
    6a7a:	f7ff ff5b 	bl	6934 <__sflush_r>
    6a7e:	e7ea      	b.n	6a56 <_fflush_r+0xe>
    6a80:	4b05      	ldr	r3, [pc, #20]	; (6a98 <_fflush_r+0x50>)
    6a82:	429c      	cmp	r4, r3
    6a84:	d101      	bne.n	6a8a <_fflush_r+0x42>
    6a86:	68ac      	ldr	r4, [r5, #8]
    6a88:	e7f1      	b.n	6a6e <_fflush_r+0x26>
    6a8a:	4b04      	ldr	r3, [pc, #16]	; (6a9c <_fflush_r+0x54>)
    6a8c:	429c      	cmp	r4, r3
    6a8e:	d1ee      	bne.n	6a6e <_fflush_r+0x26>
    6a90:	68ec      	ldr	r4, [r5, #12]
    6a92:	e7ec      	b.n	6a6e <_fflush_r+0x26>
    6a94:	00007260 	.word	0x00007260
    6a98:	00007280 	.word	0x00007280
    6a9c:	00007240 	.word	0x00007240

00006aa0 <_cleanup_r>:
    6aa0:	b510      	push	{r4, lr}
    6aa2:	4902      	ldr	r1, [pc, #8]	; (6aac <_cleanup_r+0xc>)
    6aa4:	f000 f8b2 	bl	6c0c <_fwalk_reent>
    6aa8:	bd10      	pop	{r4, pc}
    6aaa:	46c0      	nop			; (mov r8, r8)
    6aac:	00006a49 	.word	0x00006a49

00006ab0 <std.isra.0>:
    6ab0:	2300      	movs	r3, #0
    6ab2:	b510      	push	{r4, lr}
    6ab4:	0004      	movs	r4, r0
    6ab6:	6003      	str	r3, [r0, #0]
    6ab8:	6043      	str	r3, [r0, #4]
    6aba:	6083      	str	r3, [r0, #8]
    6abc:	8181      	strh	r1, [r0, #12]
    6abe:	6643      	str	r3, [r0, #100]	; 0x64
    6ac0:	81c2      	strh	r2, [r0, #14]
    6ac2:	6103      	str	r3, [r0, #16]
    6ac4:	6143      	str	r3, [r0, #20]
    6ac6:	6183      	str	r3, [r0, #24]
    6ac8:	0019      	movs	r1, r3
    6aca:	2208      	movs	r2, #8
    6acc:	305c      	adds	r0, #92	; 0x5c
    6ace:	f7ff fe74 	bl	67ba <memset>
    6ad2:	4b05      	ldr	r3, [pc, #20]	; (6ae8 <std.isra.0+0x38>)
    6ad4:	6224      	str	r4, [r4, #32]
    6ad6:	6263      	str	r3, [r4, #36]	; 0x24
    6ad8:	4b04      	ldr	r3, [pc, #16]	; (6aec <std.isra.0+0x3c>)
    6ada:	62a3      	str	r3, [r4, #40]	; 0x28
    6adc:	4b04      	ldr	r3, [pc, #16]	; (6af0 <std.isra.0+0x40>)
    6ade:	62e3      	str	r3, [r4, #44]	; 0x2c
    6ae0:	4b04      	ldr	r3, [pc, #16]	; (6af4 <std.isra.0+0x44>)
    6ae2:	6323      	str	r3, [r4, #48]	; 0x30
    6ae4:	bd10      	pop	{r4, pc}
    6ae6:	46c0      	nop			; (mov r8, r8)
    6ae8:	00006e29 	.word	0x00006e29
    6aec:	00006e51 	.word	0x00006e51
    6af0:	00006e89 	.word	0x00006e89
    6af4:	00006eb5 	.word	0x00006eb5

00006af8 <__sfmoreglue>:
    6af8:	b570      	push	{r4, r5, r6, lr}
    6afa:	2568      	movs	r5, #104	; 0x68
    6afc:	1e4a      	subs	r2, r1, #1
    6afe:	4355      	muls	r5, r2
    6b00:	000e      	movs	r6, r1
    6b02:	0029      	movs	r1, r5
    6b04:	3174      	adds	r1, #116	; 0x74
    6b06:	f000 f91f 	bl	6d48 <_malloc_r>
    6b0a:	1e04      	subs	r4, r0, #0
    6b0c:	d008      	beq.n	6b20 <__sfmoreglue+0x28>
    6b0e:	2100      	movs	r1, #0
    6b10:	002a      	movs	r2, r5
    6b12:	6001      	str	r1, [r0, #0]
    6b14:	6046      	str	r6, [r0, #4]
    6b16:	300c      	adds	r0, #12
    6b18:	60a0      	str	r0, [r4, #8]
    6b1a:	3268      	adds	r2, #104	; 0x68
    6b1c:	f7ff fe4d 	bl	67ba <memset>
    6b20:	0020      	movs	r0, r4
    6b22:	bd70      	pop	{r4, r5, r6, pc}

00006b24 <__sinit>:
    6b24:	6983      	ldr	r3, [r0, #24]
    6b26:	b513      	push	{r0, r1, r4, lr}
    6b28:	0004      	movs	r4, r0
    6b2a:	2b00      	cmp	r3, #0
    6b2c:	d128      	bne.n	6b80 <__sinit+0x5c>
    6b2e:	6483      	str	r3, [r0, #72]	; 0x48
    6b30:	64c3      	str	r3, [r0, #76]	; 0x4c
    6b32:	6503      	str	r3, [r0, #80]	; 0x50
    6b34:	4b13      	ldr	r3, [pc, #76]	; (6b84 <__sinit+0x60>)
    6b36:	4a14      	ldr	r2, [pc, #80]	; (6b88 <__sinit+0x64>)
    6b38:	681b      	ldr	r3, [r3, #0]
    6b3a:	6282      	str	r2, [r0, #40]	; 0x28
    6b3c:	9301      	str	r3, [sp, #4]
    6b3e:	4298      	cmp	r0, r3
    6b40:	d101      	bne.n	6b46 <__sinit+0x22>
    6b42:	2301      	movs	r3, #1
    6b44:	6183      	str	r3, [r0, #24]
    6b46:	0020      	movs	r0, r4
    6b48:	f000 f820 	bl	6b8c <__sfp>
    6b4c:	6060      	str	r0, [r4, #4]
    6b4e:	0020      	movs	r0, r4
    6b50:	f000 f81c 	bl	6b8c <__sfp>
    6b54:	60a0      	str	r0, [r4, #8]
    6b56:	0020      	movs	r0, r4
    6b58:	f000 f818 	bl	6b8c <__sfp>
    6b5c:	2200      	movs	r2, #0
    6b5e:	60e0      	str	r0, [r4, #12]
    6b60:	2104      	movs	r1, #4
    6b62:	6860      	ldr	r0, [r4, #4]
    6b64:	f7ff ffa4 	bl	6ab0 <std.isra.0>
    6b68:	2201      	movs	r2, #1
    6b6a:	2109      	movs	r1, #9
    6b6c:	68a0      	ldr	r0, [r4, #8]
    6b6e:	f7ff ff9f 	bl	6ab0 <std.isra.0>
    6b72:	2202      	movs	r2, #2
    6b74:	2112      	movs	r1, #18
    6b76:	68e0      	ldr	r0, [r4, #12]
    6b78:	f7ff ff9a 	bl	6ab0 <std.isra.0>
    6b7c:	2301      	movs	r3, #1
    6b7e:	61a3      	str	r3, [r4, #24]
    6b80:	bd13      	pop	{r0, r1, r4, pc}
    6b82:	46c0      	nop			; (mov r8, r8)
    6b84:	0000723c 	.word	0x0000723c
    6b88:	00006aa1 	.word	0x00006aa1

00006b8c <__sfp>:
    6b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b8e:	4b1e      	ldr	r3, [pc, #120]	; (6c08 <__sfp+0x7c>)
    6b90:	0007      	movs	r7, r0
    6b92:	681e      	ldr	r6, [r3, #0]
    6b94:	69b3      	ldr	r3, [r6, #24]
    6b96:	2b00      	cmp	r3, #0
    6b98:	d102      	bne.n	6ba0 <__sfp+0x14>
    6b9a:	0030      	movs	r0, r6
    6b9c:	f7ff ffc2 	bl	6b24 <__sinit>
    6ba0:	3648      	adds	r6, #72	; 0x48
    6ba2:	68b4      	ldr	r4, [r6, #8]
    6ba4:	6873      	ldr	r3, [r6, #4]
    6ba6:	3b01      	subs	r3, #1
    6ba8:	d504      	bpl.n	6bb4 <__sfp+0x28>
    6baa:	6833      	ldr	r3, [r6, #0]
    6bac:	2b00      	cmp	r3, #0
    6bae:	d007      	beq.n	6bc0 <__sfp+0x34>
    6bb0:	6836      	ldr	r6, [r6, #0]
    6bb2:	e7f6      	b.n	6ba2 <__sfp+0x16>
    6bb4:	220c      	movs	r2, #12
    6bb6:	5ea5      	ldrsh	r5, [r4, r2]
    6bb8:	2d00      	cmp	r5, #0
    6bba:	d00d      	beq.n	6bd8 <__sfp+0x4c>
    6bbc:	3468      	adds	r4, #104	; 0x68
    6bbe:	e7f2      	b.n	6ba6 <__sfp+0x1a>
    6bc0:	2104      	movs	r1, #4
    6bc2:	0038      	movs	r0, r7
    6bc4:	f7ff ff98 	bl	6af8 <__sfmoreglue>
    6bc8:	6030      	str	r0, [r6, #0]
    6bca:	2800      	cmp	r0, #0
    6bcc:	d1f0      	bne.n	6bb0 <__sfp+0x24>
    6bce:	230c      	movs	r3, #12
    6bd0:	0004      	movs	r4, r0
    6bd2:	603b      	str	r3, [r7, #0]
    6bd4:	0020      	movs	r0, r4
    6bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bd8:	2301      	movs	r3, #1
    6bda:	0020      	movs	r0, r4
    6bdc:	425b      	negs	r3, r3
    6bde:	81e3      	strh	r3, [r4, #14]
    6be0:	3302      	adds	r3, #2
    6be2:	81a3      	strh	r3, [r4, #12]
    6be4:	6665      	str	r5, [r4, #100]	; 0x64
    6be6:	6025      	str	r5, [r4, #0]
    6be8:	60a5      	str	r5, [r4, #8]
    6bea:	6065      	str	r5, [r4, #4]
    6bec:	6125      	str	r5, [r4, #16]
    6bee:	6165      	str	r5, [r4, #20]
    6bf0:	61a5      	str	r5, [r4, #24]
    6bf2:	2208      	movs	r2, #8
    6bf4:	0029      	movs	r1, r5
    6bf6:	305c      	adds	r0, #92	; 0x5c
    6bf8:	f7ff fddf 	bl	67ba <memset>
    6bfc:	6365      	str	r5, [r4, #52]	; 0x34
    6bfe:	63a5      	str	r5, [r4, #56]	; 0x38
    6c00:	64a5      	str	r5, [r4, #72]	; 0x48
    6c02:	64e5      	str	r5, [r4, #76]	; 0x4c
    6c04:	e7e6      	b.n	6bd4 <__sfp+0x48>
    6c06:	46c0      	nop			; (mov r8, r8)
    6c08:	0000723c 	.word	0x0000723c

00006c0c <_fwalk_reent>:
    6c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6c0e:	0004      	movs	r4, r0
    6c10:	0007      	movs	r7, r0
    6c12:	2600      	movs	r6, #0
    6c14:	9101      	str	r1, [sp, #4]
    6c16:	3448      	adds	r4, #72	; 0x48
    6c18:	2c00      	cmp	r4, #0
    6c1a:	d101      	bne.n	6c20 <_fwalk_reent+0x14>
    6c1c:	0030      	movs	r0, r6
    6c1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6c20:	6863      	ldr	r3, [r4, #4]
    6c22:	68a5      	ldr	r5, [r4, #8]
    6c24:	9300      	str	r3, [sp, #0]
    6c26:	9b00      	ldr	r3, [sp, #0]
    6c28:	3b01      	subs	r3, #1
    6c2a:	9300      	str	r3, [sp, #0]
    6c2c:	d501      	bpl.n	6c32 <_fwalk_reent+0x26>
    6c2e:	6824      	ldr	r4, [r4, #0]
    6c30:	e7f2      	b.n	6c18 <_fwalk_reent+0xc>
    6c32:	89ab      	ldrh	r3, [r5, #12]
    6c34:	2b01      	cmp	r3, #1
    6c36:	d908      	bls.n	6c4a <_fwalk_reent+0x3e>
    6c38:	220e      	movs	r2, #14
    6c3a:	5eab      	ldrsh	r3, [r5, r2]
    6c3c:	3301      	adds	r3, #1
    6c3e:	d004      	beq.n	6c4a <_fwalk_reent+0x3e>
    6c40:	0029      	movs	r1, r5
    6c42:	0038      	movs	r0, r7
    6c44:	9b01      	ldr	r3, [sp, #4]
    6c46:	4798      	blx	r3
    6c48:	4306      	orrs	r6, r0
    6c4a:	3568      	adds	r5, #104	; 0x68
    6c4c:	e7eb      	b.n	6c26 <_fwalk_reent+0x1a>
	...

00006c50 <__swhatbuf_r>:
    6c50:	b570      	push	{r4, r5, r6, lr}
    6c52:	000e      	movs	r6, r1
    6c54:	001d      	movs	r5, r3
    6c56:	230e      	movs	r3, #14
    6c58:	5ec9      	ldrsh	r1, [r1, r3]
    6c5a:	b090      	sub	sp, #64	; 0x40
    6c5c:	0014      	movs	r4, r2
    6c5e:	2900      	cmp	r1, #0
    6c60:	da07      	bge.n	6c72 <__swhatbuf_r+0x22>
    6c62:	2300      	movs	r3, #0
    6c64:	602b      	str	r3, [r5, #0]
    6c66:	89b3      	ldrh	r3, [r6, #12]
    6c68:	061b      	lsls	r3, r3, #24
    6c6a:	d411      	bmi.n	6c90 <__swhatbuf_r+0x40>
    6c6c:	2380      	movs	r3, #128	; 0x80
    6c6e:	00db      	lsls	r3, r3, #3
    6c70:	e00f      	b.n	6c92 <__swhatbuf_r+0x42>
    6c72:	aa01      	add	r2, sp, #4
    6c74:	f000 f94a 	bl	6f0c <_fstat_r>
    6c78:	2800      	cmp	r0, #0
    6c7a:	dbf2      	blt.n	6c62 <__swhatbuf_r+0x12>
    6c7c:	22f0      	movs	r2, #240	; 0xf0
    6c7e:	9b02      	ldr	r3, [sp, #8]
    6c80:	0212      	lsls	r2, r2, #8
    6c82:	4013      	ands	r3, r2
    6c84:	4a05      	ldr	r2, [pc, #20]	; (6c9c <__swhatbuf_r+0x4c>)
    6c86:	189b      	adds	r3, r3, r2
    6c88:	425a      	negs	r2, r3
    6c8a:	4153      	adcs	r3, r2
    6c8c:	602b      	str	r3, [r5, #0]
    6c8e:	e7ed      	b.n	6c6c <__swhatbuf_r+0x1c>
    6c90:	2340      	movs	r3, #64	; 0x40
    6c92:	2000      	movs	r0, #0
    6c94:	6023      	str	r3, [r4, #0]
    6c96:	b010      	add	sp, #64	; 0x40
    6c98:	bd70      	pop	{r4, r5, r6, pc}
    6c9a:	46c0      	nop			; (mov r8, r8)
    6c9c:	ffffe000 	.word	0xffffe000

00006ca0 <malloc>:
    6ca0:	b510      	push	{r4, lr}
    6ca2:	4b03      	ldr	r3, [pc, #12]	; (6cb0 <malloc+0x10>)
    6ca4:	0001      	movs	r1, r0
    6ca6:	6818      	ldr	r0, [r3, #0]
    6ca8:	f000 f84e 	bl	6d48 <_malloc_r>
    6cac:	bd10      	pop	{r4, pc}
    6cae:	46c0      	nop			; (mov r8, r8)
    6cb0:	200000fc 	.word	0x200000fc

00006cb4 <_free_r>:
    6cb4:	b570      	push	{r4, r5, r6, lr}
    6cb6:	0005      	movs	r5, r0
    6cb8:	2900      	cmp	r1, #0
    6cba:	d010      	beq.n	6cde <_free_r+0x2a>
    6cbc:	1f0c      	subs	r4, r1, #4
    6cbe:	6823      	ldr	r3, [r4, #0]
    6cc0:	2b00      	cmp	r3, #0
    6cc2:	da00      	bge.n	6cc6 <_free_r+0x12>
    6cc4:	18e4      	adds	r4, r4, r3
    6cc6:	0028      	movs	r0, r5
    6cc8:	f000 f946 	bl	6f58 <__malloc_lock>
    6ccc:	4a1d      	ldr	r2, [pc, #116]	; (6d44 <_free_r+0x90>)
    6cce:	6813      	ldr	r3, [r2, #0]
    6cd0:	2b00      	cmp	r3, #0
    6cd2:	d105      	bne.n	6ce0 <_free_r+0x2c>
    6cd4:	6063      	str	r3, [r4, #4]
    6cd6:	6014      	str	r4, [r2, #0]
    6cd8:	0028      	movs	r0, r5
    6cda:	f000 f93e 	bl	6f5a <__malloc_unlock>
    6cde:	bd70      	pop	{r4, r5, r6, pc}
    6ce0:	42a3      	cmp	r3, r4
    6ce2:	d909      	bls.n	6cf8 <_free_r+0x44>
    6ce4:	6821      	ldr	r1, [r4, #0]
    6ce6:	1860      	adds	r0, r4, r1
    6ce8:	4283      	cmp	r3, r0
    6cea:	d1f3      	bne.n	6cd4 <_free_r+0x20>
    6cec:	6818      	ldr	r0, [r3, #0]
    6cee:	685b      	ldr	r3, [r3, #4]
    6cf0:	1841      	adds	r1, r0, r1
    6cf2:	6021      	str	r1, [r4, #0]
    6cf4:	e7ee      	b.n	6cd4 <_free_r+0x20>
    6cf6:	0013      	movs	r3, r2
    6cf8:	685a      	ldr	r2, [r3, #4]
    6cfa:	2a00      	cmp	r2, #0
    6cfc:	d001      	beq.n	6d02 <_free_r+0x4e>
    6cfe:	42a2      	cmp	r2, r4
    6d00:	d9f9      	bls.n	6cf6 <_free_r+0x42>
    6d02:	6819      	ldr	r1, [r3, #0]
    6d04:	1858      	adds	r0, r3, r1
    6d06:	42a0      	cmp	r0, r4
    6d08:	d10b      	bne.n	6d22 <_free_r+0x6e>
    6d0a:	6820      	ldr	r0, [r4, #0]
    6d0c:	1809      	adds	r1, r1, r0
    6d0e:	1858      	adds	r0, r3, r1
    6d10:	6019      	str	r1, [r3, #0]
    6d12:	4282      	cmp	r2, r0
    6d14:	d1e0      	bne.n	6cd8 <_free_r+0x24>
    6d16:	6810      	ldr	r0, [r2, #0]
    6d18:	6852      	ldr	r2, [r2, #4]
    6d1a:	1841      	adds	r1, r0, r1
    6d1c:	6019      	str	r1, [r3, #0]
    6d1e:	605a      	str	r2, [r3, #4]
    6d20:	e7da      	b.n	6cd8 <_free_r+0x24>
    6d22:	42a0      	cmp	r0, r4
    6d24:	d902      	bls.n	6d2c <_free_r+0x78>
    6d26:	230c      	movs	r3, #12
    6d28:	602b      	str	r3, [r5, #0]
    6d2a:	e7d5      	b.n	6cd8 <_free_r+0x24>
    6d2c:	6821      	ldr	r1, [r4, #0]
    6d2e:	1860      	adds	r0, r4, r1
    6d30:	4282      	cmp	r2, r0
    6d32:	d103      	bne.n	6d3c <_free_r+0x88>
    6d34:	6810      	ldr	r0, [r2, #0]
    6d36:	6852      	ldr	r2, [r2, #4]
    6d38:	1841      	adds	r1, r0, r1
    6d3a:	6021      	str	r1, [r4, #0]
    6d3c:	6062      	str	r2, [r4, #4]
    6d3e:	605c      	str	r4, [r3, #4]
    6d40:	e7ca      	b.n	6cd8 <_free_r+0x24>
    6d42:	46c0      	nop			; (mov r8, r8)
    6d44:	200002e0 	.word	0x200002e0

00006d48 <_malloc_r>:
    6d48:	2303      	movs	r3, #3
    6d4a:	b570      	push	{r4, r5, r6, lr}
    6d4c:	1ccd      	adds	r5, r1, #3
    6d4e:	439d      	bics	r5, r3
    6d50:	3508      	adds	r5, #8
    6d52:	0006      	movs	r6, r0
    6d54:	2d0c      	cmp	r5, #12
    6d56:	d21e      	bcs.n	6d96 <_malloc_r+0x4e>
    6d58:	250c      	movs	r5, #12
    6d5a:	42a9      	cmp	r1, r5
    6d5c:	d81d      	bhi.n	6d9a <_malloc_r+0x52>
    6d5e:	0030      	movs	r0, r6
    6d60:	f000 f8fa 	bl	6f58 <__malloc_lock>
    6d64:	4a25      	ldr	r2, [pc, #148]	; (6dfc <_malloc_r+0xb4>)
    6d66:	6814      	ldr	r4, [r2, #0]
    6d68:	0021      	movs	r1, r4
    6d6a:	2900      	cmp	r1, #0
    6d6c:	d119      	bne.n	6da2 <_malloc_r+0x5a>
    6d6e:	4c24      	ldr	r4, [pc, #144]	; (6e00 <_malloc_r+0xb8>)
    6d70:	6823      	ldr	r3, [r4, #0]
    6d72:	2b00      	cmp	r3, #0
    6d74:	d103      	bne.n	6d7e <_malloc_r+0x36>
    6d76:	0030      	movs	r0, r6
    6d78:	f000 f844 	bl	6e04 <_sbrk_r>
    6d7c:	6020      	str	r0, [r4, #0]
    6d7e:	0029      	movs	r1, r5
    6d80:	0030      	movs	r0, r6
    6d82:	f000 f83f 	bl	6e04 <_sbrk_r>
    6d86:	1c43      	adds	r3, r0, #1
    6d88:	d12c      	bne.n	6de4 <_malloc_r+0x9c>
    6d8a:	230c      	movs	r3, #12
    6d8c:	0030      	movs	r0, r6
    6d8e:	6033      	str	r3, [r6, #0]
    6d90:	f000 f8e3 	bl	6f5a <__malloc_unlock>
    6d94:	e003      	b.n	6d9e <_malloc_r+0x56>
    6d96:	2d00      	cmp	r5, #0
    6d98:	dadf      	bge.n	6d5a <_malloc_r+0x12>
    6d9a:	230c      	movs	r3, #12
    6d9c:	6033      	str	r3, [r6, #0]
    6d9e:	2000      	movs	r0, #0
    6da0:	bd70      	pop	{r4, r5, r6, pc}
    6da2:	680b      	ldr	r3, [r1, #0]
    6da4:	1b5b      	subs	r3, r3, r5
    6da6:	d41a      	bmi.n	6dde <_malloc_r+0x96>
    6da8:	2b0b      	cmp	r3, #11
    6daa:	d903      	bls.n	6db4 <_malloc_r+0x6c>
    6dac:	600b      	str	r3, [r1, #0]
    6dae:	18cc      	adds	r4, r1, r3
    6db0:	6025      	str	r5, [r4, #0]
    6db2:	e003      	b.n	6dbc <_malloc_r+0x74>
    6db4:	428c      	cmp	r4, r1
    6db6:	d10e      	bne.n	6dd6 <_malloc_r+0x8e>
    6db8:	6863      	ldr	r3, [r4, #4]
    6dba:	6013      	str	r3, [r2, #0]
    6dbc:	0030      	movs	r0, r6
    6dbe:	f000 f8cc 	bl	6f5a <__malloc_unlock>
    6dc2:	0020      	movs	r0, r4
    6dc4:	2207      	movs	r2, #7
    6dc6:	300b      	adds	r0, #11
    6dc8:	1d23      	adds	r3, r4, #4
    6dca:	4390      	bics	r0, r2
    6dcc:	1ac3      	subs	r3, r0, r3
    6dce:	d0e7      	beq.n	6da0 <_malloc_r+0x58>
    6dd0:	425a      	negs	r2, r3
    6dd2:	50e2      	str	r2, [r4, r3]
    6dd4:	e7e4      	b.n	6da0 <_malloc_r+0x58>
    6dd6:	684b      	ldr	r3, [r1, #4]
    6dd8:	6063      	str	r3, [r4, #4]
    6dda:	000c      	movs	r4, r1
    6ddc:	e7ee      	b.n	6dbc <_malloc_r+0x74>
    6dde:	000c      	movs	r4, r1
    6de0:	6849      	ldr	r1, [r1, #4]
    6de2:	e7c2      	b.n	6d6a <_malloc_r+0x22>
    6de4:	2303      	movs	r3, #3
    6de6:	1cc4      	adds	r4, r0, #3
    6de8:	439c      	bics	r4, r3
    6dea:	42a0      	cmp	r0, r4
    6dec:	d0e0      	beq.n	6db0 <_malloc_r+0x68>
    6dee:	1a21      	subs	r1, r4, r0
    6df0:	0030      	movs	r0, r6
    6df2:	f000 f807 	bl	6e04 <_sbrk_r>
    6df6:	1c43      	adds	r3, r0, #1
    6df8:	d1da      	bne.n	6db0 <_malloc_r+0x68>
    6dfa:	e7c6      	b.n	6d8a <_malloc_r+0x42>
    6dfc:	200002e0 	.word	0x200002e0
    6e00:	200002e4 	.word	0x200002e4

00006e04 <_sbrk_r>:
    6e04:	2300      	movs	r3, #0
    6e06:	b570      	push	{r4, r5, r6, lr}
    6e08:	4c06      	ldr	r4, [pc, #24]	; (6e24 <_sbrk_r+0x20>)
    6e0a:	0005      	movs	r5, r0
    6e0c:	0008      	movs	r0, r1
    6e0e:	6023      	str	r3, [r4, #0]
    6e10:	f7ff f9c0 	bl	6194 <_sbrk>
    6e14:	1c43      	adds	r3, r0, #1
    6e16:	d103      	bne.n	6e20 <_sbrk_r+0x1c>
    6e18:	6823      	ldr	r3, [r4, #0]
    6e1a:	2b00      	cmp	r3, #0
    6e1c:	d000      	beq.n	6e20 <_sbrk_r+0x1c>
    6e1e:	602b      	str	r3, [r5, #0]
    6e20:	bd70      	pop	{r4, r5, r6, pc}
    6e22:	46c0      	nop			; (mov r8, r8)
    6e24:	20000ae0 	.word	0x20000ae0

00006e28 <__sread>:
    6e28:	b570      	push	{r4, r5, r6, lr}
    6e2a:	000c      	movs	r4, r1
    6e2c:	250e      	movs	r5, #14
    6e2e:	5f49      	ldrsh	r1, [r1, r5]
    6e30:	f000 f894 	bl	6f5c <_read_r>
    6e34:	2800      	cmp	r0, #0
    6e36:	db03      	blt.n	6e40 <__sread+0x18>
    6e38:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6e3a:	181b      	adds	r3, r3, r0
    6e3c:	6563      	str	r3, [r4, #84]	; 0x54
    6e3e:	bd70      	pop	{r4, r5, r6, pc}
    6e40:	89a3      	ldrh	r3, [r4, #12]
    6e42:	4a02      	ldr	r2, [pc, #8]	; (6e4c <__sread+0x24>)
    6e44:	4013      	ands	r3, r2
    6e46:	81a3      	strh	r3, [r4, #12]
    6e48:	e7f9      	b.n	6e3e <__sread+0x16>
    6e4a:	46c0      	nop			; (mov r8, r8)
    6e4c:	ffffefff 	.word	0xffffefff

00006e50 <__swrite>:
    6e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e52:	001f      	movs	r7, r3
    6e54:	898b      	ldrh	r3, [r1, #12]
    6e56:	0005      	movs	r5, r0
    6e58:	000c      	movs	r4, r1
    6e5a:	0016      	movs	r6, r2
    6e5c:	05db      	lsls	r3, r3, #23
    6e5e:	d505      	bpl.n	6e6c <__swrite+0x1c>
    6e60:	230e      	movs	r3, #14
    6e62:	5ec9      	ldrsh	r1, [r1, r3]
    6e64:	2200      	movs	r2, #0
    6e66:	2302      	movs	r3, #2
    6e68:	f000 f862 	bl	6f30 <_lseek_r>
    6e6c:	89a3      	ldrh	r3, [r4, #12]
    6e6e:	4a05      	ldr	r2, [pc, #20]	; (6e84 <__swrite+0x34>)
    6e70:	0028      	movs	r0, r5
    6e72:	4013      	ands	r3, r2
    6e74:	81a3      	strh	r3, [r4, #12]
    6e76:	0032      	movs	r2, r6
    6e78:	230e      	movs	r3, #14
    6e7a:	5ee1      	ldrsh	r1, [r4, r3]
    6e7c:	003b      	movs	r3, r7
    6e7e:	f000 f81f 	bl	6ec0 <_write_r>
    6e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e84:	ffffefff 	.word	0xffffefff

00006e88 <__sseek>:
    6e88:	b570      	push	{r4, r5, r6, lr}
    6e8a:	000c      	movs	r4, r1
    6e8c:	250e      	movs	r5, #14
    6e8e:	5f49      	ldrsh	r1, [r1, r5]
    6e90:	f000 f84e 	bl	6f30 <_lseek_r>
    6e94:	89a3      	ldrh	r3, [r4, #12]
    6e96:	1c42      	adds	r2, r0, #1
    6e98:	d103      	bne.n	6ea2 <__sseek+0x1a>
    6e9a:	4a05      	ldr	r2, [pc, #20]	; (6eb0 <__sseek+0x28>)
    6e9c:	4013      	ands	r3, r2
    6e9e:	81a3      	strh	r3, [r4, #12]
    6ea0:	bd70      	pop	{r4, r5, r6, pc}
    6ea2:	2280      	movs	r2, #128	; 0x80
    6ea4:	0152      	lsls	r2, r2, #5
    6ea6:	4313      	orrs	r3, r2
    6ea8:	81a3      	strh	r3, [r4, #12]
    6eaa:	6560      	str	r0, [r4, #84]	; 0x54
    6eac:	e7f8      	b.n	6ea0 <__sseek+0x18>
    6eae:	46c0      	nop			; (mov r8, r8)
    6eb0:	ffffefff 	.word	0xffffefff

00006eb4 <__sclose>:
    6eb4:	b510      	push	{r4, lr}
    6eb6:	230e      	movs	r3, #14
    6eb8:	5ec9      	ldrsh	r1, [r1, r3]
    6eba:	f000 f815 	bl	6ee8 <_close_r>
    6ebe:	bd10      	pop	{r4, pc}

00006ec0 <_write_r>:
    6ec0:	b570      	push	{r4, r5, r6, lr}
    6ec2:	0005      	movs	r5, r0
    6ec4:	0008      	movs	r0, r1
    6ec6:	0011      	movs	r1, r2
    6ec8:	2200      	movs	r2, #0
    6eca:	4c06      	ldr	r4, [pc, #24]	; (6ee4 <_write_r+0x24>)
    6ecc:	6022      	str	r2, [r4, #0]
    6ece:	001a      	movs	r2, r3
    6ed0:	f7fc f9b6 	bl	3240 <_write>
    6ed4:	1c43      	adds	r3, r0, #1
    6ed6:	d103      	bne.n	6ee0 <_write_r+0x20>
    6ed8:	6823      	ldr	r3, [r4, #0]
    6eda:	2b00      	cmp	r3, #0
    6edc:	d000      	beq.n	6ee0 <_write_r+0x20>
    6ede:	602b      	str	r3, [r5, #0]
    6ee0:	bd70      	pop	{r4, r5, r6, pc}
    6ee2:	46c0      	nop			; (mov r8, r8)
    6ee4:	20000ae0 	.word	0x20000ae0

00006ee8 <_close_r>:
    6ee8:	2300      	movs	r3, #0
    6eea:	b570      	push	{r4, r5, r6, lr}
    6eec:	4c06      	ldr	r4, [pc, #24]	; (6f08 <_close_r+0x20>)
    6eee:	0005      	movs	r5, r0
    6ef0:	0008      	movs	r0, r1
    6ef2:	6023      	str	r3, [r4, #0]
    6ef4:	f7ff f960 	bl	61b8 <_close>
    6ef8:	1c43      	adds	r3, r0, #1
    6efa:	d103      	bne.n	6f04 <_close_r+0x1c>
    6efc:	6823      	ldr	r3, [r4, #0]
    6efe:	2b00      	cmp	r3, #0
    6f00:	d000      	beq.n	6f04 <_close_r+0x1c>
    6f02:	602b      	str	r3, [r5, #0]
    6f04:	bd70      	pop	{r4, r5, r6, pc}
    6f06:	46c0      	nop			; (mov r8, r8)
    6f08:	20000ae0 	.word	0x20000ae0

00006f0c <_fstat_r>:
    6f0c:	2300      	movs	r3, #0
    6f0e:	b570      	push	{r4, r5, r6, lr}
    6f10:	4c06      	ldr	r4, [pc, #24]	; (6f2c <_fstat_r+0x20>)
    6f12:	0005      	movs	r5, r0
    6f14:	0008      	movs	r0, r1
    6f16:	0011      	movs	r1, r2
    6f18:	6023      	str	r3, [r4, #0]
    6f1a:	f7ff f950 	bl	61be <_fstat>
    6f1e:	1c43      	adds	r3, r0, #1
    6f20:	d103      	bne.n	6f2a <_fstat_r+0x1e>
    6f22:	6823      	ldr	r3, [r4, #0]
    6f24:	2b00      	cmp	r3, #0
    6f26:	d000      	beq.n	6f2a <_fstat_r+0x1e>
    6f28:	602b      	str	r3, [r5, #0]
    6f2a:	bd70      	pop	{r4, r5, r6, pc}
    6f2c:	20000ae0 	.word	0x20000ae0

00006f30 <_lseek_r>:
    6f30:	b570      	push	{r4, r5, r6, lr}
    6f32:	0005      	movs	r5, r0
    6f34:	0008      	movs	r0, r1
    6f36:	0011      	movs	r1, r2
    6f38:	2200      	movs	r2, #0
    6f3a:	4c06      	ldr	r4, [pc, #24]	; (6f54 <_lseek_r+0x24>)
    6f3c:	6022      	str	r2, [r4, #0]
    6f3e:	001a      	movs	r2, r3
    6f40:	f7ff f942 	bl	61c8 <_lseek>
    6f44:	1c43      	adds	r3, r0, #1
    6f46:	d103      	bne.n	6f50 <_lseek_r+0x20>
    6f48:	6823      	ldr	r3, [r4, #0]
    6f4a:	2b00      	cmp	r3, #0
    6f4c:	d000      	beq.n	6f50 <_lseek_r+0x20>
    6f4e:	602b      	str	r3, [r5, #0]
    6f50:	bd70      	pop	{r4, r5, r6, pc}
    6f52:	46c0      	nop			; (mov r8, r8)
    6f54:	20000ae0 	.word	0x20000ae0

00006f58 <__malloc_lock>:
    6f58:	4770      	bx	lr

00006f5a <__malloc_unlock>:
    6f5a:	4770      	bx	lr

00006f5c <_read_r>:
    6f5c:	b570      	push	{r4, r5, r6, lr}
    6f5e:	0005      	movs	r5, r0
    6f60:	0008      	movs	r0, r1
    6f62:	0011      	movs	r1, r2
    6f64:	2200      	movs	r2, #0
    6f66:	4c06      	ldr	r4, [pc, #24]	; (6f80 <_read_r+0x24>)
    6f68:	6022      	str	r2, [r4, #0]
    6f6a:	001a      	movs	r2, r3
    6f6c:	f7fc f946 	bl	31fc <_read>
    6f70:	1c43      	adds	r3, r0, #1
    6f72:	d103      	bne.n	6f7c <_read_r+0x20>
    6f74:	6823      	ldr	r3, [r4, #0]
    6f76:	2b00      	cmp	r3, #0
    6f78:	d000      	beq.n	6f7c <_read_r+0x20>
    6f7a:	602b      	str	r3, [r5, #0]
    6f7c:	bd70      	pop	{r4, r5, r6, pc}
    6f7e:	46c0      	nop			; (mov r8, r8)
    6f80:	20000ae0 	.word	0x20000ae0

00006f84 <mmc_trans_multipliers>:
    6f84:	00000000 0000000a 0000000c 0000000d     ................
    6f94:	0000000f 00000014 0000001a 0000001e     ................
    6fa4:	00000023 00000028 0000002d 00000034     #...(...-...4...
    6fb4:	00000037 0000003c 00000046 00000050     7...<...F...P...

00006fc4 <sd_mmc_trans_units>:
    6fc4:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00006fe0 <sd_trans_multipliers>:
    6fe0:	00000000 0000000a 0000000c 0000000d     ................
    6ff0:	0000000f 00000014 00000019 0000001e     ................
    7000:	00000023 00000028 0000002d 00000032     #...(...-...2...
    7010:	00000037 0000003c 00000046 00000050     7...<...F...P...
    7020:	00000fba 00001090 00001090 00000efc     ................
    7030:	00001090 00001090 00001090 00001090     ................
    7040:	00001090 00001090 00001090 00001090     ................
    7050:	00001090 00001090 00001090 00001090     ................
    7060:	00001090 00001090 00000f20 00001090     ........ .......
    7070:	00001090 00001090 00001090 00001090     ................
    7080:	00001090 00001090 00000faa 0000103e     ............>...
    7090:	00001090 00001090 0000105e 00001090     ........^.......
    70a0:	00001090 00001090 00001090 00001090     ................
    70b0:	00001090 00000fe6 00001090 00001090     ................
    70c0:	00001080 00001090 00001088 00001090     ................
    70d0:	00001090 00001090 00001090 00001076     ............v...
    70e0:	00001090 00001090 00001090 00001090     ................
    70f0:	00001090 00001090 00001090 00001090     ................
    7100:	00001090 00001090 00001090 00001090     ................
    7110:	00001090 00001090 00001090 00001090     ................
    7120:	00001090 00001090 00001090 00001090     ................
    7130:	00001090 00001090 00001090 00001090     ................
    7140:	00001090 00001090 00001090 00001090     ................
    7150:	00001090 00001090 00001090 00001090     ................
    7160:	00001090 00001090 00001090 00001090     ................
    7170:	00001090 00001090 00001090 00001090     ................
    7180:	00001090 00001090 00000fb2 31333231     ............1231
    7190:	32313332 33323133 00000000 0000212a     23123123....*!..
    71a0:	00002126 00002126 00002194 00002194     &!..&!...!...!..
    71b0:	0000213e 00002130 00002144 00002182     >!..0!..D!...!..
    71c0:	0000229c 0000227c 0000227c 00002308     ."..|"..|"...#..
    71d0:	0000228e 000022aa 00002280 000022b8     ."..."..."..."..
    71e0:	000022f8 00003a18 00003a26 00003ac0     ."...:..&:...:..
    71f0:	00003b60 00003bc4                       `;...;..

000071f8 <_usb_device_irq_bits>:
    71f8:	00080004 00800070 01000001 00000200     ....p...........

00007208 <_usb_endpoint_irq_bits>:
    7208:	60100c03 42000800 42000c00 42001000     ...`...B...B...B
    7218:	42001400 42001800 42001c00 2f445322     ...B...B...B"SD/
    7228:	20434d4d 64726143 65766f20 50532072     MMC Card over SP
    7238:	00002249                                I"..

0000723c <_global_impure_ptr>:
    723c:	20000100                                ... 

00007240 <__sf_fake_stderr>:
	...

00007260 <__sf_fake_stdin>:
	...

00007280 <__sf_fake_stdout>:
	...

000072a0 <_init>:
    72a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72a2:	46c0      	nop			; (mov r8, r8)
    72a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    72a6:	bc08      	pop	{r3}
    72a8:	469e      	mov	lr, r3
    72aa:	4770      	bx	lr

000072ac <__init_array_start>:
    72ac:	000000dd 	.word	0x000000dd

000072b0 <_fini>:
    72b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72b2:	46c0      	nop			; (mov r8, r8)
    72b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    72b6:	bc08      	pop	{r3}
    72b8:	469e      	mov	lr, r3
    72ba:	4770      	bx	lr

000072bc <__fini_array_start>:
    72bc:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <sd_mmc_cards>:
	...
20000014:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

20000030 <udi_api_msc>:
20000030:	0abd 0000 1131 0000 1159 0000 0a61 0000     ....1...Y...a...
20000040:	0000 0000                                   ....

20000044 <udi_msc_b_ack_trans>:
20000044:	0101                                             .

20000045 <udi_msc_b_reset_trans>:
20000045:	0001 5500                                        ...

20000048 <udi_msc_csw>:
20000048:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20000058 <udi_msc_inquiry_data.12578>:
20000058:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
20000078:	2e31 3030                                   1.00

2000007c <udc_string_desc>:
2000007c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000098 <udc_string_desc_languageid>:
20000098:	0304 0409                                   ....

2000009c <udc_string_manufacturer_name>:
2000009c:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

200000a8 <udc_string_product_name>:
200000a8:	534d 0043                                   MSC.

200000ac <udc_config>:
200000ac:	00e0 2000 00b8 2000 0000 0000               ... ... ....

200000b8 <udc_config_lsfs>:
200000b8:	00c0 2000 00f4 2000                         ... ... 

200000c0 <udc_desc_fs>:
200000c0:	0209 0020 0101 c000 0932 0004 0200 0608     .. .....2.......
200000d0:	0050 0507 0281 0040 0700 0205 4002 0000     P.....@......@..

200000e0 <udc_device_desc>:
200000e0:	0112 0200 0000 4000 03eb 2403 0100 0201     .......@...$....
200000f0:	0103 0000                                   ....

200000f4 <udi_apis>:
200000f4:	0030 2000                                   0.. 

200000f8 <ss_pins>:
200000f8:	0105                                             .

200000f9 <g_interrupt_enabled>:
200000f9:	0001 0000                                        ...

200000fc <_impure_ptr>:
200000fc:	0100 2000                                   ... 

20000100 <impure_data>:
20000100:	0000 0000 7260 0000 7280 0000 7240 0000     ....`r...r..@r..
	...
